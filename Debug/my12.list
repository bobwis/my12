
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a5b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d6a4  0802a7b8  0802a7b8  0003a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047e5c  08047e5c  000606f4  2**0
                  CONTENTS
  4 .ARM          00000008  08047e5c  08047e5c  00057e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08047e64  08047e64  000606f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08047e64  08047e64  00057e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047e68  08047e68  00057e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f4  20000000  08047e6c  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002fa6c  200006f8  08048560  000606f8  2**3
                  ALLOC
 10 ._user_heap_stack 0001e804  20030164  08048560  00070164  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009210e  00000000  00000000  00060722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013703  00000000  00000000  000f2830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00053ec3  00000000  00000000  00105f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037d0  00000000  00000000  00159df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009940  00000000  00000000  0015d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049d7c  00000000  00000000  00166f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00092c6a  00000000  00000000  001b0c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a689  00000000  00000000  002438ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0037df77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d854  00000000  00000000  0037dfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f8 	.word	0x200006f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a7a0 	.word	0x0802a7a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006fc 	.word	0x200006fc
 800023c:	0802a7a0 	.word	0x0802a7a0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000728 	.word	0x20000728
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	200007a8 	.word	0x200007a8

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	20000728 	.word	0x20000728
 8000708:	40000c00 	.word	0x40000c00
 800070c:	200007a8 	.word	0x200007a8

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f026 f8aa 	bl	802687c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f009 b84f 	b.w	80097d0 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802a9e4 	.word	0x0802a9e4

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219b      	movs	r1, #155	; 0x9b
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f005 f8c6 	bl	80058e4 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219d      	movs	r1, #157	; 0x9d
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f005 f8ba 	bl	80058e4 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f00a f917 	bl	800aa54 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219c      	movs	r1, #156	; 0x9c
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f005 f844 	bl	80058e4 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	0802a9fc 	.word	0x0802a9fc
 800086c:	200002b8 	.word	0x200002b8
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <ADC_Conv_complete+0x200>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <ADC_Conv_complete+0x204>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4980      	ldr	r1, [pc, #512]	; (8000a94 <ADC_Conv_complete+0x208>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ADC_Conv_complete+0x20c>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4880      	ldr	r0, [pc, #512]	; (8000a9c <ADC_Conv_complete+0x210>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681c      	ldr	r4, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ADC_Conv_complete+0x214>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7815      	ldrb	r5, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f504 64b8 	addeq.w	r4, r4, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60e3      	str	r3, [r4, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	022b      	lsls	r3, r5, #8
 80008b6:	9505      	str	r5, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460d      	mov	r5, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <ADC_Conv_complete+0x218>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a1      	str	r1, [r4, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8000af4 <ADC_Conv_complete+0x268>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	6063      	str	r3, [r4, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8d9 3000 	ldr.w	r3, [r9]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c9 3000 	str.w	r3, [r9]
	if (sigsuppress) {
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03c      	beq.n	8000972 <ADC_Conv_complete+0xe6>
		sigsend = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c9 3000 	str.w	r3, [r9]
	if (sigsend) {
 80008fe:	f8d9 3000 	ldr.w	r3, [r9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d02c      	beq.n	8000960 <ADC_Conv_complete+0xd4>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <ADC_Conv_complete+0x220>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f000 809d 	beq.w	8000a4a <ADC_Conv_complete+0x1be>
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <ADC_Conv_complete+0x208>)
		sigprev = 1;	// remember this trigger for next packet
 8000912:	2101      	movs	r1, #1
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000914:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000916:	6019      	str	r1, [r3, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000918:	440a      	add	r2, r1
		ledhang = 15;		// 15 x 10ms in Idle proc
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <ADC_Conv_complete+0x224>)
 800091c:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 800091e:	67c2      	str	r2, [r0, #124]	; 0x7c
		ledhang = 15;		// 15 x 10ms in Idle proc
 8000920:	6019      	str	r1, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000922:	4a64      	ldr	r2, [pc, #400]	; (8000ab4 <ADC_Conv_complete+0x228>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	d10b      	bne.n	8000948 <ADC_Conv_complete+0xbc>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <ADC_Conv_complete+0x22c>)
		adcbgbaseacc = 0;
 8000932:	2000      	movs	r0, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000934:	4d61      	ldr	r5, [pc, #388]	; (8000abc <ADC_Conv_complete+0x230>)
 8000936:	680b      	ldr	r3, [r1, #0]
		samplecnt = 0;
 8000938:	6010      	str	r0, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4c60      	ldr	r4, [pc, #384]	; (8000ac0 <ADC_Conv_complete+0x234>)
		adcbgbaseacc = 0;
 800093e:	6008      	str	r0, [r1, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000940:	fba5 2303 	umull	r2, r3, r5, r3
 8000944:	0b9b      	lsrs	r3, r3, #14
 8000946:	6023      	str	r3, [r4, #0]
	if (xTaskToNotify == NULL) {
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <ADC_Conv_complete+0x238>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	f000 8097 	beq.w	8000a80 <ADC_Conv_complete+0x1f4>
	} else if (sigsend) {
 8000952:	f8d9 2000 	ldr.w	r2, [r9]
 8000956:	2a00      	cmp	r2, #0
 8000958:	d17c      	bne.n	8000a54 <ADC_Conv_complete+0x1c8>
}
 800095a:	b007      	add	sp, #28
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ADC_Conv_complete+0x220>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	b112      	cbz	r2, 800096c <ADC_Conv_complete+0xe0>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <ADC_Conv_complete+0x23c>)
 8000968:	2101      	movs	r1, #1
 800096a:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7d7      	b.n	8000922 <ADC_Conv_complete+0x96>
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	469c      	mov	ip, r3
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <ADC_Conv_complete+0x240>)
 8000976:	340e      	adds	r4, #14
 8000978:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000af8 <ADC_Conv_complete+0x26c>
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <ADC_Conv_complete+0x244>)
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <ADC_Conv_complete+0x248>)
 8000984:	f8cd c010 	str.w	ip, [sp, #16]
 8000988:	881b      	ldrh	r3, [r3, #0]
				pretrigcnt++;
 800098a:	9400      	str	r4, [sp, #0]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <ADC_Conv_complete+0x250>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <ADC_Conv_complete+0x254>)
 800099c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <ADC_Conv_complete+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	9301      	str	r3, [sp, #4]
			lastmeanwindiff = abs(meanwindiff);
 80009a6:	2900      	cmp	r1, #0
			thissamp = (*adcbuf16)[i];
 80009a8:	9c00      	ldr	r4, [sp, #0]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009aa:	f00c 0a1f 	and.w	sl, ip, #31
			if (sigsend)
 80009ae:	f8d9 b000 	ldr.w	fp, [r9]
			lastmeanwindiff = abs(meanwindiff);
 80009b2:	bfb8      	it	lt
 80009b4:	4249      	neglt	r1, r1
			thissamp = (*adcbuf16)[i];
 80009b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 80009ba:	f10c 0c01 	add.w	ip, ip, #1
			lastmeanwindiff = abs(meanwindiff);
 80009be:	b28e      	uxth	r6, r1
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c0:	9903      	ldr	r1, [sp, #12]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009c2:	4418      	add	r0, r3
			adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80009c4:	441d      	add	r5, r3
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c6:	eb06 0e01 	add.w	lr, r6, r1
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009ca:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
			lastsamp[j] = thissamp;			// save last samples
 80009ce:	f828 301a 	strh.w	r3, [r8, sl, lsl #1]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009d2:	1a40      	subs	r0, r0, r1
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009d4:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
			thissamp = (*adcbuf16)[i];
 80009d8:	9400      	str	r4, [sp, #0]
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009da:	1a52      	subs	r2, r2, r1
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009dc:	f340 114f 	sbfx	r1, r0, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009e0:	9c02      	ldr	r4, [sp, #8]
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009e2:	1a5b      	subs	r3, r3, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009ea:	441a      	add	r2, r3
			meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 80009ec:	f342 114f 	sbfx	r1, r2, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
			windiff[j] = meanwindiff;	// store latest window mean of differences
 80009f4:	f847 102a 	str.w	r1, [r7, sl, lsl #2]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	eb03 0a04 	add.w	sl, r3, r4
 8000a02:	45f2      	cmp	sl, lr
 8000a04:	dd04      	ble.n	8000a10 <ADC_Conv_complete+0x184>
				pretrigcnt++;
 8000a06:	9c01      	ldr	r4, [sp, #4]
 8000a08:	3401      	adds	r4, #1
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	9404      	str	r4, [sp, #16]
			if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000a10:	4573      	cmp	r3, lr
 8000a12:	dd05      	ble.n	8000a20 <ADC_Conv_complete+0x194>
 8000a14:	f1bb 0f00 	cmp.w	fp, #0
 8000a18:	d102      	bne.n	8000a20 <ADC_Conv_complete+0x194>
				sigsend = 1; // the real trigger
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c9 3000 	str.w	r3, [r9]
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000a20:	f5bc 7f36 	cmp.w	ip, #728	; 0x2d8
 8000a24:	d1bf      	bne.n	80009a6 <ADC_Conv_complete+0x11a>
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <ADC_Conv_complete+0x250>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <ADC_Conv_complete+0x254>)
 8000a34:	8019      	strh	r1, [r3, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <ADC_Conv_complete+0x25c>)
 8000a38:	801e      	strh	r6, [r3, #0]
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af5e 	beq.w	80008fe <ADC_Conv_complete+0x72>
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <ADC_Conv_complete+0x258>)
 8000a44:	9a01      	ldr	r2, [sp, #4]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e759      	b.n	80008fe <ADC_Conv_complete+0x72>
			++adcbatchid; // start a new adc batch number
 8000a4a:	9a05      	ldr	r2, [sp, #20]
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	700a      	strb	r2, [r1, #0]
 8000a52:	e75d      	b.n	8000910 <ADC_Conv_complete+0x84>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a54:	4c25      	ldr	r4, [pc, #148]	; (8000aec <ADC_Conv_complete+0x260>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f017 fcc9 	bl	80183f0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f43f af7a 	beq.w	800095a <ADC_Conv_complete+0xce>
 8000a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	b007      	add	sp, #28
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <ADC_Conv_complete+0x264>)
}
 8000a82:	b007      	add	sp, #28
 8000a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a88:	f025 bef8 	b.w	802687c <puts>
 8000a8c:	20000728 	.word	0x20000728
 8000a90:	20000714 	.word	0x20000714
 8000a94:	2000303c 	.word	0x2000303c
 8000a98:	20000784 	.word	0x20000784
 8000a9c:	20000724 	.word	0x20000724
 8000aa0:	200007a8 	.word	0x200007a8
 8000aa4:	2000078c 	.word	0x2000078c
 8000aa8:	200007a0 	.word	0x200007a0
 8000aac:	20000798 	.word	0x20000798
 8000ab0:	2000077c 	.word	0x2000077c
 8000ab4:	20000790 	.word	0x20000790
 8000ab8:	20000718 	.word	0x20000718
 8000abc:	16816817 	.word	0x16816817
 8000ac0:	2000072c 	.word	0x2000072c
 8000ac4:	20000838 	.word	0x20000838
 8000ac8:	20000794 	.word	0x20000794
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	200007b0 	.word	0x200007b0
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000830 	.word	0x20000830
 8000adc:	200007ac 	.word	0x200007ac
 8000ae0:	20000780 	.word	0x20000780
 8000ae4:	20000788 	.word	0x20000788
 8000ae8:	20000738 	.word	0x20000738
 8000aec:	20000834 	.word	0x20000834
 8000af0:	0802aa14 	.word	0x0802aa14
 8000af4:	2000079c 	.word	0x2000079c
 8000af8:	2000073c 	.word	0x2000073c

08000afc <startadc>:

void startadc() {
 8000afc:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000afe:	492b      	ldr	r1, [pc, #172]	; (8000bac <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000b00:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000b06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b08:	4d2b      	ldr	r5, [pc, #172]	; (8000bb8 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000b0e:	f025 feb5 	bl	802687c <puts>
	osDelay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f015 fd92 	bl	801663c <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b18:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000b1c:	f018 f95c 	bl	8018dd8 <pvPortMalloc>
 8000b20:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d03d      	beq.n	8000ba2 <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000b26:	0783      	lsls	r3, r0, #30
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d128      	bne.n	8000b7e <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b2c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b30:	2155      	movs	r1, #85	; 0x55
 8000b32:	4620      	mov	r0, r4
 8000b34:	f024 fe68 	bl	8025808 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b38:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b3c:	21aa      	movs	r1, #170	; 0xaa
 8000b3e:	18a0      	adds	r0, r4, r2
 8000b40:	f024 fe62 	bl	8025808 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b44:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b4a:	f104 0110 	add.w	r1, r4, #16
 8000b4e:	4c1c      	ldr	r4, [pc, #112]	; (8000bc0 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b50:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b54:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b58:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b5a:	f7ff fded 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <startadc+0xcc>)
 8000b60:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b64:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b66:	f008 fd85 	bl	8009674 <HAL_ADC_Start>
 8000b6a:	b9b0      	cbnz	r0, 8000b9a <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <startadc+0xd4>)
 8000b6e:	f008 fd81 	bl	8009674 <HAL_ADC_Start>
 8000b72:	b970      	cbnz	r0, 8000b92 <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <startadc+0xc8>)
 8000b76:	f008 fd7d 	bl	8009674 <HAL_ADC_Start>
 8000b7a:	b928      	cbnz	r0, 8000b88 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <startadc+0xd8>)
 8000b80:	f025 fe7c 	bl	802687c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b84:	682c      	ldr	r4, [r5, #0]
 8000b86:	e7d1      	b.n	8000b2c <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <startadc+0xdc>)
}
 8000b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b8e:	f025 be75 	b.w	802687c <puts>
		printf("ADC2 failed start\r\n");
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <startadc+0xe0>)
 8000b94:	f025 fe72 	bl	802687c <puts>
 8000b98:	e7ec      	b.n	8000b74 <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <startadc+0xe4>)
 8000b9c:	f025 fe6e 	bl	802687c <puts>
 8000ba0:	e7e4      	b.n	8000b6c <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <startadc+0xe8>)
 8000ba4:	f025 fe6a 	bl	802687c <puts>
		for (;;)
 8000ba8:	e7fe      	b.n	8000ba8 <startadc+0xac>
 8000baa:	bf00      	nop
 8000bac:	066ff300 	.word	0x066ff300
 8000bb0:	2000303c 	.word	0x2000303c
 8000bb4:	0802aa28 	.word	0x0802aa28
 8000bb8:	20000784 	.word	0x20000784
 8000bbc:	20000720 	.word	0x20000720
 8000bc0:	2000071c 	.word	0x2000071c
 8000bc4:	20002198 	.word	0x20002198
 8000bc8:	20000725 	.word	0x20000725
 8000bcc:	20002228 	.word	0x20002228
 8000bd0:	200021e0 	.word	0x200021e0
 8000bd4:	0802aa64 	.word	0x0802aa64
 8000bd8:	0802aac4 	.word	0x0802aac4
 8000bdc:	0802aab0 	.word	0x0802aab0
 8000be0:	0802aa9c 	.word	0x0802aa9c
 8000be4:	0802aa3c 	.word	0x0802aa3c

08000be8 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000be8:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bea:	b169      	cbz	r1, 8000c08 <xcrc32+0x20>
 8000bec:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bf2:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bf6:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bfa:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000c04:	d1f5      	bne.n	8000bf2 <xcrc32+0xa>
 8000c06:	4770      	bx	lr
  unsigned int crc = init;
 8000c08:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000c0a:	4770      	bx	lr
 8000c0c:	0802aad8 	.word	0x0802aad8

08000c10 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000c10:	b500      	push	{lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000c14:	4668      	mov	r0, sp
 8000c16:	f00b fda9 	bl	800c76c <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <stampboot+0x7c>)
 8000c1c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000c24:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c26:	d01b      	beq.n	8000c60 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c28:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c2c:	d015      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c2e:	f00b fbb9 	bl	800c3a4 <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c32:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c3a:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c3c:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c3e:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c40:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c42:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c46:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c48:	f00b fcb8 	bl	800c5bc <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c4c:	b9c0      	cbnz	r0, 8000c80 <stampboot+0x70>
			printf("stampboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c4e:	f00b fbc5 	bl	800c3dc <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c52:	b980      	cbnz	r0, 8000c76 <stampboot+0x66>
			printf("stampboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <stampboot+0x80>)
 8000c56:	f025 fe11 	bl	802687c <puts>
	}
}
 8000c5a:	b009      	add	sp, #36	; 0x24
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d0f9      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c66:	f00b fb9d 	bl	800c3a4 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c6e:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c72:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c74:	e7e2      	b.n	8000c3c <stampboot+0x2c>
			printf("stampboot: failed to OBLaunch %d\n", res);
 8000c76:	4601      	mov	r1, r0
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <stampboot+0x84>)
 8000c7a:	f025 fd63 	bl	8026744 <iprintf>
 8000c7e:	e7e9      	b.n	8000c54 <stampboot+0x44>
			printf("stampboot: failed to OBProgram %d\n", res);
 8000c80:	4601      	mov	r1, r0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <stampboot+0x88>)
 8000c84:	f025 fd5e 	bl	8026744 <iprintf>
 8000c88:	e7e1      	b.n	8000c4e <stampboot+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	08000c11 	.word	0x08000c11
 8000c90:	0802af20 	.word	0x0802af20
 8000c94:	0802aefc 	.word	0x0802aefc
 8000c98:	0802aed8 	.word	0x0802aed8

08000c9c <printflasherr>:
void printflasherr() {
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c9e:	4d1e      	ldr	r5, [pc, #120]	; (8000d18 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000ca0:	4f1e      	ldr	r7, [pc, #120]	; (8000d1c <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000ca2:	4e1f      	ldr	r6, [pc, #124]	; (8000d20 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000ca4:	f00b fbc8 	bl	800c438 <HAL_FLASH_GetError>
	switch (err) {
 8000ca8:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000caa:	4604      	mov	r4, r0
	switch (err) {
 8000cac:	2b1e      	cmp	r3, #30
 8000cae:	d811      	bhi.n	8000cd4 <printflasherr+0x38>
 8000cb0:	e8df f003 	tbb	[pc, r3]
 8000cb4:	102f102b 	.word	0x102f102b
 8000cb8:	102d1010 	.word	0x102d1010
 8000cbc:	10101010 	.word	0x10101010
 8000cc0:	10291010 	.word	0x10291010
 8000cc4:	10101010 	.word	0x10101010
 8000cc8:	10101010 	.word	0x10101010
 8000ccc:	10101010 	.word	0x10101010
 8000cd0:	1010      	.short	0x1010
 8000cd2:	1d          	.byte	0x1d
 8000cd3:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <printflasherr+0x88>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f025 ff1d 	bl	8026b18 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <printflasherr+0x8c>)
 8000ce2:	f025 fd2f 	bl	8026744 <iprintf>
	res = HAL_FLASH_Lock();
 8000ce6:	f00b fb53 	bl	800c390 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cea:	b940      	cbnz	r0, 8000cfe <printflasherr+0x62>
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cee:	490f      	ldr	r1, [pc, #60]	; (8000d2c <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f025 fd27 	bl	8026744 <iprintf>
	res = HAL_FLASH_Lock();
 8000cf6:	f00b fb4b 	bl	800c390 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f6      	beq.n	8000cec <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printflasherr+0x94>)
 8000d00:	f025 fdbc 	bl	802687c <puts>
		printflasherr();
 8000d04:	e7ce      	b.n	8000ca4 <printflasherr+0x8>
		msg = "Write Protected";
 8000d06:	490b      	ldr	r1, [pc, #44]	; (8000d34 <printflasherr+0x98>)
		break;
 8000d08:	e7f2      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7f0      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Programming alignment";
 8000d0e:	4639      	mov	r1, r7
 8000d10:	e7ee      	b.n	8000cf0 <printflasherr+0x54>
	switch (err) {
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <printflasherr+0x9c>)
 8000d14:	e7ec      	b.n	8000cf0 <printflasherr+0x54>
 8000d16:	bf00      	nop
 8000d18:	0802afdc 	.word	0x0802afdc
 8000d1c:	0802af68 	.word	0x0802af68
 8000d20:	0802af54 	.word	0x0802af54
 8000d24:	0802afa8 	.word	0x0802afa8
 8000d28:	0802afbc 	.word	0x0802afbc
 8000d2c:	0802af48 	.word	0x0802af48
 8000d30:	0802b000 	.word	0x0802b000
 8000d34:	0802af80 	.word	0x0802af80
 8000d38:	0802af90 	.word	0x0802af90

08000d3c <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d3e:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d40:	4605      	mov	r5, r0
 8000d42:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d44:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4c:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	2002      	movs	r0, #2
 8000d54:	f00b fba2 	bl	800c49c <HAL_FLASH_Program>
 8000d58:	b990      	cbnz	r0, 8000d80 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d68:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d100      	bne.n	8000d72 <WriteFlashWord.part.0+0x36>
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d72:	4632      	mov	r2, r6
 8000d74:	4629      	mov	r1, r5
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <WriteFlashWord.part.0+0x70>)
 8000d78:	f025 fce4 	bl	8026744 <iprintf>
		return (HAL_ERROR);
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d80:	f7ff ff8c 	bl	8000c9c <printflasherr>
			printflasherr();
 8000d84:	f7ff ff8a 	bl	8000c9c <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <WriteFlashWord.part.0+0x74>)
 8000d8e:	f025 fcd9 	bl	8026744 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d92:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d94:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9a:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	0802b070 	.word	0x0802b070
 8000db0:	0802b040 	.word	0x0802b040

08000db4 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000dba:	f00b fad5 	bl	800c368 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d14f      	bne.n	8000e62 <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dc2:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dc6:	4d34      	ldr	r5, [pc, #208]	; (8000e98 <EraseFlash+0xe4>)
 8000dc8:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dca:	4626      	mov	r6, r4
 8000dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dd0:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dd2:	d041      	beq.n	8000e58 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000dda:	4930      	ldr	r1, [pc, #192]	; (8000e9c <EraseFlash+0xe8>)
 8000ddc:	1f23      	subs	r3, r4, #4
 8000dde:	4421      	add	r1, r4
 8000de0:	e001      	b.n	8000de6 <EraseFlash+0x32>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d006      	beq.n	8000df4 <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000de6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dea:	3201      	adds	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <EraseFlash+0x2e>
	if ((dirty) && (noterased)) {
 8000dee:	4f2c      	ldr	r7, [pc, #176]	; (8000ea0 <EraseFlash+0xec>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b92b      	cbnz	r3, 8000e00 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <EraseFlash+0xf0>)
 8000df6:	f025 fd41 	bl	802687c <puts>
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f015 fc1a 	bl	801663c <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <EraseFlash+0xf4>)
 8000e0a:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000e0e:	f025 fc99 	bl	8026744 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e16:	a901      	add	r1, sp, #4
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e1a:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e22:	f00b fd0f 	bl	800c844 <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000e26:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e28:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e2a:	1c48      	adds	r0, r1, #1
 8000e2c:	d12d      	bne.n	8000e8a <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e2e:	bb25      	cbnz	r5, 8000e7a <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <EraseFlash+0xf8>)
 8000e32:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e36:	f025 fd21 	bl	802687c <puts>
			noterased = 0;
 8000e3a:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e3c:	e001      	b.n	8000e42 <EraseFlash+0x8e>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d0db      	beq.n	8000dfa <EraseFlash+0x46>
 8000e42:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e44:	3604      	adds	r6, #4
 8000e46:	680b      	ldr	r3, [r1, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <EraseFlash+0x8a>
				noterased = 1;
 8000e4c:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <EraseFlash+0xfc>)
				noterased = 1;
 8000e50:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e52:	f025 fc77 	bl	8026744 <iprintf>
 8000e56:	e7d0      	b.n	8000dfa <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e60:	e7bb      	b.n	8000dda <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e62:	4601      	mov	r1, r0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <EraseFlash+0x100>)
 8000e66:	f025 fc6d 	bl	8026744 <iprintf>
		printflasherr();
 8000e6a:	f7ff ff17 	bl	8000c9c <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <EraseFlash+0x104>)
 8000e70:	f025 fd04 	bl	802687c <puts>
		printflasherr();
 8000e74:	f7ff ff12 	bl	8000c9c <printflasherr>
 8000e78:	e7a3      	b.n	8000dc2 <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EraseFlash+0x108>)
 8000e7c:	f025 fcfe 	bl	802687c <puts>
			printflasherr();
 8000e80:	f7ff ff0c 	bl	8000c9c <printflasherr>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <EraseFlash+0x10c>)
 8000e8c:	f025 fc5a 	bl	8026744 <iprintf>
		if (res != HAL_OK) {
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d0cd      	beq.n	8000e30 <EraseFlash+0x7c>
 8000e94:	e7f1      	b.n	8000e7a <EraseFlash+0xc6>
 8000e96:	bf00      	nop
 8000e98:	2000083c 	.word	0x2000083c
 8000e9c:	0007fffc 	.word	0x0007fffc
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	0802b14c 	.word	0x0802b14c
 8000ea8:	0802b0cc 	.word	0x0802b0cc
 8000eac:	0802b130 	.word	0x0802b130
 8000eb0:	0802b164 	.word	0x0802b164
 8000eb4:	0802b01c 	.word	0x0802b01c
 8000eb8:	0802b0b0 	.word	0x0802b0b0
 8000ebc:	0802b11c 	.word	0x0802b11c
 8000ec0:	0802b0f4 	.word	0x0802b0f4

08000ec4 <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000ec4:	b500      	push	{lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f00b fc4f 	bl	800c76c <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ece:	f00b fa69 	bl	800c3a4 <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d008      	beq.n	8000eec <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	d009      	beq.n	8000ef8 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ee4:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ee6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000eea:	e007      	b.n	8000efc <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ef2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ef6:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000efc:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000efe:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000f00:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000f02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000f06:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000f08:	f00b fb58 	bl	800c5bc <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000f0c:	b990      	cbnz	r0, 8000f34 <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000f0e:	f00b fa65 	bl	800c3dc <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000f12:	b950      	cbnz	r0, 8000f2a <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("swapping boot....\n");
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <swapboot+0x7c>)
 8000f16:	f025 fcb1 	bl	802687c <puts>
	HAL_FLASH_OB_Lock();
 8000f1a:	f00b fa55 	bl	800c3c8 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <swapboot+0x80>)
 8000f20:	f025 fcac 	bl	802687c <puts>
}
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <swapboot+0x84>)
 8000f2e:	f025 fc09 	bl	8026744 <iprintf>
 8000f32:	e7ef      	b.n	8000f14 <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f34:	4601      	mov	r1, r0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <swapboot+0x88>)
 8000f38:	f025 fc04 	bl	8026744 <iprintf>
 8000f3c:	e7e7      	b.n	8000f0e <swapboot+0x4a>
 8000f3e:	bf00      	nop
 8000f40:	0802b20c 	.word	0x0802b20c
 8000f44:	0802b220 	.word	0x0802b220
 8000f48:	0802b1e8 	.word	0x0802b1e8
 8000f4c:	0802b1c4 	.word	0x0802b1c4

08000f50 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f50:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f52:	4d10      	ldr	r5, [pc, #64]	; (8000f94 <flash_writeword+0x44>)
 8000f54:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f56:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f5a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f5e:	d20a      	bcs.n	8000f76 <flash_writeword+0x26>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fee9 	bl	8000d3c <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f6a:	b938      	cbnz	r0, 8000f7c <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f6c:	6829      	ldr	r1, [r5, #0]
 8000f6e:	680b      	ldr	r3, [r1, #0]
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d109      	bne.n	8000f88 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <flash_writeword+0x48>)
 8000f78:	f025 fc80 	bl	802687c <puts>
		printf("memwrite: WriteFlash error\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <flash_writeword+0x4c>)
 8000f7e:	f025 fc7d 	bl	802687c <puts>
		return (-1);
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <flash_writeword+0x50>)
 8000f8a:	f025 fbdb 	bl	8026744 <iprintf>
		return (-1);
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	2000087c 	.word	0x2000087c
 8000f98:	0802b1a0 	.word	0x0802b1a0
 8000f9c:	0802b230 	.word	0x0802b230
 8000fa0:	0802b24c 	.word	0x0802b24c

08000fa4 <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000fa8:	4e49      	ldr	r6, [pc, #292]	; (80010d0 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000faa:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (noterased)) {
 8000fac:	4949      	ldr	r1, [pc, #292]	; (80010d4 <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fae:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000fb0:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fb2:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (noterased)) {
 8000fb4:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (noterased)) {
 8000fba:	b92f      	cbnz	r7, 8000fc8 <flash_memwrite+0x24>
 8000fbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010e4 <flash_memwrite+0x140>
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d179      	bne.n	80010bc <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d071      	beq.n	80010b0 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fd0:	4f41      	ldr	r7, [pc, #260]	; (80010d8 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000fd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010e8 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fd6:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fd8:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fda:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fdc:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fde:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fe2:	dd1a      	ble.n	800101a <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	dd16      	ble.n	800101a <flash_memwrite+0x76>
 8000fec:	2201      	movs	r2, #1
 8000fee:	4e3b      	ldr	r6, [pc, #236]	; (80010dc <flash_memwrite+0x138>)
			data >>= 8;
 8000ff0:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000ff2:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000ff4:	3201      	adds	r2, #1
			data >>= 8;
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	f103 0e01 	add.w	lr, r3, #1
 8001000:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8001004:	f8cd e000 	str.w	lr, [sp]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800100e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	4299      	cmp	r1, r3
 8001014:	dcec      	bgt.n	8000ff0 <flash_memwrite+0x4c>
 8001016:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 800101a:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800101e:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8001020:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4419      	add	r1, r3
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	1aeb      	subs	r3, r5, r3
 800102c:	4299      	cmp	r1, r3
 800102e:	d229      	bcs.n	8001084 <flash_memwrite+0xe0>
 8001030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010ec <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 8001034:	f8d8 3000 	ldr.w	r3, [r8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc10      	bgt.n	8001062 <flash_memwrite+0xbe>
			data >>= 8;
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	9100      	str	r1, [sp, #0]
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001054:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddee      	ble.n	8001040 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 8001062:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 8001064:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001068:	f7ff ff72 	bl	8000f50 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 8001072:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001076:	4402      	add	r2, r0
 8001078:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 800107a:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800107c:	429a      	cmp	r2, r3
		flash_memptr += 4;
 800107e:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001082:	d3d7      	bcc.n	8001034 <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	429d      	cmp	r5, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	d90c      	bls.n	80010a8 <flash_memwrite+0x104>
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <flash_memwrite+0x138>)
 8001090:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	5ca2      	ldrb	r2, [r4, r2]
 8001098:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 800109a:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d3f4      	bcc.n	8001092 <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 80010a8:	4628      	mov	r0, r5
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4629      	mov	r1, r5
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash_memwrite+0x13c>)
 80010b6:	f025 fb45 	bl	8026744 <iprintf>
 80010ba:	e787      	b.n	8000fcc <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 80010bc:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010ec <flash_memwrite+0x148>
 80010c0:	f8d9 0000 	ldr.w	r0, [r9]
 80010c4:	f7ff fe76 	bl	8000db4 <EraseFlash>
		noterased = 0;
 80010c8:	f8c8 7000 	str.w	r7, [r8]
 80010cc:	e77c      	b.n	8000fc8 <flash_memwrite+0x24>
 80010ce:	bf00      	nop
 80010d0:	20000878 	.word	0x20000878
 80010d4:	20000874 	.word	0x20000874
 80010d8:	20000894 	.word	0x20000894
 80010dc:	20000884 	.word	0x20000884
 80010e0:	0802b270 	.word	0x0802b270
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000880 	.word	0x20000880
 80010ec:	2000087c 	.word	0x2000087c

080010f0 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	noterased = 1;		// now assumed dirty
	if (flash_abort) {
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <memclose+0x13c>)
	noterased = 1;		// now assumed dirty
 80010f2:	2101      	movs	r1, #1
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <memclose+0x140>)
	if (flash_abort) {
 80010f6:	6818      	ldr	r0, [r3, #0]
	noterased = 1;		// now assumed dirty
 80010f8:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d173      	bne.n	80011e6 <memclose+0xf6>
		http_downloading = NOT_LOADING;
		down_total = 0;		// unfreeze main
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <memclose+0x144>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
void* memclose() {
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	b084      	sub	sp, #16
	if (q_index > 0) {			// unfinished residual write still needed
 800110a:	dd0b      	ble.n	8001124 <memclose+0x34>
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <memclose+0x148>)
 800110e:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 8001112:	f852 3b04 	ldr.w	r3, [r2], #4
 8001116:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 8001118:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 800111a:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 800111e:	d1f8      	bne.n	8001112 <memclose+0x22>
		}
		flash_writeword(residual);
 8001120:	f7ff ff16 	bl	8000f50 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 8001124:	4e45      	ldr	r6, [pc, #276]	; (800123c <memclose+0x14c>)
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <memclose+0x150>)
 8001128:	6832      	ldr	r2, [r6, #0]
 800112a:	4d46      	ldr	r5, [pc, #280]	; (8001244 <memclose+0x154>)
 800112c:	4f46      	ldr	r7, [pc, #280]	; (8001248 <memclose+0x158>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	4845      	ldr	r0, [pc, #276]	; (800124c <memclose+0x15c>)
 8001136:	682a      	ldr	r2, [r5, #0]
 8001138:	f025 fb04 	bl	8026744 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f015 fa7c 	bl	801663c <osDelay>
	res = HAL_FLASH_Lock();
 8001144:	f00b f924 	bl	800c390 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8001148:	4604      	mov	r4, r0
 800114a:	2800      	cmp	r0, #0
 800114c:	d152      	bne.n	80011f4 <memclose+0x104>
		printf("eeprom: flash2 failed\n");
		down_total = 0;		// unfreeze main
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 800114e:	682b      	ldr	r3, [r5, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001154:	f8d7 8000 	ldr.w	r8, [r7]
	crc = xcrc32(base, length, xinit);
 8001158:	4619      	mov	r1, r3
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	4640      	mov	r0, r8
 800115e:	f7ff fd43 	bl	8000be8 <xcrc32>
 8001162:	4605      	mov	r5, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	4642      	mov	r2, r8
 8001168:	4839      	ldr	r0, [pc, #228]	; (8001250 <memclose+0x160>)
 800116a:	4629      	mov	r1, r5
 800116c:	f025 faea 	bl	8026744 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <memclose+0x164>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	1c53      	adds	r3, r2, #1
 8001176:	d008      	beq.n	800118a <memclose+0x9a>
 8001178:	42aa      	cmp	r2, r5
 800117a:	d006      	beq.n	800118a <memclose+0x9a>
		printf(
 800117c:	4623      	mov	r3, r4
 800117e:	4629      	mov	r1, r5
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <memclose+0x168>)
		down_total = 0;		// unfreeze main
 8001182:	6034      	str	r4, [r6, #0]
		printf(
 8001184:	f025 fade 	bl	8026744 <iprintf>
 8001188:	e027      	b.n	80011da <memclose+0xea>
		osDelay(5);
 800118a:	2005      	movs	r0, #5
 800118c:	f015 fa56 	bl	801663c <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <memclose+0x16c>)
 8001192:	f00b faeb 	bl	800c76c <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8001196:	f00b f905 	bl	800c3a4 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <memclose+0x16c>)
 800119e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011a2:	bf0b      	itete	eq
 80011a4:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80011a8:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 80011ac:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 80011b0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 80011b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 80011b8:	f00b fa00 	bl	800c5bc <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 80011bc:	bb78      	cbnz	r0, 800121e <memclose+0x12e>
		res = HAL_FLASH_OB_Launch();
 80011be:	f00b f90d 	bl	800c3dc <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 80011c2:	bb28      	cbnz	r0, 8001210 <memclose+0x120>
		HAL_FLASH_OB_Lock();
 80011c4:	f00b f900 	bl	800c3c8 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <memclose+0x170>)
 80011ca:	f025 fb57 	bl	802687c <puts>
		osDelay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f015 fa34 	bl	801663c <osDelay>
		rebootme(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f002 fd77 	bl	8003cc8 <rebootme>
	http_downloading = NOT_LOADING;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <memclose+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	b004      	add	sp, #16
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		flash_abort = 0;
 80011e6:	2200      	movs	r2, #0
		http_downloading = NOT_LOADING;
 80011e8:	481e      	ldr	r0, [pc, #120]	; (8001264 <memclose+0x174>)
		down_total = 0;		// unfreeze main
 80011ea:	4914      	ldr	r1, [pc, #80]	; (800123c <memclose+0x14c>)
		flash_abort = 0;
 80011ec:	601a      	str	r2, [r3, #0]
		http_downloading = NOT_LOADING;
 80011ee:	6002      	str	r2, [r0, #0]
		down_total = 0;		// unfreeze main
 80011f0:	600a      	str	r2, [r1, #0]
}
 80011f2:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <memclose+0x178>)
 80011f6:	f025 fb41 	bl	802687c <puts>
		printflasherr();
 80011fa:	f7ff fd4f 	bl	8000c9c <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <memclose+0x17c>)
 8001200:	f025 fb3c 	bl	802687c <puts>
		down_total = 0;		// unfreeze main
 8001204:	2300      	movs	r3, #0
		return ((void*) 0);
 8001206:	4618      	mov	r0, r3
		down_total = 0;		// unfreeze main
 8001208:	6033      	str	r3, [r6, #0]
}
 800120a:	b004      	add	sp, #16
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 8001210:	4601      	mov	r1, r0
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <memclose+0x180>)
 8001214:	f025 fa96 	bl	8026744 <iprintf>
			down_total = 0;		// unfreeze main
 8001218:	2300      	movs	r3, #0
 800121a:	6033      	str	r3, [r6, #0]
 800121c:	e7d2      	b.n	80011c4 <memclose+0xd4>
			printf("memclose: failed to OBProgram %d\n", res);
 800121e:	4601      	mov	r1, r0
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <memclose+0x184>)
 8001222:	f025 fa8f 	bl	8026744 <iprintf>
			down_total = 0;		// unfreeze main
 8001226:	2300      	movs	r3, #0
 8001228:	6033      	str	r3, [r6, #0]
 800122a:	e7c8      	b.n	80011be <memclose+0xce>
 800122c:	20000874 	.word	0x20000874
 8001230:	20000008 	.word	0x20000008
 8001234:	20000894 	.word	0x20000894
 8001238:	20000884 	.word	0x20000884
 800123c:	20001690 	.word	0x20001690
 8001240:	2000087c 	.word	0x2000087c
 8001244:	20000878 	.word	0x20000878
 8001248:	20000004 	.word	0x20000004
 800124c:	0802b288 	.word	0x0802b288
 8001250:	0802b3e8 	.word	0x0802b3e8
 8001254:	20000870 	.word	0x20000870
 8001258:	0802b2f8 	.word	0x0802b2f8
 800125c:	20000850 	.word	0x20000850
 8001260:	0802b3ac 	.word	0x0802b3ac
 8001264:	200018dc 	.word	0x200018dc
 8001268:	0802b000 	.word	0x0802b000
 800126c:	0802b2e0 	.word	0x0802b2e0
 8001270:	0802b388 	.word	0x0802b388
 8001274:	0802b364 	.word	0x0802b364

08001278 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <vApplicationMallocFailedHook>:
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationGetIdleTaskMemory+0x18>)
{
 8001286:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001288:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800128e:	4c04      	ldr	r4, [pc, #16]	; (80012a0 <vApplicationGetIdleTaskMemory+0x1c>)
 8001290:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000c98 	.word	0x20000c98
 80012a0:	20000898 	.word	0x20000898

080012a4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <vApplicationGetTimerTaskMemory+0x18>)
{
 80012a6:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a8:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80012ae:	4c04      	ldr	r4, [pc, #16]	; (80012c0 <vApplicationGetTimerTaskMemory+0x1c>)
 80012b0:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 80012b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000154c 	.word	0x2000154c
 80012c0:	20000d4c 	.word	0x20000d4c

080012c4 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	4770      	bx	lr

080012c8 <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80012c8:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 80012ca:	2000      	movs	r0, #0
	http_content_len = content_len;
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <RecvHttpHeaderCallback+0xc>)
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20001694 	.word	0x20001694

080012d8 <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012d8:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 80012da:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012dc:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 80012de:	b158      	cbz	r0, 80012f8 <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 80012e0:	1d21      	adds	r1, r4, #4
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d001      	beq.n	80012ea <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012ea:	8922      	ldrh	r2, [r4, #8]
 80012ec:	6820      	ldr	r0, [r4, #0]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <httpc_get_internal_addr+0x30>)
}
 80012f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012f4:	f01b be16 	b.w	801cf24 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <httpc_get_internal_addr+0x34>)
 80012fa:	f240 1299 	movw	r2, #409	; 0x199
 80012fe:	4904      	ldr	r1, [pc, #16]	; (8001310 <httpc_get_internal_addr+0x38>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <httpc_get_internal_addr+0x3c>)
 8001302:	f025 fa1f 	bl	8026744 <iprintf>
 8001306:	e7eb      	b.n	80012e0 <httpc_get_internal_addr+0x8>
 8001308:	08001749 	.word	0x08001749
 800130c:	0802b414 	.word	0x0802b414
 8001310:	0802b430 	.word	0x0802b430
 8001314:	0802b43c 	.word	0x0802b43c

08001318 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4604      	mov	r4, r0
	if (req->request != NULL) {
 800131c:	6900      	ldr	r0, [r0, #16]
 800131e:	b118      	cbz	r0, 8001328 <httpc_free_state+0x10>
		pbuf_free(req->request);
 8001320:	f01b f946 	bl	801c5b0 <pbuf_free>
		req->request = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 8001328:	6960      	ldr	r0, [r4, #20]
 800132a:	b118      	cbz	r0, 8001334 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 800132c:	f01b f940 	bl	801c5b0 <pbuf_free>
		req->rx_hdrs = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8001334:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 8001336:	4620      	mov	r0, r4
 8001338:	f01a f88e 	bl	801b458 <mem_free>
	if (tpcb != NULL) {
 800133c:	b1c5      	cbz	r5, 8001370 <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 800133e:	2100      	movs	r1, #0
 8001340:	4628      	mov	r0, r5
 8001342:	f01b fef5 	bl	801d130 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8001346:	2100      	movs	r1, #0
 8001348:	4628      	mov	r0, r5
 800134a:	f01b fef5 	bl	801d138 <tcp_recv>
		altcp_err(tpcb, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	4628      	mov	r0, r5
 8001352:	f01b ff29 	bl	801d1a8 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	4628      	mov	r0, r5
 800135a:	4611      	mov	r1, r2
 800135c:	f01b ff46 	bl	801d1ec <tcp_poll>
		altcp_sent(tpcb, NULL);
 8001360:	4628      	mov	r0, r5
 8001362:	2100      	movs	r1, #0
 8001364:	f01b ff04 	bl	801d170 <tcp_sent>
		r = altcp_close(tpcb);
 8001368:	4628      	mov	r0, r5
 800136a:	f01c fd9d 	bl	801dea8 <tcp_close>
		if (r != ERR_OK) {
 800136e:	b908      	cbnz	r0, 8001374 <httpc_free_state+0x5c>
	return ERR_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001374:	4628      	mov	r0, r5
 8001376:	f01c fb9f 	bl	801dab8 <tcp_abort>
			return ERR_ABRT;
 800137a:	f06f 000c 	mvn.w	r0, #12
}
 800137e:	bd38      	pop	{r3, r4, r5, pc}

08001380 <HttpClientFileReceiveCallback>:

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
}

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001380:	b510      	push	{r4, lr}
	char *buf;
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

	if (http_downloading == FLASH_LOADING) {
 8001382:	4c08      	ldr	r4, [pc, #32]	; (80013a4 <HttpClientFileReceiveCallback+0x24>)
 8001384:	6824      	ldr	r4, [r4, #0]
 8001386:	2c01      	cmp	r4, #1
 8001388:	d003      	beq.n	8001392 <HttpClientFileReceiveCallback+0x12>
		stm_rx_callback(arg, pcb, p, err);
	} else if (http_downloading == NXT_LOADING) {
 800138a:	2c03      	cmp	r4, #3
 800138c:	d005      	beq.n	800139a <HttpClientFileReceiveCallback+0x1a>
		nxt_rx_callback(arg, pcb, p, err);
	}

	return (0);
}
 800138e:	2000      	movs	r0, #0
 8001390:	bd10      	pop	{r4, pc}
		stm_rx_callback(arg, pcb, p, err);
 8001392:	f000 fdab 	bl	8001eec <stm_rx_callback>
}
 8001396:	2000      	movs	r0, #0
 8001398:	bd10      	pop	{r4, pc}
		nxt_rx_callback(arg, pcb, p, err);
 800139a:	f004 ff6d 	bl	8006278 <nxt_rx_callback>
}
 800139e:	2000      	movs	r0, #0
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	200018dc 	.word	0x200018dc

080013a8 <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 80013a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	460c      	mov	r4, r1
 80013b0:	461d      	mov	r5, r3
 80013b2:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 80013b6:	b968      	cbnz	r0, 80013d4 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b8:	2900      	cmp	r1, #0
 80013ba:	d032      	beq.n	8001422 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013be:	462b      	mov	r3, r5
 80013c0:	4641      	mov	r1, r8
 80013c2:	4638      	mov	r0, r7
 80013c4:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 80013ca:	b004      	add	sp, #16
 80013cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013d0:	f025 bb6e 	b.w	8026ab0 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013d4:	4616      	mov	r6, r2
 80013d6:	b1e1      	cbz	r1, 8001412 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 80013d8:	2e50      	cmp	r6, #80	; 0x50
 80013da:	d00d      	beq.n	80013f8 <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 80013dc:	4623      	mov	r3, r4
 80013de:	9403      	str	r4, [sp, #12]
 80013e0:	4c14      	ldr	r4, [pc, #80]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013e2:	4641      	mov	r1, r8
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <httpc_create_request_string.constprop.0.isra.0+0x94>)
 80013e6:	4638      	mov	r0, r7
 80013e8:	9501      	str	r5, [sp, #4]
 80013ea:	9600      	str	r6, [sp, #0]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	f025 fb5f 	bl	8026ab0 <sniprintf>
}
 80013f2:	b004      	add	sp, #16
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013fa:	4641      	mov	r1, r8
 80013fc:	4623      	mov	r3, r4
 80013fe:	4638      	mov	r0, r7
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8001404:	9402      	str	r4, [sp, #8]
 8001406:	9500      	str	r5, [sp, #0]
 8001408:	f025 fb52 	bl	8026ab0 <sniprintf>
}
 800140c:	b004      	add	sp, #16
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001414:	f240 12db 	movw	r2, #475	; 0x1db
 8001418:	490b      	ldr	r1, [pc, #44]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800141c:	f025 f992 	bl	8026744 <iprintf>
 8001420:	e7da      	b.n	80013d8 <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001424:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800142c:	f025 f98a 	bl	8026744 <iprintf>
 8001430:	e7c4      	b.n	80013bc <httpc_create_request_string.constprop.0.isra.0+0x14>
 8001432:	bf00      	nop
 8001434:	0802b4d4 	.word	0x0802b4d4
 8001438:	0802b564 	.word	0x0802b564
 800143c:	0802b478 	.word	0x0802b478
 8001440:	0802b50c 	.word	0x0802b50c
 8001444:	0802b414 	.word	0x0802b414
 8001448:	0802b464 	.word	0x0802b464
 800144c:	0802b43c 	.word	0x0802b43c

08001450 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	b085      	sub	sp, #20
 8001456:	460d      	mov	r5, r1
 8001458:	4690      	mov	r8, r2
 800145a:	461e      	mov	r6, r3
 800145c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8001460:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001462:	f1ba 0f00 	cmp.w	sl, #0
 8001466:	d063      	beq.n	8001530 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001468:	f04f 0900 	mov.w	r9, #0
 800146c:	4653      	mov	r3, sl
 800146e:	4632      	mov	r2, r6
 8001470:	4641      	mov	r1, r8
 8001472:	46b3      	mov	fp, r6
 8001474:	e9cd 9900 	strd	r9, r9, [sp]
 8001478:	79a8      	ldrb	r0, [r5, #6]
 800147a:	f7ff ff95 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 800147e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001482:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001484:	4298      	cmp	r0, r3
 8001486:	d861      	bhi.n	800154c <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 8001488:	2034      	movs	r0, #52	; 0x34
 800148a:	f01a f9a1 	bl	801b7d0 <mem_malloc>
	if (req == NULL) {
 800148e:	4604      	mov	r4, r0
 8001490:	2800      	cmp	r0, #0
 8001492:	d064      	beq.n	800155e <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001494:	4649      	mov	r1, r9
 8001496:	2234      	movs	r2, #52	; 0x34
 8001498:	f024 f9b6 	bl	8025808 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 800149c:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 800149e:	2364      	movs	r3, #100	; 0x64
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014a0:	f107 0901 	add.w	r9, r7, #1
 80014a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80014a8:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 80014ac:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014ae:	f01a fead 	bl	801c20c <pbuf_alloc>
 80014b2:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d043      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d140      	bne.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 80014c4:	f01c fc18 	bl	801dcf8 <tcp_new>
 80014c8:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d038      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014ce:	79ab      	ldrb	r3, [r5, #6]
 80014d0:	bb63      	cbnz	r3, 800152c <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 80014d2:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014d4:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 80014d6:	f01b fe2b 	bl	801d130 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 80014da:	4922      	ldr	r1, [pc, #136]	; (8001564 <httpc_init_connection_common.constprop.0+0x114>)
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f01b fe2b 	bl	801d138 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 80014e2:	4921      	ldr	r1, [pc, #132]	; (8001568 <httpc_init_connection_common.constprop.0+0x118>)
 80014e4:	6820      	ldr	r0, [r4, #0]
 80014e6:	f01b fe5f 	bl	801d1a8 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 80014ea:	2203      	movs	r2, #3
 80014ec:	491f      	ldr	r1, [pc, #124]	; (800156c <httpc_init_connection_common.constprop.0+0x11c>)
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	f01b fe7c 	bl	801d1ec <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 80014f4:	491e      	ldr	r1, [pc, #120]	; (8001570 <httpc_init_connection_common.constprop.0+0x120>)
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f01b fe3a 	bl	801d170 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014fc:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8001500:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001502:	4653      	mov	r3, sl
 8001504:	465a      	mov	r2, fp
 8001506:	4641      	mov	r1, r8
 8001508:	6840      	ldr	r0, [r0, #4]
 800150a:	9000      	str	r0, [sp, #0]
 800150c:	79a8      	ldrb	r0, [r5, #6]
 800150e:	f7ff ff4b 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 8001512:	4287      	cmp	r7, r0
 8001514:	d11d      	bne.n	8001552 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 8001516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 8001518:	2000      	movs	r0, #0
	req->conn_settings = settings;
 800151a:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 800151e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001520:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8001522:	9b03      	ldr	r3, [sp, #12]
 8001524:	601c      	str	r4, [r3, #0]
}
 8001526:	b005      	add	sp, #20
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 800152c:	88ae      	ldrh	r6, [r5, #4]
 800152e:	e7d0      	b.n	80014d2 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <httpc_init_connection_common.constprop.0+0x124>)
 8001532:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <httpc_init_connection_common.constprop.0+0x128>)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <httpc_init_connection_common.constprop.0+0x12c>)
 800153a:	f025 f903 	bl	8026744 <iprintf>
 800153e:	e793      	b.n	8001468 <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fee9 	bl	8001318 <httpc_free_state>
		return ERR_MEM;
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	e7ec      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 800154c:	f06f 0005 	mvn.w	r0, #5
 8001550:	e7e9      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fee0 	bl	8001318 <httpc_free_state>
		return ERR_VAL;
 8001558:	f06f 0005 	mvn.w	r0, #5
 800155c:	e7e3      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	e7e0      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
 8001564:	080018d9 	.word	0x080018d9
 8001568:	08001615 	.word	0x08001615
 800156c:	0800189d 	.word	0x0800189d
 8001570:	080012c5 	.word	0x080012c5
 8001574:	0802b414 	.word	0x0802b414
 8001578:	0802b5b4 	.word	0x0802b5b4
 800157c:	0802b43c 	.word	0x0802b43c

08001580 <HttpClientPageResultCallback>:
		err_t err) {
 8001580:	b530      	push	{r4, r5, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 8001588:	b949      	cbnz	r1, 800159e <HttpClientPageResultCallback+0x1e>
	if (err != ERR_OK) {
 800158a:	b9d5      	cbnz	r5, 80015c2 <HttpClientPageResultCallback+0x42>
 800158c:	4c18      	ldr	r4, [pc, #96]	; (80015f0 <HttpClientPageResultCallback+0x70>)
	returnpage(rxbuffer, down_total, err);
 800158e:	462a      	mov	r2, r5
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <HttpClientPageResultCallback+0x74>)
}
 8001594:	b003      	add	sp, #12
 8001596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 800159a:	f007 bc71 	b.w	8008e80 <returnpage>
 800159e:	2909      	cmp	r1, #9
 80015a0:	460c      	mov	r4, r1
	switch (err) {
 80015a2:	d823      	bhi.n	80015ec <HttpClientPageResultCallback+0x6c>
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HttpClientPageResultCallback+0x78>)
 80015a6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 80015aa:	4611      	mov	r1, r2
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <HttpClientPageResultCallback+0x7c>)
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	f025 f8c8 	bl	8026744 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015b4:	9a01      	ldr	r2, [sp, #4]
 80015b6:	4621      	mov	r1, r4
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HttpClientPageResultCallback+0x80>)
 80015ba:	f025 f8c3 	bl	8026744 <iprintf>
	if (err != ERR_OK) {
 80015be:	2d00      	cmp	r5, #0
 80015c0:	d0e4      	beq.n	800158c <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015c2:	f105 0310 	add.w	r3, r5, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d905      	bls.n	80015d8 <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80015cc:	4c08      	ldr	r4, [pc, #32]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HttpClientPageResultCallback+0x84>)
 80015d0:	6821      	ldr	r1, [r4, #0]
 80015d2:	f025 f8b7 	bl	8026744 <iprintf>
 80015d6:	e7da      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015d8:	4269      	negs	r1, r5
 80015da:	4c05      	ldr	r4, [pc, #20]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HttpClientPageResultCallback+0x88>)
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HttpClientPageResultCallback+0x8c>)
 80015e6:	f025 f8ad 	bl	8026744 <iprintf>
}
 80015ea:	e7d0      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HttpClientPageResultCallback+0x90>)
 80015ee:	e7dc      	b.n	80015aa <HttpClientPageResultCallback+0x2a>
 80015f0:	20001690 	.word	0x20001690
 80015f4:	20001698 	.word	0x20001698
 80015f8:	0802b944 	.word	0x0802b944
 80015fc:	0802b5dc 	.word	0x0802b5dc
 8001600:	0802b5f0 	.word	0x0802b5f0
 8001604:	0802b618 	.word	0x0802b618
 8001608:	0802b96c 	.word	0x0802b96c
 800160c:	0802b638 	.word	0x0802b638
 8001610:	0802b5c0 	.word	0x0802b5c0

08001614 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 800161c:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 800161e:	f025 f891 	bl	8026744 <iprintf>
	if (req != NULL) {
 8001622:	b184      	cbz	r4, 8001646 <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001624:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 8001626:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001628:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800162a:	b132      	cbz	r2, 800163a <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800162c:	6896      	ldr	r6, [r2, #8]
 800162e:	b126      	cbz	r6, 800163a <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001630:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001632:	2104      	movs	r1, #4
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001638:	47b0      	blx	r6
		return httpc_free_state(req);
 800163a:	4620      	mov	r0, r4
}
 800163c:	b002      	add	sp, #8
 800163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001642:	f7ff be69 	b.w	8001318 <httpc_free_state>
}
 8001646:	b002      	add	sp, #8
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	0802b658 	.word	0x0802b658

08001650 <HttpClientFileResultCallback>:
		err_t err) {
 8001650:	b530      	push	{r4, r5, lr}
 8001652:	460c      	mov	r4, r1
 8001654:	b083      	sub	sp, #12
 8001656:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	nxt_sendres();		// upload any residual buffer to the LCD (dont care if this is stm firmware callback)
 800165a:	f004 fddb 	bl	8006214 <nxt_sendres>
	if (httpc_result != HTTPC_RESULT_OK) {
 800165e:	b95c      	cbnz	r4, 8001678 <HttpClientFileResultCallback+0x28>
	if (err != ERR_OK) {
 8001660:	2d00      	cmp	r5, #0
 8001662:	d139      	bne.n	80016d8 <HttpClientFileResultCallback+0x88>
	if (flash_memptr != 0) {
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b10b      	cbz	r3, 800166e <HttpClientFileResultCallback+0x1e>
		memclose();
 800166a:	f7ff fd41 	bl	80010f0 <memclose>
	http_downloading = NOT_LOADING;		// whatever the result
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HttpClientFileResultCallback+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	b003      	add	sp, #12
 8001676:	bd30      	pop	{r4, r5, pc}
	switch (err) {
 8001678:	2c09      	cmp	r4, #9
 800167a:	d821      	bhi.n	80016c0 <HttpClientFileResultCallback+0x70>
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HttpClientFileResultCallback+0x94>)
 800167e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	printf("clientresult: %s\n", msg);
 8001682:	4611      	mov	r1, r2
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HttpClientFileResultCallback+0x98>)
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	f025 f85c 	bl	8026744 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 800168c:	4621      	mov	r1, r4
 800168e:	9a01      	ldr	r2, [sp, #4]
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <HttpClientFileResultCallback+0x9c>)
 8001692:	f025 f857 	bl	8026744 <iprintf>
		flash_memptr = 0;
 8001696:	4c11      	ldr	r4, [pc, #68]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001698:	2100      	movs	r1, #0
		nxt_abort = 1;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HttpClientFileResultCallback+0xa0>)
 800169c:	2201      	movs	r2, #1
		flash_memptr = 0;
 800169e:	6021      	str	r1, [r4, #0]
		nxt_abort = 1;
 80016a0:	601a      	str	r2, [r3, #0]
	if (err != ERR_OK) {
 80016a2:	2d00      	cmp	r5, #0
 80016a4:	d0e3      	beq.n	800166e <HttpClientFileResultCallback+0x1e>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80016a6:	f105 0310 	add.w	r3, r5, #16
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d909      	bls.n	80016c4 <HttpClientFileResultCallback+0x74>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <HttpClientFileResultCallback+0xa8>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f025 f845 	bl	8026744 <iprintf>
		flash_memptr = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	6023      	str	r3, [r4, #0]
	if (flash_memptr != 0) {
 80016be:	e7d6      	b.n	800166e <HttpClientFileResultCallback+0x1e>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HttpClientFileResultCallback+0xac>)
 80016c2:	e7de      	b.n	8001682 <HttpClientFileResultCallback+0x32>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80016c4:	4269      	negs	r1, r5
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HttpClientFileResultCallback+0xb0>)
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <HttpClientFileResultCallback+0xb4>)
 80016d2:	f025 f837 	bl	8026744 <iprintf>
}
 80016d6:	e7f0      	b.n	80016ba <HttpClientFileResultCallback+0x6a>
 80016d8:	4c00      	ldr	r4, [pc, #0]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 80016da:	e7e4      	b.n	80016a6 <HttpClientFileResultCallback+0x56>
 80016dc:	2000087c 	.word	0x2000087c
 80016e0:	200018dc 	.word	0x200018dc
 80016e4:	0802b944 	.word	0x0802b944
 80016e8:	0802b5dc 	.word	0x0802b5dc
 80016ec:	0802b66c 	.word	0x0802b66c
 80016f0:	20003128 	.word	0x20003128
 80016f4:	20001690 	.word	0x20001690
 80016f8:	0802b618 	.word	0x0802b618
 80016fc:	0802b5c0 	.word	0x0802b5c0
 8001700:	0802b96c 	.word	0x0802b96c
 8001704:	0802b638 	.word	0x0802b638

08001708 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	4614      	mov	r4, r2
 800170c:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 800170e:	b1b1      	cbz	r1, 800173e <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fde1 	bl	80012d8 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 8001716:	b180      	cbz	r0, 800173a <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001718:	2102      	movs	r1, #2
	if (req != NULL) {
 800171a:	b174      	cbz	r4, 800173a <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	b133      	cbz	r3, 800172e <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001720:	689d      	ldr	r5, [r3, #8]
 8001722:	b125      	cbz	r5, 800172e <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001724:	9000      	str	r0, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800172c:	47a8      	blx	r5
		return httpc_free_state(req);
 800172e:	4620      	mov	r0, r4
}
 8001730:	b003      	add	sp, #12
 8001732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 8001736:	f7ff bdef 	b.w	8001318 <httpc_free_state>
}
 800173a:	b003      	add	sp, #12
 800173c:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 800173e:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001740:	f06f 000f 	mvn.w	r0, #15
 8001744:	e7e9      	b.n	800171a <httpc_dns_found+0x12>
 8001746:	bf00      	nop

08001748 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001748:	6901      	ldr	r1, [r0, #16]
 800174a:	2301      	movs	r3, #1
 800174c:	894a      	ldrh	r2, [r1, #10]
 800174e:	6849      	ldr	r1, [r1, #4]
 8001750:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001752:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001754:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001756:	b082      	sub	sp, #8
 8001758:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f01e fac0 	bl	801fce0 <tcp_write>
	if (r != ERR_OK) {
 8001760:	4605      	mov	r5, r0
 8001762:	b948      	cbnz	r0, 8001778 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 8001764:	6920      	ldr	r0, [r4, #16]
 8001766:	f01a ff23 	bl	801c5b0 <pbuf_free>
	altcp_output(req->pcb);
 800176a:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 800176c:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 800176e:	f01f f8d1 	bl	8020914 <tcp_output>
}
 8001772:	4628      	mov	r0, r5
 8001774:	b002      	add	sp, #8
 8001776:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 8001778:	6a23      	ldr	r3, [r4, #32]
 800177a:	b13b      	cbz	r3, 800178c <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 800177c:	689e      	ldr	r6, [r3, #8]
 800177e:	b12e      	cbz	r6, 800178c <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001780:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001782:	2300      	movs	r3, #0
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	2107      	movs	r1, #7
 8001788:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800178a:	47b0      	blx	r6
		return httpc_free_state(req);
 800178c:	4620      	mov	r0, r4
}
 800178e:	b002      	add	sp, #8
 8001790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001794:	f7ff bdc0 	b.w	8001318 <httpc_free_state>

08001798 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d048      	beq.n	8001834 <HttpClientPageReceiveCallback+0x9c>
	if (err != ERR_OK) {
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14f      	bne.n	8001846 <HttpClientPageReceiveCallback+0xae>
 80017a6:	4688      	mov	r8, r1
 80017a8:	4617      	mov	r7, r2
 80017aa:	4614      	mov	r4, r2
 80017ac:	4d33      	ldr	r5, [pc, #204]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 80017ae:	4e34      	ldr	r6, [pc, #208]	; (8001880 <HttpClientPageReceiveCallback+0xe8>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80017b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001898 <HttpClientPageReceiveCallback+0x100>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 80017b4:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 80017b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 80017ba:	b1bb      	cbz	r3, 80017ec <HttpClientPageReceiveCallback+0x54>
 80017bc:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017be:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017c2:	469e      	mov	lr, r3
 80017c4:	e007      	b.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017c6:	602a      	str	r2, [r5, #0]
 80017c8:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 80017cc:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ce:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 80017d0:	8962      	ldrh	r2, [r4, #10]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	da0a      	bge.n	80017ec <HttpClientPageReceiveCallback+0x54>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017da:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017de:	d9f2      	bls.n	80017c6 <HttpClientPageReceiveCallback+0x2e>
		for (i = 0; i < q->len; i++) {
 80017e0:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017e2:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 80017e6:	8962      	ldrh	r2, [r4, #10]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dbf4      	blt.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
			}
		}

		altcp_recved(pcb, p->tot_len);
 80017ec:	8939      	ldrh	r1, [r7, #8]
 80017ee:	4640      	mov	r0, r8
 80017f0:	f01b fb5e 	bl	801ceb0 <tcp_recved>
		err = pbuf_free_callback(p);
 80017f4:	4638      	mov	r0, r7
 80017f6:	f017 fd0b 	bl	8019210 <pbuf_free_callback>
		if (err != ERR_OK) {
 80017fa:	4682      	mov	sl, r0
 80017fc:	b920      	cbnz	r0, 8001808 <HttpClientPageReceiveCallback+0x70>
	for (q = p; q != NULL; q = q->next) {
 80017fe:	6824      	ldr	r4, [r4, #0]
 8001800:	2c00      	cmp	r4, #0
 8001802:	d1d7      	bne.n	80017b4 <HttpClientPageReceiveCallback+0x1c>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
}
 8001804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			putchar('!');
 8001808:	2021      	movs	r0, #33	; 0x21
 800180a:	f024 ffb3 	bl	8026774 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800180e:	f10a 0310 	add.w	r3, sl, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b10      	cmp	r3, #16
 8001816:	d904      	bls.n	8001822 <HttpClientPageReceiveCallback+0x8a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001818:	6829      	ldr	r1, [r5, #0]
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800181c:	f024 ff92 	bl	8026744 <iprintf>
 8001820:	e7ed      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001822:	f1ca 0100 	rsb	r1, sl, #0
 8001826:	682a      	ldr	r2, [r5, #0]
 8001828:	4817      	ldr	r0, [pc, #92]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800182a:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 800182e:	f024 ff89 	bl	8026744 <iprintf>
}
 8001832:	e7e4      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
	LWIP_ASSERT("p != NULL", p != NULL);
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HttpClientPageReceiveCallback+0xf4>)
 8001836:	f240 421b 	movw	r2, #1051	; 0x41b
 800183a:	4915      	ldr	r1, [pc, #84]	; (8001890 <HttpClientPageReceiveCallback+0xf8>)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <HttpClientPageReceiveCallback+0xfc>)
 800183e:	f024 ff81 	bl	8026744 <iprintf>
	if (err != ERR_OK) {
 8001842:	2c00      	cmp	r4, #0
 8001844:	d0de      	beq.n	8001804 <HttpClientPageReceiveCallback+0x6c>
		putchar('^');
 8001846:	205e      	movs	r0, #94	; 0x5e
 8001848:	f024 ff94 	bl	8026774 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800184c:	f104 0310 	add.w	r3, r4, #16
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b10      	cmp	r3, #16
 8001854:	d906      	bls.n	8001864 <HttpClientPageReceiveCallback+0xcc>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800185a:	6819      	ldr	r1, [r3, #0]
}
 800185c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001860:	f024 bf70 	b.w	8026744 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001864:	4261      	negs	r1, r4
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HttpClientPageReceiveCallback+0x100>)
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800186c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001870:	6812      	ldr	r2, [r2, #0]
}
 8001872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001876:	f024 bf65 	b.w	8026744 <iprintf>
 800187a:	bf00      	nop
 800187c:	20001690 	.word	0x20001690
 8001880:	20001698 	.word	0x20001698
 8001884:	0802b618 	.word	0x0802b618
 8001888:	0802b638 	.word	0x0802b638
 800188c:	0802b414 	.word	0x0802b414
 8001890:	08046d90 	.word	0x08046d90
 8001894:	0802b43c 	.word	0x0802b43c
 8001898:	0802b96c 	.word	0x0802b96c

0800189c <httpc_tcp_poll>:
	if (req != NULL) {
 800189c:	b1d0      	cbz	r0, 80018d4 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800189e:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 80018a0:	b530      	push	{r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 80018a6:	b12b      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 80018ac:	b113      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
}
 80018ae:	2000      	movs	r0, #0
 80018b0:	b003      	add	sp, #12
 80018b2:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	b13b      	cbz	r3, 80018c8 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80018b8:	689d      	ldr	r5, [r3, #8]
 80018ba:	b12d      	cbz	r5, 80018c8 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80018bc:	2300      	movs	r3, #0
 80018be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c0:	2105      	movs	r1, #5
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018c6:	47a8      	blx	r5
		return httpc_free_state(req);
 80018c8:	4620      	mov	r0, r4
}
 80018ca:	b003      	add	sp, #12
 80018cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 80018d0:	f7ff bd22 	b.w	8001318 <httpc_free_state>
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	4604      	mov	r4, r0
 80018de:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 80018e0:	4615      	mov	r5, r2
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f000 80e2 	beq.w	8001aac <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80018e8:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 80018ec:	460e      	mov	r6, r1
 80018ee:	461f      	mov	r7, r3
 80018f0:	f1ba 0f02 	cmp.w	sl, #2
 80018f4:	f000 80c8 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 80018f8:	6940      	ldr	r0, [r0, #20]
 80018fa:	b190      	cbz	r0, 8001922 <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 80018fc:	4611      	mov	r1, r2
 80018fe:	f01a fe89 	bl	801c614 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001902:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001906:	f1ba 0f00 	cmp.w	sl, #0
 800190a:	d00e      	beq.n	800192a <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 800190c:	f1ba 0f01 	cmp.w	sl, #1
 8001910:	d06e      	beq.n	80019f0 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001912:	f1ba 0f02 	cmp.w	sl, #2
 8001916:	f000 80b7 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
}
 800191a:	2000      	movs	r0, #0
 800191c:	b009      	add	sp, #36	; 0x24
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 8001922:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001924:	f1ba 0f00 	cmp.w	sl, #0
 8001928:	d1f0      	bne.n	800190c <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 800192a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 800192e:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001932:	4653      	mov	r3, sl
 8001934:	2202      	movs	r2, #2
 8001936:	4989      	ldr	r1, [pc, #548]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001938:	4640      	mov	r0, r8
 800193a:	f01b f859 	bl	801c9f0 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 800193e:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001940:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 8001942:	f000 8105 	beq.w	8001b50 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001946:	4653      	mov	r3, sl
 8001948:	2201      	movs	r2, #1
 800194a:	4985      	ldr	r1, [pc, #532]	; (8001b60 <httpc_tcp_recv+0x288>)
 800194c:	4640      	mov	r0, r8
 800194e:	f01b f84f 	bl	801c9f0 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 8001952:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001954:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 8001956:	f000 80fb 	beq.w	8001b50 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 800195a:	4651      	mov	r1, sl
 800195c:	2305      	movs	r3, #5
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <httpc_tcp_recv+0x28c>)
 8001960:	4640      	mov	r0, r8
 8001962:	f01b f80d 	bl	801c980 <pbuf_memcmp>
 8001966:	2800      	cmp	r0, #0
 8001968:	f040 80f2 	bne.w	8001b50 <httpc_tcp_recv+0x278>
 800196c:	2106      	movs	r1, #6
 800196e:	4640      	mov	r0, r8
 8001970:	f01a ffda 	bl	801c928 <pbuf_get_at>
 8001974:	282e      	cmp	r0, #46	; 0x2e
 8001976:	f040 80eb 	bne.w	8001b50 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 800197a:	2105      	movs	r1, #5
 800197c:	4640      	mov	r0, r8
 800197e:	f01a ffd3 	bl	801c928 <pbuf_get_at>
 8001982:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001984:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001986:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 800198a:	4640      	mov	r0, r8
 800198c:	f01a ffcc 	bl	801c928 <pbuf_get_at>
 8001990:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001992:	f109 0301 	add.w	r3, r9, #1
 8001996:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001998:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800199c:	4970      	ldr	r1, [pc, #448]	; (8001b60 <httpc_tcp_recv+0x288>)
 800199e:	b29b      	uxth	r3, r3
				*http_version = version;
 80019a0:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80019a2:	4640      	mov	r0, r8
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	f01b f823 	bl	801c9f0 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 80019aa:	4558      	cmp	r0, fp
 80019ac:	9b02      	ldr	r3, [sp, #8]
 80019ae:	f000 80a2 	beq.w	8001af6 <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 80019b2:	eba0 0909 	sub.w	r9, r0, r9
 80019b6:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80019ba:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019bc:	4640      	mov	r0, r8
 80019be:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80019c0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80019c4:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019c8:	fa1f f289 	uxth.w	r2, r9
 80019cc:	f01a fe94 	bl	801c6f8 <pbuf_copy_partial>
 80019d0:	4581      	cmp	r9, r0
 80019d2:	f040 80bd 	bne.w	8001b50 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 80019d6:	a804      	add	r0, sp, #16
 80019d8:	f023 fc90 	bl	80252fc <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 80019dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80019e0:	1e42      	subs	r2, r0, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f200 80b4 	bhi.w	8001b50 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019e8:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 80019ea:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80019f0:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019f4:	2300      	movs	r3, #0
 80019f6:	2204      	movs	r2, #4
 80019f8:	495b      	ldr	r1, [pc, #364]	; (8001b68 <httpc_tcp_recv+0x290>)
 80019fa:	4648      	mov	r0, r9
 80019fc:	f01a fff8 	bl	801c9f0 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 8001a00:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a04:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001a06:	4298      	cmp	r0, r3
 8001a08:	f200 80a5 	bhi.w	8001b56 <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a10:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a14:	2210      	movs	r2, #16
 8001a16:	4955      	ldr	r1, [pc, #340]	; (8001b6c <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a18:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a1a:	4648      	mov	r0, r9
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f01a ffe7 	bl	801c9f0 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001a22:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a24:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001a26:	d16e      	bne.n	8001b06 <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001a28:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001a2c:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001a2e:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001a30:	4629      	mov	r1, r5
 8001a32:	f01b fa3d 	bl	801ceb0 <tcp_recved>
				if (req->conn_settings) {
 8001a36:	6a23      	ldr	r3, [r4, #32]
 8001a38:	b1cb      	cbz	r3, 8001a6e <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001a3a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001a3e:	f1b8 0f00 	cmp.w	r8, #0
 8001a42:	d014      	beq.n	8001a6e <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a46:	4620      	mov	r0, r4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	6962      	ldr	r2, [r4, #20]
 8001a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a50:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001a52:	b160      	cbz	r0, 8001a6e <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001a54:	6a23      	ldr	r3, [r4, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d037      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001a5a:	689d      	ldr	r5, [r3, #8]
 8001a5c:	2d00      	cmp	r5, #0
 8001a5e:	d034      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001a60:	8b63      	ldrh	r3, [r4, #26]
 8001a62:	2108      	movs	r1, #8
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a66:	9000      	str	r0, [sp, #0]
 8001a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a6a:	47a8      	blx	r5
 8001a6c:	e02d      	b.n	8001aca <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001a6e:	4629      	mov	r1, r5
 8001a70:	6960      	ldr	r0, [r4, #20]
 8001a72:	f01a fd81 	bl	801c578 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001a76:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a78:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001a7a:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a82:	2800      	cmp	r0, #0
 8001a84:	f43f af49 	beq.w	800191a <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001a88:	8929      	ldrh	r1, [r5, #8]
 8001a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a8c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001a90:	440b      	add	r3, r1
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a94:	f1be 0f00 	cmp.w	lr, #0
 8001a98:	d026      	beq.n	8001ae8 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	462a      	mov	r2, r5
 8001a9e:	4631      	mov	r1, r6
 8001aa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aa2:	46f4      	mov	ip, lr
}
 8001aa4:	b009      	add	sp, #36	; 0x24
 8001aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001aaa:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001aac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d010      	beq.n	8001ad6 <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001ab4:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001ab6:	6a23      	ldr	r3, [r4, #32]
 8001ab8:	b13b      	cbz	r3, 8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001aba:	689d      	ldr	r5, [r3, #8]
 8001abc:	b12d      	cbz	r5, 8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	8b63      	ldrh	r3, [r4, #26]
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001ac8:	47a8      	blx	r5
		return httpc_free_state(req);
 8001aca:	4620      	mov	r0, r4
}
 8001acc:	b009      	add	sp, #36	; 0x24
 8001ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001ad2:	f7ff bc21 	b.w	8001318 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001ad6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ad8:	1c4b      	adds	r3, r1, #1
 8001ada:	d012      	beq.n	8001b02 <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001adc:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001ade:	42a9      	cmp	r1, r5
 8001ae0:	bf14      	ite	ne
 8001ae2:	2109      	movne	r1, #9
 8001ae4:	2100      	moveq	r1, #0
 8001ae6:	e7e6      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f01b f9e1 	bl	801ceb0 <tcp_recved>
			pbuf_free(p);
 8001aee:	4628      	mov	r0, r5
 8001af0:	f01a fd5e 	bl	801c5b0 <pbuf_free>
 8001af4:	e711      	b.n	800191a <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001af6:	9a03      	ldr	r2, [sp, #12]
 8001af8:	eba2 0909 	sub.w	r9, r2, r9
 8001afc:	f109 39ff 	add.w	r9, r9, #4294967295
 8001b00:	e75b      	b.n	80019ba <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001b02:	4611      	mov	r1, r2
 8001b04:	e7d7      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b06:	4603      	mov	r3, r0
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f01a ff6f 	bl	801c9f0 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b12:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b14:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b16:	d087      	beq.n	8001a28 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b18:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b20:	1b52      	subs	r2, r2, r5
 8001b22:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b24:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b28:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2a:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b2c:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2e:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b32:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b36:	462a      	mov	r2, r5
 8001b38:	f01a fdde 	bl	801c6f8 <pbuf_copy_partial>
 8001b3c:	4285      	cmp	r5, r0
 8001b3e:	f47f af73 	bne.w	8001a28 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001b42:	a804      	add	r0, sp, #16
 8001b44:	f023 fbda 	bl	80252fc <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001b48:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001b4a:	bfa8      	it	ge
 8001b4c:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001b4e:	e76b      	b.n	8001a28 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001b50:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b54:	e6da      	b.n	800190c <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b56:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b5a:	e6da      	b.n	8001912 <httpc_tcp_recv+0x3a>
 8001b5c:	0802b560 	.word	0x0802b560
 8001b60:	0802de98 	.word	0x0802de98
 8001b64:	0802b694 	.word	0x0802b694
 8001b68:	0802b69c 	.word	0x0802b69c
 8001b6c:	0802b6a4 	.word	0x0802b6a4

08001b70 <httpc_get_file_dns>:
		altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	bf18      	it	ne
 8001b7a:	2a00      	cmpne	r2, #0
 8001b7c:	d044      	beq.n	8001c08 <httpc_get_file_dns+0x98>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d041      	beq.n	8001c08 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001b84:	4610      	mov	r0, r2
 8001b86:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	9000      	str	r0, [sp, #0]
 8001b8e:	4631      	mov	r1, r6
 8001b90:	a807      	add	r0, sp, #28
 8001b92:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001b96:	4622      	mov	r2, r4
 8001b98:	f7ff fc5a 	bl	8001450 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b998      	cbnz	r0, 8001bc8 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001ba0:	79b3      	ldrb	r3, [r6, #6]
 8001ba2:	b9a3      	cbnz	r3, 8001bce <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001ba4:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001ba6:	b33e      	cbz	r6, 8001bf8 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001ba8:	1d31      	adds	r1, r6, #4
 8001baa:	4633      	mov	r3, r6
 8001bac:	4620      	mov	r0, r4
 8001bae:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <httpc_get_file_dns+0xac>)
 8001bb0:	9105      	str	r1, [sp, #20]
 8001bb2:	f019 f9d5 	bl	801af60 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001bb6:	9905      	ldr	r1, [sp, #20]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b1c0      	cbz	r0, 8001bee <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001bbc:	1d42      	adds	r2, r0, #5
 8001bbe:	d00d      	beq.n	8001bdc <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001bc0:	9807      	ldr	r0, [sp, #28]
		return err;
 8001bc2:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001bc4:	f7ff fba8 	bl	8001318 <httpc_free_state>
}
 8001bc8:	4628      	mov	r0, r5
 8001bca:	b008      	add	sp, #32
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001bce:	4631      	mov	r1, r6
 8001bd0:	9807      	ldr	r0, [sp, #28]
 8001bd2:	f7ff fb81 	bl	80012d8 <httpc_get_internal_addr>
 8001bd6:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f1      	bne.n	8001bc0 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f2      	beq.n	8001bc8 <httpc_get_file_dns+0x58>
		*connection = req;
 8001be2:	9b07      	ldr	r3, [sp, #28]
}
 8001be4:	4628      	mov	r0, r5
		*connection = req;
 8001be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	b008      	add	sp, #32
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fb72 	bl	80012d8 <httpc_get_internal_addr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	e7ef      	b.n	8001bd8 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001bfa:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001bfe:	4909      	ldr	r1, [pc, #36]	; (8001c24 <httpc_get_file_dns+0xb4>)
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c02:	f024 fd9f 	bl	8026744 <iprintf>
 8001c06:	e7cf      	b.n	8001ba8 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001c0a:	f240 2292 	movw	r2, #658	; 0x292
 8001c0e:	4907      	ldr	r1, [pc, #28]	; (8001c2c <httpc_get_file_dns+0xbc>)
 8001c10:	f06f 050f 	mvn.w	r5, #15
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c16:	f024 fd95 	bl	8026744 <iprintf>
 8001c1a:	e7d5      	b.n	8001bc8 <httpc_get_file_dns+0x58>
 8001c1c:	08001709 	.word	0x08001709
 8001c20:	0802b414 	.word	0x0802b414
 8001c24:	0802b430 	.word	0x0802b430
 8001c28:	0802b43c 	.word	0x0802b43c
 8001c2c:	0802b6b8 	.word	0x0802b6b8

08001c30 <printlwiperr>:
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001c30:	f100 0310 	add.w	r3, r0, #16
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d904      	bls.n	8001c44 <printlwiperr+0x14>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <printlwiperr+0x28>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <printlwiperr+0x2c>)
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	f024 bd80 	b.w	8026744 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001c44:	4241      	negs	r1, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <printlwiperr+0x30>)
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <printlwiperr+0x28>)
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <printlwiperr+0x34>)
 8001c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f024 bd77 	b.w	8026744 <iprintf>
 8001c56:	bf00      	nop
 8001c58:	20001690 	.word	0x20001690
 8001c5c:	0802b618 	.word	0x0802b618
 8001c60:	0802b96c 	.word	0x0802b96c
 8001c64:	0802b638 	.word	0x0802b638

08001c68 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001c6e:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001c70:	4c1d      	ldr	r4, [pc, #116]	; (8001ce8 <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c72:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c76:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001c78:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d10 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c7c:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001c82:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001c84:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001c86:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001c8a:	6025      	str	r5, [r4, #0]
 8001c8c:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001c8e:	f023 fdbb 	bl	8025808 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <http_dlclient+0x88>)
	settings1->result_fn = HttpClientFileResultCallback;

	connection1->timeout_ticks = 1;

	strcpy(domain_name, host);
 8001c94:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001c96:	4f17      	ldr	r7, [pc, #92]	; (8001cf4 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c98:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001c9a:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001c9c:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001c9e:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <http_dlclient+0x90>)
 8001ca2:	f024 ffef 	bl	8026c84 <strcpy>
	strcpy(rxbuffer, filename);
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <http_dlclient+0x94>)
 8001caa:	f024 ffeb 	bl	8026c84 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <http_dlclient+0x9c>)
 8001cb2:	4623      	mov	r3, r4
	expectedapage = 0;
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb6:	f8cd 8008 	str.w	r8, [sp, #8]
 8001cba:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001cbc:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cbe:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001cc2:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001cc4:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <http_dlclient+0x94>)
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <http_dlclient+0x90>)
 8001cca:	f7ff ff51 	bl	8001b70 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001cce:	b910      	cbnz	r0, 8001cd6 <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001cd0:	b004      	add	sp, #16
 8001cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <http_dlclient+0xa4>)
}
 8001cda:	b004      	add	sp, #16
 8001cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001ce0:	f024 bd30 	b.w	8026744 <iprintf>
 8001ce4:	20001600 	.word	0x20001600
 8001ce8:	200018b4 	.word	0x200018b4
 8001cec:	200018d4 	.word	0x200018d4
 8001cf0:	080012c9 	.word	0x080012c9
 8001cf4:	08001651 	.word	0x08001651
 8001cf8:	20001670 	.word	0x20001670
 8001cfc:	20001698 	.word	0x20001698
 8001d00:	20001690 	.word	0x20001690
 8001d04:	08001381 	.word	0x08001381
 8001d08:	200034c8 	.word	0x200034c8
 8001d0c:	0802b6cc 	.word	0x0802b6cc
 8001d10:	20001668 	.word	0x20001668

08001d14 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d18:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d1a:	4c28      	ldr	r4, [pc, #160]	; (8001dbc <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d1e:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d20:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d22:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d24:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d26:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d2a:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001de8 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d30:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d32:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d34:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d36:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d3a:	f023 fd65 	bl	8025808 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d40:	4f22      	ldr	r7, [pc, #136]	; (8001dcc <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d42:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d44:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d46:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d48:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d4a:	4c21      	ldr	r4, [pc, #132]	; (8001dd0 <hc_open+0xbc>)
 8001d4c:	7833      	ldrb	r3, [r6, #0]
 8001d4e:	5ce2      	ldrb	r2, [r4, r3]
 8001d50:	0751      	lsls	r1, r2, #29
 8001d52:	d101      	bne.n	8001d58 <hc_open+0x44>
 8001d54:	2b2f      	cmp	r3, #47	; 0x2f
 8001d56:	d126      	bne.n	8001da6 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001d58:	4631      	mov	r1, r6
 8001d5a:	481e      	ldr	r0, [pc, #120]	; (8001dd4 <hc_open+0xc0>)
 8001d5c:	f024 ff92 	bl	8026c84 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001d60:	782b      	ldrb	r3, [r5, #0]
 8001d62:	5ce2      	ldrb	r2, [r4, r3]
 8001d64:	0752      	lsls	r2, r2, #29
 8001d66:	d101      	bne.n	8001d6c <hc_open+0x58>
 8001d68:	2b2f      	cmp	r3, #47	; 0x2f
 8001d6a:	d118      	bne.n	8001d9e <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <hc_open+0xc4>)
 8001d70:	f024 ff88 	bl	8026c84 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
	expectedapage = 1;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <hc_open+0xc8>)
	down_total = 0;
 8001d76:	2400      	movs	r4, #0
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <hc_open+0xcc>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d7a:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001d7e:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <hc_open+0xa8>)
 8001d84:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001d88:	6004      	str	r4, [r0, #0]
	expectedapage = 1;
 8001d8a:	2401      	movs	r4, #1
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <hc_open+0xd0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <hc_open+0xc4>)
	expectedapage = 1;
 8001d90:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <hc_open+0xc0>)
 8001d94:	f7ff feec 	bl	8001b70 <httpc_get_file_dns>
			HttpClientPageResultCallback, &connection2);
}
 8001d98:	b004      	add	sp, #16
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <hc_open+0xc4>)
 8001da0:	222f      	movs	r2, #47	; 0x2f
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e7e6      	b.n	8001d74 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001da6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001dec <hc_open+0xd8>
 8001daa:	4e0a      	ldr	r6, [pc, #40]	; (8001dd4 <hc_open+0xc0>)
 8001dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001db0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001db2:	f8dc 3000 	ldr.w	r3, [ip]
 8001db6:	6033      	str	r3, [r6, #0]
 8001db8:	e7d2      	b.n	8001d60 <hc_open+0x4c>
 8001dba:	bf00      	nop
 8001dbc:	200018c4 	.word	0x200018c4
 8001dc0:	20001634 	.word	0x20001634
 8001dc4:	200018d8 	.word	0x200018d8
 8001dc8:	080012c9 	.word	0x080012c9
 8001dcc:	08001581 	.word	0x08001581
 8001dd0:	08047579 	.word	0x08047579
 8001dd4:	20001670 	.word	0x20001670
 8001dd8:	20001698 	.word	0x20001698
 8001ddc:	08001799 	.word	0x08001799
 8001de0:	20001690 	.word	0x20001690
 8001de4:	200034c8 	.word	0x200034c8
 8001de8:	2000166c 	.word	0x2000166c
 8001dec:	0802b6f4 	.word	0x0802b6f4

08001df0 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = NOT_LOADING;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df4:	461f      	mov	r7, r3
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <httploader+0xc0>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df8:	b085      	sub	sp, #20
	dl_filecrc = 0;
 8001dfa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001ee4 <httploader+0xf4>
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001dfe:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e02:	4605      	mov	r5, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4616      	mov	r6, r2
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e08:	9303      	str	r3, [sp, #12]
	dl_filecrc = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8cc 3000 	str.w	r3, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e16:	d040      	beq.n	8001e9a <httploader+0xaa>
 8001e18:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001ee8 <httploader+0xf8>
 8001e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e20:	f04f 0941 	mov.w	r9, #65	; 0x41
		dl_filecrc = crc1;
 8001e24:	f8cc 2000 	str.w	r2, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e28:	f8c8 3000 	str.w	r3, [r8]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	http_downloading = FLASH_LOADING;
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <httploader+0xc4>)
 8001e2e:	2201      	movs	r2, #1

	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e30:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <httploader+0xc8>)
	http_downloading = FLASH_LOADING;
 8001e32:	601a      	str	r2, [r3, #0]
	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e34:	f000 fa38 	bl	80022a8 <writelcdcmd>
	writelcdcmd("xstr 5,136,470,48,2,BLACK,RED,0,1,1,\"DON'T SWITCH OFF...\"");
 8001e38:	4820      	ldr	r0, [pc, #128]	; (8001ebc <httploader+0xcc>)
 8001e3a:	f000 fa35 	bl	80022a8 <writelcdcmd>

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n", filename, host, crc1, crc2);
 8001e3e:	4633      	mov	r3, r6
 8001e40:	4622      	mov	r2, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	9700      	str	r7, [sp, #0]
 8001e46:	481e      	ldr	r0, [pc, #120]	; (8001ec0 <httploader+0xd0>)
 8001e48:	f024 fc7c 	bl	8026744 <iprintf>

	flash_memptr = flash_load_address;
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <httploader+0xd4>)
	flash_memptr = flash_load_address;
 8001e4e:	4e1e      	ldr	r6, [pc, #120]	; (8001ec8 <httploader+0xd8>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e50:	462a      	mov	r2, r5
	flash_memptr = flash_load_address;
 8001e52:	f8d8 1000 	ldr.w	r1, [r8]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e56:	464b      	mov	r3, r9
 8001e58:	6800      	ldr	r0, [r0, #0]
	flash_memptr = flash_load_address;
 8001e5a:	6031      	str	r1, [r6, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e5c:	9001      	str	r0, [sp, #4]
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <httploader+0xdc>)
	flash_filelength = 0;
 8001e60:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <httploader+0xe0>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e62:	6800      	ldr	r0, [r0, #0]
 8001e64:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e66:	2000      	movs	r0, #0
 8001e68:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <httploader+0xe4>)
 8001e6c:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <httploader+0xe8>)
 8001e6e:	f024 fe53 	bl	8026b18 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename,
 8001e72:	4623      	mov	r3, r4
 8001e74:	6832      	ldr	r2, [r6, #0]
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <httploader+0xe8>)
 8001e78:	4818      	ldr	r0, [pc, #96]	; (8001edc <httploader+0xec>)
 8001e7a:	f024 fc63 	bl	8026744 <iprintf>
			flash_memptr, host);
	writelcdcmd("\\r\\rDownloading new STM firmware....");
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <httploader+0xf0>)
 8001e80:	f000 fa12 	bl	80022a8 <writelcdcmd>

	http_dlclient(newfilename, host, flash_memptr);
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <httploader+0xe8>)
 8001e86:	6832      	ldr	r2, [r6, #0]
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7ff feed 	bl	8001c68 <http_dlclient>
	osDelay(5);
 8001e8e:	2005      	movs	r0, #5
}
 8001e90:	b005      	add	sp, #20
 8001e92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(5);
 8001e96:	f014 bbd1 	b.w	801663c <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e9a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001ee8 <httploader+0xf8>
 8001e9e:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
		break;
 8001ea2:	f04f 0949 	mov.w	r9, #73	; 0x49
		dl_filecrc = crc2;
 8001ea6:	f8cc 7000 	str.w	r7, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001eaa:	f8c8 3000 	str.w	r3, [r8]
		break;
 8001eae:	e7bd      	b.n	8001e2c <httploader+0x3c>
 8001eb0:	08001df1 	.word	0x08001df1
 8001eb4:	200018dc 	.word	0x200018dc
 8001eb8:	0802b9b0 	.word	0x0802b9b0
 8001ebc:	0802b9ec 	.word	0x0802b9ec
 8001ec0:	0802ba28 	.word	0x0802ba28
 8001ec4:	20002dfc 	.word	0x20002dfc
 8001ec8:	2000087c 	.word	0x2000087c
 8001ecc:	20002180 	.word	0x20002180
 8001ed0:	20000878 	.word	0x20000878
 8001ed4:	0802ba5c 	.word	0x0802ba5c
 8001ed8:	200018e0 	.word	0x200018e0
 8001edc:	0802ba7c 	.word	0x0802ba7c
 8001ee0:	0802bad8 	.word	0x0802bad8
 8001ee4:	20000870 	.word	0x20000870
 8001ee8:	20000004 	.word	0x20000004

08001eec <stm_rx_callback>:

// http callback for stm firmware download
// this gets called for each downloaded chunk received
//
int stm_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("stm_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001ef2:	b362      	cbz	r2, 8001f4e <stm_rx_callback+0x62>
	if (err != ERR_OK) {
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d132      	bne.n	8001f5e <stm_rx_callback+0x72>
 8001ef8:	460f      	mov	r7, r1
 8001efa:	4615      	mov	r5, r2
 8001efc:	4614      	mov	r4, r2
 8001efe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001f9c <stm_rx_callback+0xb0>
	for (q = p; q != NULL; q = q->next) {
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f02:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001fa0 <stm_rx_callback+0xb4>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001f06:	4e20      	ldr	r6, [pc, #128]	; (8001f88 <stm_rx_callback+0x9c>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f08:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001f0c:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f10:	f1bb 0f00 	cmp.w	fp, #0
 8001f14:	d10b      	bne.n	8001f2e <stm_rx_callback+0x42>
 8001f16:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f1e:	b133      	cbz	r3, 8001f2e <stm_rx_callback+0x42>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f20:	6860      	ldr	r0, [r4, #4]
 8001f22:	f7ff f83f 	bl	8000fa4 <flash_memwrite>
 8001f26:	4582      	cmp	sl, r0
 8001f28:	d121      	bne.n	8001f6e <stm_rx_callback+0x82>
		down_total += q->len;
 8001f2a:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001f2e:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 8001f30:	4638      	mov	r0, r7
 8001f32:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 8001f34:	4453      	add	r3, sl
 8001f36:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8001f38:	f01a ffba 	bl	801ceb0 <tcp_recved>
		pbuf_free(p);
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f01a fb37 	bl	801c5b0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8001f42:	6824      	ldr	r4, [r4, #0]
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d1df      	bne.n	8001f08 <stm_rx_callback+0x1c>

//		p = p->next;
//		printf("stm_rx_callback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
	return (0);
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <stm_rx_callback+0xa0>)
 8001f50:	2254      	movs	r2, #84	; 0x54
 8001f52:	490f      	ldr	r1, [pc, #60]	; (8001f90 <stm_rx_callback+0xa4>)
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <stm_rx_callback+0xa8>)
 8001f56:	f024 fbf5 	bl	8026744 <iprintf>
	if (err != ERR_OK) {
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d0f4      	beq.n	8001f48 <stm_rx_callback+0x5c>
		putchar('#');
 8001f5e:	2023      	movs	r0, #35	; 0x23
 8001f60:	f024 fc08 	bl	8026774 <putchar>
		printlwiperr(err);
 8001f64:	4620      	mov	r0, r4
}
 8001f66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8001f6a:	f7ff be61 	b.w	8001c30 <printlwiperr>
				flash_abort = 1;
 8001f6e:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <stm_rx_callback+0xac>)
				flash_memptr = 0;
 8001f72:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 8001f76:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 8001f7a:	f024 fc7f 	bl	802687c <puts>
				return (-1);
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	20001690 	.word	0x20001690
 8001f8c:	0802bb00 	.word	0x0802bb00
 8001f90:	08046d90 	.word	0x08046d90
 8001f94:	0802b43c 	.word	0x0802b43c
 8001f98:	0802bb1c 	.word	0x0802bb1c
 8001f9c:	20000874 	.word	0x20000874
 8001fa0:	2000087c 	.word	0x2000087c

08001fa4 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001fa4:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001faa:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	2b95      	cmp	r3, #149	; 0x95
 8001fb0:	dc0d      	bgt.n	8001fce <wait_armtx+0x2a>
 8001fb2:	4c0e      	ldr	r4, [pc, #56]	; (8001fec <wait_armtx+0x48>)
 8001fb4:	e007      	b.n	8001fc6 <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001fb6:	9b01      	ldr	r3, [sp, #4]
 8001fb8:	4403      	add	r3, r0
 8001fba:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001fbc:	f014 fb3e 	bl	801663c <osDelay>
	while (timeoutcnt < 150) {
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	2b95      	cmp	r3, #149	; 0x95
 8001fc4:	dc03      	bgt.n	8001fce <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001fc6:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d1f3      	bne.n	8001fb6 <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	2bf9      	cmp	r3, #249	; 0xf9
 8001fd2:	dc02      	bgt.n	8001fda <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <wait_armtx+0x4c>)
 8001fdc:	f024 fc4e 	bl	802687c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <wait_armtx+0x48>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	601a      	str	r2, [r3, #0]
		return (-1);
 8001fea:	e7f4      	b.n	8001fd6 <wait_armtx+0x32>
 8001fec:	20002174 	.word	0x20002174
 8001ff0:	0802bb40 	.word	0x0802bb40

08001ff4 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_UART_TxCpltCallback+0x14>)
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d000      	beq.n	8002002 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8002000:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_UART_TxCpltCallback+0x18>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40005000 	.word	0x40005000
 8002010:	20002174 	.word	0x20002174

08002014 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8002014:	b570      	push	{r4, r5, r6, lr}
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8002016:	4c1a      	ldr	r4, [pc, #104]	; (8002080 <lcd_uart_init+0x6c>)
	lcdrxoutidx = 0;		// buffer consumer index
 8002018:	2500      	movs	r5, #0
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <lcd_uart_init+0x70>)
void lcd_uart_init(int baud) {
 800201c:	b082      	sub	sp, #8
 800201e:	4606      	mov	r6, r0
	HAL_UART_Abort(&huart5);
 8002020:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8002022:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8002024:	f011 f8c4 	bl	80131b0 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8002028:	4620      	mov	r0, r4
 800202a:	f011 f80f 	bl	801304c <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <lcd_uart_init+0x74>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002030:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002032:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8002034:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002038:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800203c:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002048:	f012 f8ac 	bl	80141a4 <HAL_UART_Init>
 800204c:	b958      	cbnz	r0, 8002066 <lcd_uart_init+0x52>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <lcd_uart_init+0x78>)
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <lcd_uart_init+0x6c>)
 8002054:	f012 fa96 	bl	8014584 <HAL_UART_Receive_DMA>
 8002058:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800205c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002060:	b933      	cbnz	r3, 8002070 <lcd_uart_init+0x5c>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8002062:	b002      	add	sp, #8
 8002064:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8002066:	4631      	mov	r1, r6
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <lcd_uart_init+0x7c>)
 800206a:	f024 fb6b 	bl	8026744 <iprintf>
 800206e:	e7ee      	b.n	800204e <lcd_uart_init+0x3a>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002070:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <lcd_uart_init+0x80>)
}
 8002076:	b002      	add	sp, #8
 8002078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800207c:	f024 bb62 	b.w	8026744 <iprintf>
 8002080:	20002bc4 	.word	0x20002bc4
 8002084:	20001b38 	.word	0x20001b38
 8002088:	40005000 	.word	0x40005000
 800208c:	20001970 	.word	0x20001970
 8002090:	0802bb54 	.word	0x0802bb54
 8002094:	0802bb84 	.word	0x0802bb84

08002098 <lcd_reset>:

// send reset command to LCD  (LCD's own init will start it again at 9600)
lcd_reset() {
 8002098:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <lcd_reset+0x48>)
lcd_reset() {
 800209c:	b083      	sub	sp, #12

	txdmadone = 0;	// TX is NOT free
 800209e:	4c11      	ldr	r4, [pc, #68]	; (80020e4 <lcd_reset+0x4c>)
 80020a0:	2500      	movs	r5, #0
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a2:	466b      	mov	r3, sp
	txdmadone = 0;	// TX is NOT free
 80020a4:	6025      	str	r5, [r4, #0]
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a6:	e892 0003 	ldmia.w	r2, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020aa:	2207      	movs	r2, #7
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020ac:	e883 0003 	stmia.w	r3, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020b0:	4619      	mov	r1, r3
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <lcd_reset+0x50>)
 80020b4:	f011 f826 	bl	8013104 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80020b8:	b118      	cbz	r0, 80020c2 <lcd_reset+0x2a>
 80020ba:	e00b      	b.n	80020d4 <lcd_reset+0x3c>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
	}
	while (!(txdmadone)) {
//		printf("lcd_reset: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 80020bc:	2001      	movs	r0, #1
 80020be:	f014 fabd 	bl	801663c <osDelay>
	while (!(txdmadone)) {
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f9      	beq.n	80020bc <lcd_reset+0x24>
	}
	osDelay(500);		// give it time to reset
 80020c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020cc:	f014 fab6 	bl	801663c <osDelay>
}
 80020d0:	b003      	add	sp, #12
 80020d2:	bd30      	pop	{r4, r5, pc}
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020d4:	4601      	mov	r1, r0
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <lcd_reset+0x54>)
 80020d8:	f024 fb34 	bl	8026744 <iprintf>
 80020dc:	e7f1      	b.n	80020c2 <lcd_reset+0x2a>
 80020de:	bf00      	nop
 80020e0:	0802bbe8 	.word	0x0802bbe8
 80020e4:	20002174 	.word	0x20002174
 80020e8:	20002bc4 	.word	0x20002bc4
 80020ec:	0802bbb8 	.word	0x0802bbb8

080020f0 <lcd_baud>:

// send baudrate command to LCD
lcd_baud(int baud) {
 80020f0:	b510      	push	{r4, lr}
 80020f2:	b088      	sub	sp, #32
	HAL_StatusTypeDef stat;
	char str[32];
	int i;

	txdmadone = 0;	// TX is NOT free
 80020f4:	2300      	movs	r3, #0
 80020f6:	4c0d      	ldr	r4, [pc, #52]	; (800212c <lcd_baud+0x3c>)
lcd_baud(int baud) {
 80020f8:	4602      	mov	r2, r0
	sprintf(str, "baud=%u\xff\xff\xff", baud);
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <lcd_baud+0x40>)
 80020fc:	4668      	mov	r0, sp
	txdmadone = 0;	// TX is NOT free
 80020fe:	6023      	str	r3, [r4, #0]
	sprintf(str, "baud=%u\xff\xff\xff", baud);
 8002100:	f024 fd0a 	bl	8026b18 <siprintf>
	i = strlen(str);
 8002104:	4668      	mov	r0, sp
 8002106:	f7fe f8a5 	bl	8000254 <strlen>
 800210a:	4602      	mov	r2, r0

	stat = HAL_UART_Transmit_DMA(&huart5, str, i);		// if leading nulls on tx line
 800210c:	4669      	mov	r1, sp
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <lcd_baud+0x44>)
 8002110:	b292      	uxth	r2, r2
 8002112:	f010 fff7 	bl	8013104 <HAL_UART_Transmit_DMA>
	while (!(txdmadone)) {
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	b92b      	cbnz	r3, 8002126 <lcd_baud+0x36>
//		printf("lcd_baud: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 800211a:	2001      	movs	r0, #1
 800211c:	f014 fa8e 	bl	801663c <osDelay>
	while (!(txdmadone)) {
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f9      	beq.n	800211a <lcd_baud+0x2a>
	}
}
 8002126:	b008      	add	sp, #32
 8002128:	bd10      	pop	{r4, pc}
 800212a:	bf00      	nop
 800212c:	20002174 	.word	0x20002174
 8002130:	0802bbf0 	.word	0x0802bbf0
 8002134:	20002bc4 	.word	0x20002bc4

08002138 <lcd_writeblock>:
	}
	return (stat);
}

// send a binary block to the LCD
int lcd_writeblock(uint8_t *buf, int len) {
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	460e      	mov	r6, r1
	HAL_StatusTypeDef stat;
	volatile int i;
	uint32_t reg;
	uint8_t by;

	if (wait_armtx() == -1)
 800213e:	f7ff ff31 	bl	8001fa4 <wait_armtx>
 8002142:	4604      	mov	r4, r0
 8002144:	3001      	adds	r0, #1
 8002146:	d009      	beq.n	800215c <lcd_writeblock+0x24>
		return (-1);
//	printf("lcd_writeblock: %d\n", len);
	txdmadone = 0;	// TX in progress
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <lcd_writeblock+0x34>)
 800214a:	2400      	movs	r4, #0

//	myhexDump("NXT:", buf, len);

	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 800214c:	b2b2      	uxth	r2, r6
 800214e:	4629      	mov	r1, r5
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <lcd_writeblock+0x38>)
	txdmadone = 0;	// TX in progress
 8002152:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002154:	f010 ffd6 	bl	8013104 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002158:	4604      	mov	r4, r0
	if (stat != HAL_OK) {
 800215a:	b908      	cbnz	r0, 8002160 <lcd_writeblock+0x28>
	}
	return (stat);
}
 800215c:	4620      	mov	r0, r4
 800215e:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002160:	4621      	mov	r1, r4
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <lcd_writeblock+0x3c>)
 8002164:	f024 faee 	bl	8026744 <iprintf>
}
 8002168:	4620      	mov	r0, r4
 800216a:	bd70      	pop	{r4, r5, r6, pc}
 800216c:	20002174 	.word	0x20002174
 8002170:	20002bc4 	.word	0x20002bc4
 8002174:	0802bbfc 	.word	0x0802bbfc

08002178 <lcd_puts>:

// put a null terminated string
int lcd_puts(char *str) {
 8002178:	b530      	push	{r4, r5, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800217e:	f7ff ff11 	bl	8001fa4 <wait_armtx>
 8002182:	4605      	mov	r5, r0
 8002184:	3001      	adds	r0, #1
 8002186:	d01d      	beq.n	80021c4 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <lcd_puts+0x60>)
 800218c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	5ce3      	ldrb	r3, [r4, r3]
 8002192:	b153      	cbz	r3, 80021aa <lcd_puts+0x32>
		buffer[i] = str[i];
 8002194:	9901      	ldr	r1, [sp, #4]
 8002196:	9a01      	ldr	r2, [sp, #4]
		i++;
 8002198:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800219a:	5c61      	ldrb	r1, [r4, r1]
		i++;
 800219c:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800219e:	5481      	strb	r1, [r0, r2]
		i++;
 80021a0:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	5ce3      	ldrb	r3, [r4, r3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f4      	bne.n	8002194 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80021aa:	9901      	ldr	r1, [sp, #4]
 80021ac:	2300      	movs	r3, #0

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021ae:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80021b0:	4c0a      	ldr	r4, [pc, #40]	; (80021dc <lcd_puts+0x64>)
	buffer[i] = '\0';
 80021b2:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021b4:	b292      	uxth	r2, r2
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <lcd_puts+0x60>)
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80021ba:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021bc:	f010 ffa2 	bl	8013104 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021c0:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80021c2:	b910      	cbnz	r0, 80021ca <lcd_puts+0x52>
	}
	return (stat);
}
 80021c4:	4628      	mov	r0, r5
 80021c6:	b003      	add	sp, #12
 80021c8:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021ca:	4629      	mov	r1, r5
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <lcd_puts+0x6c>)
 80021ce:	f024 fab9 	bl	8026744 <iprintf>
}
 80021d2:	4628      	mov	r0, r5
 80021d4:	b003      	add	sp, #12
 80021d6:	bd30      	pop	{r4, r5, pc}
 80021d8:	20001910 	.word	0x20001910
 80021dc:	20002174 	.word	0x20002174
 80021e0:	20002bc4 	.word	0x20002bc4
 80021e4:	0802bc30 	.word	0x0802bc30

080021e8 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 80021e8:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 80021ea:	2300      	movs	r3, #0
int lcd_rxdma() {
 80021ec:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <lcd_rxdma+0x64>)
	volatile int count = 0;
 80021f0:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 80021f2:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021f4:	6953      	ldr	r3, [r2, #20]
 80021f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021fa:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 80021fc:	9a01      	ldr	r2, [sp, #4]
 80021fe:	2a80      	cmp	r2, #128	; 0x80
 8002200:	d016      	beq.n	8002230 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002202:	4d13      	ldr	r5, [pc, #76]	; (8002250 <lcd_rxdma+0x68>)
 8002204:	9a01      	ldr	r2, [sp, #4]
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <lcd_rxdma+0x42>
 800220c:	4c11      	ldr	r4, [pc, #68]	; (8002254 <lcd_rxdma+0x6c>)
 800220e:	4812      	ldr	r0, [pc, #72]	; (8002258 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002210:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8002212:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002214:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8002216:	3301      	adds	r3, #1
		count++;
 8002218:	3201      	adds	r2, #1
		return (0);
 800221a:	2b80      	cmp	r3, #128	; 0x80
		count++;
 800221c:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800221e:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8002220:	bfa8      	it	ge
 8002222:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002224:	429a      	cmp	r2, r3
 8002226:	d1f3      	bne.n	8002210 <lcd_rxdma+0x28>
 8002228:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800222a:	9800      	ldr	r0, [sp, #0]
}
 800222c:	b003      	add	sp, #12
 800222e:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <lcd_rxdma+0x70>)
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <lcd_rxdma+0x74>)
 8002234:	f012 f9a6 	bl	8014584 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8002238:	b910      	cbnz	r0, 8002240 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 800223a:	2300      	movs	r3, #0
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	e7e0      	b.n	8002202 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002240:	4601      	mov	r1, r0
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <lcd_rxdma+0x78>)
 8002244:	f024 fa7e 	bl	8026744 <iprintf>
 8002248:	e7f7      	b.n	800223a <lcd_rxdma+0x52>
 800224a:	bf00      	nop
 800224c:	40026000 	.word	0x40026000
 8002250:	20001b38 	.word	0x20001b38
 8002254:	20001ab8 	.word	0x20001ab8
 8002258:	20001970 	.word	0x20001970
 800225c:	20002bc4 	.word	0x20002bc4
 8002260:	0802bc60 	.word	0x0802bc60

08002264 <lcd_getc>:
int lcd_getc() {
	volatile static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <lcd_getc+0x34>)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <lcd_getc+0x38>)
 8002268:	6811      	ldr	r1, [r2, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4299      	cmp	r1, r3
 800226e:	d00f      	beq.n	8002290 <lcd_getc+0x2c>
		ch = lcdrxbuffer[lastidx];
 8002270:	6810      	ldr	r0, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002272:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002274:	490a      	ldr	r1, [pc, #40]	; (80022a0 <lcd_getc+0x3c>)
	if (++index >= limit)
 8002276:	3301      	adds	r3, #1
		return (0);
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	bfa8      	it	ge
 800227c:	2300      	movge	r3, #0
int lcd_getc() {
 800227e:	b410      	push	{r4}
		ch = lcdrxbuffer[lastidx];
 8002280:	4c08      	ldr	r4, [pc, #32]	; (80022a4 <lcd_getc+0x40>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002282:	6013      	str	r3, [r2, #0]
		rxtimeout = 100;
 8002284:	2364      	movs	r3, #100	; 0x64
		ch = lcdrxbuffer[lastidx];
 8002286:	5c20      	ldrb	r0, [r4, r0]
//  printf("lcd_getc() got %02x\n", ch);
	}

	return (ch);
}
 8002288:	f85d 4b04 	ldr.w	r4, [sp], #4
		rxtimeout = 100;
 800228c:	600b      	str	r3, [r1, #0]
}
 800228e:	4770      	bx	lr
	ch = -1;
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20001a80 	.word	0x20001a80
 800229c:	20001b38 	.word	0x20001b38
 80022a0:	20001f34 	.word	0x20001f34
 80022a4:	20001ab8 	.word	0x20001ab8

080022a8 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80022a8:	b510      	push	{r4, lr}
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	if (lcd_txblocked)
 80022aa:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <writelcdcmd+0x30>)
int writelcdcmd(char *str) {
 80022ac:	b098      	sub	sp, #96	; 0x60
	if (lcd_txblocked)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	b973      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (-1);

	strcpy(pkt, str);
 80022b2:	4601      	mov	r1, r0
 80022b4:	4668      	mov	r0, sp
 80022b6:	f024 fcc0 	bl	8026c3a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <writelcdcmd+0x34>)
	strcpy(pkt, str);
 80022bc:	4602      	mov	r2, r0
	if (!(lcd_txblocked))
 80022be:	6823      	ldr	r3, [r4, #0]
	strcat(pkt, "\xff\xff\xff");
 80022c0:	6808      	ldr	r0, [r1, #0]
 80022c2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022c4:	b923      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (lcd_puts(pkt));
 80022c6:	4668      	mov	r0, sp
 80022c8:	f7ff ff56 	bl	8002178 <lcd_puts>
	else
		return (-1);
}
 80022cc:	b018      	add	sp, #96	; 0x60
 80022ce:	bd10      	pop	{r4, pc}
		return (-1);
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e7fa      	b.n	80022cc <writelcdcmd+0x24>
 80022d6:	bf00      	nop
 80022d8:	20001a90 	.word	0x20001a90
 80022dc:	0802bbec 	.word	0x0802bbec

080022e0 <lcd_gps.part.0>:
	static uint8_t vis = 0;

	if (our_currentpage != 0)
		return;

	if (gpslocked) {
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <lcd_gps.part.0+0x1a8>)
void lcd_gps(void) {
 80022e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	ed2d 8b04 	vpush	{d8-d9}
	if (gpslocked) {
 80022ea:	781d      	ldrb	r5, [r3, #0]
void lcd_gps(void) {
 80022ec:	b0b6      	sub	sp, #216	; 0xd8
	if (gpslocked) {
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	d05f      	beq.n	80023b2 <lcd_gps.part.0+0xd2>
		lat = statuspkt.NavPvt.lat / 10000000.0;
 80022f2:	4f66      	ldr	r7, [pc, #408]	; (800248c <lcd_gps.part.0+0x1ac>)
		lon = statuspkt.NavPvt.lon / 10000000.0;
		calcLocator(gridsquare, lat, lon);
 80022f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 80022f8:	ad0e      	add	r5, sp, #56	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 80022fa:	ac1e      	add	r4, sp, #120	; 0x78
		lat = statuspkt.NavPvt.lat / 10000000.0;
 80022fc:	ed97 7a08 	vldr	s14, [r7, #32]
		calcLocator(gridsquare, lat, lon);
 8002300:	4640      	mov	r0, r8
	volatile int result = 0;
 8002302:	2600      	movs	r6, #0
		lat = statuspkt.NavPvt.lat / 10000000.0;
 8002304:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8002308:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002478 <lcd_gps.part.0+0x198>
 800230c:	ee87 9b06 	vdiv.f64	d9, d7, d6
		lon = statuspkt.NavPvt.lon / 10000000.0;
 8002310:	ed97 7a07 	vldr	s14, [r7, #28]
 8002314:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8002318:	ee87 8b06 	vdiv.f64	d8, d7, d6
		calcLocator(gridsquare, lat, lon);
 800231c:	eeb0 0b49 	vmov.f64	d0, d9
 8002320:	eeb0 1b48 	vmov.f64	d1, d8
 8002324:	f003 fb14 	bl	8005950 <calcLocator>
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 8002328:	4959      	ldr	r1, [pc, #356]	; (8002490 <lcd_gps.part.0+0x1b0>)
 800232a:	4628      	mov	r0, r5
 800232c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002330:	ec53 2b19 	vmov	r2, r3, d9
 8002334:	ed8d 8b00 	vstr	d8, [sp]
 8002338:	f024 fbee 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800233c:	462b      	mov	r3, r5
 800233e:	4a55      	ldr	r2, [pc, #340]	; (8002494 <lcd_gps.part.0+0x1b4>)
 8002340:	4620      	mov	r0, r4
 8002342:	4955      	ldr	r1, [pc, #340]	; (8002498 <lcd_gps.part.0+0x1b8>)
	volatile int result = 0;
 8002344:	9605      	str	r6, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002346:	f024 fbe7 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ffac 	bl	80022a8 <writelcdcmd>
 8002350:	9005      	str	r0, [sp, #20]
	return (result);
 8002352:	9b05      	ldr	r3, [sp, #20]
		setlcdtext("t2.txt", str);

		acc = statuspkt.NavPvt.hAcc / 1000.0;

		sprintf(str, "HAcc:%.02fm\\rPres:%d.%03d", acc, pressure, pressfrac >> 2);
 8002354:	4628      	mov	r0, r5
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 8002356:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
		sprintf(str, "HAcc:%.02fm\\rPres:%d.%03d", acc, pressure, pressfrac >> 2);
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <lcd_gps.part.0+0x1bc>)
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 800235c:	eeb8 7b47 	vcvt.f64.u32	d7, s14
		sprintf(str, "HAcc:%.02fm\\rPres:%d.%03d", acc, pressure, pressfrac >> 2);
 8002360:	494f      	ldr	r1, [pc, #316]	; (80024a0 <lcd_gps.part.0+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 8002364:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002480 <lcd_gps.part.0+0x1a0>
		sprintf(str, "HAcc:%.02fm\\rPres:%d.%03d", acc, pressure, pressfrac >> 2);
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <lcd_gps.part.0+0x1c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	ec53 2b17 	vmov	r2, r3, d7
 800237a:	f024 fbcd 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800237e:	462b      	mov	r3, r5
 8002380:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <lcd_gps.part.0+0x1c8>)
 8002382:	4620      	mov	r0, r4
 8002384:	4944      	ldr	r1, [pc, #272]	; (8002498 <lcd_gps.part.0+0x1b8>)
	volatile int result = 0;
 8002386:	9604      	str	r6, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002388:	f024 fbc6 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff ff8b 	bl	80022a8 <writelcdcmd>
 8002392:	9004      	str	r0, [sp, #16]
	return (result);
 8002394:	9b04      	ldr	r3, [sp, #16]
	}

	// number of satellites
	sats = statuspkt.NavPvt.numSV;

	(vis++);
 8002396:	4e45      	ldr	r6, [pc, #276]	; (80024ac <lcd_gps.part.0+0x1cc>)
	sats = statuspkt.NavPvt.numSV;
 8002398:	7efa      	ldrb	r2, [r7, #27]
	(vis++);
 800239a:	7833      	ldrb	r3, [r6, #0]
	if (sats < 4)
 800239c:	2a03      	cmp	r2, #3
	sats = statuspkt.NavPvt.numSV;
 800239e:	b2d7      	uxtb	r7, r2
	(vis++);
 80023a0:	f103 0301 	add.w	r3, r3, #1
 80023a4:	7033      	strb	r3, [r6, #0]
	if (sats < 4)
 80023a6:	d920      	bls.n	80023ea <lcd_gps.part.0+0x10a>
		col = 0xf800;		// red
	else if (sats < 6)
 80023a8:	2f05      	cmp	r7, #5
 80023aa:	d850      	bhi.n	800244e <lcd_gps.part.0+0x16e>
		col = 0xf6c0;		// dark yellow
 80023ac:	f24f 63c0 	movw	r3, #63168	; 0xf6c0
 80023b0:	e01d      	b.n	80023ee <lcd_gps.part.0+0x10e>
	sprintf(str, "%s=\"%s\"", id, string);
 80023b2:	ac1e      	add	r4, sp, #120	; 0x78
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <lcd_gps.part.0+0x1d0>)
 80023b6:	4a37      	ldr	r2, [pc, #220]	; (8002494 <lcd_gps.part.0+0x1b4>)
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <lcd_gps.part.0+0x1b8>)
 80023ba:	4620      	mov	r0, r4
	volatile int result = 0;
 80023bc:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 80023be:	f024 fbab 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80023c2:	4620      	mov	r0, r4
 80023c4:	4f31      	ldr	r7, [pc, #196]	; (800248c <lcd_gps.part.0+0x1ac>)
 80023c6:	f7ff ff6f 	bl	80022a8 <writelcdcmd>
 80023ca:	9007      	str	r0, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <lcd_gps.part.0+0x1d0>)
 80023ce:	4620      	mov	r0, r4
	return (result);
 80023d0:	9907      	ldr	r1, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <lcd_gps.part.0+0x1c8>)
 80023d4:	4930      	ldr	r1, [pc, #192]	; (8002498 <lcd_gps.part.0+0x1b8>)
	volatile int result = 0;
 80023d6:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 80023d8:	f024 fb9e 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80023dc:	4620      	mov	r0, r4
 80023de:	ad0e      	add	r5, sp, #56	; 0x38
 80023e0:	f7ff ff62 	bl	80022a8 <writelcdcmd>
 80023e4:	9006      	str	r0, [sp, #24]
	return (result);
 80023e6:	9b06      	ldr	r3, [sp, #24]
 80023e8:	e7d5      	b.n	8002396 <lcd_gps.part.0+0xb6>
		col = 0xf800;		// red
 80023ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	sprintf(buffer, "%s=%lu", id, value);
 80023ee:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <lcd_gps.part.0+0x1d4>)
 80023f0:	4620      	mov	r0, r4
 80023f2:	4931      	ldr	r1, [pc, #196]	; (80024b8 <lcd_gps.part.0+0x1d8>)
 80023f4:	f024 fb90 	bl	8026b18 <siprintf>
	result = writelcdcmd(buffer);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff55 	bl	80022a8 <writelcdcmd>
 80023fe:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 8002400:	9b08      	ldr	r3, [sp, #32]
 8002402:	3301      	adds	r3, #1
 8002404:	d033      	beq.n	800246e <lcd_gps.part.0+0x18e>
	else
		col = 0xffff;		// white
	setlcdbin("t4.pco", col);

	if (sats < 5) {
 8002406:	2f04      	cmp	r7, #4
	return (result);
 8002408:	9b08      	ldr	r3, [sp, #32]
	if (sats < 5) {
 800240a:	d802      	bhi.n	8002412 <lcd_gps.part.0+0x132>
		if (vis & 1)
 800240c:	7833      	ldrb	r3, [r6, #0]
 800240e:	07db      	lsls	r3, r3, #31
 8002410:	d519      	bpl.n	8002446 <lcd_gps.part.0+0x166>
			writelcdcmd("vis t4,1");		// flashing on
 8002412:	482a      	ldr	r0, [pc, #168]	; (80024bc <lcd_gps.part.0+0x1dc>)
 8002414:	f7ff ff48 	bl	80022a8 <writelcdcmd>
		else
			writelcdcmd("vis t4,0");
	} else {
		writelcdcmd("vis t4,1");
	}
	sprintf(str, "Sats:%u", sats);
 8002418:	463a      	mov	r2, r7
 800241a:	4929      	ldr	r1, [pc, #164]	; (80024c0 <lcd_gps.part.0+0x1e0>)
 800241c:	4628      	mov	r0, r5
 800241e:	f024 fb7b 	bl	8026b18 <siprintf>
	volatile int result = 0;
 8002422:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002424:	462b      	mov	r3, r5
 8002426:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <lcd_gps.part.0+0x1e4>)
 8002428:	491b      	ldr	r1, [pc, #108]	; (8002498 <lcd_gps.part.0+0x1b8>)
	volatile int result = 0;
 800242a:	9009      	str	r0, [sp, #36]	; 0x24
	sprintf(str, "%s=\"%s\"", id, string);
 800242c:	4620      	mov	r0, r4
 800242e:	f024 fb73 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff38 	bl	80022a8 <writelcdcmd>
 8002438:	9009      	str	r0, [sp, #36]	; 0x24
	return (result);
 800243a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	setlcdtext("t4.txt", str);
}
 800243c:	b036      	add	sp, #216	; 0xd8
 800243e:	ecbd 8b04 	vpop	{d8-d9}
 8002442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			writelcdcmd("vis t4,0");
 8002446:	4820      	ldr	r0, [pc, #128]	; (80024c8 <lcd_gps.part.0+0x1e8>)
 8002448:	f7ff ff2e 	bl	80022a8 <writelcdcmd>
 800244c:	e7e4      	b.n	8002418 <lcd_gps.part.0+0x138>
	sprintf(buffer, "%s=%lu", id, value);
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <lcd_gps.part.0+0x1d4>)
 8002454:	4918      	ldr	r1, [pc, #96]	; (80024b8 <lcd_gps.part.0+0x1d8>)
 8002456:	4620      	mov	r0, r4
 8002458:	f024 fb5e 	bl	8026b18 <siprintf>
	result = writelcdcmd(buffer);
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff23 	bl	80022a8 <writelcdcmd>
 8002462:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 8002464:	9b08      	ldr	r3, [sp, #32]
 8002466:	3301      	adds	r3, #1
 8002468:	d001      	beq.n	800246e <lcd_gps.part.0+0x18e>
	return (result);
 800246a:	9b08      	ldr	r3, [sp, #32]
	if (sats < 5) {
 800246c:	e7d1      	b.n	8002412 <lcd_gps.part.0+0x132>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <lcd_gps.part.0+0x1ec>)
 8002470:	f024 f968 	bl	8026744 <iprintf>
 8002474:	e7c7      	b.n	8002406 <lcd_gps.part.0+0x126>
 8002476:	bf00      	nop
 8002478:	00000000 	.word	0x00000000
 800247c:	416312d0 	.word	0x416312d0
 8002480:	00000000 	.word	0x00000000
 8002484:	408f4000 	.word	0x408f4000
 8002488:	200034a8 	.word	0x200034a8
 800248c:	2000303c 	.word	0x2000303c
 8002490:	0802bc90 	.word	0x0802bc90
 8002494:	0802bcb4 	.word	0x0802bcb4
 8002498:	0802bcbc 	.word	0x0802bcbc
 800249c:	20003434 	.word	0x20003434
 80024a0:	0802bcc4 	.word	0x0802bcc4
 80024a4:	20003438 	.word	0x20003438
 80024a8:	0802bce0 	.word	0x0802bce0
 80024ac:	20002178 	.word	0x20002178
 80024b0:	0802b6a0 	.word	0x0802b6a0
 80024b4:	0802bce8 	.word	0x0802bce8
 80024b8:	0802bcf0 	.word	0x0802bcf0
 80024bc:	0802bd10 	.word	0x0802bd10
 80024c0:	0802bd28 	.word	0x0802bd28
 80024c4:	0802bd30 	.word	0x0802bd30
 80024c8:	0802bd1c 	.word	0x0802bd1c
 80024cc:	0802bcf8 	.word	0x0802bcf8

080024d0 <lcd_clearrxbuf>:
lcd_clearrxbuf() {
 80024d0:	b510      	push	{r4, lr}
	lcd_rxdma();			// clear the dma rx buffer
 80024d2:	f7ff fe89 	bl	80021e8 <lcd_rxdma>
	if (lastidx != lcdrxoutidx) {		// something there
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <lcd_clearrxbuf+0x40>)
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <lcd_clearrxbuf+0x44>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	6809      	ldr	r1, [r1, #0]
 80024de:	428b      	cmp	r3, r1
 80024e0:	d014      	beq.n	800250c <lcd_clearrxbuf+0x3c>
		ch = lcdrxbuffer[lastidx];
 80024e2:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 80024e4:	2464      	movs	r4, #100	; 0x64
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80024e6:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 80024e8:	480b      	ldr	r0, [pc, #44]	; (8002518 <lcd_clearrxbuf+0x48>)
	if (++index >= limit)
 80024ea:	3301      	adds	r3, #1
		rxtimeout = 100;
 80024ec:	6004      	str	r4, [r0, #0]
		return (0);
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	bfa8      	it	ge
 80024f2:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80024f4:	6013      	str	r3, [r2, #0]
	while (result != -1) {
 80024f6:	e006      	b.n	8002506 <lcd_clearrxbuf+0x36>
		ch = lcdrxbuffer[lastidx];
 80024f8:	6813      	ldr	r3, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80024fa:	6813      	ldr	r3, [r2, #0]
	if (++index >= limit)
 80024fc:	3301      	adds	r3, #1
		return (0);
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	bfa8      	it	ge
 8002502:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002504:	6013      	str	r3, [r2, #0]
	if (lastidx != lcdrxoutidx) {		// something there
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	4299      	cmp	r1, r3
 800250a:	d1f5      	bne.n	80024f8 <lcd_clearrxbuf+0x28>
}
 800250c:	bd10      	pop	{r4, pc}
 800250e:	bf00      	nop
 8002510:	20001a80 	.word	0x20001a80
 8002514:	20001b38 	.word	0x20001b38
 8002518:	20001f34 	.word	0x20001f34

0800251c <isnexpkt>:
int isnexpkt(unsigned char buffer[], uint8_t size) {
 800251c:	b530      	push	{r4, r5, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <isnexpkt+0xd0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002520:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 8002522:	4c33      	ldr	r4, [pc, #204]	; (80025f0 <isnexpkt+0xd4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d05d      	beq.n	80025e8 <isnexpkt+0xcc>
		ch = lcdrxbuffer[lastidx];
 800252c:	6825      	ldr	r5, [r4, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800252e:	6823      	ldr	r3, [r4, #0]
		rxtimeout = 100;
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <isnexpkt+0xd8>)
	if (++index >= limit)
 8002532:	3301      	adds	r3, #1
		return (0);
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	bfa8      	it	ge
 8002538:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800253a:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 800253c:	2364      	movs	r3, #100	; 0x64
		buffer[i++] = ch;
 800253e:	4c2e      	ldr	r4, [pc, #184]	; (80025f8 <isnexpkt+0xdc>)
		rxtimeout = 100;
 8002540:	6013      	str	r3, [r2, #0]
		ch = lcdrxbuffer[lastidx];
 8002542:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <isnexpkt+0xe0>)
 8002544:	5d5b      	ldrb	r3, [r3, r5]
		ch = rawchar & 0xff;
 8002546:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800254a:	7823      	ldrb	r3, [r4, #0]
 800254c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002550:	54c5      	strb	r5, [r0, r3]
 8002552:	3301      	adds	r3, #1
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002554:	4d2a      	ldr	r5, [pc, #168]	; (8002600 <isnexpkt+0xe4>)
		buffer[i++] = ch;
 8002556:	b2db      	uxtb	r3, r3
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002558:	682d      	ldr	r5, [r5, #0]
		buffer[i++] = ch;
 800255a:	7023      	strb	r3, [r4, #0]
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 800255c:	2d03      	cmp	r5, #3
 800255e:	d02c      	beq.n	80025ba <isnexpkt+0x9e>
		if (ch == 0xff) {
 8002560:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002564:	2dff      	cmp	r5, #255	; 0xff
 8002566:	d02e      	beq.n	80025c6 <isnexpkt+0xaa>
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8002568:	f89d c007 	ldrb.w	ip, [sp, #7]
 800256c:	4d25      	ldr	r5, [pc, #148]	; (8002604 <isnexpkt+0xe8>)
 800256e:	f885 c000 	strb.w	ip, [r5]
			termcnt = 0;
 8002572:	f04f 0c00 	mov.w	ip, #0
 8002576:	4d24      	ldr	r5, [pc, #144]	; (8002608 <isnexpkt+0xec>)
 8002578:	f885 c000 	strb.w	ip, [r5]
		if (i == size) { // overrun
 800257c:	428b      	cmp	r3, r1
 800257e:	d102      	bne.n	8002586 <isnexpkt+0x6a>
			i = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8002584:	702b      	strb	r3, [r5, #0]
	if (rxtimeout > 0)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	b97b      	cbnz	r3, 80025aa <isnexpkt+0x8e>
		termcnt = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <isnexpkt+0xec>)
		for (i = 0; i < size; buffer[i++] = 0)
 800258e:	4c1a      	ldr	r4, [pc, #104]	; (80025f8 <isnexpkt+0xdc>)
		termcnt = 0;
 8002590:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8002592:	7023      	strb	r3, [r4, #0]
 8002594:	b119      	cbz	r1, 800259e <isnexpkt+0x82>
 8002596:	460a      	mov	r2, r1
 8002598:	4619      	mov	r1, r3
 800259a:	f023 f935 	bl	8025808 <memset>
		i = 0;
 800259e:	2300      	movs	r3, #0
		return (-1);
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 80025a4:	7023      	strb	r3, [r4, #0]
}
 80025a6:	b003      	add	sp, #12
 80025a8:	bd30      	pop	{r4, r5, pc}
		rxtimeout--;
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0eb      	beq.n	800258a <isnexpkt+0x6e>
	return (-2);  // no char available
 80025b2:	f06f 0001 	mvn.w	r0, #1
}
 80025b6:	b003      	add	sp, #12
 80025b8:	bd30      	pop	{r4, r5, pc}
			if (ch == 0x05) {
 80025ba:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80025be:	2d05      	cmp	r5, #5
 80025c0:	d1ce      	bne.n	8002560 <isnexpkt+0x44>
				index = i;
 80025c2:	4618      	mov	r0, r3
				return (index);
 80025c4:	e7ef      	b.n	80025a6 <isnexpkt+0x8a>
			termcnt++;
 80025c6:	4d10      	ldr	r5, [pc, #64]	; (8002608 <isnexpkt+0xec>)
 80025c8:	f895 c000 	ldrb.w	ip, [r5]
 80025cc:	f10c 0c01 	add.w	ip, ip, #1
 80025d0:	fa5f fc8c 	uxtb.w	ip, ip
			if (termcnt == 3) {
 80025d4:	f1bc 0f03 	cmp.w	ip, #3
			termcnt++;
 80025d8:	f885 c000 	strb.w	ip, [r5]
			if (termcnt == 3) {
 80025dc:	d1ce      	bne.n	800257c <isnexpkt+0x60>
				i = 0;
 80025de:	2200      	movs	r2, #0
				index = i;
 80025e0:	4618      	mov	r0, r3
				i = 0;
 80025e2:	7022      	strb	r2, [r4, #0]
				termcnt = 0;
 80025e4:	702a      	strb	r2, [r5, #0]
				return (index);
 80025e6:	e7de      	b.n	80025a6 <isnexpkt+0x8a>
 80025e8:	4a02      	ldr	r2, [pc, #8]	; (80025f4 <isnexpkt+0xd8>)
 80025ea:	e7cc      	b.n	8002586 <isnexpkt+0x6a>
 80025ec:	20001b38 	.word	0x20001b38
 80025f0:	20001a80 	.word	0x20001a80
 80025f4:	20001f34 	.word	0x20001f34
 80025f8:	20001a78 	.word	0x20001a78
 80025fc:	20001ab8 	.word	0x20001ab8
 8002600:	200018dc 	.word	0x200018dc
 8002604:	20001f30 	.word	0x20001f30
 8002608:	20001f60 	.word	0x20001f60

0800260c <decode_lcdtype>:
	const char next[] = { "NX" };
 800260c:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <decode_lcdtype+0x98>)
 800260e:	6813      	ldr	r3, [r2, #0]
int decode_lcdtype(char *str) {
 8002610:	b570      	push	{r4, r5, r6, lr}
	const char next[] = { "NX" };
 8002612:	0c1a      	lsrs	r2, r3, #16
int decode_lcdtype(char *str) {
 8002614:	b082      	sub	sp, #8
	nex_model[i] = '\0';
 8002616:	4e24      	ldr	r6, [pc, #144]	; (80026a8 <decode_lcdtype+0x9c>)
 8002618:	2400      	movs	r4, #0
	const char next[] = { "NX" };
 800261a:	f88d 2006 	strb.w	r2, [sp, #6]
	nex_model[i] = '\0';
 800261e:	7034      	strb	r4, [r6, #0]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002620:	7802      	ldrb	r2, [r0, #0]
	const char next[] = { "NX" };
 8002622:	f8ad 3004 	strh.w	r3, [sp, #4]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002626:	1e53      	subs	r3, r2, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2bfd      	cmp	r3, #253	; 0xfd
 800262c:	d81a      	bhi.n	8002664 <decode_lcdtype+0x58>
 800262e:	4605      	mov	r5, r0
 8002630:	4601      	mov	r1, r0
 8002632:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8002636:	f1c0 0e01 	rsb	lr, r0, #1
 800263a:	e00b      	b.n	8002654 <decode_lcdtype+0x48>
		if (str[i++] == next[j]) {
 800263c:	f104 0308 	add.w	r3, r4, #8
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002640:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (str[i++] == next[j]) {
 8002644:	eb0d 0c03 	add.w	ip, sp, r3
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002648:	1e53      	subs	r3, r2, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2bfd      	cmp	r3, #253	; 0xfd
 800264e:	d809      	bhi.n	8002664 <decode_lcdtype+0x58>
		if (str[i++] == next[j]) {
 8002650:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8002654:	eb0e 0301 	add.w	r3, lr, r1
 8002658:	4594      	cmp	ip, r2
 800265a:	4618      	mov	r0, r3
 800265c:	d1ee      	bne.n	800263c <decode_lcdtype+0x30>
			if (j >= 2) {		// found N...X
 800265e:	b924      	cbnz	r4, 800266a <decode_lcdtype+0x5e>
 8002660:	2401      	movs	r4, #1
 8002662:	e7eb      	b.n	800263c <decode_lcdtype+0x30>
	return (0);
 8002664:	2000      	movs	r0, #0
}
 8002666:	b002      	add	sp, #8
 8002668:	bd70      	pop	{r4, r5, r6, pc}
				nex_model[k++] = 'M';
 800266a:	f645 024d 	movw	r2, #22605	; 0x584d
 800266e:	8032      	strh	r2, [r6, #0]
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002670:	5cea      	ldrb	r2, [r5, r3]
 8002672:	442b      	add	r3, r5
 8002674:	1e51      	subs	r1, r2, #1
 8002676:	b2c9      	uxtb	r1, r1
 8002678:	29fd      	cmp	r1, #253	; 0xfd
 800267a:	d80f      	bhi.n	800269c <decode_lcdtype+0x90>
 800267c:	2a2c      	cmp	r2, #44	; 0x2c
 800267e:	d00d      	beq.n	800269c <decode_lcdtype+0x90>
 8002680:	4c0a      	ldr	r4, [pc, #40]	; (80026ac <decode_lcdtype+0xa0>)
 8002682:	e001      	b.n	8002688 <decode_lcdtype+0x7c>
 8002684:	2a2c      	cmp	r2, #44	; 0x2c
 8002686:	d009      	beq.n	800269c <decode_lcdtype+0x90>
					nex_model[k++] = str[i++];
 8002688:	eb03 000e 	add.w	r0, r3, lr
 800268c:	f804 2f01 	strb.w	r2, [r4, #1]!
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002690:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002694:	1e51      	subs	r1, r2, #1
 8002696:	b2c9      	uxtb	r1, r1
 8002698:	29fd      	cmp	r1, #253	; 0xfd
 800269a:	d9f3      	bls.n	8002684 <decode_lcdtype+0x78>
				nex_model[i] = '\0';
 800269c:	2300      	movs	r3, #0
 800269e:	5433      	strb	r3, [r6, r0]
}
 80026a0:	b002      	add	sp, #8
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	0802bd3c 	.word	0x0802bd3c
 80026a8:	20001b50 	.word	0x20001b50
 80026ac:	20001b51 	.word	0x20001b51

080026b0 <lcd_gps>:
	if (our_currentpage != 0)
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <lcd_gps+0xc>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b90b      	cbnz	r3, 80026ba <lcd_gps+0xa>
 80026b6:	f7ff be13 	b.w	80022e0 <lcd_gps.part.0>
}
 80026ba:	4770      	bx	lr
 80026bc:	20001d48 	.word	0x20001d48

080026c0 <lcd_time>:
// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];
	static uint8_t oldlocked = 0xff;

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026c0:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <lcd_time+0xb4>)
 80026c2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80026c6:	482c      	ldr	r0, [pc, #176]	; (8002778 <lcd_time+0xb8>)
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	6852      	ldr	r2, [r2, #4]
 80026cc:	185b      	adds	r3, r3, r1
 80026ce:	f142 0200 	adc.w	r2, r2, #0
void lcd_time() {
 80026d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d4:	b09f      	sub	sp, #124	; 0x7c
	timeinfo = *localtime(&localepochtime);
 80026d6:	4c29      	ldr	r4, [pc, #164]	; (800277c <lcd_time+0xbc>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026d8:	2500      	movs	r5, #0
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
	setlcdtext("t0.txt", sbuffer);

	if (gpslocked != oldlocked) {
 80026da:	4f29      	ldr	r7, [pc, #164]	; (8002780 <lcd_time+0xc0>)
 80026dc:	4e29      	ldr	r6, [pc, #164]	; (8002784 <lcd_time+0xc4>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026de:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80026e2:	f022 ff31 	bl	8025548 <localtime>
 80026e6:	4684      	mov	ip, r0
 80026e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	f8dc 2000 	ldr.w	r2, [ip]
 80026f8:	4623      	mov	r3, r4
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 80026fa:	2128      	movs	r1, #40	; 0x28
 80026fc:	4822      	ldr	r0, [pc, #136]	; (8002788 <lcd_time+0xc8>)
	timeinfo = *localtime(&localepochtime);
 80026fe:	f843 2920 	str.w	r2, [r3], #-32
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <lcd_time+0xcc>)
 8002704:	f024 fffe 	bl	8027704 <strftime>
	sprintf(str, "%s=\"%s\"", id, string);
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <lcd_time+0xc8>)
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <lcd_time+0xd0>)
 800270c:	a806      	add	r0, sp, #24
 800270e:	4921      	ldr	r1, [pc, #132]	; (8002794 <lcd_time+0xd4>)
	volatile int result = 0;
 8002710:	9500      	str	r5, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002712:	f024 fa01 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002716:	a806      	add	r0, sp, #24
 8002718:	f7ff fdc6 	bl	80022a8 <writelcdcmd>
 800271c:	9000      	str	r0, [sp, #0]
	if (gpslocked != oldlocked) {
 800271e:	783c      	ldrb	r4, [r7, #0]
	return (result);
 8002720:	9b00      	ldr	r3, [sp, #0]
	if (gpslocked != oldlocked) {
 8002722:	7833      	ldrb	r3, [r6, #0]
 8002724:	42a3      	cmp	r3, r4
 8002726:	d01b      	beq.n	8002760 <lcd_time+0xa0>
		if (gpslocked) {
 8002728:	b9e4      	cbnz	r4, 8002764 <lcd_time+0xa4>
			writelcdcmd("vis t3,0");	// hide warning
			writelcdcmd("vis t1,1");	// show date
		} else {
			writelcdcmd("vis t1,0");	// hide date
 800272a:	481b      	ldr	r0, [pc, #108]	; (8002798 <lcd_time+0xd8>)
 800272c:	f7ff fdbc 	bl	80022a8 <writelcdcmd>
			sprintf(str, "UNLOCK GPS %d", statuspkt.NavPvt.numSV);
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <lcd_time+0xdc>)
 8002732:	491b      	ldr	r1, [pc, #108]	; (80027a0 <lcd_time+0xe0>)
 8002734:	a802      	add	r0, sp, #8
 8002736:	7eda      	ldrb	r2, [r3, #27]
 8002738:	f024 f9ee 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800273c:	ab02      	add	r3, sp, #8
 800273e:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <lcd_time+0xe4>)
 8002740:	a806      	add	r0, sp, #24
 8002742:	4914      	ldr	r1, [pc, #80]	; (8002794 <lcd_time+0xd4>)
	volatile int result = 0;
 8002744:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002746:	f024 f9e7 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 800274a:	a806      	add	r0, sp, #24
 800274c:	f7ff fdac 	bl	80022a8 <writelcdcmd>
 8002750:	4603      	mov	r3, r0
			setlcdtext("t3.txt", str);
			writelcdcmd("vis t3,1");	// show warning
 8002752:	4815      	ldr	r0, [pc, #84]	; (80027a8 <lcd_time+0xe8>)
	result = writelcdcmd(str);
 8002754:	9301      	str	r3, [sp, #4]
	return (result);
 8002756:	9b01      	ldr	r3, [sp, #4]
			writelcdcmd("vis t3,1");	// show warning
 8002758:	f7ff fda6 	bl	80022a8 <writelcdcmd>
		}
		oldlocked = gpslocked;
 800275c:	783b      	ldrb	r3, [r7, #0]
 800275e:	7033      	strb	r3, [r6, #0]
	}
}
 8002760:	b01f      	add	sp, #124	; 0x7c
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}
			writelcdcmd("vis t3,0");	// hide warning
 8002764:	4811      	ldr	r0, [pc, #68]	; (80027ac <lcd_time+0xec>)
 8002766:	f7ff fd9f 	bl	80022a8 <writelcdcmd>
			writelcdcmd("vis t1,1");	// show date
 800276a:	4811      	ldr	r0, [pc, #68]	; (80027b0 <lcd_time+0xf0>)
 800276c:	f7ff fd9c 	bl	80022a8 <writelcdcmd>
 8002770:	e7f4      	b.n	800275c <lcd_time+0x9c>
 8002772:	bf00      	nop
 8002774:	20002ef0 	.word	0x20002ef0
 8002778:	20001b48 	.word	0x20001b48
 800277c:	20001f64 	.word	0x20001f64
 8002780:	200034a8 	.word	0x200034a8
 8002784:	2000004c 	.word	0x2000004c
 8002788:	20001f38 	.word	0x20001f38
 800278c:	0802bd40 	.word	0x0802bd40
 8002790:	0802bd4c 	.word	0x0802bd4c
 8002794:	0802bcbc 	.word	0x0802bcbc
 8002798:	0802bd6c 	.word	0x0802bd6c
 800279c:	2000303c 	.word	0x2000303c
 80027a0:	0802bd78 	.word	0x0802bd78
 80027a4:	0802bd88 	.word	0x0802bd88
 80027a8:	0802bd90 	.word	0x0802bd90
 80027ac:	0802bd54 	.word	0x0802bd54
 80027b0:	0802bd60 	.word	0x0802bd60

080027b4 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <lcd_date+0x38>)
 80027b6:	490e      	ldr	r1, [pc, #56]	; (80027f0 <lcd_date+0x3c>)
 80027b8:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <lcd_date+0x40>)
void lcd_date() {
 80027bc:	b510      	push	{r4, lr}
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027be:	4c0e      	ldr	r4, [pc, #56]	; (80027f8 <lcd_date+0x44>)
void lcd_date() {
 80027c0:	b09a      	sub	sp, #104	; 0x68
	lastday = timeinfo.tm_yday;
 80027c2:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027c4:	2128      	movs	r1, #40	; 0x28
 80027c6:	4620      	mov	r0, r4
 80027c8:	f024 ff9c 	bl	8027704 <strftime>
	volatile int result = 0;
 80027cc:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 80027ce:	4623      	mov	r3, r4
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <lcd_date+0x48>)
 80027d2:	490b      	ldr	r1, [pc, #44]	; (8002800 <lcd_date+0x4c>)
	volatile int result = 0;
 80027d4:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80027d6:	a802      	add	r0, sp, #8
 80027d8:	f024 f99e 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80027dc:	a802      	add	r0, sp, #8
 80027de:	f7ff fd63 	bl	80022a8 <writelcdcmd>
 80027e2:	9001      	str	r0, [sp, #4]
	return (result);
 80027e4:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", sbuffer);
}
 80027e6:	b01a      	add	sp, #104	; 0x68
 80027e8:	bd10      	pop	{r4, pc}
 80027ea:	bf00      	nop
 80027ec:	20001f64 	.word	0x20001f64
 80027f0:	20001a7c 	.word	0x20001a7c
 80027f4:	0802bd9c 	.word	0x0802bd9c
 80027f8:	20001f38 	.word	0x20001f38
 80027fc:	0802bdac 	.word	0x0802bdac
 8002800:	0802bcbc 	.word	0x0802bcbc

08002804 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8002804:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8002806:	4c9b      	ldr	r4, [pc, #620]	; (8002a74 <lcd_showvars+0x270>)
void lcd_showvars() {
 8002808:	b0c4      	sub	sp, #272	; 0x110
	switch (toggle) {
 800280a:	8823      	ldrh	r3, [r4, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d827      	bhi.n	8002860 <lcd_showvars+0x5c>
 8002810:	e8df f003 	tbb	[pc, r3]
 8002814:	0228509a 	.word	0x0228509a
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002818:	4b97      	ldr	r3, [pc, #604]	; (8002a78 <lcd_showvars+0x274>)
 800281a:	4998      	ldr	r1, [pc, #608]	; (8002a7c <lcd_showvars+0x278>)
 800281c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8002820:	6808      	ldr	r0, [r1, #0]
 8002822:	9204      	str	r2, [sp, #16]
 8002824:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8002828:	9203      	str	r2, [sp, #12]
 800282a:	f242 7234 	movw	r2, #10036	; 0x2734
 800282e:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 8002832:	2314      	movs	r3, #20
 8002834:	e9cd 2000 	strd	r2, r0, [sp]
 8002838:	2200      	movs	r2, #0
 800283a:	9102      	str	r1, [sp, #8]
 800283c:	a814      	add	r0, sp, #80	; 0x50
 800283e:	4990      	ldr	r1, [pc, #576]	; (8002a80 <lcd_showvars+0x27c>)
	volatile int result = 0;
 8002840:	4615      	mov	r5, r2
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002842:	f024 f969 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002846:	ab14      	add	r3, sp, #80	; 0x50
 8002848:	4a8e      	ldr	r2, [pc, #568]	; (8002a84 <lcd_showvars+0x280>)
 800284a:	498f      	ldr	r1, [pc, #572]	; (8002a88 <lcd_showvars+0x284>)
 800284c:	a82c      	add	r0, sp, #176	; 0xb0
	volatile int result = 0;
 800284e:	9513      	str	r5, [sp, #76]	; 0x4c
	sprintf(str, "%s=\"%s\"", id, string);
 8002850:	f024 f962 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002854:	a82c      	add	r0, sp, #176	; 0xb0
 8002856:	f7ff fd27 	bl	80022a8 <writelcdcmd>
 800285a:	9013      	str	r0, [sp, #76]	; 0x4c
	return (result);
 800285c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
		toggle = 0;
 800285e:	8025      	strh	r5, [r4, #0]
		break;
	}
}
 8002860:	b044      	add	sp, #272	; 0x110
 8002862:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002864:	4e89      	ldr	r6, [pc, #548]	; (8002a8c <lcd_showvars+0x288>)
	volatile int result = 0;
 8002866:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002868:	4989      	ldr	r1, [pc, #548]	; (8002a90 <lcd_showvars+0x28c>)
 800286a:	a814      	add	r0, sp, #80	; 0x50
 800286c:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 800286e:	f024 f953 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002872:	ab14      	add	r3, sp, #80	; 0x50
 8002874:	4a87      	ldr	r2, [pc, #540]	; (8002a94 <lcd_showvars+0x290>)
 8002876:	a82c      	add	r0, sp, #176	; 0xb0
 8002878:	4983      	ldr	r1, [pc, #524]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 800287a:	9512      	str	r5, [sp, #72]	; 0x48
	sprintf(str, "%s=\"%s\"", id, string);
 800287c:	f024 f94c 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002880:	a82c      	add	r0, sp, #176	; 0xb0
 8002882:	f7ff fd11 	bl	80022a8 <writelcdcmd>
 8002886:	9012      	str	r0, [sp, #72]	; 0x48
	return (result);
 8002888:	9b12      	ldr	r3, [sp, #72]	; 0x48
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 800288a:	a814      	add	r0, sp, #80	; 0x50
 800288c:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800288e:	4980      	ldr	r1, [pc, #512]	; (8002a90 <lcd_showvars+0x28c>)
 8002890:	f024 f942 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002894:	ab14      	add	r3, sp, #80	; 0x50
 8002896:	4a80      	ldr	r2, [pc, #512]	; (8002a98 <lcd_showvars+0x294>)
 8002898:	a82c      	add	r0, sp, #176	; 0xb0
 800289a:	497b      	ldr	r1, [pc, #492]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 800289c:	9511      	str	r5, [sp, #68]	; 0x44
	sprintf(str, "%s=\"%s\"", id, string);
 800289e:	f024 f93b 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80028a2:	a82c      	add	r0, sp, #176	; 0xb0
 80028a4:	f7ff fd00 	bl	80022a8 <writelcdcmd>
		toggle = 3;
 80028a8:	2303      	movs	r3, #3
	result = writelcdcmd(str);
 80028aa:	9011      	str	r0, [sp, #68]	; 0x44
		toggle = 3;
 80028ac:	8023      	strh	r3, [r4, #0]
	return (result);
 80028ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 80028b0:	b044      	add	sp, #272	; 0x110
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80028b4:	4e75      	ldr	r6, [pc, #468]	; (8002a8c <lcd_showvars+0x288>)
	volatile int result = 0;
 80028b6:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80028b8:	4975      	ldr	r1, [pc, #468]	; (8002a90 <lcd_showvars+0x28c>)
 80028ba:	a814      	add	r0, sp, #80	; 0x50
 80028bc:	7ef2      	ldrb	r2, [r6, #27]
 80028be:	f024 f92b 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028c2:	ab14      	add	r3, sp, #80	; 0x50
 80028c4:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <lcd_showvars+0x298>)
 80028c6:	a82c      	add	r0, sp, #176	; 0xb0
 80028c8:	496f      	ldr	r1, [pc, #444]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028ca:	9510      	str	r5, [sp, #64]	; 0x40
	sprintf(str, "%s=\"%s\"", id, string);
 80028cc:	f024 f924 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80028d0:	a82c      	add	r0, sp, #176	; 0xb0
 80028d2:	f7ff fce9 	bl	80022a8 <writelcdcmd>
 80028d6:	9010      	str	r0, [sp, #64]	; 0x40
	return (result);
 80028d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 80028da:	a814      	add	r0, sp, #80	; 0x50
 80028dc:	6a32      	ldr	r2, [r6, #32]
 80028de:	496c      	ldr	r1, [pc, #432]	; (8002a90 <lcd_showvars+0x28c>)
 80028e0:	f024 f91a 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028e4:	ab14      	add	r3, sp, #80	; 0x50
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <lcd_showvars+0x29c>)
 80028e8:	a82c      	add	r0, sp, #176	; 0xb0
 80028ea:	4967      	ldr	r1, [pc, #412]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028ec:	950f      	str	r5, [sp, #60]	; 0x3c
	sprintf(str, "%s=\"%s\"", id, string);
 80028ee:	f024 f913 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80028f2:	a82c      	add	r0, sp, #176	; 0xb0
 80028f4:	f7ff fcd8 	bl	80022a8 <writelcdcmd>
 80028f8:	900f      	str	r0, [sp, #60]	; 0x3c
	return (result);
 80028fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 80028fc:	a814      	add	r0, sp, #80	; 0x50
 80028fe:	69f2      	ldr	r2, [r6, #28]
 8002900:	4963      	ldr	r1, [pc, #396]	; (8002a90 <lcd_showvars+0x28c>)
 8002902:	f024 f909 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002906:	ab14      	add	r3, sp, #80	; 0x50
 8002908:	4a66      	ldr	r2, [pc, #408]	; (8002aa4 <lcd_showvars+0x2a0>)
 800290a:	a82c      	add	r0, sp, #176	; 0xb0
 800290c:	495e      	ldr	r1, [pc, #376]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 800290e:	950e      	str	r5, [sp, #56]	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 8002910:	f024 f902 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002914:	a82c      	add	r0, sp, #176	; 0xb0
 8002916:	f7ff fcc7 	bl	80022a8 <writelcdcmd>
 800291a:	900e      	str	r0, [sp, #56]	; 0x38
	return (result);
 800291c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800291e:	a814      	add	r0, sp, #80	; 0x50
 8002920:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002922:	495b      	ldr	r1, [pc, #364]	; (8002a90 <lcd_showvars+0x28c>)
 8002924:	f024 f8f8 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002928:	ab14      	add	r3, sp, #80	; 0x50
 800292a:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <lcd_showvars+0x2a4>)
 800292c:	a82c      	add	r0, sp, #176	; 0xb0
 800292e:	4956      	ldr	r1, [pc, #344]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002930:	950d      	str	r5, [sp, #52]	; 0x34
	sprintf(str, "%s=\"%s\"", id, string);
 8002932:	f024 f8f1 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002936:	a82c      	add	r0, sp, #176	; 0xb0
 8002938:	f7ff fcb6 	bl	80022a8 <writelcdcmd>
		toggle = 2;
 800293c:	2302      	movs	r3, #2
	result = writelcdcmd(str);
 800293e:	900d      	str	r0, [sp, #52]	; 0x34
		toggle = 2;
 8002940:	8023      	strh	r3, [r4, #0]
	return (result);
 8002942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 8002944:	b044      	add	sp, #272	; 0x110
 8002946:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002948:	4b58      	ldr	r3, [pc, #352]	; (8002aac <lcd_showvars+0x2a8>)
	volatile int result = 0;
 800294a:	2500      	movs	r5, #0
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800294c:	a814      	add	r0, sp, #80	; 0x50
		sprintf(str, "%d", statuspkt.uid);
 800294e:	4e4f      	ldr	r6, [pc, #316]	; (8002a8c <lcd_showvars+0x288>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	0e11      	lsrs	r1, r2, #24
 8002954:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8002958:	e9cd 3100 	strd	r3, r1, [sp]
 800295c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002960:	4953      	ldr	r1, [pc, #332]	; (8002ab0 <lcd_showvars+0x2ac>)
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f024 f8d8 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002968:	ab14      	add	r3, sp, #80	; 0x50
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <lcd_showvars+0x2b0>)
 800296c:	a82c      	add	r0, sp, #176	; 0xb0
 800296e:	4946      	ldr	r1, [pc, #280]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002970:	950c      	str	r5, [sp, #48]	; 0x30
	sprintf(str, "%s=\"%s\"", id, string);
 8002972:	f024 f8d1 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002976:	a82c      	add	r0, sp, #176	; 0xb0
 8002978:	f7ff fc96 	bl	80022a8 <writelcdcmd>
 800297c:	900c      	str	r0, [sp, #48]	; 0x30
	return (result);
 800297e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		sprintf(str, "%d", statuspkt.uid);
 8002980:	a814      	add	r0, sp, #80	; 0x50
 8002982:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
 8002986:	4942      	ldr	r1, [pc, #264]	; (8002a90 <lcd_showvars+0x28c>)
 8002988:	b292      	uxth	r2, r2
 800298a:	f024 f8c5 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800298e:	ab14      	add	r3, sp, #80	; 0x50
 8002990:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <lcd_showvars+0x2b4>)
 8002992:	a82c      	add	r0, sp, #176	; 0xb0
 8002994:	493c      	ldr	r1, [pc, #240]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002996:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(str, "%s=\"%s\"", id, string);
 8002998:	f024 f8be 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 800299c:	a82c      	add	r0, sp, #176	; 0xb0
 800299e:	f7ff fc83 	bl	80022a8 <writelcdcmd>
 80029a2:	900b      	str	r0, [sp, #44]	; 0x2c
	return (result);
 80029a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sprintf(str, "%d", statuspkt.adcpktssent);
 80029a6:	a814      	add	r0, sp, #80	; 0x50
 80029a8:	f8b6 205e 	ldrh.w	r2, [r6, #94]	; 0x5e
 80029ac:	4938      	ldr	r1, [pc, #224]	; (8002a90 <lcd_showvars+0x28c>)
 80029ae:	b292      	uxth	r2, r2
 80029b0:	f024 f8b2 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029b4:	ab14      	add	r3, sp, #80	; 0x50
 80029b6:	4a41      	ldr	r2, [pc, #260]	; (8002abc <lcd_showvars+0x2b8>)
 80029b8:	a82c      	add	r0, sp, #176	; 0xb0
 80029ba:	4933      	ldr	r1, [pc, #204]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029bc:	950a      	str	r5, [sp, #40]	; 0x28
	sprintf(str, "%s=\"%s\"", id, string);
 80029be:	f024 f8ab 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80029c2:	a82c      	add	r0, sp, #176	; 0xb0
 80029c4:	f7ff fc70 	bl	80022a8 <writelcdcmd>
 80029c8:	900a      	str	r0, [sp, #40]	; 0x28
	return (result);
 80029ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80029cc:	a814      	add	r0, sp, #80	; 0x50
 80029ce:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <lcd_showvars+0x2bc>)
 80029d0:	492f      	ldr	r1, [pc, #188]	; (8002a90 <lcd_showvars+0x28c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029d8:	f024 f89e 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029dc:	ab14      	add	r3, sp, #80	; 0x50
 80029de:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <lcd_showvars+0x2c0>)
 80029e0:	a82c      	add	r0, sp, #176	; 0xb0
 80029e2:	4929      	ldr	r1, [pc, #164]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029e4:	9509      	str	r5, [sp, #36]	; 0x24
	sprintf(str, "%s=\"%s\"", id, string);
 80029e6:	f024 f897 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80029ea:	a82c      	add	r0, sp, #176	; 0xb0
 80029ec:	f7ff fc5c 	bl	80022a8 <writelcdcmd>
 80029f0:	9009      	str	r0, [sp, #36]	; 0x24
	return (result);
 80029f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80029f4:	a814      	add	r0, sp, #80	; 0x50
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <lcd_showvars+0x2c4>)
 80029f8:	4925      	ldr	r1, [pc, #148]	; (8002a90 <lcd_showvars+0x28c>)
 80029fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	bfb8      	it	lt
 8002a02:	4252      	neglt	r2, r2
 8002a04:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a08:	f024 f886 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a0c:	ab14      	add	r3, sp, #80	; 0x50
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <lcd_showvars+0x2c8>)
 8002a10:	a82c      	add	r0, sp, #176	; 0xb0
 8002a12:	491d      	ldr	r1, [pc, #116]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a14:	9508      	str	r5, [sp, #32]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a16:	f024 f87f 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002a1a:	a82c      	add	r0, sp, #176	; 0xb0
 8002a1c:	f7ff fc44 	bl	80022a8 <writelcdcmd>
 8002a20:	9008      	str	r0, [sp, #32]
	return (result);
 8002a22:	9b08      	ldr	r3, [sp, #32]
		sprintf(str, "%d", pgagain);	// gain
 8002a24:	a814      	add	r0, sp, #80	; 0x50
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <lcd_showvars+0x2cc>)
 8002a28:	4919      	ldr	r1, [pc, #100]	; (8002a90 <lcd_showvars+0x28c>)
 8002a2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a2e:	f024 f873 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a32:	ab14      	add	r3, sp, #80	; 0x50
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <lcd_showvars+0x2d0>)
 8002a36:	a82c      	add	r0, sp, #176	; 0xb0
 8002a38:	4913      	ldr	r1, [pc, #76]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a3a:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a3c:	f024 f86c 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002a40:	a82c      	add	r0, sp, #176	; 0xb0
 8002a42:	f7ff fc31 	bl	80022a8 <writelcdcmd>
 8002a46:	9007      	str	r0, [sp, #28]
	return (result);
 8002a48:	9b07      	ldr	r3, [sp, #28]
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8002a4a:	a814      	add	r0, sp, #80	; 0x50
 8002a4c:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8002a4e:	4910      	ldr	r1, [pc, #64]	; (8002a90 <lcd_showvars+0x28c>)
 8002a50:	f024 f862 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a54:	ab14      	add	r3, sp, #80	; 0x50
 8002a56:	4a20      	ldr	r2, [pc, #128]	; (8002ad8 <lcd_showvars+0x2d4>)
 8002a58:	a82c      	add	r0, sp, #176	; 0xb0
 8002a5a:	490b      	ldr	r1, [pc, #44]	; (8002a88 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a5c:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a5e:	f024 f85b 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002a62:	a82c      	add	r0, sp, #176	; 0xb0
 8002a64:	f7ff fc20 	bl	80022a8 <writelcdcmd>
		toggle = 1;
 8002a68:	2301      	movs	r3, #1
	result = writelcdcmd(str);
 8002a6a:	9006      	str	r0, [sp, #24]
		toggle = 1;
 8002a6c:	8023      	strh	r3, [r4, #0]
	return (result);
 8002a6e:	9b06      	ldr	r3, [sp, #24]
}
 8002a70:	b044      	add	sp, #272	; 0x110
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	20001f88 	.word	0x20001f88
 8002a78:	1ff0f000 	.word	0x1ff0f000
 8002a7c:	20002180 	.word	0x20002180
 8002a80:	0802bdfc 	.word	0x0802bdfc
 8002a84:	0802be28 	.word	0x0802be28
 8002a88:	0802bcbc 	.word	0x0802bcbc
 8002a8c:	2000303c 	.word	0x2000303c
 8002a90:	0802be60 	.word	0x0802be60
 8002a94:	0802bd30 	.word	0x0802bd30
 8002a98:	0802bce0 	.word	0x0802bce0
 8002a9c:	0802bd4c 	.word	0x0802bd4c
 8002aa0:	0802bdac 	.word	0x0802bdac
 8002aa4:	0802bcb4 	.word	0x0802bcb4
 8002aa8:	0802bd88 	.word	0x0802bd88
 8002aac:	20002df4 	.word	0x20002df4
 8002ab0:	0802bdb4 	.word	0x0802bdb4
 8002ab4:	0802bdc4 	.word	0x0802bdc4
 8002ab8:	0802bdcc 	.word	0x0802bdcc
 8002abc:	0802bdd4 	.word	0x0802bdd4
 8002ac0:	2000072c 	.word	0x2000072c
 8002ac4:	0802bddc 	.word	0x0802bddc
 8002ac8:	20000780 	.word	0x20000780
 8002acc:	0802bde4 	.word	0x0802bde4
 8002ad0:	20003430 	.word	0x20003430
 8002ad4:	0802bdec 	.word	0x0802bdec
 8002ad8:	0802bdf4 	.word	0x0802bdf4

08002adc <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8002adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	b0a7      	sub	sp, #156	; 0x9c
	volatile int result = 0;
 8002ae2:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <lcd_trigcharts+0x130>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8002ae6:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <lcd_trigcharts+0x134>)
 8002aec:	a80e      	add	r0, sp, #56	; 0x38
 8002aee:	4949      	ldr	r1, [pc, #292]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002af0:	9405      	str	r4, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002af2:	f024 f811 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002af6:	a80e      	add	r0, sp, #56	; 0x38
 8002af8:	4f47      	ldr	r7, [pc, #284]	; (8002c18 <lcd_trigcharts+0x13c>)
 8002afa:	f7ff fbd5 	bl	80022a8 <writelcdcmd>
 8002afe:	9005      	str	r0, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <lcd_trigcharts+0x130>)
 8002b02:	a80e      	add	r0, sp, #56	; 0x38
 8002b04:	4a45      	ldr	r2, [pc, #276]	; (8002c1c <lcd_trigcharts+0x140>)
	return (result);
 8002b06:	9905      	ldr	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b08:	4942      	ldr	r1, [pc, #264]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b0a:	9404      	str	r4, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b0c:	f024 f804 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002b10:	a80e      	add	r0, sp, #56	; 0x38
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b12:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002c54 <lcd_trigcharts+0x178>
	result = writelcdcmd(str);
 8002b16:	f7ff fbc7 	bl	80022a8 <writelcdcmd>
 8002b1a:	9004      	str	r0, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <lcd_trigcharts+0x144>)
 8002b1e:	a80e      	add	r0, sp, #56	; 0x38
 8002b20:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <lcd_trigcharts+0x148>)
	return (result);
 8002b22:	9904      	ldr	r1, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b24:	493b      	ldr	r1, [pc, #236]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b26:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b28:	f023 fff6 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002b2c:	a80e      	add	r0, sp, #56	; 0x38
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b2e:	4e3e      	ldr	r6, [pc, #248]	; (8002c28 <lcd_trigcharts+0x14c>)
	result = writelcdcmd(str);
 8002b30:	f7ff fbba 	bl	80022a8 <writelcdcmd>
 8002b34:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <lcd_trigcharts+0x144>)
 8002b38:	a80e      	add	r0, sp, #56	; 0x38
 8002b3a:	4a3c      	ldr	r2, [pc, #240]	; (8002c2c <lcd_trigcharts+0x150>)
	return (result);
 8002b3c:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b3e:	4935      	ldr	r1, [pc, #212]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b40:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b42:	f023 ffe9 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002b46:	a80e      	add	r0, sp, #56	; 0x38
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002b48:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002c58 <lcd_trigcharts+0x17c>
	result = writelcdcmd(str);
 8002b4c:	f7ff fbac 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b50:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <lcd_trigcharts+0x154>)
	result = writelcdcmd(str);
 8002b52:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b54:	a806      	add	r0, sp, #24
	return (result);
 8002b56:	9a02      	ldr	r2, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b58:	4936      	ldr	r1, [pc, #216]	; (8002c34 <lcd_trigcharts+0x158>)
 8002b5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b5c:	f023 ffdc 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002b60:	ab06      	add	r3, sp, #24
 8002b62:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <lcd_trigcharts+0x15c>)
 8002b64:	a80e      	add	r0, sp, #56	; 0x38
 8002b66:	492b      	ldr	r1, [pc, #172]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b68:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b6a:	f023 ffd5 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002b6e:	a80e      	add	r0, sp, #56	; 0x38
 8002b70:	f7ff fb9a 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <lcd_trigcharts+0x160>)
	result = writelcdcmd(str);
 8002b76:	9001      	str	r0, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b78:	a806      	add	r0, sp, #24
 8002b7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b7e:	492d      	ldr	r1, [pc, #180]	; (8002c34 <lcd_trigcharts+0x158>)
 8002b80:	2a00      	cmp	r2, #0
	return (result);
 8002b82:	9b01      	ldr	r3, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b84:	bfb8      	it	lt
 8002b86:	4252      	neglt	r2, r2
 8002b88:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002b8c:	f023 ffc4 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002b90:	ab06      	add	r3, sp, #24
 8002b92:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <lcd_trigcharts+0x164>)
 8002b94:	a80e      	add	r0, sp, #56	; 0x38
 8002b96:	491f      	ldr	r1, [pc, #124]	; (8002c14 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b98:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b9a:	f023 ffbd 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002b9e:	a80e      	add	r0, sp, #56	; 0x38
 8002ba0:	f7ff fb82 	bl	80022a8 <writelcdcmd>
 8002ba4:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002ba6:	4827      	ldr	r0, [pc, #156]	; (8002c44 <lcd_trigcharts+0x168>)
	result = writelcdcmd(str);
 8002ba8:	9300      	str	r3, [sp, #0]
	return (result);
 8002baa:	9b00      	ldr	r3, [sp, #0]
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002bac:	f7ff fb7c 	bl	80022a8 <writelcdcmd>
	buffi = trigindex;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <lcd_trigcharts+0x16c>)
 8002bb2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002bb4:	e01c      	b.n	8002bf0 <lcd_trigcharts+0x114>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002bb6:	f819 2004 	ldrb.w	r2, [r9, r4]
 8002bba:	f023 ffad 	bl	8026b18 <siprintf>
		writelcdcmd(str);
 8002bbe:	a806      	add	r0, sp, #24
 8002bc0:	f7ff fb72 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002bc4:	200f      	movs	r0, #15
 8002bc6:	f013 fd39 	bl	801663c <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002bca:	f818 2004 	ldrb.w	r2, [r8, r4]
 8002bce:	491f      	ldr	r1, [pc, #124]	; (8002c4c <lcd_trigcharts+0x170>)
 8002bd0:	a806      	add	r0, sp, #24
 8002bd2:	f023 ffa1 	bl	8026b18 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002bd6:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002bd8:	a806      	add	r0, sp, #24
 8002bda:	f7ff fb65 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002bde:	200f      	movs	r0, #15
 8002be0:	f013 fd2c 	bl	801663c <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002be4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002be8:	bfc8      	it	gt
 8002bea:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002bec:	3d01      	subs	r5, #1
 8002bee:	d007      	beq.n	8002c00 <lcd_trigcharts+0x124>
		if (our_currentpage != 2)		// impatient user
 8002bf0:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002bf2:	4631      	mov	r1, r6
 8002bf4:	a806      	add	r0, sp, #24
		if (our_currentpage != 2)		// impatient user
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d0dd      	beq.n	8002bb6 <lcd_trigcharts+0xda>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002bfa:	b027      	add	sp, #156	; 0x9c
 8002bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002c00:	4813      	ldr	r0, [pc, #76]	; (8002c50 <lcd_trigcharts+0x174>)
 8002c02:	f7ff fb51 	bl	80022a8 <writelcdcmd>
}
 8002c06:	b027      	add	sp, #156	; 0x9c
 8002c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c0c:	0802be30 	.word	0x0802be30
 8002c10:	0802bd88 	.word	0x0802bd88
 8002c14:	0802bcbc 	.word	0x0802bcbc
 8002c18:	20001d48 	.word	0x20001d48
 8002c1c:	0802be3c 	.word	0x0802be3c
 8002c20:	0802be44 	.word	0x0802be44
 8002c24:	0802bd30 	.word	0x0802bd30
 8002c28:	0802be58 	.word	0x0802be58
 8002c2c:	0802bdac 	.word	0x0802bdac
 8002c30:	2000303c 	.word	0x2000303c
 8002c34:	0802be60 	.word	0x0802be60
 8002c38:	0802bd4c 	.word	0x0802bd4c
 8002c3c:	20000780 	.word	0x20000780
 8002c40:	0802bcb4 	.word	0x0802bcb4
 8002c44:	0802be4c 	.word	0x0802be4c
 8002c48:	20001f8c 	.word	0x20001f8c
 8002c4c:	0802be64 	.word	0x0802be64
 8002c50:	0802be70 	.word	0x0802be70
 8002c54:	20001f90 	.word	0x20001f90
 8002c58:	20001b68 	.word	0x20001b68

08002c5c <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8002c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c60:	4956      	ldr	r1, [pc, #344]	; (8002dbc <lcd_trigplot+0x160>)
void lcd_trigplot() {
 8002c62:	b0a7      	sub	sp, #156	; 0x9c
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c64:	4d56      	ldr	r5, [pc, #344]	; (8002dc0 <lcd_trigplot+0x164>)
 8002c66:	680b      	ldr	r3, [r1, #0]
 8002c68:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8002c6a:	4e56      	ldr	r6, [pc, #344]	; (8002dc4 <lcd_trigplot+0x168>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c6c:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c6e:	4856      	ldr	r0, [pc, #344]	; (8002dc8 <lcd_trigplot+0x16c>)
	val = abs(meanwindiff) & 0xfff;
 8002c70:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8002c74:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8002c76:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8002c7a:	4c54      	ldr	r4, [pc, #336]	; (8002dcc <lcd_trigplot+0x170>)
 8002c7c:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c7e:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8002c80:	4f53      	ldr	r7, [pc, #332]	; (8002dd0 <lcd_trigplot+0x174>)
 8002c82:	bfa8      	it	ge
 8002c84:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002c86:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002c88:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002e0c <lcd_trigplot+0x1b0>
	val = abs(meanwindiff) & 0xfff;
 8002c8c:	bfb8      	it	lt
 8002c8e:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8002c90:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002c94:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002c9a:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002c9c:	2b77      	cmp	r3, #119	; 0x77
 8002c9e:	bfa8      	it	ge
 8002ca0:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002ca2:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002ca4:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002ca8:	d00c      	beq.n	8002cc4 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002caa:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002cac:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8002cb0:	da03      	bge.n	8002cba <lcd_trigplot+0x5e>
	trigindex++;
 8002cb2:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002cb4:	b027      	add	sp, #156	; 0x9c
 8002cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		trigindex = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6023      	str	r3, [r4, #0]
}
 8002cbe:	b027      	add	sp, #156	; 0x9c
 8002cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	volatile int result = 0;
 8002cc4:	f04f 0900 	mov.w	r9, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <lcd_trigplot+0x178>)
 8002cca:	4a43      	ldr	r2, [pc, #268]	; (8002dd8 <lcd_trigplot+0x17c>)
 8002ccc:	a80e      	add	r0, sp, #56	; 0x38
 8002cce:	4943      	ldr	r1, [pc, #268]	; (8002ddc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002cd0:	f8cd 9014 	str.w	r9, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002cd4:	f023 ff20 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002cd8:	a80e      	add	r0, sp, #56	; 0x38
 8002cda:	f7ff fae5 	bl	80022a8 <writelcdcmd>
 8002cde:	9005      	str	r0, [sp, #20]
	return (result);
 8002ce0:	9b05      	ldr	r3, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ce2:	a80e      	add	r0, sp, #56	; 0x38
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <lcd_trigplot+0x178>)
 8002ce6:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <lcd_trigplot+0x184>)
 8002ce8:	493c      	ldr	r1, [pc, #240]	; (8002ddc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002cea:	f8cd 9010 	str.w	r9, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002cee:	f023 ff13 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002cf2:	a80e      	add	r0, sp, #56	; 0x38
 8002cf4:	f7ff fad8 	bl	80022a8 <writelcdcmd>
 8002cf8:	9004      	str	r0, [sp, #16]
	return (result);
 8002cfa:	9b04      	ldr	r3, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002cfc:	a80e      	add	r0, sp, #56	; 0x38
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <lcd_trigplot+0x188>)
 8002d00:	4a39      	ldr	r2, [pc, #228]	; (8002de8 <lcd_trigplot+0x18c>)
 8002d02:	4936      	ldr	r1, [pc, #216]	; (8002ddc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d04:	f8cd 900c 	str.w	r9, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d08:	f023 ff06 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002d0c:	a80e      	add	r0, sp, #56	; 0x38
 8002d0e:	f7ff facb 	bl	80022a8 <writelcdcmd>
 8002d12:	9003      	str	r0, [sp, #12]
	return (result);
 8002d14:	9b03      	ldr	r3, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d16:	a80e      	add	r0, sp, #56	; 0x38
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <lcd_trigplot+0x188>)
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <lcd_trigplot+0x190>)
 8002d1c:	492f      	ldr	r1, [pc, #188]	; (8002ddc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d1e:	f8cd 9008 	str.w	r9, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d22:	f023 fef9 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002d26:	a80e      	add	r0, sp, #56	; 0x38
 8002d28:	f7ff fabe 	bl	80022a8 <writelcdcmd>
 8002d2c:	9002      	str	r0, [sp, #8]
	return (result);
 8002d2e:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002d30:	a806      	add	r0, sp, #24
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	492e      	ldr	r1, [pc, #184]	; (8002df0 <lcd_trigplot+0x194>)
 8002d36:	5cfa      	ldrb	r2, [r7, r3]
 8002d38:	f023 feee 	bl	8026b18 <siprintf>
		writelcdcmd(str);
 8002d3c:	a806      	add	r0, sp, #24
 8002d3e:	f7ff fab3 	bl	80022a8 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	492b      	ldr	r1, [pc, #172]	; (8002df4 <lcd_trigplot+0x198>)
 8002d46:	a806      	add	r0, sp, #24
 8002d48:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002d4c:	f023 fee4 	bl	8026b18 <siprintf>
		writelcdcmd(str);
 8002d50:	a806      	add	r0, sp, #24
 8002d52:	f7ff faa9 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002d56:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002d58:	4927      	ldr	r1, [pc, #156]	; (8002df8 <lcd_trigplot+0x19c>)
 8002d5a:	a806      	add	r0, sp, #24
 8002d5c:	f023 fedc 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002d60:	ab06      	add	r3, sp, #24
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <lcd_trigplot+0x1a0>)
 8002d64:	a80e      	add	r0, sp, #56	; 0x38
 8002d66:	491d      	ldr	r1, [pc, #116]	; (8002ddc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d68:	f8cd 9004 	str.w	r9, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d6c:	f023 fed4 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002d70:	a80e      	add	r0, sp, #56	; 0x38
 8002d72:	f7ff fa99 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d76:	f9b6 2000 	ldrsh.w	r2, [r6]
	result = writelcdcmd(str);
 8002d7a:	9001      	str	r0, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d7c:	a806      	add	r0, sp, #24
 8002d7e:	2a00      	cmp	r2, #0
 8002d80:	491d      	ldr	r1, [pc, #116]	; (8002df8 <lcd_trigplot+0x19c>)
	return (result);
 8002d82:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d84:	bfb8      	it	lt
 8002d86:	4252      	neglt	r2, r2
 8002d88:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002d8c:	f023 fec4 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002d90:	4912      	ldr	r1, [pc, #72]	; (8002ddc <lcd_trigplot+0x180>)
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <lcd_trigplot+0x1a4>)
 8002d94:	ab06      	add	r3, sp, #24
 8002d96:	a80e      	add	r0, sp, #56	; 0x38
	volatile int result = 0;
 8002d98:	f8cd 9000 	str.w	r9, [sp]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d9c:	f023 febc 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002da0:	a80e      	add	r0, sp, #56	; 0x38
 8002da2:	f7ff fa81 	bl	80022a8 <writelcdcmd>
 8002da6:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002da8:	4816      	ldr	r0, [pc, #88]	; (8002e04 <lcd_trigplot+0x1a8>)
	result = writelcdcmd(str);
 8002daa:	9300      	str	r3, [sp, #0]
	return (result);
 8002dac:	9b00      	ldr	r3, [sp, #0]
		writelcdcmd("vis t3,1");
 8002dae:	f7ff fa7b 	bl	80022a8 <writelcdcmd>
		writelcdcmd("vis t4,1");
 8002db2:	4815      	ldr	r0, [pc, #84]	; (8002e08 <lcd_trigplot+0x1ac>)
 8002db4:	f7ff fa78 	bl	80022a8 <writelcdcmd>
	trigindex++;
 8002db8:	6821      	ldr	r1, [r4, #0]
 8002dba:	e776      	b.n	8002caa <lcd_trigplot+0x4e>
 8002dbc:	20001a84 	.word	0x20001a84
 8002dc0:	2000303c 	.word	0x2000303c
 8002dc4:	20000780 	.word	0x20000780
 8002dc8:	20001d48 	.word	0x20001d48
 8002dcc:	20001f8c 	.word	0x20001f8c
 8002dd0:	20001f90 	.word	0x20001f90
 8002dd4:	0802be30 	.word	0x0802be30
 8002dd8:	0802bd88 	.word	0x0802bd88
 8002ddc:	0802bcbc 	.word	0x0802bcbc
 8002de0:	0802be3c 	.word	0x0802be3c
 8002de4:	0802be44 	.word	0x0802be44
 8002de8:	0802bd30 	.word	0x0802bd30
 8002dec:	0802bdac 	.word	0x0802bdac
 8002df0:	0802be58 	.word	0x0802be58
 8002df4:	0802be64 	.word	0x0802be64
 8002df8:	0802be60 	.word	0x0802be60
 8002dfc:	0802bd4c 	.word	0x0802bd4c
 8002e00:	0802bcb4 	.word	0x0802bcb4
 8002e04:	0802bd90 	.word	0x0802bd90
 8002e08:	0802bd10 	.word	0x0802bd10
 8002e0c:	20001b68 	.word	0x20001b68

08002e10 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e14:	b0a4      	sub	sp, #144	; 0x90
	volatile int result = 0;
 8002e16:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <lcd_presscharts+0xbc>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002e1a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <lcd_presscharts+0xc0>)
 8002e20:	a80c      	add	r0, sp, #48	; 0x30
 8002e22:	492c      	ldr	r1, [pc, #176]	; (8002ed4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e24:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e26:	f023 fe77 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002e2a:	a80c      	add	r0, sp, #48	; 0x30
 8002e2c:	4f2a      	ldr	r7, [pc, #168]	; (8002ed8 <lcd_presscharts+0xc8>)
 8002e2e:	f7ff fa3b 	bl	80022a8 <writelcdcmd>
 8002e32:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <lcd_presscharts+0xbc>)
 8002e36:	a80c      	add	r0, sp, #48	; 0x30
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <lcd_presscharts+0xcc>)
	return (result);
 8002e3a:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e3c:	4925      	ldr	r1, [pc, #148]	; (8002ed4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e3e:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e40:	f023 fe6a 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002e44:	a80c      	add	r0, sp, #48	; 0x30
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e46:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002f00 <lcd_presscharts+0xf0>
	result = writelcdcmd(str);
 8002e4a:	f7ff fa2d 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <lcd_presscharts+0xd0>)
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <lcd_presscharts+0xd4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
	result = writelcdcmd(str);
 8002e54:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e56:	a804      	add	r0, sp, #16
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	089b      	lsrs	r3, r3, #2
	return (result);
 8002e5c:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e5e:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <lcd_presscharts+0xd8>)
 8002e60:	f023 fe5a 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002e64:	ab04      	add	r3, sp, #16
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <lcd_presscharts+0xdc>)
 8002e68:	a80c      	add	r0, sp, #48	; 0x30
 8002e6a:	491a      	ldr	r1, [pc, #104]	; (8002ed4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e6c:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e6e:	f023 fe53 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002e72:	a80c      	add	r0, sp, #48	; 0x30
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e74:	4e1e      	ldr	r6, [pc, #120]	; (8002ef0 <lcd_presscharts+0xe0>)
	result = writelcdcmd(str);
 8002e76:	f7ff fa17 	bl	80022a8 <writelcdcmd>
 8002e7a:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123");		// normal grey
 8002e7c:	481d      	ldr	r0, [pc, #116]	; (8002ef4 <lcd_presscharts+0xe4>)
	result = writelcdcmd(str);
 8002e7e:	9301      	str	r3, [sp, #4]
	return (result);
 8002e80:	9b01      	ldr	r3, [sp, #4]
	writelcdcmd("b2.bco=123");		// normal grey
 8002e82:	f7ff fa11 	bl	80022a8 <writelcdcmd>
	buffi = pressindex;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <lcd_presscharts+0xe8>)
 8002e88:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002e8a:	e010      	b.n	8002eae <lcd_presscharts+0x9e>
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e8c:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002e90:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e92:	f023 fe41 	bl	8026b18 <siprintf>
		writelcdcmd(str);
 8002e96:	a804      	add	r0, sp, #16
 8002e98:	f7ff fa06 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002e9c:	200f      	movs	r0, #15
 8002e9e:	f013 fbcd 	bl	801663c <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002ea2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002ea6:	bfc8      	it	gt
 8002ea8:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002eaa:	3d01      	subs	r5, #1
 8002eac:	d007      	beq.n	8002ebe <lcd_presscharts+0xae>
		if (our_currentpage != 3)		// impatient user
 8002eae:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002eb0:	4631      	mov	r1, r6
 8002eb2:	a804      	add	r0, sp, #16
		if (our_currentpage != 3)		// impatient user
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d0e9      	beq.n	8002e8c <lcd_presscharts+0x7c>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002eb8:	b024      	add	sp, #144	; 0x90
 8002eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <lcd_presscharts+0xec>)
 8002ec0:	f7ff f9f2 	bl	80022a8 <writelcdcmd>
}
 8002ec4:	b024      	add	sp, #144	; 0x90
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eca:	bf00      	nop
 8002ecc:	0802be80 	.word	0x0802be80
 8002ed0:	0802bd88 	.word	0x0802bd88
 8002ed4:	0802bcbc 	.word	0x0802bcbc
 8002ed8:	20001d48 	.word	0x20001d48
 8002edc:	0802be3c 	.word	0x0802be3c
 8002ee0:	20003434 	.word	0x20003434
 8002ee4:	20003438 	.word	0x20003438
 8002ee8:	0802be8c 	.word	0x0802be8c
 8002eec:	0802bd4c 	.word	0x0802bd4c
 8002ef0:	0802be58 	.word	0x0802be58
 8002ef4:	0802be4c 	.word	0x0802be4c
 8002ef8:	20001d4c 	.word	0x20001d4c
 8002efc:	0802be70 	.word	0x0802be70
 8002f00:	20001d50 	.word	0x20001d50

08002f04 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8002f04:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f06:	4d31      	ldr	r5, [pc, #196]	; (8002fcc <lcd_pressplot+0xc8>)
void lcd_pressplot() {
 8002f08:	b0a4      	sub	sp, #144	; 0x90
	p = pressure;
 8002f0a:	4c31      	ldr	r4, [pc, #196]	; (8002fd0 <lcd_pressplot+0xcc>)

	p = pressure * 1000 + pf;
 8002f0c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f10:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8002f12:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f14:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8002f16:	482f      	ldr	r0, [pc, #188]	; (8002fd4 <lcd_pressplot+0xd0>)
	p = pressure;
 8002f18:	9100      	str	r1, [sp, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f1a:	9201      	str	r2, [sp, #4]
	p = pressure * 1000 + pf;
 8002f1c:	9b01      	ldr	r3, [sp, #4]
 8002f1e:	fb06 3301 	mla	r3, r6, r1, r3
 8002f22:	9300      	str	r3, [sp, #0]
	if (p < 93000)
 8002f24:	9b00      	ldr	r3, [sp, #0]
 8002f26:	4283      	cmp	r3, r0
 8002f28:	dc01      	bgt.n	8002f2e <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <lcd_pressplot+0xd4>)
 8002f2c:	9300      	str	r3, [sp, #0]
	if (p > 103000)
 8002f2e:	9a00      	ldr	r2, [sp, #0]
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <lcd_pressplot+0xd8>)
 8002f32:	429a      	cmp	r2, r3
 8002f34:	dd00      	ble.n	8002f38 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002f36:	9b00      	ldr	r3, [sp, #0]

	p = p - 93000;
 8002f38:	9900      	ldr	r1, [sp, #0]
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <lcd_pressplot+0xdc>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002f3c:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <lcd_pressplot+0xe0>)
	p = p - 93000;
 8002f3e:	440b      	add	r3, r1
 8002f40:	9300      	str	r3, [sp, #0]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002f42:	9b00      	ldr	r3, [sp, #0]
 8002f44:	fb82 1203 	smull	r1, r2, r2, r3
 8002f48:	17db      	asrs	r3, r3, #31
 8002f4a:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002f4e:	9302      	str	r3, [sp, #8]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002f50:	9b02      	ldr	r3, [sp, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da01      	bge.n	8002f5a <lcd_pressplot+0x56>
		val = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	9302      	str	r3, [sp, #8]
	if (val >= 240)
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	2bef      	cmp	r3, #239	; 0xef
 8002f5e:	dd01      	ble.n	8002f64 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002f60:	23ef      	movs	r3, #239	; 0xef
 8002f62:	9302      	str	r3, [sp, #8]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f64:	4920      	ldr	r1, [pc, #128]	; (8002fe8 <lcd_pressplot+0xe4>)
	pressvec[pressindex] = val;
 8002f66:	9a02      	ldr	r2, [sp, #8]
 8002f68:	4e20      	ldr	r6, [pc, #128]	; (8002fec <lcd_pressplot+0xe8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f6a:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002f6c:	6833      	ldr	r3, [r6, #0]
 8002f6e:	4820      	ldr	r0, [pc, #128]	; (8002ff0 <lcd_pressplot+0xec>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f70:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002f72:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f74:	d007      	beq.n	8002f86 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002f76:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002f78:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002f7c:	bfa8      	it	ge
 8002f7e:	2300      	movge	r3, #0
 8002f80:	6033      	str	r3, [r6, #0]
}
 8002f82:	b024      	add	sp, #144	; 0x90
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	491a      	ldr	r1, [pc, #104]	; (8002ff4 <lcd_pressplot+0xf0>)
 8002f8a:	a804      	add	r0, sp, #16
 8002f8c:	f023 fdc4 	bl	8026b18 <siprintf>
		writelcdcmd(str);
 8002f90:	a804      	add	r0, sp, #16
 8002f92:	f7ff f989 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	a804      	add	r0, sp, #16
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <lcd_pressplot+0xf4>)
 8002fa0:	f023 fdba 	bl	8026b18 <siprintf>
	volatile int result = 0;
 8002fa4:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002fa6:	ab04      	add	r3, sp, #16
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <lcd_pressplot+0xf8>)
	volatile int result = 0;
 8002faa:	9103      	str	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fac:	a80c      	add	r0, sp, #48	; 0x30
 8002fae:	4914      	ldr	r1, [pc, #80]	; (8003000 <lcd_pressplot+0xfc>)
 8002fb0:	f023 fdb2 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8002fb4:	a80c      	add	r0, sp, #48	; 0x30
 8002fb6:	f7ff f977 	bl	80022a8 <writelcdcmd>
 8002fba:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002fbc:	4811      	ldr	r0, [pc, #68]	; (8003004 <lcd_pressplot+0x100>)
	result = writelcdcmd(str);
 8002fbe:	9303      	str	r3, [sp, #12]
	return (result);
 8002fc0:	9b03      	ldr	r3, [sp, #12]
		writelcdcmd("vis t3,1");
 8002fc2:	f7ff f971 	bl	80022a8 <writelcdcmd>
	pressindex++;
 8002fc6:	6833      	ldr	r3, [r6, #0]
 8002fc8:	e7d5      	b.n	8002f76 <lcd_pressplot+0x72>
 8002fca:	bf00      	nop
 8002fcc:	20003434 	.word	0x20003434
 8002fd0:	20003438 	.word	0x20003438
 8002fd4:	00016b47 	.word	0x00016b47
 8002fd8:	00016b48 	.word	0x00016b48
 8002fdc:	00019258 	.word	0x00019258
 8002fe0:	fffe94b8 	.word	0xfffe94b8
 8002fe4:	63e7063f 	.word	0x63e7063f
 8002fe8:	20001d48 	.word	0x20001d48
 8002fec:	20001d4c 	.word	0x20001d4c
 8002ff0:	20001d50 	.word	0x20001d50
 8002ff4:	0802be58 	.word	0x0802be58
 8002ff8:	0802be8c 	.word	0x0802be8c
 8002ffc:	0802bd4c 	.word	0x0802bd4c
 8003000:	0802bcbc 	.word	0x0802bcbc
 8003004:	0802bd90 	.word	0x0802bd90

08003008 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8003008:	b510      	push	{r4, lr}
	unsigned char str[48];

	osDelay(100);
 800300a:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 800300c:	b0a8      	sub	sp, #160	; 0xa0
	osDelay(100);
 800300e:	f013 fb15 	bl	801663c <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <lcd_controls+0x70>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d001      	beq.n	800301e <lcd_controls+0x16>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 800301a:	b028      	add	sp, #160	; 0xa0
 800301c:	bd10      	pop	{r4, pc}
	volatile int result = 0;
 800301e:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <lcd_controls+0x74>)
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <lcd_controls+0x78>)
 8003024:	a810      	add	r0, sp, #64	; 0x40
 8003026:	4917      	ldr	r1, [pc, #92]	; (8003084 <lcd_controls+0x7c>)
	volatile int result = 0;
 8003028:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 800302a:	f023 fd75 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 800302e:	a810      	add	r0, sp, #64	; 0x40
 8003030:	f7ff f93a 	bl	80022a8 <writelcdcmd>
 8003034:	9003      	str	r0, [sp, #12]
	return (result);
 8003036:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8003038:	a810      	add	r0, sp, #64	; 0x40
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <lcd_controls+0x80>)
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <lcd_controls+0x84>)
 800303e:	4911      	ldr	r1, [pc, #68]	; (8003084 <lcd_controls+0x7c>)
	volatile int result = 0;
 8003040:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8003042:	f023 fd69 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8003046:	a810      	add	r0, sp, #64	; 0x40
 8003048:	f7ff f92e 	bl	80022a8 <writelcdcmd>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 800304c:	4a10      	ldr	r2, [pc, #64]	; (8003090 <lcd_controls+0x88>)
	result = writelcdcmd(str);
 800304e:	9002      	str	r0, [sp, #8]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8003050:	a804      	add	r0, sp, #16
 8003052:	4910      	ldr	r1, [pc, #64]	; (8003094 <lcd_controls+0x8c>)
	return (result);
 8003054:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8003056:	f023 fd5f 	bl	8026b18 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800305a:	ab04      	add	r3, sp, #16
 800305c:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <lcd_controls+0x90>)
 800305e:	4909      	ldr	r1, [pc, #36]	; (8003084 <lcd_controls+0x7c>)
 8003060:	a810      	add	r0, sp, #64	; 0x40
	volatile int result = 0;
 8003062:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8003064:	f023 fd58 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 8003068:	a810      	add	r0, sp, #64	; 0x40
 800306a:	f7ff f91d 	bl	80022a8 <writelcdcmd>
 800306e:	9001      	str	r0, [sp, #4]
	return (result);
 8003070:	9b01      	ldr	r3, [sp, #4]
}
 8003072:	b028      	add	sp, #160	; 0xa0
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	20001d48 	.word	0x20001d48
 800307c:	0802be98 	.word	0x0802be98
 8003080:	0802bd4c 	.word	0x0802bd4c
 8003084:	0802bcbc 	.word	0x0802bcbc
 8003088:	0802bea0 	.word	0x0802bea0
 800308c:	0802bdac 	.word	0x0802bdac
 8003090:	20003530 	.word	0x20003530
 8003094:	0802bea8 	.word	0x0802bea8
 8003098:	0802bd88 	.word	0x0802bd88

0800309c <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 800309c:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 800309e:	4c23      	ldr	r4, [pc, #140]	; (800312c <lcd_pagechange+0x90>)
lcd_pagechange(uint8_t newpage) {
 80030a0:	b09a      	sub	sp, #104	; 0x68
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 80030a2:	7823      	ldrb	r3, [r4, #0]
 80030a4:	4283      	cmp	r3, r0
 80030a6:	d009      	beq.n	80030bc <lcd_pagechange+0x20>
	our_currentpage = newpage;
 80030a8:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 80030aa:	2805      	cmp	r0, #5
 80030ac:	d83a      	bhi.n	8003124 <lcd_pagechange+0x88>
 80030ae:	e8df f000 	tbb	[pc, r0]
 80030b2:	030f      	.short	0x030f
 80030b4:	0509332d 	.word	0x0509332d
		lcd_showvars();		// display vars on the lcd
 80030b8:	f7ff fba4 	bl	8002804 <lcd_showvars>
	return (our_currentpage);
 80030bc:	7820      	ldrb	r0, [r4, #0]
 80030be:	b2c0      	uxtb	r0, r0
}
 80030c0:	b01a      	add	sp, #104	; 0x68
 80030c2:	bd10      	pop	{r4, pc}
		lcd_controls();
 80030c4:	f7ff ffa0 	bl	8003008 <lcd_controls>
	return (our_currentpage);
 80030c8:	7820      	ldrb	r0, [r4, #0]
 80030ca:	b2c0      	uxtb	r0, r0
}
 80030cc:	b01a      	add	sp, #104	; 0x68
 80030ce:	bd10      	pop	{r4, pc}
		lcd_time();
 80030d0:	f7ff faf6 	bl	80026c0 <lcd_time>
	lastday = timeinfo.tm_yday;
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <lcd_pagechange+0x94>)
 80030d6:	4917      	ldr	r1, [pc, #92]	; (8003134 <lcd_pagechange+0x98>)
 80030d8:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <lcd_pagechange+0x9c>)
	lastday = timeinfo.tm_yday;
 80030dc:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80030de:	2128      	movs	r1, #40	; 0x28
 80030e0:	4816      	ldr	r0, [pc, #88]	; (800313c <lcd_pagechange+0xa0>)
 80030e2:	f024 fb0f 	bl	8027704 <strftime>
	volatile int result = 0;
 80030e6:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <lcd_pagechange+0xa0>)
 80030ea:	a802      	add	r0, sp, #8
 80030ec:	4a14      	ldr	r2, [pc, #80]	; (8003140 <lcd_pagechange+0xa4>)
	volatile int result = 0;
 80030ee:	9101      	str	r1, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80030f0:	4914      	ldr	r1, [pc, #80]	; (8003144 <lcd_pagechange+0xa8>)
 80030f2:	f023 fd11 	bl	8026b18 <siprintf>
	result = writelcdcmd(str);
 80030f6:	a802      	add	r0, sp, #8
 80030f8:	f7ff f8d6 	bl	80022a8 <writelcdcmd>
 80030fc:	9001      	str	r0, [sp, #4]
	return (result);
 80030fe:	9b01      	ldr	r3, [sp, #4]
	if (our_currentpage != 0)
 8003100:	7823      	ldrb	r3, [r4, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1da      	bne.n	80030bc <lcd_pagechange+0x20>
 8003106:	f7ff f8eb 	bl	80022e0 <lcd_gps.part.0>
 800310a:	e7d7      	b.n	80030bc <lcd_pagechange+0x20>
		lcd_trigcharts();		// display chart
 800310c:	f7ff fce6 	bl	8002adc <lcd_trigcharts>
	return (our_currentpage);
 8003110:	7820      	ldrb	r0, [r4, #0]
 8003112:	b2c0      	uxtb	r0, r0
}
 8003114:	b01a      	add	sp, #104	; 0x68
 8003116:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8003118:	f7ff fe7a 	bl	8002e10 <lcd_presscharts>
	return (our_currentpage);
 800311c:	7820      	ldrb	r0, [r4, #0]
 800311e:	b2c0      	uxtb	r0, r0
}
 8003120:	b01a      	add	sp, #104	; 0x68
 8003122:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8003124:	4808      	ldr	r0, [pc, #32]	; (8003148 <lcd_pagechange+0xac>)
 8003126:	f023 fba9 	bl	802687c <puts>
		break;
 800312a:	e7c7      	b.n	80030bc <lcd_pagechange+0x20>
 800312c:	20001d48 	.word	0x20001d48
 8003130:	20001f64 	.word	0x20001f64
 8003134:	20001a7c 	.word	0x20001a7c
 8003138:	0802bd9c 	.word	0x0802bd9c
 800313c:	20001f38 	.word	0x20001f38
 8003140:	0802bdac 	.word	0x0802bdac
 8003144:	0802bcbc 	.word	0x0802bcbc
 8003148:	0802bec0 	.word	0x0802bec0

0800314c <lcd_init>:

// try to set the baud to 230400
// only assumes it could be at 9600 to begin with
lcd_init(int rqbaud) {
 800314c:	b570      	push	{r4, r5, r6, lr}
	lcduart_error = HAL_UART_ERROR_NONE;
 800314e:	4d16      	ldr	r5, [pc, #88]	; (80031a8 <lcd_init+0x5c>)
 8003150:	2600      	movs	r6, #0
lcd_init(int rqbaud) {
 8003152:	4604      	mov	r4, r0
	lcduart_error = HAL_UART_ERROR_NONE;
 8003154:	602e      	str	r6, [r5, #0]

	lcd_reset();		// command LCD reset at the current baudrate - it should switch to 9600
 8003156:	f7fe ff9f 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // command LCD to 9600 from current (unknown) speed
 800315a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800315e:	f7fe ffc7 	bl	80020f0 <lcd_baud>
	lcd_uart_init(9600); // then change our uart baud to match
 8003162:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003166:	f7fe ff55 	bl	8002014 <lcd_uart_init>
	lcd_reset();	// command LCD reset at the current baudrate - it should switch to 9600
 800316a:	f7fe ff95 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // reset LCD (might be 2nd time or not)
 800316e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003172:	f7fe ffbd 	bl	80020f0 <lcd_baud>
	osDelay(600);
 8003176:	f44f 7016 	mov.w	r0, #600	; 0x258
 800317a:	f013 fa5f 	bl	801663c <osDelay>

	lcd_baud(rqbaud);  //  LCD *should* return in rqbuad baud
 800317e:	4620      	mov	r0, r4
 8003180:	f7fe ffb6 	bl	80020f0 <lcd_baud>
	osDelay(600);
 8003184:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003188:	f013 fa58 	bl	801663c <osDelay>
	lcd_uart_init(rqbaud); // then change our baud to match
 800318c:	4620      	mov	r0, r4
 800318e:	f7fe ff41 	bl	8002014 <lcd_uart_init>

	osDelay(600);
 8003192:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003196:	f013 fa51 	bl	801663c <osDelay>
	lcduart_error = HAL_UART_ERROR_NONE;
 800319a:	602e      	str	r6, [r5, #0]
//	printf("nxt_baud:\n");
	writelcdcmd("page 0");
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <lcd_init+0x60>)
}
 800319e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	writelcdcmd("page 0");
 80031a2:	f7ff b881 	b.w	80022a8 <writelcdcmd>
 80031a6:	bf00      	nop
 80031a8:	20001b40 	.word	0x20001b40
 80031ac:	0802bed4 	.word	0x0802bed4

080031b0 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 80031b0:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 80031b2:	4d45      	ldr	r5, [pc, #276]	; (80032c8 <processnex+0x118>)
void processnex() {		// process Nextion - called at regular intervals
 80031b4:	b08a      	sub	sp, #40	; 0x28
	switch (lcduart_error) {
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d05a      	beq.n	8003272 <processnex+0xc2>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d053      	beq.n	8003268 <processnex+0xb8>
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d03c      	beq.n	800323e <processnex+0x8e>
 80031c4:	4c41      	ldr	r4, [pc, #260]	; (80032cc <processnex+0x11c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80031c6:	2600      	movs	r6, #0
 80031c8:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d03f      	beq.n	8003250 <processnex+0xa0>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d06c      	beq.n	80032b0 <processnex+0x100>
	if (lcd_initflag == 3) {	// uart only
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d056      	beq.n	800328a <processnex+0xda>
	lcd_rxdma();		// get any new characters received
 80031dc:	f7ff f804 	bl	80021e8 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 80031e0:	f000 f90a 	bl	80033f8 <lcd_event_process>
	if (dimtimer > 50000) {
 80031e4:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <processnex+0x120>)
 80031e6:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 80031ea:	9000      	str	r0, [sp, #0]
	if (dimtimer > 50000) {
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	428b      	cmp	r3, r1
 80031f0:	d903      	bls.n	80031fa <processnex+0x4a>
		dimtimer--;
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	b00a      	add	sp, #40	; 0x28
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 80031fa:	4836      	ldr	r0, [pc, #216]	; (80032d4 <processnex+0x124>)
		dimtimer = 60000;
 80031fc:	f64e 2560 	movw	r5, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003200:	6801      	ldr	r1, [r0, #0]
 8003202:	6804      	ldr	r4, [r0, #0]
 8003204:	6803      	ldr	r3, [r0, #0]
		dimtimer = 60000;
 8003206:	6015      	str	r5, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003208:	111b      	asrs	r3, r3, #4
 800320a:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800320e:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8003210:	2a01      	cmp	r2, #1
 8003212:	dd35      	ble.n	8003280 <processnex+0xd0>
 8003214:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003216:	4930      	ldr	r1, [pc, #192]	; (80032d8 <processnex+0x128>)
 8003218:	4613      	mov	r3, r2
 800321a:	bf28      	it	cs
 800321c:	2363      	movcs	r3, #99	; 0x63
 800321e:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <processnex+0x12c>)
 8003222:	a802      	add	r0, sp, #8
 8003224:	492e      	ldr	r1, [pc, #184]	; (80032e0 <processnex+0x130>)
 8003226:	f023 fc77 	bl	8026b18 <siprintf>
	result = writelcdcmd(buffer);
 800322a:	a802      	add	r0, sp, #8
 800322c:	f7ff f83c 	bl	80022a8 <writelcdcmd>
 8003230:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8003232:	9b01      	ldr	r3, [sp, #4]
 8003234:	3301      	adds	r3, #1
 8003236:	d043      	beq.n	80032c0 <processnex+0x110>
	return (result);
 8003238:	9b01      	ldr	r3, [sp, #4]
}
 800323a:	b00a      	add	sp, #40	; 0x28
 800323c:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 800323e:	4c23      	ldr	r4, [pc, #140]	; (80032cc <processnex+0x11c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003240:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8003242:	4828      	ldr	r0, [pc, #160]	; (80032e4 <processnex+0x134>)
 8003244:	f023 fb1a 	bl	802687c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8003248:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d1bf      	bne.n	80031d0 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8003250:	4825      	ldr	r0, [pc, #148]	; (80032e8 <processnex+0x138>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8003252:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8003254:	f023 fb12 	bl	802687c <puts>
		lcd_init(230400);		// try to reset LCD
 8003258:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800325c:	f7ff ff76 	bl	800314c <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8003260:	2302      	movs	r3, #2
 8003262:	6023      	str	r3, [r4, #0]
}
 8003264:	b00a      	add	sp, #40	; 0x28
 8003266:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8003268:	4820      	ldr	r0, [pc, #128]	; (80032ec <processnex+0x13c>)
 800326a:	4c18      	ldr	r4, [pc, #96]	; (80032cc <processnex+0x11c>)
 800326c:	f023 fb06 	bl	802687c <puts>
 8003270:	e7a9      	b.n	80031c6 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8003272:	481f      	ldr	r0, [pc, #124]	; (80032f0 <processnex+0x140>)
 8003274:	f023 fb02 	bl	802687c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8003278:	4c14      	ldr	r4, [pc, #80]	; (80032cc <processnex+0x11c>)
 800327a:	2301      	movs	r3, #1
 800327c:	6023      	str	r3, [r4, #0]
		break;
 800327e:	e7a2      	b.n	80031c6 <processnex+0x16>
			i = 2;	// prevent black
 8003280:	2202      	movs	r2, #2
 8003282:	4915      	ldr	r1, [pc, #84]	; (80032d8 <processnex+0x128>)
 8003284:	4613      	mov	r3, r2
 8003286:	600a      	str	r2, [r1, #0]
 8003288:	e7ca      	b.n	8003220 <processnex+0x70>
		printf("processnex: calling lcd_uart_init(230400)\n");
 800328a:	481a      	ldr	r0, [pc, #104]	; (80032f4 <processnex+0x144>)
		lcduart_error = HAL_UART_ERROR_NONE;
 800328c:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 800328e:	f023 faf5 	bl	802687c <puts>
		lcd_uart_init(230400);
 8003292:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003296:	f7fe febd 	bl	8002014 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 800329a:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800329e:	f7ff ff55 	bl	800314c <lcd_init>
		osDelay(100);
 80032a2:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 80032a4:	6026      	str	r6, [r4, #0]
}
 80032a6:	b00a      	add	sp, #40	; 0x28
 80032a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 80032ac:	f013 b9c6 	b.w	801663c <osDelay>
		osDelay(500);
 80032b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032b4:	f013 f9c2 	bl	801663c <osDelay>
		lcd_initflag = 3;
 80032b8:	2303      	movs	r3, #3
 80032ba:	6023      	str	r3, [r4, #0]
}
 80032bc:	b00a      	add	sp, #40	; 0x28
 80032be:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <processnex+0x148>)
 80032c2:	f023 fa3f 	bl	8026744 <iprintf>
 80032c6:	e7b7      	b.n	8003238 <processnex+0x88>
 80032c8:	20001b40 	.word	0x20001b40
 80032cc:	20001a8c 	.word	0x20001a8c
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	20000018 	.word	0x20000018
 80032d8:	20001a74 	.word	0x20001a74
 80032dc:	0802bd38 	.word	0x0802bd38
 80032e0:	0802bcf0 	.word	0x0802bcf0
 80032e4:	0802bedc 	.word	0x0802bedc
 80032e8:	0802bf14 	.word	0x0802bf14
 80032ec:	0802bf00 	.word	0x0802bf00
 80032f0:	0802beec 	.word	0x0802beec
 80032f4:	0802bf3c 	.word	0x0802bf3c
 80032f8:	0802bcf8 	.word	0x0802bcf8

080032fc <lcd_getlack>:
uint8_t lcd_getlack() {
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (lcdstatus == 0xff) {
 80032fe:	4d12      	ldr	r5, [pc, #72]	; (8003348 <lcd_getlack+0x4c>)
	processnex();
 8003300:	f7ff ff56 	bl	80031b0 <processnex>
	while (lcdstatus == 0xff) {
 8003304:	782b      	ldrb	r3, [r5, #0]
 8003306:	2bff      	cmp	r3, #255	; 0xff
 8003308:	d11a      	bne.n	8003340 <lcd_getlack+0x44>
 800330a:	b2df      	uxtb	r7, r3
 800330c:	4c0f      	ldr	r4, [pc, #60]	; (800334c <lcd_getlack+0x50>)
		if (trys > 1500) {
 800330e:	f240 56dc 	movw	r6, #1500	; 0x5dc
 8003312:	e007      	b.n	8003324 <lcd_getlack+0x28>
		trys++;
 8003314:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003316:	f013 f991 	bl	801663c <osDelay>
		processnex();
 800331a:	f7ff ff49 	bl	80031b0 <processnex>
	while (lcdstatus == 0xff) {
 800331e:	782b      	ldrb	r3, [r5, #0]
 8003320:	2bff      	cmp	r3, #255	; 0xff
 8003322:	d10d      	bne.n	8003340 <lcd_getlack+0x44>
		if (trys > 1500) {
 8003324:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003326:	2001      	movs	r0, #1
		if (trys > 1500) {
 8003328:	42b3      	cmp	r3, r6
		trys++;
 800332a:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1500) {
 800332e:	d9f1      	bls.n	8003314 <lcd_getlack+0x18>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003330:	4807      	ldr	r0, [pc, #28]	; (8003350 <lcd_getlack+0x54>)
 8003332:	f023 fa07 	bl	8026744 <iprintf>
			trys = 0;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4638      	mov	r0, r7
			trys = 0;
 800333a:	6023      	str	r3, [r4, #0]
			lcdstatus = 0;
 800333c:	702b      	strb	r3, [r5, #0]
}
 800333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (lcdstatus);
 8003340:	782f      	ldrb	r7, [r5, #0]
 8003342:	b2ff      	uxtb	r7, r7
}
 8003344:	4638      	mov	r0, r7
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	20001b3c 	.word	0x20001b3c
 800334c:	20002170 	.word	0x20002170
 8003350:	0802bf68 	.word	0x0802bf68

08003354 <getlcdpage>:
int getlcdpage(void) {
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003356:	2301      	movs	r3, #1
 8003358:	4e21      	ldr	r6, [pc, #132]	; (80033e0 <getlcdpage+0x8c>)
	strcpy(pkt, str);
 800335a:	4c22      	ldr	r4, [pc, #136]	; (80033e4 <getlcdpage+0x90>)
int getlcdpage(void) {
 800335c:	b09b      	sub	sp, #108	; 0x6c
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800335e:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003360:	6033      	str	r3, [r6, #0]
	strcat(pkt, "\xff\xff\xff");
 8003362:	4d21      	ldr	r5, [pc, #132]	; (80033e8 <getlcdpage+0x94>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003364:	f013 f96a 	bl	801663c <osDelay>
	lcdstatus = 0xff;
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <getlcdpage+0x98>)
 800336a:	22ff      	movs	r2, #255	; 0xff
	strcpy(pkt, str);
 800336c:	e894 0003 	ldmia.w	r4, {r0, r1}
	lcdstatus = 0xff;
 8003370:	701a      	strb	r2, [r3, #0]
	strcpy(pkt, str);
 8003372:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003374:	6828      	ldr	r0, [r5, #0]
	strcpy(pkt, str);
 8003376:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800337a:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 800337e:	a802      	add	r0, sp, #8
 8003380:	f7fe fefa 	bl	8002178 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003384:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8003386:	9b01      	ldr	r3, [sp, #4]
 8003388:	3301      	adds	r3, #1
 800338a:	d025      	beq.n	80033d8 <getlcdpage+0x84>
	result = lcd_getlack();		// wait for a response
 800338c:	f7ff ffb6 	bl	80032fc <lcd_getlack>
 8003390:	9001      	str	r0, [sp, #4]
	while (result == -1) {	// try again
 8003392:	9b01      	ldr	r3, [sp, #4]
 8003394:	3301      	adds	r3, #1
 8003396:	d11a      	bne.n	80033ce <getlcdpage+0x7a>
	strcat(pkt, "\xff\xff\xff");
 8003398:	682d      	ldr	r5, [r5, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 800339a:	4f15      	ldr	r7, [pc, #84]	; (80033f0 <getlcdpage+0x9c>)
 800339c:	e005      	b.n	80033aa <getlcdpage+0x56>
		result = lcd_getlack();		// wait for a response
 800339e:	f7ff ffad 	bl	80032fc <lcd_getlack>
 80033a2:	9001      	str	r0, [sp, #4]
	while (result == -1) {	// try again
 80033a4:	9b01      	ldr	r3, [sp, #4]
 80033a6:	3301      	adds	r3, #1
 80033a8:	d111      	bne.n	80033ce <getlcdpage+0x7a>
	strcat(pkt, "\xff\xff\xff");
 80033aa:	f8cd 500e 	str.w	r5, [sp, #14]
	strcpy(pkt, str);
 80033ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b2:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 80033b4:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 80033b6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80033ba:	f7fe fedd 	bl	8002178 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80033be:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80033c0:	9b01      	ldr	r3, [sp, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	d1eb      	bne.n	800339e <getlcdpage+0x4a>
			printf("getlcdpage2: Cmd failed\n\r");
 80033c6:	4638      	mov	r0, r7
 80033c8:	f023 f9bc 	bl	8026744 <iprintf>
 80033cc:	e7e7      	b.n	800339e <getlcdpage+0x4a>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80033ce:	2300      	movs	r3, #0
 80033d0:	6033      	str	r3, [r6, #0]
	return (result);
 80033d2:	9801      	ldr	r0, [sp, #4]
}
 80033d4:	b01b      	add	sp, #108	; 0x6c
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("getlcdpage: sendme failed\n");
 80033d8:	4806      	ldr	r0, [pc, #24]	; (80033f4 <getlcdpage+0xa0>)
 80033da:	f023 fa4f 	bl	802687c <puts>
 80033de:	e7d5      	b.n	800338c <getlcdpage+0x38>
 80033e0:	20001a90 	.word	0x20001a90
 80033e4:	0802bf98 	.word	0x0802bf98
 80033e8:	0802bbec 	.word	0x0802bbec
 80033ec:	20001b3c 	.word	0x20001b3c
 80033f0:	0802bfbc 	.word	0x0802bfbc
 80033f4:	0802bfa0 	.word	0x0802bfa0

080033f8 <lcd_event_process>:
int lcd_event_process(void) {
 80033f8:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80033fa:	4c8d      	ldr	r4, [pc, #564]	; (8003630 <lcd_event_process+0x238>)
int lcd_event_process(void) {
 80033fc:	b08d      	sub	sp, #52	; 0x34
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80033fe:	2160      	movs	r1, #96	; 0x60
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff f88b 	bl	800251c <isnexpkt>
 8003406:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8003408:	9b01      	ldr	r3, [sp, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	dd27      	ble.n	800345e <lcd_event_process+0x66>
		lcdstatus = eventbuffer[0];
 800340e:	7821      	ldrb	r1, [r4, #0]
 8003410:	4b88      	ldr	r3, [pc, #544]	; (8003634 <lcd_event_process+0x23c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003412:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8003414:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003416:	d91e      	bls.n	8003456 <lcd_event_process+0x5e>
			switch (eventbuffer[0]) {
 8003418:	2924      	cmp	r1, #36	; 0x24
 800341a:	f000 80d5 	beq.w	80035c8 <lcd_event_process+0x1d0>
 800341e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8003422:	b2da      	uxtb	r2, r3
 8003424:	2a25      	cmp	r2, #37	; 0x25
 8003426:	d81d      	bhi.n	8003464 <lcd_event_process+0x6c>
 8003428:	2b25      	cmp	r3, #37	; 0x25
 800342a:	d81b      	bhi.n	8003464 <lcd_event_process+0x6c>
 800342c:	e8df f003 	tbb	[pc, r3]
 8003430:	6c961aa2 	.word	0x6c961aa2
 8003434:	1a1a1a1a 	.word	0x1a1a1a1a
 8003438:	1a1a1a1a 	.word	0x1a1a1a1a
 800343c:	1aae1a1a 	.word	0x1aae1a1a
 8003440:	1a1a1a1a 	.word	0x1a1a1a1a
 8003444:	1a1a1a1a 	.word	0x1a1a1a1a
 8003448:	1a1a1a1a 	.word	0x1a1a1a1a
 800344c:	1a1a1a1a 	.word	0x1a1a1a1a
 8003450:	1a1a1a1a 	.word	0x1a1a1a1a
 8003454:	671a      	.short	0x671a
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8003456:	2901      	cmp	r1, #1
 8003458:	d123      	bne.n	80034a2 <lcd_event_process+0xaa>
}
 800345a:	b00d      	add	sp, #52	; 0x34
 800345c:	bd30      	pop	{r4, r5, pc}
		return (result);		// 0 = nothing found, -1 = timeout, -2=no char
 800345e:	9801      	ldr	r0, [sp, #4]
}
 8003460:	b00d      	add	sp, #52	; 0x34
 8003462:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8003464:	4874      	ldr	r0, [pc, #464]	; (8003638 <lcd_event_process+0x240>)
 8003466:	f023 f96d 	bl	8026744 <iprintf>
				i = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	9304      	str	r3, [sp, #16]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	5ce3      	ldrb	r3, [r4, r3]
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	d00f      	beq.n	8003496 <lcd_event_process+0x9e>
					printf(" 0x%02x", eventbuffer[i++]);
 8003476:	4d71      	ldr	r5, [pc, #452]	; (800363c <lcd_event_process+0x244>)
 8003478:	e009      	b.n	800348e <lcd_event_process+0x96>
 800347a:	9b04      	ldr	r3, [sp, #16]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	5ce1      	ldrb	r1, [r4, r3]
 8003480:	9204      	str	r2, [sp, #16]
 8003482:	f023 f95f 	bl	8026744 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8003486:	9b04      	ldr	r3, [sp, #16]
 8003488:	5ce3      	ldrb	r3, [r4, r3]
 800348a:	2bff      	cmp	r3, #255	; 0xff
 800348c:	d003      	beq.n	8003496 <lcd_event_process+0x9e>
 800348e:	9b04      	ldr	r3, [sp, #16]
					printf(" 0x%02x", eventbuffer[i++]);
 8003490:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8003492:	2b5f      	cmp	r3, #95	; 0x5f
 8003494:	d9f1      	bls.n	800347a <lcd_event_process+0x82>
				printf("\n");
 8003496:	200a      	movs	r0, #10
 8003498:	f023 f96c 	bl	8026774 <putchar>
				return (-1);
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	e7db      	b.n	800345a <lcd_event_process+0x62>
				printf("Nextion reported: ");
 80034a2:	4867      	ldr	r0, [pc, #412]	; (8003640 <lcd_event_process+0x248>)
 80034a4:	f023 f94e 	bl	8026744 <iprintf>
				switch (eventbuffer[0]) {
 80034a8:	7821      	ldrb	r1, [r4, #0]
 80034aa:	2924      	cmp	r1, #36	; 0x24
 80034ac:	f200 8091 	bhi.w	80035d2 <lcd_event_process+0x1da>
 80034b0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034b4:	011d0122 	.word	0x011d0122
 80034b8:	008f0118 	.word	0x008f0118
 80034bc:	010e008f 	.word	0x010e008f
 80034c0:	008f008f 	.word	0x008f008f
 80034c4:	008f008f 	.word	0x008f008f
 80034c8:	008f008f 	.word	0x008f008f
 80034cc:	008f008f 	.word	0x008f008f
 80034d0:	008f008f 	.word	0x008f008f
 80034d4:	008f008f 	.word	0x008f008f
 80034d8:	008f0106 	.word	0x008f0106
 80034dc:	008f008f 	.word	0x008f008f
 80034e0:	008f008f 	.word	0x008f008f
 80034e4:	008f008f 	.word	0x008f008f
 80034e8:	008f00fe 	.word	0x008f00fe
 80034ec:	008f00f8 	.word	0x008f00f8
 80034f0:	008f00f2 	.word	0x008f00f2
 80034f4:	008f00ec 	.word	0x008f00ec
 80034f8:	00b8008f 	.word	0x00b8008f
 80034fc:	00b2      	.short	0x00b2
				printf("Nextion returned 0x88 - Ready!\n");
 80034fe:	4851      	ldr	r0, [pc, #324]	; (8003644 <lcd_event_process+0x24c>)
 8003500:	f023 f9bc 	bl	802687c <puts>
			return (0);
 8003504:	2000      	movs	r0, #0
				break;
 8003506:	e7a8      	b.n	800345a <lcd_event_process+0x62>
				setlcddim(lcdbright);
 8003508:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <lcd_event_process+0x250>)
	dimtimer = DIMTIME;
 800350a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800350e:	4a4f      	ldr	r2, [pc, #316]	; (800364c <lcd_event_process+0x254>)
	sprintf(buffer, "%s=%lu", id, value);
 8003510:	a804      	add	r0, sp, #16
				setlcddim(lcdbright);
 8003512:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 8003514:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003516:	2b63      	cmp	r3, #99	; 0x63
 8003518:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <lcd_event_process+0x258>)
 800351a:	494e      	ldr	r1, [pc, #312]	; (8003654 <lcd_event_process+0x25c>)
 800351c:	bf28      	it	cs
 800351e:	2363      	movcs	r3, #99	; 0x63
 8003520:	f023 fafa 	bl	8026b18 <siprintf>
	result = writelcdcmd(buffer);
 8003524:	a804      	add	r0, sp, #16
 8003526:	f7fe febf 	bl	80022a8 <writelcdcmd>
 800352a:	9003      	str	r0, [sp, #12]
	if (result == -1) {		// wait for response
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	d06e      	beq.n	8003610 <lcd_event_process+0x218>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003532:	7860      	ldrb	r0, [r4, #1]
	return (result);
 8003534:	9b03      	ldr	r3, [sp, #12]
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003536:	f7ff fdb1 	bl	800309c <lcd_pagechange>
 800353a:	2800      	cmp	r0, #0
 800353c:	db05      	blt.n	800354a <lcd_event_process+0x152>
 800353e:	7860      	ldrb	r0, [r4, #1]
 8003540:	f7ff fdac 	bl	800309c <lcd_pagechange>
 8003544:	2805      	cmp	r0, #5
 8003546:	f340 80e0 	ble.w	800370a <lcd_event_process+0x312>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800354a:	7860      	ldrb	r0, [r4, #1]
 800354c:	f7ff fda6 	bl	800309c <lcd_pagechange>
 8003550:	4601      	mov	r1, r0
 8003552:	4841      	ldr	r0, [pc, #260]	; (8003658 <lcd_event_process+0x260>)
 8003554:	f023 f8f6 	bl	8026744 <iprintf>
			return (0);
 8003558:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800355a:	e77e      	b.n	800345a <lcd_event_process+0x62>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 800355c:	78e3      	ldrb	r3, [r4, #3]
 800355e:	78a2      	ldrb	r2, [r4, #2]
 8003560:	7861      	ldrb	r1, [r4, #1]
 8003562:	483e      	ldr	r0, [pc, #248]	; (800365c <lcd_event_process+0x264>)
 8003564:	f023 f8ee 	bl	8026744 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8003568:	7863      	ldrb	r3, [r4, #1]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d037      	beq.n	80035de <lcd_event_process+0x1e6>
			return (0);
 800356e:	2000      	movs	r0, #0
}
 8003570:	b00d      	add	sp, #52	; 0x34
 8003572:	bd30      	pop	{r4, r5, pc}
				decode_lcdtype(eventbuffer);
 8003574:	482e      	ldr	r0, [pc, #184]	; (8003630 <lcd_event_process+0x238>)
 8003576:	f7ff f849 	bl	800260c <decode_lcdtype>
				if (nex_model[0] != '\0') {
 800357a:	4939      	ldr	r1, [pc, #228]	; (8003660 <lcd_event_process+0x268>)
 800357c:	780b      	ldrb	r3, [r1, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f5      	beq.n	800356e <lcd_event_process+0x176>
					printf("Nextion LCD Model: %s\n", nex_model);
 8003582:	4838      	ldr	r0, [pc, #224]	; (8003664 <lcd_event_process+0x26c>)
 8003584:	f023 f8de 	bl	8026744 <iprintf>
			return (0);
 8003588:	2000      	movs	r0, #0
 800358a:	e766      	b.n	800345a <lcd_event_process+0x62>
	if ((str[0] == 0x71) && (str[5] = 0xff) && (str[6] == 0xff) && (str[7] == 0xff)) {
 800358c:	79a3      	ldrb	r3, [r4, #6]
 800358e:	22ff      	movs	r2, #255	; 0xff
 8003590:	79e1      	ldrb	r1, [r4, #7]
 8003592:	7162      	strb	r2, [r4, #5]
 8003594:	400b      	ands	r3, r1
 8003596:	4293      	cmp	r3, r2
 8003598:	f040 80b4 	bne.w	8003704 <lcd_event_process+0x30c>
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <lcd_event_process+0x238>)
	number = 0;
 800359e:	2100      	movs	r1, #0
 80035a0:	1d10      	adds	r0, r2, #4
			number = number | (str[i] << 24);
 80035a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80035a6:	061b      	lsls	r3, r3, #24
		for (i = 1; i < 5; i++) {
 80035a8:	4290      	cmp	r0, r2
			number = number | (str[i] << 24);
 80035aa:	ea43 2121 	orr.w	r1, r3, r1, asr #8
		for (i = 1; i < 5; i++) {
 80035ae:	d1f8      	bne.n	80035a2 <lcd_event_process+0x1aa>
				if (nex_model[0] != '\0') {
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <lcd_event_process+0x268>)
				lcd_sys0 = decode_int(eventbuffer);
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <lcd_event_process+0x270>)
				if (nex_model[0] != '\0') {
 80035b4:	7812      	ldrb	r2, [r2, #0]
				lcd_sys0 = decode_int(eventbuffer);
 80035b6:	6019      	str	r1, [r3, #0]
				if (nex_model[0] != '\0') {
 80035b8:	2a00      	cmp	r2, #0
 80035ba:	d0d8      	beq.n	800356e <lcd_event_process+0x176>
					printf("Nextion LCD's Firmware build: 0x%0x\n", lcd_sys0);
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	482b      	ldr	r0, [pc, #172]	; (800366c <lcd_event_process+0x274>)
 80035c0:	f023 f8c0 	bl	8026744 <iprintf>
			return (0);
 80035c4:	2000      	movs	r0, #0
 80035c6:	e748      	b.n	800345a <lcd_event_process+0x62>
				printf("Serial Buffer Overflow!\n");
 80035c8:	4829      	ldr	r0, [pc, #164]	; (8003670 <lcd_event_process+0x278>)
 80035ca:	f023 f957 	bl	802687c <puts>
				return (1);
 80035ce:	2001      	movs	r0, #1
 80035d0:	e743      	b.n	800345a <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 80035d2:	4828      	ldr	r0, [pc, #160]	; (8003674 <lcd_event_process+0x27c>)
 80035d4:	f023 f8b6 	bl	8026744 <iprintf>
				return (-1);		// some kindof error
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80035dc:	e73d      	b.n	800345a <lcd_event_process+0x62>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 80035de:	78a3      	ldrb	r3, [r4, #2]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	f000 80b1 	beq.w	8003748 <lcd_event_process+0x350>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 7)) {		// p4 reset button
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	f000 80d1 	beq.w	800378e <lcd_event_process+0x396>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f000 809a 	beq.w	8003726 <lcd_event_process+0x32e>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d1bb      	bne.n	800356e <lcd_event_process+0x176>
					if (eventbuffer[3] == 1) 		// sound on
 80035f6:	78e3      	ldrb	r3, [r4, #3]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <lcd_event_process+0x280>)
 80035fa:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 80035fe:	481f      	ldr	r0, [pc, #124]	; (800367c <lcd_event_process+0x284>)
					if (eventbuffer[3] == 1) 		// sound on
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8003608:	f023 f938 	bl	802687c <puts>
			return (0);
 800360c:	2000      	movs	r0, #0
 800360e:	e724      	b.n	800345a <lcd_event_process+0x62>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8003610:	481b      	ldr	r0, [pc, #108]	; (8003680 <lcd_event_process+0x288>)
 8003612:	f023 f897 	bl	8026744 <iprintf>
 8003616:	e78c      	b.n	8003532 <lcd_event_process+0x13a>
					printf("Ser Buffer overflow\n");
 8003618:	481a      	ldr	r0, [pc, #104]	; (8003684 <lcd_event_process+0x28c>)
 800361a:	f023 f92f 	bl	802687c <puts>
				return (-1);		// some kindof error
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003622:	e71a      	b.n	800345a <lcd_event_process+0x62>
					printf("Variable name too long\n");
 8003624:	4818      	ldr	r0, [pc, #96]	; (8003688 <lcd_event_process+0x290>)
 8003626:	f023 f929 	bl	802687c <puts>
				return (-1);		// some kindof error
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800362e:	e714      	b.n	800345a <lcd_event_process+0x62>
 8003630:	200019f0 	.word	0x200019f0
 8003634:	20001b3c 	.word	0x20001b3c
 8003638:	0802c1f8 	.word	0x0802c1f8
 800363c:	0802c22c 	.word	0x0802c22c
 8003640:	0802bfd8 	.word	0x0802bfd8
 8003644:	0802c150 	.word	0x0802c150
 8003648:	20000018 	.word	0x20000018
 800364c:	2000000c 	.word	0x2000000c
 8003650:	0802bd38 	.word	0x0802bd38
 8003654:	0802bcf0 	.word	0x0802bcf0
 8003658:	0802c1c8 	.word	0x0802c1c8
 800365c:	0802c170 	.word	0x0802c170
 8003660:	20001b50 	.word	0x20001b50
 8003664:	0802c110 	.word	0x0802c110
 8003668:	20000014 	.word	0x20000014
 800366c:	0802c128 	.word	0x0802c128
 8003670:	0802c0f8 	.word	0x0802c0f8
 8003674:	0802c0e0 	.word	0x0802c0e0
 8003678:	200002ac 	.word	0x200002ac
 800367c:	0802c1bc 	.word	0x0802c1bc
 8003680:	0802bcf8 	.word	0x0802bcf8
 8003684:	0802c028 	.word	0x0802c028
 8003688:	0802c010 	.word	0x0802c010
					printf("Invalid escape char\n");
 800368c:	4849      	ldr	r0, [pc, #292]	; (80037b4 <lcd_event_process+0x3bc>)
 800368e:	f023 f8f5 	bl	802687c <puts>
				return (-1);		// some kindof error
 8003692:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003696:	e6e0      	b.n	800345a <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 8003698:	4847      	ldr	r0, [pc, #284]	; (80037b8 <lcd_event_process+0x3c0>)
 800369a:	f023 f8ef 	bl	802687c <puts>
				return (-1);		// some kindof error
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036a2:	e6da      	b.n	800345a <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 80036a4:	4845      	ldr	r0, [pc, #276]	; (80037bc <lcd_event_process+0x3c4>)
 80036a6:	f023 f8e9 	bl	802687c <puts>
				return (-1);		// some kindof error
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036ae:	e6d4      	b.n	800345a <lcd_event_process+0x62>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 80036b0:	4843      	ldr	r0, [pc, #268]	; (80037c0 <lcd_event_process+0x3c8>)
 80036b2:	f023 f8e3 	bl	802687c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80036b6:	f7ff fe4d 	bl	8003354 <getlcdpage>
				return (-1);		// some kindof error
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036be:	e6cc      	b.n	800345a <lcd_event_process+0x62>
					printf("Invalid waveform ID\n");
 80036c0:	4840      	ldr	r0, [pc, #256]	; (80037c4 <lcd_event_process+0x3cc>)
 80036c2:	f023 f8db 	bl	802687c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80036c6:	f7ff fe45 	bl	8003354 <getlcdpage>
				return (-1);		// some kindof error
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036ce:	e6c4      	b.n	800345a <lcd_event_process+0x62>
					if (http_downloading == NXT_LOADING) {	// return code 0x05 is good - block rcv'd
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <lcd_event_process+0x3d0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d121      	bne.n	800371c <lcd_event_process+0x324>
						nxt_blocksacked++;
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <lcd_event_process+0x3d4>)
					return (0);
 80036da:	2000      	movs	r0, #0
						nxt_blocksacked++;
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e6ba      	b.n	800345a <lcd_event_process+0x62>
					printf("Invalid Component ID\n");
 80036e4:	483a      	ldr	r0, [pc, #232]	; (80037d0 <lcd_event_process+0x3d8>)
 80036e6:	f023 f8c9 	bl	802687c <puts>
					return (0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	e6b5      	b.n	800345a <lcd_event_process+0x62>
					printf("Successful execution\n");
 80036ee:	4839      	ldr	r0, [pc, #228]	; (80037d4 <lcd_event_process+0x3dc>)
 80036f0:	f023 f8c4 	bl	802687c <puts>
					return (0);
 80036f4:	2000      	movs	r0, #0
 80036f6:	e6b0      	b.n	800345a <lcd_event_process+0x62>
					printf("Invalid command\n");
 80036f8:	4837      	ldr	r0, [pc, #220]	; (80037d8 <lcd_event_process+0x3e0>)
 80036fa:	f023 f8bf 	bl	802687c <puts>
				return (-1);		// some kindof error
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003702:	e6aa      	b.n	800345a <lcd_event_process+0x62>
		return (0xffffffff);
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	e752      	b.n	80035b0 <lcd_event_process+0x1b8>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 800370a:	7860      	ldrb	r0, [r4, #1]
 800370c:	f7ff fcc6 	bl	800309c <lcd_pagechange>
 8003710:	4603      	mov	r3, r0
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <lcd_event_process+0x3e4>)
			return (0);
 8003714:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8003716:	b2db      	uxtb	r3, r3
 8003718:	7013      	strb	r3, [r2, #0]
 800371a:	e69e      	b.n	800345a <lcd_event_process+0x62>
						printf("NXT Error 0x05\n");
 800371c:	4830      	ldr	r0, [pc, #192]	; (80037e0 <lcd_event_process+0x3e8>)
 800371e:	f023 f8ad 	bl	802687c <puts>
					return (0);
 8003722:	2000      	movs	r0, #0
 8003724:	e699      	b.n	800345a <lcd_event_process+0x62>
					if (eventbuffer[3] == 1) 		// sound on
 8003726:	78e3      	ldrb	r3, [r4, #3]
 8003728:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <lcd_event_process+0x3ec>)
 800372a:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 800372e:	482e      	ldr	r0, [pc, #184]	; (80037e8 <lcd_event_process+0x3f0>)
					if (eventbuffer[3] == 1) 		// sound on
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8003738:	f023 f8a0 	bl	802687c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 800373c:	7863      	ldrb	r3, [r4, #1]
 800373e:	2b04      	cmp	r3, #4
 8003740:	f47f af15 	bne.w	800356e <lcd_event_process+0x176>
 8003744:	78a3      	ldrb	r3, [r4, #2]
 8003746:	e754      	b.n	80035f2 <lcd_event_process+0x1fa>
					lcdbright = eventbuffer[3];
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <lcd_event_process+0x3f4>)
 800374a:	78e2      	ldrb	r2, [r4, #3]
 800374c:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2a0d      	cmp	r2, #13
 8003752:	dc01      	bgt.n	8003758 <lcd_event_process+0x360>
						lcdbright = 14;		// prevent black
 8003754:	220e      	movs	r2, #14
 8003756:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8003758:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 800375a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800375e:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <lcd_event_process+0x3f8>)
	sprintf(buffer, "%s=%lu", id, value);
 8003760:	a804      	add	r0, sp, #16
 8003762:	2b63      	cmp	r3, #99	; 0x63
	dimtimer = DIMTIME;
 8003764:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003766:	bf28      	it	cs
 8003768:	2363      	movcs	r3, #99	; 0x63
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <lcd_event_process+0x3fc>)
 800376c:	4922      	ldr	r1, [pc, #136]	; (80037f8 <lcd_event_process+0x400>)
 800376e:	f023 f9d3 	bl	8026b18 <siprintf>
	result = writelcdcmd(buffer);
 8003772:	a804      	add	r0, sp, #16
 8003774:	f7fe fd98 	bl	80022a8 <writelcdcmd>
 8003778:	9002      	str	r0, [sp, #8]
	if (result == -1) {		// wait for response
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	3301      	adds	r3, #1
 800377e:	d014      	beq.n	80037aa <lcd_event_process+0x3b2>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 7)) {		// p4 reset button
 8003780:	7863      	ldrb	r3, [r4, #1]
	return (result);
 8003782:	9a02      	ldr	r2, [sp, #8]
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 7)) {		// p4 reset button
 8003784:	2b04      	cmp	r3, #4
 8003786:	f47f aef2 	bne.w	800356e <lcd_event_process+0x176>
 800378a:	78a3      	ldrb	r3, [r4, #2]
 800378c:	e72b      	b.n	80035e6 <lcd_event_process+0x1ee>
					printf("Reboot touch\n");
 800378e:	481b      	ldr	r0, [pc, #108]	; (80037fc <lcd_event_process+0x404>)
 8003790:	f023 f874 	bl	802687c <puts>
					osDelay(100);
 8003794:	2064      	movs	r0, #100	; 0x64
 8003796:	f012 ff51 	bl	801663c <osDelay>
					rebootme();
 800379a:	f000 fa95 	bl	8003cc8 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800379e:	7863      	ldrb	r3, [r4, #1]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	f47f aee4 	bne.w	800356e <lcd_event_process+0x176>
 80037a6:	78a3      	ldrb	r3, [r4, #2]
 80037a8:	e720      	b.n	80035ec <lcd_event_process+0x1f4>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80037aa:	4815      	ldr	r0, [pc, #84]	; (8003800 <lcd_event_process+0x408>)
 80037ac:	f022 ffca 	bl	8026744 <iprintf>
 80037b0:	e7e6      	b.n	8003780 <lcd_event_process+0x388>
 80037b2:	bf00      	nop
 80037b4:	0802c05c 	.word	0x0802c05c
 80037b8:	0802c03c 	.word	0x0802c03c
 80037bc:	0802c070 	.word	0x0802c070
 80037c0:	0802bffc 	.word	0x0802bffc
 80037c4:	0802c08c 	.word	0x0802c08c
 80037c8:	200018dc 	.word	0x200018dc
 80037cc:	2000312c 	.word	0x2000312c
 80037d0:	0802c0b8 	.word	0x0802c0b8
 80037d4:	0802c0a0 	.word	0x0802c0a0
 80037d8:	0802bfec 	.word	0x0802bfec
 80037dc:	20001a88 	.word	0x20001a88
 80037e0:	0802c0d0 	.word	0x0802c0d0
 80037e4:	200002b2 	.word	0x200002b2
 80037e8:	0802c1b0 	.word	0x0802c1b0
 80037ec:	20000018 	.word	0x20000018
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	0802bd38 	.word	0x0802bd38
 80037f8:	0802bcf0 	.word	0x0802bcf0
 80037fc:	0802c1a0 	.word	0x0802c1a0
 8003800:	0802bcf8 	.word	0x0802bcf8

08003804 <lcd_getid>:
int lcd_getid(void) {
 8003804:	b510      	push	{r4, lr}
	lcd_txblocked = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	4c11      	ldr	r4, [pc, #68]	; (8003850 <lcd_getid+0x4c>)
int lcd_getid(void) {
 800380a:	b098      	sub	sp, #96	; 0x60
	lcd_txblocked = 0;
 800380c:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 800380e:	f7fe fe5f 	bl	80024d0 <lcd_clearrxbuf>
	strcpy(pkt, str);
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <lcd_getid+0x50>)
	lcdstatus = 0xff;
 8003814:	20ff      	movs	r0, #255	; 0xff
 8003816:	4910      	ldr	r1, [pc, #64]	; (8003858 <lcd_getid+0x54>)
	strcat(pkt, "\xff\xff\xff");
 8003818:	4a10      	ldr	r2, [pc, #64]	; (800385c <lcd_getid+0x58>)
	lcdstatus = 0xff;
 800381a:	7008      	strb	r0, [r1, #0]
	strcpy(pkt, str);
 800381c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003820:	9000      	str	r0, [sp, #0]
 8003822:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003824:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003826:	f8ad 1004 	strh.w	r1, [sp, #4]
	strcat(pkt, "\xff\xff\xff");
 800382a:	f8cd 0007 	str.w	r0, [sp, #7]
	return (lcd_puts(pkt));
 800382e:	4668      	mov	r0, sp
	strcpy(pkt, str);
 8003830:	f88d 3006 	strb.w	r3, [sp, #6]
	return (lcd_puts(pkt));
 8003834:	f7fe fca0 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 8003838:	3001      	adds	r0, #1
 800383a:	d005      	beq.n	8003848 <lcd_getid+0x44>
	result = lcd_getlack();		// wait for a response
 800383c:	f7ff fd5e 	bl	80032fc <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003840:	2300      	movs	r3, #0
 8003842:	6023      	str	r3, [r4, #0]
}
 8003844:	b018      	add	sp, #96	; 0x60
 8003846:	bd10      	pop	{r4, pc}
		printf("getid: Cmd failed\n\r");
 8003848:	4805      	ldr	r0, [pc, #20]	; (8003860 <lcd_getid+0x5c>)
 800384a:	f022 ff7b 	bl	8026744 <iprintf>
 800384e:	e7f5      	b.n	800383c <lcd_getid+0x38>
 8003850:	20001a90 	.word	0x20001a90
 8003854:	0802c234 	.word	0x0802c234
 8003858:	20001b3c 	.word	0x20001b3c
 800385c:	0802bbec 	.word	0x0802bbec
 8003860:	0802c23c 	.word	0x0802c23c

08003864 <lcd_putsys0>:
void lcd_putsys0(uint32_t value) {
 8003864:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 8003866:	2301      	movs	r3, #1
void lcd_putsys0(uint32_t value) {
 8003868:	b087      	sub	sp, #28
	lcd_txblocked = 1;
 800386a:	4c0b      	ldr	r4, [pc, #44]	; (8003898 <lcd_putsys0+0x34>)
	lcd_txblocked = 0;
 800386c:	2500      	movs	r5, #0
void lcd_putsys0(uint32_t value) {
 800386e:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 8003870:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 8003872:	f7fe fe2d 	bl	80024d0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <lcd_putsys0+0x38>)
 8003878:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "sys0=0x%08x", value);
 800387a:	9a01      	ldr	r2, [sp, #4]
 800387c:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 800387e:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "sys0=0x%08x", value);
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <lcd_putsys0+0x3c>)
 8003882:	f023 f949 	bl	8026b18 <siprintf>
	writelcdcmd(cmd);
 8003886:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 8003888:	6025      	str	r5, [r4, #0]
	writelcdcmd(cmd);
 800388a:	f7fe fd0d 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response (none expected)
 800388e:	f7ff fd35 	bl	80032fc <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003892:	6025      	str	r5, [r4, #0]
}
 8003894:	b007      	add	sp, #28
 8003896:	bd30      	pop	{r4, r5, pc}
 8003898:	20001a90 	.word	0x20001a90
 800389c:	20001b3c 	.word	0x20001b3c
 80038a0:	0802c274 	.word	0x0802c274

080038a4 <lcd_startdl>:
void lcd_startdl(int filesize) {
 80038a4:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 80038a6:	4c0c      	ldr	r4, [pc, #48]	; (80038d8 <lcd_startdl+0x34>)
void lcd_startdl(int filesize) {
 80038a8:	b08b      	sub	sp, #44	; 0x2c
	lcd_txblocked = 1;
 80038aa:	2501      	movs	r5, #1
void lcd_startdl(int filesize) {
 80038ac:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 80038ae:	6025      	str	r5, [r4, #0]
	lcd_clearrxbuf();
 80038b0:	f7fe fe0e 	bl	80024d0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <lcd_startdl+0x38>)
 80038b6:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 80038b8:	9a01      	ldr	r2, [sp, #4]
 80038ba:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 80038bc:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <lcd_startdl+0x3c>)
 80038c0:	f023 f92a 	bl	8026b18 <siprintf>
	lcd_txblocked = 0;
 80038c4:	2300      	movs	r3, #0
	writelcdcmd(cmd);
 80038c6:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 80038c8:	6023      	str	r3, [r4, #0]
	writelcdcmd(cmd);
 80038ca:	f7fe fced 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response
 80038ce:	f7ff fd15 	bl	80032fc <lcd_getlack>
	lcd_txblocked = 1;		// keep LCD sending blocked
 80038d2:	6025      	str	r5, [r4, #0]
}
 80038d4:	b00b      	add	sp, #44	; 0x2c
 80038d6:	bd30      	pop	{r4, r5, pc}
 80038d8:	20001a90 	.word	0x20001a90
 80038dc:	20001b3c 	.word	0x20001b3c
 80038e0:	0802c280 	.word	0x0802c280

080038e4 <lcd_starting>:

// display starting up items
lcd_starting() {
 80038e4:	b530      	push	{r4, r5, lr}
 80038e6:	b097      	sub	sp, #92	; 0x5c
	static int i = 0;
	char str[82] = { "empty" };

	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
	switch (i & 3) {
 80038e8:	4d2f      	ldr	r5, [pc, #188]	; (80039a8 <lcd_starting+0xc4>)
	char str[82] = { "empty" };
 80038ea:	224c      	movs	r2, #76	; 0x4c
 80038ec:	2100      	movs	r1, #0
 80038ee:	f10d 000a 	add.w	r0, sp, #10
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80038f2:	4c2e      	ldr	r4, [pc, #184]	; (80039ac <lcd_starting+0xc8>)
	char str[82] = { "empty" };
 80038f4:	f021 ff88 	bl	8025808 <memset>
	switch (i & 3) {
 80038f8:	682b      	ldr	r3, [r5, #0]
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80038fa:	f10d 0c04 	add.w	ip, sp, #4
	switch (i & 3) {
 80038fe:	f003 0e03 	and.w	lr, r3, #3
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800390a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800390e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
	switch (i & 3) {
 8003912:	f1be 0f02 	cmp.w	lr, #2
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003916:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800391a:	f82c 3b02 	strh.w	r3, [ip], #2
 800391e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003922:	f88c 3000 	strb.w	r3, [ip]
	switch (i & 3) {
 8003926:	d034      	beq.n	8003992 <lcd_starting+0xae>
 8003928:	f1be 0f03 	cmp.w	lr, #3
 800392c:	d026      	beq.n	800397c <lcd_starting+0x98>
 800392e:	f1be 0f01 	cmp.w	lr, #1
 8003932:	d01b      	beq.n	800396c <lcd_starting+0x88>
	case 0:
		writelcdcmd(strcat(str, ".\""));
 8003934:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <lcd_starting+0xcc>)
 8003936:	a801      	add	r0, sp, #4
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	789b      	ldrb	r3, [r3, #2]
 800393c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8003940:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8003944:	f7fe fcb0 	bl	80022a8 <writelcdcmd>
		break;
	case 3:
		writelcdcmd(strcat(str, "....\""));
		break;
	}
	i++;
 8003948:	682b      	ldr	r3, [r5, #0]
	osDelay(250);
 800394a:	20fa      	movs	r0, #250	; 0xfa
	i++;
 800394c:	3301      	adds	r3, #1
 800394e:	602b      	str	r3, [r5, #0]
	osDelay(250);
 8003950:	f012 fe74 	bl	801663c <osDelay>

	if (!(netif_is_link_up(&gnetif))) {
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <lcd_starting+0xd0>)
 8003956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395a:	075b      	lsls	r3, r3, #29
 800395c:	d501      	bpl.n	8003962 <lcd_starting+0x7e>
	writelcdcmd("ref 0");		// refresh screen

	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd("page 0");
#endif
}
 800395e:	b017      	add	sp, #92	; 0x5c
 8003960:	bd30      	pop	{r4, r5, pc}
		writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8003962:	4815      	ldr	r0, [pc, #84]	; (80039b8 <lcd_starting+0xd4>)
 8003964:	f7fe fca0 	bl	80022a8 <writelcdcmd>
}
 8003968:	b017      	add	sp, #92	; 0x5c
 800396a:	bd30      	pop	{r4, r5, pc}
		writelcdcmd(strcat(str, "..\""));
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <lcd_starting+0xd8>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 8003974:	a801      	add	r0, sp, #4
 8003976:	f7fe fc97 	bl	80022a8 <writelcdcmd>
		break;
 800397a:	e7e5      	b.n	8003948 <lcd_starting+0x64>
		writelcdcmd(strcat(str, "....\""));
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <lcd_starting+0xdc>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	889b      	ldrh	r3, [r3, #4]
 8003982:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 8003986:	a801      	add	r0, sp, #4
 8003988:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800398c:	f7fe fc8c 	bl	80022a8 <writelcdcmd>
		break;
 8003990:	e7da      	b.n	8003948 <lcd_starting+0x64>
		writelcdcmd(strcat(str, "...\""));
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <lcd_starting+0xe0>)
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 800399c:	a801      	add	r0, sp, #4
 800399e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 80039a2:	f7fe fc81 	bl	80022a8 <writelcdcmd>
		break;
 80039a6:	e7cf      	b.n	8003948 <lcd_starting+0x64>
 80039a8:	20001a70 	.word	0x20001a70
 80039ac:	0802c298 	.word	0x0802c298
 80039b0:	0802c2c8 	.word	0x0802c2c8
 80039b4:	2000359c 	.word	0x2000359c
 80039b8:	0802c2e0 	.word	0x0802c2e0
 80039bc:	0802c2cc 	.word	0x0802c2cc
 80039c0:	0802c2d8 	.word	0x0802c2d8
 80039c4:	0802c2d0 	.word	0x0802c2d0

080039c8 <init_nextion>:

init_nextion() {
	int i;
	char str[82] = { "empty" };
 80039c8:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <init_nextion+0xe0>)
 80039ca:	224c      	movs	r2, #76	; 0x4c
init_nextion() {
 80039cc:	b570      	push	{r4, r5, r6, lr}
	char str[82] = { "empty" };
 80039ce:	e893 0003 	ldmia.w	r3, {r0, r1}
init_nextion() {
 80039d2:	b0b0      	sub	sp, #192	; 0xc0

	lcduart_error = HAL_UART_ERROR_NONE;
 80039d4:	2400      	movs	r4, #0
 80039d6:	4e35      	ldr	r6, [pc, #212]	; (8003aac <init_nextion+0xe4>)
	char str[82] = { "empty" };
 80039d8:	9003      	str	r0, [sp, #12]
 80039da:	f10d 0012 	add.w	r0, sp, #18
 80039de:	f8ad 1010 	strh.w	r1, [sp, #16]
 80039e2:	4621      	mov	r1, r4
 80039e4:	f021 ff10 	bl	8025808 <memset>

	lcd_init(230400);
 80039e8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
	osDelay(300);
	lcd_txblocked = 0;
 80039ec:	4d30      	ldr	r5, [pc, #192]	; (8003ab0 <init_nextion+0xe8>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80039ee:	6034      	str	r4, [r6, #0]
	lcd_init(230400);
 80039f0:	f7ff fbac 	bl	800314c <lcd_init>
	osDelay(300);
 80039f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039f8:	f012 fe20 	bl	801663c <osDelay>
	writelcdcmd("cls BLACK");
 80039fc:	482d      	ldr	r0, [pc, #180]	; (8003ab4 <init_nextion+0xec>)
	lcd_txblocked = 0;
 80039fe:	602c      	str	r4, [r5, #0]
	writelcdcmd("cls BLACK");
 8003a00:	f7fe fc52 	bl	80022a8 <writelcdcmd>
	osDelay(300);
 8003a04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a08:	f012 fe18 	bl	801663c <osDelay>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8003a0c:	f242 7334 	movw	r3, #10036	; 0x2734
 8003a10:	4622      	mov	r2, r4
 8003a12:	4929      	ldr	r1, [pc, #164]	; (8003ab8 <init_nextion+0xf0>)
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	a803      	add	r0, sp, #12
 8003a18:	2314      	movs	r3, #20
 8003a1a:	f023 f87d 	bl	8026b18 <siprintf>
	BUILD);
	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd(str);
 8003a1e:	a803      	add	r0, sp, #12
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a20:	6034      	str	r4, [r6, #0]
	writelcdcmd(str);
 8003a22:	f7fe fc41 	bl	80022a8 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;

	osDelay(500);
 8003a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a2a:	6034      	str	r4, [r6, #0]
	osDelay(500);
 8003a2c:	f012 fe06 	bl	801663c <osDelay>
	lcd_txblocked = 0;
 8003a30:	602c      	str	r4, [r5, #0]
	lcd_clearrxbuf();
 8003a32:	f7fe fd4d 	bl	80024d0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003a36:	4c21      	ldr	r4, [pc, #132]	; (8003abc <init_nextion+0xf4>)
	strcpy(pkt, str);
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <init_nextion+0xf8>)
	lcdstatus = 0xff;
 8003a3a:	21ff      	movs	r1, #255	; 0xff
	strcat(pkt, "\xff\xff\xff");
 8003a3c:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <init_nextion+0xfc>)
	lcdstatus = 0xff;
 8003a3e:	7021      	strb	r1, [r4, #0]
	strcpy(pkt, str);
 8003a40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a44:	9018      	str	r0, [sp, #96]	; 0x60
 8003a46:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003a48:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003a4a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
	strcat(pkt, "\xff\xff\xff");
 8003a4e:	f8cd 0067 	str.w	r0, [sp, #103]	; 0x67
	return (lcd_puts(pkt));
 8003a52:	a818      	add	r0, sp, #96	; 0x60
	strcpy(pkt, str);
 8003a54:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
	return (lcd_puts(pkt));
 8003a58:	f7fe fb8e 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d01a      	beq.n	8003a96 <init_nextion+0xce>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a60:	2600      	movs	r6, #0
	result = lcd_getlack();		// wait for a response
 8003a62:	f7ff fc4b 	bl	80032fc <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a66:	602e      	str	r6, [r5, #0]
	lcd_getid();		// in the background
	processnex();
 8003a68:	f7ff fba2 	bl	80031b0 <processnex>

	osDelay(100);
 8003a6c:	2064      	movs	r0, #100	; 0x64
 8003a6e:	f012 fde5 	bl	801663c <osDelay>
	lcd_txblocked = 0;
 8003a72:	602e      	str	r6, [r5, #0]
	lcd_clearrxbuf();
 8003a74:	f7fe fd2c 	bl	80024d0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003a78:	23ff      	movs	r3, #255	; 0xff
	result = writelcdcmd("get sys0");
 8003a7a:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <init_nextion+0x100>)
	lcdstatus = 0xff;
 8003a7c:	7023      	strb	r3, [r4, #0]
	result = writelcdcmd("get sys0");
 8003a7e:	f7fe fc13 	bl	80022a8 <writelcdcmd>
	if (result == -1) {		// send err
 8003a82:	3001      	adds	r0, #1
 8003a84:	d00b      	beq.n	8003a9e <init_nextion+0xd6>
	result = lcd_getlack();		// wait for a response
 8003a86:	f7ff fc39 	bl	80032fc <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	602b      	str	r3, [r5, #0]
	lcd_getsys0();
	processnex();
 8003a8e:	f7ff fb8f 	bl	80031b0 <processnex>

}
 8003a92:	b030      	add	sp, #192	; 0xc0
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
		printf("getid: Cmd failed\n\r");
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <init_nextion+0x104>)
 8003a98:	f022 fe54 	bl	8026744 <iprintf>
 8003a9c:	e7e0      	b.n	8003a60 <init_nextion+0x98>
		printf("getsys0: Cmd failed\n\r");
 8003a9e:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <init_nextion+0x108>)
 8003aa0:	f022 fe50 	bl	8026744 <iprintf>
 8003aa4:	e7ef      	b.n	8003a86 <init_nextion+0xbe>
 8003aa6:	bf00      	nop
 8003aa8:	0802a7b8 	.word	0x0802a7b8
 8003aac:	20001b40 	.word	0x20001b40
 8003ab0:	20001a90 	.word	0x20001a90
 8003ab4:	0802c31c 	.word	0x0802c31c
 8003ab8:	0802c328 	.word	0x0802c328
 8003abc:	20001b3c 	.word	0x20001b3c
 8003ac0:	0802c234 	.word	0x0802c234
 8003ac4:	0802bbec 	.word	0x0802bbec
 8003ac8:	0802c250 	.word	0x0802c250
 8003acc:	0802c23c 	.word	0x0802c23c
 8003ad0:	0802c25c 	.word	0x0802c25c

08003ad4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003ad4:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2107      	movs	r1, #7
 8003ada:	2026      	movs	r0, #38	; 0x26
 8003adc:	f006 f89e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ae0:	2026      	movs	r0, #38	; 0x26
 8003ae2:	f006 f8e5 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2106      	movs	r1, #6
 8003aea:	2047      	movs	r0, #71	; 0x47
 8003aec:	f006 f896 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003af0:	2047      	movs	r0, #71	; 0x47
 8003af2:	f006 f8dd 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2106      	movs	r1, #6
 8003afa:	2012      	movs	r0, #18
 8003afc:	f006 f88e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b00:	2012      	movs	r0, #18
 8003b02:	f006 f8d5 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2106      	movs	r1, #6
 8003b0a:	2028      	movs	r0, #40	; 0x28
 8003b0c:	f006 f886 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b10:	2028      	movs	r0, #40	; 0x28
 8003b12:	f006 f8cd 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003b16:	202d      	movs	r0, #45	; 0x2d
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	f006 f87e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003b20:	202d      	movs	r0, #45	; 0x2d
}
 8003b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003b26:	f006 b8c3 	b.w	8009cb0 <HAL_NVIC_EnableIRQ>
 8003b2a:	bf00      	nop

08003b2c <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <netif_status_callbk_fn+0x8>)
 8003b2e:	f022 bea5 	b.w	802687c <puts>
 8003b32:	bf00      	nop
 8003b34:	0802c378 	.word	0x0802c378

08003b38 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <Callback01+0x8>)
 8003b3a:	f022 be9f 	b.w	802687c <puts>
 8003b3e:	bf00      	nop
 8003b40:	0802c390 	.word	0x0802c390

08003b44 <_write>:
	if (file == 1) {
 8003b44:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b48:	460c      	mov	r4, r1
 8003b4a:	4617      	mov	r7, r2
	if (file == 1) {
 8003b4c:	d00e      	beq.n	8003b6c <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	dd0a      	ble.n	8003b68 <_write+0x24>
 8003b52:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8003b54:	4d0b      	ldr	r5, [pc, #44]	; (8003b84 <_write+0x40>)
 8003b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4628      	mov	r0, r5
 8003b60:	f010 fa78 	bl	8014054 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d1f6      	bne.n	8003b56 <_write+0x12>
}
 8003b68:	4638      	mov	r0, r7
 8003b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	ddfb      	ble.n	8003b68 <_write+0x24>
 8003b70:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8003b72:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003b76:	f001 feb7 	bl	80058e8 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b7a:	42ac      	cmp	r4, r5
 8003b7c:	d1f9      	bne.n	8003b72 <_write+0x2e>
}
 8003b7e:	4638      	mov	r0, r7
 8003b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20002bc4 	.word	0x20002bc4

08003b88 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003b8a:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003b8c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <crc_rom+0x4c>)
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <crc_rom+0x50>)
 8003b94:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003b96:	bf2c      	ite	cs
 8003b98:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8003b9c:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003ba0:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 8003ba6:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003ba8:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 8003baa:	460c      	mov	r4, r1
crc_rom() {
 8003bac:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	f7fd f818 	bl	8000be8 <xcrc32>
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003bb8:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003bba:	4601      	mov	r1, r0
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4807      	ldr	r0, [pc, #28]	; (8003bdc <crc_rom+0x54>)
}
 8003bc0:	b002      	add	sp, #8
 8003bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003bc6:	f022 bdbd 	b.w	8026744 <iprintf>
 8003bca:	bf00      	nop
 8003bcc:	08003ad5 	.word	0x08003ad5
 8003bd0:	200006f4 	.word	0x200006f4
 8003bd4:	08047e6c 	.word	0x08047e6c
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	0802c39c 	.word	0x0802c39c

08003be0 <err_leds>:
err_leds(int why) {
 8003be0:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003be2:	4e37      	ldr	r6, [pc, #220]	; (8003cc0 <err_leds+0xe0>)
err_leds(int why) {
 8003be4:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003be6:	4d37      	ldr	r5, [pc, #220]	; (8003cc4 <err_leds+0xe4>)
 8003be8:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003bea:	2c07      	cmp	r4, #7
 8003bec:	d80f      	bhi.n	8003c0e <err_leds+0x2e>
 8003bee:	e8df f004 	tbb	[pc, r4]
 8003bf2:	5c51      	.short	0x5c51
 8003bf4:	25303b46 	.word	0x25303b46
 8003bf8:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f009 f950 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f009 f94b 	bl	800cea4 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	9b01      	ldr	r3, [sp, #4]
 8003c14:	42ab      	cmp	r3, r5
 8003c16:	dae8      	bge.n	8003bea <err_leds+0xa>
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	42ab      	cmp	r3, r5
 8003c22:	dbf9      	blt.n	8003c18 <err_leds+0x38>
 8003c24:	e7e1      	b.n	8003bea <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c26:	4630      	mov	r0, r6
 8003c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c2c:	f009 f93a 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c34:	4630      	mov	r0, r6
 8003c36:	f009 f935 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003c3a:	e7e8      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c42:	f009 f92f 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f009 f92a 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003c50:	e7dd      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003c52:	4630      	mov	r0, r6
 8003c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c58:	f009 f924 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c60:	4630      	mov	r0, r6
 8003c62:	f009 f91f 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003c66:	e7d2      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c6e:	f009 f919 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c76:	4630      	mov	r0, r6
 8003c78:	f009 f914 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003c7c:	e7c7      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c84:	f009 f90e 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f009 f909 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003c92:	e7bc      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003c94:	4630      	mov	r0, r6
 8003c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c9a:	f009 f903 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f009 f8fe 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003ca8:	e7b1      	b.n	8003c0e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003caa:	4630      	mov	r0, r6
 8003cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cb0:	f009 f8f8 	bl	800cea4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f009 f8f3 	bl	800cea4 <HAL_GPIO_TogglePin>
			break;
 8003cbe:	e7a6      	b.n	8003c0e <err_leds+0x2e>
 8003cc0:	40020c00 	.word	0x40020c00
 8003cc4:	003567e0 	.word	0x003567e0

08003cc8 <rebootme>:
void rebootme(int why) {
 8003cc8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cca:	b672      	cpsid	i
		err_leds(why);
 8003ccc:	f7ff ff88 	bl	8003be0 <err_leds>

08003cd0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003cd0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003cd4:	074a      	lsls	r2, r1, #29
 8003cd6:	d502      	bpl.n	8003cde <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003cd8:	4809      	ldr	r0, [pc, #36]	; (8003d00 <netif_link_callbk_fn+0x30>)
 8003cda:	f022 bd33 	b.w	8026744 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8003ce2:	4808      	ldr	r0, [pc, #32]	; (8003d04 <netif_link_callbk_fn+0x34>)
 8003ce4:	f022 fd2e 	bl	8026744 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003ce8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003cec:	075b      	lsls	r3, r3, #29
 8003cee:	d500      	bpl.n	8003cf2 <netif_link_callbk_fn+0x22>
}
 8003cf0:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8003cf2:	4805      	ldr	r0, [pc, #20]	; (8003d08 <netif_link_callbk_fn+0x38>)
 8003cf4:	f022 fdc2 	bl	802687c <puts>
			rebootme(1);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff ffe5 	bl	8003cc8 <rebootme>
 8003cfe:	bf00      	nop
 8003d00:	0802c3c8 	.word	0x0802c3c8
 8003d04:	0802c3e8 	.word	0x0802c3e8
 8003d08:	0802c408 	.word	0x0802c408

08003d0c <StarLPTask>:
	char str[82] = { "empty" };
 8003d0c:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <StarLPTask+0x198>)
 8003d0e:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003d14:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003d18:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d1a:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8003f00 <StarLPTask+0x1f4>
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d1e:	4e62      	ldr	r6, [pc, #392]	; (8003ea8 <StarLPTask+0x19c>)
	char str[82] = { "empty" };
 8003d20:	9009      	str	r0, [sp, #36]	; 0x24
 8003d22:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8003d26:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f021 fd6c 	bl	8025808 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d30:	2200      	movs	r2, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d32:	2101      	movs	r1, #1
 8003d34:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d36:	f8c9 2078 	str.w	r2, [r9, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003d3a:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003d3e:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d42:	f012 ff73 	bl	8016c2c <xQueueGenericCreate>
 8003d46:	6030      	str	r0, [r6, #0]
	if (consolerxq == NULL) {
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	f000 845b 	beq.w	8004604 <StarLPTask+0x8f8>
	strcpy(udp_target, SERVER_DESTINATION);
 8003d4e:	4c57      	ldr	r4, [pc, #348]	; (8003eac <StarLPTask+0x1a0>)
 8003d50:	4f57      	ldr	r7, [pc, #348]	; (8003eb0 <StarLPTask+0x1a4>)
	if (http_downloading) {		// don't go further
 8003d52:	4d58      	ldr	r5, [pc, #352]	; (8003eb4 <StarLPTask+0x1a8>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d56:	6038      	str	r0, [r7, #0]
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	6079      	str	r1, [r7, #4]
 8003d5e:	60ba      	str	r2, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003d60:	2201      	movs	r2, #1
 8003d62:	4955      	ldr	r1, [pc, #340]	; (8003eb8 <StarLPTask+0x1ac>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003d64:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003d66:	4855      	ldr	r0, [pc, #340]	; (8003ebc <StarLPTask+0x1b0>)
 8003d68:	f010 fb92 	bl	8014490 <HAL_UART_Receive_IT>
	osDelay(10);
 8003d6c:	200a      	movs	r0, #10
 8003d6e:	f012 fc65 	bl	801663c <osDelay>
	if (http_downloading) {		// don't go further
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 83db 	bne.w	8004530 <StarLPTask+0x824>
	while (main_init_done == 0) {
 8003d7a:	4c51      	ldr	r4, [pc, #324]	; (8003ec0 <StarLPTask+0x1b4>)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	b943      	cbnz	r3, 8003d92 <StarLPTask+0x86>
		HAL_IWDG_Refresh(&hiwdg);
 8003d80:	4d50      	ldr	r5, [pc, #320]	; (8003ec4 <StarLPTask+0x1b8>)
		lcd_starting();
 8003d82:	f7ff fdaf 	bl	80038e4 <lcd_starting>
		HAL_IWDG_Refresh(&hiwdg);
 8003d86:	4628      	mov	r0, r5
 8003d88:	f009 fef6 	bl	800db78 <HAL_IWDG_Refresh>
	while (main_init_done == 0) {
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f7      	beq.n	8003d82 <StarLPTask+0x76>
	int last3min = 0;
 8003d92:	2300      	movs	r3, #0
	writelcdcmd("page 0");		// redraw page0
 8003d94:	484c      	ldr	r0, [pc, #304]	; (8003ec8 <StarLPTask+0x1bc>)
	int last3min = 0;
 8003d96:	461d      	mov	r5, r3
 8003d98:	9307      	str	r3, [sp, #28]
	writelcdcmd("page 0");		// redraw page0
 8003d9a:	f7fe fa85 	bl	80022a8 <writelcdcmd>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003d9e:	484b      	ldr	r0, [pc, #300]	; (8003ecc <StarLPTask+0x1c0>)
 8003da0:	f00c fce4 	bl	801076c <HAL_TIM_Base_Start>
	uint16_t onesectimer = 0;
 8003da4:	462f      	mov	r7, r5
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <StarLPTask+0x1c4>)
 8003da8:	2201      	movs	r2, #1
	gainchanged = 0;
 8003daa:	9506      	str	r5, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003dac:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003dae:	4845      	ldr	r0, [pc, #276]	; (8003ec4 <StarLPTask+0x1b8>)
		tenmstimer++;
 8003db0:	3501      	adds	r5, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003db2:	f009 fee1 	bl	800db78 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003db6:	200a      	movs	r0, #10
 8003db8:	f012 fc40 	bl	801663c <osDelay>
		globaladcnoise = abs(meanwindiff);
 8003dbc:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <StarLPTask+0x1c8>)
 8003dbe:	4a46      	ldr	r2, [pc, #280]	; (8003ed8 <StarLPTask+0x1cc>)
		tenmstimer++;
 8003dc0:	b2ad      	uxth	r5, r5
		globaladcnoise = abs(meanwindiff);
 8003dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfb8      	it	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003dd0:	09db      	lsrs	r3, r3, #7
 8003dd2:	4a42      	ldr	r2, [pc, #264]	; (8003edc <StarLPTask+0x1d0>)
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	8013      	strh	r3, [r2, #0]
		if (sigsuppress) {
 8003dd8:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <StarLPTask+0x1d4>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	b10b      	cbz	r3, 8003de2 <StarLPTask+0xd6>
			sigsuppress--;		// decrement trigger suppression counter
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6013      	str	r3, [r2, #0]
				gpsfake = (gpsfake) ? 0 : 1;
 8003de2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8003f04 <StarLPTask+0x1f8>
				printf("Fake GPS lock and UDP freeze is ");
 8003de6:	f8df b120 	ldr.w	fp, [pc, #288]	; 8003f08 <StarLPTask+0x1fc>
					printf("OFF\n");
 8003dea:	f8df a120 	ldr.w	sl, [pc, #288]	; 8003f0c <StarLPTask+0x200>
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8003dee:	2200      	movs	r2, #0
 8003df0:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003df4:	6830      	ldr	r0, [r6, #0]
 8003df6:	f013 f91d 	bl	8017034 <xQueueReceive>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	f000 8088 	beq.w	8003f10 <StarLPTask+0x204>
			if (inch == 0x07) {  // control G
 8003e00:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003e04:	2807      	cmp	r0, #7
 8003e06:	d032      	beq.n	8003e6e <StarLPTask+0x162>
			if (inch == 0x06) {  // control F
 8003e08:	2806      	cmp	r0, #6
 8003e0a:	d027      	beq.n	8003e5c <StarLPTask+0x150>
			if (inch == 0x03) {		// control C,  AGC man/auto
 8003e0c:	2803      	cmp	r0, #3
 8003e0e:	d012      	beq.n	8003e36 <StarLPTask+0x12a>
			if ((isdigit(inch)) && (agc == 0)) {
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <StarLPTask+0x1d8>)
 8003e12:	5cc3      	ldrb	r3, [r0, r3]
 8003e14:	075b      	lsls	r3, r3, #29
 8003e16:	d502      	bpl.n	8003e1e <StarLPTask+0x112>
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <StarLPTask+0x1dc>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b113      	cbz	r3, 8003e24 <StarLPTask+0x118>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 8003e1e:	f001 fd63 	bl	80058e8 <__io_putchar>
 8003e22:	e7e4      	b.n	8003dee <StarLPTask+0xe2>
				setpgagain(inch - '0');
 8003e24:	3830      	subs	r0, #48	; 0x30
 8003e26:	f002 fda3 	bl	8006970 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8003e2a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003e2e:	482f      	ldr	r0, [pc, #188]	; (8003eec <StarLPTask+0x1e0>)
 8003e30:	f022 fc88 	bl	8026744 <iprintf>
 8003e34:	e7db      	b.n	8003dee <StarLPTask+0xe2>
				agc = (agc) ? 0 : 1;
 8003e36:	4c2c      	ldr	r4, [pc, #176]	; (8003ee8 <StarLPTask+0x1dc>)
				printf("AGC is ");
 8003e38:	482d      	ldr	r0, [pc, #180]	; (8003ef0 <StarLPTask+0x1e4>)
				agc = (agc) ? 0 : 1;
 8003e3a:	8823      	ldrh	r3, [r4, #0]
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	8023      	strh	r3, [r4, #0]
				printf("AGC is ");
 8003e44:	f022 fc7e 	bl	8026744 <iprintf>
				if (agc) {
 8003e48:	8823      	ldrh	r3, [r4, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 814f 	beq.w	80040ee <StarLPTask+0x3e2>
					printf("ON\n");
 8003e50:	4828      	ldr	r0, [pc, #160]	; (8003ef4 <StarLPTask+0x1e8>)
 8003e52:	f022 fd13 	bl	802687c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003e56:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003e5a:	e7d9      	b.n	8003e10 <StarLPTask+0x104>
				printf("UDP freeze is off\n");
 8003e5c:	4826      	ldr	r0, [pc, #152]	; (8003ef8 <StarLPTask+0x1ec>)
 8003e5e:	f022 fd0d 	bl	802687c <puts>
				globalfreeze = 0;
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <StarLPTask+0x1f0>)
 8003e64:	2200      	movs	r2, #0
			if (inch == 0x03) {		// control C,  AGC man/auto
 8003e66:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
				globalfreeze = 0;
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e7ce      	b.n	8003e0c <StarLPTask+0x100>
				gpsfake = (gpsfake) ? 0 : 1;
 8003e6e:	f8b8 3000 	ldrh.w	r3, [r8]
				printf("Fake GPS lock and UDP freeze is ");
 8003e72:	4658      	mov	r0, fp
				gpsfake = (gpsfake) ? 0 : 1;
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	f8a8 3000 	strh.w	r3, [r8]
				printf("Fake GPS lock and UDP freeze is ");
 8003e7e:	f022 fc61 	bl	8026744 <iprintf>
				if (gpsfake) {
 8003e82:	f8b8 3000 	ldrh.w	r3, [r8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8137 	beq.w	80040fa <StarLPTask+0x3ee>
					printf("ON\n");
 8003e8c:	4819      	ldr	r0, [pc, #100]	; (8003ef4 <StarLPTask+0x1e8>)
 8003e8e:	f022 fcf5 	bl	802687c <puts>
					globalfreeze |= 2;
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <StarLPTask+0x1f0>)
			if (inch == 0x06) {  // control F
 8003e94:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
					globalfreeze |= 2;
 8003e98:	6813      	ldr	r3, [r2, #0]
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e7b2      	b.n	8003e08 <StarLPTask+0xfc>
 8003ea2:	bf00      	nop
 8003ea4:	0802a80c 	.word	0x0802a80c
 8003ea8:	20002188 	.word	0x20002188
 8003eac:	0802b6f4 	.word	0x0802b6f4
 8003eb0:	20003530 	.word	0x20003530
 8003eb4:	200018dc 	.word	0x200018dc
 8003eb8:	20002184 	.word	0x20002184
 8003ebc:	20002a38 	.word	0x20002a38
 8003ec0:	20002de4 	.word	0x20002de4
 8003ec4:	2000268c 	.word	0x2000268c
 8003ec8:	0802bed4 	.word	0x0802bed4
 8003ecc:	200029ec 	.word	0x200029ec
 8003ed0:	20002de0 	.word	0x20002de0
 8003ed4:	20000780 	.word	0x20000780
 8003ed8:	20000730 	.word	0x20000730
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	200007a0 	.word	0x200007a0
 8003ee4:	08047579 	.word	0x08047579
 8003ee8:	2000004e 	.word	0x2000004e
 8003eec:	0802c4b4 	.word	0x0802c4b4
 8003ef0:	0802c4ac 	.word	0x0802c4ac
 8003ef4:	0802c490 	.word	0x0802c490
 8003ef8:	0802c498 	.word	0x0802c498
 8003efc:	200034a4 	.word	0x200034a4
 8003f00:	2000303c 	.word	0x2000303c
 8003f04:	20002194 	.word	0x20002194
 8003f08:	0802c46c 	.word	0x0802c46c
 8003f0c:	0802c494 	.word	0x0802c494
		if (!(ledsenabled)) {
 8003f10:	4bae      	ldr	r3, [pc, #696]	; (80041cc <StarLPTask+0x4c0>)
 8003f12:	4604      	mov	r4, r0
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80fa 	beq.w	8004110 <StarLPTask+0x404>
		} else if (ledhang) {	// trigger led
 8003f1c:	4aac      	ldr	r2, [pc, #688]	; (80041d0 <StarLPTask+0x4c4>)
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80f5 	beq.w	8004110 <StarLPTask+0x404>
			ledhang--;
 8003f26:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f2c:	48a9      	ldr	r0, [pc, #676]	; (80041d4 <StarLPTask+0x4c8>)
			ledhang--;
 8003f2e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003f30:	2201      	movs	r2, #1
 8003f32:	f008 ff9d 	bl	800ce70 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8003f36:	49a8      	ldr	r1, [pc, #672]	; (80041d8 <StarLPTask+0x4cc>)
 8003f38:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8003f3c:	680b      	ldr	r3, [r1, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	f040 80f3 	bne.w	800412a <StarLPTask+0x41e>
		processnex();		// process Nextion
 8003f44:	f7ff f934 	bl	80031b0 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8003f48:	4aa4      	ldr	r2, [pc, #656]	; (80041dc <StarLPTask+0x4d0>)
 8003f4a:	1ceb      	adds	r3, r5, #3
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	4aa3      	ldr	r2, [pc, #652]	; (80041e0 <StarLPTask+0x4d4>)
 8003f52:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8003f56:	d31e      	bcc.n	8003f96 <StarLPTask+0x28a>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8003f58:	4ca2      	ldr	r4, [pc, #648]	; (80041e4 <StarLPTask+0x4d8>)
 8003f5a:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f103 0219 	add.w	r2, r3, #25
 8003f64:	4291      	cmp	r1, r2
 8003f66:	f200 8232 	bhi.w	80043ce <StarLPTask+0x6c2>
				if (jabbertimeout) {
 8003f6a:	4a9f      	ldr	r2, [pc, #636]	; (80041e8 <StarLPTask+0x4dc>)
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	b10b      	cbz	r3, 8003f74 <StarLPTask+0x268>
					jabbertimeout--;		// de-arm count
 8003f70:	3b01      	subs	r3, #1
 8003f72:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003f74:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8003f78:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8003f7a:	9b06      	ldr	r3, [sp, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8248 	beq.w	8004412 <StarLPTask+0x706>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003f82:	4b9a      	ldr	r3, [pc, #616]	; (80041ec <StarLPTask+0x4e0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 81f7 	beq.w	800437a <StarLPTask+0x66e>
 8003f8c:	4b98      	ldr	r3, [pc, #608]	; (80041f0 <StarLPTask+0x4e4>)
			} else if (lcd_currentpage == 1) {
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f000 8295 	beq.w	80044c0 <StarLPTask+0x7b4>
				lcd_showvars();
 8003f96:	4a97      	ldr	r2, [pc, #604]	; (80041f4 <StarLPTask+0x4e8>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003f98:	f105 030b 	add.w	r3, r5, #11
				lcd_showvars();
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003fa0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003faa:	f080 8100 	bcs.w	80041ae <StarLPTask+0x4a2>
			lcd_trigplot();		// update lcd trigger and noise plots
 8003fae:	4a91      	ldr	r2, [pc, #580]	; (80041f4 <StarLPTask+0x4e8>)
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8003fb0:	f105 0332 	add.w	r3, r5, #50	; 0x32
			lcd_trigplot();		// update lcd trigger and noise plots
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8003fb8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003fc2:	f080 80f1 	bcs.w	80041a8 <StarLPTask+0x49c>
			lcd_gps();		// display the GPS on the LCD page 0
 8003fc6:	4a8c      	ldr	r2, [pc, #560]	; (80041f8 <StarLPTask+0x4ec>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003fc8:	f105 031b 	add.w	r3, r5, #27
			lcd_gps();		// display the GPS on the LCD page 0
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003fd0:	4a8a      	ldr	r2, [pc, #552]	; (80041fc <StarLPTask+0x4f0>)
 8003fd2:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8003fd6:	d31d      	bcc.n	8004014 <StarLPTask+0x308>
			if (agc) {
 8003fd8:	4b89      	ldr	r3, [pc, #548]	; (8004200 <StarLPTask+0x4f4>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 822b 	beq.w	8004438 <StarLPTask+0x72c>
				trigsin10sec = trigs - prevtrigs;
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <StarLPTask+0x4cc>)
 8003fe4:	4c87      	ldr	r4, [pc, #540]	; (8004204 <StarLPTask+0x4f8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003fe6:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8004234 <StarLPTask+0x528>
				trigsin10sec = trigs - prevtrigs;
 8003fea:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003fec:	f8b8 1000 	ldrh.w	r1, [r8]
				trigsin10sec = trigs - prevtrigs;
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	f8df a274 	ldr.w	sl, [pc, #628]	; 8004268 <StarLPTask+0x55c>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003ff6:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8003ff8:	eba2 0303 	sub.w	r3, r2, r3
 8003ffc:	f8ca 3000 	str.w	r3, [sl]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8004000:	d802      	bhi.n	8004008 <StarLPTask+0x2fc>
					if (trigsin10sec < MINTRIGS10S)
 8004002:	2b01      	cmp	r3, #1
 8004004:	f240 828a 	bls.w	800451c <StarLPTask+0x810>
				if (trigsin10sec > MAXTRIGS10S)
 8004008:	2b0a      	cmp	r3, #10
 800400a:	f200 825c 	bhi.w	80044c6 <StarLPTask+0x7ba>
			gainchanged = 0;
 800400e:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8004010:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8004012:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8004014:	f640 338c 	movw	r3, #2956	; 0xb8c
 8004018:	429d      	cmp	r5, r3
 800401a:	d945      	bls.n	80040a8 <StarLPTask+0x39c>
			if (gpsgood == 0) {	// gps is not talking to us
 800401c:	4c7a      	ldr	r4, [pc, #488]	; (8004208 <StarLPTask+0x4fc>)
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 820b 	beq.w	800443c <StarLPTask+0x730>
				gpsbadcount = 0;
 8004026:	4b79      	ldr	r3, [pc, #484]	; (800420c <StarLPTask+0x500>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
			if (psensor == MPL115A2) {
 800402c:	4b78      	ldr	r3, [pc, #480]	; (8004210 <StarLPTask+0x504>)
			gpsgood = 0;			// reset the good flag
 800402e:	2200      	movs	r2, #0
			if (psensor == MPL115A2) {
 8004030:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8004032:	6022      	str	r2, [r4, #0]
			if (psensor == MPL115A2) {
 8004034:	2b01      	cmp	r3, #1
 8004036:	f000 823a 	beq.w	80044ae <StarLPTask+0x7a2>
			} else if (psensor == MPL3115A2) {
 800403a:	2b02      	cmp	r3, #2
 800403c:	f000 825b 	beq.w	80044f6 <StarLPTask+0x7ea>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8004040:	4b74      	ldr	r3, [pc, #464]	; (8004214 <StarLPTask+0x508>)
			tenmstimer = 0;
 8004042:	2500      	movs	r5, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8004044:	f8b9 105c 	ldrh.w	r1, [r9, #92]	; 0x5c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b289      	uxth	r1, r1
 800404c:	4872      	ldr	r0, [pc, #456]	; (8004218 <StarLPTask+0x50c>)
 800404e:	0e1a      	lsrs	r2, r3, #24
 8004050:	9202      	str	r2, [sp, #8]
 8004052:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004056:	9201      	str	r2, [sp, #4]
 8004058:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800405c:	b2db      	uxtb	r3, r3
 800405e:	9200      	str	r2, [sp, #0]
 8004060:	f242 7234 	movw	r2, #10036	; 0x2734
 8004064:	f022 fb6e 	bl	8026744 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 8004068:	4b6c      	ldr	r3, [pc, #432]	; (800421c <StarLPTask+0x510>)
 800406a:	4a6d      	ldr	r2, [pc, #436]	; (8004220 <StarLPTask+0x514>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	495a      	ldr	r1, [pc, #360]	; (80041d8 <StarLPTask+0x4cc>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	486b      	ldr	r0, [pc, #428]	; (8004224 <StarLPTask+0x518>)
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	4b6b      	ldr	r3, [pc, #428]	; (8004228 <StarLPTask+0x51c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	4b6a      	ldr	r3, [pc, #424]	; (800422c <StarLPTask+0x520>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	9303      	str	r3, [sp, #12]
 8004088:	4b69      	ldr	r3, [pc, #420]	; (8004230 <StarLPTask+0x524>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	4b69      	ldr	r3, [pc, #420]	; (8004234 <StarLPTask+0x528>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <StarLPTask+0x52c>)
 8004096:	f9b3 2000 	ldrsh.w	r2, [r3]
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <StarLPTask+0x530>)
 800409c:	9305      	str	r3, [sp, #20]
 800409e:	4b68      	ldr	r3, [pc, #416]	; (8004240 <StarLPTask+0x534>)
 80040a0:	6809      	ldr	r1, [r1, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 fb4e 	bl	8026744 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 80040a8:	f107 0315 	add.w	r3, r7, #21
 80040ac:	4a65      	ldr	r2, [pc, #404]	; (8004244 <StarLPTask+0x538>)
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	4a64      	ldr	r2, [pc, #400]	; (8004248 <StarLPTask+0x53c>)
 80040b6:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 80040ba:	d30a      	bcc.n	80040d2 <StarLPTask+0x3c6>
 80040bc:	9b07      	ldr	r3, [sp, #28]
 80040be:	429f      	cmp	r7, r3
 80040c0:	d007      	beq.n	80040d2 <StarLPTask+0x3c6>
			if (boosttrys > 0)	// timer for boost gain oscillating
 80040c2:	4a62      	ldr	r2, [pc, #392]	; (800424c <StarLPTask+0x540>)
 80040c4:	8813      	ldrh	r3, [r2, #0]
 80040c6:	b10b      	cbz	r3, 80040cc <StarLPTask+0x3c0>
				boosttrys--;
 80040c8:	3b01      	subs	r3, #1
 80040ca:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();	// add a point to the pressure plot
 80040cc:	f7fe ff1a 	bl	8002f04 <lcd_pressplot>
 80040d0:	9707      	str	r7, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 80040d2:	f240 3385 	movw	r3, #901	; 0x385
 80040d6:	429f      	cmp	r7, r3
 80040d8:	f47f ae69 	bne.w	8003dae <StarLPTask+0xa2>
			requestapisn();			//update s/n and udp target (reboot on fail)
 80040dc:	f005 f8e4 	bl	80092a8 <requestapisn>
			if (lcdupneeded()) {
 80040e0:	f002 fa4c 	bl	800657c <lcdupneeded>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f040 822e 	bne.w	8004546 <StarLPTask+0x83a>
			onesectimer = 0;
 80040ea:	4607      	mov	r7, r0
 80040ec:	e65f      	b.n	8003dae <StarLPTask+0xa2>
					printf("OFF\n");
 80040ee:	4650      	mov	r0, sl
 80040f0:	f022 fbc4 	bl	802687c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 80040f4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80040f8:	e68a      	b.n	8003e10 <StarLPTask+0x104>
					printf("OFF\n");
 80040fa:	4650      	mov	r0, sl
 80040fc:	f022 fbbe 	bl	802687c <puts>
					globalfreeze &= ~2;
 8004100:	4a53      	ldr	r2, [pc, #332]	; (8004250 <StarLPTask+0x544>)
			if (inch == 0x06) {  // control F
 8004102:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
					globalfreeze &= ~2;
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e67b      	b.n	8003e08 <StarLPTask+0xfc>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004116:	482f      	ldr	r0, [pc, #188]	; (80041d4 <StarLPTask+0x4c8>)
 8004118:	f008 feaa 	bl	800ce70 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800411c:	492e      	ldr	r1, [pc, #184]	; (80041d8 <StarLPTask+0x4cc>)
 800411e:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8004122:	680b      	ldr	r3, [r1, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	f43f af0d 	beq.w	8003f44 <StarLPTask+0x238>
			if (soundenabled) {
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <StarLPTask+0x548>)
			trigs = statuspkt.trigcount;
 800412c:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
			if (soundenabled) {
 8004130:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8004132:	600a      	str	r2, [r1, #0]
			if (soundenabled) {
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8195 	bne.w	8004464 <StarLPTask+0x758>
 800413a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800426c <StarLPTask+0x560>
				printf("sem wait 1a\n");
 800413e:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004270 <StarLPTask+0x564>
 8004142:	e002      	b.n	800414a <StarLPTask+0x43e>
 8004144:	4650      	mov	r0, sl
 8004146:	f022 fb99 	bl	802687c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800414a:	2101      	movs	r1, #1
 800414c:	f8d8 0000 	ldr.w	r0, [r8]
 8004150:	f013 f838 	bl	80171c4 <xQueueSemaphoreTake>
 8004154:	2801      	cmp	r0, #1
 8004156:	d1f5      	bne.n	8004144 <StarLPTask+0x438>
			strcpy(str, ctime(&epochtime));		// ctime
 8004158:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800415c:	483e      	ldr	r0, [pc, #248]	; (8004258 <StarLPTask+0x54c>)
 800415e:	f021 f8d1 	bl	8025304 <ctime>
 8004162:	4601      	mov	r1, r0
 8004164:	4650      	mov	r0, sl
 8004166:	f022 fd68 	bl	8026c3a <stpcpy>
			i = 0;
 800416a:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 800416c:	eba0 000a 	sub.w	r0, r0, sl
 8004170:	493a      	ldr	r1, [pc, #232]	; (800425c <StarLPTask+0x550>)
 8004172:	e008      	b.n	8004186 <StarLPTask+0x47a>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8004174:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8004178:	2a0a      	cmp	r2, #10
 800417a:	d003      	beq.n	8004184 <StarLPTask+0x478>
 800417c:	2a0d      	cmp	r2, #13
 800417e:	d001      	beq.n	8004184 <StarLPTask+0x478>
					trigtimestr[n++] = str[i];
 8004180:	550a      	strb	r2, [r1, r4]
 8004182:	3401      	adds	r4, #1
				i++;
 8004184:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8004186:	4283      	cmp	r3, r0
 8004188:	d3f4      	bcc.n	8004174 <StarLPTask+0x468>
			trigtimestr[n] = '\0';
 800418a:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800418c:	f8d8 0000 	ldr.w	r0, [r8]
			trigtimestr[n] = '\0';
 8004190:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004192:	461a      	mov	r2, r3
 8004194:	4619      	mov	r1, r3
 8004196:	f012 fd7b 	bl	8016c90 <xQueueGenericSend>
 800419a:	2801      	cmp	r0, #1
 800419c:	f43f aed2 	beq.w	8003f44 <StarLPTask+0x238>
				printf("semaphore 1a release failed\n");
 80041a0:	482f      	ldr	r0, [pc, #188]	; (8004260 <StarLPTask+0x554>)
 80041a2:	f022 fb6b 	bl	802687c <puts>
 80041a6:	e6cd      	b.n	8003f44 <StarLPTask+0x238>
			lcd_gps();		// display the GPS on the LCD page 0
 80041a8:	f7fe fa82 	bl	80026b0 <lcd_gps>
 80041ac:	e70b      	b.n	8003fc6 <StarLPTask+0x2ba>
			if (ledsenabled)
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <StarLPTask+0x4c0>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80041b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041b4:	4807      	ldr	r0, [pc, #28]	; (80041d4 <StarLPTask+0x4c8>)
			if (ledsenabled)
 80041b6:	881a      	ldrh	r2, [r3, #0]
 80041b8:	2a00      	cmp	r2, #0
 80041ba:	f000 816c 	beq.w	8004496 <StarLPTask+0x78a>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80041be:	f008 fe71 	bl	800cea4 <HAL_GPIO_TogglePin>
 80041c2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800426c <StarLPTask+0x560>
				printf("sem wait 1b\n");
 80041c6:	4c27      	ldr	r4, [pc, #156]	; (8004264 <StarLPTask+0x558>)
 80041c8:	e057      	b.n	800427a <StarLPTask+0x56e>
 80041ca:	bf00      	nop
 80041cc:	200002ac 	.word	0x200002ac
 80041d0:	2000077c 	.word	0x2000077c
 80041d4:	40020c00 	.word	0x40020c00
 80041d8:	20002e14 	.word	0x20002e14
 80041dc:	cccccccd 	.word	0xcccccccd
 80041e0:	19999999 	.word	0x19999999
 80041e4:	20002dd4 	.word	0x20002dd4
 80041e8:	20000734 	.word	0x20000734
 80041ec:	20001a8c 	.word	0x20001a8c
 80041f0:	20001a88 	.word	0x20001a88
 80041f4:	c28f5c29 	.word	0xc28f5c29
 80041f8:	26e978d5 	.word	0x26e978d5
 80041fc:	00418937 	.word	0x00418937
 8004200:	2000004e 	.word	0x2000004e
 8004204:	20002e00 	.word	0x20002e00
 8004208:	20002efc 	.word	0x20002efc
 800420c:	20002190 	.word	0x20002190
 8004210:	2000343c 	.word	0x2000343c
 8004214:	20002df4 	.word	0x20002df4
 8004218:	0802c6c4 	.word	0x0802c6c4
 800421c:	20003444 	.word	0x20003444
 8004220:	10624dd3 	.word	0x10624dd3
 8004224:	0802c6e0 	.word	0x0802c6e0
 8004228:	20003434 	.word	0x20003434
 800422c:	20003440 	.word	0x20003440
 8004230:	20003438 	.word	0x20003438
 8004234:	20000002 	.word	0x20000002
 8004238:	20003430 	.word	0x20003430
 800423c:	20000090 	.word	0x20000090
 8004240:	20000730 	.word	0x20000730
 8004244:	a4fa4fa5 	.word	0xa4fa4fa5
 8004248:	016c16c1 	.word	0x016c16c1
 800424c:	200033b0 	.word	0x200033b0
 8004250:	200034a4 	.word	0x200034a4
 8004254:	200002b2 	.word	0x200002b2
 8004258:	20002ef0 	.word	0x20002ef0
 800425c:	20000278 	.word	0x20000278
 8004260:	0802c4e4 	.word	0x0802c4e4
 8004264:	0802c510 	.word	0x0802c510
 8004268:	20002e18 	.word	0x20002e18
 800426c:	20002e0c 	.word	0x20002e0c
 8004270:	0802c4d8 	.word	0x0802c4d8
 8004274:	4620      	mov	r0, r4
 8004276:	f022 fb01 	bl	802687c <puts>
			while (!(xSemaphoreTake(
 800427a:	2101      	movs	r1, #1
 800427c:	f8d8 0000 	ldr.w	r0, [r8]
 8004280:	f012 ffa0 	bl	80171c4 <xQueueSemaphoreTake>
 8004284:	2801      	cmp	r0, #1
 8004286:	d1f5      	bne.n	8004274 <StarLPTask+0x568>
			strcpy(str, ctime(&epochtime));
 8004288:	48b2      	ldr	r0, [pc, #712]	; (8004554 <StarLPTask+0x848>)
 800428a:	f021 f83b 	bl	8025304 <ctime>
 800428e:	aa09      	add	r2, sp, #36	; 0x24
 8004290:	4601      	mov	r1, r0
 8004292:	4610      	mov	r0, r2
 8004294:	f022 fcd1 	bl	8026c3a <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8004298:	aa09      	add	r2, sp, #36	; 0x24
			sprintf(nowtimestr, "\"%s\"", str);
 800429a:	49af      	ldr	r1, [pc, #700]	; (8004558 <StarLPTask+0x84c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800429c:	1a80      	subs	r0, r0, r2
 800429e:	f100 0378 	add.w	r3, r0, #120	; 0x78
 80042a2:	eb0d 0003 	add.w	r0, sp, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	f800 3c55 	strb.w	r3, [r0, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 80042ac:	48ab      	ldr	r0, [pc, #684]	; (800455c <StarLPTask+0x850>)
 80042ae:	f022 fc33 	bl	8026b18 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 80042b2:	4bab      	ldr	r3, [pc, #684]	; (8004560 <StarLPTask+0x854>)
 80042b4:	4aab      	ldr	r2, [pc, #684]	; (8004564 <StarLPTask+0x858>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	49ab      	ldr	r1, [pc, #684]	; (8004568 <StarLPTask+0x85c>)
 80042bc:	48ab      	ldr	r0, [pc, #684]	; (800456c <StarLPTask+0x860>)
 80042be:	f022 fc2b 	bl	8026b18 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 80042c2:	4bab      	ldr	r3, [pc, #684]	; (8004570 <StarLPTask+0x864>)
 80042c4:	4aab      	ldr	r2, [pc, #684]	; (8004574 <StarLPTask+0x868>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	49a7      	ldr	r1, [pc, #668]	; (8004568 <StarLPTask+0x85c>)
 80042cc:	48aa      	ldr	r0, [pc, #680]	; (8004578 <StarLPTask+0x86c>)
 80042ce:	f022 fc23 	bl	8026b18 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80042d2:	4baa      	ldr	r3, [pc, #680]	; (800457c <StarLPTask+0x870>)
			sprintf(statstr,
 80042d4:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80042d8:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 80042dc:	49a8      	ldr	r1, [pc, #672]	; (8004580 <StarLPTask+0x874>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80042de:	2b00      	cmp	r3, #0
			sprintf(statstr,
 80042e0:	48a8      	ldr	r0, [pc, #672]	; (8004584 <StarLPTask+0x878>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80042e2:	bfb8      	it	lt
 80042e4:	425b      	neglt	r3, r3
			sprintf(statstr,
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	4ba6      	ldr	r3, [pc, #664]	; (8004588 <StarLPTask+0x87c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	4ba5      	ldr	r3, [pc, #660]	; (800458c <StarLPTask+0x880>)
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	9303      	str	r3, [sp, #12]
 80042fc:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4ba3      	ldr	r3, [pc, #652]	; (8004590 <StarLPTask+0x884>)
 8004304:	f022 fc08 	bl	8026b18 <siprintf>
			if (gpslocked) {
 8004308:	4ba2      	ldr	r3, [pc, #648]	; (8004594 <StarLPTask+0x888>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80b3 	beq.w	8004478 <StarLPTask+0x76c>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8004312:	f899 201b 	ldrb.w	r2, [r9, #27]
 8004316:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800431a:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800431e:	489e      	ldr	r0, [pc, #632]	; (8004598 <StarLPTask+0x88c>)
 8004320:	9100      	str	r1, [sp, #0]
 8004322:	499e      	ldr	r1, [pc, #632]	; (800459c <StarLPTask+0x890>)
 8004324:	f022 fbf8 	bl	8026b18 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004328:	2300      	movs	r3, #0
 800432a:	f8d8 0000 	ldr.w	r0, [r8]
 800432e:	461a      	mov	r2, r3
 8004330:	4619      	mov	r1, r3
 8004332:	f012 fcad 	bl	8016c90 <xQueueGenericSend>
 8004336:	2801      	cmp	r0, #1
 8004338:	d002      	beq.n	8004340 <StarLPTask+0x634>
				printf("semaphore 1b release failed\n");
 800433a:	4899      	ldr	r0, [pc, #612]	; (80045a0 <StarLPTask+0x894>)
 800433c:	f022 fa9e 	bl	802687c <puts>
			onesectimer++;
 8004340:	3701      	adds	r7, #1
				printf("sem wait 1c\n");
 8004342:	4c98      	ldr	r4, [pc, #608]	; (80045a4 <StarLPTask+0x898>)
			onesectimer++;
 8004344:	b2bf      	uxth	r7, r7
			while (!(xSemaphoreTake(ssicontentHandle,
 8004346:	e002      	b.n	800434e <StarLPTask+0x642>
				printf("sem wait 1c\n");
 8004348:	4620      	mov	r0, r4
 800434a:	f022 fa97 	bl	802687c <puts>
			while (!(xSemaphoreTake(ssicontentHandle,
 800434e:	2119      	movs	r1, #25
 8004350:	f8d8 0000 	ldr.w	r0, [r8]
 8004354:	f012 ff36 	bl	80171c4 <xQueueSemaphoreTake>
 8004358:	2801      	cmp	r0, #1
 800435a:	d1f5      	bne.n	8004348 <StarLPTask+0x63c>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800435c:	2300      	movs	r3, #0
 800435e:	f8d8 0000 	ldr.w	r0, [r8]
 8004362:	461a      	mov	r2, r3
 8004364:	4619      	mov	r1, r3
 8004366:	f012 fc93 	bl	8016c90 <xQueueGenericSend>
 800436a:	2801      	cmp	r0, #1
 800436c:	d002      	beq.n	8004374 <StarLPTask+0x668>
				printf("semaphore 1c release failed\n");
 800436e:	488e      	ldr	r0, [pc, #568]	; (80045a8 <StarLPTask+0x89c>)
 8004370:	f022 fa84 	bl	802687c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8004374:	f7fe fc72 	bl	8002c5c <lcd_trigplot>
 8004378:	e619      	b.n	8003fae <StarLPTask+0x2a2>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 800437a:	f8df 827c 	ldr.w	r8, [pc, #636]	; 80045f8 <StarLPTask+0x8ec>
 800437e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004382:	42bb      	cmp	r3, r7
 8004384:	4b89      	ldr	r3, [pc, #548]	; (80045ac <StarLPTask+0x8a0>)
 8004386:	f43f ae02 	beq.w	8003f8e <StarLPTask+0x282>
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	2a00      	cmp	r2, #0
 800438e:	f47f adfe 	bne.w	8003f8e <StarLPTask+0x282>
				timeinfo = *localtime(&localepochtime);
 8004392:	4887      	ldr	r0, [pc, #540]	; (80045b0 <StarLPTask+0x8a4>)
 8004394:	f021 f8d8 	bl	8025548 <localtime>
 8004398:	f8df a260 	ldr.w	sl, [pc, #608]	; 80045fc <StarLPTask+0x8f0>
 800439c:	4604      	mov	r4, r0
 800439e:	46d4      	mov	ip, sl
 80043a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043ac:	6823      	ldr	r3, [r4, #0]
				lastsec = onesectimer;
 80043ae:	f8a8 7000 	strh.w	r7, [r8]
				timeinfo = *localtime(&localepochtime);
 80043b2:	f8cc 3000 	str.w	r3, [ip]
				lcd_time();		// display the clock on the LCD page 0
 80043b6:	f7fe f983 	bl	80026c0 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 80043ba:	4b7e      	ldr	r3, [pc, #504]	; (80045b4 <StarLPTask+0x8a8>)
 80043bc:	f8da 201c 	ldr.w	r2, [sl, #28]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	f43f ade7 	beq.w	8003f96 <StarLPTask+0x28a>
					lcd_date();
 80043c8:	f7fe f9f4 	bl	80027b4 <lcd_date>
 80043cc:	e5e3      	b.n	8003f96 <StarLPTask+0x28a>
				statuspkt.jabcnt++;
 80043ce:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 80043d2:	4879      	ldr	r0, [pc, #484]	; (80045b8 <StarLPTask+0x8ac>)
				statuspkt.jabcnt++;
 80043d4:	3201      	adds	r2, #1
 80043d6:	b292      	uxth	r2, r2
 80043d8:	f8a9 2086 	strh.w	r2, [r9, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 80043dc:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 80043de:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 80043e2:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 80043e4:	4b75      	ldr	r3, [pc, #468]	; (80045bc <StarLPTask+0x8b0>)
 80043e6:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 80043e8:	f022 f9ac 	bl	8026744 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 80043ec:	4b74      	ldr	r3, [pc, #464]	; (80045c0 <StarLPTask+0x8b4>)
 80043ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f2:	b93b      	cbnz	r3, 8004404 <StarLPTask+0x6f8>
					if (trigthresh < 4095)
 80043f4:	4a65      	ldr	r2, [pc, #404]	; (800458c <StarLPTask+0x880>)
 80043f6:	f640 71fe 	movw	r1, #4094	; 0xffe
 80043fa:	8813      	ldrh	r3, [r2, #0]
 80043fc:	428b      	cmp	r3, r1
 80043fe:	d801      	bhi.n	8004404 <StarLPTask+0x6f8>
						trigthresh++;
 8004400:	3301      	adds	r3, #1
 8004402:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <StarLPTask+0x8b8>)
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d17d      	bne.n	8004508 <StarLPTask+0x7fc>
				jabtrigcnt = statuspkt.trigcount;
 800440c:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004410:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8004412:	4b6d      	ldr	r3, [pc, #436]	; (80045c8 <StarLPTask+0x8bc>)
 8004414:	4a6d      	ldr	r2, [pc, #436]	; (80045cc <StarLPTask+0x8c0>)
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	6813      	ldr	r3, [r2, #0]
 800441a:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 800441c:	2b05      	cmp	r3, #5
 800441e:	dd3d      	ble.n	800449c <StarLPTask+0x790>
					if (trigthresh < 4095)
 8004420:	485a      	ldr	r0, [pc, #360]	; (800458c <StarLPTask+0x880>)
 8004422:	f640 74fe 	movw	r4, #4094	; 0xffe
 8004426:	8803      	ldrh	r3, [r0, #0]
 8004428:	42a3      	cmp	r3, r4
 800442a:	d801      	bhi.n	8004430 <StarLPTask+0x724>
						trigthresh++;
 800442c:	3301      	adds	r3, #1
 800442e:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8004430:	2300      	movs	r3, #0
 8004432:	6011      	str	r1, [r2, #0]
 8004434:	9306      	str	r3, [sp, #24]
 8004436:	e5a4      	b.n	8003f82 <StarLPTask+0x276>
			gainchanged = 0;
 8004438:	9306      	str	r3, [sp, #24]
 800443a:	e5eb      	b.n	8004014 <StarLPTask+0x308>
				printf("GPS serial comms problem?\n");
 800443c:	4864      	ldr	r0, [pc, #400]	; (80045d0 <StarLPTask+0x8c4>)
 800443e:	f022 fa1d 	bl	802687c <puts>
				if (gpsbadcount++ > 9) {
 8004442:	4a64      	ldr	r2, [pc, #400]	; (80045d4 <StarLPTask+0x8c8>)
 8004444:	6813      	ldr	r3, [r2, #0]
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	2b09      	cmp	r3, #9
 800444a:	6011      	str	r1, [r2, #0]
 800444c:	f77f adee 	ble.w	800402c <StarLPTask+0x320>
					printf("GPS bad - rebooting...\n");
 8004450:	4861      	ldr	r0, [pc, #388]	; (80045d8 <StarLPTask+0x8cc>)
 8004452:	f022 fa13 	bl	802687c <puts>
					osDelay(3000);
 8004456:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800445a:	f012 f8ef 	bl	801663c <osDelay>
					rebootme(5);
 800445e:	2005      	movs	r0, #5
 8004460:	f7ff fc32 	bl	8003cc8 <rebootme>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004464:	2308      	movs	r3, #8
 8004466:	4a5d      	ldr	r2, [pc, #372]	; (80045dc <StarLPTask+0x8d0>)
 8004468:	2100      	movs	r1, #0
 800446a:	485d      	ldr	r0, [pc, #372]	; (80045e0 <StarLPTask+0x8d4>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004472:	f005 fd2b 	bl	8009ecc <HAL_DAC_Start_DMA>
 8004476:	e660      	b.n	800413a <StarLPTask+0x42e>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8004478:	f8df c184 	ldr.w	ip, [pc, #388]	; 8004600 <StarLPTask+0x8f4>
 800447c:	4c46      	ldr	r4, [pc, #280]	; (8004598 <StarLPTask+0x88c>)
 800447e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800448a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800448e:	f844 0b04 	str.w	r0, [r4], #4
 8004492:	8021      	strh	r1, [r4, #0]
 8004494:	e748      	b.n	8004328 <StarLPTask+0x61c>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8004496:	f008 fceb 	bl	800ce70 <HAL_GPIO_WritePin>
 800449a:	e692      	b.n	80041c2 <StarLPTask+0x4b6>
				if (n == 0) {		// no triggers in last 100mS
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1c7      	bne.n	8004430 <StarLPTask+0x724>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80044a0:	483a      	ldr	r0, [pc, #232]	; (800458c <StarLPTask+0x880>)
 80044a2:	8803      	ldrh	r3, [r0, #0]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d9c3      	bls.n	8004430 <StarLPTask+0x724>
						trigthresh--;
 80044a8:	3b01      	subs	r3, #1
 80044aa:	8003      	strh	r3, [r0, #0]
 80044ac:	e7c0      	b.n	8004430 <StarLPTask+0x724>
				if (getpressure115() != HAL_OK) {
 80044ae:	f002 fb71 	bl	8006b94 <getpressure115>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	f43f adc4 	beq.w	8004040 <StarLPTask+0x334>
					printf("MPL115A2 error\n\r");
 80044b8:	484a      	ldr	r0, [pc, #296]	; (80045e4 <StarLPTask+0x8d8>)
 80044ba:	f022 f943 	bl	8026744 <iprintf>
 80044be:	e5bf      	b.n	8004040 <StarLPTask+0x334>
				lcd_showvars();
 80044c0:	f7fe f9a0 	bl	8002804 <lcd_showvars>
 80044c4:	e567      	b.n	8003f96 <StarLPTask+0x28a>
					gainchanged = bumppga(-1);
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	f002 fb1d 	bl	8006b08 <bumppga>
 80044ce:	b203      	sxth	r3, r0
 80044d0:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 80044d2:	4b45      	ldr	r3, [pc, #276]	; (80045e8 <StarLPTask+0x8dc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 80044d8:	9b06      	ldr	r3, [sp, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f77f ad9a 	ble.w	8004014 <StarLPTask+0x308>
					if (trigthresh < (4095 - 10))
 80044e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80044e4:	f640 72f4 	movw	r2, #4084	; 0xff4
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f63f ad93 	bhi.w	8004014 <StarLPTask+0x308>
						trigthresh += 5;
 80044ee:	3305      	adds	r3, #5
 80044f0:	f8a8 3000 	strh.w	r3, [r8]
 80044f4:	e58e      	b.n	8004014 <StarLPTask+0x308>
				if (getpressure3115() != HAL_OK) {
 80044f6:	f002 fbfb 	bl	8006cf0 <getpressure3115>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f43f ada0 	beq.w	8004040 <StarLPTask+0x334>
					printf("MPL3115A2 error\n\r");
 8004500:	483a      	ldr	r0, [pc, #232]	; (80045ec <StarLPTask+0x8e0>)
 8004502:	f022 f91f 	bl	8026744 <iprintf>
 8004506:	e59b      	b.n	8004040 <StarLPTask+0x334>
					gainchanged = bumppga(-1);	// decrease gain
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	f002 fafc 	bl	8006b08 <bumppga>
 8004510:	b203      	sxth	r3, r0
 8004512:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 8004514:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	e52e      	b.n	8003f7a <StarLPTask+0x26e>
						gainchanged = bumppga(1);
 800451c:	2001      	movs	r0, #1
 800451e:	f002 faf3 	bl	8006b08 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8004522:	f8da 3000 	ldr.w	r3, [sl]
 8004526:	2b0a      	cmp	r3, #10
 8004528:	d8cd      	bhi.n	80044c6 <StarLPTask+0x7ba>
						gainchanged = bumppga(1);
 800452a:	b203      	sxth	r3, r0
 800452c:	9306      	str	r3, [sp, #24]
 800452e:	e7d0      	b.n	80044d2 <StarLPTask+0x7c6>
			HAL_IWDG_Refresh(&hiwdg);
 8004530:	4c2f      	ldr	r4, [pc, #188]	; (80045f0 <StarLPTask+0x8e4>)
			osDelay(10);
 8004532:	200a      	movs	r0, #10
 8004534:	f012 f882 	bl	801663c <osDelay>
			HAL_IWDG_Refresh(&hiwdg);
 8004538:	4620      	mov	r0, r4
 800453a:	f009 fb1d 	bl	800db78 <HAL_IWDG_Refresh>
		while (http_downloading) {
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f6      	bne.n	8004532 <StarLPTask+0x826>
 8004544:	e419      	b.n	8003d7a <StarLPTask+0x6e>
				printf("LCD update required, wait for reboot and download..\n");
 8004546:	482b      	ldr	r0, [pc, #172]	; (80045f4 <StarLPTask+0x8e8>)
 8004548:	f022 f998 	bl	802687c <puts>
				rebootme(0);
 800454c:	2000      	movs	r0, #0
 800454e:	f7ff fbbb 	bl	8003cc8 <rebootme>
 8004552:	bf00      	nop
 8004554:	20002ef0 	.word	0x20002ef0
 8004558:	0802c51c 	.word	0x0802c51c
 800455c:	20000090 	.word	0x20000090
 8004560:	20003444 	.word	0x20003444
 8004564:	20003440 	.word	0x20003440
 8004568:	0802c524 	.word	0x0802c524
 800456c:	2000026c 	.word	0x2000026c
 8004570:	20003434 	.word	0x20003434
 8004574:	20003438 	.word	0x20003438
 8004578:	200000b0 	.word	0x200000b0
 800457c:	20000780 	.word	0x20000780
 8004580:	0802c52c 	.word	0x0802c52c
 8004584:	20000164 	.word	0x20000164
 8004588:	2000072c 	.word	0x2000072c
 800458c:	20000002 	.word	0x20000002
 8004590:	20000278 	.word	0x20000278
 8004594:	200034a8 	.word	0x200034a8
 8004598:	20000050 	.word	0x20000050
 800459c:	0802c5d4 	.word	0x0802c5d4
 80045a0:	0802c624 	.word	0x0802c624
 80045a4:	0802c640 	.word	0x0802c640
 80045a8:	0802c64c 	.word	0x0802c64c
 80045ac:	20001a88 	.word	0x20001a88
 80045b0:	20001b48 	.word	0x20001b48
 80045b4:	20001a7c 	.word	0x20001a7c
 80045b8:	0802c500 	.word	0x0802c500
 80045bc:	20000734 	.word	0x20000734
 80045c0:	20003430 	.word	0x20003430
 80045c4:	2000004e 	.word	0x2000004e
 80045c8:	20000788 	.word	0x20000788
 80045cc:	20002ddc 	.word	0x20002ddc
 80045d0:	0802c668 	.word	0x0802c668
 80045d4:	20002190 	.word	0x20002190
 80045d8:	0802c684 	.word	0x0802c684
 80045dc:	0802ca84 	.word	0x0802ca84
 80045e0:	20002294 	.word	0x20002294
 80045e4:	0802c69c 	.word	0x0802c69c
 80045e8:	20002e14 	.word	0x20002e14
 80045ec:	0802c6b0 	.word	0x0802c6b0
 80045f0:	2000268c 	.word	0x2000268c
 80045f4:	0802c740 	.word	0x0802c740
 80045f8:	20000010 	.word	0x20000010
 80045fc:	20001f64 	.word	0x20001f64
 8004600:	0802c5fc 	.word	0x0802c5fc
 8004604:	4604      	mov	r4, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8004606:	4803      	ldr	r0, [pc, #12]	; (8004614 <StarLPTask+0x908>)
 8004608:	f022 f938 	bl	802687c <puts>
		rebootme(0);
 800460c:	4620      	mov	r0, r4
 800460e:	f7ff fb5b 	bl	8003cc8 <rebootme>
 8004612:	bf00      	nop
 8004614:	0802c43c 	.word	0x0802c43c

08004618 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8004618:	2100      	movs	r1, #0
 800461a:	f005 bcf3 	b.w	800a004 <HAL_DAC_Stop_DMA>
 800461e:	bf00      	nop

08004620 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8004620:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8004622:	6803      	ldr	r3, [r0, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <HAL_TIM_IC_CaptureCallback+0x60>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d021      	beq.n	8004674 <HAL_TIM_IC_CaptureCallback+0x54>
}
 8004630:	bd38      	pop	{r3, r4, r5, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004632:	4c14      	ldr	r4, [pc, #80]	; (8004684 <HAL_TIM_IC_CaptureCallback+0x64>)
 8004634:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_TIM_IC_CaptureCallback+0x68>)
 8004636:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8004638:	4a14      	ldr	r2, [pc, #80]	; (800468c <HAL_TIM_IC_CaptureCallback+0x6c>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800463a:	3101      	adds	r1, #1
 800463c:	4814      	ldr	r0, [pc, #80]	; (8004690 <HAL_TIM_IC_CaptureCallback+0x70>)
		if (!(ledsenabled)) {
 800463e:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004640:	fba3 5301 	umull	r5, r3, r3, r1
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800464a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800464e:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004652:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8004654:	480f      	ldr	r0, [pc, #60]	; (8004694 <HAL_TIM_IC_CaptureCallback+0x74>)
		if (!(ledsenabled)) {
 8004656:	b152      	cbz	r2, 800466e <HAL_TIM_IC_CaptureCallback+0x4e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8004658:	f008 fc24 	bl	800cea4 <HAL_GPIO_TogglePin>
		diff = lastcap;
 800465c:	4d0e      	ldr	r5, [pc, #56]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x78>)
		statuspkt.clktrim = movavg(diff);
 800465e:	6828      	ldr	r0, [r5, #0]
 8004660:	f001 f960 	bl	8005924 <movavg>
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_TIM_IC_CaptureCallback+0x7c>)
		statuspkt.clktrim = movavg(diff);
 8004666:	65a0      	str	r0, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	602b      	str	r3, [r5, #0]
}
 800466c:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800466e:	f008 fbff 	bl	800ce70 <HAL_GPIO_WritePin>
 8004672:	e7f3      	b.n	800465c <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8004674:	480a      	ldr	r0, [pc, #40]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x80>)
}
 8004676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Timer4 callback\n");
 800467a:	f022 b8ff 	b.w	802687c <puts>
 800467e:	bf00      	nop
 8004680:	40000800 	.word	0x40000800
 8004684:	2000303c 	.word	0x2000303c
 8004688:	88888889 	.word	0x88888889
 800468c:	200002ac 	.word	0x200002ac
 8004690:	2000078c 	.word	0x2000078c
 8004694:	40020c00 	.word	0x40020c00
 8004698:	20002dd8 	.word	0x20002dd8
 800469c:	200007a4 	.word	0x200007a4
 80046a0:	0802c774 	.word	0x0802c774

080046a4 <getboardpcb>:
void getboardpcb() {
 80046a4:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 80046a6:	2101      	movs	r1, #1
 80046a8:	4804      	ldr	r0, [pc, #16]	; (80046bc <getboardpcb+0x18>)
 80046aa:	f008 fbcf 	bl	800ce4c <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 80046ae:	2800      	cmp	r0, #0
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <getboardpcb+0x1c>)
 80046b2:	bf0c      	ite	eq
 80046b4:	2216      	moveq	r2, #22
 80046b6:	220b      	movne	r2, #11
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bd08      	pop	{r3, pc}
 80046bc:	40020800 	.word	0x40020800
 80046c0:	20002180 	.word	0x20002180

080046c4 <uart2_rxdone>:
void uart2_rxdone() {
 80046c4:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 80046c6:	4807      	ldr	r0, [pc, #28]	; (80046e4 <uart2_rxdone+0x20>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4907      	ldr	r1, [pc, #28]	; (80046e8 <uart2_rxdone+0x24>)
 80046cc:	461a      	mov	r2, r3
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	f012 fbde 	bl	8016e90 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80046d4:	2201      	movs	r2, #1
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <uart2_rxdone+0x24>)
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <uart2_rxdone+0x28>)
}
 80046da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80046de:	f00f bed7 	b.w	8014490 <HAL_UART_Receive_IT>
 80046e2:	bf00      	nop
 80046e4:	20002188 	.word	0x20002188
 80046e8:	20002184 	.word	0x20002184
 80046ec:	20002a38 	.word	0x20002a38

080046f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 80046f0:	4a25      	ldr	r2, [pc, #148]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d029      	beq.n	800474c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02d      	beq.n	800475a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d02c      	beq.n	800475e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d030      	beq.n	800476c <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d005      	beq.n	800471c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8004716:	4821      	ldr	r0, [pc, #132]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004718:	f022 b8b0 	b.w	802687c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800471c:	b510      	push	{r4, lr}
		t1sec++;
 800471e:	4920      	ldr	r1, [pc, #128]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8004720:	4c20      	ldr	r4, [pc, #128]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8004722:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004724:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8004726:	4820      	ldr	r0, [pc, #128]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8004728:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800472a:	3301      	adds	r3, #1
		if (netup)
 800472c:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 800472e:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004730:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8004732:	b110      	cbz	r0, 800473a <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8004734:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004736:	3301      	adds	r3, #1
 8004738:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b9c3      	cbnz	r3, 8004772 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8004742:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8004744:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8004746:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 800474a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	6013      	str	r3, [r2, #0]
		return;
 8004754:	4770      	bx	lr
		HAL_IncTick();
 8004756:	f004 bdfd 	b.w	8009354 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 800475a:	f7fc b897 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 800475e:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004762:	4816      	ldr	r0, [pc, #88]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004764:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	f021 bfec 	b.w	8026744 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 800476c:	4814      	ldr	r0, [pc, #80]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800476e:	f022 b885 	b.w	802687c <puts>
			statuspkt.gpsuptime++;
 8004772:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004774:	3301      	adds	r3, #1
 8004776:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8004778:	f001 f94e 	bl	8005a18 <calcepoch32>
				epochvalid = 1;
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800477e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8004780:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	bd10      	pop	{r4, pc}
 8004788:	40002000 	.word	0x40002000
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40000400 	.word	0x40000400
 8004794:	40001000 	.word	0x40001000
 8004798:	40001800 	.word	0x40001800
 800479c:	0802c814 	.word	0x0802c814
 80047a0:	20002e10 	.word	0x20002e10
 80047a4:	2000303c 	.word	0x2000303c
 80047a8:	20000782 	.word	0x20000782
 80047ac:	200034a8 	.word	0x200034a8
 80047b0:	200034a0 	.word	0x200034a0
 80047b4:	20002e04 	.word	0x20002e04
 80047b8:	200007a4 	.word	0x200007a4
 80047bc:	0802c7d4 	.word	0x0802c7d4
 80047c0:	0802c7f8 	.word	0x0802c7f8

080047c4 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 80047c4:	4c02      	ldr	r4, [pc, #8]	; (80047d0 <Error_Handler+0xc>)
void Error_Handler(void) {
 80047c6:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 80047c8:	4620      	mov	r0, r4
 80047ca:	f022 f857 	bl	802687c <puts>
	while (1) {
 80047ce:	e7fb      	b.n	80047c8 <Error_Handler+0x4>
 80047d0:	0802c83c 	.word	0x0802c83c

080047d4 <SystemClock_Config>:
void SystemClock_Config(void) {
 80047d4:	b530      	push	{r4, r5, lr}
 80047d6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80047d8:	2234      	movs	r2, #52	; 0x34
 80047da:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047dc:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80047de:	a807      	add	r0, sp, #28
 80047e0:	f021 f812 	bl	8025808 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80047e4:	2300      	movs	r3, #0
 80047e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047ea:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80047ee:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 80047f0:	f009 ff52 	bl	800e698 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80047f6:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80047fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004800:	6411      	str	r1, [r2, #64]	; 0x40
 8004802:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004804:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004808:	9200      	str	r2, [sp, #0]
 800480a:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004812:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8004814:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004816:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004818:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800481a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800481e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004820:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004822:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004828:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800482a:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800482e:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004830:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004834:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 8004836:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004838:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 800483a:	23d8      	movs	r3, #216	; 0xd8
 800483c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8004840:	2306      	movs	r3, #6
 8004842:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004844:	f009 ff6a 	bl	800e71c <HAL_RCC_OscConfig>
 8004848:	b9a0      	cbnz	r0, 8004874 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800484a:	f009 ff2d 	bl	800e6a8 <HAL_PWREx_EnableOverDrive>
 800484e:	4603      	mov	r3, r0
 8004850:	b980      	cbnz	r0, 8004874 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004852:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004854:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8004858:	a802      	add	r0, sp, #8
 800485a:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800485c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004864:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004868:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800486a:	f00a fa2d 	bl	800ecc8 <HAL_RCC_ClockConfig>
 800486e:	b908      	cbnz	r0, 8004874 <SystemClock_Config+0xa0>
}
 8004870:	b015      	add	sp, #84	; 0x54
 8004872:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8004874:	f7ff ffa6 	bl	80047c4 <Error_Handler>
 8004878:	40023800 	.word	0x40023800
 800487c:	40007000 	.word	0x40007000

08004880 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8004880:	b510      	push	{r4, lr}
 8004882:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8004884:	228c      	movs	r2, #140	; 0x8c
 8004886:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004888:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800488a:	a801      	add	r0, sp, #4
 800488c:	f020 ffbc 	bl	8025808 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004890:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004892:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004896:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004898:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800489a:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800489c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80048a0:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048a2:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80048a4:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80048a6:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80048a8:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80048aa:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048ae:	f00a fb71 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 80048b2:	b908      	cbnz	r0, 80048b8 <PeriphCommonClock_Config+0x38>
}
 80048b4:	b024      	add	sp, #144	; 0x90
 80048b6:	bd10      	pop	{r4, pc}
		Error_Handler();
 80048b8:	f7ff ff84 	bl	80047c4 <Error_Handler>

080048bc <main>:
int main(void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 80048c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048c4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80048c8:	4bc2      	ldr	r3, [pc, #776]	; (8004bd4 <main+0x318>)
 80048ca:	2400      	movs	r4, #0
 80048cc:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 80048d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048de:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 80048e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048e4:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80048e8:	4dbb      	ldr	r5, [pc, #748]	; (8004bd8 <main+0x31c>)
	HAL_Init();
 80048ea:	f004 fd21 	bl	8009330 <HAL_Init>
	SystemClock_Config();
 80048ee:	f7ff ff71 	bl	80047d4 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048f2:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 80048f4:	f7ff ffc4 	bl	8004880 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80048f8:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80048fa:	4622      	mov	r2, r4
 80048fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004900:	48b6      	ldr	r0, [pc, #728]	; (8004bdc <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004902:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004906:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004908:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 800490c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004910:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8004914:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004918:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800491a:	f043 0310 	orr.w	r3, r3, #16
 800491e:	632b      	str	r3, [r5, #48]	; 0x30
 8004920:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800492a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	632b      	str	r3, [r5, #48]	; 0x30
 8004932:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800493c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	632b      	str	r3, [r5, #48]	; 0x30
 8004944:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	9305      	str	r3, [sp, #20]
 800494c:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800494e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004954:	632b      	str	r3, [r5, #48]	; 0x30
 8004956:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	9306      	str	r3, [sp, #24]
 800495e:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004960:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	632b      	str	r3, [r5, #48]	; 0x30
 8004968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	9307      	str	r3, [sp, #28]
 8004970:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004972:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	632b      	str	r3, [r5, #48]	; 0x30
 800497a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	9308      	str	r3, [sp, #32]
 8004982:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004984:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498a:	632b      	str	r3, [r5, #48]	; 0x30
 800498c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	9309      	str	r3, [sp, #36]	; 0x24
 8004994:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	632b      	str	r3, [r5, #48]	; 0x30
 800499e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	930a      	str	r3, [sp, #40]	; 0x28
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80049a8:	f008 fa62 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80049ac:	4622      	mov	r2, r4
 80049ae:	f644 0181 	movw	r1, #18561	; 0x4881
 80049b2:	488b      	ldr	r0, [pc, #556]	; (8004be0 <main+0x324>)
 80049b4:	f008 fa5c 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 80049b8:	4622      	mov	r2, r4
 80049ba:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 80049be:	4889      	ldr	r0, [pc, #548]	; (8004be4 <main+0x328>)
 80049c0:	f008 fa56 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 80049c4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80049c8:	4887      	ldr	r0, [pc, #540]	; (8004be8 <main+0x32c>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	f008 fa50 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80049d0:	4622      	mov	r2, r4
 80049d2:	2144      	movs	r1, #68	; 0x44
 80049d4:	4885      	ldr	r0, [pc, #532]	; (8004bec <main+0x330>)
 80049d6:	f008 fa4b 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 80049da:	4622      	mov	r2, r4
 80049dc:	2102      	movs	r1, #2
 80049de:	4882      	ldr	r0, [pc, #520]	; (8004be8 <main+0x32c>)
 80049e0:	f008 fa46 	bl	800ce70 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 80049e4:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049e8:	a955      	add	r1, sp, #340	; 0x154
 80049ea:	487e      	ldr	r0, [pc, #504]	; (8004be4 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 80049ec:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ee:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049f2:	f007 ff91 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80049f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80049fa:	a955      	add	r1, sp, #340	; 0x154
 80049fc:	487c      	ldr	r0, [pc, #496]	; (8004bf0 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80049fe:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a00:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a04:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a06:	f007 ff87 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a0a:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a0e:	a955      	add	r1, sp, #340	; 0x154
 8004a10:	4872      	ldr	r0, [pc, #456]	; (8004bdc <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a12:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a18:	f007 ff7e 	bl	800c918 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a1c:	a955      	add	r1, sp, #340	; 0x154
 8004a1e:	486f      	ldr	r0, [pc, #444]	; (8004bdc <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8004a20:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a24:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a28:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a2c:	f007 ff74 	bl	800c918 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a30:	a955      	add	r1, sp, #340	; 0x154
 8004a32:	486f      	ldr	r0, [pc, #444]	; (8004bf0 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a34:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a36:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a3a:	f007 ff6d 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a3e:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a40:	a955      	add	r1, sp, #340	; 0x154
 8004a42:	486c      	ldr	r0, [pc, #432]	; (8004bf4 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a44:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4a:	f007 ff65 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a4e:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a52:	a955      	add	r1, sp, #340	; 0x154
 8004a54:	4862      	ldr	r0, [pc, #392]	; (8004be0 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a56:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a58:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a5e:	f007 ff5b 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004a62:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	a955      	add	r1, sp, #340	; 0x154
 8004a66:	485e      	ldr	r0, [pc, #376]	; (8004be0 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004a68:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6e:	f007 ff53 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004a72:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a76:	a955      	add	r1, sp, #340	; 0x154
 8004a78:	485c      	ldr	r0, [pc, #368]	; (8004bec <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004a7a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a80:	f007 ff4a 	bl	800c918 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a84:	a955      	add	r1, sp, #340	; 0x154
 8004a86:	4857      	ldr	r0, [pc, #348]	; (8004be4 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a8a:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8e:	f007 ff43 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004a92:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a96:	a955      	add	r1, sp, #340	; 0x154
 8004a98:	4852      	ldr	r0, [pc, #328]	; (8004be4 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004a9a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004a9c:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004aa2:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aaa:	f007 ff35 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004aae:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab2:	a955      	add	r1, sp, #340	; 0x154
 8004ab4:	484c      	ldr	r0, [pc, #304]	; (8004be8 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004ab6:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004abc:	f007 ff2c 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004ac0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ac4:	a955      	add	r1, sp, #340	; 0x154
 8004ac6:	4848      	ldr	r0, [pc, #288]	; (8004be8 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004ac8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aca:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ad0:	f007 ff22 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004ad4:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ad6:	a955      	add	r1, sp, #340	; 0x154
 8004ad8:	4844      	ldr	r0, [pc, #272]	; (8004bec <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004ada:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ae2:	f007 ff19 	bl	800c918 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004ae6:	a955      	add	r1, sp, #340	; 0x154
 8004ae8:	4840      	ldr	r0, [pc, #256]	; (8004bec <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004aea:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004af2:	f007 ff11 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004af6:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afa:	a955      	add	r1, sp, #340	; 0x154
 8004afc:	483c      	ldr	r0, [pc, #240]	; (8004bf0 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004afe:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b04:	f007 ff08 	bl	800c918 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0c:	a955      	add	r1, sp, #340	; 0x154
 8004b0e:	4839      	ldr	r0, [pc, #228]	; (8004bf4 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b10:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b12:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004b14:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b1c:	f007 fefc 	bl	800c918 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b20:	a955      	add	r1, sp, #340	; 0x154
 8004b22:	4831      	ldr	r0, [pc, #196]	; (8004be8 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b24:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b28:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b2c:	f007 fef4 	bl	800c918 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b32:	4639      	mov	r1, r7
 8004b34:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b3a:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b3c:	632b      	str	r3, [r5, #48]	; 0x30
 8004b3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b4e:	632b      	str	r3, [r5, #48]	; 0x30
 8004b50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8004b52:	4d29      	ldr	r5, [pc, #164]	; (8004bf8 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b5c:	f005 f85e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004b60:	200b      	movs	r0, #11
 8004b62:	f005 f8a5 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8004b66:	4622      	mov	r2, r4
 8004b68:	2106      	movs	r1, #6
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	f005 f856 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004b70:	4650      	mov	r0, sl
 8004b72:	f005 f89d 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8004b76:	4622      	mov	r2, r4
 8004b78:	2106      	movs	r1, #6
 8004b7a:	2010      	movs	r0, #16
 8004b7c:	f005 f84e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004b80:	2010      	movs	r0, #16
 8004b82:	f005 f895 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8004b86:	4622      	mov	r2, r4
 8004b88:	4639      	mov	r1, r7
 8004b8a:	2011      	movs	r0, #17
 8004b8c:	f005 f846 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004b90:	2011      	movs	r0, #17
 8004b92:	f005 f88d 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8004b96:	4622      	mov	r2, r4
 8004b98:	4639      	mov	r1, r7
 8004b9a:	202f      	movs	r0, #47	; 0x2f
 8004b9c:	f005 f83e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004ba0:	202f      	movs	r0, #47	; 0x2f
 8004ba2:	f005 f885 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	2106      	movs	r1, #6
 8004baa:	2039      	movs	r0, #57	; 0x39
 8004bac:	f005 f836 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004bb0:	2039      	movs	r0, #57	; 0x39
 8004bb2:	f005 f87d 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4649      	mov	r1, r9
 8004bba:	203c      	movs	r0, #60	; 0x3c
 8004bbc:	f005 f82e 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004bc0:	203c      	movs	r0, #60	; 0x3c
 8004bc2:	f005 f875 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4639      	mov	r1, r7
 8004bca:	2045      	movs	r0, #69	; 0x45
 8004bcc:	f005 f826 	bl	8009c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004bd0:	2045      	movs	r0, #69	; 0x45
 8004bd2:	e013      	b.n	8004bfc <main+0x340>
 8004bd4:	e000ed00 	.word	0xe000ed00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40021400 	.word	0x40021400
 8004be0:	40020400 	.word	0x40020400
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40020c00 	.word	0x40020c00
 8004bec:	40021800 	.word	0x40021800
 8004bf0:	40020800 	.word	0x40020800
 8004bf4:	40020000 	.word	0x40020000
 8004bf8:	40004400 	.word	0x40004400
 8004bfc:	f005 f858 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004c00:	48bd      	ldr	r0, [pc, #756]	; (8004ef8 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8004c02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c06:	4622      	mov	r2, r4
 8004c08:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004c0a:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004c0e:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004c10:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c14:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004c16:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c1a:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c1e:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c22:	f00f fcd7 	bl	80145d4 <HAL_RS485Ex_Init>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f040 844a 	bne.w	80054c0 <main+0xc04>
	hadc1.Instance = ADC1;
 8004c2c:	4cb3      	ldr	r4, [pc, #716]	; (8004efc <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c2e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004c32:	4bb3      	ldr	r3, [pc, #716]	; (8004f00 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c34:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c36:	9045      	str	r0, [sp, #276]	; 0x114
 8004c38:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c3a:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c3c:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c3e:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c42:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c44:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c46:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004c48:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8004c4a:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c4c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c50:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c54:	4bab      	ldr	r3, [pc, #684]	; (8004f04 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c56:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c5a:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004c5e:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c60:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004c62:	f004 fb9b 	bl	800939c <HAL_ADC_Init>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f040 842a 	bne.w	80054c0 <main+0xc04>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8004c70:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004c72:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004c74:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004c76:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f004 ff4e 	bl	8009b1c <HAL_ADCEx_MultiModeConfigChannel>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 841d 	bne.w	80054c0 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004c86:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004c88:	a945      	add	r1, sp, #276	; 0x114
 8004c8a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c8c:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004c90:	f004 fe50 	bl	8009934 <HAL_ADC_ConfigChannel>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 8413 	bne.w	80054c0 <main+0xc04>
	hadc2.Instance = ADC2;
 8004c9a:	4c9b      	ldr	r4, [pc, #620]	; (8004f08 <main+0x64c>)
 8004c9c:	4b9b      	ldr	r3, [pc, #620]	; (8004f0c <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c9e:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ca0:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ca4:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004ca6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004caa:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004cac:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004cae:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004cb0:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004cb2:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8004cb6:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004cba:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f004 fb6c 	bl	800939c <HAL_ADC_Init>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f040 83fb 	bne.w	80054c0 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004cca:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004ccc:	a941      	add	r1, sp, #260	; 0x104
 8004cce:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd0:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004cd4:	f004 fe2e 	bl	8009934 <HAL_ADC_ConfigChannel>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f040 83f1 	bne.w	80054c0 <main+0xc04>
	hadc3.Instance = ADC3;
 8004cde:	4c8c      	ldr	r4, [pc, #560]	; (8004f10 <main+0x654>)
 8004ce0:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ce2:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004ce4:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ce8:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004cea:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004cee:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004cf0:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8004cf2:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8004cf4:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004cf6:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004cfa:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004cfe:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8004d02:	4620      	mov	r0, r4
 8004d04:	f004 fb4a 	bl	800939c <HAL_ADC_Init>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f040 83d9 	bne.w	80054c0 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d0e:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d10:	a93d      	add	r1, sp, #244	; 0xf4
 8004d12:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d14:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d18:	f004 fe0c 	bl	8009934 <HAL_ADC_ConfigChannel>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 83cf 	bne.w	80054c0 <main+0xc04>
	hrng.Instance = RNG;
 8004d22:	487d      	ldr	r0, [pc, #500]	; (8004f18 <main+0x65c>)
 8004d24:	4b7d      	ldr	r3, [pc, #500]	; (8004f1c <main+0x660>)
 8004d26:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004d28:	f00a fe14 	bl	800f954 <HAL_RNG_Init>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 83c7 	bne.w	80054c0 <main+0xc04>
	htim6.Instance = TIM6;
 8004d32:	4b7b      	ldr	r3, [pc, #492]	; (8004f20 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8004d34:	f642 2230 	movw	r2, #10800	; 0x2a30
 8004d38:	497a      	ldr	r1, [pc, #488]	; (8004f24 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d3a:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3c:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d3e:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8004d42:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8004d46:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d4a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d4e:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8004d50:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d52:	f00c fbef 	bl	8011534 <HAL_TIM_Base_Init>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f040 83b2 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004d5c:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004d5e:	a91f      	add	r1, sp, #124	; 0x7c
 8004d60:	486f      	ldr	r0, [pc, #444]	; (8004f20 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004d62:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004d68:	f00e f84e 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f040 83a7 	bne.w	80054c0 <main+0xc04>
	htim3.Instance = TIM3;
 8004d72:	4c6d      	ldr	r4, [pc, #436]	; (8004f28 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8004d74:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004d78:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8004f4c <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d7c:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d7e:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004d80:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d82:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d84:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d86:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d88:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d8a:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8004d8c:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8004d90:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004d94:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004d98:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004d9c:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004da0:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004da4:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004da8:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004daa:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004dac:	f00c fbc2 	bl	8011534 <HAL_TIM_Base_Init>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f040 8385 	bne.w	80054c0 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004dba:	a939      	add	r1, sp, #228	; 0xe4
 8004dbc:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dbe:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004dc0:	f00b fe4e 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f040 837b 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f00c fd4e 	bl	801186c <HAL_TIM_PWM_Init>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f040 8375 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dd6:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004dd8:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dda:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f00e f813 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f040 836c 	bne.w	80054c0 <main+0xc04>
	sConfigOC.Pulse = 10;
 8004de8:	230a      	movs	r3, #10
 8004dea:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dee:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004df0:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004df2:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004df4:	a955      	add	r1, sp, #340	; 0x154
 8004df6:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004df8:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004dfc:	f00d f8b4 	bl	8011f68 <HAL_TIM_PWM_ConfigChannel>
 8004e00:	4605      	mov	r5, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	f040 835c 	bne.w	80054c0 <main+0xc04>
	HAL_TIM_MspPostInit(&htim3);
 8004e08:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004e0a:	4c48      	ldr	r4, [pc, #288]	; (8004f2c <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004e0c:	f002 fe66 	bl	8007adc <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004e10:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e12:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e14:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8004e16:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004e18:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e1c:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004e1e:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e24:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e28:	f00c fb84 	bl	8011534 <HAL_TIM_Base_Init>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f040 8347 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e32:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e34:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e36:	a919      	add	r1, sp, #100	; 0x64
 8004e38:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e3a:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e3c:	f00d ffe4 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f040 833d 	bne.w	80054c0 <main+0xc04>
	htim1.Instance = TIM1;
 8004e46:	4c3b      	ldr	r4, [pc, #236]	; (8004f34 <main+0x678>)
 8004e48:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e4a:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8004e4c:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8004e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e52:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8004e54:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e56:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8004e5a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e5e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8004e62:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e66:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f00c fb62 	bl	8011534 <HAL_TIM_Base_Init>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f040 8325 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004e76:	a935      	add	r1, sp, #212	; 0xd4
 8004e78:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e7a:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004e7c:	f00b fdf0 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f040 831d 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e86:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004e88:	a916      	add	r1, sp, #88	; 0x58
 8004e8a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e8c:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e8e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004e92:	f00d ffb9 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 8311 	bne.w	80054c0 <main+0xc04>
	hcrc.Instance = CRC;
 8004e9e:	4827      	ldr	r0, [pc, #156]	; (8004f3c <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ea0:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004ea2:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ea4:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004ea6:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <main+0x684>)
 8004eac:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004eae:	f004 ff2d 	bl	8009d0c <HAL_CRC_Init>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f040 8304 	bne.w	80054c0 <main+0xc04>
	htim2.Instance = TIM2;
 8004eb8:	4c22      	ldr	r4, [pc, #136]	; (8004f44 <main+0x688>)
 8004eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004ebe:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004ec0:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8004ec2:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8004ec4:	4b20      	ldr	r3, [pc, #128]	; (8004f48 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004ec6:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004ec8:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004eca:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004ecc:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ece:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed0:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ed2:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8004ed4:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004ed6:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004eda:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004ede:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004ee2:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ee6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004eea:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f00c fb20 	bl	8011534 <HAL_TIM_Base_Init>
 8004ef4:	e02c      	b.n	8004f50 <main+0x694>
 8004ef6:	bf00      	nop
 8004ef8:	20002a38 	.word	0x20002a38
 8004efc:	20002198 	.word	0x20002198
 8004f00:	40012000 	.word	0x40012000
 8004f04:	0f000001 	.word	0x0f000001
 8004f08:	200021e0 	.word	0x200021e0
 8004f0c:	40012100 	.word	0x40012100
 8004f10:	20002228 	.word	0x20002228
 8004f14:	40012200 	.word	0x40012200
 8004f18:	2000269c 	.word	0x2000269c
 8004f1c:	50060800 	.word	0x50060800
 8004f20:	200029a0 	.word	0x200029a0
 8004f24:	40001000 	.word	0x40001000
 8004f28:	200028bc 	.word	0x200028bc
 8004f2c:	200029ec 	.word	0x200029ec
 8004f30:	40001400 	.word	0x40001400
 8004f34:	200027d8 	.word	0x200027d8
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	20002270 	.word	0x20002270
 8004f40:	40023000 	.word	0x40023000
 8004f44:	20002870 	.word	0x20002870
 8004f48:	ee6b2800 	.word	0xee6b2800
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f040 82b5 	bne.w	80054c0 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004f5a:	a92d      	add	r1, sp, #180	; 0xb4
 8004f5c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f5e:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004f60:	f00b fd7e 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f040 82ab 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f00c fd4c 	bl	8011a08 <HAL_TIM_IC_Init>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f040 82a5 	bne.w	80054c0 <main+0xc04>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004f76:	2704      	movs	r7, #4
 8004f78:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f7a:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f7c:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8004f7e:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f80:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004f82:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f86:	f00c f845 	bl	8011014 <HAL_TIM_SlaveConfigSynchro>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	f040 8298 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f90:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004f92:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f94:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004f96:	4620      	mov	r0, r4
 8004f98:	f00d ff36 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f040 828e 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004fa4:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004fa6:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004faa:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f00d f9fa 	bl	80123a8 <HAL_TIM_IC_ConfigChannel>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f040 8283 	bne.w	80054c0 <main+0xc04>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004fba:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004fbc:	463a      	mov	r2, r7
 8004fbe:	a931      	add	r1, sp, #196	; 0xc4
 8004fc0:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004fc2:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004fc4:	f00d f9f0 	bl	80123a8 <HAL_TIM_IC_ConfigChannel>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f040 8279 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004fce:	a931      	add	r1, sp, #196	; 0xc4
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004fd4:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004fd6:	f00d f9e7 	bl	80123a8 <HAL_TIM_IC_ConfigChannel>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f040 8270 	bne.w	80054c0 <main+0xc04>
	huart6.Instance = USART6;
 8004fe0:	48c1      	ldr	r0, [pc, #772]	; (80052e8 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe2:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8004fe4:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004fe8:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8004fea:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fec:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004fee:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8004ff0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ff4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8004ff8:	4bbc      	ldr	r3, [pc, #752]	; (80052ec <main+0xa30>)
 8004ffa:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004ffe:	2310      	movs	r3, #16
 8005000:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005006:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8005008:	f00f f8cc 	bl	80141a4 <HAL_UART_Init>
 800500c:	2800      	cmp	r0, #0
 800500e:	f040 8257 	bne.w	80054c0 <main+0xc04>
	hdac.Instance = DAC;
 8005012:	4cb7      	ldr	r4, [pc, #732]	; (80052f0 <main+0xa34>)
 8005014:	4bb7      	ldr	r3, [pc, #732]	; (80052f4 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8005016:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800501a:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 800501c:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800501e:	f004 ff31 	bl	8009e84 <HAL_DAC_Init>
 8005022:	4602      	mov	r2, r0
 8005024:	2800      	cmp	r0, #0
 8005026:	f040 824b 	bne.w	80054c0 <main+0xc04>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800502a:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800502c:	4620      	mov	r0, r4
 800502e:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005030:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8005032:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8005034:	f005 f882 	bl	800a13c <HAL_DAC_ConfigChannel>
 8005038:	4607      	mov	r7, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	f040 8240 	bne.w	80054c0 <main+0xc04>
	MX_FATFS_Init();
 8005040:	f010 f924 	bl	801528c <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8005044:	4cac      	ldr	r4, [pc, #688]	; (80052f8 <main+0xa3c>)
 8005046:	4bad      	ldr	r3, [pc, #692]	; (80052fc <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005048:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 800504a:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 800504c:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 800504e:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005052:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8005054:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8005058:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800505a:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 800505c:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005060:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005064:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005066:	f008 f937 	bl	800d2d8 <HAL_I2C_Init>
 800506a:	4601      	mov	r1, r0
 800506c:	2800      	cmp	r0, #0
 800506e:	f040 8227 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8005072:	4620      	mov	r0, r4
 8005074:	f008 fc88 	bl	800d988 <HAL_I2CEx_ConfigAnalogFilter>
 8005078:	4601      	mov	r1, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	f040 8220 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005080:	4620      	mov	r0, r4
 8005082:	f008 fcd3 	bl	800da2c <HAL_I2CEx_ConfigDigitalFilter>
 8005086:	4603      	mov	r3, r0
 8005088:	2800      	cmp	r0, #0
 800508a:	f040 8219 	bne.w	80054c0 <main+0xc04>
	huart4.Instance = UART4;
 800508e:	489c      	ldr	r0, [pc, #624]	; (8005300 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8005090:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005094:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005098:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800509a:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800509c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80050a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050a4:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 80050a8:	4b96      	ldr	r3, [pc, #600]	; (8005304 <main+0xa48>)
 80050aa:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80050ae:	f00f f879 	bl	80141a4 <HAL_UART_Init>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f040 8203 	bne.w	80054c0 <main+0xc04>
	huart5.Instance = UART5;
 80050ba:	4893      	ldr	r0, [pc, #588]	; (8005308 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80050bc:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 80050c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050c4:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050c8:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050cc:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 80050ce:	4b8f      	ldr	r3, [pc, #572]	; (800530c <main+0xa50>)
 80050d0:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80050d2:	f00f f867 	bl	80141a4 <HAL_UART_Init>
 80050d6:	4602      	mov	r2, r0
 80050d8:	2800      	cmp	r0, #0
 80050da:	f040 81f1 	bne.w	80054c0 <main+0xc04>
	huart3.Instance = USART3;
 80050de:	488c      	ldr	r0, [pc, #560]	; (8005310 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 80050e0:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 80050e2:	4b8c      	ldr	r3, [pc, #560]	; (8005314 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 80050e4:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 80050e6:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80050e8:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 80050ea:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80050ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80050f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050f4:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 80050f8:	f00f f902 	bl	8014300 <HAL_MultiProcessor_Init>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	f040 81de 	bne.w	80054c0 <main+0xc04>
	hspi4.Instance = SPI4;
 8005104:	4884      	ldr	r0, [pc, #528]	; (8005318 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8005106:	4a85      	ldr	r2, [pc, #532]	; (800531c <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005108:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800510a:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800510e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005112:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800511a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800511e:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005122:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005126:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8005128:	2307      	movs	r3, #7
 800512a:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800512c:	2308      	movs	r3, #8
 800512e:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8005130:	f00a fd46 	bl	800fbc0 <HAL_SPI_Init>
 8005134:	2800      	cmp	r0, #0
 8005136:	f040 81c3 	bne.w	80054c0 <main+0xc04>
	hspi3.Instance = SPI3;
 800513a:	4879      	ldr	r0, [pc, #484]	; (8005320 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 800513c:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800513e:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005142:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005144:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8005146:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8005148:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 800514a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800514c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005150:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005154:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005158:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 800515c:	4b71      	ldr	r3, [pc, #452]	; (8005324 <main+0xa68>)
 800515e:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8005160:	f00a fd2e 	bl	800fbc0 <HAL_SPI_Init>
 8005164:	4603      	mov	r3, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	f040 81aa 	bne.w	80054c0 <main+0xc04>
	hspi2.Instance = SPI2;
 800516c:	486e      	ldr	r0, [pc, #440]	; (8005328 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800516e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8005358 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005172:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005174:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005176:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8005178:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 800517a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800517c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005180:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8005184:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005188:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800518c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005190:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005192:	2338      	movs	r3, #56	; 0x38
 8005194:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005196:	2308      	movs	r3, #8
 8005198:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800519a:	f00a fd11 	bl	800fbc0 <HAL_SPI_Init>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f040 818e 	bne.w	80054c0 <main+0xc04>
	hi2c4.Instance = I2C4;
 80051a4:	4c61      	ldr	r4, [pc, #388]	; (800532c <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051a6:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 80051a8:	4b61      	ldr	r3, [pc, #388]	; (8005330 <main+0xa74>)
 80051aa:	4f62      	ldr	r7, [pc, #392]	; (8005334 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 80051ac:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ae:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051b0:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 80051b2:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051b6:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80051ba:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 80051bc:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80051c0:	f008 f88a 	bl	800d2d8 <HAL_I2C_Init>
 80051c4:	4601      	mov	r1, r0
 80051c6:	2800      	cmp	r0, #0
 80051c8:	f040 817a 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80051cc:	4620      	mov	r0, r4
 80051ce:	f008 fbdb 	bl	800d988 <HAL_I2CEx_ConfigAnalogFilter>
 80051d2:	4601      	mov	r1, r0
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f040 8173 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 80051da:	4620      	mov	r0, r4
 80051dc:	f008 fc26 	bl	800da2c <HAL_I2CEx_ConfigDigitalFilter>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f040 816d 	bne.w	80054c0 <main+0xc04>
	hi2c2.Instance = I2C2;
 80051e6:	4c54      	ldr	r4, [pc, #336]	; (8005338 <main+0xa7c>)
 80051e8:	4b54      	ldr	r3, [pc, #336]	; (800533c <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ea:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 80051ec:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 80051ee:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 80051f0:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 80051f4:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051f8:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80051fc:	4620      	mov	r0, r4
 80051fe:	f008 f86b 	bl	800d2d8 <HAL_I2C_Init>
 8005202:	4601      	mov	r1, r0
 8005204:	2800      	cmp	r0, #0
 8005206:	f040 815b 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800520a:	4620      	mov	r0, r4
 800520c:	f008 fbbc 	bl	800d988 <HAL_I2CEx_ConfigAnalogFilter>
 8005210:	4601      	mov	r1, r0
 8005212:	2800      	cmp	r0, #0
 8005214:	f040 8154 	bne.w	80054c0 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8005218:	4620      	mov	r0, r4
 800521a:	f008 fc07 	bl	800da2c <HAL_I2CEx_ConfigDigitalFilter>
 800521e:	2800      	cmp	r0, #0
 8005220:	f040 814e 	bne.w	80054c0 <main+0xc04>
	htim4.Instance = TIM4;
 8005224:	4c46      	ldr	r4, [pc, #280]	; (8005340 <main+0xa84>)
 8005226:	4b47      	ldr	r3, [pc, #284]	; (8005344 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005228:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 800522a:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 800522c:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005230:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8005232:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005234:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005236:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005238:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800523a:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800523c:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800523e:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005242:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 8005246:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 800524a:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005252:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8005256:	4620      	mov	r0, r4
 8005258:	f00c f96c 	bl	8011534 <HAL_TIM_Base_Init>
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 812f 	bne.w	80054c0 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8005266:	a929      	add	r1, sp, #164	; 0xa4
 8005268:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800526a:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800526c:	f00b fbf8 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 8005270:	2800      	cmp	r0, #0
 8005272:	f040 8125 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8005276:	4620      	mov	r0, r4
 8005278:	f00c fa2a 	bl	80116d0 <HAL_TIM_OC_Init>
 800527c:	2800      	cmp	r0, #0
 800527e:	f040 811f 	bne.w	80054c0 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8005282:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005284:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8005286:	a910      	add	r1, sp, #64	; 0x40
 8005288:	482d      	ldr	r0, [pc, #180]	; (8005340 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800528a:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800528c:	f00d fdbc 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 8005290:	2800      	cmp	r0, #0
 8005292:	f040 8115 	bne.w	80054c0 <main+0xc04>
	sConfigOC.Pulse = 550;
 8005296:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800529a:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800529c:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800529e:	2208      	movs	r2, #8
 80052a0:	a94e      	add	r1, sp, #312	; 0x138
 80052a2:	4827      	ldr	r0, [pc, #156]	; (8005340 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80052a4:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 80052a6:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80052a8:	f00c fce0 	bl	8011c6c <HAL_TIM_OC_ConfigChannel>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f040 8107 	bne.w	80054c0 <main+0xc04>
	HAL_TIM_MspPostInit(&htim4);
 80052b2:	4823      	ldr	r0, [pc, #140]	; (8005340 <main+0xa84>)
 80052b4:	f002 fc12 	bl	8007adc <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 80052b8:	4823      	ldr	r0, [pc, #140]	; (8005348 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 80052ba:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80052be:	4f23      	ldr	r7, [pc, #140]	; (800534c <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 80052c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80052c4:	2306      	movs	r3, #6
 80052c6:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80052ca:	f008 fbff 	bl	800dacc <HAL_IWDG_Init>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 80f5 	bne.w	80054c0 <main+0xc04>
	htim14.Instance = TIM14;
 80052d6:	481e      	ldr	r0, [pc, #120]	; (8005350 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052dc:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <main+0xa98>)
 80052e0:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 80052e2:	f642 2330 	movw	r3, #10800	; 0x2a30
 80052e6:	e039      	b.n	800535c <main+0xaa0>
 80052e8:	20002c48 	.word	0x20002c48
 80052ec:	40011400 	.word	0x40011400
 80052f0:	20002294 	.word	0x20002294
 80052f4:	40007400 	.word	0x40007400
 80052f8:	200025a8 	.word	0x200025a8
 80052fc:	40005400 	.word	0x40005400
 8005300:	20002b40 	.word	0x20002b40
 8005304:	40004c00 	.word	0x40004c00
 8005308:	20002bc4 	.word	0x20002bc4
 800530c:	40005000 	.word	0x40005000
 8005310:	20002abc 	.word	0x20002abc
 8005314:	40004800 	.word	0x40004800
 8005318:	20002774 	.word	0x20002774
 800531c:	40013400 	.word	0x40013400
 8005320:	20002710 	.word	0x20002710
 8005324:	40003c00 	.word	0x40003c00
 8005328:	200026ac 	.word	0x200026ac
 800532c:	20002640 	.word	0x20002640
 8005330:	40006000 	.word	0x40006000
 8005334:	20404768 	.word	0x20404768
 8005338:	200025f4 	.word	0x200025f4
 800533c:	40005800 	.word	0x40005800
 8005340:	20002908 	.word	0x20002908
 8005344:	40000800 	.word	0x40000800
 8005348:	2000268c 	.word	0x2000268c
 800534c:	40003000 	.word	0x40003000
 8005350:	20002824 	.word	0x20002824
 8005354:	40002000 	.word	0x40002000
 8005358:	40003800 	.word	0x40003800
 800535c:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8005362:	f00c f8e7 	bl	8011534 <HAL_TIM_Base_Init>
 8005366:	2800      	cmp	r0, #0
 8005368:	f040 80aa 	bne.w	80054c0 <main+0xc04>
	htim5.Instance = TIM5;
 800536c:	4f55      	ldr	r7, [pc, #340]	; (80054c4 <main+0xc08>)
	htim5.Init.Period = 4;
 800536e:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8005370:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80054f8 <main+0xc3c>
	htim5.Init.Period = 4;
 8005374:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8005378:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800537a:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800537c:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800537e:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8005380:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005384:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8005388:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800538c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8005390:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8005392:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8005396:	f00c f8cd 	bl	8011534 <HAL_TIM_Base_Init>
 800539a:	2800      	cmp	r0, #0
 800539c:	f040 8090 	bne.w	80054c0 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053a0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053a4:	a925      	add	r1, sp, #148	; 0x94
 80053a6:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053a8:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053aa:	f00b fb59 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f040 8085 	bne.w	80054c0 <main+0xc04>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80053b6:	4638      	mov	r0, r7
 80053b8:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ba:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053bc:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80053be:	f00d fd23 	bl	8012e08 <HAL_TIMEx_MasterConfigSynchronization>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d17b      	bne.n	80054c0 <main+0xc04>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80053c8:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 80053cc:	483e      	ldr	r0, [pc, #248]	; (80054c8 <main+0xc0c>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80053ce:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 80053d2:	493e      	ldr	r1, [pc, #248]	; (80054cc <main+0xc10>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80053d4:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 80053d8:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 80053da:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80053de:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 80053e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80053e8:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 80053ec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80053f0:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 80053f4:	f00e fed6 	bl	80141a4 <HAL_UART_Init>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d160      	bne.n	80054c0 <main+0xc04>
	huart7.Instance = UART7;
 80053fe:	4834      	ldr	r0, [pc, #208]	; (80054d0 <main+0xc14>)
	huart7.Init.BaudRate = 115200;
 8005400:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <main+0xc18>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8005402:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005404:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005406:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005408:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 800540a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800540e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8005412:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005416:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800541a:	230c      	movs	r3, #12
 800541c:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800541e:	f00e fec1 	bl	80141a4 <HAL_UART_Init>
 8005422:	2800      	cmp	r0, #0
 8005424:	d14c      	bne.n	80054c0 <main+0xc04>
	osMutexDef(myMutex01);
 8005426:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8005428:	f7fe fb54 	bl	8003ad4 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800542c:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 800542e:	4c2a      	ldr	r4, [pc, #168]	; (80054d8 <main+0xc1c>)
	osMutexDef(myMutex01);
 8005430:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005434:	f011 f92c 	bl	8016690 <osMutexCreate>
 8005438:	4b28      	ldr	r3, [pc, #160]	; (80054dc <main+0xc20>)
 800543a:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800543c:	2101      	movs	r1, #1
 800543e:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8005440:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005444:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8005446:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800544a:	f011 f97d 	bl	8016748 <osSemaphoreCreate>
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <main+0xc24>)
 8005450:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8005452:	2101      	movs	r1, #1
 8005454:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8005456:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8005458:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800545a:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 800545c:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <main+0xc28>)
 800545e:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8005460:	f011 f8f4 	bl	801664c <osTimerCreate>
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <main+0xc2c>)
 8005466:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8005468:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800546c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	f011 f9e2 	bl	801683c <osMessageCreate>
 8005478:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <main+0xc30>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800547a:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800547c:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800547e:	6018      	str	r0, [r3, #0]
	cycleleds();
 8005480:	f001 fa04 	bl	800688c <cycleleds>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8005484:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005488:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800548c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005490:	4631      	mov	r1, r6
 8005492:	a84e      	add	r0, sp, #312	; 0x138
 8005494:	f011 f8a0 	bl	80165d8 <osThreadCreate>
 8005498:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <main+0xc34>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800549a:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800549c:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800549e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80054a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 80054aa:	4631      	mov	r1, r6
 80054ac:	a855      	add	r0, sp, #340	; 0x154
 80054ae:	f011 f893 	bl	80165d8 <osThreadCreate>
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <main+0xc38>)
 80054b4:	6018      	str	r0, [r3, #0]
	vTaskSuspend(LPTaskHandle);			// don't allow it to autostart
 80054b6:	f012 fa4d 	bl	8017954 <vTaskSuspend>
	osKernelStart();
 80054ba:	f011 f87f 	bl	80165bc <osKernelStart>
	while (1) {
 80054be:	e7fe      	b.n	80054be <main+0xc02>
		Error_Handler();
 80054c0:	f7ff f980 	bl	80047c4 <Error_Handler>
 80054c4:	20002954 	.word	0x20002954
 80054c8:	20002d50 	.word	0x20002d50
 80054cc:	40007c00 	.word	0x40007c00
 80054d0:	20002ccc 	.word	0x20002ccc
 80054d4:	40007800 	.word	0x40007800
 80054d8:	0802a860 	.word	0x0802a860
 80054dc:	20002de8 	.word	0x20002de8
 80054e0:	20002e0c 	.word	0x20002e0c
 80054e4:	08003b39 	.word	0x08003b39
 80054e8:	20002df0 	.word	0x20002df0
 80054ec:	20002dec 	.word	0x20002dec
 80054f0:	2000218c 	.word	0x2000218c
 80054f4:	2000217c 	.word	0x2000217c
 80054f8:	40000c00 	.word	0x40000c00

080054fc <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 80054fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005500:	b087      	sub	sp, #28
	MX_USB_DEVICE_Init();
 8005502:	f01f fc67 	bl	8024dd4 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8005506:	f00f fee5 	bl	80152d4 <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 800550a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800550e:	48bd      	ldr	r0, [pc, #756]	; (8005804 <StartDefaultTask+0x308>)
 8005510:	f007 fc9c 	bl	800ce4c <HAL_GPIO_ReadPin>
 8005514:	2801      	cmp	r0, #1
 8005516:	f000 814c 	beq.w	80057b2 <StartDefaultTask+0x2b6>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 800551a:	f7fb fb79 	bl	8000c10 <stampboot>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800551e:	4dba      	ldr	r5, [pc, #744]	; (8005808 <StartDefaultTask+0x30c>)
	getboardpcb();		// find our daughterboard
 8005520:	f7ff f8c0 	bl	80046a4 <getboardpcb>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005524:	f8df 839c 	ldr.w	r8, [pc, #924]	; 80058c4 <StartDefaultTask+0x3c8>
 8005528:	2714      	movs	r7, #20
	printf("%s----------------------------------------------------------------------------\n", str);
 800552a:	49b8      	ldr	r1, [pc, #736]	; (800580c <StartDefaultTask+0x310>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800552c:	f242 7634 	movw	r6, #10036	; 0x2734
	printf("%s----------------------------------------------------------------------------\n", str);
 8005530:	48b7      	ldr	r0, [pc, #732]	; (8005810 <StartDefaultTask+0x314>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005532:	2400      	movs	r4, #0
	printf("%s----------------------------------------------------------------------------\n", str);
 8005534:	f021 f906 	bl	8026744 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005538:	f8d8 0000 	ldr.w	r0, [r8]
 800553c:	f505 6184 	add.w	r1, r5, #1056	; 0x420
 8005540:	c90e      	ldmia	r1, {r1, r2, r3}
 8005542:	9003      	str	r0, [sp, #12]
 8005544:	9400      	str	r4, [sp, #0]
 8005546:	48b3      	ldr	r0, [pc, #716]	; (8005814 <StartDefaultTask+0x318>)
 8005548:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800554c:	f021 f8fa 	bl	8026744 <iprintf>
	crc_rom();
 8005550:	f7fe fb1a 	bl	8003b88 <crc_rom>
	printf("%s----------------------------------------------------------------------------\n", str);
 8005554:	49b0      	ldr	r1, [pc, #704]	; (8005818 <StartDefaultTask+0x31c>)
 8005556:	48ae      	ldr	r0, [pc, #696]	; (8005810 <StartDefaultTask+0x314>)
 8005558:	f021 f8f4 	bl	8026744 <iprintf>
	cycleleds();
 800555c:	f001 f996 	bl	800688c <cycleleds>
	init_nextion();			// initilise the LCD display
 8005560:	f7fe fa32 	bl	80039c8 <init_nextion>
	if (!(netif_is_link_up(&gnetif))) {
 8005564:	4bad      	ldr	r3, [pc, #692]	; (800581c <StartDefaultTask+0x320>)
 8005566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800556a:	075b      	lsls	r3, r3, #29
 800556c:	d41e      	bmi.n	80055ac <StartDefaultTask+0xb0>
		printf("LAN interface appears disconnected\n\r");
 800556e:	48ac      	ldr	r0, [pc, #688]	; (8005820 <StartDefaultTask+0x324>)
 8005570:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8005572:	4dac      	ldr	r5, [pc, #688]	; (8005824 <StartDefaultTask+0x328>)
		printf("LAN interface appears disconnected\n\r");
 8005574:	f021 f8e6 	bl	8026744 <iprintf>
			osDelay(50);
 8005578:	2032      	movs	r0, #50	; 0x32
 800557a:	f011 f85f 	bl	801663c <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800557e:	2201      	movs	r2, #1
 8005580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005584:	4628      	mov	r0, r5
 8005586:	f007 fc73 	bl	800ce70 <HAL_GPIO_WritePin>
			osDelay(50);
 800558a:	2032      	movs	r0, #50	; 0x32
 800558c:	f011 f856 	bl	801663c <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005596:	4628      	mov	r0, r5
 8005598:	f007 fc6a 	bl	800ce70 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 800559c:	3c01      	subs	r4, #1
 800559e:	d1eb      	bne.n	8005578 <StartDefaultTask+0x7c>
		printf("************* REBOOTING **************\n");
 80055a0:	48a1      	ldr	r0, [pc, #644]	; (8005828 <StartDefaultTask+0x32c>)
 80055a2:	f021 f96b 	bl	802687c <puts>
		rebootme(0);
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7fe fb8e 	bl	8003cc8 <rebootme>
	netif = netif_default;
 80055ac:	4b9f      	ldr	r3, [pc, #636]	; (800582c <StartDefaultTask+0x330>)
 80055ae:	f8df 9318 	ldr.w	r9, [pc, #792]	; 80058c8 <StartDefaultTask+0x3cc>
 80055b2:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 80055b4:	4b9e      	ldr	r3, [pc, #632]	; (8005830 <StartDefaultTask+0x334>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055b6:	499f      	ldr	r1, [pc, #636]	; (8005834 <StartDefaultTask+0x338>)
	globalfreeze = 0;		// Allow UDP streaming
 80055b8:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 80055ba:	f8c9 0000 	str.w	r0, [r9]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055be:	f016 fccd 	bl	801bf5c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 80055c2:	499d      	ldr	r1, [pc, #628]	; (8005838 <StartDefaultTask+0x33c>)
 80055c4:	f8d9 0000 	ldr.w	r0, [r9]
 80055c8:	f016 fc84 	bl	801bed4 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80055cc:	4b9b      	ldr	r3, [pc, #620]	; (800583c <StartDefaultTask+0x340>)
 80055ce:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 80055d2:	f8d8 0000 	ldr.w	r0, [r8]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80055d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 80055da:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 80055dc:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 80055e0:	f883 7071 	strb.w	r7, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 80055e4:	f8a3 6084 	strh.w	r6, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 80055e8:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 80055ea:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 80055ec:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 80055ee:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 80055f0:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 80055f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 80055f8:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80055fa:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 80055fc:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8005600:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8005604:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005608:	f041 0101 	orr.w	r1, r1, #1
 800560c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005610:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005614:	498a      	ldr	r1, [pc, #552]	; (8005840 <StartDefaultTask+0x344>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005616:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800561a:	488a      	ldr	r0, [pc, #552]	; (8005844 <StartDefaultTask+0x348>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 800561c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8005620:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005624:	b292      	uxth	r2, r2
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005626:	9201      	str	r2, [sp, #4]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8005628:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800562c:	9202      	str	r2, [sp, #8]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800562e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
	t2cap[0] = 44444444;
 8005632:	4a85      	ldr	r2, [pc, #532]	; (8005848 <StartDefaultTask+0x34c>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005634:	9303      	str	r3, [sp, #12]
	t2cap[0] = 44444444;
 8005636:	4b85      	ldr	r3, [pc, #532]	; (800584c <StartDefaultTask+0x350>)
 8005638:	601a      	str	r2, [r3, #0]
	newbuild = BUILDNO;				// init to the same
 800563a:	4b85      	ldr	r3, [pc, #532]	; (8005850 <StartDefaultTask+0x354>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800563c:	4a85      	ldr	r2, [pc, #532]	; (8005854 <StartDefaultTask+0x358>)
	newbuild = BUILDNO;				// init to the same
 800563e:	601e      	str	r6, [r3, #0]
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005640:	4b85      	ldr	r3, [pc, #532]	; (8005858 <StartDefaultTask+0x35c>)
 8005642:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005646:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 8005650:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 8005654:	f021 fa60 	bl	8026b18 <siprintf>
	initsplat();
 8005658:	f001 fdca 	bl	80071f0 <initsplat>
	stat = setupneo();
 800565c:	f000 fb10 	bl	8005c80 <setupneo>
	if (stat != HAL_OK) {
 8005660:	2800      	cmp	r0, #0
 8005662:	f040 80a9 	bne.w	80057b8 <StartDefaultTask+0x2bc>
	printf("Setting up timers\n");
 8005666:	487d      	ldr	r0, [pc, #500]	; (800585c <StartDefaultTask+0x360>)
 8005668:	f021 f908 	bl	802687c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800566c:	2300      	movs	r3, #0
 800566e:	487c      	ldr	r0, [pc, #496]	; (8005860 <StartDefaultTask+0x364>)
 8005670:	461a      	mov	r2, r3
 8005672:	4619      	mov	r1, r3
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f011 fb0b 	bl	8016c90 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800567a:	487a      	ldr	r0, [pc, #488]	; (8005864 <StartDefaultTask+0x368>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 800567c:	4c7a      	ldr	r4, [pc, #488]	; (8005868 <StartDefaultTask+0x36c>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800567e:	f00b f92d 	bl	80108dc <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8005682:	2200      	movs	r2, #0
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4611      	mov	r1, r2
 8005688:	f00d f852 	bl	8012730 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 800568c:	2200      	movs	r2, #0
 800568e:	2104      	movs	r1, #4
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	f00d f84d 	bl	8012730 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8005696:	2200      	movs	r2, #0
 8005698:	210c      	movs	r1, #12
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	f00d f848 	bl	8012730 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80056a0:	2100      	movs	r1, #0
 80056a2:	4620      	mov	r0, r4
 80056a4:	f00d fa92 	bl	8012bcc <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80056a8:	2104      	movs	r1, #4
 80056aa:	4620      	mov	r0, r4
 80056ac:	f00d fa8e 	bl	8012bcc <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80056b0:	210c      	movs	r1, #12
 80056b2:	4620      	mov	r0, r4
 80056b4:	f00d fa8a 	bl	8012bcc <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80056b8:	2301      	movs	r3, #1
 80056ba:	4a64      	ldr	r2, [pc, #400]	; (800584c <StartDefaultTask+0x350>)
 80056bc:	2108      	movs	r1, #8
 80056be:	4620      	mov	r0, r4
 80056c0:	f00d f894 	bl	80127ec <HAL_TIM_IC_Start_DMA>
 80056c4:	b128      	cbz	r0, 80056d2 <StartDefaultTask+0x1d6>
		printf("TIM_Base_Start_DMA err %i", err);
 80056c6:	4601      	mov	r1, r0
 80056c8:	4868      	ldr	r0, [pc, #416]	; (800586c <StartDefaultTask+0x370>)
 80056ca:	f021 f83b 	bl	8026744 <iprintf>
		Error_Handler();
 80056ce:	f7ff f879 	bl	80047c4 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	2201      	movs	r2, #1
 80056d6:	2108      	movs	r1, #8
	myip = ip.addr;
 80056d8:	4c65      	ldr	r4, [pc, #404]	; (8005870 <StartDefaultTask+0x374>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80056da:	f00d f829 	bl	8012730 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80056de:	f8d9 3000 	ldr.w	r3, [r9]
	ip = dhcp->offered_ip_addr;
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 80056e6:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d069      	beq.n	80057c0 <StartDefaultTask+0x2c4>
	printf("*****************************************\n");
 80056ec:	4861      	ldr	r0, [pc, #388]	; (8005874 <StartDefaultTask+0x378>)
 80056ee:	f021 f8c5 	bl	802687c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80056f2:	6821      	ldr	r1, [r4, #0]
 80056f4:	4860      	ldr	r0, [pc, #384]	; (8005878 <StartDefaultTask+0x37c>)
 80056f6:	0e0a      	lsrs	r2, r1, #24
 80056f8:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 80056fc:	4c5f      	ldr	r4, [pc, #380]	; (800587c <StartDefaultTask+0x380>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80056fe:	9200      	str	r2, [sp, #0]
 8005700:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005704:	b2c9      	uxtb	r1, r1
 8005706:	f021 f81d 	bl	8026744 <iprintf>
	printf("*****************************************\n");
 800570a:	485a      	ldr	r0, [pc, #360]	; (8005874 <StartDefaultTask+0x378>)
 800570c:	f021 f8b6 	bl	802687c <puts>
	HAL_IWDG_Refresh(&hiwdg);						// refresh the hardware watchdog reset system timer
 8005710:	485b      	ldr	r0, [pc, #364]	; (8005880 <StartDefaultTask+0x384>)
 8005712:	f008 fa31 	bl	800db78 <HAL_IWDG_Refresh>
	initialapisn();									// get initial s/n and UDP target from http server; reboots if fails
 8005716:	f003 fd41 	bl	800919c <initialapisn>
	osDelay(3000);		// wait for server to populate us (ZZZ)
 800571a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800571e:	f010 ff8d 	bl	801663c <osDelay>
	if (http_downloading) {
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d154      	bne.n	80057d2 <StartDefaultTask+0x2d6>
	nxt_update();		// check if LCD needs updating
 8005728:	f000 ff4e 	bl	80065c8 <nxt_update>
	if (http_downloading) {
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d163      	bne.n	80057fa <StartDefaultTask+0x2fe>
	osDelay(3000);		// wait for server to respond
 8005732:	f640 30b8 	movw	r0, #3000	; 0xbb8
	uip = locateudp();
 8005736:	4d53      	ldr	r5, [pc, #332]	; (8005884 <StartDefaultTask+0x388>)
	osDelay(3000);		// wait for server to respond
 8005738:	f010 ff80 	bl	801663c <osDelay>
	vTaskResume(LPTaskHandle);		// allow it to start
 800573c:	4b52      	ldr	r3, [pc, #328]	; (8005888 <StartDefaultTask+0x38c>)
	while (lptask_init_done == 0)
 800573e:	4c53      	ldr	r4, [pc, #332]	; (800588c <StartDefaultTask+0x390>)
	vTaskResume(LPTaskHandle);		// allow it to start
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f012 f997 	bl	8017a74 <vTaskResume>
	printf("Starting httpd web server\n");
 8005746:	4852      	ldr	r0, [pc, #328]	; (8005890 <StartDefaultTask+0x394>)
 8005748:	f021 f898 	bl	802687c <puts>
	httpd_init();		// start the www server
 800574c:	f014 fe74 	bl	801a438 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8005750:	f003 fb24 	bl	8008d9c <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8005754:	484f      	ldr	r0, [pc, #316]	; (8005894 <StartDefaultTask+0x398>)
 8005756:	f021 f891 	bl	802687c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 800575a:	2008      	movs	r0, #8
 800575c:	4a4e      	ldr	r2, [pc, #312]	; (8005898 <StartDefaultTask+0x39c>)
 800575e:	2100      	movs	r1, #0
 8005760:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005764:	9000      	str	r0, [sp, #0]
 8005766:	484d      	ldr	r0, [pc, #308]	; (800589c <StartDefaultTask+0x3a0>)
 8005768:	f004 fbb0 	bl	8009ecc <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 800576c:	484c      	ldr	r0, [pc, #304]	; (80058a0 <StartDefaultTask+0x3a4>)
 800576e:	f00a fffd 	bl	801076c <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8005772:	f012 fcbd 	bl	80180f0 <xTaskGetCurrentTaskHandle>
 8005776:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <StartDefaultTask+0x3a8>)
 8005778:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 800577a:	f002 ffc3 	bl	8008704 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <StartDefaultTask+0x3ac>)
 8005780:	2201      	movs	r2, #1
	uip = locateudp();
 8005782:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 8005784:	4849      	ldr	r0, [pc, #292]	; (80058ac <StartDefaultTask+0x3b0>)
	main_init_done = 1; // let lptask now main has initialised
 8005786:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8005788:	f021 f878 	bl	802687c <puts>
	while (lptask_init_done == 0)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	b92b      	cbnz	r3, 800579c <StartDefaultTask+0x2a0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8005790:	2064      	movs	r0, #100	; 0x64
 8005792:	f010 ff53 	bl	801663c <osDelay>
	while (lptask_init_done == 0)
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f9      	beq.n	8005790 <StartDefaultTask+0x294>
	startadc();		// start the ADC DMA loop
 800579c:	f7fb f9ae 	bl	8000afc <startadc>
		startudp(uip);	// should never return
 80057a0:	6828      	ldr	r0, [r5, #0]
 80057a2:	f002 ffe5 	bl	8008770 <startudp>
		printf("UDP stream exited!!!\n\r");
 80057a6:	4842      	ldr	r0, [pc, #264]	; (80058b0 <StartDefaultTask+0x3b4>)
 80057a8:	f020 ffcc 	bl	8026744 <iprintf>
		rebootme(4);
 80057ac:	2004      	movs	r0, #4
 80057ae:	f7fe fa8b 	bl	8003cc8 <rebootme>
		swapboot();	//  swap the boot vector
 80057b2:	f7fb fb87 	bl	8000ec4 <swapboot>
 80057b6:	e6b2      	b.n	800551e <StartDefaultTask+0x22>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 80057b8:	483e      	ldr	r0, [pc, #248]	; (80058b4 <StartDefaultTask+0x3b8>)
 80057ba:	f020 ffc3 	bl	8026744 <iprintf>
 80057be:	e752      	b.n	8005666 <StartDefaultTask+0x16a>
		printf("***** DHCP Failed ******\n");
 80057c0:	483d      	ldr	r0, [pc, #244]	; (80058b8 <StartDefaultTask+0x3bc>)
 80057c2:	f021 f85b 	bl	802687c <puts>
		osDelay(200);
 80057c6:	20c8      	movs	r0, #200	; 0xc8
 80057c8:	f010 ff38 	bl	801663c <osDelay>
		rebootme(1);
 80057cc:	2001      	movs	r0, #1
 80057ce:	f7fe fa7b 	bl	8003cc8 <rebootme>
		printf("STM Downloading...\n");
 80057d2:	483a      	ldr	r0, [pc, #232]	; (80058bc <StartDefaultTask+0x3c0>)
			HAL_IWDG_Refresh(&hiwdg);
 80057d4:	4d2a      	ldr	r5, [pc, #168]	; (8005880 <StartDefaultTask+0x384>)
		printf("STM Downloading...\n");
 80057d6:	f021 f851 	bl	802687c <puts>
		while (http_downloading) {
 80057da:	e006      	b.n	80057ea <StartDefaultTask+0x2ee>
			HAL_IWDG_Refresh(&hiwdg);
 80057dc:	4628      	mov	r0, r5
 80057de:	f008 f9cb 	bl	800db78 <HAL_IWDG_Refresh>
			osDelay(1000);
 80057e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057e6:	f010 ff29 	bl	801663c <osDelay>
		while (http_downloading) {
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1f5      	bne.n	80057dc <StartDefaultTask+0x2e0>
		osDelay(5000);		// allow time for it to get to reboot if its going to
 80057f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80057f4:	f010 ff22 	bl	801663c <osDelay>
 80057f8:	e796      	b.n	8005728 <StartDefaultTask+0x22c>
		printf("LCD Downloading...\n");
 80057fa:	4831      	ldr	r0, [pc, #196]	; (80058c0 <StartDefaultTask+0x3c4>)
			HAL_IWDG_Refresh(&hiwdg);
 80057fc:	4d20      	ldr	r5, [pc, #128]	; (8005880 <StartDefaultTask+0x384>)
		printf("LCD Downloading...\n");
 80057fe:	f021 f83d 	bl	802687c <puts>
		while (http_downloading) {
 8005802:	e06a      	b.n	80058da <StartDefaultTask+0x3de>
 8005804:	40020800 	.word	0x40020800
 8005808:	1ff0f000 	.word	0x1ff0f000
 800580c:	0802c854 	.word	0x0802c854
 8005810:	0802c784 	.word	0x0802c784
 8005814:	0802c858 	.word	0x0802c858
 8005818:	0802b6a0 	.word	0x0802b6a0
 800581c:	2000359c 	.word	0x2000359c
 8005820:	0802c898 	.word	0x0802c898
 8005824:	40020c00 	.word	0x40020c00
 8005828:	0802c8c0 	.word	0x0802c8c0
 800582c:	2002e48c 	.word	0x2002e48c
 8005830:	200034a4 	.word	0x200034a4
 8005834:	08003cd1 	.word	0x08003cd1
 8005838:	08003b2d 	.word	0x08003b2d
 800583c:	2000303c 	.word	0x2000303c
 8005840:	0802c8e8 	.word	0x0802c8e8
 8005844:	200000c0 	.word	0x200000c0
 8005848:	02a62b1c 	.word	0x02a62b1c
 800584c:	200007a4 	.word	0x200007a4
 8005850:	20002dfc 	.word	0x20002dfc
 8005854:	200034b4 	.word	0x200034b4
 8005858:	20003530 	.word	0x20003530
 800585c:	0802c950 	.word	0x0802c950
 8005860:	20002e0c 	.word	0x20002e0c
 8005864:	200029a0 	.word	0x200029a0
 8005868:	20002870 	.word	0x20002870
 800586c:	0802c964 	.word	0x0802c964
 8005870:	20002df4 	.word	0x20002df4
 8005874:	0802c99c 	.word	0x0802c99c
 8005878:	0802c9c8 	.word	0x0802c9c8
 800587c:	200018dc 	.word	0x200018dc
 8005880:	2000268c 	.word	0x2000268c
 8005884:	20002e1c 	.word	0x20002e1c
 8005888:	2000217c 	.word	0x2000217c
 800588c:	20002de0 	.word	0x20002de0
 8005890:	0802ca04 	.word	0x0802ca04
 8005894:	0802ca20 	.word	0x0802ca20
 8005898:	0802ca84 	.word	0x0802ca84
 800589c:	20002294 	.word	0x20002294
 80058a0:	200029ec 	.word	0x200029ec
 80058a4:	20000838 	.word	0x20000838
 80058a8:	20002de4 	.word	0x20002de4
 80058ac:	0802ca3c 	.word	0x0802ca3c
 80058b0:	0802ca6c 	.word	0x0802ca6c
 80058b4:	0802c930 	.word	0x0802c930
 80058b8:	0802c980 	.word	0x0802c980
 80058bc:	0802c9f0 	.word	0x0802c9f0
 80058c0:	0802ca58 	.word	0x0802ca58
 80058c4:	20002180 	.word	0x20002180
 80058c8:	20002df8 	.word	0x20002df8
			HAL_IWDG_Refresh(&hiwdg);
 80058cc:	4628      	mov	r0, r5
 80058ce:	f008 f953 	bl	800db78 <HAL_IWDG_Refresh>
			osDelay(1000);
 80058d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058d6:	f010 feb1 	bl	801663c <osDelay>
		while (http_downloading) {
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f5      	bne.n	80058cc <StartDefaultTask+0x3d0>
 80058e0:	e727      	b.n	8005732 <StartDefaultTask+0x236>
 80058e2:	bf00      	nop

080058e4 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80058e8:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 80058ea:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 80058ec:	b083      	sub	sp, #12
 80058ee:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 80058f0:	d009      	beq.n	8005906 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80058f2:	230a      	movs	r3, #10
 80058f4:	2201      	movs	r2, #1
 80058f6:	a901      	add	r1, sp, #4
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <__io_putchar+0x34>)
 80058fa:	f00e fbab 	bl	8014054 <HAL_UART_Transmit>

	return ch;
	}
}
 80058fe:	9801      	ldr	r0, [sp, #4]
 8005900:	b003      	add	sp, #12
 8005902:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8005906:	4603      	mov	r3, r0
 8005908:	2202      	movs	r2, #2
 800590a:	4905      	ldr	r1, [pc, #20]	; (8005920 <__io_putchar+0x38>)
 800590c:	4803      	ldr	r0, [pc, #12]	; (800591c <__io_putchar+0x34>)
 800590e:	f00e fba1 	bl	8014054 <HAL_UART_Transmit>
}
 8005912:	9801      	ldr	r0, [sp, #4]
 8005914:	b003      	add	sp, #12
 8005916:	f85d fb04 	ldr.w	pc, [sp], #4
 800591a:	bf00      	nop
 800591c:	20002a38 	.word	0x20002a38
 8005920:	0802b560 	.word	0x0802b560

08005924 <movavg>:
}


// moving avg, used by:-
// clktrim
uint32_t movavg(uint32_t new) {
 8005924:	b410      	push	{r4}
 8005926:	4c08      	ldr	r4, [pc, #32]	; (8005948 <movavg+0x24>)
	static uint32_t data[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int i;
	uint32_t sum = 0;
 8005928:	2100      	movs	r1, #0
 800592a:	4623      	mov	r3, r4
 800592c:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c

	for (i = 0; i < 15; i++) {
		data[i] = data[i + 1];		// old data is low index
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8005936:	4563      	cmp	r3, ip
		sum += data[i];
 8005938:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 800593a:	d1f9      	bne.n	8005930 <movavg+0xc>
	}
	data[15] = new;		// new data at the end
	sum += new;
 800593c:	4401      	add	r1, r0
	data[15] = new;		// new data at the end
 800593e:	63e0      	str	r0, [r4, #60]	; 0x3c

	return (sum >> 4);
}
 8005940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005944:	0908      	lsrs	r0, r1, #4
 8005946:	4770      	bx	lr
 8005948:	20002e20 	.word	0x20002e20
 800594c:	ffffffff 	.word	0xffffffff

08005950 <calcLocator>:
void calcLocator(char *dst, double lat, double lon) {
  int o1, o2, o3;
  int a1, a2, a3;
  double remainder;
  // longitude
  remainder = lon + 180.0;
 8005950:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005a08 <calcLocator+0xb8>
  o1 = (int)(remainder / 20.0);
 8005954:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
  dst[1] = (char)a1 + 'A';
  dst[2] = (char)o2 + '0';
  dst[3] = (char)a2 + '0';
  dst[4] = (char)o3 + 'A';
  dst[5] = (char)a3 + 'A';
  dst[6] = (char)0;
 8005958:	2300      	movs	r3, #0
  a1 = (int)(remainder / 10.0);
 800595a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  remainder = lon + 180.0;
 800595e:	ee31 1b07 	vadd.f64	d1, d1, d7
  dst[6] = (char)0;
 8005962:	7183      	strb	r3, [r0, #6]
  o2 = (int)(remainder / 2.0);
 8005964:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  remainder = remainder - 2.0 * (double)o2;
 8005968:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
  o3 = (int)(12.0 * remainder);
 800596c:	eeb2 4b08 	vmov.f64	d4, #40	; 0x41400000  12.0
  remainder = lat + 90.0;
 8005970:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8005a10 <calcLocator+0xc0>
void calcLocator(char *dst, double lat, double lon) {
 8005974:	ed2d 8b02 	vpush	{d8}
  remainder = lat + 90.0;
 8005978:	ee30 0b06 	vadd.f64	d0, d0, d6
  o1 = (int)(remainder / 20.0);
 800597c:	ee81 6b02 	vdiv.f64	d6, d1, d2
 8005980:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  remainder = remainder - (double)o1 * 20.0;
 8005984:	eeb8 8bc6 	vcvt.f64.s32	d8, s12
  dst[0] = (char)o1 + 'A';
 8005988:	ee16 3a10 	vmov	r3, s12
  a1 = (int)(remainder / 10.0);
 800598c:	ee80 6b05 	vdiv.f64	d6, d0, d5
  dst[0] = (char)o1 + 'A';
 8005990:	3341      	adds	r3, #65	; 0x41
 8005992:	7003      	strb	r3, [r0, #0]
  remainder = remainder - (double)o1 * 20.0;
 8005994:	eea8 1b42 	vfms.f64	d1, d8, d2
}
 8005998:	ecbd 8b02 	vpop	{d8}
  o2 = (int)(remainder / 2.0);
 800599c:	ee21 7b07 	vmul.f64	d7, d1, d7
 80059a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  remainder = remainder - 2.0 * (double)o2;
 80059a4:	eeb8 2bc7 	vcvt.f64.s32	d2, s14
  dst[2] = (char)o2 + '0';
 80059a8:	ee17 3a10 	vmov	r3, s14
  a3 = (int)(24.0 * remainder);
 80059ac:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  dst[2] = (char)o2 + '0';
 80059b0:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - 2.0 * (double)o2;
 80059b2:	eea2 1b43 	vfms.f64	d1, d2, d3
  dst[2] = (char)o2 + '0';
 80059b6:	7083      	strb	r3, [r0, #2]
  a1 = (int)(remainder / 10.0);
 80059b8:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  dst[1] = (char)a1 + 'A';
 80059bc:	ee16 3a10 	vmov	r3, s12
  o3 = (int)(12.0 * remainder);
 80059c0:	ee21 1b04 	vmul.f64	d1, d1, d4
  dst[1] = (char)a1 + 'A';
 80059c4:	3341      	adds	r3, #65	; 0x41
 80059c6:	7043      	strb	r3, [r0, #1]
  remainder = remainder - (double)a1 * 10.0;
 80059c8:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 80059cc:	eea4 0b45 	vfms.f64	d0, d4, d5
  o3 = (int)(12.0 * remainder);
 80059d0:	eebd 1bc1 	vcvt.s32.f64	s2, d1
  dst[4] = (char)o3 + 'A';
 80059d4:	ee11 3a10 	vmov	r3, s2
 80059d8:	3341      	adds	r3, #65	; 0x41
  a2 = (int)(remainder);
 80059da:	eefd 6bc0 	vcvt.s32.f64	s13, d0
  dst[4] = (char)o3 + 'A';
 80059de:	7103      	strb	r3, [r0, #4]
  remainder = remainder - (double)a2;
 80059e0:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  dst[3] = (char)a2 + '0';
 80059e4:	ee16 3a90 	vmov	r3, s13
 80059e8:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - (double)a2;
 80059ea:	ee30 0b45 	vsub.f64	d0, d0, d5
  dst[3] = (char)a2 + '0';
 80059ee:	70c3      	strb	r3, [r0, #3]
  a3 = (int)(24.0 * remainder);
 80059f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80059f4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  dst[5] = (char)a3 + 'A';
 80059f8:	ee10 3a10 	vmov	r3, s0
 80059fc:	3341      	adds	r3, #65	; 0x41
 80059fe:	7143      	strb	r3, [r0, #5]
}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	f3af 8000 	nop.w
 8005a08:	00000000 	.word	0x00000000
 8005a0c:	40668000 	.word	0x40668000
 8005a10:	00000000 	.word	0x00000000
 8005a14:	40568000 	.word	0x40568000

08005a18 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <calcepoch32+0x40>)
 8005a1a:	4810      	ldr	r0, [pc, #64]	; (8005a5c <calcepoch32+0x44>)
 8005a1c:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8005a1e:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005a20:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a24:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a26:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a28:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005a2a:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a2c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a30:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005a32:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a34:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005a36:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8005a38:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8005a3a:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005a3c:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 8005a3e:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005a42:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 8005a44:	f01f ffc0 	bl	80259c8 <mktime>
 8005a48:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <calcepoch32+0x48>)
 8005a4a:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8005a4c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8005a50:	e9c2 3100 	strd	r3, r1, [r2]
}
 8005a54:	4418      	add	r0, r3
 8005a56:	bd10      	pop	{r4, pc}
 8005a58:	2000303c 	.word	0x2000303c
 8005a5c:	20003010 	.word	0x20003010
 8005a60:	20002ef0 	.word	0x20002ef0

08005a64 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8005a6a:	b33a      	cbz	r2, 8005abc <printPacket+0x58>
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	4616      	mov	r6, r2
 8005a70:	1e4d      	subs	r5, r1, #1
 8005a72:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8005a74:	f8df a054 	ldr.w	sl, [pc, #84]	; 8005acc <printPacket+0x68>
 8005a78:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005ad0 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8005a7c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005ad4 <printPacket+0x70>
 8005a80:	e013      	b.n	8005aaa <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8005a82:	f8da 1000 	ldr.w	r1, [sl]
 8005a86:	1c4b      	adds	r3, r1, #1
 8005a88:	f8ca 3000 	str.w	r3, [sl]
 8005a8c:	f020 fe5a 	bl	8026744 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005a90:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8005a92:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005a96:	4641      	mov	r1, r8
 8005a98:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005a9a:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005a9c:	f021 f83c 	bl	8026b18 <siprintf>
		printf(temp);
 8005aa0:	a801      	add	r0, sp, #4
 8005aa2:	f020 fe4f 	bl	8026744 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005aa6:	42a6      	cmp	r6, r4
 8005aa8:	d008      	beq.n	8005abc <printPacket+0x58>
		if (i % 16 == 0) {
 8005aaa:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8005aae:	463a      	mov	r2, r7
 8005ab0:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8005ab2:	d0e6      	beq.n	8005a82 <printPacket+0x1e>
			printf(" ");
 8005ab4:	2020      	movs	r0, #32
 8005ab6:	f020 fe5d 	bl	8026774 <putchar>
 8005aba:	e7e9      	b.n	8005a90 <printPacket+0x2c>
	}
	printf("\n\r");
 8005abc:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <printPacket+0x64>)
 8005abe:	f020 fe41 	bl	8026744 <iprintf>
}
 8005ac2:	b002      	add	sp, #8
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	0802ca80 	.word	0x0802ca80
 8005acc:	20002ee4 	.word	0x20002ee4
 8005ad0:	0802d184 	.word	0x0802d184
 8005ad4:	0802d190 	.word	0x0802d190

08005ad8 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8005ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005adc:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005b7c <disableNmea+0xa4>
void disableNmea() {
 8005ae0:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8005ae2:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005ae4:	4f24      	ldr	r7, [pc, #144]	; (8005b78 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005ae6:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8005aea:	f10d 0904 	add.w	r9, sp, #4
 8005aee:	ad04      	add	r5, sp, #16
 8005af0:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005af4:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005af8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005afc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005b00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005b04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005b08:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005b0c:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005b10:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005b14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b18:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8005b1c:	f829 2b02 	strh.w	r2, [r9], #2
 8005b20:	0c12      	lsrs	r2, r2, #16
 8005b22:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005b26:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005b2a:	7829      	ldrb	r1, [r5, #0]
 8005b2c:	786a      	ldrb	r2, [r5, #1]
 8005b2e:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 8005b32:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005b34:	f88d 100a 	strb.w	r1, [sp, #10]
 8005b38:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005b3c:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8005b40:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b48:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005b4a:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005b4c:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 8005b50:	44e6      	add	lr, ip
 8005b52:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005b56:	d1f5      	bne.n	8005b44 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005b58:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005b5a:	2364      	movs	r3, #100	; 0x64
 8005b5c:	220b      	movs	r2, #11
 8005b5e:	a901      	add	r1, sp, #4
 8005b60:	4638      	mov	r0, r7
 8005b62:	f88d c00d 	strb.w	ip, [sp, #13]
 8005b66:	f88d e00e 	strb.w	lr, [sp, #14]
 8005b6a:	f00e fa73 	bl	8014054 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005b6e:	4545      	cmp	r5, r8
 8005b70:	d1d9      	bne.n	8005b26 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 8005b72:	b00f      	add	sp, #60	; 0x3c
 8005b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b78:	20002f84 	.word	0x20002f84
 8005b7c:	0802a8c8 	.word	0x0802a8c8

08005b80 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b80:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 8005b82:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b84:	db1c      	blt.n	8005bc0 <isGoodChecksum+0x40>
 8005b86:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8005b8e:	4613      	mov	r3, r2
 8005b90:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8005b92:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005b96:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b98:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005b9a:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005b9c:	441a      	add	r2, r3
 8005b9e:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005ba0:	d1f7      	bne.n	8005b92 <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005ba2:	490a      	ldr	r1, [pc, #40]	; (8005bcc <isGoodChecksum+0x4c>)
 8005ba4:	4408      	add	r0, r1
 8005ba6:	7981      	ldrb	r1, [r0, #6]
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	d002      	beq.n	8005bb2 <isGoodChecksum+0x32>
 8005bac:	2000      	movs	r0, #0
}
 8005bae:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005bb2:	79c0      	ldrb	r0, [r0, #7]
 8005bb4:	1a80      	subs	r0, r0, r2
 8005bb6:	fab0 f080 	clz	r0, r0
 8005bba:	0940      	lsrs	r0, r0, #5
}
 8005bbc:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8005bc0:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	e7ed      	b.n	8005ba2 <isGoodChecksum+0x22>
 8005bc6:	bf00      	nop
 8005bc8:	20002e65 	.word	0x20002e65
 8005bcc:	20002e64 	.word	0x20002e64

08005bd0 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8005bd0:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8005bd2:	4c25      	ldr	r4, [pc, #148]	; (8005c68 <IsPacketReady+0x98>)
 8005bd4:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d814      	bhi.n	8005c04 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <IsPacketReady+0x9c>)
 8005bdc:	4619      	mov	r1, r3
 8005bde:	5cd2      	ldrb	r2, [r2, r3]
 8005be0:	4282      	cmp	r2, r0
 8005be2:	d00a      	beq.n	8005bfa <IsPacketReady+0x2a>
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <IsPacketReady+0xa0>)
 8005be6:	5cd2      	ldrb	r2, [r2, r3]
 8005be8:	4282      	cmp	r2, r0
 8005bea:	d006      	beq.n	8005bfa <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8005bec:	2200      	movs	r2, #0
 8005bee:	4921      	ldr	r1, [pc, #132]	; (8005c74 <IsPacketReady+0xa4>)
			p = 0;
 8005bf0:	4613      	mov	r3, r2
			len = 0;
 8005bf2:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8005bf4:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8005bf6:	70e3      	strb	r3, [r4, #3]
}
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <IsPacketReady+0xa8>)
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	5450      	strb	r0, [r2, r1]
 8005c02:	e7f7      	b.n	8005bf4 <IsPacketReady+0x24>
		if (p < 6) {
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d917      	bls.n	8005c38 <IsPacketReady+0x68>
		if (p == 6) {
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d01b      	beq.n	8005c44 <IsPacketReady+0x74>
 8005c0c:	4d19      	ldr	r5, [pc, #100]	; (8005c74 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8005c0e:	682a      	ldr	r2, [r5, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	3207      	adds	r2, #7
 8005c14:	429a      	cmp	r2, r3
 8005c16:	dbed      	blt.n	8005bf4 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005c18:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8005c1a:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8005c1c:	4e16      	ldr	r6, [pc, #88]	; (8005c78 <IsPacketReady+0xa8>)
 8005c1e:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8005c20:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8005c22:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d1e5      	bne.n	8005bf4 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005c28:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005c2a:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005c2c:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 8005c2e:	f7ff ffa7 	bl	8005b80 <isGoodChecksum>
 8005c32:	b998      	cbnz	r0, 8005c5c <IsPacketReady+0x8c>
				p = 0;
 8005c34:	4603      	mov	r3, r0
 8005c36:	e7dd      	b.n	8005bf4 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005c38:	490f      	ldr	r1, [pc, #60]	; (8005c78 <IsPacketReady+0xa8>)
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	54c8      	strb	r0, [r1, r3]
			return (0);
 8005c3e:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 8005c40:	70e2      	strb	r2, [r4, #3]
}
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005c44:	490c      	ldr	r1, [pc, #48]	; (8005c78 <IsPacketReady+0xa8>)
 8005c46:	794d      	ldrb	r5, [r1, #5]
 8005c48:	790a      	ldrb	r2, [r1, #4]
 8005c4a:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8005c4e:	4d09      	ldr	r5, [pc, #36]	; (8005c74 <IsPacketReady+0xa4>)
 8005c50:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8005c52:	682a      	ldr	r2, [r5, #0]
 8005c54:	2a7f      	cmp	r2, #127	; 0x7f
 8005c56:	d9da      	bls.n	8005c0e <IsPacketReady+0x3e>
				return 0;
 8005c58:	2000      	movs	r0, #0
}
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <IsPacketReady+0xac>)
 8005c5e:	2201      	movs	r2, #1
					return len;
 8005c60:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bd70      	pop	{r4, r5, r6, pc}
 8005c66:	bf00      	nop
 8005c68:	20000298 	.word	0x20000298
 8005c6c:	0802d380 	.word	0x0802d380
 8005c70:	0802d384 	.word	0x0802d384
 8005c74:	20003008 	.word	0x20003008
 8005c78:	20002e64 	.word	0x20002e64
 8005c7c:	20002efc 	.word	0x20002efc

08005c80 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c80:	4b74      	ldr	r3, [pc, #464]	; (8005e54 <setupneo+0x1d4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c88:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c8a:	f000 80ba 	beq.w	8005e02 <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8005c8e:	2284      	movs	r2, #132	; 0x84
 8005c90:	4971      	ldr	r1, [pc, #452]	; (8005e58 <setupneo+0x1d8>)
 8005c92:	4872      	ldr	r0, [pc, #456]	; (8005e5c <setupneo+0x1dc>)
 8005c94:	f01f fd90 	bl	80257b8 <memcpy>
		gpsuarttx = huart6;
 8005c98:	2284      	movs	r2, #132	; 0x84
 8005c9a:	496f      	ldr	r1, [pc, #444]	; (8005e58 <setupneo+0x1d8>)
 8005c9c:	4870      	ldr	r0, [pc, #448]	; (8005e60 <setupneo+0x1e0>)
 8005c9e:	f01f fd8b 	bl	80257b8 <memcpy>
		GPSUARTRX = USART6;
 8005ca2:	4b70      	ldr	r3, [pc, #448]	; (8005e64 <setupneo+0x1e4>)
 8005ca4:	4a70      	ldr	r2, [pc, #448]	; (8005e68 <setupneo+0x1e8>)
 8005ca6:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4970      	ldr	r1, [pc, #448]	; (8005e6c <setupneo+0x1ec>)
 8005cac:	486b      	ldr	r0, [pc, #428]	; (8005e5c <setupneo+0x1dc>)
 8005cae:	f00e fc69 	bl	8014584 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f040 809d 	bne.w	8005df4 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005cba:	f7ff ff0d 	bl	8005ad8 <disableNmea>
	osDelay(500);
 8005cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cc2:	f010 fcbb 	bl	801663c <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	; (8005e70 <setupneo+0x1f0>)
 8005cc8:	ae01      	add	r6, sp, #4
 8005cca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005cce:	4d69      	ldr	r5, [pc, #420]	; (8005e74 <setupneo+0x1f4>)
 8005cd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cd4:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8005cd8:	4867      	ldr	r0, [pc, #412]	; (8005e78 <setupneo+0x1f8>)
 8005cda:	f020 fdcf 	bl	802687c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cde:	2364      	movs	r3, #100	; 0x64
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	485e      	ldr	r0, [pc, #376]	; (8005e60 <setupneo+0x1e0>)
 8005ce6:	f00e f9b5 	bl	8014054 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005cea:	e004      	b.n	8005cf6 <setupneo+0x76>
		i++;
		osDelay(1);
 8005cec:	f010 fca6 	bl	801663c <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005cf0:	3c01      	subs	r4, #1
 8005cf2:	f000 80a5 	beq.w	8005e40 <setupneo+0x1c0>
 8005cf6:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8005cf8:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f6      	beq.n	8005cec <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005cfe:	4c5f      	ldr	r4, [pc, #380]	; (8005e7c <setupneo+0x1fc>)
 8005d00:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8005d02:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d0a:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d0e:	2364      	movs	r3, #100	; 0x64
 8005d10:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d12:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d16:	4852      	ldr	r0, [pc, #328]	; (8005e60 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d18:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	f00e f999 	bl	8014054 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8005d22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005d26:	f010 fc89 	bl	801663c <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005d2a:	4855      	ldr	r0, [pc, #340]	; (8005e80 <setupneo+0x200>)
 8005d2c:	f020 fd0a 	bl	8026744 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005d30:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005d34:	46b4      	mov	ip, r6
 8005d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d38:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d3c:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 8005d3e:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d42:	220e      	movs	r2, #14
 8005d44:	2364      	movs	r3, #100	; 0x64
 8005d46:	4846      	ldr	r0, [pc, #280]	; (8005e60 <setupneo+0x1e0>)
 8005d48:	f00e f984 	bl	8014054 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005d4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d50:	f010 fc74 	bl	801663c <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005d54:	484b      	ldr	r0, [pc, #300]	; (8005e84 <setupneo+0x204>)
 8005d56:	f020 fd91 	bl	802687c <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005d5a:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8005d5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d6a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d6e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8005d70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d74:	4631      	mov	r1, r6
 8005d76:	222c      	movs	r2, #44	; 0x2c
 8005d78:	4839      	ldr	r0, [pc, #228]	; (8005e60 <setupneo+0x1e0>)
 8005d7a:	f00e f96b 	bl	8014054 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8005d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d82:	f010 fc5b 	bl	801663c <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005d86:	4840      	ldr	r0, [pc, #256]	; (8005e88 <setupneo+0x208>)
 8005d88:	f020 fcdc 	bl	8026744 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005d8c:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8005d90:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d92:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d94:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005d9c:	f82c 2b02 	strh.w	r2, [ip], #2
 8005da0:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005da2:	4631      	mov	r1, r6
 8005da4:	482e      	ldr	r0, [pc, #184]	; (8005e60 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005da6:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005daa:	220b      	movs	r2, #11
 8005dac:	f00e f952 	bl	8014054 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8005db0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005db4:	f010 fc42 	bl	801663c <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005db8:	46b4      	mov	ip, r6
 8005dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005dca:	2364      	movs	r3, #100	; 0x64
 8005dcc:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005dce:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4822      	ldr	r0, [pc, #136]	; (8005e60 <setupneo+0x1e0>)
 8005dd6:	f00e f93d 	bl	8014054 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8005dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005dde:	f010 fc2d 	bl	801663c <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <setupneo+0x20c>)
 8005de4:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8005de6:	482a      	ldr	r0, [pc, #168]	; (8005e90 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005de8:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8005dea:	f020 fcab 	bl	8026744 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8005dee:	4638      	mov	r0, r7
 8005df0:	b00d      	add	sp, #52	; 0x34
 8005df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8005df4:	4601      	mov	r1, r0
 8005df6:	4827      	ldr	r0, [pc, #156]	; (8005e94 <setupneo+0x214>)
 8005df8:	f020 fca4 	bl	8026744 <iprintf>
}
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	b00d      	add	sp, #52	; 0x34
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8005e02:	4c25      	ldr	r4, [pc, #148]	; (8005e98 <setupneo+0x218>)
 8005e04:	4620      	mov	r0, r4
 8005e06:	f00d fab9 	bl	801337c <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f00d f91e 	bl	801304c <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8005e10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005e14:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8005e16:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005e18:	f00e f9c4 	bl	80141a4 <HAL_UART_Init>
 8005e1c:	b968      	cbnz	r0, 8005e3a <setupneo+0x1ba>
		gpsuartrx = huart8;
 8005e1e:	2284      	movs	r2, #132	; 0x84
 8005e20:	491e      	ldr	r1, [pc, #120]	; (8005e9c <setupneo+0x21c>)
 8005e22:	480e      	ldr	r0, [pc, #56]	; (8005e5c <setupneo+0x1dc>)
 8005e24:	f01f fcc8 	bl	80257b8 <memcpy>
		gpsuarttx = huart7;
 8005e28:	2284      	movs	r2, #132	; 0x84
 8005e2a:	491b      	ldr	r1, [pc, #108]	; (8005e98 <setupneo+0x218>)
 8005e2c:	480c      	ldr	r0, [pc, #48]	; (8005e60 <setupneo+0x1e0>)
 8005e2e:	f01f fcc3 	bl	80257b8 <memcpy>
		GPSUARTRX = UART8;
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <setupneo+0x1e4>)
 8005e34:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <setupneo+0x220>)
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e736      	b.n	8005ca8 <setupneo+0x28>
			Error_Handler();
 8005e3a:	f7fe fcc3 	bl	80047c4 <Error_Handler>
 8005e3e:	e7ee      	b.n	8005e1e <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8005e40:	4818      	ldr	r0, [pc, #96]	; (8005ea4 <setupneo+0x224>)
 8005e42:	f020 fd1b 	bl	802687c <puts>
		osDelay(200);
 8005e46:	20c8      	movs	r0, #200	; 0xc8
 8005e48:	f010 fbf8 	bl	801663c <osDelay>
		rebootme(2);
 8005e4c:	2002      	movs	r0, #2
 8005e4e:	f7fd ff3b 	bl	8003cc8 <rebootme>
 8005e52:	e754      	b.n	8005cfe <setupneo+0x7e>
 8005e54:	20002180 	.word	0x20002180
 8005e58:	20002c48 	.word	0x20002c48
 8005e5c:	20002f00 	.word	0x20002f00
 8005e60:	20002f84 	.word	0x20002f84
 8005e64:	20002e60 	.word	0x20002e60
 8005e68:	40011400 	.word	0x40011400
 8005e6c:	20003034 	.word	0x20003034
 8005e70:	0802a8c0 	.word	0x0802a8c0
 8005e74:	2000300c 	.word	0x2000300c
 8005e78:	0802d198 	.word	0x0802d198
 8005e7c:	0802a8a8 	.word	0x0802a8a8
 8005e80:	0802d1d8 	.word	0x0802d1d8
 8005e84:	0802d208 	.word	0x0802d208
 8005e88:	0802d230 	.word	0x0802d230
 8005e8c:	2000303c 	.word	0x2000303c
 8005e90:	0802d254 	.word	0x0802d254
 8005e94:	0802d1b0 	.word	0x0802d1b0
 8005e98:	20002ccc 	.word	0x20002ccc
 8005e9c:	20002d50 	.word	0x20002d50
 8005ea0:	40007c00 	.word	0x40007c00
 8005ea4:	0802d27c 	.word	0x0802d27c

08005ea8 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <HAL_UART_RxCpltCallback+0xb4>)
 8005eaa:	6803      	ldr	r3, [r0, #0]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00d      	beq.n	8005ece <HAL_UART_RxCpltCallback+0x26>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005eb2:	4a2b      	ldr	r2, [pc, #172]	; (8005f60 <HAL_UART_RxCpltCallback+0xb8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d021      	beq.n	8005efc <HAL_UART_RxCpltCallback+0x54>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <HAL_UART_RxCpltCallback+0xbc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d020      	beq.n	8005f00 <HAL_UART_RxCpltCallback+0x58>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <HAL_UART_RxCpltCallback+0xc0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d002      	beq.n	8005eca <HAL_UART_RxCpltCallback+0x22>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8005ec4:	4829      	ldr	r0, [pc, #164]	; (8005f6c <HAL_UART_RxCpltCallback+0xc4>)
 8005ec6:	f020 bcd9 	b.w	802687c <puts>
		uart2_rxdone();
 8005eca:	f7fe bbfb 	b.w	80046c4 <uart2_rxdone>
		data = rxdatabuf[0];
 8005ece:	4928      	ldr	r1, [pc, #160]	; (8005f70 <HAL_UART_RxCpltCallback+0xc8>)
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <HAL_UART_RxCpltCallback+0xcc>)
		flag = 1;
 8005ed2:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <HAL_UART_RxCpltCallback+0xd0>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005ed4:	b510      	push	{r4, lr}
		flag = 1;
 8005ed6:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8005ed8:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8005eda:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8005edc:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8005ede:	f7ff fe77 	bl	8005bd0 <IsPacketReady>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	dd18      	ble.n	8005f18 <HAL_UART_RxCpltCallback+0x70>
			switch (len) {
 8005ee6:	2854      	cmp	r0, #84	; 0x54
 8005ee8:	d017      	beq.n	8005f1a <HAL_UART_RxCpltCallback+0x72>
 8005eea:	2864      	cmp	r0, #100	; 0x64
 8005eec:	d00a      	beq.n	8005f04 <HAL_UART_RxCpltCallback+0x5c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005eee:	b2c2      	uxtb	r2, r0
 8005ef0:	4922      	ldr	r1, [pc, #136]	; (8005f7c <HAL_UART_RxCpltCallback+0xd4>)
 8005ef2:	4823      	ldr	r0, [pc, #140]	; (8005f80 <HAL_UART_RxCpltCallback+0xd8>)
}
 8005ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005ef8:	f7ff bdb4 	b.w	8005a64 <printPacket>
		uart5_rxdone();
 8005efc:	f7fc b87a 	b.w	8001ff4 <uart5_rxdone>
		uart6_rxdone();
 8005f00:	f001 b86c 	b.w	8006fdc <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <HAL_UART_RxCpltCallback+0xdc>)
 8005f06:	4820      	ldr	r0, [pc, #128]	; (8005f88 <HAL_UART_RxCpltCallback+0xe0>)
 8005f08:	f1a3 020a 	sub.w	r2, r3, #10
 8005f0c:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8005f10:	f020 fc18 	bl	8026744 <iprintf>
				neoispresent = 1;
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_UART_RxCpltCallback+0xe4>)
 8005f16:	601c      	str	r4, [r3, #0]
}
 8005f18:	bd10      	pop	{r4, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005f1a:	4c1d      	ldr	r4, [pc, #116]	; (8005f90 <HAL_UART_RxCpltCallback+0xe8>)
 8005f1c:	224e      	movs	r2, #78	; 0x4e
 8005f1e:	491d      	ldr	r1, [pc, #116]	; (8005f94 <HAL_UART_RxCpltCallback+0xec>)
 8005f20:	1d20      	adds	r0, r4, #4
 8005f22:	f01f fc49 	bl	80257b8 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005f26:	f7ff fd77 	bl	8005a18 <calcepoch32>
 8005f2a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				if ((statuspkt.NavPvt.flags & 1) || (gpsfake)) { // locked or fake locked
 8005f2e:	7e63      	ldrb	r3, [r4, #25]
					gpslocked = 1;
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_UART_RxCpltCallback+0xf0>)
				if ((statuspkt.NavPvt.flags & 1) || (gpsfake)) { // locked or fake locked
 8005f32:	07d9      	lsls	r1, r3, #31
 8005f34:	d404      	bmi.n	8005f40 <HAL_UART_RxCpltCallback+0x98>
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_UART_RxCpltCallback+0xf4>)
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b90b      	cbnz	r3, 8005f40 <HAL_UART_RxCpltCallback+0x98>
					gpslocked = 0;
 8005f3c:	7013      	strb	r3, [r2, #0]
}
 8005f3e:	bd10      	pop	{r4, pc}
					if (statuspkt.NavPvt.flags & 1)	{ // actually, its now a real lock
 8005f40:	7e63      	ldrb	r3, [r4, #25]
					gpslocked = 1;
 8005f42:	2101      	movs	r1, #1
					if (statuspkt.NavPvt.flags & 1)	{ // actually, its now a real lock
 8005f44:	07db      	lsls	r3, r3, #31
					gpslocked = 1;
 8005f46:	7011      	strb	r1, [r2, #0]
					if (statuspkt.NavPvt.flags & 1)	{ // actually, its now a real lock
 8005f48:	d5e6      	bpl.n	8005f18 <HAL_UART_RxCpltCallback+0x70>
						globalfreeze &= ~2;			// and allow udp detections to flow
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <HAL_UART_RxCpltCallback+0xf8>)
						gpsfake = 0;				// so turn off the fake lock
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	4913      	ldr	r1, [pc, #76]	; (8005f9c <HAL_UART_RxCpltCallback+0xf4>)
						globalfreeze &= ~2;			// and allow udp detections to flow
 8005f50:	6813      	ldr	r3, [r2, #0]
						gpsfake = 0;				// so turn off the fake lock
 8005f52:	8008      	strh	r0, [r1, #0]
						globalfreeze &= ~2;			// and allow udp detections to flow
 8005f54:	f023 0302 	bic.w	r3, r3, #2
 8005f58:	6013      	str	r3, [r2, #0]
}
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	20002e60 	.word	0x20002e60
 8005f60:	40005000 	.word	0x40005000
 8005f64:	40011400 	.word	0x40011400
 8005f68:	40004400 	.word	0x40004400
 8005f6c:	0802d2f0 	.word	0x0802d2f0
 8005f70:	20003034 	.word	0x20003034
 8005f74:	20002ee8 	.word	0x20002ee8
 8005f78:	20002ef8 	.word	0x20002ef8
 8005f7c:	20002e64 	.word	0x20002e64
 8005f80:	0802d2d4 	.word	0x0802d2d4
 8005f84:	20002e92 	.word	0x20002e92
 8005f88:	0802d2a8 	.word	0x0802d2a8
 8005f8c:	2000300c 	.word	0x2000300c
 8005f90:	2000303c 	.word	0x2000303c
 8005f94:	20002e6a 	.word	0x20002e6a
 8005f98:	200034a8 	.word	0x200034a8
 8005f9c:	20002194 	.word	0x20002194
 8005fa0:	200034a4 	.word	0x200034a4

08005fa4 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fa4:	4926      	ldr	r1, [pc, #152]	; (8006040 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fa6:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005faa:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005fac:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fae:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005fb0:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005fb2:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005fb4:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fb6:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fb8:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005fba:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005fbc:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005fbe:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fc0:	d02b      	beq.n	800601a <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8005fc2:	4920      	ldr	r1, [pc, #128]	; (8006044 <HAL_UART_ErrorCallback+0xa0>)
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005fc8:	491f      	ldr	r1, [pc, #124]	; (8006048 <HAL_UART_ErrorCallback+0xa4>)
 8005fca:	428b      	cmp	r3, r1
 8005fcc:	d000      	beq.n	8005fd0 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8005fd0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8005fd4:	481d      	ldr	r0, [pc, #116]	; (800604c <HAL_UART_ErrorCallback+0xa8>)
 8005fd6:	f020 fbb5 	bl	8026744 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8005fe0:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005fe2:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8005fe4:	621d      	str	r5, [r3, #32]
}
 8005fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_UART_ErrorCallback+0xac>)
 8005fea:	6812      	ldr	r2, [r2, #0]
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d1ee      	bne.n	8005fce <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8005ff0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005ff4:	4a17      	ldr	r2, [pc, #92]	; (8006054 <HAL_UART_ErrorCallback+0xb0>)
 8005ff6:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8005ff8:	69da      	ldr	r2, [r3, #28]
 8005ffa:	0710      	lsls	r0, r2, #28
 8005ffc:	d500      	bpl.n	8006000 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8005ffe:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8006000:	4b10      	ldr	r3, [pc, #64]	; (8006044 <HAL_UART_ErrorCallback+0xa0>)
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	0751      	lsls	r1, r2, #29
 8006006:	d501      	bpl.n	800600c <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8006008:	2204      	movs	r2, #4
 800600a:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <HAL_UART_ErrorCallback+0xa0>)
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	0792      	lsls	r2, r2, #30
 8006012:	d5dc      	bpl.n	8005fce <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8006014:	2202      	movs	r2, #2
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 800601a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800601e:	480e      	ldr	r0, [pc, #56]	; (8006058 <HAL_UART_ErrorCallback+0xb4>)
 8006020:	f020 fb90 	bl	8026744 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8006024:	462a      	mov	r2, r5
 8006026:	490d      	ldr	r1, [pc, #52]	; (800605c <HAL_UART_ErrorCallback+0xb8>)
 8006028:	480d      	ldr	r0, [pc, #52]	; (8006060 <HAL_UART_ErrorCallback+0xbc>)
 800602a:	f00e faab 	bl	8014584 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 800602e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8006032:	d0cc      	beq.n	8005fce <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8006034:	4601      	mov	r1, r0
 8006036:	480b      	ldr	r0, [pc, #44]	; (8006064 <HAL_UART_ErrorCallback+0xc0>)
}
 8006038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 800603c:	f020 bb82 	b.w	8026744 <iprintf>
 8006040:	20002e60 	.word	0x20002e60
 8006044:	40005000 	.word	0x40005000
 8006048:	40011400 	.word	0x40011400
 800604c:	0802d354 	.word	0x0802d354
 8006050:	20001a8c 	.word	0x20001a8c
 8006054:	20001b40 	.word	0x20001b40
 8006058:	0802d308 	.word	0x0802d308
 800605c:	20003034 	.word	0x20003034
 8006060:	20002f00 	.word	0x20002f00
 8006064:	0802d328 	.word	0x0802d328

08006068 <decnxtmodel>:
static int residual = 0;	// left over unsent to LCD bytes when block size overflowed
static int bytesinblocksent = 0; 		// byte count into current block
static char nxtbuffer[NXDL_BUFF_SIZE];
int nxt_abort = 0;			// 1 == abort

int decnxtmodel(char *nex_model) {
 8006068:	b510      	push	{r4, lr}
	char lcdmod;

	lcdmod = 'Z';

	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 800606a:	220a      	movs	r2, #10
 800606c:	4918      	ldr	r1, [pc, #96]	; (80060d0 <decnxtmodel+0x68>)
int decnxtmodel(char *nex_model) {
 800606e:	4604      	mov	r4, r0
	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 8006070:	f021 fb4a 	bl	8027708 <strncmp>
 8006074:	b138      	cbz	r0, 8006086 <decnxtmodel+0x1e>
		lcdmod = 'A';
	} else if (!(strncmp(nex_model, "MX4832F035", 10))) {
 8006076:	220a      	movs	r2, #10
 8006078:	4916      	ldr	r1, [pc, #88]	; (80060d4 <decnxtmodel+0x6c>)
 800607a:	4620      	mov	r0, r4
 800607c:	f021 fb44 	bl	8027708 <strncmp>
 8006080:	b918      	cbnz	r0, 800608a <decnxtmodel+0x22>
 8006082:	2042      	movs	r0, #66	; 0x42
		lcdmod = 'E';
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
		lcdmod = 'F';
	}
	return (lcdmod);
}
 8006084:	bd10      	pop	{r4, pc}
 8006086:	2041      	movs	r0, #65	; 0x41
 8006088:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX4832K035", 10))) {
 800608a:	220a      	movs	r2, #10
 800608c:	4912      	ldr	r1, [pc, #72]	; (80060d8 <decnxtmodel+0x70>)
 800608e:	4620      	mov	r0, r4
 8006090:	f021 fb3a 	bl	8027708 <strncmp>
 8006094:	b168      	cbz	r0, 80060b2 <decnxtmodel+0x4a>
	} else if (!(strncmp(nex_model, "MX4024K032", 10))) {
 8006096:	220a      	movs	r2, #10
 8006098:	4910      	ldr	r1, [pc, #64]	; (80060dc <decnxtmodel+0x74>)
 800609a:	4620      	mov	r0, r4
 800609c:	f021 fb34 	bl	8027708 <strncmp>
 80060a0:	b148      	cbz	r0, 80060b6 <decnxtmodel+0x4e>
	} else if (!(strncmp(nex_model, "MX4024T032", 10))) {
 80060a2:	220a      	movs	r2, #10
 80060a4:	490e      	ldr	r1, [pc, #56]	; (80060e0 <decnxtmodel+0x78>)
 80060a6:	4620      	mov	r0, r4
 80060a8:	f021 fb2e 	bl	8027708 <strncmp>
 80060ac:	b928      	cbnz	r0, 80060ba <decnxtmodel+0x52>
 80060ae:	2045      	movs	r0, #69	; 0x45
}
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	2043      	movs	r0, #67	; 0x43
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	2044      	movs	r0, #68	; 0x44
 80060b8:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
 80060ba:	220a      	movs	r2, #10
 80060bc:	4909      	ldr	r1, [pc, #36]	; (80060e4 <decnxtmodel+0x7c>)
 80060be:	4620      	mov	r0, r4
 80060c0:	f021 fb22 	bl	8027708 <strncmp>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	bf14      	ite	ne
 80060c8:	205a      	movne	r0, #90	; 0x5a
 80060ca:	2046      	moveq	r0, #70	; 0x46
}
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	bf00      	nop
 80060d0:	0802d388 	.word	0x0802d388
 80060d4:	0802d394 	.word	0x0802d394
 80060d8:	0802d3a0 	.word	0x0802d3a0
 80060dc:	0802d3ac 	.word	0x0802d3ac
 80060e0:	0802d3b8 	.word	0x0802d3b8
 80060e4:	0802d3c4 	.word	0x0802d3c4

080060e8 <nxt_loader>:
	int i;
	char lcdmod;

//	printf("nextionloader:  fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);

	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 80060e8:	1e53      	subs	r3, r2, #1
 80060ea:	3303      	adds	r3, #3
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 80060ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f0:	b083      	sub	sp, #12
	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 80060f2:	d86d      	bhi.n	80061d0 <nxt_loader+0xe8>

		printf("nxt_loader: nxt file length was bad\n");
		return (-1);
	}

	if (filename[0] == 0) {
 80060f4:	7803      	ldrb	r3, [r0, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d064      	beq.n	80061c4 <nxt_loader+0xdc>

		printf("nxt_loader: nxt file name was bad\n");
		return (-1);
	}

	if (host[0] == 0) {
 80060fa:	780b      	ldrb	r3, [r1, #0]
 80060fc:	460f      	mov	r7, r1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d05a      	beq.n	80061b8 <nxt_loader+0xd0>

		printf("nxt_loader: nxt host name was bad\n");
		return (-1);
	}

	lcdmod = decnxtmodel(nex_model);
 8006102:	4836      	ldr	r0, [pc, #216]	; (80061dc <nxt_loader+0xf4>)
 8006104:	4690      	mov	r8, r2

	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006106:	4d36      	ldr	r5, [pc, #216]	; (80061e0 <nxt_loader+0xf8>)
	lcdmod = decnxtmodel(nex_model);
 8006108:	f7ff ffae 	bl	8006068 <decnxtmodel>
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 800610c:	2202      	movs	r2, #2
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 800610e:	b2c3      	uxtb	r3, r0
 8006110:	4934      	ldr	r1, [pc, #208]	; (80061e4 <nxt_loader+0xfc>)
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
	osDelay(100);

	nxt_abort = 0;
	nxt_blocksacked = 0;
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006112:	f640 34b8 	movw	r4, #3000	; 0xbb8
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006116:	602a      	str	r2, [r5, #0]
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 8006118:	4a33      	ldr	r2, [pc, #204]	; (80061e8 <nxt_loader+0x100>)
 800611a:	4834      	ldr	r0, [pc, #208]	; (80061ec <nxt_loader+0x104>)
 800611c:	6812      	ldr	r2, [r2, #0]
	nxt_abort = 0;
 800611e:	4e34      	ldr	r6, [pc, #208]	; (80061f0 <nxt_loader+0x108>)
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 8006120:	9200      	str	r2, [sp, #0]
 8006122:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <nxt_loader+0x10c>)
 8006124:	f020 fcf8 	bl	8026b18 <siprintf>
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
 8006128:	463a      	mov	r2, r7
 800612a:	4930      	ldr	r1, [pc, #192]	; (80061ec <nxt_loader+0x104>)
 800612c:	4832      	ldr	r0, [pc, #200]	; (80061f8 <nxt_loader+0x110>)
 800612e:	f020 fb09 	bl	8026744 <iprintf>
	osDelay(100);
 8006132:	2064      	movs	r0, #100	; 0x64
 8006134:	f010 fa82 	bl	801663c <osDelay>
	nxt_blocksacked = 0;
 8006138:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006210 <nxt_loader+0x128>
	nxt_abort = 0;
 800613c:	2200      	movs	r2, #0
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 800613e:	4639      	mov	r1, r7
 8006140:	482a      	ldr	r0, [pc, #168]	; (80061ec <nxt_loader+0x104>)
	nxt_abort = 0;
 8006142:	6032      	str	r2, [r6, #0]
	nxt_blocksacked = 0;
 8006144:	f8c9 2000 	str.w	r2, [r9]
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006148:	f7fb fd8e 	bl	8001c68 <http_dlclient>

	for (i = 0; i < 3000; i++) {
 800614c:	e003      	b.n	8006156 <nxt_loader+0x6e>
		osDelay(1);
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	bb53      	cbnz	r3, 80061a8 <nxt_loader+0xc0>
	for (i = 0; i < 3000; i++) {
 8006152:	3c01      	subs	r4, #1
 8006154:	d008      	beq.n	8006168 <nxt_loader+0x80>
		osDelay(1);
 8006156:	2001      	movs	r0, #1
 8006158:	f010 fa70 	bl	801663c <osDelay>
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d0f5      	beq.n	800614e <nxt_loader+0x66>
			break;
		}		// see if file downloader returned an error before starting LCD upload
	}
	if ((nxt_abort) || (http_downloading == NOT_LOADING)) {
 8006162:	6832      	ldr	r2, [r6, #0]
 8006164:	bb02      	cbnz	r2, 80061a8 <nxt_loader+0xc0>
 8006166:	b1fb      	cbz	r3, 80061a8 <nxt_loader+0xc0>
		printf("nxt_loader: Server aborted before sending NXT file\n");
		http_downloading = NOT_LOADING;
		return (-1);
	}
	http_downloading = NXT_LOADING;
 8006168:	2303      	movs	r3, #3
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 800616a:	4640      	mov	r0, r8
	http_downloading = NXT_LOADING;
 800616c:	602b      	str	r3, [r5, #0]
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 800616e:	f7fd fb99 	bl	80038a4 <lcd_startdl>
	osDelay(600);				// wait > half a second for LCD to Ack
 8006172:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006176:	f010 fa61 	bl	801663c <osDelay>
	if (nxt_blocksacked) {		// LCD acks the start, its now in DL mode
 800617a:	f8d9 4000 	ldr.w	r4, [r9]
 800617e:	b93c      	cbnz	r4, 8006190 <nxt_loader+0xa8>
		nxt_blocksacked = 0;		// reset counter
		http_dlclient(newfilename, host, (void*) 0);
	} else {
		http_downloading = NOT_LOADING;
		printf("nextionloader: Nextion download not acked start\n");
 8006180:	481e      	ldr	r0, [pc, #120]	; (80061fc <nxt_loader+0x114>)
		http_downloading = NOT_LOADING;
 8006182:	602c      	str	r4, [r5, #0]
		printf("nextionloader: Nextion download not acked start\n");
 8006184:	f020 fb7a 	bl	802687c <puts>

	// wait for transfer to complete
	// unblock http client

	return (0);
}
 8006188:	4620      	mov	r0, r4
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nxt_blocksacked = 0;		// reset counter
 8006190:	2200      	movs	r2, #0
		http_dlclient(newfilename, host, (void*) 0);
 8006192:	4639      	mov	r1, r7
 8006194:	4815      	ldr	r0, [pc, #84]	; (80061ec <nxt_loader+0x104>)
	return (0);
 8006196:	4614      	mov	r4, r2
		nxt_blocksacked = 0;		// reset counter
 8006198:	f8c9 2000 	str.w	r2, [r9]
		http_dlclient(newfilename, host, (void*) 0);
 800619c:	f7fb fd64 	bl	8001c68 <http_dlclient>
}
 80061a0:	4620      	mov	r0, r4
 80061a2:	b003      	add	sp, #12
 80061a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("nxt_loader: Server aborted before sending NXT file\n");
 80061a8:	4815      	ldr	r0, [pc, #84]	; (8006200 <nxt_loader+0x118>)
		return (-1);
 80061aa:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: Server aborted before sending NXT file\n");
 80061ae:	f020 fb65 	bl	802687c <puts>
		http_downloading = NOT_LOADING;
 80061b2:	2300      	movs	r3, #0
 80061b4:	602b      	str	r3, [r5, #0]
		return (-1);
 80061b6:	e7e7      	b.n	8006188 <nxt_loader+0xa0>
		printf("nxt_loader: nxt host name was bad\n");
 80061b8:	4812      	ldr	r0, [pc, #72]	; (8006204 <nxt_loader+0x11c>)
		return (-1);
 80061ba:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt host name was bad\n");
 80061be:	f020 fb5d 	bl	802687c <puts>
		return (-1);
 80061c2:	e7e1      	b.n	8006188 <nxt_loader+0xa0>
		printf("nxt_loader: nxt file name was bad\n");
 80061c4:	4810      	ldr	r0, [pc, #64]	; (8006208 <nxt_loader+0x120>)
		return (-1);
 80061c6:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file name was bad\n");
 80061ca:	f020 fb57 	bl	802687c <puts>
		return (-1);
 80061ce:	e7db      	b.n	8006188 <nxt_loader+0xa0>
		printf("nxt_loader: nxt file length was bad\n");
 80061d0:	480e      	ldr	r0, [pc, #56]	; (800620c <nxt_loader+0x124>)
		return (-1);
 80061d2:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file length was bad\n");
 80061d6:	f020 fb51 	bl	802687c <puts>
		return (-1);
 80061da:	e7d5      	b.n	8006188 <nxt_loader+0xa0>
 80061dc:	20001b50 	.word	0x20001b50
 80061e0:	200018dc 	.word	0x200018dc
 80061e4:	0802d43c 	.word	0x0802d43c
 80061e8:	20002e08 	.word	0x20002e08
 80061ec:	200030e0 	.word	0x200030e0
 80061f0:	20003128 	.word	0x20003128
 80061f4:	20001a94 	.word	0x20001a94
 80061f8:	0802d454 	.word	0x0802d454
 80061fc:	0802d4e0 	.word	0x0802d4e0
 8006200:	0802d4ac 	.word	0x0802d4ac
 8006204:	0802d418 	.word	0x0802d418
 8006208:	0802d3f4 	.word	0x0802d3f4
 800620c:	0802d3d0 	.word	0x0802d3d0
 8006210:	2000312c 	.word	0x2000312c

08006214 <nxt_sendres>:

// send residual buffer to the LCD
// gets called from rx_callback and from rx_complete
int nxt_sendres() {
 8006214:	b570      	push	{r4, r5, r6, lr}
	int res = 0;

	if ((residual) && (nxt_abort == 0)) {				// residual data from last call to send first
 8006216:	4d13      	ldr	r5, [pc, #76]	; (8006264 <nxt_sendres+0x50>)
 8006218:	682c      	ldr	r4, [r5, #0]
 800621a:	b11c      	cbz	r4, 8006224 <nxt_sendres+0x10>
 800621c:	4e12      	ldr	r6, [pc, #72]	; (8006268 <nxt_sendres+0x54>)
 800621e:	6833      	ldr	r3, [r6, #0]
 8006220:	b123      	cbz	r3, 800622c <nxt_sendres+0x18>
	int res = 0;
 8006222:	2400      	movs	r4, #0
		} else {
			while (txdmadone == 0)		// tx in progress
				osDelay(1);
		}
	}
	residual = 0;
 8006224:	2300      	movs	r3, #0
	return (res);
}
 8006226:	4620      	mov	r0, r4
	residual = 0;
 8006228:	602b      	str	r3, [r5, #0]
}
 800622a:	bd70      	pop	{r4, r5, r6, pc}
		if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 800622c:	4621      	mov	r1, r4
 800622e:	480f      	ldr	r0, [pc, #60]	; (800626c <nxt_sendres+0x58>)
 8006230:	f7fb ff82 	bl	8002138 <lcd_writeblock>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	4604      	mov	r4, r0
 8006238:	d00d      	beq.n	8006256 <nxt_sendres+0x42>
			while (txdmadone == 0)		// tx in progress
 800623a:	4e0d      	ldr	r6, [pc, #52]	; (8006270 <nxt_sendres+0x5c>)
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <nxt_sendres+0x10>
				osDelay(1);
 8006242:	2001      	movs	r0, #1
 8006244:	f010 f9fa 	bl	801663c <osDelay>
			while (txdmadone == 0)		// tx in progress
 8006248:	6833      	ldr	r3, [r6, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f9      	beq.n	8006242 <nxt_sendres+0x2e>
	residual = 0;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4620      	mov	r0, r4
	residual = 0;
 8006252:	602b      	str	r3, [r5, #0]
}
 8006254:	bd70      	pop	{r4, r5, r6, pc}
			printf("nxt_sendres: failed\n");
 8006256:	4807      	ldr	r0, [pc, #28]	; (8006274 <nxt_sendres+0x60>)
 8006258:	f020 fb10 	bl	802687c <puts>
			nxt_abort = 1;
 800625c:	2301      	movs	r3, #1
 800625e:	6033      	str	r3, [r6, #0]
 8006260:	e7e0      	b.n	8006224 <nxt_sendres+0x10>
 8006262:	bf00      	nop
 8006264:	2000338c 	.word	0x2000338c
 8006268:	20003128 	.word	0x20003128
 800626c:	20003130 	.word	0x20003130
 8006270:	20002174 	.word	0x20002174
 8006274:	0802d510 	.word	0x0802d510

08006278 <nxt_rx_callback>:
//#define lcd_writeblock(nxtbuffer, residual) printf("%d ",residual)

// http callback for Nextion firmware download
// this gets called for each downloaded chunk received
//
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *buf;
	struct pbuf *q;
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 800627c:	2000      	movs	r0, #0
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 800627e:	461c      	mov	r4, r3
	static int blockssent = 0;
	static int qlentot = 0, tot_sent = 0;

//	printf("nxt_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8006280:	4690      	mov	r8, r2
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8006282:	ed2d 8b02 	vpush	{d8}
 8006286:	b089      	sub	sp, #36	; 0x24
 8006288:	ee08 1a10 	vmov	s16, r1
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 800628c:	9005      	str	r0, [sp, #20]
 800628e:	9006      	str	r0, [sp, #24]
	LWIP_ASSERT("p != NULL", p != NULL);
 8006290:	2a00      	cmp	r2, #0
 8006292:	f000 80f0 	beq.w	8006476 <nxt_rx_callback+0x1fe>
	if (err != ERR_OK) {
 8006296:	2c00      	cmp	r4, #0
 8006298:	f040 80e2 	bne.w	8006460 <nxt_rx_callback+0x1e8>
		return;
	}

//	printf("nxt_rx_callback1: nxt_abort=%d, blockssent=%d, nxt_blocksacked=%d, q->len=%d\n", nxt_abort, blockssent,	nxt_blocksacked, p->len);

	if (nxt_abort) {
 800629c:	f8df b268 	ldr.w	fp, [pc, #616]	; 8006508 <nxt_rx_callback+0x290>
 80062a0:	f8db 3000 	ldr.w	r3, [fp]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d152      	bne.n	800634e <nxt_rx_callback+0xd6>
		http_downloading = NOT_LOADING;
	}

	if (http_downloading == NXT_PRELOADING) {
 80062a8:	4b86      	ldr	r3, [pc, #536]	; (80064c4 <nxt_rx_callback+0x24c>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	2a02      	cmp	r2, #2
 80062ae:	d101      	bne.n	80062b4 <nxt_rx_callback+0x3c>
		http_downloading = NXT_LOADING;
 80062b0:	2203      	movs	r2, #3
 80062b2:	601a      	str	r2, [r3, #0]
	}

	i = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	9302      	str	r3, [sp, #8]

	for (q = p; q != NULL; q = q->next) {
 80062b8:	f1b8 0f00 	cmp.w	r8, #0
 80062bc:	f000 80bb 	beq.w	8006436 <nxt_rx_callback+0x1be>
 80062c0:	4b81      	ldr	r3, [pc, #516]	; (80064c8 <nxt_rx_callback+0x250>)
 80062c2:	4644      	mov	r4, r8
 80062c4:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800650c <nxt_rx_callback+0x294>
 80062c8:	4d80      	ldr	r5, [pc, #512]	; (80064cc <nxt_rx_callback+0x254>)
 80062ca:	f1c3 0a02 	rsb	sl, r3, #2
 80062ce:	4e80      	ldr	r6, [pc, #512]	; (80064d0 <nxt_rx_callback+0x258>)
 80062d0:	e023      	b.n	800631a <nxt_rx_callback+0xa2>
			if (nxt_sendres() == -1) {	// send residual (if any)
				return (-1);		// abort will now be set
			}
		}

		pktlen = q->len;
 80062d2:	9303      	str	r3, [sp, #12]

		if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 80062d4:	6832      	ldr	r2, [r6, #0]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	f300 8084 	bgt.w	80063ea <nxt_rx_callback+0x172>
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
			}

		} else {
			len = pktlen;		// just try to send what we have got
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	9306      	str	r3, [sp, #24]
		}

		tot_sent += len;
 80062e6:	682b      	ldr	r3, [r5, #0]
 80062e8:	9a06      	ldr	r2, [sp, #24]
 80062ea:	4413      	add	r3, r2
		if (nxt_abort == 0) {
 80062ec:	f8db 2000 	ldr.w	r2, [fp]
		tot_sent += len;
 80062f0:	602b      	str	r3, [r5, #0]
		if (nxt_abort == 0) {
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	d02e      	beq.n	8006354 <nxt_rx_callback+0xdc>
				blockssent++;
			}
		}

//		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 80062f6:	4a77      	ldr	r2, [pc, #476]	; (80064d4 <nxt_rx_callback+0x25c>)
		altcp_recved(pcb, p->tot_len);
 80062f8:	ee18 0a10 	vmov	r0, s16
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 80062fc:	8963      	ldrh	r3, [r4, #10]
 80062fe:	6817      	ldr	r7, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 8006300:	f8b8 1008 	ldrh.w	r1, [r8, #8]
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006304:	443b      	add	r3, r7
 8006306:	6013      	str	r3, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 8006308:	f016 fdd2 	bl	801ceb0 <tcp_recved>
		pbuf_free(p);
 800630c:	4640      	mov	r0, r8
 800630e:	f016 f94f 	bl	801c5b0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8006312:	6824      	ldr	r4, [r4, #0]
 8006314:	2c00      	cmp	r4, #0
 8006316:	f000 808e 	beq.w	8006436 <nxt_rx_callback+0x1be>
		qlentot += q->len;
 800631a:	8963      	ldrh	r3, [r4, #10]
 800631c:	f8d9 2000 	ldr.w	r2, [r9]
 8006320:	441a      	add	r2, r3
 8006322:	f8c9 2000 	str.w	r2, [r9]
		tlen = q->tot_len;
 8006326:	8922      	ldrh	r2, [r4, #8]
 8006328:	9205      	str	r2, [sp, #20]
		if (residual > 0) {
 800632a:	4a6b      	ldr	r2, [pc, #428]	; (80064d8 <nxt_rx_callback+0x260>)
		len = q->len;
 800632c:	9306      	str	r3, [sp, #24]
		if (residual > 0) {
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	2a00      	cmp	r2, #0
 8006332:	ddce      	ble.n	80062d2 <nxt_rx_callback+0x5a>
			tot_sent += residual;
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	4413      	add	r3, r2
 8006338:	602b      	str	r3, [r5, #0]
			bytesinblocksent += residual;
 800633a:	6833      	ldr	r3, [r6, #0]
 800633c:	4413      	add	r3, r2
 800633e:	6033      	str	r3, [r6, #0]
			if (nxt_sendres() == -1) {	// send residual (if any)
 8006340:	f7ff ff68 	bl	8006214 <nxt_sendres>
 8006344:	1c42      	adds	r2, r0, #1
 8006346:	f000 809d 	beq.w	8006484 <nxt_rx_callback+0x20c>
		pktlen = q->len;
 800634a:	8963      	ldrh	r3, [r4, #10]
 800634c:	e7c1      	b.n	80062d2 <nxt_rx_callback+0x5a>
		http_downloading = NOT_LOADING;
 800634e:	4b5d      	ldr	r3, [pc, #372]	; (80064c4 <nxt_rx_callback+0x24c>)
 8006350:	601c      	str	r4, [r3, #0]
	if (http_downloading == NXT_PRELOADING) {
 8006352:	e7af      	b.n	80062b4 <nxt_rx_callback+0x3c>
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8006354:	9906      	ldr	r1, [sp, #24]
 8006356:	6860      	ldr	r0, [r4, #4]
 8006358:	f7fb feee 	bl	8002138 <lcd_writeblock>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	d103      	bne.n	8006370 <nxt_rx_callback+0xf8>
 8006368:	e093      	b.n	8006492 <nxt_rx_callback+0x21a>
				osDelay(1);
 800636a:	2001      	movs	r0, #1
 800636c:	f010 f966 	bl	801663c <osDelay>
			while (txdmadone == 0)		// tx in progress
 8006370:	4b5a      	ldr	r3, [pc, #360]	; (80064dc <nxt_rx_callback+0x264>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f8      	beq.n	800636a <nxt_rx_callback+0xf2>
			bytesinblocksent += len;
 8006378:	6832      	ldr	r2, [r6, #0]
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	4413      	add	r3, r2
			if (bytesinblocksent > 4096) {
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
			bytesinblocksent += len;
 8006382:	6033      	str	r3, [r6, #0]
			if (bytesinblocksent > 4096) {
 8006384:	dc52      	bgt.n	800642c <nxt_rx_callback+0x1b4>
			if (bytesinblocksent == 4096) {
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d1b4      	bne.n	80062f6 <nxt_rx_callback+0x7e>
				lcd_rxdma();		// get any new characters received
 800638c:	f7fb ff2c 	bl	80021e8 <lcd_rxdma>
				for (i = 0; i < 2000; i++) {
 8006390:	2300      	movs	r3, #0
 8006392:	9302      	str	r3, [sp, #8]
 8006394:	9b02      	ldr	r3, [sp, #8]
 8006396:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800639a:	db07      	blt.n	80063ac <nxt_rx_callback+0x134>
 800639c:	e052      	b.n	8006444 <nxt_rx_callback+0x1cc>
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	9b02      	ldr	r3, [sp, #8]
 80063a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063aa:	da4b      	bge.n	8006444 <nxt_rx_callback+0x1cc>
					ch = lcd_getc();
 80063ac:	f7fb ff5a 	bl	8002264 <lcd_getc>
 80063b0:	4603      	mov	r3, r0
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80063b2:	484b      	ldr	r0, [pc, #300]	; (80064e0 <nxt_rx_callback+0x268>)
					ch = lcd_getc();
 80063b4:	9307      	str	r3, [sp, #28]
					if (ch >= 0) {
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	db05      	blt.n	80063c8 <nxt_rx_callback+0x150>
						if (ch == 0x05) {
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d040      	beq.n	8006444 <nxt_rx_callback+0x1cc>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80063c2:	9907      	ldr	r1, [sp, #28]
 80063c4:	f020 f9be 	bl	8026744 <iprintf>
					osDelay(1);
 80063c8:	2001      	movs	r0, #1
 80063ca:	f010 f937 	bl	801663c <osDelay>
					lcd_rxdma();		// get any new characters received
 80063ce:	f7fb ff0b 	bl	80021e8 <lcd_rxdma>
					if (i == 1999) {
 80063d2:	9a02      	ldr	r2, [sp, #8]
 80063d4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1e0      	bne.n	800639e <nxt_rx_callback+0x126>
						printf("MISSED ACK\n");
 80063dc:	4841      	ldr	r0, [pc, #260]	; (80064e4 <nxt_rx_callback+0x26c>)
 80063de:	f020 fa4d 	bl	802687c <puts>
						ch = -1;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	9307      	str	r3, [sp, #28]
 80063e8:	e7d9      	b.n	800639e <nxt_rx_callback+0x126>
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 80063ea:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
			buf = q->payload;
 80063ee:	6860      	ldr	r0, [r4, #4]
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 80063f0:	9206      	str	r2, [sp, #24]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 80063f2:	9b06      	ldr	r3, [sp, #24]
 80063f4:	9302      	str	r3, [sp, #8]
 80063f6:	9a02      	ldr	r2, [sp, #8]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f6bf af73 	bge.w	80062e6 <nxt_rx_callback+0x6e>
 8006400:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <nxt_rx_callback+0x260>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b30      	ldr	r3, [pc, #192]	; (80064c8 <nxt_rx_callback+0x250>)
 8006406:	3a01      	subs	r2, #1
 8006408:	441a      	add	r2, r3
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	eb0a 0c02 	add.w	ip, sl, r2
 8006410:	5cc1      	ldrb	r1, [r0, r3]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006412:	9b02      	ldr	r3, [sp, #8]
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8006414:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006418:	3301      	adds	r3, #1
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	9902      	ldr	r1, [sp, #8]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	4299      	cmp	r1, r3
 8006422:	dbf2      	blt.n	800640a <nxt_rx_callback+0x192>
 8006424:	4b2c      	ldr	r3, [pc, #176]	; (80064d8 <nxt_rx_callback+0x260>)
 8006426:	f8c3 c000 	str.w	ip, [r3]
 800642a:	e75c      	b.n	80062e6 <nxt_rx_callback+0x6e>
				printf("BLOCK OVERRUN\n");
 800642c:	482e      	ldr	r0, [pc, #184]	; (80064e8 <nxt_rx_callback+0x270>)
 800642e:	f020 fa25 	bl	802687c <puts>
			if (bytesinblocksent == 4096) {
 8006432:	6833      	ldr	r3, [r6, #0]
 8006434:	e7a7      	b.n	8006386 <nxt_rx_callback+0x10e>
	}
//		p = p->next;
//		printf("nxt_rx_4: len=%d, tot=%d qlentot=%d\n",  len, down_total, qlentot);
	return (0);
 8006436:	2200      	movs	r2, #0
}
 8006438:	4610      	mov	r0, r2
 800643a:	b009      	add	sp, #36	; 0x24
 800643c:	ecbd 8b02 	vpop	{d8}
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ch < 0) {		// error
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db31      	blt.n	80064ae <nxt_rx_callback+0x236>
					nxt_blocksacked++;
 800644a:	4928      	ldr	r1, [pc, #160]	; (80064ec <nxt_rx_callback+0x274>)
				bytesinblocksent = 0;		// start new block
 800644c:	2300      	movs	r3, #0
				blockssent++;
 800644e:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <nxt_rx_callback+0x278>)
				bytesinblocksent = 0;		// start new block
 8006450:	6033      	str	r3, [r6, #0]
					nxt_blocksacked++;
 8006452:	680b      	ldr	r3, [r1, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	600b      	str	r3, [r1, #0]
				blockssent++;
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e74a      	b.n	80062f6 <nxt_rx_callback+0x7e>
		putchar('@');
 8006460:	2040      	movs	r0, #64	; 0x40
 8006462:	f020 f987 	bl	8026774 <putchar>
		printlwiperr(err);
 8006466:	4620      	mov	r0, r4
}
 8006468:	b009      	add	sp, #36	; 0x24
 800646a:	ecbd 8b02 	vpop	{d8}
 800646e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8006472:	f7fb bbdd 	b.w	8001c30 <printlwiperr>
	LWIP_ASSERT("p != NULL", p != NULL);
 8006476:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <nxt_rx_callback+0x27c>)
 8006478:	22a3      	movs	r2, #163	; 0xa3
 800647a:	491f      	ldr	r1, [pc, #124]	; (80064f8 <nxt_rx_callback+0x280>)
 800647c:	481f      	ldr	r0, [pc, #124]	; (80064fc <nxt_rx_callback+0x284>)
 800647e:	f020 f961 	bl	8026744 <iprintf>
 8006482:	e708      	b.n	8006296 <nxt_rx_callback+0x1e>
 8006484:	4602      	mov	r2, r0
}
 8006486:	4610      	mov	r0, r2
 8006488:	b009      	add	sp, #36	; 0x24
 800648a:	ecbd 8b02 	vpop	{d8}
 800648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("NXT Write1 failed from http client\n");
 8006492:	9001      	str	r0, [sp, #4]
 8006494:	481a      	ldr	r0, [pc, #104]	; (8006500 <nxt_rx_callback+0x288>)
 8006496:	f020 f9f1 	bl	802687c <puts>
				return (-1);
 800649a:	9a01      	ldr	r2, [sp, #4]
				nxt_abort = 1;
 800649c:	2301      	movs	r3, #1
}
 800649e:	4610      	mov	r0, r2
				nxt_abort = 1;
 80064a0:	f8cb 3000 	str.w	r3, [fp]
}
 80064a4:	b009      	add	sp, #36	; 0x24
 80064a6:	ecbd 8b02 	vpop	{d8}
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (-1);
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
					nxt_abort = 1;
 80064b2:	2301      	movs	r3, #1
					printf("ABORT ERR ON ACK\n");
 80064b4:	4813      	ldr	r0, [pc, #76]	; (8006504 <nxt_rx_callback+0x28c>)
					return (-1);
 80064b6:	9201      	str	r2, [sp, #4]
					nxt_abort = 1;
 80064b8:	f8cb 3000 	str.w	r3, [fp]
					printf("ABORT ERR ON ACK\n");
 80064bc:	f020 f9de 	bl	802687c <puts>
					return (-1);
 80064c0:	9a01      	ldr	r2, [sp, #4]
 80064c2:	e7b9      	b.n	8006438 <nxt_rx_callback+0x1c0>
 80064c4:	200018dc 	.word	0x200018dc
 80064c8:	20003130 	.word	0x20003130
 80064cc:	20003390 	.word	0x20003390
 80064d0:	200030dc 	.word	0x200030dc
 80064d4:	20001690 	.word	0x20001690
 80064d8:	2000338c 	.word	0x2000338c
 80064dc:	20002174 	.word	0x20002174
 80064e0:	0802d574 	.word	0x0802d574
 80064e4:	0802d588 	.word	0x0802d588
 80064e8:	0802d564 	.word	0x0802d564
 80064ec:	2000312c 	.word	0x2000312c
 80064f0:	200030d8 	.word	0x200030d8
 80064f4:	0802d524 	.word	0x0802d524
 80064f8:	08046d90 	.word	0x08046d90
 80064fc:	0802b43c 	.word	0x0802b43c
 8006500:	0802d540 	.word	0x0802d540
 8006504:	0802d594 	.word	0x0802d594
 8006508:	20003128 	.word	0x20003128
 800650c:	20003388 	.word	0x20003388

08006510 <nxt_check>:

// Get Nextion version and see if we are current
int nxt_check() {
 8006510:	b510      	push	{r4, lr}
	int res;

	if (nex_model[0] == '\0') {
 8006512:	4c16      	ldr	r4, [pc, #88]	; (800656c <nxt_check+0x5c>)
 8006514:	7823      	ldrb	r3, [r4, #0]
 8006516:	b14b      	cbz	r3, 800652c <nxt_check+0x1c>
		if (nex_model[0] == '\0')
			return (-1);
	}

// find LCD sys0 value
	if ((lcd_sys0 & 0xffff == 0) || ((lcd_sys0 & 0xffff) == 0xffff)) {
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <nxt_check+0x60>)
 800651a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	428b      	cmp	r3, r1
 8006526:	d01b      	beq.n	8006560 <nxt_check+0x50>
		printf("LCD's stored buildno was invalid\n");
		return (-2);
	}
	return (lcd_sys0);
 8006528:	6810      	ldr	r0, [r2, #0]
}
 800652a:	bd10      	pop	{r4, pc}
		lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800652c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8006530:	f7fc fe0c 	bl	800314c <lcd_init>
		lcd_getid();	// try again to read its model number etc
 8006534:	f7fd f966 	bl	8003804 <lcd_getid>
		printf("nxt_check: Trying to reset the LCD\n");
 8006538:	480e      	ldr	r0, [pc, #56]	; (8006574 <nxt_check+0x64>)
 800653a:	f020 f99f 	bl	802687c <puts>
		osDelay(1500);
 800653e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006542:	f010 f87b 	bl	801663c <osDelay>
		lcd_init(230400);  // reset LCD to normal speed
 8006546:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800654a:	f7fc fdff 	bl	800314c <lcd_init>
		osDelay(100);
 800654e:	2064      	movs	r0, #100	; 0x64
 8006550:	f010 f874 	bl	801663c <osDelay>
		if (nex_model[0] == '\0')
 8006554:	7823      	ldrb	r3, [r4, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1de      	bne.n	8006518 <nxt_check+0x8>
			return (-1);
 800655a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800655e:	bd10      	pop	{r4, pc}
		printf("LCD's stored buildno was invalid\n");
 8006560:	4805      	ldr	r0, [pc, #20]	; (8006578 <nxt_check+0x68>)
 8006562:	f020 f98b 	bl	802687c <puts>
		return (-2);
 8006566:	f06f 0001 	mvn.w	r0, #1
}
 800656a:	bd10      	pop	{r4, pc}
 800656c:	20001b50 	.word	0x20001b50
 8006570:	20000014 	.word	0x20000014
 8006574:	0802d5a8 	.word	0x0802d5a8
 8006578:	0802d5cc 	.word	0x0802d5cc

0800657c <lcdupneeded>:

int lcdupneeded() {
	if (srvlcdbld) {		// not 0 from the server
 800657c:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <lcdupneeded+0x38>)
int lcdupneeded() {
 800657e:	b510      	push	{r4, lr}
	if (srvlcdbld) {		// not 0 from the server
 8006580:	681c      	ldr	r4, [r3, #0]
 8006582:	b18c      	cbz	r4, 80065a8 <lcdupneeded+0x2c>
		if ((lcd_sys0 & 0xffff) != srvlcdbld) 	{ // this LCD doesent match the build presented by the server
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <lcdupneeded+0x3c>)
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	429c      	cmp	r4, r3
 800658c:	d006      	beq.n	800659c <lcdupneeded+0x20>
			printf("LCD server build %d, lcd has %d\n",srvlcdbld,lcd_sys0);
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	4621      	mov	r1, r4
 8006592:	480a      	ldr	r0, [pc, #40]	; (80065bc <lcdupneeded+0x40>)
 8006594:	f020 f8d6 	bl	8026744 <iprintf>
			return (1);
 8006598:	2001      	movs	r0, #1
		printf("LCD firmware %d matched server\n",srvlcdbld);
	} else {
		printf("LCD firmware match bypassed\n");
	}
	return (0);
}
 800659a:	bd10      	pop	{r4, pc}
		printf("LCD firmware %d matched server\n",srvlcdbld);
 800659c:	4621      	mov	r1, r4
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <lcdupneeded+0x44>)
 80065a0:	f020 f8d0 	bl	8026744 <iprintf>
	return (0);
 80065a4:	2000      	movs	r0, #0
}
 80065a6:	bd10      	pop	{r4, pc}
		printf("LCD firmware match bypassed\n");
 80065a8:	4806      	ldr	r0, [pc, #24]	; (80065c4 <lcdupneeded+0x48>)
 80065aa:	f020 f967 	bl	802687c <puts>
	return (0);
 80065ae:	4620      	mov	r0, r4
}
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	20002e08 	.word	0x20002e08
 80065b8:	20000014 	.word	0x20000014
 80065bc:	0802d5f0 	.word	0x0802d5f0
 80065c0:	0802d614 	.word	0x0802d614
 80065c4:	0802d634 	.word	0x0802d634

080065c8 <nxt_update>:

///  Check if LCD needs updating and update it if so
nxt_update() {
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t lcdbld;
	int i;


	if (nxt_check() == -1) {		// we could not identify LCD
 80065ca:	f7ff ffa1 	bl	8006510 <nxt_check>
 80065ce:	3001      	adds	r0, #1
 80065d0:	d03e      	beq.n	8006650 <nxt_update+0x88>
		printf("nxt_update: LCD not identified\n");
	} else {
		if (srvlcdbld == -2) {		// LCD user firmware might be corrupted
 80065d2:	4c24      	ldr	r4, [pc, #144]	; (8006664 <nxt_update+0x9c>)
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	3302      	adds	r3, #2
 80065d8:	d03f      	beq.n	800665a <nxt_update+0x92>
			printf("LCD firmware corrupted?\n");
		}
#if 1
		if (lcdupneeded())
 80065da:	f7ff ffcf 	bl	800657c <lcdupneeded>
 80065de:	b910      	cbnz	r0, 80065e6 <nxt_update+0x1e>
				osDelay(400);
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD) twice for luck
			}
			lcd_txblocked = 0;		// unblock LCD sending blocked
		} else {
			http_downloading = NOT_LOADING;
 80065e0:	4b21      	ldr	r3, [pc, #132]	; (8006668 <nxt_update+0xa0>)
 80065e2:	6018      	str	r0, [r3, #0]
		}
	}
}
 80065e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nxt_loader(lcdfile, loaderhost, lcdlen) == 0) {		// valid source file
 80065e6:	4b21      	ldr	r3, [pc, #132]	; (800666c <nxt_update+0xa4>)
 80065e8:	4921      	ldr	r1, [pc, #132]	; (8006670 <nxt_update+0xa8>)
 80065ea:	4822      	ldr	r0, [pc, #136]	; (8006674 <nxt_update+0xac>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	f7ff fd7b 	bl	80060e8 <nxt_loader>
 80065f2:	bb48      	cbnz	r0, 8006648 <nxt_update+0x80>
				while ((http_downloading) && (nxt_abort == 0)) {
 80065f4:	4d1c      	ldr	r5, [pc, #112]	; (8006668 <nxt_update+0xa0>)
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	b16b      	cbz	r3, 8006616 <nxt_update+0x4e>
 80065fa:	4f1f      	ldr	r7, [pc, #124]	; (8006678 <nxt_update+0xb0>)
					HAL_IWDG_Refresh(&hiwdg);
 80065fc:	4e1f      	ldr	r6, [pc, #124]	; (800667c <nxt_update+0xb4>)
 80065fe:	e006      	b.n	800660e <nxt_update+0x46>
 8006600:	f007 faba 	bl	800db78 <HAL_IWDG_Refresh>
					osDelay(5);
 8006604:	2005      	movs	r0, #5
 8006606:	f010 f819 	bl	801663c <osDelay>
				while ((http_downloading) && (nxt_abort == 0)) {
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	b11b      	cbz	r3, 8006616 <nxt_update+0x4e>
 800660e:	683b      	ldr	r3, [r7, #0]
					HAL_IWDG_Refresh(&hiwdg);
 8006610:	4630      	mov	r0, r6
				while ((http_downloading) && (nxt_abort == 0)) {
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f4      	beq.n	8006600 <nxt_update+0x38>
				osDelay(2000);
 8006616:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800661a:	f010 f80f 	bl	801663c <osDelay>
				printf("Attempting LCD re-sync\n");
 800661e:	4818      	ldr	r0, [pc, #96]	; (8006680 <nxt_update+0xb8>)
 8006620:	f020 f92c 	bl	802687c <puts>
				lcd_init(230400);	// resync hardware
 8006624:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8006628:	f7fc fd90 	bl	800314c <lcd_init>
				osDelay(400);
 800662c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006630:	f010 f804 	bl	801663c <osDelay>
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD)
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	f7fd f915 	bl	8003864 <lcd_putsys0>
				osDelay(400);
 800663a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800663e:	f00f fffd 	bl	801663c <osDelay>
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD) twice for luck
 8006642:	6820      	ldr	r0, [r4, #0]
 8006644:	f7fd f90e 	bl	8003864 <lcd_putsys0>
			lcd_txblocked = 0;		// unblock LCD sending blocked
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <nxt_update+0xbc>)
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
}
 800664e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("nxt_update: LCD not identified\n");
 8006650:	480d      	ldr	r0, [pc, #52]	; (8006688 <nxt_update+0xc0>)
}
 8006652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("nxt_update: LCD not identified\n");
 8006656:	f020 b911 	b.w	802687c <puts>
			printf("LCD firmware corrupted?\n");
 800665a:	480c      	ldr	r0, [pc, #48]	; (800668c <nxt_update+0xc4>)
 800665c:	f020 f90e 	bl	802687c <puts>
 8006660:	e7bb      	b.n	80065da <nxt_update+0x12>
 8006662:	bf00      	nop
 8006664:	20002e08 	.word	0x20002e08
 8006668:	200018dc 	.word	0x200018dc
 800666c:	20001ab4 	.word	0x20001ab4
 8006670:	2000001c 	.word	0x2000001c
 8006674:	20001a94 	.word	0x20001a94
 8006678:	20003128 	.word	0x20003128
 800667c:	2000268c 	.word	0x2000268c
 8006680:	0802d688 	.word	0x0802d688
 8006684:	20001a90 	.word	0x20001a90
 8006688:	0802d650 	.word	0x0802d650
 800668c:	0802d670 	.word	0x0802d670

08006690 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8006690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006694:	ed2d 8b02 	vpush	{d8}
 8006698:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 800669a:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 800669c:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800669e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80066a2:	ae0c      	add	r6, sp, #48	; 0x30
 80066a4:	4f6e      	ldr	r7, [pc, #440]	; (8006860 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80066a6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8006888 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 80066aa:	f00f ffc7 	bl	801663c <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80066ae:	2301      	movs	r3, #1
 80066b0:	9600      	str	r6, [sp, #0]
 80066b2:	b2aa      	uxth	r2, r5
 80066b4:	21c1      	movs	r1, #193	; 0xc1
 80066b6:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 80066b8:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80066ba:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80066be:	f007 f871 	bl	800d7a4 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80066c2:	4604      	mov	r4, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 80a6 	bne.w	8006816 <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 80066ca:	3501      	adds	r5, #1
 80066cc:	2d04      	cmp	r5, #4
 80066ce:	d1ee      	bne.n	80066ae <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 80066d0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 80066d4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 80066d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 80066dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 80066e0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066e4:	485f      	ldr	r0, [pc, #380]	; (8006864 <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 80066e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066ea:	495f      	ldr	r1, [pc, #380]	; (8006868 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 80066ec:	0992      	lsrs	r2, r2, #6
	t = tr;
 80066ee:	099c      	lsrs	r4, r3, #6
	p = pr;
 80066f0:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066f4:	4a5d      	ldr	r2, [pc, #372]	; (800686c <getpressure115.part.0+0x1dc>)
	t = tr;
 80066f6:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80066fa:	119d      	asrs	r5, r3, #6
	p = pr;
 80066fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8006700:	2400      	movs	r4, #0
	t = tr;
 8006702:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006706:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 800670a:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 800670e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006712:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006716:	ed91 4b00 	vldr	d4, [r1]
 800671a:	4955      	ldr	r1, [pc, #340]	; (8006870 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 800671c:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800671e:	eea1 4b07 	vfma.f64	d4, d1, d7
 8006722:	ed91 6b00 	vldr	d6, [r1]
 8006726:	ed9d 8b06 	vldr	d8, [sp, #24]
 800672a:	ed92 0b00 	vldr	d0, [r2]
 800672e:	eeb0 7b46 	vmov.f64	d7, d6
 8006732:	ed9d 2b08 	vldr	d2, [sp, #32]
 8006736:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800673a:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8006830 <getpressure115.part.0+0x1a0>
 800673e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8006838 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006742:	eea0 7b02 	vfma.f64	d7, d0, d2
 8006746:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800674a:	ed9d 6b06 	vldr	d6, [sp, #24]
 800674e:	eea6 5b03 	vfma.f64	d5, d6, d3
 8006752:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 8006756:	ed9d 0b06 	vldr	d0, [sp, #24]
 800675a:	f020 f93f 	bl	80269dc <modf>
	t = tr * -0.1706 + 112.27; //C
 800675e:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006762:	4944      	ldr	r1, [pc, #272]	; (8006874 <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006764:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8006768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 800676c:	4b42      	ldr	r3, [pc, #264]	; (8006878 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 800676e:	2264      	movs	r2, #100	; 0x64
 8006770:	4842      	ldr	r0, [pc, #264]	; (800687c <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 8006772:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8006840 <getpressure115.part.0+0x1b0>
 8006776:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8006848 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 800677a:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 800677e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006782:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8006850 <getpressure115.part.0+0x1c0>
 8006786:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 800678a:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800678e:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 8006792:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006796:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8006858 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800679a:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 800679e:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 80067a4:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067a8:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067ac:	4935      	ldr	r1, [pc, #212]	; (8006884 <getpressure115.part.0+0x1f4>)
	temperature = t;
 80067ae:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80067b2:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067b6:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 80067ba:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80067c2:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 80067c6:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067ca:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 80067ce:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067d2:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 80067d6:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067da:	feb8 7b47 	vrinta.f64	d7, d7
 80067de:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 80067e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80067e6:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067ea:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 80067ee:	ee16 3a10 	vmov	r3, s12
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067f8:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 80067fc:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067fe:	ee17 2a10 	vmov	r2, s14
}
 8006802:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006804:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8006808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800680c:	b00f      	add	sp, #60	; 0x3c
 800680e:	ecbd 8b02 	vpop	{d8}
 8006812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8006816:	4648      	mov	r0, r9
 8006818:	4621      	mov	r1, r4
 800681a:	f01f ff93 	bl	8026744 <iprintf>
			if (i == 3)
 800681e:	2d03      	cmp	r5, #3
 8006820:	f47f af53 	bne.w	80066ca <getpressure115.part.0+0x3a>
}
 8006824:	4620      	mov	r0, r4
 8006826:	b00f      	add	sp, #60	; 0x3c
 8006828:	ecbd 8b02 	vpop	{d8}
 800682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006830:	04411044 	.word	0x04411044
 8006834:	3fb04411 	.word	0x3fb04411
 8006838:	00000000 	.word	0x00000000
 800683c:	40490000 	.word	0x40490000
 8006840:	86594af5 	.word	0x86594af5
 8006844:	bfc5d638 	.word	0xbfc5d638
 8006848:	ae147ae1 	.word	0xae147ae1
 800684c:	405c1147 	.word	0x405c1147
 8006850:	00000000 	.word	0x00000000
 8006854:	40590000 	.word	0x40590000
 8006858:	00000000 	.word	0x00000000
 800685c:	40af4000 	.word	0x40af4000
 8006860:	200025a8 	.word	0x200025a8
 8006864:	200033b8 	.word	0x200033b8
 8006868:	200033a0 	.word	0x200033a0
 800686c:	200033a8 	.word	0x200033a8
 8006870:	20003398 	.word	0x20003398
 8006874:	20003434 	.word	0x20003434
 8006878:	20003438 	.word	0x20003438
 800687c:	20003444 	.word	0x20003444
 8006880:	20003440 	.word	0x20003440
 8006884:	2000303c 	.word	0x2000303c
 8006888:	0802d6a0 	.word	0x0802d6a0

0800688c <cycleleds>:
void cycleleds(void) {
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	b084      	sub	sp, #16
	const uint16_t pattern[] = {
 8006892:	4a35      	ldr	r2, [pc, #212]	; (8006968 <cycleleds+0xdc>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8006894:	2700      	movs	r7, #0
 8006896:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800696c <cycleleds+0xe0>
 800689a:	ac01      	add	r4, sp, #4
 800689c:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 80068a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80068a2:	4623      	mov	r3, r4
 80068a4:	4626      	mov	r6, r4
 80068a6:	c303      	stmia	r3!, {r0, r1}
 80068a8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80068aa:	2200      	movs	r2, #0
 80068ac:	f836 1b02 	ldrh.w	r1, [r6], #2
 80068b0:	4640      	mov	r0, r8
 80068b2:	f006 fadd 	bl	800ce70 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 80068b6:	9700      	str	r7, [sp, #0]
 80068b8:	9b00      	ldr	r3, [sp, #0]
 80068ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068be:	da06      	bge.n	80068ce <cycleleds+0x42>
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	9b00      	ldr	r3, [sp, #0]
 80068c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068cc:	dbf8      	blt.n	80068c0 <cycleleds+0x34>
	for (i = 0; i < 5; i++) {
 80068ce:	42ae      	cmp	r6, r5
 80068d0:	d1eb      	bne.n	80068aa <cycleleds+0x1e>
	for (delay = 0; delay < 0xC00000; delay++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068dc:	da06      	bge.n	80068ec <cycleleds+0x60>
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	9b00      	ldr	r3, [sp, #0]
 80068e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068ea:	dbf8      	blt.n	80068de <cycleleds+0x52>
	const uint16_t pattern[] = {
 80068ec:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 80068ee:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800696c <cycleleds+0xe0>
		for (delay = 0; delay < 0x400000; delay++)
 80068f2:	2700      	movs	r7, #0
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 80068f4:	2201      	movs	r2, #1
 80068f6:	f836 1b02 	ldrh.w	r1, [r6], #2
 80068fa:	4640      	mov	r0, r8
 80068fc:	f006 fab8 	bl	800ce70 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 8006900:	9700      	str	r7, [sp, #0]
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006908:	da06      	bge.n	8006918 <cycleleds+0x8c>
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	9b00      	ldr	r3, [sp, #0]
 8006912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006916:	dbf8      	blt.n	800690a <cycleleds+0x7e>
	for (i = 0; i < 5; i++) {
 8006918:	42ae      	cmp	r6, r5
 800691a:	d1eb      	bne.n	80068f4 <cycleleds+0x68>
	for (delay = 0; delay < 0xC00000; delay++)
 800691c:	2300      	movs	r3, #0
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006926:	da06      	bge.n	8006936 <cycleleds+0xaa>
 8006928:	9b00      	ldr	r3, [sp, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	9b00      	ldr	r3, [sp, #0]
 8006930:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006934:	dbf8      	blt.n	8006928 <cycleleds+0x9c>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8006936:	2700      	movs	r7, #0
 8006938:	4e0c      	ldr	r6, [pc, #48]	; (800696c <cycleleds+0xe0>)
 800693a:	2200      	movs	r2, #0
 800693c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8006940:	4630      	mov	r0, r6
 8006942:	f006 fa95 	bl	800ce70 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 8006946:	9700      	str	r7, [sp, #0]
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694e:	da06      	bge.n	800695e <cycleleds+0xd2>
 8006950:	9b00      	ldr	r3, [sp, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	9b00      	ldr	r3, [sp, #0]
 8006958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800695c:	dbf8      	blt.n	8006950 <cycleleds+0xc4>
	for (i = 0; i < 5; i++) {
 800695e:	42ac      	cmp	r4, r5
 8006960:	d1eb      	bne.n	800693a <cycleleds+0xae>
}
 8006962:	b004      	add	sp, #16
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006968:	0802a988 	.word	0x0802a988
 800696c:	40020c00 	.word	0x40020c00

08006970 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8006970:	b510      	push	{r4, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	b082      	sub	sp, #8
	osDelay(5);
 8006976:	2005      	movs	r0, #5
 8006978:	f00f fe60 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800697c:	2201      	movs	r2, #1
 800697e:	2104      	movs	r1, #4
 8006980:	482e      	ldr	r0, [pc, #184]	; (8006a3c <setpgagain+0xcc>)
 8006982:	f006 fa75 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 8006986:	2005      	movs	r0, #5
 8006988:	f00f fe58 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800698c:	2200      	movs	r2, #0
 800698e:	2104      	movs	r1, #4
 8006990:	482a      	ldr	r0, [pc, #168]	; (8006a3c <setpgagain+0xcc>)
 8006992:	f006 fa6d 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 8006996:	2005      	movs	r0, #5
 8006998:	f00f fe50 	bl	801663c <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 800699c:	4928      	ldr	r1, [pc, #160]	; (8006a40 <setpgagain+0xd0>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 800699e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069a2:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80069a4:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80069a6:	4827      	ldr	r0, [pc, #156]	; (8006a44 <setpgagain+0xd4>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80069a8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80069ac:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80069b0:	a901      	add	r1, sp, #4
 80069b2:	f009 fa63 	bl	800fe7c <HAL_SPI_Transmit>
 80069b6:	bba0      	cbnz	r0, 8006a22 <setpgagain+0xb2>
	osDelay(5);
 80069b8:	2005      	movs	r0, #5
 80069ba:	f00f fe3f 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80069be:	2201      	movs	r2, #1
 80069c0:	2104      	movs	r1, #4
 80069c2:	481e      	ldr	r0, [pc, #120]	; (8006a3c <setpgagain+0xcc>)
 80069c4:	f006 fa54 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 80069c8:	2005      	movs	r0, #5
 80069ca:	f00f fe37 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80069ce:	481b      	ldr	r0, [pc, #108]	; (8006a3c <setpgagain+0xcc>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	2104      	movs	r1, #4
 80069d4:	f006 fa4c 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 80069d8:	2005      	movs	r0, #5
 80069da:	f00f fe2f 	bl	801663c <osDelay>
	if (gain > 6) {		// might be a DC jump
 80069de:	2c06      	cmp	r4, #6
 80069e0:	dd1c      	ble.n	8006a1c <setpgagain+0xac>
		sigsuppress = 8;		// prevent trigger for a while
 80069e2:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <setpgagain+0xd8>)
 80069e4:	2208      	movs	r2, #8
	if (gain > 7) {
 80069e6:	2c07      	cmp	r4, #7
		sigsuppress = 8;		// prevent trigger for a while
 80069e8:	601a      	str	r2, [r3, #0]
	if (gain > 7) {
 80069ea:	d017      	beq.n	8006a1c <setpgagain+0xac>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80069ec:	f244 1001 	movw	r0, #16641	; 0x4101
 80069f0:	f8ad 0004 	strh.w	r0, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80069f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f8:	2201      	movs	r2, #1
 80069fa:	a901      	add	r1, sp, #4
 80069fc:	4811      	ldr	r0, [pc, #68]	; (8006a44 <setpgagain+0xd4>)
 80069fe:	f009 fa3d 	bl	800fe7c <HAL_SPI_Transmit>
 8006a02:	b9a8      	cbnz	r0, 8006a30 <setpgagain+0xc0>
	osDelay(5);
 8006a04:	2005      	movs	r0, #5
 8006a06:	f00f fe19 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	2104      	movs	r1, #4
 8006a0e:	480b      	ldr	r0, [pc, #44]	; (8006a3c <setpgagain+0xcc>)
 8006a10:	f006 fa2e 	bl	800ce70 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <setpgagain+0xdc>)
 8006a16:	801c      	strh	r4, [r3, #0]
}
 8006a18:	b002      	add	sp, #8
 8006a1a:	bd10      	pop	{r4, pc}
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
 8006a1c:	f44f 4082 	mov.w	r0, #16640	; 0x4100
 8006a20:	e7e6      	b.n	80069f0 <setpgagain+0x80>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8006a22:	4601      	mov	r1, r0
 8006a24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006a28:	4809      	ldr	r0, [pc, #36]	; (8006a50 <setpgagain+0xe0>)
 8006a2a:	f01f fe8b 	bl	8026744 <iprintf>
 8006a2e:	e7c3      	b.n	80069b8 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8006a30:	4601      	mov	r1, r0
 8006a32:	4808      	ldr	r0, [pc, #32]	; (8006a54 <setpgagain+0xe4>)
 8006a34:	f01f fe86 	bl	8026744 <iprintf>
 8006a38:	e7e4      	b.n	8006a04 <setpgagain+0x94>
 8006a3a:	bf00      	nop
 8006a3c:	40021800 	.word	0x40021800
 8006a40:	0802dae4 	.word	0x0802dae4
 8006a44:	200026ac 	.word	0x200026ac
 8006a48:	200007a0 	.word	0x200007a0
 8006a4c:	20003430 	.word	0x20003430
 8006a50:	0802d6c4 	.word	0x0802d6c4
 8006a54:	0802d6f0 	.word	0x0802d6f0

08006a58 <initpga>:
int initpga() {
 8006a58:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006a5a:	2201      	movs	r2, #1
int initpga() {
 8006a5c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006a5e:	2104      	movs	r1, #4
 8006a60:	4826      	ldr	r0, [pc, #152]	; (8006afc <initpga+0xa4>)
 8006a62:	f006 fa05 	bl	800ce70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8006a66:	2200      	movs	r2, #0
 8006a68:	2104      	movs	r1, #4
 8006a6a:	4824      	ldr	r0, [pc, #144]	; (8006afc <initpga+0xa4>)
 8006a6c:	f006 fa00 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(50);
 8006a70:	2032      	movs	r0, #50	; 0x32
 8006a72:	f00f fde3 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006a76:	2201      	movs	r2, #1
 8006a78:	2104      	movs	r1, #4
 8006a7a:	4820      	ldr	r0, [pc, #128]	; (8006afc <initpga+0xa4>)
 8006a7c:	f006 f9f8 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 8006a80:	2005      	movs	r0, #5
 8006a82:	f00f fddb 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006a86:	2200      	movs	r2, #0
 8006a88:	2104      	movs	r1, #4
 8006a8a:	481c      	ldr	r0, [pc, #112]	; (8006afc <initpga+0xa4>)
 8006a8c:	f006 f9f0 	bl	800ce70 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8006a90:	2000      	movs	r0, #0
 8006a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006a9c:	a901      	add	r1, sp, #4
 8006a9e:	4818      	ldr	r0, [pc, #96]	; (8006b00 <initpga+0xa8>)
 8006aa0:	f009 f9ec 	bl	800fe7c <HAL_SPI_Transmit>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	bb08      	cbnz	r0, 8006aec <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4813      	ldr	r0, [pc, #76]	; (8006afc <initpga+0xa4>)
 8006aae:	f006 f9df 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(5);
 8006ab2:	2005      	movs	r0, #5
 8006ab4:	f00f fdc2 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006ab8:	4622      	mov	r2, r4
 8006aba:	2104      	movs	r1, #4
 8006abc:	480f      	ldr	r0, [pc, #60]	; (8006afc <initpga+0xa4>)
 8006abe:	f006 f9d7 	bl	800ce70 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006ac2:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8006ac6:	2005      	movs	r0, #5
 8006ac8:	f00f fdb8 	bl	801663c <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	a901      	add	r1, sp, #4
 8006ad4:	480a      	ldr	r0, [pc, #40]	; (8006b00 <initpga+0xa8>)
 8006ad6:	f8ad 4004 	strh.w	r4, [sp, #4]
 8006ada:	f009 f9cf 	bl	800fe7c <HAL_SPI_Transmit>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	b920      	cbnz	r0, 8006aec <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8006ae2:	f7ff ff45 	bl	8006970 <setpgagain>
	return (0);
 8006ae6:	4620      	mov	r0, r4
}
 8006ae8:	b002      	add	sp, #8
 8006aea:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8006aec:	4621      	mov	r1, r4
 8006aee:	4805      	ldr	r0, [pc, #20]	; (8006b04 <initpga+0xac>)
 8006af0:	f01f fe28 	bl	8026744 <iprintf>
		return (1);
 8006af4:	2001      	movs	r0, #1
}
 8006af6:	b002      	add	sp, #8
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	40021800 	.word	0x40021800
 8006b00:	200026ac 	.word	0x200026ac
 8006b04:	0802d70c 	.word	0x0802d70c

08006b08 <bumppga>:
int bumppga(int i) {
 8006b08:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8006b0a:	4d1f      	ldr	r5, [pc, #124]	; (8006b88 <bumppga+0x80>)
int bumppga(int i) {
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	4604      	mov	r4, r0
	gain = pgagain;
 8006b10:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006b14:	b28b      	uxth	r3, r1
	gain = pgagain;
 8006b16:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d827      	bhi.n	8006b6c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <bumppga+0x84>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b0b      	cmp	r3, #11
 8006b22:	d00c      	beq.n	8006b3e <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	da01      	bge.n	8006b2e <bumppga+0x26>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd04      	ble.n	8006b38 <bumppga+0x30>
 8006b2e:	2c00      	cmp	r4, #0
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	dd12      	ble.n	8006b5a <bumppga+0x52>
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	dd10      	ble.n	8006b5a <bumppga+0x52>
	return (0);
 8006b38:	2000      	movs	r0, #0
}
 8006b3a:	b003      	add	sp, #12
 8006b3c:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8006b3e:	2907      	cmp	r1, #7
 8006b40:	dd01      	ble.n	8006b46 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8006b42:	2307      	movs	r3, #7
 8006b44:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	da01      	bge.n	8006b50 <bumppga+0x48>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	ddf3      	ble.n	8006b38 <bumppga+0x30>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	2b06      	cmp	r3, #6
 8006b54:	dd01      	ble.n	8006b5a <bumppga+0x52>
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	dcee      	bgt.n	8006b38 <bumppga+0x30>
			gain = gain + i;
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	4423      	add	r3, r4
 8006b5e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8006b60:	9801      	ldr	r0, [sp, #4]
 8006b62:	f7ff ff05 	bl	8006970 <setpgagain>
			return (i);
 8006b66:	4620      	mov	r0, r4
}
 8006b68:	b003      	add	sp, #12
 8006b6a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8006b6c:	4808      	ldr	r0, [pc, #32]	; (8006b90 <bumppga+0x88>)
 8006b6e:	f01f fde9 	bl	8026744 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <bumppga+0x84>)
		pgagain = 0;
 8006b74:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b76:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8006b78:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b7a:	2b0b      	cmp	r3, #11
 8006b7c:	d0e3      	beq.n	8006b46 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	dbd2      	blt.n	8006b2a <bumppga+0x22>
 8006b84:	e7d3      	b.n	8006b2e <bumppga+0x26>
 8006b86:	bf00      	nop
 8006b88:	20003430 	.word	0x20003430
 8006b8c:	20002180 	.word	0x20002180
 8006b90:	0802d728 	.word	0x0802d728

08006b94 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8006b94:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006b96:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8006b98:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006ba0:	f88d 000c 	strb.w	r0, [sp, #12]
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	f88d 100d 	strb.w	r1, [sp, #13]
 8006baa:	aa03      	add	r2, sp, #12
 8006bac:	21c0      	movs	r1, #192	; 0xc0
 8006bae:	4809      	ldr	r0, [pc, #36]	; (8006bd4 <getpressure115+0x40>)
 8006bb0:	9400      	str	r4, [sp, #0]
 8006bb2:	f006 fc63 	bl	800d47c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006bb6:	b928      	cbnz	r0, 8006bc4 <getpressure115+0x30>
 8006bb8:	f7ff fd6a 	bl	8006690 <getpressure115.part.0>
 8006bbc:	4604      	mov	r4, r0
}
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	b004      	add	sp, #16
 8006bc2:	bd10      	pop	{r4, pc}
 8006bc4:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006bc6:	4804      	ldr	r0, [pc, #16]	; (8006bd8 <getpressure115+0x44>)
 8006bc8:	f01f fdbc 	bl	8026744 <iprintf>
}
 8006bcc:	4620      	mov	r0, r4
 8006bce:	b004      	add	sp, #16
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200025a8 	.word	0x200025a8
 8006bd8:	0802d760 	.word	0x0802d760

08006bdc <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8006be2:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006be6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006bea:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8006bee:	ac06      	add	r4, sp, #24
 8006bf0:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006bf4:	4f36      	ldr	r7, [pc, #216]	; (8006cd0 <initpressure115+0xf4>)
 8006bf6:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8006bfa:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006bfe:	eb09 0204 	add.w	r2, r9, r4
 8006c02:	2301      	movs	r3, #1
 8006c04:	9400      	str	r4, [sp, #0]
 8006c06:	21c0      	movs	r1, #192	; 0xc0
 8006c08:	b292      	uxth	r2, r2
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	441c      	add	r4, r3
 8006c0e:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8006c12:	f006 fdc7 	bl	800d7a4 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006c16:	4605      	mov	r5, r0
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d141      	bne.n	8006ca0 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8006c1c:	45a2      	cmp	sl, r4
 8006c1e:	d1ee      	bne.n	8006bfe <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8006c20:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006c24:	2b5a      	cmp	r3, #90	; 0x5a
 8006c26:	d04a      	beq.n	8006cbe <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8006c28:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006c30:	badb      	revsh	r3, r3
 8006c32:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8006c36:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006c3a:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8006c3c:	109b      	asrs	r3, r3, #2
 8006c3e:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8006c40:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8006c42:	ee06 2a10 	vmov	s12, r2
 8006c46:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8006c4a:	ee07 3a10 	vmov	s14, r3
 8006c4e:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8006c52:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8006c54:	ee05 1a10 	vmov	s10, r1
 8006c58:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c5c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8006c5e:	ee04 0a10 	vmov	s8, r0
 8006c62:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8006c66:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8006c68:	481c      	ldr	r0, [pc, #112]	; (8006cdc <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8006c6a:	491d      	ldr	r1, [pc, #116]	; (8006ce0 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c6c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8006c70:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c74:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8006c76:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8006c7a:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8006c7e:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c82:	f88d 2014 	strb.w	r2, [sp, #20]
 8006c86:	2302      	movs	r3, #2
 8006c88:	aa05      	add	r2, sp, #20
 8006c8a:	21c0      	movs	r1, #192	; 0xc0
 8006c8c:	4810      	ldr	r0, [pc, #64]	; (8006cd0 <initpressure115+0xf4>)
 8006c8e:	f006 fbf5 	bl	800d47c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006c92:	b968      	cbnz	r0, 8006cb0 <initpressure115+0xd4>
 8006c94:	f7ff fcfc 	bl	8006690 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8006c98:	4628      	mov	r0, r5
 8006c9a:	b008      	add	sp, #32
 8006c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4810      	ldr	r0, [pc, #64]	; (8006ce4 <initpressure115+0x108>)
 8006ca4:	f01f fd4e 	bl	8026744 <iprintf>
}
 8006ca8:	4628      	mov	r0, r5
 8006caa:	b008      	add	sp, #32
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <initpressure115+0x10c>)
 8006cb2:	f01f fd47 	bl	8026744 <iprintf>
}
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	b008      	add	sp, #32
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8006cbe:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8006cc0:	480a      	ldr	r0, [pc, #40]	; (8006cec <initpressure115+0x110>)
 8006cc2:	f01f fd3f 	bl	8026744 <iprintf>
}
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	b008      	add	sp, #32
 8006cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cce:	bf00      	nop
 8006cd0:	200025a8 	.word	0x200025a8
 8006cd4:	200033b8 	.word	0x200033b8
 8006cd8:	20003398 	.word	0x20003398
 8006cdc:	200033a0 	.word	0x200033a0
 8006ce0:	200033a8 	.word	0x200033a8
 8006ce4:	0802d784 	.word	0x0802d784
 8006ce8:	0802d760 	.word	0x0802d760
 8006cec:	0802d7b4 	.word	0x0802d7b4

08006cf0 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8006cf6:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8006cf8:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006cfa:	4f46      	ldr	r7, [pc, #280]	; (8006e14 <getpressure3115+0x124>)
 8006cfc:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006cfe:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8006e34 <getpressure3115+0x144>
	data[0] = 0x55;
 8006d02:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8006d06:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8006d0c:	f00f fc96 	bl	801663c <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d10:	2301      	movs	r3, #1
 8006d12:	2200      	movs	r2, #0
 8006d14:	21c0      	movs	r1, #192	; 0xc0
 8006d16:	4638      	mov	r0, r7
 8006d18:	9600      	str	r6, [sp, #0]
 8006d1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d1e:	f006 fd41 	bl	800d7a4 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006d22:	4604      	mov	r4, r0
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d163      	bne.n	8006df0 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8006d28:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8006d2c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8006d2e:	071b      	lsls	r3, r3, #28
 8006d30:	d401      	bmi.n	8006d36 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8006d32:	2d04      	cmp	r5, #4
 8006d34:	d1e7      	bne.n	8006d06 <getpressure3115+0x16>
 8006d36:	2501      	movs	r5, #1
 8006d38:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d3a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8006d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8006e14 <getpressure3115+0x124>
 8006d42:	46a9      	mov	r9, r5
 8006d44:	b2aa      	uxth	r2, r5
 8006d46:	2301      	movs	r3, #1
 8006d48:	21c0      	movs	r1, #192	; 0xc0
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8006d4e:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d50:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8006d54:	f006 fd26 	bl	800d7a4 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006d58:	4604      	mov	r4, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d152      	bne.n	8006e04 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8006d5e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8006d62:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8006d64:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8006d68:	d1ec      	bne.n	8006d44 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d6a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8006d6e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d72:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d76:	0209      	lsls	r1, r1, #8
 8006d78:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8006d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d84:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d88:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d8a:	4923      	ldr	r1, [pc, #140]	; (8006e18 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d8c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d90:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d92:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d94:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d96:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d98:	9805      	ldr	r0, [sp, #20]
 8006d9a:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d9e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006da2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006da6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8006daa:	9a04      	ldr	r2, [sp, #16]
 8006dac:	fba3 0202 	umull	r0, r2, r3, r2
 8006db0:	0a12      	lsrs	r2, r2, #8
 8006db2:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006db4:	9a04      	ldr	r2, [sp, #16]
 8006db6:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006dba:	4819      	ldr	r0, [pc, #100]	; (8006e20 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8006dc2:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8006dc4:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006dc8:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006dce:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8006dd0:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006dd2:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8006dd4:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8006dd6:	0912      	lsrs	r2, r2, #4
 8006dd8:	4813      	ldr	r0, [pc, #76]	; (8006e28 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8006dda:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8006dde:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8006de0:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8006de2:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <getpressure3115+0x13c>)
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	6013      	str	r3, [r2, #0]
}
 8006dea:	b00c      	add	sp, #48	; 0x30
 8006dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006df0:	4601      	mov	r1, r0
 8006df2:	4640      	mov	r0, r8
 8006df4:	f01f fca6 	bl	8026744 <iprintf>
			if (trys == 3)
 8006df8:	2d03      	cmp	r5, #3
 8006dfa:	d195      	bne.n	8006d28 <getpressure3115+0x38>
}
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	b00c      	add	sp, #48	; 0x30
 8006e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8006e04:	4601      	mov	r1, r0
 8006e06:	480a      	ldr	r0, [pc, #40]	; (8006e30 <getpressure3115+0x140>)
 8006e08:	f01f fc9c 	bl	8026744 <iprintf>
}
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	b00c      	add	sp, #48	; 0x30
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	200025a8 	.word	0x200025a8
 8006e18:	2000303c 	.word	0x2000303c
 8006e1c:	10624dd3 	.word	0x10624dd3
 8006e20:	20003434 	.word	0x20003434
 8006e24:	20003438 	.word	0x20003438
 8006e28:	20003440 	.word	0x20003440
 8006e2c:	20003444 	.word	0x20003444
 8006e30:	0802d804 	.word	0x0802d804
 8006e34:	0802d7dc 	.word	0x0802d7dc

08006e38 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8006e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006e42:	220c      	movs	r2, #12
 8006e44:	a908      	add	r1, sp, #32
 8006e46:	462b      	mov	r3, r5
 8006e48:	4832      	ldr	r0, [pc, #200]	; (8006f14 <initpressure3115+0xdc>)
 8006e4a:	9100      	str	r1, [sp, #0]
 8006e4c:	21c0      	movs	r1, #192	; 0xc0
 8006e4e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006e52:	f006 fca7 	bl	800d7a4 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d145      	bne.n	8006ee6 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8006e5a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006e5e:	2bc4      	cmp	r3, #196	; 0xc4
 8006e60:	d003      	beq.n	8006e6a <initpressure3115+0x32>
		return (HAL_ERROR);
 8006e62:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8006e64:	4620      	mov	r0, r4
 8006e66:	b00b      	add	sp, #44	; 0x2c
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8006e6a:	4f2b      	ldr	r7, [pc, #172]	; (8006f18 <initpressure3115+0xe0>)
 8006e6c:	aa05      	add	r2, sp, #20
 8006e6e:	21c0      	movs	r1, #192	; 0xc0
 8006e70:	4828      	ldr	r0, [pc, #160]	; (8006f14 <initpressure3115+0xdc>)
 8006e72:	89bb      	ldrh	r3, [r7, #12]
 8006e74:	9600      	str	r6, [sp, #0]
 8006e76:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	f006 fafe 	bl	800d47c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006e80:	4604      	mov	r4, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d136      	bne.n	8006ef4 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8006e86:	8a3b      	ldrh	r3, [r7, #16]
 8006e88:	aa06      	add	r2, sp, #24
 8006e8a:	21c0      	movs	r1, #192	; 0xc0
 8006e8c:	4821      	ldr	r0, [pc, #132]	; (8006f14 <initpressure3115+0xdc>)
 8006e8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006e92:	2302      	movs	r3, #2
 8006e94:	9600      	str	r6, [sp, #0]
 8006e96:	f006 faf1 	bl	800d47c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	bb70      	cbnz	r0, 8006efc <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8006e9e:	8aba      	ldrh	r2, [r7, #20]
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	21c0      	movs	r1, #192	; 0xc0
 8006ea4:	481b      	ldr	r0, [pc, #108]	; (8006f14 <initpressure3115+0xdc>)
 8006ea6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006eaa:	aa07      	add	r2, sp, #28
 8006eac:	9600      	str	r6, [sp, #0]
 8006eae:	f006 fae5 	bl	800d47c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	bb50      	cbnz	r0, 8006f0c <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006eb6:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8006eb8:	2064      	movs	r0, #100	; 0x64
 8006eba:	f00f fbbf 	bl	801663c <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	9400      	str	r4, [sp, #0]
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	21c0      	movs	r1, #192	; 0xc0
 8006ec6:	4813      	ldr	r0, [pc, #76]	; (8006f14 <initpressure3115+0xdc>)
 8006ec8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006ecc:	f006 fc6a 	bl	800d7a4 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	b9b8      	cbnz	r0, 8006f04 <initpressure3115+0xcc>
	result = getpressure3115();
 8006ed4:	f7ff ff0c 	bl	8006cf0 <getpressure3115>
	if (result != HAL_OK) {
 8006ed8:	4604      	mov	r4, r0
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d0c2      	beq.n	8006e64 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8006ede:	480f      	ldr	r0, [pc, #60]	; (8006f1c <initpressure3115+0xe4>)
 8006ee0:	f01f fc30 	bl	8026744 <iprintf>
 8006ee4:	e7be      	b.n	8006e64 <initpressure3115+0x2c>
 8006ee6:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8006ee8:	480d      	ldr	r0, [pc, #52]	; (8006f20 <initpressure3115+0xe8>)
 8006eea:	f01f fc2b 	bl	8026744 <iprintf>
}
 8006eee:	4620      	mov	r0, r4
 8006ef0:	b00b      	add	sp, #44	; 0x2c
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8006ef4:	480b      	ldr	r0, [pc, #44]	; (8006f24 <initpressure3115+0xec>)
 8006ef6:	f01f fc25 	bl	8026744 <iprintf>
		return (result);
 8006efa:	e7b3      	b.n	8006e64 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8006efc:	480a      	ldr	r0, [pc, #40]	; (8006f28 <initpressure3115+0xf0>)
 8006efe:	f01f fc21 	bl	8026744 <iprintf>
		return (result);
 8006f02:	e7af      	b.n	8006e64 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8006f04:	4809      	ldr	r0, [pc, #36]	; (8006f2c <initpressure3115+0xf4>)
 8006f06:	f01f fc1d 	bl	8026744 <iprintf>
		return (result);
 8006f0a:	e7ab      	b.n	8006e64 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8006f0c:	4808      	ldr	r0, [pc, #32]	; (8006f30 <initpressure3115+0xf8>)
 8006f0e:	f01f fc19 	bl	8026744 <iprintf>
		return (result);
 8006f12:	e7a7      	b.n	8006e64 <initpressure3115+0x2c>
 8006f14:	200025a8 	.word	0x200025a8
 8006f18:	0802a988 	.word	0x0802a988
 8006f1c:	0802d89c 	.word	0x0802d89c
 8006f20:	0802d744 	.word	0x0802d744
 8006f24:	0802d82c 	.word	0x0802d82c
 8006f28:	0802d848 	.word	0x0802d848
 8006f2c:	0802d880 	.word	0x0802d880
 8006f30:	0802d864 	.word	0x0802d864

08006f34 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8006f38:	4820      	ldr	r0, [pc, #128]	; (8006fbc <init_esp+0x88>)
 8006f3a:	f01f fc9f 	bl	802687c <puts>
	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8006f3e:	2201      	movs	r2, #1
 8006f40:	491f      	ldr	r1, [pc, #124]	; (8006fc0 <init_esp+0x8c>)
 8006f42:	4820      	ldr	r0, [pc, #128]	; (8006fc4 <init_esp+0x90>)
 8006f44:	f00d fb1e 	bl	8014584 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8006f48:	bb98      	cbnz	r0, 8006fb2 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f50:	481d      	ldr	r0, [pc, #116]	; (8006fc8 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006f52:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006f56:	f005 ff8b 	bl	800ce70 <HAL_GPIO_WritePin>
	osDelay(20);
 8006f5a:	4c1c      	ldr	r4, [pc, #112]	; (8006fcc <init_esp+0x98>)
 8006f5c:	2014      	movs	r0, #20
 8006f5e:	4d1c      	ldr	r5, [pc, #112]	; (8006fd0 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8006f60:	4e1c      	ldr	r6, [pc, #112]	; (8006fd4 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8006f62:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8006f66:	f00f fb69 	bl	801663c <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f70:	4815      	ldr	r0, [pc, #84]	; (8006fc8 <init_esp+0x94>)
 8006f72:	f005 ff7d 	bl	800ce70 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	e006      	b.n	8006f88 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8006f7a:	5cf0      	ldrb	r0, [r6, r3]
 8006f7c:	6021      	str	r1, [r4, #0]
 8006f7e:	f01f fbf9 	bl	8026774 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	2b60      	cmp	r3, #96	; 0x60
 8006f86:	d810      	bhi.n	8006faa <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8006f88:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8006f8a:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d1f4      	bne.n	8006f7a <init_esp+0x46>
		osDelay(1);
 8006f90:	2001      	movs	r0, #1
 8006f92:	f00f fb53 	bl	801663c <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8006f96:	3f01      	subs	r7, #1
 8006f98:	d1ed      	bne.n	8006f76 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8006f9a:	20c8      	movs	r0, #200	; 0xc8
 8006f9c:	f00f fb4e 	bl	801663c <osDelay>
	printf("\n");
 8006fa0:	200a      	movs	r0, #10
}
 8006fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8006fa6:	f01f bbe5 	b.w	8026774 <putchar>
			espoutindex = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c4 8000 	str.w	r8, [r4]
 8006fb0:	e7ea      	b.n	8006f88 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8006fb2:	4809      	ldr	r0, [pc, #36]	; (8006fd8 <init_esp+0xa4>)
 8006fb4:	f01f fc62 	bl	802687c <puts>
 8006fb8:	e7c7      	b.n	8006f4a <init_esp+0x16>
 8006fba:	bf00      	nop
 8006fbc:	0802d8bc 	.word	0x0802d8bc
 8006fc0:	200033c0 	.word	0x200033c0
 8006fc4:	20002c48 	.word	0x20002c48
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	200033c4 	.word	0x200033c4
 8006fd0:	20003428 	.word	0x20003428
 8006fd4:	200033c8 	.word	0x200033c8
 8006fd8:	0802d8d0 	.word	0x0802d8d0

08006fdc <uart6_rxdone>:
uart6_rxdone() {
 8006fdc:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8006fde:	4c0b      	ldr	r4, [pc, #44]	; (800700c <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <uart6_rxdone+0x34>)
	i = esprxindex;
 8006fe2:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8006fe4:	7819      	ldrb	r1, [r3, #0]
 8006fe6:	1c6b      	adds	r3, r5, #1
 8006fe8:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8006fea:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8006fec:	5551      	strb	r1, [r2, r5]
 8006fee:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8006ff0:	d902      	bls.n	8006ff8 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8006ff8:	4a07      	ldr	r2, [pc, #28]	; (8007018 <uart6_rxdone+0x3c>)
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d000      	beq.n	8007002 <uart6_rxdone+0x26>
}
 8007000:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8007002:	4806      	ldr	r0, [pc, #24]	; (800701c <uart6_rxdone+0x40>)
 8007004:	f01f fc3a 	bl	802687c <puts>
		esprxindex = i;
 8007008:	6025      	str	r5, [r4, #0]
}
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	20003428 	.word	0x20003428
 8007010:	200033c0 	.word	0x200033c0
 8007014:	200033c8 	.word	0x200033c8
 8007018:	200033c4 	.word	0x200033c4
 800701c:	0802d8e8 	.word	0x0802d8e8

08007020 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8007020:	b510      	push	{r4, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8007026:	ac02      	add	r4, sp, #8
 8007028:	4620      	mov	r0, r4
 800702a:	f01f fe06 	bl	8026c3a <stpcpy>
	strcat(txbuf, "\r\n");
 800702e:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <esp_cmd+0x44>)
 8007030:	8819      	ldrh	r1, [r3, #0]
 8007032:	789a      	ldrb	r2, [r3, #2]
 8007034:	1b03      	subs	r3, r0, r4
 8007036:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8007038:	4621      	mov	r1, r4
	len = strlen(txbuf);
 800703a:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 800703c:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 800703e:	480a      	ldr	r0, [pc, #40]	; (8007068 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8007040:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8007042:	f01f fb7f 	bl	8026744 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8007046:	9a01      	ldr	r2, [sp, #4]
 8007048:	4621      	mov	r1, r4
 800704a:	4808      	ldr	r0, [pc, #32]	; (800706c <esp_cmd+0x4c>)
 800704c:	b292      	uxth	r2, r2
 800704e:	f00c f859 	bl	8013104 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8007052:	b908      	cbnz	r0, 8007058 <esp_cmd+0x38>
}
 8007054:	b006      	add	sp, #24
 8007056:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8007058:	4601      	mov	r1, r0
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <esp_cmd+0x50>)
 800705c:	f01f fb72 	bl	8026744 <iprintf>
}
 8007060:	b006      	add	sp, #24
 8007062:	bd10      	pop	{r4, pc}
 8007064:	0802b560 	.word	0x0802b560
 8007068:	0802d904 	.word	0x0802d904
 800706c:	20002c48 	.word	0x20002c48
 8007070:	0802d918 	.word	0x0802d918

08007074 <test_esp>:
void test_esp() {
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8007078:	4813      	ldr	r0, [pc, #76]	; (80070c8 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 800707a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 800707e:	f01f fbfd 	bl	802687c <puts>
	osDelay(200);
 8007082:	4c12      	ldr	r4, [pc, #72]	; (80070cc <test_esp+0x58>)
 8007084:	20c8      	movs	r0, #200	; 0xc8
 8007086:	4d12      	ldr	r5, [pc, #72]	; (80070d0 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8007088:	4e12      	ldr	r6, [pc, #72]	; (80070d4 <test_esp+0x60>)
			espoutindex = 0;
 800708a:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 800708e:	f00f fad5 	bl	801663c <osDelay>
	esp_cmd(getstatus);	// send the command
 8007092:	4811      	ldr	r0, [pc, #68]	; (80070d8 <test_esp+0x64>)
 8007094:	f7ff ffc4 	bl	8007020 <esp_cmd>
	while (espoutindex != esprxindex) {
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	e006      	b.n	80070aa <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 800709c:	5cf0      	ldrb	r0, [r6, r3]
 800709e:	6021      	str	r1, [r4, #0]
 80070a0:	f01f fb68 	bl	8026774 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	2b60      	cmp	r3, #96	; 0x60
 80070a8:	d80a      	bhi.n	80070c0 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 80070aa:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 80070ac:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d1f4      	bne.n	800709c <test_esp+0x28>
		osDelay(1);
 80070b2:	2001      	movs	r0, #1
 80070b4:	f00f fac2 	bl	801663c <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 80070b8:	3f01      	subs	r7, #1
 80070ba:	d1ed      	bne.n	8007098 <test_esp+0x24>
}
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8c4 8000 	str.w	r8, [r4]
 80070c6:	e7f0      	b.n	80070aa <test_esp+0x36>
 80070c8:	0802d938 	.word	0x0802d938
 80070cc:	200033c4 	.word	0x200033c4
 80070d0:	20003428 	.word	0x20003428
 80070d4:	200033c8 	.word	0x200033c8
 80070d8:	200002a4 	.word	0x200002a4

080070dc <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 80070dc:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 80070de:	4818      	ldr	r0, [pc, #96]	; (8007140 <init_ds2485+0x64>)
void init_ds2485(void) {
 80070e0:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 80070e2:	f01f fbcb 	bl	802687c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 80070e6:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80070e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 80070ec:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 80070ee:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80070f2:	2303      	movs	r3, #3
 80070f4:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 80070f6:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80070fa:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 80070fc:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007100:	aa02      	add	r2, sp, #8
 8007102:	4810      	ldr	r0, [pc, #64]	; (8007144 <init_ds2485+0x68>)
 8007104:	f006 f9ba 	bl	800d47c <HAL_I2C_Master_Transmit>
 8007108:	b9a8      	cbnz	r0, 8007136 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 800710a:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800710c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8007110:	f00f fa94 	bl	801663c <osDelay>
		data[i] = 0xA5 + i;
 8007114:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8007116:	2181      	movs	r1, #129	; 0x81
 8007118:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 800711a:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800711e:	aa02      	add	r2, sp, #8
 8007120:	4808      	ldr	r0, [pc, #32]	; (8007144 <init_ds2485+0x68>)
 8007122:	9400      	str	r4, [sp, #0]
 8007124:	f006 fa72 	bl	800d60c <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8007128:	4601      	mov	r1, r0
 800712a:	b110      	cbz	r0, 8007132 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800712c:	4806      	ldr	r0, [pc, #24]	; (8007148 <init_ds2485+0x6c>)
 800712e:	f01f fb09 	bl	8026744 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8007132:	b006      	add	sp, #24
 8007134:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8007136:	4601      	mov	r1, r0
 8007138:	4803      	ldr	r0, [pc, #12]	; (8007148 <init_ds2485+0x6c>)
 800713a:	f01f fb03 	bl	8026744 <iprintf>
 800713e:	e7e4      	b.n	800710a <init_ds2485+0x2e>
 8007140:	0802d960 	.word	0x0802d960
 8007144:	200025a8 	.word	0x200025a8
 8007148:	0802d96c 	.word	0x0802d96c

0800714c <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8007152:	4821      	ldr	r0, [pc, #132]	; (80071d8 <readp_ds2485+0x8c>)
 8007154:	f01f fb92 	bl	802687c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8007158:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800715a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800715e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8007160:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8007164:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800716a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800716e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8007170:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8007174:	aa03      	add	r2, sp, #12
 8007176:	4819      	ldr	r0, [pc, #100]	; (80071dc <readp_ds2485+0x90>)
 8007178:	f006 f980 	bl	800d47c <HAL_I2C_Master_Transmit>
 800717c:	bb18      	cbnz	r0, 80071c6 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 800717e:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8007180:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8007184:	f00f fa5a 	bl	801663c <osDelay>
		data[i] = 0x5A + i;
 8007188:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800718a:	b2a3      	uxth	r3, r4
 800718c:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 800718e:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8007192:	2181      	movs	r1, #129	; 0x81
 8007194:	4811      	ldr	r0, [pc, #68]	; (80071dc <readp_ds2485+0x90>)
 8007196:	9500      	str	r5, [sp, #0]
 8007198:	f006 fa38 	bl	800d60c <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 800719c:	b9b8      	cbnz	r0, 80071ce <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 800719e:	4810      	ldr	r0, [pc, #64]	; (80071e0 <readp_ds2485+0x94>)
 80071a0:	f10d 040b 	add.w	r4, sp, #11
 80071a4:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 80071a8:	4d0e      	ldr	r5, [pc, #56]	; (80071e4 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 80071aa:	f01f facb 	bl	8026744 <iprintf>
		printf("0x%02x ", data[i]);
 80071ae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80071b2:	4628      	mov	r0, r5
 80071b4:	f01f fac6 	bl	8026744 <iprintf>
	for (i = 0; i < 8; i++) {
 80071b8:	42b4      	cmp	r4, r6
 80071ba:	d1f8      	bne.n	80071ae <readp_ds2485+0x62>
	}
	printf("\n");
 80071bc:	200a      	movs	r0, #10
 80071be:	f01f fad9 	bl	8026774 <putchar>
}
 80071c2:	b006      	add	sp, #24
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 80071c6:	4808      	ldr	r0, [pc, #32]	; (80071e8 <readp_ds2485+0x9c>)
 80071c8:	f01f fabc 	bl	8026744 <iprintf>
 80071cc:	e7d7      	b.n	800717e <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 80071ce:	4601      	mov	r1, r0
 80071d0:	4806      	ldr	r0, [pc, #24]	; (80071ec <readp_ds2485+0xa0>)
 80071d2:	f01f fab7 	bl	8026744 <iprintf>
 80071d6:	e7e2      	b.n	800719e <readp_ds2485+0x52>
 80071d8:	0802d990 	.word	0x0802d990
 80071dc:	200025a8 	.word	0x200025a8
 80071e0:	0802d9f0 	.word	0x0802d9f0
 80071e4:	0802da18 	.word	0x0802da18
 80071e8:	0802d9a8 	.word	0x0802d9a8
 80071ec:	0802d9cc 	.word	0x0802d9cc

080071f0 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80071f0:	b530      	push	{r4, r5, lr}
	int i, j, k;

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80071f2:	4c46      	ldr	r4, [pc, #280]	; (800730c <initsplat+0x11c>)
void initsplat(void) {
 80071f4:	b083      	sub	sp, #12
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	2b0b      	cmp	r3, #11
 80071fa:	d064      	beq.n	80072c6 <initsplat+0xd6>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 80071fc:	4844      	ldr	r0, [pc, #272]	; (8007310 <initsplat+0x120>)
 80071fe:	f01f fb3d 	bl	802687c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8007202:	4d44      	ldr	r5, [pc, #272]	; (8007314 <initsplat+0x124>)
	initpga();
 8007204:	f7ff fc28 	bl	8006a58 <initpga>
	osDelay(500);
 8007208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800720c:	f00f fa16 	bl	801663c <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8007210:	4841      	ldr	r0, [pc, #260]	; (8007318 <initsplat+0x128>)
 8007212:	f01f fa97 	bl	8026744 <iprintf>
	psensor = PNONE;
 8007216:	2300      	movs	r3, #0
 8007218:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800721a:	f7ff fe0d 	bl	8006e38 <initpressure3115>
 800721e:	b9e8      	cbnz	r0, 800725c <initsplat+0x6c>
		printf("MPL3115A2 pressure sensor present\n\r");
 8007220:	483e      	ldr	r0, [pc, #248]	; (800731c <initsplat+0x12c>)
 8007222:	f01f fa8f 	bl	8026744 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007226:	4a3e      	ldr	r2, [pc, #248]	; (8007320 <initsplat+0x130>)
		psensor = MPL3115A2;
 8007228:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 800722a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 800722e:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007230:	f043 0310 	orr.w	r3, r3, #16
 8007234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8007238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800723c:	f00f f9fe 	bl	801663c <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	2b16      	cmp	r3, #22
 8007244:	d020      	beq.n	8007288 <initsplat+0x98>
		test_ds2485();
		init_esp();
		osDelay(500);
		test_esp();
		osDelay(200);
	} else if (circuitboardpcb == LIGHTNINGBOARD1) {
 8007246:	2b15      	cmp	r3, #21
 8007248:	d056      	beq.n	80072f8 <initsplat+0x108>
		test_ds2485();
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007250:	4834      	ldr	r0, [pc, #208]	; (8007324 <initsplat+0x134>)
}
 8007252:	b003      	add	sp, #12
 8007254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8007258:	f005 be0a 	b.w	800ce70 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 800725c:	f7ff fcbe 	bl	8006bdc <initpressure115>
 8007260:	bb68      	cbnz	r0, 80072be <initsplat+0xce>
			printf("MPL115A2 pressure sensor present\n\r");
 8007262:	4831      	ldr	r0, [pc, #196]	; (8007328 <initsplat+0x138>)
 8007264:	f01f fa6e 	bl	8026744 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8007268:	4a2d      	ldr	r2, [pc, #180]	; (8007320 <initsplat+0x130>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800726a:	2101      	movs	r1, #1
	osDelay(500);
 800726c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 8007270:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8007274:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8007276:	f043 0308 	orr.w	r3, r3, #8
 800727a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 800727e:	f00f f9dd 	bl	801663c <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	2b16      	cmp	r3, #22
 8007286:	d1de      	bne.n	8007246 <initsplat+0x56>
		huart6.Init.BaudRate = 115200;
 8007288:	4828      	ldr	r0, [pc, #160]	; (800732c <initsplat+0x13c>)
 800728a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800728e:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8007290:	f00c ff88 	bl	80141a4 <HAL_UART_Init>
 8007294:	bb68      	cbnz	r0, 80072f2 <initsplat+0x102>
	init_ds2485();
 8007296:	f7ff ff21 	bl	80070dc <init_ds2485>
	osDelay(80);
 800729a:	2050      	movs	r0, #80	; 0x50
 800729c:	f00f f9ce 	bl	801663c <osDelay>
	readp_ds2485(8);
 80072a0:	2008      	movs	r0, #8
 80072a2:	f7ff ff53 	bl	800714c <readp_ds2485>
		init_esp();
 80072a6:	f7ff fe45 	bl	8006f34 <init_esp>
		osDelay(500);
 80072aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072ae:	f00f f9c5 	bl	801663c <osDelay>
		test_esp();
 80072b2:	f7ff fedf 	bl	8007074 <test_esp>
		osDelay(200);
 80072b6:	20c8      	movs	r0, #200	; 0xc8
 80072b8:	f00f f9c0 	bl	801663c <osDelay>
 80072bc:	e7c5      	b.n	800724a <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 80072be:	481c      	ldr	r0, [pc, #112]	; (8007330 <initsplat+0x140>)
 80072c0:	f01f fa40 	bl	8026744 <iprintf>
 80072c4:	e7b8      	b.n	8007238 <initsplat+0x48>
		printf("Initsplat: Dual Mux\n\r");
 80072c6:	481b      	ldr	r0, [pc, #108]	; (8007334 <initsplat+0x144>)
 80072c8:	f01f fa3c 	bl	8026744 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80072cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072d0:	2301      	movs	r3, #1
 80072d2:	4a19      	ldr	r2, [pc, #100]	; (8007338 <initsplat+0x148>)
 80072d4:	9000      	str	r0, [sp, #0]
 80072d6:	2188      	movs	r1, #136	; 0x88
 80072d8:	4818      	ldr	r0, [pc, #96]	; (800733c <initsplat+0x14c>)
 80072da:	f006 f8cf 	bl	800d47c <HAL_I2C_Master_Transmit>
 80072de:	b920      	cbnz	r0, 80072ea <initsplat+0xfa>
		osDelay(500);
 80072e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072e4:	f00f f9aa 	bl	801663c <osDelay>
 80072e8:	e788      	b.n	80071fc <initsplat+0xc>
		printf("I2C HAL returned error 1\n\r");
 80072ea:	4815      	ldr	r0, [pc, #84]	; (8007340 <initsplat+0x150>)
 80072ec:	f01f fa2a 	bl	8026744 <iprintf>
 80072f0:	e7f6      	b.n	80072e0 <initsplat+0xf0>
			Error_Handler();
 80072f2:	f7fd fa67 	bl	80047c4 <Error_Handler>
 80072f6:	e7ce      	b.n	8007296 <initsplat+0xa6>
	init_ds2485();
 80072f8:	f7ff fef0 	bl	80070dc <init_ds2485>
	osDelay(80);
 80072fc:	2050      	movs	r0, #80	; 0x50
 80072fe:	f00f f99d 	bl	801663c <osDelay>
	readp_ds2485(8);
 8007302:	2008      	movs	r0, #8
 8007304:	f7ff ff22 	bl	800714c <readp_ds2485>
}
 8007308:	e79f      	b.n	800724a <initsplat+0x5a>
 800730a:	bf00      	nop
 800730c:	20002180 	.word	0x20002180
 8007310:	0802da38 	.word	0x0802da38
 8007314:	2000343c 	.word	0x2000343c
 8007318:	0802da5c 	.word	0x0802da5c
 800731c:	0802da7c 	.word	0x0802da7c
 8007320:	2000303c 	.word	0x2000303c
 8007324:	40021000 	.word	0x40021000
 8007328:	0802daa0 	.word	0x0802daa0
 800732c:	20002c48 	.word	0x20002c48
 8007330:	0802dac4 	.word	0x0802dac4
 8007334:	0802da20 	.word	0x0802da20
 8007338:	200002b0 	.word	0x200002b0
 800733c:	200025a8 	.word	0x200025a8
 8007340:	0802d744 	.word	0x0802d744

08007344 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007344:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007346:	2200      	movs	r2, #0
 8007348:	210f      	movs	r1, #15
 800734a:	f06f 0001 	mvn.w	r0, #1
{
 800734e:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007350:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8007352:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8007354:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007358:	641c      	str	r4, [r3, #64]	; 0x40
 800735a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800735c:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8007360:	9400      	str	r4, [sp, #0]
 8007362:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007364:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007366:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800736a:	645c      	str	r4, [r3, #68]	; 0x44
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007376:	f002 fc51 	bl	8009c1c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800737a:	2200      	movs	r2, #0
 800737c:	2106      	movs	r1, #6
 800737e:	2005      	movs	r0, #5
 8007380:	f002 fc4c 	bl	8009c1c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007384:	2005      	movs	r0, #5
 8007386:	f002 fc93 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800738a:	2200      	movs	r2, #0
 800738c:	2106      	movs	r1, #6
 800738e:	2005      	movs	r0, #5
 8007390:	f002 fc44 	bl	8009c1c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007394:	2005      	movs	r0, #5
 8007396:	f002 fc8b 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 800739a:	2051      	movs	r0, #81	; 0x51
 800739c:	2200      	movs	r2, #0
 800739e:	2106      	movs	r1, #6
 80073a0:	f002 fc3c 	bl	8009c1c <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80073a4:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073a6:	b002      	add	sp, #8
 80073a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80073ac:	f002 bc80 	b.w	8009cb0 <HAL_NVIC_EnableIRQ>
 80073b0:	40023800 	.word	0x40023800

080073b4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80073b4:	4a49      	ldr	r2, [pc, #292]	; (80074dc <HAL_ADC_MspInit+0x128>)
 80073b6:	6803      	ldr	r3, [r0, #0]
{
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80073ba:	4293      	cmp	r3, r2
{
 80073bc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073be:	f04f 0400 	mov.w	r4, #0
 80073c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80073c6:	9409      	str	r4, [sp, #36]	; 0x24
 80073c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80073cc:	d007      	beq.n	80073de <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80073ce:	4a44      	ldr	r2, [pc, #272]	; (80074e0 <HAL_ADC_MspInit+0x12c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d045      	beq.n	8007460 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80073d4:	4a43      	ldr	r2, [pc, #268]	; (80074e4 <HAL_ADC_MspInit+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d05f      	beq.n	800749a <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80073da:	b00d      	add	sp, #52	; 0x34
 80073dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073de:	4b42      	ldr	r3, [pc, #264]	; (80074e8 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073e0:	2703      	movs	r7, #3
 80073e2:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073e4:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073e8:	4840      	ldr	r0, [pc, #256]	; (80074ec <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 80073ee:	4e40      	ldr	r6, [pc, #256]	; (80074f0 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
 80073f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	631a      	str	r2, [r3, #48]	; 0x30
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800740c:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800740e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007410:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007414:	f005 fa80 	bl	800c918 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800741a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800741e:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8007420:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007422:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8007426:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800742c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800742e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007432:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007434:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007436:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800743a:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800743c:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800743e:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007446:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007448:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800744c:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007450:	f002 fef6 	bl	800a240 <HAL_DMA_Init>
 8007454:	2800      	cmp	r0, #0
 8007456:	d13d      	bne.n	80074d4 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007458:	63ae      	str	r6, [r5, #56]	; 0x38
 800745a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800745c:	b00d      	add	sp, #52	; 0x34
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007460:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007462:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007464:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007466:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
 8007470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007472:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007476:	9203      	str	r2, [sp, #12]
 8007478:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800747c:	f042 0201 	orr.w	r2, r2, #1
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007484:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007486:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800748a:	4818      	ldr	r0, [pc, #96]	; (80074ec <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800748c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007492:	f005 fa41 	bl	800c918 <HAL_GPIO_Init>
}
 8007496:	b00d      	add	sp, #52	; 0x34
 8007498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800749c:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800749e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 80074a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074a8:	645a      	str	r2, [r3, #68]	; 0x44
 80074aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ac:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80074b0:	9205      	str	r2, [sp, #20]
 80074b2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074be:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c4:	4809      	ldr	r0, [pc, #36]	; (80074ec <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074c6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	9306      	str	r3, [sp, #24]
 80074ca:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074cc:	f005 fa24 	bl	800c918 <HAL_GPIO_Init>
}
 80074d0:	b00d      	add	sp, #52	; 0x34
 80074d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80074d4:	f7fd f976 	bl	80047c4 <Error_Handler>
 80074d8:	e7be      	b.n	8007458 <HAL_ADC_MspInit+0xa4>
 80074da:	bf00      	nop
 80074dc:	40012000 	.word	0x40012000
 80074e0:	40012100 	.word	0x40012100
 80074e4:	40012200 	.word	0x40012200
 80074e8:	40023800 	.word	0x40023800
 80074ec:	40020000 	.word	0x40020000
 80074f0:	200022a8 	.word	0x200022a8
 80074f4:	40026470 	.word	0x40026470

080074f8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <HAL_CRC_MspInit+0x28>)
 80074fa:	6802      	ldr	r2, [r0, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d000      	beq.n	8007502 <HAL_CRC_MspInit+0xa>
 8007500:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007502:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800750a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800750c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800751c:	b002      	add	sp, #8
 800751e:	4770      	bx	lr
 8007520:	40023000 	.word	0x40023000

08007524 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8007524:	4b2b      	ldr	r3, [pc, #172]	; (80075d4 <HAL_DAC_MspInit+0xb0>)
 8007526:	6802      	ldr	r2, [r0, #0]
{
 8007528:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800752a:	429a      	cmp	r2, r3
{
 800752c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752e:	f04f 0400 	mov.w	r4, #0
 8007532:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007536:	9405      	str	r4, [sp, #20]
 8007538:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 800753c:	d001      	beq.n	8007542 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800753e:	b008      	add	sp, #32
 8007540:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8007542:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007546:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007548:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800754a:	4e23      	ldr	r6, [pc, #140]	; (80075d8 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800754c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800754e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007552:	641a      	str	r2, [r3, #64]	; 0x40
 8007554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007556:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800755a:	9201      	str	r2, [sp, #4]
 800755c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800755e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007566:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007570:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007572:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007574:	4819      	ldr	r0, [pc, #100]	; (80075dc <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007576:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800757a:	f005 f9cd 	bl	800c918 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800757e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8007584:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8007586:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8007588:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 800758c:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800758e:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8007590:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8007592:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007594:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007596:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8007598:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 800759a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800759e:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075a0:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075a2:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80075a4:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80075a6:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80075a8:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80075aa:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80075ae:	f002 fe47 	bl	800a240 <HAL_DMA_Init>
 80075b2:	b958      	cbnz	r0, 80075cc <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075b4:	2200      	movs	r2, #0
 80075b6:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80075b8:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075ba:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80075bc:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075be:	f002 fb2d 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80075c2:	2036      	movs	r0, #54	; 0x36
 80075c4:	f002 fb74 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 80075c8:	b008      	add	sp, #32
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80075cc:	f7fd f8fa 	bl	80047c4 <Error_Handler>
 80075d0:	e7f0      	b.n	80075b4 <HAL_DAC_MspInit+0x90>
 80075d2:	bf00      	nop
 80075d4:	40007400 	.word	0x40007400
 80075d8:	20002308 	.word	0x20002308
 80075dc:	40020000 	.word	0x40020000
 80075e0:	40026088 	.word	0x40026088

080075e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80075e4:	b530      	push	{r4, r5, lr}
 80075e6:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e8:	2100      	movs	r1, #0
{
 80075ea:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075ec:	2290      	movs	r2, #144	; 0x90
 80075ee:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80075f2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80075f6:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075fa:	f01e f905 	bl	8025808 <memset>
  if(hi2c->Instance==I2C1)
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4a4a      	ldr	r2, [pc, #296]	; (800772c <HAL_I2C_MspInit+0x148>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d007      	beq.n	8007616 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8007606:	4a4a      	ldr	r2, [pc, #296]	; (8007730 <HAL_I2C_MspInit+0x14c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d030      	beq.n	800766e <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 800760c:	4a49      	ldr	r2, [pc, #292]	; (8007734 <HAL_I2C_MspInit+0x150>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d057      	beq.n	80076c2 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007612:	b031      	add	sp, #196	; 0xc4
 8007614:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800761a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800761c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800761e:	f007 fcb9 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007622:	2800      	cmp	r0, #0
 8007624:	d178      	bne.n	8007718 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007626:	4c44      	ldr	r4, [pc, #272]	; (8007738 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007628:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800762c:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800762e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007630:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007632:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007634:	f043 0302 	orr.w	r3, r3, #2
 8007638:	6323      	str	r3, [r4, #48]	; 0x30
 800763a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800763c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007640:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007644:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007646:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007648:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800764a:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800764c:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007650:	483a      	ldr	r0, [pc, #232]	; (800773c <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007652:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007654:	f005 f960 	bl	800c918 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800765a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800765e:	6423      	str	r3, [r4, #64]	; 0x40
 8007660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	9b02      	ldr	r3, [sp, #8]
}
 800766a:	b031      	add	sp, #196	; 0xc4
 800766c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800766e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007672:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007674:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007676:	f007 fc8d 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 800767a:	2800      	cmp	r0, #0
 800767c:	d14f      	bne.n	800771e <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800767e:	4c2e      	ldr	r4, [pc, #184]	; (8007738 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007680:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007682:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007684:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007686:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007688:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800768a:	f043 0320 	orr.w	r3, r3, #32
 800768e:	6323      	str	r3, [r4, #48]	; 0x30
 8007690:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007692:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007694:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007698:	4829      	ldr	r0, [pc, #164]	; (8007740 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800769a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800769c:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800769e:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076a6:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076a8:	f005 f936 	bl	800c918 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80076ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076b2:	6423      	str	r3, [r4, #64]	; 0x40
 80076b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9b04      	ldr	r3, [sp, #16]
}
 80076be:	b031      	add	sp, #196	; 0xc4
 80076c0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80076c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076c6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80076c8:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076ca:	f007 fc63 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 80076ce:	bb48      	cbnz	r0, 8007724 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076d0:	4c19      	ldr	r4, [pc, #100]	; (8007738 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80076d2:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076d6:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076d8:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076dc:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076de:	f043 0320 	orr.w	r3, r3, #32
 80076e2:	6323      	str	r3, [r4, #48]	; 0x30
 80076e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076e6:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076ea:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ee:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80076f2:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076f4:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076f6:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076fa:	4811      	ldr	r0, [pc, #68]	; (8007740 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80076fc:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076fe:	f005 f90b 	bl	800c918 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007708:	6423      	str	r3, [r4, #64]	; 0x40
 800770a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800770c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007710:	9306      	str	r3, [sp, #24]
 8007712:	9b06      	ldr	r3, [sp, #24]
}
 8007714:	b031      	add	sp, #196	; 0xc4
 8007716:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8007718:	f7fd f854 	bl	80047c4 <Error_Handler>
 800771c:	e783      	b.n	8007626 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800771e:	f7fd f851 	bl	80047c4 <Error_Handler>
 8007722:	e7ac      	b.n	800767e <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8007724:	f7fd f84e 	bl	80047c4 <Error_Handler>
 8007728:	e7d2      	b.n	80076d0 <HAL_I2C_MspInit+0xec>
 800772a:	bf00      	nop
 800772c:	40005400 	.word	0x40005400
 8007730:	40005800 	.word	0x40005800
 8007734:	40006000 	.word	0x40006000
 8007738:	40023800 	.word	0x40023800
 800773c:	40020400 	.word	0x40020400
 8007740:	40021400 	.word	0x40021400

08007744 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <HAL_RNG_MspInit+0x24>)
 8007746:	6802      	ldr	r2, [r0, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d000      	beq.n	800774e <HAL_RNG_MspInit+0xa>
 800774c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800774e:	4b07      	ldr	r3, [pc, #28]	; (800776c <HAL_RNG_MspInit+0x28>)
{
 8007750:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8007752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007758:	635a      	str	r2, [r3, #52]	; 0x34
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007764:	b002      	add	sp, #8
 8007766:	4770      	bx	lr
 8007768:	50060800 	.word	0x50060800
 800776c:	40023800 	.word	0x40023800

08007770 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8007770:	4a52      	ldr	r2, [pc, #328]	; (80078bc <HAL_SPI_MspInit+0x14c>)
 8007772:	6803      	ldr	r3, [r0, #0]
{
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8007776:	4293      	cmp	r3, r2
{
 8007778:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777a:	f04f 0400 	mov.w	r4, #0
 800777e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8007782:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007786:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8007788:	d007      	beq.n	800779a <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800778a:	4a4d      	ldr	r2, [pc, #308]	; (80078c0 <HAL_SPI_MspInit+0x150>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d038      	beq.n	8007802 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8007790:	4a4c      	ldr	r2, [pc, #304]	; (80078c4 <HAL_SPI_MspInit+0x154>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d071      	beq.n	800787a <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007796:	b00f      	add	sp, #60	; 0x3c
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800779a:	4b4b      	ldr	r3, [pc, #300]	; (80078c8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800779e:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80077a0:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077a4:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077a6:	4849      	ldr	r0, [pc, #292]	; (80078cc <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
 80077ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80077b4:	9201      	str	r2, [sp, #4]
 80077b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ba:	f042 0204 	orr.w	r2, r2, #4
 80077be:	631a      	str	r2, [r3, #48]	; 0x30
 80077c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c2:	f002 0204 	and.w	r2, r2, #4
 80077c6:	9202      	str	r2, [sp, #8]
 80077c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077cc:	f042 0208 	orr.w	r2, r2, #8
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80077d4:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077d6:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077da:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077dc:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077e0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e2:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077e4:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e6:	f005 f897 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80077ea:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ec:	a909      	add	r1, sp, #36	; 0x24
 80077ee:	4838      	ldr	r0, [pc, #224]	; (80078d0 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077f2:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80077f6:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077fa:	f005 f88d 	bl	800c918 <HAL_GPIO_Init>
}
 80077fe:	b00f      	add	sp, #60	; 0x3c
 8007800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007802:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007804:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007806:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007808:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 800780a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800780c:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780e:	4831      	ldr	r0, [pc, #196]	; (80078d4 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
 8007816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007818:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800781c:	9204      	str	r2, [sp, #16]
 800781e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007822:	4332      	orrs	r2, r6
 8007824:	631a      	str	r2, [r3, #48]	; 0x30
 8007826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007828:	4032      	ands	r2, r6
 800782a:	9205      	str	r2, [sp, #20]
 800782c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800782e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007830:	430a      	orrs	r2, r1
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007836:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007838:	400b      	ands	r3, r1
 800783a:	9306      	str	r3, [sp, #24]
 800783c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800783e:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007844:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007846:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007848:	f005 f866 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800784c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007850:	a909      	add	r1, sp, #36	; 0x24
 8007852:	481e      	ldr	r0, [pc, #120]	; (80078cc <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007856:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800785a:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800785e:	f005 f85b 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007862:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007864:	a909      	add	r1, sp, #36	; 0x24
 8007866:	481b      	ldr	r0, [pc, #108]	; (80078d4 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800786a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800786c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800786e:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007872:	f005 f851 	bl	800c918 <HAL_GPIO_Init>
}
 8007876:	b00f      	add	sp, #60	; 0x3c
 8007878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787c:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800787e:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007880:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007884:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
 800788c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007892:	9207      	str	r2, [sp, #28]
 8007894:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007898:	f042 0210 	orr.w	r2, r2, #16
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800789e:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a2:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078a4:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078a8:	480b      	ldr	r0, [pc, #44]	; (80078d8 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078aa:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078ac:	9308      	str	r3, [sp, #32]
 80078ae:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80078b0:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078b4:	f005 f830 	bl	800c918 <HAL_GPIO_Init>
}
 80078b8:	b00f      	add	sp, #60	; 0x3c
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078bc:	40003800 	.word	0x40003800
 80078c0:	40003c00 	.word	0x40003c00
 80078c4:	40013400 	.word	0x40013400
 80078c8:	40023800 	.word	0x40023800
 80078cc:	40020800 	.word	0x40020800
 80078d0:	40020c00 	.word	0x40020c00
 80078d4:	40020400 	.word	0x40020400
 80078d8:	40021000 	.word	0x40021000

080078dc <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80078dc:	4a73      	ldr	r2, [pc, #460]	; (8007aac <HAL_TIM_Base_MspInit+0x1d0>)
 80078de:	6803      	ldr	r3, [r0, #0]
{
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 80078e2:	4293      	cmp	r3, r2
{
 80078e4:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e6:	f04f 0400 	mov.w	r4, #0
 80078ea:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80078ee:	940d      	str	r4, [sp, #52]	; 0x34
 80078f0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 80078f4:	d021      	beq.n	800793a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fa:	d055      	beq.n	80079a8 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80078fc:	4a6c      	ldr	r2, [pc, #432]	; (8007ab0 <HAL_TIM_Base_MspInit+0x1d4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d027      	beq.n	8007952 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007902:	4a6c      	ldr	r2, [pc, #432]	; (8007ab4 <HAL_TIM_Base_MspInit+0x1d8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d043      	beq.n	8007990 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8007908:	4a6b      	ldr	r2, [pc, #428]	; (8007ab8 <HAL_TIM_Base_MspInit+0x1dc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	f000 80a5 	beq.w	8007a5a <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8007910:	4a6a      	ldr	r2, [pc, #424]	; (8007abc <HAL_TIM_Base_MspInit+0x1e0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	f000 80b4 	beq.w	8007a80 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8007918:	4a69      	ldr	r2, [pc, #420]	; (8007ac0 <HAL_TIM_Base_MspInit+0x1e4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02d      	beq.n	800797a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <HAL_TIM_Base_MspInit+0x1e8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d114      	bne.n	800794e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007924:	4b68      	ldr	r3, [pc, #416]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
 8007926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007934:	930a      	str	r3, [sp, #40]	; 0x28
 8007936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007938:	e009      	b.n	800794e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800793a:	4b63      	ldr	r3, [pc, #396]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
 800793c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	645a      	str	r2, [r3, #68]	; 0x44
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	9b01      	ldr	r3, [sp, #4]
}
 800794e:	b011      	add	sp, #68	; 0x44
 8007950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007952:	4b5d      	ldr	r3, [pc, #372]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8007954:	4622      	mov	r2, r4
 8007956:	2106      	movs	r1, #6
 8007958:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800795a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800795c:	f044 0402 	orr.w	r4, r4, #2
 8007960:	641c      	str	r4, [r3, #64]	; 0x40
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	9305      	str	r3, [sp, #20]
 800796a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800796c:	f002 f956 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007970:	201d      	movs	r0, #29
 8007972:	f002 f99d 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 8007976:	b011      	add	sp, #68	; 0x44
 8007978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800797a:	4b53      	ldr	r3, [pc, #332]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
 800797c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800797e:	f042 0220 	orr.w	r2, r2, #32
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	9309      	str	r3, [sp, #36]	; 0x24
 800798c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798e:	e7de      	b.n	800794e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007990:	4b4d      	ldr	r3, [pc, #308]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
 8007992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007994:	f042 0204 	orr.w	r2, r2, #4
 8007998:	641a      	str	r2, [r3, #64]	; 0x40
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	9306      	str	r3, [sp, #24]
 80079a2:	9b06      	ldr	r3, [sp, #24]
}
 80079a4:	b011      	add	sp, #68	; 0x44
 80079a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079a8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ac:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079ae:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079b0:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079b6:	4845      	ldr	r0, [pc, #276]	; (8007acc <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40
 80079be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c0:	f002 0201 	and.w	r2, r2, #1
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
 80079d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d2:	f002 0201 	and.w	r2, r2, #1
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079dc:	f042 0202 	orr.w	r2, r2, #2
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e4:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079e6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079ea:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80079ee:	2320      	movs	r3, #32
 80079f0:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079f2:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f4:	f004 ff90 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079f8:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80079fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079fe:	4834      	ldr	r0, [pc, #208]	; (8007ad0 <HAL_TIM_Base_MspInit+0x1f4>)
 8007a00:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a02:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a04:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a06:	4e33      	ldr	r6, [pc, #204]	; (8007ad4 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a08:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a0c:	f004 ff84 	bl	800c918 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a14:	4a30      	ldr	r2, [pc, #192]	; (8007ad8 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007a16:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a18:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a1e:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8007a20:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a24:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007a26:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8007a2a:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8007a2c:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8007a2e:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a30:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007a32:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a34:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007a38:	f002 fc02 	bl	800a240 <HAL_DMA_Init>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d132      	bne.n	8007aa6 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8007a44:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a46:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8007a48:	62ee      	str	r6, [r5, #44]	; 0x2c
 8007a4a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a4c:	f002 f8e6 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007a50:	201c      	movs	r0, #28
 8007a52:	f002 f92d 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 8007a56:	b011      	add	sp, #68	; 0x44
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	2105      	movs	r1, #5
 8007a60:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a62:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a64:	f044 0408 	orr.w	r4, r4, #8
 8007a68:	641c      	str	r4, [r3, #64]	; 0x40
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8007a74:	f002 f8d2 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007a78:	2032      	movs	r0, #50	; 0x32
 8007a7a:	f002 f919 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
 8007a7e:	e766      	b.n	800794e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007a82:	4622      	mov	r2, r4
 8007a84:	2106      	movs	r1, #6
 8007a86:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a88:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a8a:	f044 0410 	orr.w	r4, r4, #16
 8007a8e:	641c      	str	r4, [r3, #64]	; 0x40
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007a9a:	f002 f8bf 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007a9e:	2036      	movs	r0, #54	; 0x36
 8007aa0:	f002 f906 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
 8007aa4:	e753      	b.n	800794e <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8007aa6:	f7fc fe8d 	bl	80047c4 <Error_Handler>
 8007aaa:	e7c9      	b.n	8007a40 <HAL_TIM_Base_MspInit+0x164>
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40001000 	.word	0x40001000
 8007ac0:	40001400 	.word	0x40001400
 8007ac4:	40002000 	.word	0x40002000
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020000 	.word	0x40020000
 8007ad0:	40020400 	.word	0x40020400
 8007ad4:	20002368 	.word	0x20002368
 8007ad8:	40026028 	.word	0x40026028

08007adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8007adc:	491d      	ldr	r1, [pc, #116]	; (8007b54 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ade:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8007ae0:	6802      	ldr	r2, [r0, #0]
{
 8007ae2:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8007ae4:	428a      	cmp	r2, r1
{
 8007ae6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ae8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007aec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007af0:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8007af2:	d004      	beq.n	8007afe <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <HAL_TIM_MspPostInit+0x7c>)
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d016      	beq.n	8007b28 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007afa:	b008      	add	sp, #32
 8007afc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afe:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b00:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b02:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b04:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b08:	f042 0204 	orr.w	r2, r2, #4
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b10:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b12:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b16:	4812      	ldr	r0, [pc, #72]	; (8007b60 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b18:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b1e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b20:	f004 fefa 	bl	800c918 <HAL_GPIO_Init>
}
 8007b24:	b008      	add	sp, #32
 8007b26:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b28:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b2e:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b32:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b36:	4322      	orrs	r2, r4
 8007b38:	631a      	str	r2, [r3, #48]	; 0x30
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b3c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b3e:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b40:	4808      	ldr	r0, [pc, #32]	; (8007b64 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b42:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007b48:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b4a:	f004 fee5 	bl	800c918 <HAL_GPIO_Init>
}
 8007b4e:	b008      	add	sp, #32
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	bf00      	nop
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40020800 	.word	0x40020800
 8007b64:	40020400 	.word	0x40020400

08007b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b6e:	2100      	movs	r1, #0
{
 8007b70:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b72:	2290      	movs	r2, #144	; 0x90
 8007b74:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b76:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b78:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8007b7c:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b80:	f01d fe42 	bl	8025808 <memset>
  if(huart->Instance==UART4)
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	4aa2      	ldr	r2, [pc, #648]	; (8007e10 <HAL_UART_MspInit+0x2a8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d070      	beq.n	8007c6e <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8007b8c:	4aa1      	ldr	r2, [pc, #644]	; (8007e14 <HAL_UART_MspInit+0x2ac>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f000 80c1 	beq.w	8007d16 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8007b94:	4aa0      	ldr	r2, [pc, #640]	; (8007e18 <HAL_UART_MspInit+0x2b0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f000 815e 	beq.w	8007e58 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8007b9c:	4a9f      	ldr	r2, [pc, #636]	; (8007e1c <HAL_UART_MspInit+0x2b4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8007ba2:	4a9f      	ldr	r2, [pc, #636]	; (8007e20 <HAL_UART_MspInit+0x2b8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	f000 818e 	beq.w	8007ec6 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007baa:	4a9e      	ldr	r2, [pc, #632]	; (8007e24 <HAL_UART_MspInit+0x2bc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f000 81b4 	beq.w	8007f1a <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007bb2:	4a9d      	ldr	r2, [pc, #628]	; (8007e28 <HAL_UART_MspInit+0x2c0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	f000 81df 	beq.w	8007f78 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007bba:	b03c      	add	sp, #240	; 0xf0
 8007bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bc4:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007bc6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bc8:	f007 f9e4 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f040 8261 	bne.w	8008094 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8007bd2:	4b96      	ldr	r3, [pc, #600]	; (8007e2c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007bd4:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd6:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007bd8:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8007bda:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bdc:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bde:	4894      	ldr	r0, [pc, #592]	; (8007e30 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8007be0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007be4:	6419      	str	r1, [r3, #64]	; 0x40
 8007be6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007bec:	910a      	str	r1, [sp, #40]	; 0x28
 8007bee:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bf2:	f041 0110 	orr.w	r1, r1, #16
 8007bf6:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bf8:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007bfc:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c06:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007c0a:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c0e:	f004 fe83 	bl	800c918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c12:	4887      	ldr	r0, [pc, #540]	; (8007e30 <HAL_UART_MspInit+0x2c8>)
 8007c14:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007c16:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c18:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c1c:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c20:	f004 fe7a 	bl	800c918 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8007c24:	4d83      	ldr	r5, [pc, #524]	; (8007e34 <HAL_UART_MspInit+0x2cc>)
 8007c26:	4a84      	ldr	r2, [pc, #528]	; (8007e38 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007c28:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007c2c:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007c2e:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007c32:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007c3a:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c40:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c42:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c46:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c4a:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007c4e:	f002 faf7 	bl	800a240 <HAL_DMA_Init>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f040 8221 	bne.w	800809a <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2103      	movs	r1, #3
 8007c5c:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8007c5e:	6725      	str	r5, [r4, #112]	; 0x70
 8007c60:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007c62:	f001 ffdb 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8007c66:	2053      	movs	r0, #83	; 0x53
 8007c68:	f002 f822 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
 8007c6c:	e7a5      	b.n	8007bba <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c72:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c74:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c76:	f007 f98d 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	f040 8179 	bne.w	8007f72 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c80:	4b6a      	ldr	r3, [pc, #424]	; (8007e2c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c82:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c86:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007c8a:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8c:	a913      	add	r1, sp, #76	; 0x4c
 8007c8e:	486b      	ldr	r0, [pc, #428]	; (8007e3c <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c90:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40
 8007c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c98:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8007c9c:	9201      	str	r2, [sp, #4]
 8007c9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007caa:	f002 0201 	and.w	r2, r2, #1
 8007cae:	9202      	str	r2, [sp, #8]
 8007cb0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb4:	433a      	orrs	r2, r7
 8007cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cba:	403a      	ands	r2, r7
 8007cbc:	9203      	str	r2, [sp, #12]
 8007cbe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc2:	f042 0204 	orr.w	r2, r2, #4
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cca:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ccc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007cd0:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007cd4:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cd8:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007cda:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce0:	f004 fe1a 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce8:	a913      	add	r1, sp, #76	; 0x4c
 8007cea:	4855      	ldr	r0, [pc, #340]	; (8007e40 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007cec:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cee:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007cf2:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cf6:	f004 fe0f 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cfe:	a913      	add	r1, sp, #76	; 0x4c
 8007d00:	4850      	ldr	r0, [pc, #320]	; (8007e44 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d02:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d04:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007d06:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d08:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d0c:	f004 fe04 	bl	800c918 <HAL_GPIO_Init>
}
 8007d10:	b03c      	add	sp, #240	; 0xf0
 8007d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d1a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007d1c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d1e:	f007 f939 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f040 81b0 	bne.w	8008088 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d28:	4b40      	ldr	r3, [pc, #256]	; (8007e2c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d2a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d2e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d34:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d38:	a913      	add	r1, sp, #76	; 0x4c
 8007d3a:	4841      	ldr	r0, [pc, #260]	; (8007e40 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40
 8007d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d48:	9205      	str	r2, [sp, #20]
 8007d4a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d4e:	4332      	orrs	r2, r6
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30
 8007d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d54:	4032      	ands	r2, r6
 8007d56:	9206      	str	r2, [sp, #24]
 8007d58:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5c:	f042 0204 	orr.w	r2, r2, #4
 8007d60:	631a      	str	r2, [r3, #48]	; 0x30
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d64:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d6e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d70:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d74:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d78:	f004 fdce 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d7c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d7e:	4831      	ldr	r0, [pc, #196]	; (8007e44 <HAL_UART_MspInit+0x2dc>)
 8007d80:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d82:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d84:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d86:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d88:	4e2f      	ldr	r6, [pc, #188]	; (8007e48 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d8a:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007d8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d90:	f004 fdc2 	bl	800c918 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d94:	4a2d      	ldr	r2, [pc, #180]	; (8007e4c <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007d9a:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d9c:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d9e:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007da4:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007da6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007daa:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dac:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007db0:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007db4:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007db8:	f002 fa42 	bl	800a240 <HAL_DMA_Init>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 8160 	bne.w	8008082 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007dc2:	4d23      	ldr	r5, [pc, #140]	; (8007e50 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007dc8:	4922      	ldr	r1, [pc, #136]	; (8007e54 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dca:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007dcc:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007dd2:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dd4:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007dd6:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007dd8:	6726      	str	r6, [r4, #112]	; 0x70
 8007dda:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ddc:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dde:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007de0:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007de2:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007de4:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007de6:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007de8:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007dec:	f002 fa28 	bl	800a240 <HAL_DMA_Init>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f040 8143 	bne.w	800807c <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2107      	movs	r1, #7
 8007dfa:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8007dfc:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007dfe:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007e00:	f001 ff0c 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007e04:	2035      	movs	r0, #53	; 0x35
 8007e06:	f001 ff53 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 8007e0a:	b03c      	add	sp, #240	; 0xf0
 8007e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e10:	40004c00 	.word	0x40004c00
 8007e14:	40005000 	.word	0x40005000
 8007e18:	40007800 	.word	0x40007800
 8007e1c:	40007c00 	.word	0x40007c00
 8007e20:	40004400 	.word	0x40004400
 8007e24:	40004800 	.word	0x40004800
 8007e28:	40011400 	.word	0x40011400
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40021000 	.word	0x40021000
 8007e34:	20002488 	.word	0x20002488
 8007e38:	400260a0 	.word	0x400260a0
 8007e3c:	40020000 	.word	0x40020000
 8007e40:	40020400 	.word	0x40020400
 8007e44:	40020800 	.word	0x40020800
 8007e48:	200023c8 	.word	0x200023c8
 8007e4c:	40026010 	.word	0x40026010
 8007e50:	20002428 	.word	0x20002428
 8007e54:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e5c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007e5e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e60:	f007 f898 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 8112 	bne.w	800808e <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e6a:	4b8f      	ldr	r3, [pc, #572]	; (80080a8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e6c:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007e6e:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e70:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007e74:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e76:	488d      	ldr	r0, [pc, #564]	; (80080ac <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8007e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e84:	9208      	str	r2, [sp, #32]
 8007e86:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e8a:	f042 0220 	orr.w	r2, r2, #32
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e90:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e94:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e96:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e98:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9c:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9e:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ea4:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ea8:	f004 fd36 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007eac:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007eae:	a913      	add	r1, sp, #76	; 0x4c
 8007eb0:	487e      	ldr	r0, [pc, #504]	; (80080ac <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb2:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007eb4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007eb6:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007eb8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ebc:	f004 fd2c 	bl	800c918 <HAL_GPIO_Init>
}
 8007ec0:	b03c      	add	sp, #240	; 0xf0
 8007ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007ec6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ec8:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007eca:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ecc:	f007 f862 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f040 80e5 	bne.w	80080a0 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ed6:	4b74      	ldr	r3, [pc, #464]	; (80080a8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ed8:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007eda:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007edc:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ee0:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ee2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eea:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007eee:	920c      	str	r2, [sp, #48]	; 0x30
 8007ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef4:	f042 0208 	orr.w	r2, r2, #8
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007efa:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efe:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f00:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f04:	486a      	ldr	r0, [pc, #424]	; (80080b0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007f06:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f08:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f0a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f0e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f10:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f14:	f004 fd00 	bl	800c918 <HAL_GPIO_Init>
 8007f18:	e64f      	b.n	8007bba <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f1e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f20:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f22:	f007 f837 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f040 809c 	bne.w	8008064 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f2c:	4b5e      	ldr	r3, [pc, #376]	; (80080a8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f2e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007f30:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f34:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f38:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8007f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f42:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007f46:	920e      	str	r2, [sp, #56]	; 0x38
 8007f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	f042 0208 	orr.w	r2, r2, #8
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f52:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f56:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f58:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f5c:	4854      	ldr	r0, [pc, #336]	; (80080b0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007f5e:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f60:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f62:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f66:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f68:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f6c:	f004 fcd4 	bl	800c918 <HAL_GPIO_Init>
 8007f70:	e623      	b.n	8007bba <HAL_UART_MspInit+0x52>
      Error_Handler();
 8007f72:	f7fc fc27 	bl	80047c4 <Error_Handler>
 8007f76:	e683      	b.n	8007c80 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f7c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007f7e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f80:	f007 f808 	bl	800ef94 <HAL_RCCEx_PeriphCLKConfig>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d176      	bne.n	8008076 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f88:	4b47      	ldr	r3, [pc, #284]	; (80080a8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f8a:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f8c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8e:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f92:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f94:	4847      	ldr	r0, [pc, #284]	; (80080b4 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f96:	f042 0220 	orr.w	r2, r2, #32
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
 8007f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9e:	f002 0220 	and.w	r2, r2, #32
 8007fa2:	9210      	str	r2, [sp, #64]	; 0x40
 8007fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa8:	f042 0204 	orr.w	r2, r2, #4
 8007fac:	631a      	str	r2, [r3, #48]	; 0x30
 8007fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb0:	f002 0204 	and.w	r2, r2, #4
 8007fb4:	9211      	str	r2, [sp, #68]	; 0x44
 8007fb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc0:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007fc2:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc4:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007fc6:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007fc8:	9312      	str	r3, [sp, #72]	; 0x48
 8007fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fcc:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fd0:	a913      	add	r1, sp, #76	; 0x4c
 8007fd2:	f004 fca1 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fd6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007fd8:	4837      	ldr	r0, [pc, #220]	; (80080b8 <HAL_UART_MspInit+0x550>)
 8007fda:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fdc:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007fde:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe2:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007fe4:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007fe6:	4e35      	ldr	r6, [pc, #212]	; (80080bc <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007fe8:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007fec:	f004 fc94 	bl	800c918 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007ff0:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007ff2:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007ff6:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007ff8:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008000:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8008004:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800800a:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800800e:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008012:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008016:	f002 f913 	bl	800a240 <HAL_DMA_Init>
 800801a:	bb48      	cbnz	r0, 8008070 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800801c:	4d29      	ldr	r5, [pc, #164]	; (80080c4 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800801e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8008022:	4929      	ldr	r1, [pc, #164]	; (80080c8 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008024:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8008026:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008028:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800802c:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800802e:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008030:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008032:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008034:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008036:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800803a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800803c:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800803e:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008040:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008042:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008044:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008046:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8008048:	6726      	str	r6, [r4, #112]	; 0x70
 800804a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800804c:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008050:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008054:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008058:	f002 f8f2 	bl	800a240 <HAL_DMA_Init>
 800805c:	b928      	cbnz	r0, 800806a <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800805e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8008060:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8008062:	e5aa      	b.n	8007bba <HAL_UART_MspInit+0x52>
      Error_Handler();
 8008064:	f7fc fbae 	bl	80047c4 <Error_Handler>
 8008068:	e760      	b.n	8007f2c <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800806a:	f7fc fbab 	bl	80047c4 <Error_Handler>
 800806e:	e7f6      	b.n	800805e <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8008070:	f7fc fba8 	bl	80047c4 <Error_Handler>
 8008074:	e7d2      	b.n	800801c <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8008076:	f7fc fba5 	bl	80047c4 <Error_Handler>
 800807a:	e785      	b.n	8007f88 <HAL_UART_MspInit+0x420>
      Error_Handler();
 800807c:	f7fc fba2 	bl	80047c4 <Error_Handler>
 8008080:	e6b9      	b.n	8007df6 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8008082:	f7fc fb9f 	bl	80047c4 <Error_Handler>
 8008086:	e69c      	b.n	8007dc2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8008088:	f7fc fb9c 	bl	80047c4 <Error_Handler>
 800808c:	e64c      	b.n	8007d28 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 800808e:	f7fc fb99 	bl	80047c4 <Error_Handler>
 8008092:	e6ea      	b.n	8007e6a <HAL_UART_MspInit+0x302>
      Error_Handler();
 8008094:	f7fc fb96 	bl	80047c4 <Error_Handler>
 8008098:	e59b      	b.n	8007bd2 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 800809a:	f7fc fb93 	bl	80047c4 <Error_Handler>
 800809e:	e5db      	b.n	8007c58 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80080a0:	f7fc fb90 	bl	80047c4 <Error_Handler>
 80080a4:	e717      	b.n	8007ed6 <HAL_UART_MspInit+0x36e>
 80080a6:	bf00      	nop
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40021400 	.word	0x40021400
 80080b0:	40020c00 	.word	0x40020c00
 80080b4:	40020800 	.word	0x40020800
 80080b8:	40021800 	.word	0x40021800
 80080bc:	200024e8 	.word	0x200024e8
 80080c0:	40026428 	.word	0x40026428
 80080c4:	20002548 	.word	0x20002548
 80080c8:	400264a0 	.word	0x400264a0

080080cc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 80080cc:	4a4f      	ldr	r2, [pc, #316]	; (800820c <HAL_UART_MspDeInit+0x140>)
 80080ce:	6803      	ldr	r3, [r0, #0]
 80080d0:	4293      	cmp	r3, r2
{
 80080d2:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 80080d4:	d025      	beq.n	8008122 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 80080d6:	4a4e      	ldr	r2, [pc, #312]	; (8008210 <HAL_UART_MspDeInit+0x144>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4293      	cmp	r3, r2
 80080dc:	d038      	beq.n	8008150 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 80080de:	4a4d      	ldr	r2, [pc, #308]	; (8008214 <HAL_UART_MspDeInit+0x148>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d050      	beq.n	8008186 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 80080e4:	4a4c      	ldr	r2, [pc, #304]	; (8008218 <HAL_UART_MspDeInit+0x14c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d009      	beq.n	80080fe <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 80080ea:	4a4c      	ldr	r2, [pc, #304]	; (800821c <HAL_UART_MspDeInit+0x150>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d056      	beq.n	800819e <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 80080f0:	4a4b      	ldr	r2, [pc, #300]	; (8008220 <HAL_UART_MspDeInit+0x154>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d062      	beq.n	80081bc <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 80080f6:	4a4b      	ldr	r2, [pc, #300]	; (8008224 <HAL_UART_MspDeInit+0x158>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d06c      	beq.n	80081d6 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80080fc:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 80080fe:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8008102:	2103      	movs	r1, #3
 8008104:	4848      	ldr	r0, [pc, #288]	; (8008228 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8008106:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800810c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 800810e:	f004 fda9 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008112:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008114:	f002 fa40 	bl	800a598 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8008118:	2053      	movs	r0, #83	; 0x53
}
 800811a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800811e:	f001 bddb 	b.w	8009cd8 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8008122:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8008126:	f248 0101 	movw	r1, #32769	; 0x8001
 800812a:	4840      	ldr	r0, [pc, #256]	; (800822c <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 800812c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800812e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008132:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8008134:	f004 fd96 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8008138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800813c:	483c      	ldr	r0, [pc, #240]	; (8008230 <HAL_UART_MspDeInit+0x164>)
 800813e:	f004 fd91 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8008142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008146:	483b      	ldr	r0, [pc, #236]	; (8008234 <HAL_UART_MspDeInit+0x168>)
}
 8008148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800814c:	f004 bd8a 	b.w	800cc64 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8008150:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8008154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008158:	4835      	ldr	r0, [pc, #212]	; (8008230 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 800815a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800815c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008160:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8008162:	f004 fd7f 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8008166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800816a:	4832      	ldr	r0, [pc, #200]	; (8008234 <HAL_UART_MspDeInit+0x168>)
 800816c:	f004 fd7a 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008170:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008172:	f002 fa11 	bl	800a598 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8008176:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008178:	f002 fa0e 	bl	800a598 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800817c:	2035      	movs	r0, #53	; 0x35
}
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8008182:	f001 bda9 	b.w	8009cd8 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8008186:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800818a:	21c0      	movs	r1, #192	; 0xc0
 800818c:	482a      	ldr	r0, [pc, #168]	; (8008238 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800818e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8008194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8008198:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800819a:	f004 bd63 	b.w	800cc64 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 800819e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80081a2:	4826      	ldr	r0, [pc, #152]	; (800823c <HAL_UART_MspDeInit+0x170>)
 80081a4:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 80081a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081ac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80081ae:	f004 fd59 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80081b2:	2026      	movs	r0, #38	; 0x26
}
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80081b8:	f001 bd8e 	b.w	8009cd8 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80081bc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80081c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80081c4:	481d      	ldr	r0, [pc, #116]	; (800823c <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80081c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 80081d0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80081d2:	f004 bd47 	b.w	800cc64 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 80081d6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80081da:	2140      	movs	r1, #64	; 0x40
 80081dc:	4815      	ldr	r0, [pc, #84]	; (8008234 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 80081de:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80081e0:	f023 0320 	bic.w	r3, r3, #32
 80081e4:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80081e6:	f004 fd3d 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 80081ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081ee:	4814      	ldr	r0, [pc, #80]	; (8008240 <HAL_UART_MspDeInit+0x174>)
 80081f0:	f004 fd38 	bl	800cc64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80081f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80081f6:	f002 f9cf 	bl	800a598 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80081fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80081fc:	f002 f9cc 	bl	800a598 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008200:	2047      	movs	r0, #71	; 0x47
}
 8008202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008206:	f001 bd67 	b.w	8009cd8 <HAL_NVIC_DisableIRQ>
 800820a:	bf00      	nop
 800820c:	40004c00 	.word	0x40004c00
 8008210:	40005000 	.word	0x40005000
 8008214:	40007800 	.word	0x40007800
 8008218:	40007c00 	.word	0x40007c00
 800821c:	40004400 	.word	0x40004400
 8008220:	40004800 	.word	0x40004800
 8008224:	40011400 	.word	0x40011400
 8008228:	40021000 	.word	0x40021000
 800822c:	40020000 	.word	0x40020000
 8008230:	40020400 	.word	0x40020400
 8008234:	40020800 	.word	0x40020800
 8008238:	40021400 	.word	0x40021400
 800823c:	40020c00 	.word	0x40020c00
 8008240:	40021800 	.word	0x40021800

08008244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008244:	b530      	push	{r4, r5, lr}
 8008246:	4601      	mov	r1, r0
 8008248:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800824a:	2200      	movs	r2, #0
 800824c:	202b      	movs	r0, #43	; 0x2b
 800824e:	f001 fce5 	bl	8009c1c <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008252:	202b      	movs	r0, #43	; 0x2b
 8008254:	f001 fd2c 	bl	8009cb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800825a:	a901      	add	r1, sp, #4
 800825c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800825e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8008260:	4c14      	ldr	r4, [pc, #80]	; (80082b4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008266:	4d14      	ldr	r5, [pc, #80]	; (80082b8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008274:	f006 fe6c 	bl	800ef50 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008278:	f006 fe4a 	bl	800ef10 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 800827c:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800827e:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8008280:	490e      	ldr	r1, [pc, #56]	; (80082bc <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 8008282:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8008284:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008286:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008288:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 800828c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 8008290:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008292:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8008294:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008296:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8008298:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800829a:	f009 f94b 	bl	8011534 <HAL_TIM_Base_Init>
 800829e:	b110      	cbz	r0, 80082a6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80082a0:	2001      	movs	r0, #1
}
 80082a2:	b009      	add	sp, #36	; 0x24
 80082a4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80082a6:	4620      	mov	r0, r4
 80082a8:	f008 fb18 	bl	80108dc <HAL_TIM_Base_Start_IT>
}
 80082ac:	b009      	add	sp, #36	; 0x24
 80082ae:	bd30      	pop	{r4, r5, pc}
 80082b0:	40023800 	.word	0x40023800
 80082b4:	20003448 	.word	0x20003448
 80082b8:	431bde83 	.word	0x431bde83
 80082bc:	40001800 	.word	0x40001800

080082c0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop

080082c4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082c4:	e7fe      	b.n	80082c4 <HardFault_Handler>
 80082c6:	bf00      	nop

080082c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082c8:	e7fe      	b.n	80082c8 <MemManage_Handler>
 80082ca:	bf00      	nop

080082cc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082cc:	e7fe      	b.n	80082cc <BusFault_Handler>
 80082ce:	bf00      	nop

080082d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082d0:	e7fe      	b.n	80082d0 <UsageFault_Handler>
 80082d2:	bf00      	nop

080082d4 <RCC_IRQHandler>:
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <DMA1_Stream0_IRQHandler+0x8>)
 80082da:	f002 bac9 	b.w	800a870 <HAL_DMA_IRQHandler>
 80082de:	bf00      	nop
 80082e0:	200023c8 	.word	0x200023c8

080082e4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <DMA1_Stream1_IRQHandler+0x8>)
 80082e6:	f002 bac3 	b.w	800a870 <HAL_DMA_IRQHandler>
 80082ea:	bf00      	nop
 80082ec:	20002368 	.word	0x20002368

080082f0 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <DMA1_Stream5_IRQHandler+0x8>)
 80082f2:	f002 babd 	b.w	800a870 <HAL_DMA_IRQHandler>
 80082f6:	bf00      	nop
 80082f8:	20002308 	.word	0x20002308

080082fc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <DMA1_Stream6_IRQHandler+0x8>)
 80082fe:	f002 bab7 	b.w	800a870 <HAL_DMA_IRQHandler>
 8008302:	bf00      	nop
 8008304:	20002488 	.word	0x20002488

08008308 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <ADC_IRQHandler+0x18>)
 800830c:	f001 fa62 	bl	80097d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008310:	4804      	ldr	r0, [pc, #16]	; (8008324 <ADC_IRQHandler+0x1c>)
 8008312:	f001 fa5f 	bl	80097d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008316:	4804      	ldr	r0, [pc, #16]	; (8008328 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800831c:	f001 ba5a 	b.w	80097d4 <HAL_ADC_IRQHandler>
 8008320:	20002198 	.word	0x20002198
 8008324:	200021e0 	.word	0x200021e0
 8008328:	20002228 	.word	0x20002228

0800832c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <TIM2_IRQHandler+0x8>)
 800832e:	f008 bf79 	b.w	8011224 <HAL_TIM_IRQHandler>
 8008332:	bf00      	nop
 8008334:	20002870 	.word	0x20002870

08008338 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <TIM3_IRQHandler+0x8>)
 800833a:	f008 bf73 	b.w	8011224 <HAL_TIM_IRQHandler>
 800833e:	bf00      	nop
 8008340:	200028bc 	.word	0x200028bc

08008344 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <USART2_IRQHandler+0x8>)
 8008346:	f00b b9f1 	b.w	801372c <HAL_UART_IRQHandler>
 800834a:	bf00      	nop
 800834c:	20002a38 	.word	0x20002a38

08008350 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8008350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008354:	f004 bdbe 	b.w	800ced4 <HAL_GPIO_EXTI_IRQHandler>

08008358 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800835a:	f008 bf63 	b.w	8011224 <HAL_TIM_IRQHandler>
 800835e:	bf00      	nop
 8008360:	20003448 	.word	0x20003448

08008364 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8008366:	f008 bf5d 	b.w	8011224 <HAL_TIM_IRQHandler>
 800836a:	bf00      	nop
 800836c:	20002824 	.word	0x20002824

08008370 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <DMA1_Stream7_IRQHandler+0x8>)
 8008372:	f002 ba7d 	b.w	800a870 <HAL_DMA_IRQHandler>
 8008376:	bf00      	nop
 8008378:	20002428 	.word	0x20002428

0800837c <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <TIM5_IRQHandler+0x8>)
 800837e:	f008 bf51 	b.w	8011224 <HAL_TIM_IRQHandler>
 8008382:	bf00      	nop
 8008384:	20002954 	.word	0x20002954

08008388 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <UART5_IRQHandler+0x8>)
 800838a:	f00b b9cf 	b.w	801372c <HAL_UART_IRQHandler>
 800838e:	bf00      	nop
 8008390:	20002bc4 	.word	0x20002bc4

08008394 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8008394:	4804      	ldr	r0, [pc, #16]	; (80083a8 <TIM6_DAC_IRQHandler+0x14>)
{
 8008396:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8008398:	f001 fe9c 	bl	800a0d4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800839c:	4803      	ldr	r0, [pc, #12]	; (80083ac <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800839e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80083a2:	f008 bf3f 	b.w	8011224 <HAL_TIM_IRQHandler>
 80083a6:	bf00      	nop
 80083a8:	20002294 	.word	0x20002294
 80083ac:	200029a0 	.word	0x200029a0

080083b0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <DMA2_Stream1_IRQHandler+0x8>)
 80083b2:	f002 ba5d 	b.w	800a870 <HAL_DMA_IRQHandler>
 80083b6:	bf00      	nop
 80083b8:	200024e8 	.word	0x200024e8

080083bc <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <DMA2_Stream4_IRQHandler+0x8>)
 80083be:	f002 ba57 	b.w	800a870 <HAL_DMA_IRQHandler>
 80083c2:	bf00      	nop
 80083c4:	200022a8 	.word	0x200022a8

080083c8 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <ETH_IRQHandler+0x8>)
 80083ca:	f003 b9d5 	b.w	800b778 <HAL_ETH_IRQHandler>
 80083ce:	bf00      	nop
 80083d0:	2000668c 	.word	0x2000668c

080083d4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80083d4:	4801      	ldr	r0, [pc, #4]	; (80083dc <OTG_FS_IRQHandler+0x8>)
 80083d6:	f005 bc9b 	b.w	800dd10 <HAL_PCD_IRQHandler>
 80083da:	bf00      	nop
 80083dc:	2002fd28 	.word	0x2002fd28

080083e0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <DMA2_Stream6_IRQHandler+0x8>)
 80083e2:	f002 ba45 	b.w	800a870 <HAL_DMA_IRQHandler>
 80083e6:	bf00      	nop
 80083e8:	20002548 	.word	0x20002548

080083ec <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <USART6_IRQHandler+0x8>)
 80083ee:	f00b b99d 	b.w	801372c <HAL_UART_IRQHandler>
 80083f2:	bf00      	nop
 80083f4:	20002c48 	.word	0x20002c48

080083f8 <FPU_IRQHandler>:
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80083fc:	4801      	ldr	r0, [pc, #4]	; (8008404 <UART8_IRQHandler+0x8>)
 80083fe:	f00b b995 	b.w	801372c <HAL_UART_IRQHandler>
 8008402:	bf00      	nop
 8008404:	20002d50 	.word	0x20002d50

08008408 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8008408:	2001      	movs	r0, #1
 800840a:	4770      	bx	lr

0800840c <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <_kill+0xc>)
 800840e:	2216      	movs	r2, #22
	return -1;
}
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8008414:	601a      	str	r2, [r3, #0]
}
 8008416:	4770      	bx	lr
 8008418:	2003013c 	.word	0x2003013c

0800841c <_exit>:
	errno = EINVAL;
 800841c:	4b01      	ldr	r3, [pc, #4]	; (8008424 <_exit+0x8>)
 800841e:	2216      	movs	r2, #22
 8008420:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8008422:	e7fe      	b.n	8008422 <_exit+0x6>
 8008424:	2003013c 	.word	0x2003013c

08008428 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8008428:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800842a:	1e16      	subs	r6, r2, #0
 800842c:	dd07      	ble.n	800843e <_read+0x16>
 800842e:	460c      	mov	r4, r1
 8008430:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8008432:	f3af 8000 	nop.w
 8008436:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800843a:	42a5      	cmp	r5, r4
 800843c:	d1f9      	bne.n	8008432 <_read+0xa>
	}

	return len;
}
 800843e:	4630      	mov	r0, r6
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	bf00      	nop

08008444 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop

0800844c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 800844c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8008450:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8008452:	604b      	str	r3, [r1, #4]
}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop

08008458 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8008458:	2001      	movs	r0, #1
 800845a:	4770      	bx	lr

0800845c <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800845c:	2000      	movs	r0, #0
 800845e:	4770      	bx	lr

08008460 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8008460:	490d      	ldr	r1, [pc, #52]	; (8008498 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8008462:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8008464:	4a0d      	ldr	r2, [pc, #52]	; (800849c <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8008466:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8008468:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800846a:	4c0d      	ldr	r4, [pc, #52]	; (80084a0 <_sbrk+0x40>)
 800846c:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800846e:	b170      	cbz	r0, 800848e <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8008470:	4403      	add	r3, r0
 8008472:	4293      	cmp	r3, r2
 8008474:	d803      	bhi.n	800847e <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8008476:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 800847a:	600b      	str	r3, [r1, #0]
}
 800847c:	4770      	bx	lr
		errno = ENOMEM;
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <_sbrk+0x44>)
 8008480:	220c      	movs	r2, #12
		return (void*) -1;
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008486:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 800848a:	601a      	str	r2, [r3, #0]
}
 800848c:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 800848e:	4c06      	ldr	r4, [pc, #24]	; (80084a8 <_sbrk+0x48>)
 8008490:	4620      	mov	r0, r4
 8008492:	600c      	str	r4, [r1, #0]
 8008494:	e7ec      	b.n	8008470 <_sbrk+0x10>
 8008496:	bf00      	nop
 8008498:	20003498 	.word	0x20003498
 800849c:	20080000 	.word	0x20080000
 80084a0:	00007800 	.word	0x00007800
 80084a4:	2003013c 	.word	0x2003013c
 80084a8:	20030168 	.word	0x20030168

080084ac <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084ac:	4a0f      	ldr	r2, [pc, #60]	; (80084ec <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80084ae:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084b0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80084b4:	490f      	ldr	r1, [pc, #60]	; (80084f4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084b6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80084ba:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084bc:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80084c0:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	f040 0001 	orr.w	r0, r0, #1
 80084c8:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80084ca:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80084d2:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80084d4:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80084d6:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80084d8:	4808      	ldr	r0, [pc, #32]	; (80084fc <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80084da:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80084de:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 80084e0:	60dc      	str	r4, [r3, #12]

#endif
}
 80084e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80084e6:	6090      	str	r0, [r2, #8]
}
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	e000ed00 	.word	0xe000ed00
 80084f0:	40023800 	.word	0x40023800
 80084f4:	fef6ffff 	.word	0xfef6ffff
 80084f8:	24003010 	.word	0x24003010
 80084fc:	08000000 	.word	0x08000000

08008500 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8008500:	680b      	ldr	r3, [r1, #0]
 8008502:	4a03      	ldr	r2, [pc, #12]	; (8008510 <dnsfound+0x10>)
		ip_ready = -1;
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf08      	it	eq
 8008508:	f04f 33ff 	moveq.w	r3, #4294967295
 800850c:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 800850e:	4770      	bx	lr
 8008510:	200034ac 	.word	0x200034ac

08008514 <myreboot>:
void myreboot(char *msg) {
 8008514:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8008516:	480a      	ldr	r0, [pc, #40]	; (8008540 <myreboot+0x2c>)
void myreboot(char *msg) {
 8008518:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800851a:	f01e f913 	bl	8026744 <iprintf>
	osDelay(2000);
 800851e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008522:	f00e f88b 	bl	801663c <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 8008526:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800852a:	4906      	ldr	r1, [pc, #24]	; (8008544 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800852e:	68ca      	ldr	r2, [r1, #12]
 8008530:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008534:	4313      	orrs	r3, r2
 8008536:	60cb      	str	r3, [r1, #12]
 8008538:	f3bf 8f4f 	dsb	sy
    __NOP();
 800853c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800853e:	e7fd      	b.n	800853c <myreboot+0x28>
 8008540:	0802db08 	.word	0x0802db08
 8008544:	e000ed00 	.word	0xe000ed00
 8008548:	05fa0004 	.word	0x05fa0004

0800854c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 800854c:	b500      	push	{lr}
 800854e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008550:	f241 3388 	movw	r3, #5000	; 0x1388
 8008554:	4a16      	ldr	r2, [pc, #88]	; (80085b0 <sendudp+0x64>)
 8008556:	f019 f85f 	bl	8021618 <udp_sendto>
 800855a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 800855e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008562:	b943      	cbnz	r3, 8008576 <sendudp+0x2a>
 8008564:	b25a      	sxtb	r2, r3
		busycount = 0;
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <sendudp+0x68>)
 8008568:	601a      	str	r2, [r3, #0]
	return (err);
 800856a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800856e:	b240      	sxtb	r0, r0
 8008570:	b003      	add	sp, #12
 8008572:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8008576:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800857a:	480f      	ldr	r0, [pc, #60]	; (80085b8 <sendudp+0x6c>)
 800857c:	b249      	sxtb	r1, r1
 800857e:	f01e f8e1 	bl	8026744 <iprintf>
		vTaskDelay(100); //some delay!
 8008582:	2064      	movs	r0, #100	; 0x64
 8008584:	f00f fc8c 	bl	8017ea0 <vTaskDelay>
		if (err == ERR_MEM) {
 8008588:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800858c:	2bff      	cmp	r3, #255	; 0xff
 800858e:	d00c      	beq.n	80085aa <sendudp+0x5e>
		if (err == ERR_USE) {
 8008590:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008594:	2bf8      	cmp	r3, #248	; 0xf8
 8008596:	d1e8      	bne.n	800856a <sendudp+0x1e>
			if (busycount++ > 10)
 8008598:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <sendudp+0x68>)
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	1c59      	adds	r1, r3, #1
 800859e:	2b0a      	cmp	r3, #10
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	dde2      	ble.n	800856a <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80085a4:	4805      	ldr	r0, [pc, #20]	; (80085bc <sendudp+0x70>)
 80085a6:	f7ff ffb5 	bl	8008514 <myreboot>
			myreboot("sendudp: out of mem");
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <sendudp+0x74>)
 80085ac:	f7ff ffb2 	bl	8008514 <myreboot>
 80085b0:	200034c4 	.word	0x200034c4
 80085b4:	2000349c 	.word	0x2000349c
 80085b8:	0802db1c 	.word	0x0802db1c
 80085bc:	0802db44 	.word	0x0802db44
 80085c0:	0802db30 	.word	0x0802db30

080085c4 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085c4:	4b25      	ldr	r3, [pc, #148]	; (800865c <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80085c6:	4684      	mov	ip, r0
 80085c8:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085ca:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80085ce:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085d4:	4c22      	ldr	r4, [pc, #136]	; (8008660 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80085d6:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085d8:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085de:	4c21      	ldr	r4, [pc, #132]	; (8008664 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085e4:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80085e8:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085ec:	4c1e      	ldr	r4, [pc, #120]	; (8008668 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085ee:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085f2:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085f6:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085fa:	4a1c      	ldr	r2, [pc, #112]	; (800866c <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085fc:	bfc8      	it	gt
 80085fe:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008602:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8008606:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008608:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	4d18      	ldr	r5, [pc, #96]	; (8008670 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008610:	4a18      	ldr	r2, [pc, #96]	; (8008674 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008612:	2b00      	cmp	r3, #0
 8008614:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008616:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008618:	bfb8      	it	lt
 800861a:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800861c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800861e:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008620:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008622:	4d15      	ldr	r5, [pc, #84]	; (8008678 <sendstatus+0xb4>)
 8008624:	b292      	uxth	r2, r2
 8008626:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008628:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800862c:	432a      	orrs	r2, r5
 800862e:	4d13      	ldr	r5, [pc, #76]	; (800867c <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008630:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008632:	4035      	ands	r5, r6
 8008634:	432a      	orrs	r2, r5
 8008636:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008638:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800863c:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800863e:	4a10      	ldr	r2, [pc, #64]	; (8008680 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8008640:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008644:	f241 3388 	movw	r3, #5000	; 0x1388
 8008648:	f7ff ff80 	bl	800854c <sendudp>
 800864c:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	6023      	str	r3, [r4, #0]
}
 8008656:	b002      	add	sp, #8
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	bf00      	nop
 800865c:	20000780 	.word	0x20000780
 8008660:	2000072c 	.word	0x2000072c
 8008664:	20003430 	.word	0x20003430
 8008668:	2000303c 	.word	0x2000303c
 800866c:	20000738 	.word	0x20000738
 8008670:	20000002 	.word	0x20000002
 8008674:	20000734 	.word	0x20000734
 8008678:	20000714 	.word	0x20000714
 800867c:	ffff0000 	.word	0xffff0000
 8008680:	200034c4 	.word	0x200034c4

08008684 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 800868a:	4818      	ldr	r0, [pc, #96]	; (80086ec <dnslookup+0x68>)
 800868c:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 800868e:	4e18      	ldr	r6, [pc, #96]	; (80086f0 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8008690:	f01e f858 	bl	8026744 <iprintf>
	ip_ready = 0;
 8008694:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8008696:	4620      	mov	r0, r4
 8008698:	4a16      	ldr	r2, [pc, #88]	; (80086f4 <dnslookup+0x70>)
 800869a:	4639      	mov	r1, r7
	ip_ready = 0;
 800869c:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800869e:	f012 fc5f 	bl	801af60 <dns_gethostbyname>
 80086a2:	4604      	mov	r4, r0

	switch (err) {
 80086a4:	3005      	adds	r0, #5
 80086a6:	d005      	beq.n	80086b4 <dnslookup+0x30>
 80086a8:	b114      	cbz	r4, 80086b0 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80086aa:	4813      	ldr	r0, [pc, #76]	; (80086f8 <dnslookup+0x74>)
 80086ac:	f01e f84a 	bl	8026744 <iprintf>
		break;
	}
	return (err);
}
 80086b0:	4620      	mov	r0, r4
 80086b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80086b4:	4811      	ldr	r0, [pc, #68]	; (80086fc <dnslookup+0x78>)
 80086b6:	2514      	movs	r5, #20
 80086b8:	f01e f844 	bl	8026744 <iprintf>
		for (i = 0; i < 20; i++) {
 80086bc:	e001      	b.n	80086c2 <dnslookup+0x3e>
 80086be:	3d01      	subs	r5, #1
 80086c0:	d0f3      	beq.n	80086aa <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80086c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086c6:	f00d ffb9 	bl	801663c <osDelay>
			printf(".");
 80086ca:	202e      	movs	r0, #46	; 0x2e
 80086cc:	f01e f852 	bl	8026774 <putchar>
			if (ip_ready) {
 80086d0:	6833      	ldr	r3, [r6, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f3      	beq.n	80086be <dnslookup+0x3a>
				if (ip_ready == -1) {
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	d002      	beq.n	80086e0 <dnslookup+0x5c>
				return (ERR_OK);
 80086da:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 80086dc:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 80086de:	e7e7      	b.n	80086b0 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80086e2:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 80086e6:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80086e8:	e7e2      	b.n	80086b0 <dnslookup+0x2c>
 80086ea:	bf00      	nop
 80086ec:	0802db60 	.word	0x0802db60
 80086f0:	200034ac 	.word	0x200034ac
 80086f4:	08008501 	.word	0x08008501
 80086f8:	0802db9c 	.word	0x0802db9c
 80086fc:	0802db74 	.word	0x0802db74
 8008700:	0802db90 	.word	0x0802db90

08008704 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8008704:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8008706:	4914      	ldr	r1, [pc, #80]	; (8008758 <locateudp+0x54>)
{
 8008708:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 800870a:	4814      	ldr	r0, [pc, #80]	; (800875c <locateudp+0x58>)
 800870c:	f01e f81a 	bl	8026744 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8008710:	4913      	ldr	r1, [pc, #76]	; (8008760 <locateudp+0x5c>)
 8008712:	4811      	ldr	r0, [pc, #68]	; (8008758 <locateudp+0x54>)
 8008714:	f7ff ffb6 	bl	8008684 <dnslookup>
 8008718:	b240      	sxtb	r0, r0
 800871a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800871e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008722:	b9a3      	cbnz	r3, 800874e <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8008724:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8008726:	490f      	ldr	r1, [pc, #60]	; (8008764 <locateudp+0x60>)
	ip = udpdestip.addr;
 8008728:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800872a:	480f      	ldr	r0, [pc, #60]	; (8008768 <locateudp+0x64>)
 800872c:	0e22      	lsrs	r2, r4, #24
 800872e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8008732:	e9cd 3200 	strd	r3, r2, [sp]
 8008736:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800873a:	b2e2      	uxtb	r2, r4
 800873c:	f01e f9ec 	bl	8026b18 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8008740:	4909      	ldr	r1, [pc, #36]	; (8008768 <locateudp+0x64>)
 8008742:	480a      	ldr	r0, [pc, #40]	; (800876c <locateudp+0x68>)
 8008744:	f01d fffe 	bl	8026744 <iprintf>
	return (ip);
}
 8008748:	4620      	mov	r0, r4
 800874a:	b004      	add	sp, #16
 800874c:	bd10      	pop	{r4, pc}
		rebootme(3);
 800874e:	2003      	movs	r0, #3
 8008750:	f7fb faba 	bl	8003cc8 <rebootme>
 8008754:	e7e6      	b.n	8008724 <locateudp+0x20>
 8008756:	bf00      	nop
 8008758:	20003530 	.word	0x20003530
 800875c:	0802dbc0 	.word	0x0802dbc0
 8008760:	200034c4 	.word	0x200034c4
 8008764:	0802dbe0 	.word	0x0802dbe0
 8008768:	200034b4 	.word	0x200034b4
 800876c:	0802dbf0 	.word	0x0802dbf0

08008770 <startudp>:

void startudp(uint32_t ip) {
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	ed2d 8b02 	vpush	{d8}
 8008778:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800877a:	f00f fcb9 	bl	80180f0 <xTaskGetCurrentTaskHandle>
 800877e:	4b75      	ldr	r3, [pc, #468]	; (8008954 <startudp+0x1e4>)
 8008780:	4602      	mov	r2, r0
	osDelay(1000);
 8008782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8008786:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8008788:	f00d ff58 	bl	801663c <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 800878c:	f019 f810 	bl	80217b0 <udp_new>
	if (pcb == NULL) {
 8008790:	2800      	cmp	r0, #0
 8008792:	f000 80ce 	beq.w	8008932 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8008796:	f241 3288 	movw	r2, #5000	; 0x1388
 800879a:	496f      	ldr	r1, [pc, #444]	; (8008958 <startudp+0x1e8>)
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	f018 fdb6 	bl	8021310 <udp_bind>
 80087a4:	4605      	mov	r5, r0
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 80bf 	bne.w	800892a <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087ac:	2241      	movs	r2, #65	; 0x41
 80087ae:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80087b2:	2036      	movs	r0, #54	; 0x36
 80087b4:	f013 fd2a 	bl	801c20c <pbuf_alloc>

	if (p1 == NULL) {
 80087b8:	9000      	str	r0, [sp, #0]
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f000 80bd 	beq.w	800893a <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80087c0:	4c66      	ldr	r4, [pc, #408]	; (800895c <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087c2:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80087c6:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087c8:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087ce:	2241      	movs	r2, #65	; 0x41
 80087d0:	f013 fd1c 	bl	801c20c <pbuf_alloc>
	if (p2 == NULL) {
 80087d4:	9001      	str	r0, [sp, #4]
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f000 80b7 	beq.w	800894a <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80087dc:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80087de:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80087e0:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80087e2:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80087e4:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80087e8:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80087ea:	2201      	movs	r2, #1
 80087ec:	f013 fd0e 	bl	801c20c <pbuf_alloc>
	if (ps == NULL) {
 80087f0:	ee08 0a90 	vmov	s17, r0
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f000 80aa 	beq.w	800894e <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80087fa:	4c59      	ldr	r4, [pc, #356]	; (8008960 <startudp+0x1f0>)
 80087fc:	4f59      	ldr	r7, [pc, #356]	; (8008964 <startudp+0x1f4>)
 80087fe:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8008800:	f241 3088 	movw	r0, #5000	; 0x1388
 8008804:	f00d ff1a 	bl	801663c <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008808:	4b57      	ldr	r3, [pc, #348]	; (8008968 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 800880a:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 800880c:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 800880e:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8008810:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8008812:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008816:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800881a:	4b54      	ldr	r3, [pc, #336]	; (800896c <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800881c:	4854      	ldr	r0, [pc, #336]	; (8008970 <startudp+0x200>)
 800881e:	4e55      	ldr	r6, [pc, #340]	; (8008974 <startudp+0x204>)
 8008820:	f8df b188 	ldr.w	fp, [pc, #392]	; 80089ac <startudp+0x23c>
 8008824:	f8df a188 	ldr.w	sl, [pc, #392]	; 80089b0 <startudp+0x240>
 8008828:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80089b4 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 800882c:	4d52      	ldr	r5, [pc, #328]	; (8008978 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800882e:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8008830:	f01e f824 	bl	802687c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008838:	2001      	movs	r0, #1
 800883a:	f00f fda1 	bl	8018380 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800883e:	2800      	cmp	r0, #0
 8008840:	d05a      	beq.n	80088f8 <startudp+0x188>
			sigsend = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8008846:	7833      	ldrb	r3, [r6, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0f3      	beq.n	8008834 <startudp+0xc4>
 800884c:	f8db 3000 	ldr.w	r3, [fp]
 8008850:	f8da 2000 	ldr.w	r2, [sl]
 8008854:	4313      	orrs	r3, r2
 8008856:	d1ed      	bne.n	8008834 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008858:	4a48      	ldr	r2, [pc, #288]	; (800897c <startudp+0x20c>)
 800885a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	2a00      	cmp	r2, #0
 8008862:	bf08      	it	eq
 8008864:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8008866:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008868:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800886a:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	684b      	ldr	r3, [r1, #4]
 8008870:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	684a      	ldr	r2, [r1, #4]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	684a      	ldr	r2, [r1, #4]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8008882:	7b89      	ldrb	r1, [r1, #14]
 8008884:	2901      	cmp	r1, #1
 8008886:	d006      	beq.n	8008896 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8008888:	4628      	mov	r0, r5
 800888a:	f01d ff5b 	bl	8026744 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 800888e:	f899 100e 	ldrb.w	r1, [r9, #14]
 8008892:	2901      	cmp	r1, #1
 8008894:	d1f8      	bne.n	8008888 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8008896:	f241 3388 	movw	r3, #5000	; 0x1388
 800889a:	4649      	mov	r1, r9
 800889c:	4a38      	ldr	r2, [pc, #224]	; (8008980 <startudp+0x210>)
 800889e:	ee18 0a10 	vmov	r0, s16
 80088a2:	f7ff fe53 	bl	800854c <sendudp>
 80088a6:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80088aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80088ae:	3301      	adds	r3, #1
 80088b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80088b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80088b8:	3301      	adds	r3, #1
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80088c6:	4b2f      	ldr	r3, [pc, #188]	; (8008984 <startudp+0x214>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0b2      	beq.n	8008834 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80088ce:	492e      	ldr	r1, [pc, #184]	; (8008988 <startudp+0x218>)
 80088d0:	ee18 2a10 	vmov	r2, s16
 80088d4:	2001      	movs	r0, #1
 80088d6:	780b      	ldrb	r3, [r1, #0]
 80088d8:	ee18 1a90 	vmov	r1, s17
 80088dc:	f7ff fe72 	bl	80085c4 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 80088e0:	2300      	movs	r3, #0
 80088e2:	4a28      	ldr	r2, [pc, #160]	; (8008984 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80088e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088e8:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 80088ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 80088ee:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80088f0:	f00f fd46 	bl	8018380 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d1a4      	bne.n	8008842 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80088f8:	4b24      	ldr	r3, [pc, #144]	; (800898c <startudp+0x21c>)
 80088fa:	f8d8 2000 	ldr.w	r2, [r8]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4293      	cmp	r3, r2
 8008902:	d097      	beq.n	8008834 <startudp+0xc4>
 8008904:	4a22      	ldr	r2, [pc, #136]	; (8008990 <startudp+0x220>)
 8008906:	4923      	ldr	r1, [pc, #140]	; (8008994 <startudp+0x224>)
 8008908:	fb02 f203 	mul.w	r2, r2, r3
 800890c:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8008910:	d390      	bcc.n	8008834 <startudp+0xc4>
		talive = t1sec;
 8008912:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8008916:	ee18 2a10 	vmov	r2, s16
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <startudp+0x218>)
 800891c:	ee18 1a90 	vmov	r1, s17
 8008920:	2002      	movs	r0, #2
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f7ff fe4e 	bl	80085c4 <sendstatus>
 8008928:	e784      	b.n	8008834 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 800892a:	481b      	ldr	r0, [pc, #108]	; (8008998 <startudp+0x228>)
 800892c:	f01d ffa6 	bl	802687c <puts>
		for (;;)
 8008930:	e7fe      	b.n	8008930 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8008932:	481a      	ldr	r0, [pc, #104]	; (800899c <startudp+0x22c>)
 8008934:	f01d ffa2 	bl	802687c <puts>
		for (;;)
 8008938:	e7fe      	b.n	8008938 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 800893a:	4819      	ldr	r0, [pc, #100]	; (80089a0 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 800893c:	b005      	add	sp, #20
 800893e:	ecbd 8b02 	vpop	{d8}
 8008942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8008946:	f01d bf99 	b.w	802687c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 800894a:	4816      	ldr	r0, [pc, #88]	; (80089a4 <startudp+0x234>)
 800894c:	e7f6      	b.n	800893c <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 800894e:	4816      	ldr	r0, [pc, #88]	; (80089a8 <startudp+0x238>)
 8008950:	e7f4      	b.n	800893c <startudp+0x1cc>
 8008952:	bf00      	nop
 8008954:	20000838 	.word	0x20000838
 8008958:	0804731c 	.word	0x0804731c
 800895c:	20000784 	.word	0x20000784
 8008960:	2000303c 	.word	0x2000303c
 8008964:	2000079c 	.word	0x2000079c
 8008968:	dec0edfe 	.word	0xdec0edfe
 800896c:	20000782 	.word	0x20000782
 8008970:	0802dc9c 	.word	0x0802dc9c
 8008974:	200034a8 	.word	0x200034a8
 8008978:	0802dcd0 	.word	0x0802dcd0
 800897c:	20000728 	.word	0x20000728
 8008980:	200034c4 	.word	0x200034c4
 8008984:	20000794 	.word	0x20000794
 8008988:	20000714 	.word	0x20000714
 800898c:	20002e10 	.word	0x20002e10
 8008990:	eeeeeeef 	.word	0xeeeeeeef
 8008994:	02222222 	.word	0x02222222
 8008998:	0802dc20 	.word	0x0802dc20
 800899c:	0802dc04 	.word	0x0802dc04
 80089a0:	0802dc3c 	.word	0x0802dc3c
 80089a4:	0802dc5c 	.word	0x0802dc5c
 80089a8:	0802dc7c 	.word	0x0802dc7c
 80089ac:	200034a4 	.word	0x200034a4
 80089b0:	20000734 	.word	0x20000734
 80089b4:	200034b0 	.word	0x200034b0

080089b8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80089ba:	4b52      	ldr	r3, [pc, #328]	; (8008b04 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089c0:	4851      	ldr	r0, [pc, #324]	; (8008b08 <tag_callback+0x150>)
	if (ledsenabled) {
 80089c2:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 80089c8:	b35a      	cbz	r2, 8008a22 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089ca:	f004 fa6b 	bl	800cea4 <HAL_GPIO_TogglePin>
 80089ce:	4c4f      	ldr	r4, [pc, #316]	; (8008b0c <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 80089d0:	4d4f      	ldr	r5, [pc, #316]	; (8008b10 <tag_callback+0x158>)
 80089d2:	e001      	b.n	80089d8 <tag_callback+0x20>
 80089d4:	f01d ff52 	bl	802687c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80089d8:	2101      	movs	r1, #1
 80089da:	6820      	ldr	r0, [r4, #0]
 80089dc:	f00e fbf2 	bl	80171c4 <xQueueSemaphoreTake>
 80089e0:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 80089e2:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d1f5      	bne.n	80089d4 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 80089e8:	1f32      	subs	r2, r6, #4
 80089ea:	2a07      	cmp	r2, #7
 80089ec:	d81c      	bhi.n	8008a28 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 80089ee:	4949      	ldr	r1, [pc, #292]	; (8008b14 <tag_callback+0x15c>)
 80089f0:	4093      	lsls	r3, r2
 80089f2:	780a      	ldrb	r2, [r1, #0]
 80089f4:	4013      	ands	r3, r2
 80089f6:	4a48      	ldr	r2, [pc, #288]	; (8008b18 <tag_callback+0x160>)
 80089f8:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 80089fa:	bb5b      	cbnz	r3, 8008a54 <tag_callback+0x9c>
			strcpy(newstring, "0");
 80089fc:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <tag_callback+0x164>)
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8008a02:	2300      	movs	r3, #0
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f00e f941 	bl	8016c90 <xQueueGenericSend>
 8008a0e:	2801      	cmp	r0, #1
 8008a10:	d002      	beq.n	8008a18 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8008a12:	4843      	ldr	r0, [pc, #268]	; (8008b20 <tag_callback+0x168>)
 8008a14:	f01d ff32 	bl	802687c <puts>
	}
	return (strlen(newstring));
 8008a18:	4638      	mov	r0, r7
}
 8008a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8008a1e:	f7f7 bc19 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8008a22:	f004 fa25 	bl	800ce70 <HAL_GPIO_WritePin>
 8008a26:	e7d2      	b.n	80089ce <tag_callback+0x16>
		switch (index) {
 8008a28:	2e14      	cmp	r6, #20
 8008a2a:	d817      	bhi.n	8008a5c <tag_callback+0xa4>
 8008a2c:	e8df f006 	tbb	[pc, r6]
 8008a30:	0b655055 	.word	0x0b655055
 8008a34:	16161616 	.word	0x16161616
 8008a38:	16161616 	.word	0x16161616
 8008a3c:	343d5a61 	.word	0x343d5a61
 8008a40:	464b2429 	.word	0x464b2429
 8008a44:	1c          	.byte	0x1c
 8008a45:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8008a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a4a:	482f      	ldr	r0, [pc, #188]	; (8008b08 <tag_callback+0x150>)
 8008a4c:	f004 f9fe 	bl	800ce4c <HAL_GPIO_ReadPin>
 8008a50:	2801      	cmp	r0, #1
 8008a52:	d1d3      	bne.n	80089fc <tag_callback+0x44>
			strcpy(newstring, "1");
 8008a54:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <tag_callback+0x16c>)
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	803b      	strh	r3, [r7, #0]
 8008a5a:	e7d2      	b.n	8008a02 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	4932      	ldr	r1, [pc, #200]	; (8008b28 <tag_callback+0x170>)
 8008a60:	4638      	mov	r0, r7
 8008a62:	f01e f859 	bl	8026b18 <siprintf>
			break;
 8008a66:	e7cc      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8008a68:	4b30      	ldr	r3, [pc, #192]	; (8008b2c <tag_callback+0x174>)
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf14      	ite	ne
 8008a70:	2331      	movne	r3, #49	; 0x31
 8008a72:	2330      	moveq	r3, #48	; 0x30
 8008a74:	803b      	strh	r3, [r7, #0]
			break;
 8008a76:	e7c4      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8008a78:	492d      	ldr	r1, [pc, #180]	; (8008b30 <tag_callback+0x178>)
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f01e f902 	bl	8026c84 <strcpy>
			break;
 8008a80:	e7bf      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8008a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a86:	482b      	ldr	r0, [pc, #172]	; (8008b34 <tag_callback+0x17c>)
 8008a88:	f004 f9e0 	bl	800ce4c <HAL_GPIO_ReadPin>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	bf14      	ite	ne
 8008a90:	2330      	movne	r3, #48	; 0x30
 8008a92:	2331      	moveq	r3, #49	; 0x31
 8008a94:	803b      	strh	r3, [r7, #0]
			break;
 8008a96:	e7b4      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8008a98:	4b27      	ldr	r3, [pc, #156]	; (8008b38 <tag_callback+0x180>)
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	f013 0f04 	tst.w	r3, #4
 8008aa0:	bf14      	ite	ne
 8008aa2:	2331      	movne	r3, #49	; 0x31
 8008aa4:	2330      	moveq	r3, #48	; 0x30
 8008aa6:	803b      	strh	r3, [r7, #0]
			break;
 8008aa8:	e7ab      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <tag_callback+0x180>)
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	f013 0f02 	tst.w	r3, #2
 8008ab2:	bf14      	ite	ne
 8008ab4:	2331      	movne	r3, #49	; 0x31
 8008ab6:	2330      	moveq	r3, #48	; 0x30
 8008ab8:	803b      	strh	r3, [r7, #0]
			break;
 8008aba:	e7a2      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8008abc:	491f      	ldr	r1, [pc, #124]	; (8008b3c <tag_callback+0x184>)
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f01e f8e0 	bl	8026c84 <strcpy>
			break;
 8008ac4:	e79d      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8008ac6:	491e      	ldr	r1, [pc, #120]	; (8008b40 <tag_callback+0x188>)
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f01e f8db 	bl	8026c84 <strcpy>
			break;
 8008ace:	e798      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8008ad0:	491c      	ldr	r1, [pc, #112]	; (8008b44 <tag_callback+0x18c>)
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f01e f8d6 	bl	8026c84 <strcpy>
			break;
 8008ad8:	e793      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8008ada:	491b      	ldr	r1, [pc, #108]	; (8008b48 <tag_callback+0x190>)
 8008adc:	4638      	mov	r0, r7
 8008ade:	f01e f8d1 	bl	8026c84 <strcpy>
			break;
 8008ae2:	e78e      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8008ae4:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <tag_callback+0x180>)
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	3330      	adds	r3, #48	; 0x30
 8008aee:	803b      	strh	r3, [r7, #0]
			break;
 8008af0:	e787      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8008af2:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <tag_callback+0x194>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	803b      	strh	r3, [r7, #0]
			break;
 8008af8:	e783      	b.n	8008a02 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8008afa:	4915      	ldr	r1, [pc, #84]	; (8008b50 <tag_callback+0x198>)
 8008afc:	4638      	mov	r0, r7
 8008afe:	f01e f8c1 	bl	8026c84 <strcpy>
			break;
 8008b02:	e77e      	b.n	8008a02 <tag_callback+0x4a>
 8008b04:	200002ac 	.word	0x200002ac
 8008b08:	40020c00 	.word	0x40020c00
 8008b0c:	20002e0c 	.word	0x20002e0c
 8008b10:	0802ddb8 	.word	0x0802ddb8
 8008b14:	200002b0 	.word	0x200002b0
 8008b18:	200034cc 	.word	0x200034cc
 8008b1c:	08046ef8 	.word	0x08046ef8
 8008b20:	0802dde4 	.word	0x0802dde4
 8008b24:	0802db98 	.word	0x0802db98
 8008b28:	0802ddc4 	.word	0x0802ddc4
 8008b2c:	2000004e 	.word	0x2000004e
 8008b30:	200000c0 	.word	0x200000c0
 8008b34:	40021000 	.word	0x40021000
 8008b38:	20003430 	.word	0x20003430
 8008b3c:	20000050 	.word	0x20000050
 8008b40:	20000164 	.word	0x20000164
 8008b44:	200000b0 	.word	0x200000b0
 8008b48:	2000026c 	.word	0x2000026c
 8008b4c:	080452dc 	.word	0x080452dc
 8008b50:	20000090 	.word	0x20000090

08008b54 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	4615      	mov	r5, r2
 8008b5c:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008b5e:	220a      	movs	r2, #10
 8008b60:	a903      	add	r1, sp, #12
 8008b62:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8008b64:	4699      	mov	r9, r3
 8008b66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008b68:	f01e fe66 	bl	8027838 <strtol>
 8008b6c:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8008b6e:	4621      	mov	r1, r4
 8008b70:	462a      	mov	r2, r5
 8008b72:	4871      	ldr	r0, [pc, #452]	; (8008d38 <httpd_cgi_handler+0x1e4>)
 8008b74:	4633      	mov	r3, r6
 8008b76:	f01d fde5 	bl	8026744 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	dd37      	ble.n	8008bee <httpd_cgi_handler+0x9a>
 8008b7e:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008b80:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8008d68 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008b84:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8008d6c <httpd_cgi_handler+0x218>
		switch (j) {
 8008b88:	f1a6 030a 	sub.w	r3, r6, #10
 8008b8c:	2b0e      	cmp	r3, #14
 8008b8e:	f200 80cc 	bhi.w	8008d2a <httpd_cgi_handler+0x1d6>
 8008b92:	e8df f003 	tbb	[pc, r3]
 8008b96:	9eb6      	.short	0x9eb6
 8008b98:	08080808 	.word	0x08080808
 8008b9c:	08080808 	.word	0x08080808
 8008ba0:	864d6073 	.word	0x864d6073
 8008ba4:	3a          	.byte	0x3a
 8008ba5:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008ba6:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008ba8:	2101      	movs	r1, #1
 8008baa:	f1a6 000c 	sub.w	r0, r6, #12
 8008bae:	4b63      	ldr	r3, [pc, #396]	; (8008d3c <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008bb0:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8008bb2:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008bb6:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008bb8:	2a30      	cmp	r2, #48	; 0x30
 8008bba:	d01b      	beq.n	8008bf4 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	4311      	orrs	r1, r2
 8008bc0:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008bc2:	f001 0202 	and.w	r2, r1, #2
 8008bc6:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008bc8:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8008bca:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008bcc:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008bd0:	f01d fdb8 	bl	8026744 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8008bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4a58      	ldr	r2, [pc, #352]	; (8008d3c <httpd_cgi_handler+0x1e8>)
 8008bdc:	9100      	str	r1, [sp, #0]
 8008bde:	2188      	movs	r1, #136	; 0x88
 8008be0:	4857      	ldr	r0, [pc, #348]	; (8008d40 <httpd_cgi_handler+0x1ec>)
 8008be2:	f004 fc4b 	bl	800d47c <HAL_I2C_Master_Transmit>
 8008be6:	b960      	cbnz	r0, 8008c02 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008be8:	3401      	adds	r4, #1
 8008bea:	42a5      	cmp	r5, r4
 8008bec:	d1cc      	bne.n	8008b88 <httpd_cgi_handler+0x34>
}
 8008bee:	b005      	add	sp, #20
 8008bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	fa01 f600 	lsl.w	r6, r1, r0
 8008bfa:	7819      	ldrb	r1, [r3, #0]
 8008bfc:	ea21 0106 	bic.w	r1, r1, r6
 8008c00:	e7df      	b.n	8008bc2 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8008c02:	4850      	ldr	r0, [pc, #320]	; (8008d44 <httpd_cgi_handler+0x1f0>)
 8008c04:	f01d fd9e 	bl	8026744 <iprintf>
 8008c08:	e7ee      	b.n	8008be8 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	3c01      	subs	r4, #1
 8008c0e:	484e      	ldr	r0, [pc, #312]	; (8008d48 <httpd_cgi_handler+0x1f4>)
 8008c10:	440c      	add	r4, r1
 8008c12:	4623      	mov	r3, r4
 8008c14:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c18:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c1a:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c1c:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c20:	bf18      	it	ne
 8008c22:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c24:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c26:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c28:	dcf3      	bgt.n	8008c12 <httpd_cgi_handler+0xbe>
}
 8008c2a:	b005      	add	sp, #20
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	4e46      	ldr	r6, [pc, #280]	; (8008d4c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c38:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c3a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008c3c:	2b30      	cmp	r3, #48	; 0x30
 8008c3e:	bf0c      	ite	eq
 8008c40:	f020 0001 	biceq.w	r0, r0, #1
 8008c44:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8008c48:	f7fd fe92 	bl	8006970 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c4c:	42a5      	cmp	r5, r4
 8008c4e:	dcf0      	bgt.n	8008c32 <httpd_cgi_handler+0xde>
}
 8008c50:	b005      	add	sp, #20
 8008c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c56:	4e3d      	ldr	r6, [pc, #244]	; (8008d4c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c5e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c60:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	bf0c      	ite	eq
 8008c66:	f020 0002 	biceq.w	r0, r0, #2
 8008c6a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8008c6e:	f7fd fe7f 	bl	8006970 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c72:	42a5      	cmp	r5, r4
 8008c74:	dcf0      	bgt.n	8008c58 <httpd_cgi_handler+0x104>
}
 8008c76:	b005      	add	sp, #20
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4e33      	ldr	r6, [pc, #204]	; (8008d4c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c84:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c86:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008c88:	2b30      	cmp	r3, #48	; 0x30
 8008c8a:	bf0c      	ite	eq
 8008c8c:	f020 0004 	biceq.w	r0, r0, #4
 8008c90:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8008c94:	f7fd fe6c 	bl	8006970 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c98:	42a5      	cmp	r5, r4
 8008c9a:	dcf0      	bgt.n	8008c7e <httpd_cgi_handler+0x12a>
}
 8008c9c:	b005      	add	sp, #20
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008ca4:	4e2a      	ldr	r6, [pc, #168]	; (8008d50 <httpd_cgi_handler+0x1fc>)
 8008ca6:	e004      	b.n	8008cb2 <httpd_cgi_handler+0x15e>
 8008ca8:	f004 f8e2 	bl	800ce70 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cac:	42a5      	cmp	r5, r4
 8008cae:	dd9e      	ble.n	8008bee <httpd_cgi_handler+0x9a>
 8008cb0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8008cb2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008cba:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8008cbc:	4423      	add	r3, r4
 8008cbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cc2:	2b31      	cmp	r3, #49	; 0x31
 8008cc4:	d1f0      	bne.n	8008ca8 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f004 f8d2 	bl	800ce70 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	dcef      	bgt.n	8008cb0 <httpd_cgi_handler+0x15c>
 8008cd0:	e78d      	b.n	8008bee <httpd_cgi_handler+0x9a>
 8008cd2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008cd4:	4e1f      	ldr	r6, [pc, #124]	; (8008d54 <httpd_cgi_handler+0x200>)
 8008cd6:	e004      	b.n	8008ce2 <httpd_cgi_handler+0x18e>
 8008cd8:	f004 f8ca 	bl	800ce70 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cdc:	42ac      	cmp	r4, r5
 8008cde:	da86      	bge.n	8008bee <httpd_cgi_handler+0x9a>
 8008ce0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8008ce2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008cea:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8008cec:	4423      	add	r3, r4
 8008cee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cf2:	2b30      	cmp	r3, #48	; 0x30
 8008cf4:	d1f0      	bne.n	8008cd8 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f004 f8ba 	bl	800ce70 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cfc:	42a5      	cmp	r5, r4
 8008cfe:	dcef      	bgt.n	8008ce0 <httpd_cgi_handler+0x18c>
 8008d00:	e775      	b.n	8008bee <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8008d02:	4815      	ldr	r0, [pc, #84]	; (8008d58 <httpd_cgi_handler+0x204>)
 8008d04:	f01d fdba 	bl	802687c <puts>
			osDelay(500);
 8008d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d0c:	f00d fc96 	bl	801663c <osDelay>
 8008d10:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d14:	4911      	ldr	r1, [pc, #68]	; (8008d5c <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d16:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d18:	68ca      	ldr	r2, [r1, #12]
 8008d1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60cb      	str	r3, [r1, #12]
 8008d22:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008d26:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008d28:	e7fd      	b.n	8008d26 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8008d2a:	f8d9 1000 	ldr.w	r1, [r9]
 8008d2e:	480d      	ldr	r0, [pc, #52]	; (8008d64 <httpd_cgi_handler+0x210>)
 8008d30:	f01d fd08 	bl	8026744 <iprintf>
			break;
 8008d34:	e758      	b.n	8008be8 <httpd_cgi_handler+0x94>
 8008d36:	bf00      	nop
 8008d38:	0802ddfc 	.word	0x0802ddfc
 8008d3c:	200002b0 	.word	0x200002b0
 8008d40:	200025a8 	.word	0x200025a8
 8008d44:	0802d744 	.word	0x0802d744
 8008d48:	2000004e 	.word	0x2000004e
 8008d4c:	20003430 	.word	0x20003430
 8008d50:	40021000 	.word	0x40021000
 8008d54:	40020c00 	.word	0x40020c00
 8008d58:	0802de28 	.word	0x0802de28
 8008d5c:	e000ed00 	.word	0xe000ed00
 8008d60:	05fa0004 	.word	0x05fa0004
 8008d64:	0802de60 	.word	0x0802de60
 8008d68:	2000342c 	.word	0x2000342c
 8008d6c:	0802de44 	.word	0x0802de44

08008d70 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8008d70:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8008d72:	4802      	ldr	r0, [pc, #8]	; (8008d7c <httpd_post_receive_data+0xc>)
 8008d74:	f01d fd82 	bl	802687c <puts>
}
 8008d78:	2000      	movs	r0, #0
 8008d7a:	bd08      	pop	{r3, pc}
 8008d7c:	0802de80 	.word	0x0802de80

08008d80 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8008d80:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8008d82:	4802      	ldr	r0, [pc, #8]	; (8008d8c <httpd_post_begin+0xc>)
 8008d84:	f01d fd7a 	bl	802687c <puts>
}
 8008d88:	2000      	movs	r0, #0
 8008d8a:	bd08      	pop	{r3, pc}
 8008d8c:	0802de9c 	.word	0x0802de9c

08008d90 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <httpd_post_finished+0x8>)
 8008d92:	f01d bd73 	b.w	802687c <puts>
 8008d96:	bf00      	nop
 8008d98:	0802deb0 	.word	0x0802deb0

08008d9c <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008d9c:	4803      	ldr	r0, [pc, #12]	; (8008dac <init_httpd_ssi+0x10>)
 8008d9e:	2215      	movs	r2, #21
 8008da0:	4903      	ldr	r1, [pc, #12]	; (8008db0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8008da2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008da4:	f011 fb90 	bl	801a4c8 <http_set_ssi_handler>
}
 8008da8:	bd08      	pop	{r3, pc}
 8008daa:	bf00      	nop
 8008dac:	080089b9 	.word	0x080089b9
 8008db0:	200002bc 	.word	0x200002bc

08008db4 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8008db4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8008db6:	7804      	ldrb	r4, [r0, #0]
 8008db8:	b194      	cbz	r4, 8008de0 <parsep2+0x2c>
 8008dba:	2c7d      	cmp	r4, #125	; 0x7d
 8008dbc:	d010      	beq.n	8008de0 <parsep2+0x2c>
	j = 0;
 8008dbe:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8008dc2:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8008dc4:	f811 600e 	ldrb.w	r6, [r1, lr]
 8008dc8:	f105 0c01 	add.w	ip, r5, #1
 8008dcc:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8008dce:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8008dd2:	d008      	beq.n	8008de6 <parsep2+0x32>
 8008dd4:	4665      	mov	r5, ip
			j = 0;
 8008dd6:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8008dda:	b10c      	cbz	r4, 8008de0 <parsep2+0x2c>
 8008ddc:	2c7d      	cmp	r4, #125	; 0x7d
 8008dde:	d1f1      	bne.n	8008dc4 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8008de6:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8008de8:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8008dec:	d001      	beq.n	8008df2 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8008dee:	4665      	mov	r5, ip
 8008df0:	e7f3      	b.n	8008dda <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8008df2:	2a01      	cmp	r2, #1
				i++;
 8008df4:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8008df8:	d005      	beq.n	8008e06 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8008dfa:	2a02      	cmp	r2, #2
 8008dfc:	d01c      	beq.n	8008e38 <parsep2+0x84>
				} else if (type == 3) { // uint32_t hex string
 8008dfe:	2a03      	cmp	r2, #3
 8008e00:	d024      	beq.n	8008e4c <parsep2+0x98>
	while ((buf[i]) && (buf[i] != '}')) {
 8008e02:	5d44      	ldrb	r4, [r0, r5]
 8008e04:	e7e9      	b.n	8008dda <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008e06:	5d44      	ldrb	r4, [r0, r5]
 8008e08:	1941      	adds	r1, r0, r5
 8008e0a:	b37c      	cbz	r4, 8008e6c <parsep2+0xb8>
 8008e0c:	1e58      	subs	r0, r3, #1
					j = 0;
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4e18      	ldr	r6, [pc, #96]	; (8008e74 <parsep2+0xc0>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008e12:	5d35      	ldrb	r5, [r6, r4]
 8008e14:	076d      	lsls	r5, r5, #29
 8008e16:	d103      	bne.n	8008e20 <parsep2+0x6c>
 8008e18:	2c5f      	cmp	r4, #95	; 0x5f
 8008e1a:	bf18      	it	ne
 8008e1c:	2c2e      	cmpne	r4, #46	; 0x2e
 8008e1e:	d11f      	bne.n	8008e60 <parsep2+0xac>
						pch[j++] = buf[i++];
 8008e20:	f800 4f01 	strb.w	r4, [r0, #1]!
 8008e24:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008e26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	d1f1      	bne.n	8008e12 <parsep2+0x5e>
					pch[j] = 0;
 8008e2e:	4413      	add	r3, r2
 8008e30:	4620      	mov	r0, r4
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
}
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8008e38:	461a      	mov	r2, r3
 8008e3a:	490f      	ldr	r1, [pc, #60]	; (8008e78 <parsep2+0xc4>)
 8008e3c:	4428      	add	r0, r5
 8008e3e:	f01d fe8b 	bl	8026b58 <siscanf>
 8008e42:	3801      	subs	r0, #1
 8008e44:	bf18      	it	ne
 8008e46:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	490b      	ldr	r1, [pc, #44]	; (8008e7c <parsep2+0xc8>)
 8008e50:	4428      	add	r0, r5
 8008e52:	f01d fe81 	bl	8026b58 <siscanf>
 8008e56:	3801      	subs	r0, #1
 8008e58:	bf18      	it	ne
 8008e5a:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8008e60:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8008e64:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8008e66:	0940      	lsrs	r0, r0, #5
 8008e68:	4240      	negs	r0, r0
 8008e6a:	e7e2      	b.n	8008e32 <parsep2+0x7e>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	e7df      	b.n	8008e32 <parsep2+0x7e>
 8008e72:	bf00      	nop
 8008e74:	08047579 	.word	0x08047579
 8008e78:	0802dec8 	.word	0x0802dec8
 8008e7c:	0802decc 	.word	0x0802decc

08008e80 <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile char p2[256];
	volatile char s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8008e84:	4ea1      	ldr	r6, [pc, #644]	; (800910c <returnpage+0x28c>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e86:	b0d2      	sub	sp, #328	; 0x148
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8008e88:	2500      	movs	r5, #0
	if (expectedapage) {
 8008e8a:	6833      	ldr	r3, [r6, #0]
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e8c:	f8ad 100e 	strh.w	r1, [sp, #14]
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8008e90:	950c      	str	r5, [sp, #48]	; 0x30
 8008e92:	950d      	str	r5, [sp, #52]	; 0x34
		if (errorm == 0) {
 8008e94:	b103      	cbz	r3, 8008e98 <returnpage+0x18>
 8008e96:	b122      	cbz	r2, 8008ea2 <returnpage+0x22>
					rebootme(0);
				}
			}
		}
	}
	expectedapage = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6033      	str	r3, [r6, #0]
}
 8008e9c:	b052      	add	sp, #328	; 0x148
 8008e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008ea2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8008ea6:	4604      	mov	r4, r0
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ea8:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8008eac:	af09      	add	r7, sp, #36	; 0x24
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008eae:	4602      	mov	r2, r0
 8008eb0:	b289      	uxth	r1, r1
 8008eb2:	4897      	ldr	r0, [pc, #604]	; (8009110 <returnpage+0x290>)
 8008eb4:	f01d fc46 	bl	8026744 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008eb8:	4b96      	ldr	r3, [pc, #600]	; (8009114 <returnpage+0x294>)
 8008eba:	4620      	mov	r0, r4
 8008ebc:	aa04      	add	r2, sp, #16
 8008ebe:	4996      	ldr	r1, [pc, #600]	; (8009118 <returnpage+0x298>)
			s1[0] = '\0';
 8008ec0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ec4:	e9cd 7800 	strd	r7, r8, [sp]
 8008ec8:	f01d fe46 	bl	8026b58 <siscanf>
 8008ecc:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8008ece:	9b05      	ldr	r3, [sp, #20]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f000 80e0 	beq.w	8009096 <returnpage+0x216>
				switch (nconv) {
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	f200 8103 	bhi.w	80090e6 <returnpage+0x266>
 8008ee0:	e8df f003 	tbb	[pc, r3]
 8008ee4:	58025255 	.word	0x58025255
 8008ee8:	f10d 0818 	add.w	r8, sp, #24
					if (p1 == 1) {		// reboot
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	f000 80ee 	beq.w	80090d0 <returnpage+0x250>
					if (p1 == 2) {		// freeze the UDP streaming
 8008ef4:	683b      	ldr	r3, [r7, #0]
						globalfreeze |= 1;
 8008ef6:	4a89      	ldr	r2, [pc, #548]	; (800911c <returnpage+0x29c>)
					if (p1 == 2) {		// freeze the UDP streaming
 8008ef8:	2b02      	cmp	r3, #2
						globalfreeze |= 1;
 8008efa:	6813      	ldr	r3, [r2, #0]
					if (p1 == 2) {		// freeze the UDP streaming
 8008efc:	f000 80e1 	beq.w	80090c2 <returnpage+0x242>
						globalfreeze &= ~1;
 8008f00:	f023 0301 	bic.w	r3, r3, #1
 8008f04:	6013      	str	r3, [r2, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8008f06:	4883      	ldr	r0, [pc, #524]	; (8009114 <returnpage+0x294>)
 8008f08:	f7f7 f9a4 	bl	8000254 <strlen>
 8008f0c:	2806      	cmp	r0, #6
 8008f0e:	f240 80ca 	bls.w	80090a6 <returnpage+0x226>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8008f12:	4980      	ldr	r1, [pc, #512]	; (8009114 <returnpage+0x294>)
 8008f14:	4882      	ldr	r0, [pc, #520]	; (8009120 <returnpage+0x2a0>)
 8008f16:	f01d fc15 	bl	8026744 <iprintf>
					if (statuspkt.uid != sn) {
 8008f1a:	4c82      	ldr	r4, [pc, #520]	; (8009124 <returnpage+0x2a4>)
 8008f1c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008f20:	9a04      	ldr	r2, [sp, #16]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d009      	beq.n	8008f3c <returnpage+0xbc>
						statuspkt.uid = sn;
 8008f28:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008f2a:	487f      	ldr	r0, [pc, #508]	; (8009128 <returnpage+0x2a8>)
						statuspkt.uid = sn;
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008f32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f36:	b289      	uxth	r1, r1
 8008f38:	f01d fc04 	bl	8026744 <iprintf>
			if (!res) {		// build changed?
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a0 	beq.w	8009086 <returnpage+0x206>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO) && (http_downloading == NOT_LOADING)) {// the stm firmware version advertised is different to this one running now
 8008f46:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008f4a:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d0a1      	beq.n	8008e98 <returnpage+0x18>
 8008f54:	4a75      	ldr	r2, [pc, #468]	; (800912c <returnpage+0x2ac>)
 8008f56:	f242 7334 	movw	r3, #10036	; 0x2734
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d09b      	beq.n	8008e98 <returnpage+0x18>
 8008f60:	4b73      	ldr	r3, [pc, #460]	; (8009130 <returnpage+0x2b0>)
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d197      	bne.n	8008e98 <returnpage+0x18>
				if (lptask_init_done == 0) {		// if running, reboot before trying to load
 8008f68:	4b72      	ldr	r3, [pc, #456]	; (8009134 <returnpage+0x2b4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 80a1 	bne.w	80090b4 <returnpage+0x234>
					osDelay(1000);
 8008f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f76:	f00d fb61 	bl	801663c <osDelay>
					httploader(fwfilename, loaderhost, crc1, crc2);
 8008f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f7c:	496e      	ldr	r1, [pc, #440]	; (8009138 <returnpage+0x2b8>)
 8008f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f80:	486e      	ldr	r0, [pc, #440]	; (800913c <returnpage+0x2bc>)
 8008f82:	f7f8 ff35 	bl	8001df0 <httploader>
 8008f86:	e787      	b.n	8008e98 <returnpage+0x18>
 8008f88:	f10d 0818 	add.w	r8, sp, #24
 8008f8c:	e7bb      	b.n	8008f06 <returnpage+0x86>
 8008f8e:	f10d 0818 	add.w	r8, sp, #24
 8008f92:	e7c2      	b.n	8008f1a <returnpage+0x9a>
					if (p2[0] == '{') {		// its the start of enclosed params
 8008f94:	f898 3000 	ldrb.w	r3, [r8]
						res = 0;
 8008f98:	f10d 0818 	add.w	r8, sp, #24
					if (p2[0] == '{') {		// its the start of enclosed params
 8008f9c:	2b7b      	cmp	r3, #123	; 0x7b
 8008f9e:	d1a5      	bne.n	8008eec <returnpage+0x6c>
						res = 0;
 8008fa0:	2300      	movs	r3, #0
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4966      	ldr	r1, [pc, #408]	; (8009140 <returnpage+0x2c0>)
 8008fa6:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res = 0;
 8008faa:	f8c8 3000 	str.w	r3, [r8]
						res2 = 0;
 8008fae:	9307      	str	r3, [sp, #28]
						res3 = 0;
 8008fb0:	9308      	str	r3, [sp, #32]
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fb2:	4b62      	ldr	r3, [pc, #392]	; (800913c <returnpage+0x2bc>)
 8008fb4:	f7ff fefe 	bl	8008db4 <parsep2>
 8008fb8:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	4961      	ldr	r1, [pc, #388]	; (8009144 <returnpage+0x2c4>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fc0:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fc2:	4b5a      	ldr	r3, [pc, #360]	; (800912c <returnpage+0x2ac>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fc4:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fc8:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fcc:	f7ff fef2 	bl	8008db4 <parsep2>
 8008fd0:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	495c      	ldr	r1, [pc, #368]	; (8009148 <returnpage+0x2c8>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fd8:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008fda:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fdc:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008fe0:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fe4:	f7ff fee6 	bl	8008db4 <parsep2>
 8008fe8:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008fec:	2203      	movs	r2, #3
 8008fee:	4957      	ldr	r1, [pc, #348]	; (800914c <returnpage+0x2cc>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008ff0:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008ff2:	ab0b      	add	r3, sp, #44	; 0x2c
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008ff4:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008ff8:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008ffc:	f7ff feda 	bl	8008db4 <parsep2>
 8009000:	f8d8 3000 	ldr.w	r3, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009004:	2201      	movs	r2, #1
 8009006:	4952      	ldr	r1, [pc, #328]	; (8009150 <returnpage+0x2d0>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8009008:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 800900a:	4b4b      	ldr	r3, [pc, #300]	; (8009138 <returnpage+0x2b8>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 800900c:	f8c8 0000 	str.w	r0, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009010:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009014:	f7ff fece 	bl	8008db4 <parsep2>
 8009018:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800901a:	ab0d      	add	r3, sp, #52	; 0x34
 800901c:	494d      	ldr	r1, [pc, #308]	; (8009154 <returnpage+0x2d4>)
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 800901e:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009020:	2203      	movs	r2, #3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009022:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009024:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009028:	f7ff fec4 	bl	8008db4 <parsep2>
 800902c:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 800902e:	ab0e      	add	r3, sp, #56	; 0x38
 8009030:	4949      	ldr	r1, [pc, #292]	; (8009158 <returnpage+0x2d8>)
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009032:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009034:	2201      	movs	r2, #1
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009036:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009038:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 800903c:	f7ff feba 	bl	8008db4 <parsep2>
 8009040:	9b07      	ldr	r3, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009042:	2201      	movs	r2, #1
 8009044:	4945      	ldr	r1, [pc, #276]	; (800915c <returnpage+0x2dc>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009046:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009048:	4b45      	ldr	r3, [pc, #276]	; (8009160 <returnpage+0x2e0>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 800904a:	9007      	str	r0, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 800904c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009050:	f7ff feb0 	bl	8008db4 <parsep2>
 8009054:	9b08      	ldr	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8009056:	2202      	movs	r2, #2
 8009058:	4942      	ldr	r1, [pc, #264]	; (8009164 <returnpage+0x2e4>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 800905a:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 800905c:	4b42      	ldr	r3, [pc, #264]	; (8009168 <returnpage+0x2e8>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 800905e:	9008      	str	r0, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8009060:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009064:	f7ff fea6 	bl	8008db4 <parsep2>
 8009068:	9a08      	ldr	r2, [sp, #32]
 800906a:	4603      	mov	r3, r0
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 800906c:	493f      	ldr	r1, [pc, #252]	; (800916c <returnpage+0x2ec>)
 800906e:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8009072:	4313      	orrs	r3, r2
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009074:	2202      	movs	r2, #2
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8009076:	9308      	str	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009078:	4b3d      	ldr	r3, [pc, #244]	; (8009170 <returnpage+0x2f0>)
 800907a:	f7ff fe9b 	bl	8008db4 <parsep2>
 800907e:	9b08      	ldr	r3, [sp, #32]
 8009080:	4318      	orrs	r0, r3
 8009082:	9008      	str	r0, [sp, #32]
 8009084:	e732      	b.n	8008eec <returnpage+0x6c>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8009086:	4b29      	ldr	r3, [pc, #164]	; (800912c <returnpage+0x2ac>)
 8009088:	f242 7134 	movw	r1, #10036	; 0x2734
 800908c:	4839      	ldr	r0, [pc, #228]	; (8009174 <returnpage+0x2f4>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	f01d fb58 	bl	8026744 <iprintf>
 8009094:	e757      	b.n	8008f46 <returnpage+0xc6>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8009096:	4629      	mov	r1, r5
 8009098:	4837      	ldr	r0, [pc, #220]	; (8009178 <returnpage+0x2f8>)
 800909a:	f10d 0818 	add.w	r8, sp, #24
 800909e:	4c21      	ldr	r4, [pc, #132]	; (8009124 <returnpage+0x2a4>)
 80090a0:	f01d fb50 	bl	8026744 <iprintf>
 80090a4:	e74a      	b.n	8008f3c <returnpage+0xbc>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 80090a6:	4d35      	ldr	r5, [pc, #212]	; (800917c <returnpage+0x2fc>)
 80090a8:	4c1a      	ldr	r4, [pc, #104]	; (8009114 <returnpage+0x294>)
 80090aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	e72e      	b.n	8008f12 <returnpage+0x92>
					printf("Rebooting before loading new firmware, wait...\n");
 80090b4:	4832      	ldr	r0, [pc, #200]	; (8009180 <returnpage+0x300>)
 80090b6:	f01d fbe1 	bl	802687c <puts>
					rebootme(0);
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7fa fe04 	bl	8003cc8 <rebootme>
 80090c0:	e6ea      	b.n	8008e98 <returnpage+0x18>
						globalfreeze |= 1;
 80090c2:	f043 0301 	orr.w	r3, r3, #1
						printf("Server -> commands a streaming freeze\n");
 80090c6:	482f      	ldr	r0, [pc, #188]	; (8009184 <returnpage+0x304>)
						globalfreeze |= 1;
 80090c8:	6013      	str	r3, [r2, #0]
						printf("Server -> commands a streaming freeze\n");
 80090ca:	f01d fbd7 	bl	802687c <puts>
 80090ce:	e71a      	b.n	8008f06 <returnpage+0x86>
						printf("Server -> commands a reboot...\n");
 80090d0:	482d      	ldr	r0, [pc, #180]	; (8009188 <returnpage+0x308>)
 80090d2:	f01d fbd3 	bl	802687c <puts>
						osDelay(500);
 80090d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090da:	f00d faaf 	bl	801663c <osDelay>
						rebootme(6);
 80090de:	2006      	movs	r0, #6
 80090e0:	f7fa fdf2 	bl	8003cc8 <rebootme>
 80090e4:	e706      	b.n	8008ef4 <returnpage+0x74>
					printf("Wrong number of params from Server -> %d\n", nconv);
 80090e6:	9905      	ldr	r1, [sp, #20]
 80090e8:	f10d 0818 	add.w	r8, sp, #24
 80090ec:	4827      	ldr	r0, [pc, #156]	; (800918c <returnpage+0x30c>)
 80090ee:	f01d fb29 	bl	8026744 <iprintf>
					down_total = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	4a26      	ldr	r2, [pc, #152]	; (8009190 <returnpage+0x310>)
					nxt_abort = 1;
 80090f6:	4927      	ldr	r1, [pc, #156]	; (8009194 <returnpage+0x314>)
					down_total = 0;
 80090f8:	6013      	str	r3, [r2, #0]
					nxt_abort = 1;
 80090fa:	2201      	movs	r2, #1
 80090fc:	4c09      	ldr	r4, [pc, #36]	; (8009124 <returnpage+0x2a4>)
 80090fe:	600a      	str	r2, [r1, #0]
					flash_abort = 1;
 8009100:	4925      	ldr	r1, [pc, #148]	; (8009198 <returnpage+0x318>)
 8009102:	600a      	str	r2, [r1, #0]
					http_downloading = NOT_LOADING;
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <returnpage+0x2b0>)
 8009106:	6013      	str	r3, [r2, #0]
					break;
 8009108:	e718      	b.n	8008f3c <returnpage+0xbc>
 800910a:	bf00      	nop
 800910c:	200034c8 	.word	0x200034c8
 8009110:	0802ded0 	.word	0x0802ded0
 8009114:	20003530 	.word	0x20003530
 8009118:	0802dee8 	.word	0x0802dee8
 800911c:	200034a4 	.word	0x200034a4
 8009120:	0802df70 	.word	0x0802df70
 8009124:	2000303c 	.word	0x2000303c
 8009128:	0802df90 	.word	0x0802df90
 800912c:	20002dfc 	.word	0x20002dfc
 8009130:	200018dc 	.word	0x200018dc
 8009134:	20002de0 	.word	0x20002de0
 8009138:	2000001c 	.word	0x2000001c
 800913c:	20001a50 	.word	0x20001a50
 8009140:	0802def8 	.word	0x0802def8
 8009144:	0802defc 	.word	0x0802defc
 8009148:	0802df00 	.word	0x0802df00
 800914c:	0802df08 	.word	0x0802df08
 8009150:	0802df10 	.word	0x0802df10
 8009154:	0802df14 	.word	0x0802df14
 8009158:	0802df18 	.word	0x0802df18
 800915c:	0802df1c 	.word	0x0802df1c
 8009160:	20001a94 	.word	0x20001a94
 8009164:	0802df20 	.word	0x0802df20
 8009168:	20002e08 	.word	0x20002e08
 800916c:	0802df24 	.word	0x0802df24
 8009170:	20001ab4 	.word	0x20001ab4
 8009174:	0802e004 	.word	0x0802e004
 8009178:	0802dfdc 	.word	0x0802dfdc
 800917c:	0802b6f4 	.word	0x0802b6f4
 8009180:	0802e038 	.word	0x0802e038
 8009184:	0802df48 	.word	0x0802df48
 8009188:	0802df28 	.word	0x0802df28
 800918c:	0802dfb0 	.word	0x0802dfb0
 8009190:	20001690 	.word	0x20001690
 8009194:	20003128 	.word	0x20003128
 8009198:	20000874 	.word	0x20000874

0800919c <initialapisn>:
	int i, j;
	char localip[24];
	char params[48];

	j = 1;
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <initialapisn+0xdc>)
 800919e:	4937      	ldr	r1, [pc, #220]	; (800927c <initialapisn+0xe0>)
 80091a0:	681a      	ldr	r2, [r3, #0]
void initialapisn() {
 80091a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80091a6:	0e13      	lsrs	r3, r2, #24
void initialapisn() {
 80091a8:	b096      	sub	sp, #88	; 0x58
	sprintf(params, "?bld=%d\&ip=%s\&nx=%s", BUILDNO, localip, nex_model);
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);

	strcat(stmuid, params);

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80091aa:	4d35      	ldr	r5, [pc, #212]	; (8009280 <initialapisn+0xe4>)
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80091b2:	a804      	add	r0, sp, #16
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	f01d fcac 	bl	8026b18 <siprintf>
	sprintf(params, "?bld=%d\&ip=%s\&nx=%s", BUILDNO, localip, nex_model);
 80091c0:	4830      	ldr	r0, [pc, #192]	; (8009284 <initialapisn+0xe8>)
 80091c2:	ab04      	add	r3, sp, #16
 80091c4:	f242 7234 	movw	r2, #10036	; 0x2734
 80091c8:	492f      	ldr	r1, [pc, #188]	; (8009288 <initialapisn+0xec>)
 80091ca:	9000      	str	r0, [sp, #0]
 80091cc:	a80a      	add	r0, sp, #40	; 0x28
 80091ce:	f01d fca3 	bl	8026b18 <siprintf>
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80091d2:	492e      	ldr	r1, [pc, #184]	; (800928c <initialapisn+0xf0>)
 80091d4:	482e      	ldr	r0, [pc, #184]	; (8009290 <initialapisn+0xf4>)
 80091d6:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 80091da:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 80091de:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
 80091e2:	9100      	str	r1, [sp, #0]
 80091e4:	492b      	ldr	r1, [pc, #172]	; (8009294 <initialapisn+0xf8>)
 80091e6:	f01d fc97 	bl	8026b18 <siprintf>
	strcat(stmuid, params);
 80091ea:	a90a      	add	r1, sp, #40	; 0x28
 80091ec:	4828      	ldr	r0, [pc, #160]	; (8009290 <initialapisn+0xf4>)
 80091ee:	f01d fd2d 	bl	8026c4c <strcat>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80091f2:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 80091f6:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d130      	bne.n	8009262 <initialapisn+0xc6>
	j = 1;
 8009200:	2701      	movs	r7, #1
	{
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 8009202:	f8df a098 	ldr.w	sl, [pc, #152]	; 800929c <initialapisn+0x100>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009206:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80092a0 <initialapisn+0x104>
 800920a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80092a4 <initialapisn+0x108>
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 800920e:	463a      	mov	r2, r7
 8009210:	f641 7192 	movw	r1, #8082	; 0x1f92
 8009214:	4650      	mov	r0, sl
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8009216:	f241 3488 	movw	r4, #5000	; 0x1388
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 800921a:	f01d fa93 	bl	8026744 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 800921e:	4641      	mov	r1, r8
 8009220:	4648      	mov	r0, r9
		getpage(stmuid);		// get sn and targ
		for (i = 0; i < 5000; i++) {
			if (statuspkt.uid != 0xfeed)
 8009222:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009226:	f01d fa8d 	bl	8026744 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 800922a:	2300      	movs	r3, #0
 800922c:	4918      	ldr	r1, [pc, #96]	; (8009290 <initialapisn+0xf4>)
 800922e:	4640      	mov	r0, r8
 8009230:	461a      	mov	r2, r3
 8009232:	f7f8 fd6f 	bl	8001d14 <hc_open>
 8009236:	9003      	str	r0, [sp, #12]
		for (i = 0; i < 5000; i++) {
 8009238:	e003      	b.n	8009242 <initialapisn+0xa6>
				break;
			osDelay(1);
 800923a:	f00d f9ff 	bl	801663c <osDelay>
		for (i = 0; i < 5000; i++) {
 800923e:	3c01      	subs	r4, #1
 8009240:	d005      	beq.n	800924e <initialapisn+0xb2>
			if (statuspkt.uid != 0xfeed)
 8009242:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 8009246:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8009248:	b29b      	uxth	r3, r3
 800924a:	42b3      	cmp	r3, r6
 800924c:	d0f5      	beq.n	800923a <initialapisn+0x9e>
		}
		j++;
 800924e:	3701      	adds	r7, #1
		if (j > 5) {
 8009250:	2f05      	cmp	r7, #5
 8009252:	dc09      	bgt.n	8009268 <initialapisn+0xcc>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8009254:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009258:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 800925c:	b29b      	uxth	r3, r3
 800925e:	4293      	cmp	r3, r2
 8009260:	d0d5      	beq.n	800920e <initialapisn+0x72>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 8009262:	b016      	add	sp, #88	; 0x58
 8009264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8009268:	480b      	ldr	r0, [pc, #44]	; (8009298 <initialapisn+0xfc>)
 800926a:	f01d fb07 	bl	802687c <puts>
			rebootme(8);
 800926e:	2008      	movs	r0, #8
 8009270:	f7fa fd2a 	bl	8003cc8 <rebootme>
 8009274:	e7ee      	b.n	8009254 <initialapisn+0xb8>
 8009276:	bf00      	nop
 8009278:	20002df4 	.word	0x20002df4
 800927c:	0802e080 	.word	0x0802e080
 8009280:	2000303c 	.word	0x2000303c
 8009284:	20001b50 	.word	0x20001b50
 8009288:	0802e08c 	.word	0x0802e08c
 800928c:	1ff0f000 	.word	0x1ff0f000
 8009290:	200034d0 	.word	0x200034d0
 8009294:	0802e0a0 	.word	0x0802e0a0
 8009298:	0802e0e8 	.word	0x0802e0e8
 800929c:	0802e0b8 	.word	0x0802e0b8
 80092a0:	0802b6f4 	.word	0x0802b6f4
 80092a4:	0802e068 	.word	0x0802e068

080092a8 <requestapisn>:

void requestapisn() {
 80092a8:	b510      	push	{r4, lr}
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80092aa:	4c0a      	ldr	r4, [pc, #40]	; (80092d4 <requestapisn+0x2c>)
void requestapisn() {
 80092ac:	b082      	sub	sp, #8
	printf("updating params from server on port %d\n", DOWNLOAD_PORT);
 80092ae:	f641 7192 	movw	r1, #8082	; 0x1f92
 80092b2:	4809      	ldr	r0, [pc, #36]	; (80092d8 <requestapisn+0x30>)
 80092b4:	f01d fa46 	bl	8026744 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80092b8:	4621      	mov	r1, r4
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <requestapisn+0x34>)
 80092bc:	f01d fa42 	bl	8026744 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80092c0:	2300      	movs	r3, #0
 80092c2:	4907      	ldr	r1, [pc, #28]	; (80092e0 <requestapisn+0x38>)
 80092c4:	4620      	mov	r0, r4
 80092c6:	461a      	mov	r2, r3
 80092c8:	f7f8 fd24 	bl	8001d14 <hc_open>
 80092cc:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 80092ce:	b002      	add	sp, #8
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	0802b6f4 	.word	0x0802b6f4
 80092d8:	0802e110 	.word	0x0802e110
 80092dc:	0802e068 	.word	0x0802e068
 80092e0:	200034d0 	.word	0x200034d0

080092e4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80092e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80092e6:	e003      	b.n	80092f0 <LoopCopyDataInit>

080092e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80092e8:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80092ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80092ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80092ee:	3104      	adds	r1, #4

080092f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80092f0:	480a      	ldr	r0, [pc, #40]	; (800931c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80092f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80092f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80092f8:	d3f6      	bcc.n	80092e8 <CopyDataInit>
  ldr  r2, =_sbss
 80092fa:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80092fc:	e002      	b.n	8009304 <LoopFillZerobss>

080092fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80092fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009300:	f842 3b04 	str.w	r3, [r2], #4

08009304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009304:	4b08      	ldr	r3, [pc, #32]	; (8009328 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8009306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009308:	d3f9      	bcc.n	80092fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800930a:	f7ff f8cf 	bl	80084ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800930e:	f01c f8f7 	bl	8025500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009312:	f7fb fad3 	bl	80048bc <main>
  bx  lr    
 8009316:	4770      	bx	lr
  ldr  r3, =_sidata
 8009318:	08047e6c 	.word	0x08047e6c
  ldr  r0, =_sdata
 800931c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009320:	200006f4 	.word	0x200006f4
  ldr  r2, =_sbss
 8009324:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 8009328:	20030164 	.word	0x20030164

0800932c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800932c:	e7fe      	b.n	800932c <CAN1_RX0_IRQHandler>
 800932e:	Address 0x000000000800932e is out of bounds.


08009330 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009330:	4a07      	ldr	r2, [pc, #28]	; (8009350 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009332:	2003      	movs	r0, #3
{
 8009334:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800933c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800933e:	f000 fc4f 	bl	8009be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009342:	2000      	movs	r0, #0
 8009344:	f7fe ff7e 	bl	8008244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009348:	f7fd fffc 	bl	8007344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800934c:	2000      	movs	r0, #0
 800934e:	bd08      	pop	{r3, pc}
 8009350:	40023c00 	.word	0x40023c00

08009354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009354:	4a03      	ldr	r2, [pc, #12]	; (8009364 <HAL_IncTick+0x10>)
 8009356:	4b04      	ldr	r3, [pc, #16]	; (8009368 <HAL_IncTick+0x14>)
 8009358:	6811      	ldr	r1, [r2, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	440b      	add	r3, r1
 800935e:	6013      	str	r3, [r2, #0]
}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20003570 	.word	0x20003570
 8009368:	20000314 	.word	0x20000314

0800936c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800936c:	4b01      	ldr	r3, [pc, #4]	; (8009374 <HAL_GetTick+0x8>)
 800936e:	6818      	ldr	r0, [r3, #0]
}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20003570 	.word	0x20003570

08009378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800937c:	f7ff fff6 	bl	800936c <HAL_GetTick>
 8009380:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009382:	1c63      	adds	r3, r4, #1
 8009384:	d002      	beq.n	800938c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8009386:	4b04      	ldr	r3, [pc, #16]	; (8009398 <HAL_Delay+0x20>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800938c:	f7ff ffee 	bl	800936c <HAL_GetTick>
 8009390:	1b43      	subs	r3, r0, r5
 8009392:	42a3      	cmp	r3, r4
 8009394:	d3fa      	bcc.n	800938c <HAL_Delay+0x14>
  {
  }
}
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000314 	.word	0x20000314

0800939c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800939c:	2800      	cmp	r0, #0
 800939e:	f000 8144 	beq.w	800962a <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80093a2:	6803      	ldr	r3, [r0, #0]
 80093a4:	49a7      	ldr	r1, [pc, #668]	; (8009644 <HAL_ADC_Init+0x2a8>)
 80093a6:	4aa8      	ldr	r2, [pc, #672]	; (8009648 <HAL_ADC_Init+0x2ac>)
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf18      	it	ne
 80093ac:	4293      	cmpne	r3, r2
{
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80093b2:	d003      	beq.n	80093bc <HAL_ADC_Init+0x20>
 80093b4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d177      	bne.n	80094ac <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80093c2:	d17c      	bne.n	80094be <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80093c4:	68a3      	ldr	r3, [r4, #8]
 80093c6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80093ca:	f040 8082 	bne.w	80094d2 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d84e      	bhi.n	8009472 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80093d4:	69a3      	ldr	r3, [r4, #24]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d845      	bhi.n	8009466 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80093da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80093dc:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80093e0:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 80093e4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80093e8:	bf18      	it	ne
 80093ea:	2900      	cmpne	r1, #0
 80093ec:	bf14      	ite	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	2300      	moveq	r3, #0
 80093f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80093f6:	bf0c      	ite	eq
 80093f8:	2300      	moveq	r3, #0
 80093fa:	f003 0301 	andne.w	r3, r3, #1
 80093fe:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8009402:	bf0c      	ite	eq
 8009404:	2300      	moveq	r3, #0
 8009406:	f003 0301 	andne.w	r3, r3, #1
 800940a:	b123      	cbz	r3, 8009416 <HAL_ADC_Init+0x7a>
 800940c:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8009410:	2a01      	cmp	r2, #1
 8009412:	f200 8111 	bhi.w	8009638 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8009416:	68e3      	ldr	r3, [r4, #12]
 8009418:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800941c:	d165      	bne.n	80094ea <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800941e:	69e3      	ldr	r3, [r4, #28]
 8009420:	3b01      	subs	r3, #1
 8009422:	2b0f      	cmp	r3, #15
 8009424:	d85b      	bhi.n	80094de <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009426:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800942a:	2b01      	cmp	r3, #1
 800942c:	d830      	bhi.n	8009490 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800942e:	6963      	ldr	r3, [r4, #20]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d835      	bhi.n	80094a0 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8009434:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d823      	bhi.n	8009484 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800943c:	4b83      	ldr	r3, [pc, #524]	; (800964c <HAL_ADC_Init+0x2b0>)
 800943e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009440:	429a      	cmp	r2, r3
 8009442:	d004      	beq.n	800944e <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8009444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009446:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800944a:	f040 80e8 	bne.w	800961e <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800944e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009450:	2d00      	cmp	r5, #0
 8009452:	f000 80d4 	beq.w	80095fe <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009458:	06db      	lsls	r3, r3, #27
 800945a:	d54c      	bpl.n	80094f6 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800945c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800945e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8009460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8009464:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009466:	f240 1151 	movw	r1, #337	; 0x151
 800946a:	4879      	ldr	r0, [pc, #484]	; (8009650 <HAL_ADC_Init+0x2b4>)
 800946c:	f7fc fa3a 	bl	80058e4 <assert_failed>
 8009470:	e7b3      	b.n	80093da <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8009472:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8009476:	4876      	ldr	r0, [pc, #472]	; (8009650 <HAL_ADC_Init+0x2b4>)
 8009478:	f7fc fa34 	bl	80058e4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800947c:	69a3      	ldr	r3, [r4, #24]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d9ab      	bls.n	80093da <HAL_ADC_Init+0x3e>
 8009482:	e7f0      	b.n	8009466 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8009484:	f240 1157 	movw	r1, #343	; 0x157
 8009488:	4871      	ldr	r0, [pc, #452]	; (8009650 <HAL_ADC_Init+0x2b4>)
 800948a:	f7fc fa2b 	bl	80058e4 <assert_failed>
 800948e:	e7d5      	b.n	800943c <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009490:	f240 1155 	movw	r1, #341	; 0x155
 8009494:	486e      	ldr	r0, [pc, #440]	; (8009650 <HAL_ADC_Init+0x2b4>)
 8009496:	f7fc fa25 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800949a:	6963      	ldr	r3, [r4, #20]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d9c9      	bls.n	8009434 <HAL_ADC_Init+0x98>
 80094a0:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80094a4:	486a      	ldr	r0, [pc, #424]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094a6:	f7fc fa1d 	bl	80058e4 <assert_failed>
 80094aa:	e7c3      	b.n	8009434 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80094ac:	f240 114d 	movw	r1, #333	; 0x14d
 80094b0:	4867      	ldr	r0, [pc, #412]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094b2:	f7fc fa17 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80094bc:	d082      	beq.n	80093c4 <HAL_ADC_Init+0x28>
 80094be:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80094c2:	4863      	ldr	r0, [pc, #396]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094c4:	f7fc fa0e 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80094c8:	68a3      	ldr	r3, [r4, #8]
 80094ca:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80094ce:	f43f af7e 	beq.w	80093ce <HAL_ADC_Init+0x32>
 80094d2:	f240 114f 	movw	r1, #335	; 0x14f
 80094d6:	485e      	ldr	r0, [pc, #376]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094d8:	f7fc fa04 	bl	80058e4 <assert_failed>
 80094dc:	e777      	b.n	80093ce <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80094de:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80094e2:	485b      	ldr	r0, [pc, #364]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094e4:	f7fc f9fe 	bl	80058e4 <assert_failed>
 80094e8:	e79d      	b.n	8009426 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80094ea:	f240 1153 	movw	r1, #339	; 0x153
 80094ee:	4858      	ldr	r0, [pc, #352]	; (8009650 <HAL_ADC_Init+0x2b4>)
 80094f0:	f7fc f9f8 	bl	80058e4 <assert_failed>
 80094f4:	e793      	b.n	800941e <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 80094f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094f8:	4b56      	ldr	r3, [pc, #344]	; (8009654 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80094fa:	4a57      	ldr	r2, [pc, #348]	; (8009658 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 80094fc:	400b      	ands	r3, r1
 80094fe:	f043 0302 	orr.w	r3, r3, #2
 8009502:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009504:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009506:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009508:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800950c:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800950e:	6851      	ldr	r1, [r2, #4]
 8009510:	6860      	ldr	r0, [r4, #4]
 8009512:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009514:	484d      	ldr	r0, [pc, #308]	; (800964c <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009516:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009518:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800951a:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800951c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009520:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009528:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800952a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009532:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009534:	6859      	ldr	r1, [r3, #4]
 8009536:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009538:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800953a:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800953c:	6899      	ldr	r1, [r3, #8]
 800953e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8009542:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009544:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009546:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009548:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800954a:	ea42 0205 	orr.w	r2, r2, r5
 800954e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009550:	d05c      	beq.n	800960c <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009552:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009554:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009556:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800955a:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	4311      	orrs	r1, r2
 8009560:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009562:	6899      	ldr	r1, [r3, #8]
 8009564:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8009568:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	432a      	orrs	r2, r5
 800956e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009570:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009572:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009574:	f021 0102 	bic.w	r1, r1, #2
 8009578:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8009580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009582:	f894 2020 	ldrb.w	r2, [r4, #32]
 8009586:	2a00      	cmp	r2, #0
 8009588:	d051      	beq.n	800962e <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800958a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800958c:	3a01      	subs	r2, #1
 800958e:	2a07      	cmp	r2, #7
 8009590:	d864      	bhi.n	800965c <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009592:	6859      	ldr	r1, [r3, #4]
 8009594:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009598:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800959a:	6859      	ldr	r1, [r3, #4]
 800959c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80095a0:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80095a2:	6859      	ldr	r1, [r3, #4]
 80095a4:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80095a8:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80095ac:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095ae:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095b4:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095b6:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095bc:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095c0:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095c2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80095c4:	6899      	ldr	r1, [r3, #8]
 80095c6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80095ca:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80095cc:	6899      	ldr	r1, [r3, #8]
 80095ce:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80095d2:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80095d6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80095d8:	6899      	ldr	r1, [r3, #8]
 80095da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80095de:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80095e6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80095e8:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80095ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095ec:	f023 0303 	bic.w	r3, r3, #3
 80095f0:	f043 0301 	orr.w	r3, r3, #1
 80095f4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80095f6:	2300      	movs	r3, #0
 80095f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80095fe:	4620      	mov	r0, r4
 8009600:	f7fd fed8 	bl	80073b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8009604:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8009606:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800960a:	e724      	b.n	8009456 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800961a:	609a      	str	r2, [r3, #8]
 800961c:	e7a8      	b.n	8009570 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800961e:	f240 115b 	movw	r1, #347	; 0x15b
 8009622:	480b      	ldr	r0, [pc, #44]	; (8009650 <HAL_ADC_Init+0x2b4>)
 8009624:	f7fc f95e 	bl	80058e4 <assert_failed>
 8009628:	e711      	b.n	800944e <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 800962a:	2001      	movs	r0, #1
}
 800962c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	e7b8      	b.n	80095aa <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8009638:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800963c:	4804      	ldr	r0, [pc, #16]	; (8009650 <HAL_ADC_Init+0x2b4>)
 800963e:	f7fc f951 	bl	80058e4 <assert_failed>
 8009642:	e6e8      	b.n	8009416 <HAL_ADC_Init+0x7a>
 8009644:	40012000 	.word	0x40012000
 8009648:	40012100 	.word	0x40012100
 800964c:	0f000001 	.word	0x0f000001
 8009650:	0802e138 	.word	0x0802e138
 8009654:	ffffeefd 	.word	0xffffeefd
 8009658:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800965c:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8009660:	4803      	ldr	r0, [pc, #12]	; (8009670 <HAL_ADC_Init+0x2d4>)
 8009662:	f7fc f93f 	bl	80058e4 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009666:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009668:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800966a:	3a01      	subs	r2, #1
 800966c:	e791      	b.n	8009592 <HAL_ADC_Init+0x1f6>
 800966e:	bf00      	nop
 8009670:	0802e138 	.word	0x0802e138

08009674 <HAL_ADC_Start>:
{
 8009674:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8009676:	2300      	movs	r3, #0
{
 8009678:	b082      	sub	sp, #8
 800967a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800967c:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800967e:	6983      	ldr	r3, [r0, #24]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d904      	bls.n	800968e <HAL_ADC_Start+0x1a>
 8009684:	f240 21df 	movw	r1, #735	; 0x2df
 8009688:	4848      	ldr	r0, [pc, #288]	; (80097ac <HAL_ADC_Start+0x138>)
 800968a:	f7fc f92b 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800968e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009690:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8009694:	d174      	bne.n	8009780 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 8009696:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d079      	beq.n	8009792 <HAL_ADC_Start+0x11e>
 800969e:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80096a0:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80096a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80096a6:	6893      	ldr	r3, [r2, #8]
 80096a8:	07d8      	lsls	r0, r3, #31
 80096aa:	d414      	bmi.n	80096d6 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096ac:	4b40      	ldr	r3, [pc, #256]	; (80097b0 <HAL_ADC_Start+0x13c>)
 80096ae:	4841      	ldr	r0, [pc, #260]	; (80097b4 <HAL_ADC_Start+0x140>)
 80096b0:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80096b2:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096b4:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80096b8:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096bc:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80096be:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80096c4:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	b12b      	cbz	r3, 80096d6 <HAL_ADC_Start+0x62>
      counter--;
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f9      	bne.n	80096ca <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80096d6:	6890      	ldr	r0, [r2, #8]
 80096d8:	f010 0001 	ands.w	r0, r0, #1
 80096dc:	d02c      	beq.n	8009738 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80096de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096e0:	4b35      	ldr	r3, [pc, #212]	; (80097b8 <HAL_ADC_Start+0x144>)
 80096e2:	400b      	ands	r3, r1
 80096e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096e8:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80096ea:	6853      	ldr	r3, [r2, #4]
 80096ec:	0559      	lsls	r1, r3, #21
 80096ee:	d505      	bpl.n	80096fc <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80096f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80096f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096fa:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096fe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009702:	d02f      	beq.n	8009764 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009704:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009706:	f023 0306 	bic.w	r3, r3, #6
 800970a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800970c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8009710:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009712:	4b2a      	ldr	r3, [pc, #168]	; (80097bc <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8009714:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009718:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800971a:	6858      	ldr	r0, [r3, #4]
 800971c:	f010 001f 	ands.w	r0, r0, #31
 8009720:	d114      	bne.n	800974c <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009722:	6893      	ldr	r3, [r2, #8]
 8009724:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009728:	d10e      	bne.n	8009748 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800972a:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 800972c:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800972e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009732:	6091      	str	r1, [r2, #8]
}
 8009734:	b002      	add	sp, #8
 8009736:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800973a:	f043 0310 	orr.w	r3, r3, #16
 800973e:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009740:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	6463      	str	r3, [r4, #68]	; 0x44
}
 8009748:	b002      	add	sp, #8
 800974a:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800974c:	481c      	ldr	r0, [pc, #112]	; (80097c0 <HAL_ADC_Start+0x14c>)
 800974e:	4282      	cmp	r2, r0
 8009750:	d00a      	beq.n	8009768 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009752:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009754:	06db      	lsls	r3, r3, #27
 8009756:	d402      	bmi.n	800975e <HAL_ADC_Start+0xea>
 8009758:	4c1a      	ldr	r4, [pc, #104]	; (80097c4 <HAL_ADC_Start+0x150>)
 800975a:	42a2      	cmp	r2, r4
 800975c:	d01c      	beq.n	8009798 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800975e:	2000      	movs	r0, #0
}
 8009760:	b002      	add	sp, #8
 8009762:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8009764:	6463      	str	r3, [r4, #68]	; 0x44
 8009766:	e7d1      	b.n	800970c <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009768:	6893      	ldr	r3, [r2, #8]
 800976a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800976e:	d103      	bne.n	8009778 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009770:	6893      	ldr	r3, [r2, #8]
 8009772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009776:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009778:	4b10      	ldr	r3, [pc, #64]	; (80097bc <HAL_ADC_Start+0x148>)
  return HAL_OK;
 800977a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800977c:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800977e:	e7e3      	b.n	8009748 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8009780:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <HAL_ADC_Start+0x138>)
 8009786:	f7fc f8ad 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hadc);
 800978a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800978e:	2b01      	cmp	r3, #1
 8009790:	d185      	bne.n	800969e <HAL_ADC_Start+0x2a>
 8009792:	2002      	movs	r0, #2
}
 8009794:	b002      	add	sp, #8
 8009796:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009798:	68a0      	ldr	r0, [r4, #8]
 800979a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800979e:	d1de      	bne.n	800975e <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097a0:	68a3      	ldr	r3, [r4, #8]
 80097a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	e7ce      	b.n	8009748 <HAL_ADC_Start+0xd4>
 80097aa:	bf00      	nop
 80097ac:	0802e138 	.word	0x0802e138
 80097b0:	200002b8 	.word	0x200002b8
 80097b4:	431bde83 	.word	0x431bde83
 80097b8:	fffff8fe 	.word	0xfffff8fe
 80097bc:	40012300 	.word	0x40012300
 80097c0:	40012000 	.word	0x40012000
 80097c4:	40012200 	.word	0x40012200

080097c8 <HAL_ADC_ConvCpltCallback>:
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop

080097cc <HAL_ADC_LevelOutOfWindowCallback>:
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop

080097d0 <HAL_ADC_ErrorCallback>:
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop

080097d4 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097d4:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80097d6:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097d8:	2a01      	cmp	r2, #1
{
 80097da:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80097dc:	681d      	ldr	r5, [r3, #0]
{
 80097de:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80097e0:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097e2:	d904      	bls.n	80097ee <HAL_ADC_IRQHandler+0x1a>
 80097e4:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80097e8:	4851      	ldr	r0, [pc, #324]	; (8009930 <HAL_ADC_IRQHandler+0x15c>)
 80097ea:	f7fc f87b 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80097ee:	69e3      	ldr	r3, [r4, #28]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	2b0f      	cmp	r3, #15
 80097f4:	f200 8086 	bhi.w	8009904 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80097f8:	6963      	ldr	r3, [r4, #20]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d87c      	bhi.n	80098f8 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80097fe:	07ab      	lsls	r3, r5, #30
 8009800:	d52c      	bpl.n	800985c <HAL_ADC_IRQHandler+0x88>
 8009802:	06b0      	lsls	r0, r6, #26
 8009804:	d52a      	bpl.n	800985c <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009808:	06d9      	lsls	r1, r3, #27
 800980a:	d403      	bmi.n	8009814 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800980c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800980e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009812:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800981c:	d117      	bne.n	800984e <HAL_ADC_IRQHandler+0x7a>
 800981e:	69a2      	ldr	r2, [r4, #24]
 8009820:	b9aa      	cbnz	r2, 800984e <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009824:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8009828:	d002      	beq.n	8009830 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800982a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800982c:	0552      	lsls	r2, r2, #21
 800982e:	d40e      	bmi.n	800984e <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	f022 0220 	bic.w	r2, r2, #32
 8009836:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800983a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800983e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009842:	04d8      	lsls	r0, r3, #19
 8009844:	d403      	bmi.n	800984e <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009848:	f043 0301 	orr.w	r3, r3, #1
 800984c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff ffba 	bl	80097c8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	f06f 0212 	mvn.w	r2, #18
 800985a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800985c:	0769      	lsls	r1, r5, #29
 800985e:	d530      	bpl.n	80098c2 <HAL_ADC_IRQHandler+0xee>
 8009860:	0632      	lsls	r2, r6, #24
 8009862:	d52e      	bpl.n	80098c2 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009866:	06db      	lsls	r3, r3, #27
 8009868:	d403      	bmi.n	8009872 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800986a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800986c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009870:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800987a:	d11b      	bne.n	80098b4 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800987c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800987e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8009882:	d151      	bne.n	8009928 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009884:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009886:	0551      	lsls	r1, r2, #21
 8009888:	d414      	bmi.n	80098b4 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800988a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800988c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8009890:	d110      	bne.n	80098b4 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009892:	69a2      	ldr	r2, [r4, #24]
 8009894:	b972      	cbnz	r2, 80098b4 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800989c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800989e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098a4:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80098a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098a8:	05da      	lsls	r2, r3, #23
 80098aa:	d403      	bmi.n	80098b4 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 f92f 	bl	8009b18 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f06f 020c 	mvn.w	r2, #12
 80098c0:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80098c2:	0673      	lsls	r3, r6, #25
 80098c4:	d505      	bpl.n	80098d2 <HAL_ADC_IRQHandler+0xfe>
 80098c6:	07e8      	lsls	r0, r5, #31
 80098c8:	d503      	bpl.n	80098d2 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	07d9      	lsls	r1, r3, #31
 80098d0:	d41e      	bmi.n	8009910 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80098d2:	06aa      	lsls	r2, r5, #26
 80098d4:	d501      	bpl.n	80098da <HAL_ADC_IRQHandler+0x106>
 80098d6:	0173      	lsls	r3, r6, #5
 80098d8:	d400      	bmi.n	80098dc <HAL_ADC_IRQHandler+0x108>
}
 80098da:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80098dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80098de:	f06f 0520 	mvn.w	r5, #32
 80098e2:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 80098e4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80098e6:	f043 0302 	orr.w	r3, r3, #2
 80098ea:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80098ec:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80098ee:	f7ff ff6f 	bl	80097d0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	601d      	str	r5, [r3, #0]
}
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80098f8:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80098fc:	480c      	ldr	r0, [pc, #48]	; (8009930 <HAL_ADC_IRQHandler+0x15c>)
 80098fe:	f7fb fff1 	bl	80058e4 <assert_failed>
 8009902:	e77c      	b.n	80097fe <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8009904:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8009908:	4809      	ldr	r0, [pc, #36]	; (8009930 <HAL_ADC_IRQHandler+0x15c>)
 800990a:	f7fb ffeb 	bl	80058e4 <assert_failed>
 800990e:	e773      	b.n	80097f8 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009910:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009912:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009918:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800991a:	f7ff ff57 	bl	80097cc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	f06f 0201 	mvn.w	r2, #1
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e7d4      	b.n	80098d2 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009928:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800992a:	0550      	lsls	r0, r2, #21
 800992c:	d4c2      	bmi.n	80098b4 <HAL_ADC_IRQHandler+0xe0>
 800992e:	e7a9      	b.n	8009884 <HAL_ADC_IRQHandler+0xb0>
 8009930:	0802e138 	.word	0x0802e138

08009934 <HAL_ADC_ConfigChannel>:
{
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8009936:	2300      	movs	r3, #0
{
 8009938:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800993a:	4a71      	ldr	r2, [pc, #452]	; (8009b00 <HAL_ADC_ConfigChannel+0x1cc>)
{
 800993c:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 800993e:	9301      	str	r3, [sp, #4]
{
 8009940:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8009942:	680b      	ldr	r3, [r1, #0]
 8009944:	4293      	cmp	r3, r2
 8009946:	bf18      	it	ne
 8009948:	2b12      	cmpne	r3, #18
 800994a:	d902      	bls.n	8009952 <HAL_ADC_ConfigChannel+0x1e>
 800994c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009950:	d142      	bne.n	80099d8 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	3b01      	subs	r3, #1
 8009956:	2b0f      	cmp	r3, #15
 8009958:	d847      	bhi.n	80099ea <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	2b07      	cmp	r3, #7
 800995e:	d84c      	bhi.n	80099fa <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8009960:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009964:	2b01      	cmp	r3, #1
 8009966:	d051      	beq.n	8009a0c <HAL_ADC_ConfigChannel+0xd8>
 8009968:	2301      	movs	r3, #1
 800996a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800996e:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009970:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009972:	2809      	cmp	r0, #9
 8009974:	d94d      	bls.n	8009a12 <HAL_ADC_ConfigChannel+0xde>
 8009976:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800997a:	d04a      	beq.n	8009a12 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800997c:	b281      	uxth	r1, r0
 800997e:	f04f 0c07 	mov.w	ip, #7
 8009982:	68de      	ldr	r6, [r3, #12]
 8009984:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009988:	4f5d      	ldr	r7, [pc, #372]	; (8009b00 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800998a:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800998c:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800998e:	fa0c fc02 	lsl.w	ip, ip, r2
 8009992:	ea26 060c 	bic.w	r6, r6, ip
 8009996:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009998:	f000 8083 	beq.w	8009aa2 <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800999c:	68a6      	ldr	r6, [r4, #8]
 800999e:	4096      	lsls	r6, r2
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	4316      	orrs	r6, r2
 80099a4:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80099a6:	6862      	ldr	r2, [r4, #4]
 80099a8:	2a06      	cmp	r2, #6
 80099aa:	d846      	bhi.n	8009a3a <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80099ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099b0:	241f      	movs	r4, #31
 80099b2:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099b4:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80099b6:	4094      	lsls	r4, r2
 80099b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ba:	ea22 0204 	bic.w	r2, r2, r4
 80099be:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099c2:	4311      	orrs	r1, r2
 80099c4:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80099c6:	4a4f      	ldr	r2, [pc, #316]	; (8009b04 <HAL_ADC_ConfigChannel+0x1d0>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d048      	beq.n	8009a5e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 80099cc:	2300      	movs	r3, #0
  return HAL_OK;
 80099ce:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80099d0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80099d4:	b003      	add	sp, #12
 80099d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80099d8:	f240 618b 	movw	r1, #1675	; 0x68b
 80099dc:	484a      	ldr	r0, [pc, #296]	; (8009b08 <HAL_ADC_ConfigChannel+0x1d4>)
 80099de:	f7fb ff81 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80099e2:	6863      	ldr	r3, [r4, #4]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d9b7      	bls.n	800995a <HAL_ADC_ConfigChannel+0x26>
 80099ea:	f240 618c 	movw	r1, #1676	; 0x68c
 80099ee:	4846      	ldr	r0, [pc, #280]	; (8009b08 <HAL_ADC_ConfigChannel+0x1d4>)
 80099f0:	f7fb ff78 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80099f4:	68a3      	ldr	r3, [r4, #8]
 80099f6:	2b07      	cmp	r3, #7
 80099f8:	d9b2      	bls.n	8009960 <HAL_ADC_ConfigChannel+0x2c>
 80099fa:	f240 618d 	movw	r1, #1677	; 0x68d
 80099fe:	4842      	ldr	r0, [pc, #264]	; (8009b08 <HAL_ADC_ConfigChannel+0x1d4>)
 8009a00:	f7fb ff70 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hadc);
 8009a04:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d1ad      	bne.n	8009968 <HAL_ADC_ConfigChannel+0x34>
 8009a0c:	2002      	movs	r0, #2
}
 8009a0e:	b003      	add	sp, #12
 8009a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a12:	b281      	uxth	r1, r0
 8009a14:	f04f 0c07 	mov.w	ip, #7
 8009a18:	691e      	ldr	r6, [r3, #16]
 8009a1a:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a1e:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a20:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a24:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a28:	ea26 060c 	bic.w	r6, r6, ip
 8009a2c:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a2e:	691e      	ldr	r6, [r3, #16]
 8009a30:	4332      	orrs	r2, r6
 8009a32:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8009a34:	6862      	ldr	r2, [r4, #4]
 8009a36:	2a06      	cmp	r2, #6
 8009a38:	d9b8      	bls.n	80099ac <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8009a3a:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8009a40:	d81c      	bhi.n	8009a7c <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a42:	3a23      	subs	r2, #35	; 0x23
 8009a44:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a46:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a48:	4094      	lsls	r4, r2
 8009a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a4c:	ea22 0204 	bic.w	r2, r2, r4
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a54:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a56:	4a2b      	ldr	r2, [pc, #172]	; (8009b04 <HAL_ADC_ConfigChannel+0x1d0>)
 8009a58:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a5a:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a5c:	d1b6      	bne.n	80099cc <HAL_ADC_ConfigChannel+0x98>
 8009a5e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009a62:	d017      	beq.n	8009a94 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a64:	2812      	cmp	r0, #18
 8009a66:	d123      	bne.n	8009ab0 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8009a68:	4b28      	ldr	r3, [pc, #160]	; (8009b0c <HAL_ADC_ConfigChannel+0x1d8>)
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009a70:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009a78:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a7a:	e7a7      	b.n	80099cc <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a7c:	3a41      	subs	r2, #65	; 0x41
 8009a7e:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a80:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a82:	4094      	lsls	r4, r2
 8009a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a86:	ea22 0204 	bic.w	r2, r2, r4
 8009a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8e:	4311      	orrs	r1, r2
 8009a90:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009a92:	e798      	b.n	80099c6 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009a94:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8009a98:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009a9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009aa0:	e794      	b.n	80099cc <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009aa2:	68a1      	ldr	r1, [r4, #8]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009aaa:	2112      	movs	r1, #18
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	e77a      	b.n	80099a6 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009ab0:	4b13      	ldr	r3, [pc, #76]	; (8009b00 <HAL_ADC_ConfigChannel+0x1cc>)
 8009ab2:	4298      	cmp	r0, r3
 8009ab4:	d001      	beq.n	8009aba <HAL_ADC_ConfigChannel+0x186>
 8009ab6:	2811      	cmp	r0, #17
 8009ab8:	d188      	bne.n	80099cc <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009aba:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009abc:	4910      	ldr	r1, [pc, #64]	; (8009b00 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009abe:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009ac0:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009ac2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8009ac6:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009ace:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009ad0:	f47f af7c 	bne.w	80099cc <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009ad4:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <HAL_ADC_ConfigChannel+0x1dc>)
 8009ad6:	4a0f      	ldr	r2, [pc, #60]	; (8009b14 <HAL_ADC_ConfigChannel+0x1e0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	fba2 2303 	umull	r2, r3, r2, r3
 8009ade:	0c9b      	lsrs	r3, r3, #18
 8009ae0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f43f af6e 	beq.w	80099cc <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f9      	bne.n	8009af0 <HAL_ADC_ConfigChannel+0x1bc>
 8009afc:	e766      	b.n	80099cc <HAL_ADC_ConfigChannel+0x98>
 8009afe:	bf00      	nop
 8009b00:	10000012 	.word	0x10000012
 8009b04:	40012000 	.word	0x40012000
 8009b08:	0802e138 	.word	0x0802e138
 8009b0c:	40012300 	.word	0x40012300
 8009b10:	200002b8 	.word	0x200002b8
 8009b14:	431bde83 	.word	0x431bde83

08009b18 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop

08009b1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009b1c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009b1e:	680b      	ldr	r3, [r1, #0]
{
 8009b20:	460c      	mov	r4, r1
 8009b22:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009b24:	2b19      	cmp	r3, #25
 8009b26:	d93e      	bls.n	8009ba6 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8009b28:	f240 31af 	movw	r1, #943	; 0x3af
 8009b2c:	4829      	ldr	r0, [pc, #164]	; (8009bd4 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009b2e:	f7fb fed9 	bl	80058e4 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009b32:	6863      	ldr	r3, [r4, #4]
 8009b34:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009b38:	d13e      	bne.n	8009bb8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009b3a:	68a3      	ldr	r3, [r4, #8]
 8009b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b44:	bf18      	it	ne
 8009b46:	2b00      	cmpne	r3, #0
 8009b48:	bf14      	ite	ne
 8009b4a:	2201      	movne	r2, #1
 8009b4c:	2200      	moveq	r2, #0
 8009b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b52:	bf0c      	ite	eq
 8009b54:	2200      	moveq	r2, #0
 8009b56:	f002 0201 	andne.w	r2, r2, #1
 8009b5a:	b112      	cbz	r2, 8009b62 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b60:	d132      	bne.n	8009bc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b62:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d02c      	beq.n	8009bc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8009b6a:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	f022 021f 	bic.w	r2, r2, #31
 8009b72:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	6821      	ldr	r1, [r4, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b82:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	6861      	ldr	r1, [r4, #4]
 8009b88:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b8a:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8009b8c:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009b94:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009b96:	68a0      	ldr	r0, [r4, #8]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8009b9c:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009b9e:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8009ba0:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8009ba4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009ba6:	4a0d      	ldr	r2, [pc, #52]	; (8009bdc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8009ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d5bb      	bpl.n	8009b28 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009bb6:	d0c0      	beq.n	8009b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009bb8:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009bbe:	f7fb fe91 	bl	80058e4 <assert_failed>
 8009bc2:	e7ba      	b.n	8009b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8009bc4:	2002      	movs	r0, #2
}
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009bc8:	f240 31b1 	movw	r1, #945	; 0x3b1
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009bce:	f7fb fe89 	bl	80058e4 <assert_failed>
 8009bd2:	e7c6      	b.n	8009b62 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009bd4:	0802e170 	.word	0x0802e170
 8009bd8:	40012300 	.word	0x40012300
 8009bdc:	02e602e7 	.word	0x02e602e7

08009be0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009be0:	1ec3      	subs	r3, r0, #3
 8009be2:	2b04      	cmp	r3, #4
{
 8009be4:	b510      	push	{r4, lr}
 8009be6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009be8:	d80c      	bhi.n	8009c04 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bea:	4909      	ldr	r1, [pc, #36]	; (8009c10 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bec:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8009bf2:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bf4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bf6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bfa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bfc:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8009bfe:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8009c00:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009c02:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009c04:	2191      	movs	r1, #145	; 0x91
 8009c06:	4804      	ldr	r0, [pc, #16]	; (8009c18 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8009c08:	f7fb fe6c 	bl	80058e4 <assert_failed>
 8009c0c:	e7ed      	b.n	8009bea <HAL_NVIC_SetPriorityGrouping+0xa>
 8009c0e:	bf00      	nop
 8009c10:	e000ed00 	.word	0xe000ed00
 8009c14:	05fa0000 	.word	0x05fa0000
 8009c18:	0802e1ac 	.word	0x0802e1ac

08009c1c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c1c:	2a0f      	cmp	r2, #15
{ 
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	4616      	mov	r6, r2
 8009c22:	4605      	mov	r5, r0
 8009c24:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c26:	d836      	bhi.n	8009c96 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009c28:	2c0f      	cmp	r4, #15
 8009c2a:	d82f      	bhi.n	8009c8c <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <HAL_NVIC_SetPriority+0x84>)
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c34:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c38:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c3a:	2804      	cmp	r0, #4
 8009c3c:	bf28      	it	cs
 8009c3e:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c40:	2a06      	cmp	r2, #6
 8009c42:	d918      	bls.n	8009c76 <HAL_NVIC_SetPriority+0x5a>
 8009c44:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4a:	409a      	lsls	r2, r3
 8009c4c:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c50:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8009c54:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c56:	fa01 f100 	lsl.w	r1, r1, r0
 8009c5a:	ea24 0401 	bic.w	r4, r4, r1
 8009c5e:	fa04 f403 	lsl.w	r4, r4, r3
 8009c62:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8009c66:	db09      	blt.n	8009c7c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c68:	0124      	lsls	r4, r4, #4
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <HAL_NVIC_SetPriority+0x88>)
 8009c6c:	b2e4      	uxtb	r4, r4
 8009c6e:	442b      	add	r3, r5
 8009c70:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c78:	4633      	mov	r3, r6
 8009c7a:	e7e9      	b.n	8009c50 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c7c:	f005 050f 	and.w	r5, r5, #15
 8009c80:	0124      	lsls	r4, r4, #4
 8009c82:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <HAL_NVIC_SetPriority+0x8c>)
 8009c84:	b2e4      	uxtb	r4, r4
 8009c86:	442b      	add	r3, r5
 8009c88:	761c      	strb	r4, [r3, #24]
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009c8c:	21aa      	movs	r1, #170	; 0xaa
 8009c8e:	4807      	ldr	r0, [pc, #28]	; (8009cac <HAL_NVIC_SetPriority+0x90>)
 8009c90:	f7fb fe28 	bl	80058e4 <assert_failed>
 8009c94:	e7ca      	b.n	8009c2c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c96:	21a9      	movs	r1, #169	; 0xa9
 8009c98:	4804      	ldr	r0, [pc, #16]	; (8009cac <HAL_NVIC_SetPriority+0x90>)
 8009c9a:	f7fb fe23 	bl	80058e4 <assert_failed>
 8009c9e:	e7c3      	b.n	8009c28 <HAL_NVIC_SetPriority+0xc>
 8009ca0:	e000ed00 	.word	0xe000ed00
 8009ca4:	e000e100 	.word	0xe000e100
 8009ca8:	e000ecfc 	.word	0xe000ecfc
 8009cac:	0802e1ac 	.word	0x0802e1ac

08009cb0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db08      	blt.n	8009cc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cb4:	f000 011f 	and.w	r1, r0, #31
 8009cb8:	2301      	movs	r3, #1
 8009cba:	0940      	lsrs	r0, r0, #5
 8009cbc:	4a04      	ldr	r2, [pc, #16]	; (8009cd0 <HAL_NVIC_EnableIRQ+0x20>)
 8009cbe:	408b      	lsls	r3, r1
 8009cc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009cc4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cc6:	21bd      	movs	r1, #189	; 0xbd
 8009cc8:	4802      	ldr	r0, [pc, #8]	; (8009cd4 <HAL_NVIC_EnableIRQ+0x24>)
 8009cca:	f7fb be0b 	b.w	80058e4 <assert_failed>
 8009cce:	bf00      	nop
 8009cd0:	e000e100 	.word	0xe000e100
 8009cd4:	0802e1ac 	.word	0x0802e1ac

08009cd8 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	db0e      	blt.n	8009cfa <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cdc:	0943      	lsrs	r3, r0, #5
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f000 001f 	and.w	r0, r0, #31
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <HAL_NVIC_DisableIRQ+0x2c>)
 8009ce6:	3320      	adds	r3, #32
 8009ce8:	fa02 f000 	lsl.w	r0, r2, r0
 8009cec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cf4:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009cf8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cfa:	21cd      	movs	r1, #205	; 0xcd
 8009cfc:	4802      	ldr	r0, [pc, #8]	; (8009d08 <HAL_NVIC_DisableIRQ+0x30>)
 8009cfe:	f7fb bdf1 	b.w	80058e4 <assert_failed>
 8009d02:	bf00      	nop
 8009d04:	e000e100 	.word	0xe000e100
 8009d08:	0802e1ac 	.word	0x0802e1ac

08009d0c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d075      	beq.n	8009dfc <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009d10:	4b3b      	ldr	r3, [pc, #236]	; (8009e00 <HAL_CRC_Init+0xf4>)
 8009d12:	6802      	ldr	r2, [r0, #0]
 8009d14:	429a      	cmp	r2, r3
{
 8009d16:	b510      	push	{r4, lr}
 8009d18:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009d1a:	d003      	beq.n	8009d24 <HAL_CRC_Init+0x18>
 8009d1c:	2170      	movs	r1, #112	; 0x70
 8009d1e:	4839      	ldr	r0, [pc, #228]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009d20:	f7fb fde0 	bl	80058e4 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009d24:	7f63      	ldrb	r3, [r4, #29]
 8009d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d055      	beq.n	8009dda <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d2e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009d30:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d32:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009d34:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d36:	d838      	bhi.n	8009daa <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d13d      	bne.n	8009db8 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	4a32      	ldr	r2, [pc, #200]	; (8009e08 <HAL_CRC_Init+0xfc>)
 8009d40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	f022 0218 	bic.w	r2, r2, #24
 8009d48:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009d4a:	7963      	ldrb	r3, [r4, #5]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d83c      	bhi.n	8009dca <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009d50:	b1e3      	cbz	r3, 8009d8c <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009d52:	6922      	ldr	r2, [r4, #16]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009d58:	6962      	ldr	r2, [r4, #20]
 8009d5a:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009d5e:	d11d      	bne.n	8009d9c <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d60:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d62:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d64:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8009d68:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d6a:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d6e:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d70:	d13d      	bne.n	8009dee <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d72:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d74:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d7a:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d7c:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d7e:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d80:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d82:	d82f      	bhi.n	8009de4 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009d84:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009d86:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8009d88:	7763      	strb	r3, [r4, #29]
}
 8009d8a:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009d94:	6962      	ldr	r2, [r4, #20]
 8009d96:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009d9a:	d0e1      	beq.n	8009d60 <HAL_CRC_Init+0x54>
 8009d9c:	219c      	movs	r1, #156	; 0x9c
 8009d9e:	4819      	ldr	r0, [pc, #100]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009da0:	f7fb fda0 	bl	80058e4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009da4:	6962      	ldr	r2, [r4, #20]
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	e7da      	b.n	8009d60 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009daa:	217e      	movs	r1, #126	; 0x7e
 8009dac:	4815      	ldr	r0, [pc, #84]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009dae:	f7fb fd99 	bl	80058e4 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009db2:	7923      	ldrb	r3, [r4, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0c1      	beq.n	8009d3c <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009db8:	4620      	mov	r0, r4
 8009dba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009dbe:	f000 f825 	bl	8009e0c <HAL_CRCEx_Polynomial_Set>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d0c1      	beq.n	8009d4a <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8009dc6:	2001      	movs	r0, #1
}
 8009dc8:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009dca:	2190      	movs	r1, #144	; 0x90
 8009dcc:	480d      	ldr	r0, [pc, #52]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009dce:	f7fb fd89 	bl	80058e4 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009dd2:	7963      	ldrb	r3, [r4, #5]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1bc      	bne.n	8009d52 <HAL_CRC_Init+0x46>
 8009dd8:	e7d8      	b.n	8009d8c <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8009dda:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8009ddc:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8009dde:	f7fd fb8b 	bl	80074f8 <HAL_CRC_MspInit>
 8009de2:	e7a4      	b.n	8009d2e <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009de4:	21a5      	movs	r1, #165	; 0xa5
 8009de6:	4807      	ldr	r0, [pc, #28]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009de8:	f7fb fd7c 	bl	80058e4 <assert_failed>
 8009dec:	e7ca      	b.n	8009d84 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <HAL_CRC_Init+0xf8>)
 8009df0:	21a0      	movs	r1, #160	; 0xa0
 8009df2:	f7fb fd77 	bl	80058e4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	69a0      	ldr	r0, [r4, #24]
 8009dfa:	e7ba      	b.n	8009d72 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8009dfc:	2001      	movs	r0, #1
}
 8009dfe:	4770      	bx	lr
 8009e00:	40023000 	.word	0x40023000
 8009e04:	0802e1e8 	.word	0x0802e1e8
 8009e08:	04c11db7 	.word	0x04c11db7

08009e0c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009e0c:	f032 0318 	bics.w	r3, r2, #24
{
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	4616      	mov	r6, r2
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009e18:	d003      	beq.n	8009e22 <HAL_CRCEx_Polynomial_Set+0x16>
 8009e1a:	215f      	movs	r1, #95	; 0x5f
 8009e1c:	4818      	ldr	r0, [pc, #96]	; (8009e80 <HAL_CRCEx_Polynomial_Set+0x74>)
 8009e1e:	f7fb fd61 	bl	80058e4 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009e22:	231e      	movs	r3, #30
 8009e24:	e001      	b.n	8009e2a <HAL_CRCEx_Polynomial_Set+0x1e>
 8009e26:	3b01      	subs	r3, #1
 8009e28:	d315      	bcc.n	8009e56 <HAL_CRCEx_Polynomial_Set+0x4a>
 8009e2a:	fa24 fc03 	lsr.w	ip, r4, r3
 8009e2e:	f01c 0f01 	tst.w	ip, #1
 8009e32:	d0f8      	beq.n	8009e26 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8009e34:	2e18      	cmp	r6, #24
 8009e36:	d80f      	bhi.n	8009e58 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009e38:	e8df f006 	tbb	[pc, r6]
 8009e3c:	0e0e0e12 	.word	0x0e0e0e12
 8009e40:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e44:	0e0e0e1b 	.word	0x0e0e0e1b
 8009e48:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e4c:	0e0e0e1e 	.word	0x0e0e0e1e
 8009e50:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e54:	10          	.byte	0x10
 8009e55:	00          	.byte	0x00
 8009e56:	b11e      	cbz	r6, 8009e60 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8009e58:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8009e5c:	2b06      	cmp	r3, #6
 8009e5e:	d8fb      	bhi.n	8009e58 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e60:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e62:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e64:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e66:	688b      	ldr	r3, [r1, #8]
 8009e68:	f023 0318 	bic.w	r3, r3, #24
 8009e6c:	4333      	orrs	r3, r6
 8009e6e:	608b      	str	r3, [r1, #8]
}
 8009e70:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	d9f4      	bls.n	8009e60 <HAL_CRCEx_Polynomial_Set+0x54>
 8009e76:	e7ef      	b.n	8009e58 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009e78:	2b07      	cmp	r3, #7
 8009e7a:	d9f1      	bls.n	8009e60 <HAL_CRCEx_Polynomial_Set+0x54>
 8009e7c:	e7ec      	b.n	8009e58 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009e7e:	bf00      	nop
 8009e80:	0802e220 	.word	0x0802e220

08009e84 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8009e84:	b1d8      	cbz	r0, 8009ebe <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <HAL_DAC_Init+0x40>)
 8009e88:	6802      	ldr	r2, [r0, #0]
 8009e8a:	429a      	cmp	r2, r3
{
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009e90:	d004      	beq.n	8009e9c <HAL_DAC_Init+0x18>
 8009e92:	f240 1115 	movw	r1, #277	; 0x115
 8009e96:	480c      	ldr	r0, [pc, #48]	; (8009ec8 <HAL_DAC_Init+0x44>)
 8009e98:	f7fb fd24 	bl	80058e4 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009e9c:	7923      	ldrb	r3, [r4, #4]
 8009e9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ea2:	b13b      	cbz	r3, 8009eb4 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009ea4:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ea6:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009ea8:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8009eaa:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8009eac:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009eae:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8009eb0:	7122      	strb	r2, [r4, #4]
}
 8009eb2:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8009eb4:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8009eb6:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8009eb8:	f7fd fb34 	bl	8007524 <HAL_DAC_MspInit>
 8009ebc:	e7f2      	b.n	8009ea4 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8009ebe:	2001      	movs	r0, #1
}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40007400 	.word	0x40007400
 8009ec8:	0802e25c 	.word	0x0802e25c

08009ecc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed0:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009ed2:	f031 0310 	bics.w	r3, r1, #16
{
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4604      	mov	r4, r0
 8009eda:	4617      	mov	r7, r2
 8009edc:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8009ede:	d16b      	bne.n	8009fb8 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8009ee0:	f036 0304 	bics.w	r3, r6, #4
 8009ee4:	d001      	beq.n	8009eea <HAL_DAC_Start_DMA+0x1e>
 8009ee6:	2e08      	cmp	r6, #8
 8009ee8:	d15b      	bne.n	8009fa2 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8009eea:	7962      	ldrb	r2, [r4, #5]
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	d060      	beq.n	8009fb2 <HAL_DAC_Start_DMA+0xe6>
 8009ef0:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ef2:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8009ef6:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8009efc:	bb35      	cbnz	r5, 8009f4c <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009efe:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009f00:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f02:	4b39      	ldr	r3, [pc, #228]	; (8009fe8 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009f04:	4a39      	ldr	r2, [pc, #228]	; (8009fec <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f06:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f08:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009f0c:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009f12:	4a37      	ldr	r2, [pc, #220]	; (8009ff0 <HAL_DAC_Start_DMA+0x124>)
 8009f14:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f16:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009f1a:	d059      	beq.n	8009fd0 <HAL_DAC_Start_DMA+0x104>
 8009f1c:	2e08      	cmp	r6, #8
 8009f1e:	d054      	beq.n	8009fca <HAL_DAC_Start_DMA+0xfe>
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	d04f      	beq.n	8009fc4 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f24:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f26:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f2a:	4643      	mov	r3, r8
 8009f2c:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f2e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8009f32:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f36:	f000 fbe3 	bl	800a700 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8009f3e:	b330      	cbz	r0, 8009f8e <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	f043 0304 	orr.w	r3, r3, #4
 8009f46:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f4c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8009f4e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f50:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f52:	4a29      	ldr	r2, [pc, #164]	; (8009ff8 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f54:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f56:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f5a:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f60:	4a26      	ldr	r2, [pc, #152]	; (8009ffc <HAL_DAC_Start_DMA+0x130>)
 8009f62:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f64:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009f68:	d03b      	beq.n	8009fe2 <HAL_DAC_Start_DMA+0x116>
 8009f6a:	2e08      	cmp	r6, #8
 8009f6c:	d036      	beq.n	8009fdc <HAL_DAC_Start_DMA+0x110>
 8009f6e:	b396      	cbz	r6, 8009fd6 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f70:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f72:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f76:	4643      	mov	r3, r8
 8009f78:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f7a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8009f7e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f82:	f000 fbbd 	bl	800a700 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8009f86:	2300      	movs	r3, #0
 8009f88:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1d8      	bne.n	8009f40 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f005 0110 	and.w	r1, r5, #16
 8009f94:	2501      	movs	r5, #1
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	408d      	lsls	r5, r1
 8009f9a:	4315      	orrs	r5, r2
 8009f9c:	601d      	str	r5, [r3, #0]
}
 8009f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8009fa2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009fa6:	4816      	ldr	r0, [pc, #88]	; (800a000 <HAL_DAC_Start_DMA+0x134>)
 8009fa8:	f7fb fc9c 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hdac);
 8009fac:	7962      	ldrb	r2, [r4, #5]
 8009fae:	2a01      	cmp	r2, #1
 8009fb0:	d19e      	bne.n	8009ef0 <HAL_DAC_Start_DMA+0x24>
 8009fb2:	2002      	movs	r0, #2
}
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009fb8:	f240 210f 	movw	r1, #527	; 0x20f
 8009fbc:	4810      	ldr	r0, [pc, #64]	; (800a000 <HAL_DAC_Start_DMA+0x134>)
 8009fbe:	f7fb fc91 	bl	80058e4 <assert_failed>
 8009fc2:	e78d      	b.n	8009ee0 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009fc4:	f10c 0208 	add.w	r2, ip, #8
        break;
 8009fc8:	e7ad      	b.n	8009f26 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009fca:	f10c 0210 	add.w	r2, ip, #16
        break;
 8009fce:	e7aa      	b.n	8009f26 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009fd0:	f10c 020c 	add.w	r2, ip, #12
        break;
 8009fd4:	e7a7      	b.n	8009f26 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009fd6:	f10c 0214 	add.w	r2, ip, #20
        break;
 8009fda:	e7ca      	b.n	8009f72 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009fdc:	f10c 021c 	add.w	r2, ip, #28
        break;
 8009fe0:	e7c7      	b.n	8009f72 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009fe2:	f10c 0218 	add.w	r2, ip, #24
        break;
 8009fe6:	e7c4      	b.n	8009f72 <HAL_DAC_Start_DMA+0xa6>
 8009fe8:	0800a095 	.word	0x0800a095
 8009fec:	0800a0a9 	.word	0x0800a0a9
 8009ff0:	0800a0b9 	.word	0x0800a0b9
 8009ff4:	0800a20d 	.word	0x0800a20d
 8009ff8:	0800a21d 	.word	0x0800a21d
 8009ffc:	0800a229 	.word	0x0800a229
 800a000:	0802e25c 	.word	0x0802e25c

0800a004 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a004:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800a006:	f031 0310 	bics.w	r3, r1, #16
{
 800a00a:	460d      	mov	r5, r1
 800a00c:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 800a00e:	d11e      	bne.n	800a04e <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a010:	6803      	ldr	r3, [r0, #0]
 800a012:	f001 0e10 	and.w	lr, r1, #16
 800a016:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a01a:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 800a022:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a026:	ea20 000c 	bic.w	r0, r0, ip
 800a02a:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	ea22 0201 	bic.w	r2, r2, r1
 800a032:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a034:	bb05      	cbnz	r5, 800a078 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800a036:	68a0      	ldr	r0, [r4, #8]
 800a038:	f000 fbbe 	bl	800a7b8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a03c:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a03e:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a040:	6813      	ldr	r3, [r2, #0]
 800a042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a046:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a048:	2301      	movs	r3, #1
 800a04a:	7123      	strb	r3, [r4, #4]
}
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800a04e:	f240 218f 	movw	r1, #655	; 0x28f
 800a052:	480f      	ldr	r0, [pc, #60]	; (800a090 <HAL_DAC_Stop_DMA+0x8c>)
 800a054:	f7fb fc46 	bl	80058e4 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a058:	f005 0510 	and.w	r5, r5, #16
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800a062:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 800a068:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a06a:	ea22 0200 	bic.w	r2, r2, r0
 800a06e:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800a070:	681d      	ldr	r5, [r3, #0]
 800a072:	ea25 0501 	bic.w	r5, r5, r1
 800a076:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800a078:	68e0      	ldr	r0, [r4, #12]
 800a07a:	f000 fb9d 	bl	800a7b8 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a07e:	6822      	ldr	r2, [r4, #0]
}
 800a080:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a088:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a08a:	2301      	movs	r3, #1
 800a08c:	7123      	strb	r3, [r4, #4]
}
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	0802e25c 	.word	0x0802e25c

0800a094 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a094:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a096:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a098:	4620      	mov	r0, r4
 800a09a:	f7fa fabd 	bl	8004618 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	7123      	strb	r3, [r4, #4]
}
 800a0a2:	bd10      	pop	{r4, pc}

0800a0a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop

0800a0a8 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a0a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a0aa:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a0ac:	f7ff fffa 	bl	800a0a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a0b0:	bd08      	pop	{r3, pc}
 800a0b2:	bf00      	nop

0800a0b4 <HAL_DAC_ErrorCallbackCh1>:
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop

0800a0b8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a0b8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ba:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a0bc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a0be:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a0c0:	f043 0304 	orr.w	r3, r3, #4
 800a0c4:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a0c6:	f7ff fff5 	bl	800a0b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	7123      	strb	r3, [r4, #4]
}
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop

0800a0d4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a0d4:	6803      	ldr	r3, [r0, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	0491      	lsls	r1, r2, #18
{
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a0de:	d502      	bpl.n	800a0e6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800a0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e2:	0492      	lsls	r2, r2, #18
 800a0e4:	d418      	bmi.n	800a118 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	0091      	lsls	r1, r2, #2
 800a0ea:	d502      	bpl.n	800a0f2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800a0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	d400      	bmi.n	800a0f4 <HAL_DAC_IRQHandler+0x20>
}
 800a0f2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800a0f4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a0f6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a0fa:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800a0fc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800a0fe:	6922      	ldr	r2, [r4, #16]
 800a100:	f042 0202 	orr.w	r2, r2, #2
 800a104:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a106:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800a10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a112:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a114:	f000 b878 	b.w	800a208 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800a118:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a11a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800a11e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800a120:	6902      	ldr	r2, [r0, #16]
 800a122:	f042 0201 	orr.w	r2, r2, #1
 800a126:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a128:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a130:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800a132:	f7ff ffcd 	bl	800a0d0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	e7d5      	b.n	800a0e6 <HAL_DAC_IRQHandler+0x12>
 800a13a:	bf00      	nop

0800a13c <HAL_DAC_ConfigChannel>:
{
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a140:	6808      	ldr	r0, [r1, #0]
{
 800a142:	4616      	mov	r6, r2
 800a144:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a146:	f020 0308 	bic.w	r3, r0, #8
 800a14a:	f020 0204 	bic.w	r2, r0, #4
 800a14e:	2b24      	cmp	r3, #36	; 0x24
 800a150:	bf18      	it	ne
 800a152:	2a00      	cmpne	r2, #0
 800a154:	f020 0210 	bic.w	r2, r0, #16
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	283c      	cmp	r0, #60	; 0x3c
 800a160:	bf0c      	ite	eq
 800a162:	2300      	moveq	r3, #0
 800a164:	f003 0301 	andne.w	r3, r3, #1
 800a168:	2a0c      	cmp	r2, #12
 800a16a:	bf0c      	ite	eq
 800a16c:	2300      	moveq	r3, #0
 800a16e:	f003 0301 	andne.w	r3, r3, #1
 800a172:	b11b      	cbz	r3, 800a17c <HAL_DAC_ConfigChannel+0x40>
 800a174:	f020 0020 	bic.w	r0, r0, #32
 800a178:	2814      	cmp	r0, #20
 800a17a:	d137      	bne.n	800a1ec <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a17c:	686b      	ldr	r3, [r5, #4]
 800a17e:	f033 0302 	bics.w	r3, r3, #2
 800a182:	d12d      	bne.n	800a1e0 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 800a184:	f036 0310 	bics.w	r3, r6, #16
 800a188:	d120      	bne.n	800a1cc <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 800a18a:	7963      	ldrb	r3, [r4, #5]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d025      	beq.n	800a1dc <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a190:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800a194:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a196:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800a19a:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800a19c:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a19e:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a1a2:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 800a1a6:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a1a8:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 800a1aa:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a1ac:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a1ae:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 800a1b2:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a1b4:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1b6:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 800a1b8:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1ba:	4082      	lsls	r2, r0
 800a1bc:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 800a1be:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1c0:	ea23 0302 	bic.w	r3, r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a1c6:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800a1c8:	7165      	strb	r5, [r4, #5]
}
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800a1cc:	f240 31a6 	movw	r1, #934	; 0x3a6
 800a1d0:	4809      	ldr	r0, [pc, #36]	; (800a1f8 <HAL_DAC_ConfigChannel+0xbc>)
 800a1d2:	f7fb fb87 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hdac);
 800a1d6:	7963      	ldrb	r3, [r4, #5]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d1d9      	bne.n	800a190 <HAL_DAC_ConfigChannel+0x54>
 800a1dc:	2002      	movs	r0, #2
}
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a1e0:	f240 31a5 	movw	r1, #933	; 0x3a5
 800a1e4:	4804      	ldr	r0, [pc, #16]	; (800a1f8 <HAL_DAC_ConfigChannel+0xbc>)
 800a1e6:	f7fb fb7d 	bl	80058e4 <assert_failed>
 800a1ea:	e7cb      	b.n	800a184 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a1ec:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <HAL_DAC_ConfigChannel+0xbc>)
 800a1f2:	f7fb fb77 	bl	80058e4 <assert_failed>
 800a1f6:	e7c1      	b.n	800a17c <HAL_DAC_ConfigChannel+0x40>
 800a1f8:	0802e25c 	.word	0x0802e25c

0800a1fc <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop

0800a200 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop

0800a204 <HAL_DACEx_ErrorCallbackCh2>:
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop

0800a20c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a20c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a20e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a210:	4620      	mov	r0, r4
 800a212:	f7ff fff3 	bl	800a1fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a216:	2301      	movs	r3, #1
 800a218:	7123      	strb	r3, [r4, #4]
}
 800a21a:	bd10      	pop	{r4, pc}

0800a21c <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a21c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a21e:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a220:	f7ff ffee 	bl	800a200 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a224:	bd08      	pop	{r3, pc}
 800a226:	bf00      	nop

0800a228 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a228:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a22a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a22c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a22e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a230:	f043 0304 	orr.w	r3, r3, #4
 800a234:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a236:	f7ff ffe5 	bl	800a204 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a23a:	2301      	movs	r3, #1
 800a23c:	7123      	strb	r3, [r4, #4]
}
 800a23e:	bd10      	pop	{r4, pc}

0800a240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800a244:	f7ff f892 	bl	800936c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a248:	2c00      	cmp	r4, #0
 800a24a:	f000 8156 	beq.w	800a4fa <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	4605      	mov	r5, r0
 800a252:	4bad      	ldr	r3, [pc, #692]	; (800a508 <HAL_DMA_Init+0x2c8>)
 800a254:	49ad      	ldr	r1, [pc, #692]	; (800a50c <HAL_DMA_Init+0x2cc>)
 800a256:	429a      	cmp	r2, r3
 800a258:	bf18      	it	ne
 800a25a:	428a      	cmpne	r2, r1
 800a25c:	f101 0118 	add.w	r1, r1, #24
 800a260:	bf14      	ite	ne
 800a262:	2301      	movne	r3, #1
 800a264:	2300      	moveq	r3, #0
 800a266:	428a      	cmp	r2, r1
 800a268:	bf0c      	ite	eq
 800a26a:	2300      	moveq	r3, #0
 800a26c:	f003 0301 	andne.w	r3, r3, #1
 800a270:	3118      	adds	r1, #24
 800a272:	428a      	cmp	r2, r1
 800a274:	bf0c      	ite	eq
 800a276:	2300      	moveq	r3, #0
 800a278:	f003 0301 	andne.w	r3, r3, #1
 800a27c:	3118      	adds	r1, #24
 800a27e:	428a      	cmp	r2, r1
 800a280:	bf0c      	ite	eq
 800a282:	2300      	moveq	r3, #0
 800a284:	f003 0301 	andne.w	r3, r3, #1
 800a288:	3118      	adds	r1, #24
 800a28a:	428a      	cmp	r2, r1
 800a28c:	bf0c      	ite	eq
 800a28e:	2300      	moveq	r3, #0
 800a290:	f003 0301 	andne.w	r3, r3, #1
 800a294:	3118      	adds	r1, #24
 800a296:	428a      	cmp	r2, r1
 800a298:	bf0c      	ite	eq
 800a29a:	2300      	moveq	r3, #0
 800a29c:	f003 0301 	andne.w	r3, r3, #1
 800a2a0:	3118      	adds	r1, #24
 800a2a2:	428a      	cmp	r2, r1
 800a2a4:	bf0c      	ite	eq
 800a2a6:	2300      	moveq	r3, #0
 800a2a8:	f003 0301 	andne.w	r3, r3, #1
 800a2ac:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	bf0c      	ite	eq
 800a2b4:	2300      	moveq	r3, #0
 800a2b6:	f003 0301 	andne.w	r3, r3, #1
 800a2ba:	3118      	adds	r1, #24
 800a2bc:	428a      	cmp	r2, r1
 800a2be:	bf0c      	ite	eq
 800a2c0:	2300      	moveq	r3, #0
 800a2c2:	f003 0301 	andne.w	r3, r3, #1
 800a2c6:	3118      	adds	r1, #24
 800a2c8:	428a      	cmp	r2, r1
 800a2ca:	bf0c      	ite	eq
 800a2cc:	2300      	moveq	r3, #0
 800a2ce:	f003 0301 	andne.w	r3, r3, #1
 800a2d2:	3118      	adds	r1, #24
 800a2d4:	428a      	cmp	r2, r1
 800a2d6:	bf0c      	ite	eq
 800a2d8:	2300      	moveq	r3, #0
 800a2da:	f003 0301 	andne.w	r3, r3, #1
 800a2de:	3118      	adds	r1, #24
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	bf0c      	ite	eq
 800a2e4:	2300      	moveq	r3, #0
 800a2e6:	f003 0301 	andne.w	r3, r3, #1
 800a2ea:	3118      	adds	r1, #24
 800a2ec:	428a      	cmp	r2, r1
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2300      	moveq	r3, #0
 800a2f2:	f003 0301 	andne.w	r3, r3, #1
 800a2f6:	3118      	adds	r1, #24
 800a2f8:	428a      	cmp	r2, r1
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2300      	moveq	r3, #0
 800a2fe:	f003 0301 	andne.w	r3, r3, #1
 800a302:	b11b      	cbz	r3, 800a30c <HAL_DMA_Init+0xcc>
 800a304:	4b82      	ldr	r3, [pc, #520]	; (800a510 <HAL_DMA_Init+0x2d0>)
 800a306:	429a      	cmp	r2, r3
 800a308:	f040 8139 	bne.w	800a57e <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a316:	bf18      	it	ne
 800a318:	2b00      	cmpne	r3, #0
 800a31a:	bf14      	ite	ne
 800a31c:	2201      	movne	r2, #1
 800a31e:	2200      	moveq	r2, #0
 800a320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a324:	bf0c      	ite	eq
 800a326:	2200      	moveq	r2, #0
 800a328:	f002 0201 	andne.w	r2, r2, #1
 800a32c:	b11a      	cbz	r2, 800a336 <HAL_DMA_Init+0xf6>
 800a32e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a332:	f040 8129 	bne.w	800a588 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a33c:	d002      	beq.n	800a344 <HAL_DMA_Init+0x104>
 800a33e:	2b80      	cmp	r3, #128	; 0x80
 800a340:	f040 80a8 	bne.w	800a494 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a344:	68e3      	ldr	r3, [r4, #12]
 800a346:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a34a:	f040 80ac 	bne.w	800a4a6 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a354:	f040 80b0 	bne.w	800a4b8 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a358:	6963      	ldr	r3, [r4, #20]
 800a35a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a35e:	d003      	beq.n	800a368 <HAL_DMA_Init+0x128>
 800a360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a364:	f040 8091 	bne.w	800a48a <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a368:	69a3      	ldr	r3, [r4, #24]
 800a36a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800a36e:	d003      	beq.n	800a378 <HAL_DMA_Init+0x138>
 800a370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a374:	f040 8084 	bne.w	800a480 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a378:	69e3      	ldr	r3, [r4, #28]
 800a37a:	f033 0220 	bics.w	r2, r3, #32
 800a37e:	d002      	beq.n	800a386 <HAL_DMA_Init+0x146>
 800a380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a384:	d16f      	bne.n	800a466 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a386:	6a23      	ldr	r3, [r4, #32]
 800a388:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a38c:	d173      	bne.n	800a476 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a390:	f033 0204 	bics.w	r2, r3, #4
 800a394:	d15f      	bne.n	800a456 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a396:	2b00      	cmp	r3, #0
 800a398:	d14d      	bne.n	800a436 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a39a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800a39c:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800a39e:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 800a3a0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3a4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	f022 0201 	bic.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3b0:	e006      	b.n	800a3c0 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3b2:	f7fe ffdb 	bl	800936c <HAL_GetTick>
 800a3b6:	1b40      	subs	r0, r0, r5
 800a3b8:	2805      	cmp	r0, #5
 800a3ba:	f200 8082 	bhi.w	800a4c2 <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	07d1      	lsls	r1, r2, #31
 800a3c4:	d4f5      	bmi.n	800a3b2 <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3c6:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 800a3ca:	68e1      	ldr	r1, [r4, #12]
 800a3cc:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ce:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 800a3d0:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3d2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3d4:	6921      	ldr	r1, [r4, #16]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	6961      	ldr	r1, [r4, #20]
 800a3da:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3dc:	69e1      	ldr	r1, [r4, #28]
 800a3de:	4302      	orrs	r2, r0
 800a3e0:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3e2:	494c      	ldr	r1, [pc, #304]	; (800a514 <HAL_DMA_Init+0x2d4>)
 800a3e4:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3e6:	6a25      	ldr	r5, [r4, #32]
 800a3e8:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3ea:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3ee:	2904      	cmp	r1, #4
 800a3f0:	d06e      	beq.n	800a4d0 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a3f4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a3f6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a3fa:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3fc:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 800a3fe:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a400:	4945      	ldr	r1, [pc, #276]	; (800a518 <HAL_DMA_Init+0x2d8>)
 800a402:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a404:	4845      	ldr	r0, [pc, #276]	; (800a51c <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a406:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800a40a:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a40c:	4a44      	ldr	r2, [pc, #272]	; (800a520 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a40e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a412:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a416:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a41a:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a41c:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a420:	bf88      	it	hi
 800a422:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a424:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a426:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a428:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a42a:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800a42c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a42e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a434:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d860      	bhi.n	800a4fe <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a43c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a43e:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800a442:	d171      	bne.n	800a528 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800a444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a446:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800a44a:	d0a6      	beq.n	800a39a <HAL_DMA_Init+0x15a>
 800a44c:	21c8      	movs	r1, #200	; 0xc8
 800a44e:	4835      	ldr	r0, [pc, #212]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a450:	f7fb fa48 	bl	80058e4 <assert_failed>
 800a454:	e7a1      	b.n	800a39a <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a456:	21c1      	movs	r1, #193	; 0xc1
 800a458:	4832      	ldr	r0, [pc, #200]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a45a:	f7fb fa43 	bl	80058e4 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a460:	2b00      	cmp	r3, #0
 800a462:	d09a      	beq.n	800a39a <HAL_DMA_Init+0x15a>
 800a464:	e7e7      	b.n	800a436 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a466:	21bf      	movs	r1, #191	; 0xbf
 800a468:	482e      	ldr	r0, [pc, #184]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a46a:	f7fb fa3b 	bl	80058e4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a46e:	6a23      	ldr	r3, [r4, #32]
 800a470:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a474:	d08b      	beq.n	800a38e <HAL_DMA_Init+0x14e>
 800a476:	21c0      	movs	r1, #192	; 0xc0
 800a478:	482a      	ldr	r0, [pc, #168]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a47a:	f7fb fa33 	bl	80058e4 <assert_failed>
 800a47e:	e786      	b.n	800a38e <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a480:	21be      	movs	r1, #190	; 0xbe
 800a482:	4828      	ldr	r0, [pc, #160]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a484:	f7fb fa2e 	bl	80058e4 <assert_failed>
 800a488:	e776      	b.n	800a378 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a48a:	21bd      	movs	r1, #189	; 0xbd
 800a48c:	4825      	ldr	r0, [pc, #148]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a48e:	f7fb fa29 	bl	80058e4 <assert_failed>
 800a492:	e769      	b.n	800a368 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a494:	21ba      	movs	r1, #186	; 0xba
 800a496:	4823      	ldr	r0, [pc, #140]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a498:	f7fb fa24 	bl	80058e4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a49c:	68e3      	ldr	r3, [r4, #12]
 800a49e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a4a2:	f43f af54 	beq.w	800a34e <HAL_DMA_Init+0x10e>
 800a4a6:	21bb      	movs	r1, #187	; 0xbb
 800a4a8:	481e      	ldr	r0, [pc, #120]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a4aa:	f7fb fa1b 	bl	80058e4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a4b4:	f43f af50 	beq.w	800a358 <HAL_DMA_Init+0x118>
 800a4b8:	21bc      	movs	r1, #188	; 0xbc
 800a4ba:	481a      	ldr	r0, [pc, #104]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a4bc:	f7fb fa12 	bl	80058e4 <assert_failed>
 800a4c0:	e74a      	b.n	800a358 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4c4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800a4c6:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4c8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a4d0:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800a4d4:	4329      	orrs	r1, r5
 800a4d6:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800a4d8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800a4da:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800a4dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4de:	f021 0107 	bic.w	r1, r1, #7
 800a4e2:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800a4e4:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	d087      	beq.n	800a3fc <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4ec:	bb08      	cbnz	r0, 800a532 <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 800a4ee:	2a01      	cmp	r2, #1
 800a4f0:	d040      	beq.n	800a574 <HAL_DMA_Init+0x334>
 800a4f2:	f032 0202 	bics.w	r2, r2, #2
 800a4f6:	d181      	bne.n	800a3fc <HAL_DMA_Init+0x1bc>
 800a4f8:	e023      	b.n	800a542 <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 800a4fa:	2001      	movs	r0, #1
}
 800a4fc:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a4fe:	21c6      	movs	r1, #198	; 0xc6
 800a500:	4808      	ldr	r0, [pc, #32]	; (800a524 <HAL_DMA_Init+0x2e4>)
 800a502:	f7fb f9ef 	bl	80058e4 <assert_failed>
 800a506:	e799      	b.n	800a43c <HAL_DMA_Init+0x1fc>
 800a508:	40026010 	.word	0x40026010
 800a50c:	40026028 	.word	0x40026028
 800a510:	400264b8 	.word	0x400264b8
 800a514:	e010803f 	.word	0xe010803f
 800a518:	aaaaaaab 	.word	0xaaaaaaab
 800a51c:	0802e2cc 	.word	0x0802e2cc
 800a520:	fffffc00 	.word	0xfffffc00
 800a524:	0802e294 	.word	0x0802e294
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a528:	21c7      	movs	r1, #199	; 0xc7
 800a52a:	481a      	ldr	r0, [pc, #104]	; (800a594 <HAL_DMA_Init+0x354>)
 800a52c:	f7fb f9da 	bl	80058e4 <assert_failed>
 800a530:	e788      	b.n	800a444 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a532:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a536:	d00e      	beq.n	800a556 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a538:	2a02      	cmp	r2, #2
 800a53a:	d905      	bls.n	800a548 <HAL_DMA_Init+0x308>
 800a53c:	2a03      	cmp	r2, #3
 800a53e:	f47f af5d 	bne.w	800a3fc <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a542:	01ea      	lsls	r2, r5, #7
 800a544:	f57f af5a 	bpl.w	800a3fc <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 800a548:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a54a:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800a54c:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a54e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a550:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a554:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800a556:	2a03      	cmp	r2, #3
 800a558:	f63f af50 	bhi.w	800a3fc <HAL_DMA_Init+0x1bc>
 800a55c:	a001      	add	r0, pc, #4	; (adr r0, 800a564 <HAL_DMA_Init+0x324>)
 800a55e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a549 	.word	0x0800a549
 800a568:	0800a543 	.word	0x0800a543
 800a56c:	0800a549 	.word	0x0800a549
 800a570:	0800a575 	.word	0x0800a575
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a574:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800a578:	f47f af40 	bne.w	800a3fc <HAL_DMA_Init+0x1bc>
 800a57c:	e7e4      	b.n	800a548 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a57e:	21b8      	movs	r1, #184	; 0xb8
 800a580:	4804      	ldr	r0, [pc, #16]	; (800a594 <HAL_DMA_Init+0x354>)
 800a582:	f7fb f9af 	bl	80058e4 <assert_failed>
 800a586:	e6c1      	b.n	800a30c <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a588:	21b9      	movs	r1, #185	; 0xb9
 800a58a:	4802      	ldr	r0, [pc, #8]	; (800a594 <HAL_DMA_Init+0x354>)
 800a58c:	f7fb f9aa 	bl	80058e4 <assert_failed>
 800a590:	e6d1      	b.n	800a336 <HAL_DMA_Init+0xf6>
 800a592:	bf00      	nop
 800a594:	0802e294 	.word	0x0802e294

0800a598 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800a598:	2800      	cmp	r0, #0
 800a59a:	f000 8097 	beq.w	800a6cc <HAL_DMA_DeInit+0x134>
{
 800a59e:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a5a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	b2d8      	uxtb	r0, r3
 800a5aa:	f000 808e 	beq.w	800a6ca <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a5ae:	6822      	ldr	r2, [r4, #0]
 800a5b0:	4b4b      	ldr	r3, [pc, #300]	; (800a6e0 <HAL_DMA_DeInit+0x148>)
 800a5b2:	484c      	ldr	r0, [pc, #304]	; (800a6e4 <HAL_DMA_DeInit+0x14c>)
 800a5b4:	494c      	ldr	r1, [pc, #304]	; (800a6e8 <HAL_DMA_DeInit+0x150>)
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	bf18      	it	ne
 800a5ba:	4282      	cmpne	r2, r0
 800a5bc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a5c0:	bf14      	ite	ne
 800a5c2:	2301      	movne	r3, #1
 800a5c4:	2300      	moveq	r3, #0
 800a5c6:	428a      	cmp	r2, r1
 800a5c8:	bf0c      	ite	eq
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	f003 0301 	andne.w	r3, r3, #1
 800a5d0:	3130      	adds	r1, #48	; 0x30
 800a5d2:	4282      	cmp	r2, r0
 800a5d4:	bf0c      	ite	eq
 800a5d6:	2300      	moveq	r3, #0
 800a5d8:	f003 0301 	andne.w	r3, r3, #1
 800a5dc:	3030      	adds	r0, #48	; 0x30
 800a5de:	428a      	cmp	r2, r1
 800a5e0:	bf0c      	ite	eq
 800a5e2:	2300      	moveq	r3, #0
 800a5e4:	f003 0301 	andne.w	r3, r3, #1
 800a5e8:	3130      	adds	r1, #48	; 0x30
 800a5ea:	4282      	cmp	r2, r0
 800a5ec:	bf0c      	ite	eq
 800a5ee:	2300      	moveq	r3, #0
 800a5f0:	f003 0301 	andne.w	r3, r3, #1
 800a5f4:	3030      	adds	r0, #48	; 0x30
 800a5f6:	428a      	cmp	r2, r1
 800a5f8:	bf0c      	ite	eq
 800a5fa:	2300      	moveq	r3, #0
 800a5fc:	f003 0301 	andne.w	r3, r3, #1
 800a600:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a604:	4282      	cmp	r2, r0
 800a606:	bf0c      	ite	eq
 800a608:	2300      	moveq	r3, #0
 800a60a:	f003 0301 	andne.w	r3, r3, #1
 800a60e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a612:	428a      	cmp	r2, r1
 800a614:	bf0c      	ite	eq
 800a616:	2300      	moveq	r3, #0
 800a618:	f003 0301 	andne.w	r3, r3, #1
 800a61c:	3130      	adds	r1, #48	; 0x30
 800a61e:	4282      	cmp	r2, r0
 800a620:	bf0c      	ite	eq
 800a622:	2300      	moveq	r3, #0
 800a624:	f003 0301 	andne.w	r3, r3, #1
 800a628:	3030      	adds	r0, #48	; 0x30
 800a62a:	428a      	cmp	r2, r1
 800a62c:	bf0c      	ite	eq
 800a62e:	2300      	moveq	r3, #0
 800a630:	f003 0301 	andne.w	r3, r3, #1
 800a634:	3130      	adds	r1, #48	; 0x30
 800a636:	4282      	cmp	r2, r0
 800a638:	bf0c      	ite	eq
 800a63a:	2300      	moveq	r3, #0
 800a63c:	f003 0301 	andne.w	r3, r3, #1
 800a640:	3030      	adds	r0, #48	; 0x30
 800a642:	428a      	cmp	r2, r1
 800a644:	bf0c      	ite	eq
 800a646:	2300      	moveq	r3, #0
 800a648:	f003 0301 	andne.w	r3, r3, #1
 800a64c:	3130      	adds	r1, #48	; 0x30
 800a64e:	4282      	cmp	r2, r0
 800a650:	bf0c      	ite	eq
 800a652:	2300      	moveq	r3, #0
 800a654:	f003 0301 	andne.w	r3, r3, #1
 800a658:	428a      	cmp	r2, r1
 800a65a:	bf0c      	ite	eq
 800a65c:	2300      	moveq	r3, #0
 800a65e:	f003 0301 	andne.w	r3, r3, #1
 800a662:	b113      	cbz	r3, 800a66a <HAL_DMA_DeInit+0xd2>
 800a664:	4b21      	ldr	r3, [pc, #132]	; (800a6ec <HAL_DMA_DeInit+0x154>)
 800a666:	429a      	cmp	r2, r3
 800a668:	d132      	bne.n	800a6d0 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 800a66a:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a66c:	b2d3      	uxtb	r3, r2
 800a66e:	4920      	ldr	r1, [pc, #128]	; (800a6f0 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 800a670:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a674:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 800a676:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 800a678:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a67a:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800a67e:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 800a680:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800a682:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 800a686:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a688:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 800a68c:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 800a68e:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800a690:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800a692:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a696:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a698:	4816      	ldr	r0, [pc, #88]	; (800a6f4 <HAL_DMA_DeInit+0x15c>)
 800a69a:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a69c:	4916      	ldr	r1, [pc, #88]	; (800a6f8 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a69e:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6a0:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6a4:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6a8:	bf88      	it	hi
 800a6aa:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6ac:	4082      	lsls	r2, r0
  return HAL_OK;
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6b2:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6b4:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800a6b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800a6ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800a6be:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800a6c2:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800a6c6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800a6ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a6cc:	2001      	movs	r0, #1
}
 800a6ce:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a6d0:	f240 1149 	movw	r1, #329	; 0x149
 800a6d4:	4809      	ldr	r0, [pc, #36]	; (800a6fc <HAL_DMA_DeInit+0x164>)
 800a6d6:	f7fb f905 	bl	80058e4 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800a6da:	6822      	ldr	r2, [r4, #0]
 800a6dc:	e7c5      	b.n	800a66a <HAL_DMA_DeInit+0xd2>
 800a6de:	bf00      	nop
 800a6e0:	40026010 	.word	0x40026010
 800a6e4:	40026028 	.word	0x40026028
 800a6e8:	40026040 	.word	0x40026040
 800a6ec:	400264b8 	.word	0x400264b8
 800a6f0:	aaaaaaab 	.word	0xaaaaaaab
 800a6f4:	0802e2cc 	.word	0x0802e2cc
 800a6f8:	fffffc00 	.word	0xfffffc00
 800a6fc:	0802e294 	.word	0x0802e294

0800a700 <HAL_DMA_Start_IT>:
{
 800a700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a704:	461e      	mov	r6, r3
 800a706:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a708:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a70c:	1e58      	subs	r0, r3, #1
 800a70e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 800a712:	4688      	mov	r8, r1
 800a714:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a716:	4298      	cmp	r0, r3
 800a718:	d83b      	bhi.n	800a792 <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800a71a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d040      	beq.n	800a7a4 <HAL_DMA_Start_IT+0xa4>
 800a722:	2301      	movs	r3, #1
 800a724:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a728:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d005      	beq.n	800a73c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a730:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800a732:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800a734:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a73c:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a73e:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800a740:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a744:	2300      	movs	r3, #0
 800a746:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a74e:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a750:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800a752:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d028      	beq.n	800a7aa <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 800a758:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 800a75c:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a75e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a760:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800a762:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a764:	408b      	lsls	r3, r1
 800a766:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	f043 0316 	orr.w	r3, r3, #22
 800a770:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a772:	696b      	ldr	r3, [r5, #20]
 800a774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a778:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a77a:	b11a      	cbz	r2, 800a784 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	f043 0308 	orr.w	r3, r3, #8
 800a782:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800a784:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a786:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a788:	f043 0301 	orr.w	r3, r3, #1
 800a78c:	602b      	str	r3, [r5, #0]
}
 800a78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a792:	f240 11cd 	movw	r1, #461	; 0x1cd
 800a796:	4807      	ldr	r0, [pc, #28]	; (800a7b4 <HAL_DMA_Start_IT+0xb4>)
 800a798:	f7fb f8a4 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hdma);
 800a79c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d1be      	bne.n	800a722 <HAL_DMA_Start_IT+0x22>
 800a7a4:	2002      	movs	r0, #2
}
 800a7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800a7aa:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a7ac:	f8c5 800c 	str.w	r8, [r5, #12]
 800a7b0:	e7d5      	b.n	800a75e <HAL_DMA_Start_IT+0x5e>
 800a7b2:	bf00      	nop
 800a7b4:	0802e294 	.word	0x0802e294

0800a7b8 <HAL_DMA_Abort>:
{
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7bc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800a7be:	f7fe fdd5 	bl	800936c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7c2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d006      	beq.n	800a7d8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7ca:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800a7cc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a7ce:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7d0:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a7d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	4605      	mov	r5, r0
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	f022 0216 	bic.w	r2, r2, #22
 800a7e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7e4:	695a      	ldr	r2, [r3, #20]
 800a7e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7ea:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a7ee:	b33a      	cbz	r2, 800a840 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	f022 0208 	bic.w	r2, r2, #8
 800a7f6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	f022 0201 	bic.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a800:	e005      	b.n	800a80e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a802:	f7fe fdb3 	bl	800936c <HAL_GetTick>
 800a806:	1b43      	subs	r3, r0, r5
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d80f      	bhi.n	800a82c <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f013 0301 	ands.w	r3, r3, #1
 800a814:	d1f5      	bne.n	800a802 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a816:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a818:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800a81a:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a81c:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800a81e:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a820:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800a822:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800a826:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a82e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800a830:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a832:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800a834:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a836:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a83a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a840:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a842:	2a00      	cmp	r2, #0
 800a844:	d1d4      	bne.n	800a7f0 <HAL_DMA_Abort+0x38>
 800a846:	e7d7      	b.n	800a7f8 <HAL_DMA_Abort+0x40>

0800a848 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a848:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800a84c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a84e:	2a02      	cmp	r2, #2
 800a850:	d003      	beq.n	800a85a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a852:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800a854:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a856:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a858:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a85a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a85c:	2105      	movs	r1, #5
  return HAL_OK;
 800a85e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800a860:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800a864:	6813      	ldr	r3, [r2, #0]
 800a866:	f023 0301 	bic.w	r3, r3, #1
 800a86a:	6013      	str	r3, [r2, #0]
}
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop

0800a870 <HAL_DMA_IRQHandler>:
{
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 800a874:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 800a876:	4b74      	ldr	r3, [pc, #464]	; (800aa48 <HAL_DMA_IRQHandler+0x1d8>)
{
 800a878:	b082      	sub	sp, #8
 800a87a:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800a87c:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800a87e:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a880:	2208      	movs	r2, #8
 800a882:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800a886:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a888:	409a      	lsls	r2, r3
 800a88a:	4222      	tst	r2, r4
 800a88c:	d004      	beq.n	800a898 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a88e:	6801      	ldr	r1, [r0, #0]
 800a890:	680f      	ldr	r7, [r1, #0]
 800a892:	0778      	lsls	r0, r7, #29
 800a894:	f100 80ab 	bmi.w	800a9ee <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a898:	2201      	movs	r2, #1
 800a89a:	409a      	lsls	r2, r3
 800a89c:	4222      	tst	r2, r4
 800a89e:	d005      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a8a0:	f8d8 1000 	ldr.w	r1, [r8]
 800a8a4:	6949      	ldr	r1, [r1, #20]
 800a8a6:	0609      	lsls	r1, r1, #24
 800a8a8:	f100 8099 	bmi.w	800a9de <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8ac:	2204      	movs	r2, #4
 800a8ae:	409a      	lsls	r2, r3
 800a8b0:	4222      	tst	r2, r4
 800a8b2:	d005      	beq.n	800a8c0 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a8b4:	f8d8 1000 	ldr.w	r1, [r8]
 800a8b8:	6809      	ldr	r1, [r1, #0]
 800a8ba:	078f      	lsls	r7, r1, #30
 800a8bc:	f100 8087 	bmi.w	800a9ce <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a8c0:	2210      	movs	r2, #16
 800a8c2:	409a      	lsls	r2, r3
 800a8c4:	4222      	tst	r2, r4
 800a8c6:	d004      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a8c8:	f8d8 1000 	ldr.w	r1, [r8]
 800a8cc:	680f      	ldr	r7, [r1, #0]
 800a8ce:	0738      	lsls	r0, r7, #28
 800a8d0:	d468      	bmi.n	800a9a4 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	409a      	lsls	r2, r3
 800a8d6:	4222      	tst	r2, r4
 800a8d8:	d017      	beq.n	800a90a <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a8da:	f8d8 1000 	ldr.w	r1, [r8]
 800a8de:	680c      	ldr	r4, [r1, #0]
 800a8e0:	06e0      	lsls	r0, r4, #27
 800a8e2:	d512      	bpl.n	800a90a <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a8e4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a8e6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800a8ea:	2a05      	cmp	r2, #5
 800a8ec:	d039      	beq.n	800a962 <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a8ee:	680b      	ldr	r3, [r1, #0]
 800a8f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a8f4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a8f6:	f000 808d 	beq.w	800aa14 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a8fa:	0319      	lsls	r1, r3, #12
 800a8fc:	f140 8098 	bpl.w	800aa30 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 800a900:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a904:	b10b      	cbz	r3, 800a90a <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800a906:	4640      	mov	r0, r8
 800a908:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a90a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d045      	beq.n	800a99e <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a912:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a916:	07da      	lsls	r2, r3, #31
 800a918:	d51b      	bpl.n	800a952 <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800a91a:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800a91e:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800a920:	494a      	ldr	r1, [pc, #296]	; (800aa4c <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800a922:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a926:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a928:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800a92c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800a930:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e002      	b.n	800a93c <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	07db      	lsls	r3, r3, #31
 800a93a:	d504      	bpl.n	800a946 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	3301      	adds	r3, #1
 800a940:	42ab      	cmp	r3, r5
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	d9f7      	bls.n	800a936 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 800a946:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800a948:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800a94a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a94e:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800a952:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a956:	b313      	cbz	r3, 800a99e <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 800a958:	4640      	mov	r0, r8
}
 800a95a:	b002      	add	sp, #8
 800a95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800a960:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a962:	680a      	ldr	r2, [r1, #0]
 800a964:	f022 0216 	bic.w	r2, r2, #22
 800a968:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a96a:	694a      	ldr	r2, [r1, #20]
 800a96c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a970:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a972:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a976:	2a00      	cmp	r2, #0
 800a978:	d060      	beq.n	800aa3c <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a97a:	680a      	ldr	r2, [r1, #0]
 800a97c:	f022 0208 	bic.w	r2, r2, #8
 800a980:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a982:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 800a984:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800a98a:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a98c:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800a98e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 800a992:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a996:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1dc      	bne.n	800a958 <HAL_DMA_IRQHandler+0xe8>
}
 800a99e:	b002      	add	sp, #8
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9a4:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9a6:	680a      	ldr	r2, [r1, #0]
 800a9a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9ac:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9ae:	d12a      	bne.n	800aa06 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a9b0:	05d7      	lsls	r7, r2, #23
 800a9b2:	d403      	bmi.n	800a9bc <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a9b4:	680a      	ldr	r2, [r1, #0]
 800a9b6:	f022 0208 	bic.w	r2, r2, #8
 800a9ba:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800a9bc:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	d086      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a9c8:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a9cc:	e781      	b.n	800a8d2 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a9ce:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a9d0:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a9d4:	f042 0204 	orr.w	r2, r2, #4
 800a9d8:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a9dc:	e770      	b.n	800a8c0 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a9de:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9e0:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a9e4:	f042 0202 	orr.w	r2, r2, #2
 800a9e8:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a9ec:	e75e      	b.n	800a8ac <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9ee:	680f      	ldr	r7, [r1, #0]
 800a9f0:	f027 0704 	bic.w	r7, r7, #4
 800a9f4:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9f6:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9f8:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a9fc:	f042 0201 	orr.w	r2, r2, #1
 800aa00:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800aa04:	e748      	b.n	800a898 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa06:	0312      	lsls	r2, r2, #12
 800aa08:	d5d8      	bpl.n	800a9bc <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa0a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	d1d8      	bne.n	800a9c4 <HAL_DMA_IRQHandler+0x154>
 800aa12:	e75e      	b.n	800a8d2 <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa14:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800aa18:	f47f af72 	bne.w	800a900 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aa1c:	680a      	ldr	r2, [r1, #0]
 800aa1e:	f022 0210 	bic.w	r2, r2, #16
 800aa22:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800aa24:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800aa26:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800aa2a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800aa2e:	e767      	b.n	800a900 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800aa30:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f47f af66 	bne.w	800a906 <HAL_DMA_IRQHandler+0x96>
 800aa3a:	e766      	b.n	800a90a <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa3c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	d19a      	bne.n	800a97a <HAL_DMA_IRQHandler+0x10a>
 800aa44:	e79d      	b.n	800a982 <HAL_DMA_IRQHandler+0x112>
 800aa46:	bf00      	nop
 800aa48:	200002b8 	.word	0x200002b8
 800aa4c:	1b4e81b5 	.word	0x1b4e81b5

0800aa50 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800aa50:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800aa52:	4770      	bx	lr

0800aa54 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	9f08      	ldr	r7, [sp, #32]
 800aa5a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa5c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800aa60:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa62:	1e7d      	subs	r5, r7, #1
{
 800aa64:	4691      	mov	r9, r2
 800aa66:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa68:	4285      	cmp	r5, r0
 800aa6a:	d85f      	bhi.n	800ab2c <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aa6c:	68a0      	ldr	r0, [r4, #8]
 800aa6e:	2880      	cmp	r0, #128	; 0x80
 800aa70:	d063      	beq.n	800ab3a <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800aa72:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	f000 8090 	beq.w	800ab9c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa82:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d005      	beq.n	800aa96 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa8a:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 800aa8c:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800aa8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800aa92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa96:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aa98:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa9a:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aaa0:	f04f 0300 	mov.w	r3, #0
 800aaa4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aaac:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800aaae:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 800aab0:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aab2:	d06a      	beq.n	800ab8a <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800aab4:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800aab8:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aabc:	4b93      	ldr	r3, [pc, #588]	; (800ad0c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800aabe:	429d      	cmp	r5, r3
 800aac0:	d941      	bls.n	800ab46 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 800aac2:	3b48      	subs	r3, #72	; 0x48
 800aac4:	4992      	ldr	r1, [pc, #584]	; (800ad10 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800aac6:	4a93      	ldr	r2, [pc, #588]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800aac8:	429d      	cmp	r5, r3
 800aaca:	bf18      	it	ne
 800aacc:	428d      	cmpne	r5, r1
 800aace:	bf14      	ite	ne
 800aad0:	2301      	movne	r3, #1
 800aad2:	2300      	moveq	r3, #0
 800aad4:	4295      	cmp	r5, r2
 800aad6:	bf0c      	ite	eq
 800aad8:	2300      	moveq	r3, #0
 800aada:	f003 0301 	andne.w	r3, r3, #1
 800aade:	b11b      	cbz	r3, 800aae8 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 800aae0:	4b8d      	ldr	r3, [pc, #564]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800aae2:	429d      	cmp	r5, r3
 800aae4:	f040 812e 	bne.w	800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800aae8:	4b8c      	ldr	r3, [pc, #560]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800aaea:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aaec:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aaee:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aaf0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aaf2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aaf4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aaf6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aaf8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aafa:	2201      	movs	r2, #1
 800aafc:	4b87      	ldr	r3, [pc, #540]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800aafe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab00:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab02:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab04:	f043 0316 	orr.w	r3, r3, #22
 800ab08:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ab0a:	696b      	ldr	r3, [r5, #20]
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab10:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	d03e      	beq.n	800ab94 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	f043 0308 	orr.w	r3, r3, #8
 800ab1c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800ab1e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab20:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	602b      	str	r3, [r5, #0]
}
 800ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800ab2c:	487c      	ldr	r0, [pc, #496]	; (800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800ab2e:	21a1      	movs	r1, #161	; 0xa1
 800ab30:	f7fa fed8 	bl	80058e4 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ab34:	68a0      	ldr	r0, [r4, #8]
 800ab36:	2880      	cmp	r0, #128	; 0x80
 800ab38:	d19b      	bne.n	800aa72 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800ab3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800ab3e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800ab40:	6563      	str	r3, [r4, #84]	; 0x54
}
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab46:	4b77      	ldr	r3, [pc, #476]	; (800ad24 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800ab48:	429d      	cmp	r5, r3
 800ab4a:	d929      	bls.n	800aba0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800ab4c:	3ba8      	subs	r3, #168	; 0xa8
 800ab4e:	4976      	ldr	r1, [pc, #472]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800ab50:	4a70      	ldr	r2, [pc, #448]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ab52:	429d      	cmp	r5, r3
 800ab54:	bf18      	it	ne
 800ab56:	428d      	cmpne	r5, r1
 800ab58:	bf14      	ite	ne
 800ab5a:	2301      	movne	r3, #1
 800ab5c:	2300      	moveq	r3, #0
 800ab5e:	4295      	cmp	r5, r2
 800ab60:	bf0c      	ite	eq
 800ab62:	2300      	moveq	r3, #0
 800ab64:	f003 0301 	andne.w	r3, r3, #1
 800ab68:	b113      	cbz	r3, 800ab70 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800ab6a:	4b6b      	ldr	r3, [pc, #428]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	d15a      	bne.n	800ac26 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800ab70:	4b6a      	ldr	r3, [pc, #424]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab72:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab74:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab76:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab78:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab7a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab7c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab7e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab80:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab82:	2301      	movs	r3, #1
 800ab84:	4a65      	ldr	r2, [pc, #404]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab86:	6093      	str	r3, [r2, #8]
 800ab88:	e7ba      	b.n	800ab00 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 800ab8a:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800ab8e:	f8c5 800c 	str.w	r8, [r5, #12]
 800ab92:	e793      	b.n	800aabc <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1bd      	bne.n	800ab16 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 800ab9a:	e7c0      	b.n	800ab1e <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 800ab9c:	2002      	movs	r0, #2
 800ab9e:	e778      	b.n	800aa92 <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aba0:	4b62      	ldr	r3, [pc, #392]	; (800ad2c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800aba2:	429d      	cmp	r5, r3
 800aba4:	d91f      	bls.n	800abe6 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 800aba6:	3b48      	subs	r3, #72	; 0x48
 800aba8:	495f      	ldr	r1, [pc, #380]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800abaa:	4a5a      	ldr	r2, [pc, #360]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800abac:	429d      	cmp	r5, r3
 800abae:	bf18      	it	ne
 800abb0:	428d      	cmpne	r5, r1
 800abb2:	bf14      	ite	ne
 800abb4:	2301      	movne	r3, #1
 800abb6:	2300      	moveq	r3, #0
 800abb8:	4295      	cmp	r5, r2
 800abba:	bf0c      	ite	eq
 800abbc:	2300      	moveq	r3, #0
 800abbe:	f003 0301 	andne.w	r3, r3, #1
 800abc2:	b11b      	cbz	r3, 800abcc <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800abc4:	4b54      	ldr	r3, [pc, #336]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800abc6:	429d      	cmp	r5, r3
 800abc8:	f040 8152 	bne.w	800ae70 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800abcc:	4b58      	ldr	r3, [pc, #352]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800abce:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abd0:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abd2:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abd4:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abd6:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abd8:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abda:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abdc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abde:	2301      	movs	r3, #1
 800abe0:	4a53      	ldr	r2, [pc, #332]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800abe2:	60d3      	str	r3, [r2, #12]
 800abe4:	e78c      	b.n	800ab00 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abe6:	4b50      	ldr	r3, [pc, #320]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800abe8:	4949      	ldr	r1, [pc, #292]	; (800ad10 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800abea:	4a4a      	ldr	r2, [pc, #296]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800abec:	429d      	cmp	r5, r3
 800abee:	bf18      	it	ne
 800abf0:	428d      	cmpne	r5, r1
 800abf2:	bf14      	ite	ne
 800abf4:	2301      	movne	r3, #1
 800abf6:	2300      	moveq	r3, #0
 800abf8:	4295      	cmp	r5, r2
 800abfa:	bf0c      	ite	eq
 800abfc:	2300      	moveq	r3, #0
 800abfe:	f003 0301 	andne.w	r3, r3, #1
 800ac02:	b11b      	cbz	r3, 800ac0c <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 800ac04:	4b44      	ldr	r3, [pc, #272]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ac06:	429d      	cmp	r5, r3
 800ac08:	f040 80be 	bne.w	800ad88 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 800ac0c:	4b48      	ldr	r3, [pc, #288]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ac0e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac10:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac12:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac14:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac16:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac18:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac1a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac1c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4a43      	ldr	r2, [pc, #268]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ac22:	6093      	str	r3, [r2, #8]
 800ac24:	e76c      	b.n	800ab00 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac26:	3b48      	subs	r3, #72	; 0x48
 800ac28:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ac2c:	3218      	adds	r2, #24
 800ac2e:	429d      	cmp	r5, r3
 800ac30:	bf18      	it	ne
 800ac32:	428d      	cmpne	r5, r1
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	4295      	cmp	r5, r2
 800ac3c:	bf0c      	ite	eq
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	f003 0301 	andne.w	r3, r3, #1
 800ac44:	b11b      	cbz	r3, 800ac4e <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 800ac46:	4b3b      	ldr	r3, [pc, #236]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac48:	429d      	cmp	r5, r3
 800ac4a:	f040 8210 	bne.w	800b06e <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 800ac4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac52:	4b39      	ldr	r3, [pc, #228]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800ac54:	4839      	ldr	r0, [pc, #228]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac56:	4a31      	ldr	r2, [pc, #196]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac58:	429d      	cmp	r5, r3
 800ac5a:	bf18      	it	ne
 800ac5c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac5e:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac60:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 800ac64:	bf14      	ite	ne
 800ac66:	2301      	movne	r3, #1
 800ac68:	2300      	moveq	r3, #0
 800ac6a:	4295      	cmp	r5, r2
 800ac6c:	bf0c      	ite	eq
 800ac6e:	2300      	moveq	r3, #0
 800ac70:	f003 0301 	andne.w	r3, r3, #1
 800ac74:	b11b      	cbz	r3, 800ac7e <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 800ac76:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac78:	429d      	cmp	r5, r3
 800ac7a:	f040 8212 	bne.w	800b0a2 <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800ac7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac82:	4b2d      	ldr	r3, [pc, #180]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800ac84:	482d      	ldr	r0, [pc, #180]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac86:	4925      	ldr	r1, [pc, #148]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac88:	429d      	cmp	r5, r3
 800ac8a:	bf18      	it	ne
 800ac8c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac8e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac90:	bf14      	ite	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	2300      	moveq	r3, #0
 800ac96:	4a2a      	ldr	r2, [pc, #168]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ac98:	4295      	cmp	r5, r2
 800ac9a:	bf0c      	ite	eq
 800ac9c:	2300      	moveq	r3, #0
 800ac9e:	f003 0301 	andne.w	r3, r3, #1
 800aca2:	b11b      	cbz	r3, 800acac <HAL_DMAEx_MultiBufferStart_IT+0x258>
 800aca4:	4b23      	ldr	r3, [pc, #140]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aca6:	429d      	cmp	r5, r3
 800aca8:	f040 822b 	bne.w	800b102 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800acac:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acb0:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800acb2:	4821      	ldr	r0, [pc, #132]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acb4:	4919      	ldr	r1, [pc, #100]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acb6:	429d      	cmp	r5, r3
 800acb8:	bf18      	it	ne
 800acba:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acbc:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acbe:	bf14      	ite	ne
 800acc0:	2301      	movne	r3, #1
 800acc2:	2300      	moveq	r3, #0
 800acc4:	4a1e      	ldr	r2, [pc, #120]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800acc6:	4295      	cmp	r5, r2
 800acc8:	bf0c      	ite	eq
 800acca:	2300      	moveq	r3, #0
 800accc:	f003 0301 	andne.w	r3, r3, #1
 800acd0:	b11b      	cbz	r3, 800acda <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800acd2:	4b18      	ldr	r3, [pc, #96]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800acd4:	429d      	cmp	r5, r3
 800acd6:	f040 81fc 	bne.w	800b0d2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800acda:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800acde:	4b17      	ldr	r3, [pc, #92]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800ace0:	4815      	ldr	r0, [pc, #84]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ace2:	490e      	ldr	r1, [pc, #56]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ace4:	429d      	cmp	r5, r3
 800ace6:	bf18      	it	ne
 800ace8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acea:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800acec:	bf14      	ite	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	2300      	moveq	r3, #0
 800acf2:	4a13      	ldr	r2, [pc, #76]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800acf4:	4295      	cmp	r5, r2
 800acf6:	bf0c      	ite	eq
 800acf8:	2300      	moveq	r3, #0
 800acfa:	f003 0301 	andne.w	r3, r3, #1
 800acfe:	b11b      	cbz	r3, 800ad08 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800ad00:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ad02:	429d      	cmp	r5, r3
 800ad04:	f040 8215 	bne.w	800b132 <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 800ad08:	2340      	movs	r3, #64	; 0x40
 800ad0a:	e73b      	b.n	800ab84 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 800ad0c:	40026458 	.word	0x40026458
 800ad10:	40026010 	.word	0x40026010
 800ad14:	40026070 	.word	0x40026070
 800ad18:	40026470 	.word	0x40026470
 800ad1c:	40026400 	.word	0x40026400
 800ad20:	0802e2d4 	.word	0x0802e2d4
 800ad24:	400260b8 	.word	0x400260b8
 800ad28:	40026410 	.word	0x40026410
 800ad2c:	40026058 	.word	0x40026058
 800ad30:	40026000 	.word	0x40026000
 800ad34:	40026488 	.word	0x40026488
 800ad38:	40026028 	.word	0x40026028
 800ad3c:	40026428 	.word	0x40026428
 800ad40:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad44:	3b48      	subs	r3, #72	; 0x48
 800ad46:	3118      	adds	r1, #24
 800ad48:	3218      	adds	r2, #24
 800ad4a:	429d      	cmp	r5, r3
 800ad4c:	bf18      	it	ne
 800ad4e:	428d      	cmpne	r5, r1
 800ad50:	bf14      	ite	ne
 800ad52:	2301      	movne	r3, #1
 800ad54:	2300      	moveq	r3, #0
 800ad56:	4295      	cmp	r5, r2
 800ad58:	bf0c      	ite	eq
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	f003 0301 	andne.w	r3, r3, #1
 800ad60:	b11b      	cbz	r3, 800ad6a <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800ad62:	4b7d      	ldr	r3, [pc, #500]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ad64:	429d      	cmp	r5, r3
 800ad66:	f040 8103 	bne.w	800af70 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 800ad6a:	4b7c      	ldr	r3, [pc, #496]	; (800af5c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800ad6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad74:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad76:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad7a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad7c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad80:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad82:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad84:	2240      	movs	r2, #64	; 0x40
 800ad86:	e6b9      	b.n	800aafc <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad88:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ad8c:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800ad90:	3218      	adds	r2, #24
 800ad92:	429d      	cmp	r5, r3
 800ad94:	bf18      	it	ne
 800ad96:	428d      	cmpne	r5, r1
 800ad98:	bf14      	ite	ne
 800ad9a:	2301      	movne	r3, #1
 800ad9c:	2300      	moveq	r3, #0
 800ad9e:	4295      	cmp	r5, r2
 800ada0:	bf0c      	ite	eq
 800ada2:	2300      	moveq	r3, #0
 800ada4:	f003 0301 	andne.w	r3, r3, #1
 800ada8:	b11b      	cbz	r3, 800adb2 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800adaa:	4b6b      	ldr	r3, [pc, #428]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800adac:	429d      	cmp	r5, r3
 800adae:	f040 81d8 	bne.w	800b162 <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 800adb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adb6:	4b6a      	ldr	r3, [pc, #424]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800adb8:	486a      	ldr	r0, [pc, #424]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800adba:	4a6b      	ldr	r2, [pc, #428]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adbc:	429d      	cmp	r5, r3
 800adbe:	bf18      	it	ne
 800adc0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800adc2:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adc4:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800adc8:	bf14      	ite	ne
 800adca:	2301      	movne	r3, #1
 800adcc:	2300      	moveq	r3, #0
 800adce:	4295      	cmp	r5, r2
 800add0:	bf0c      	ite	eq
 800add2:	2300      	moveq	r3, #0
 800add4:	f003 0301 	andne.w	r3, r3, #1
 800add8:	b11b      	cbz	r3, 800ade2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800adda:	4b5f      	ldr	r3, [pc, #380]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800addc:	429d      	cmp	r5, r3
 800adde:	f040 81d9 	bne.w	800b194 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800ade2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ade6:	4b5e      	ldr	r3, [pc, #376]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ade8:	485e      	ldr	r0, [pc, #376]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adea:	495f      	ldr	r1, [pc, #380]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adec:	429d      	cmp	r5, r3
 800adee:	bf18      	it	ne
 800adf0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adf2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adf4:	bf14      	ite	ne
 800adf6:	2301      	movne	r3, #1
 800adf8:	2300      	moveq	r3, #0
 800adfa:	4a5c      	ldr	r2, [pc, #368]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800adfc:	4295      	cmp	r5, r2
 800adfe:	bf0c      	ite	eq
 800ae00:	2300      	moveq	r3, #0
 800ae02:	f003 0301 	andne.w	r3, r3, #1
 800ae06:	b11b      	cbz	r3, 800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 800ae08:	4b53      	ldr	r3, [pc, #332]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae0a:	429d      	cmp	r5, r3
 800ae0c:	f040 822c 	bne.w	800b268 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800ae10:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae14:	4b53      	ldr	r3, [pc, #332]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ae16:	4852      	ldr	r0, [pc, #328]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae18:	4953      	ldr	r1, [pc, #332]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf18      	it	ne
 800ae1e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae20:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae22:	bf14      	ite	ne
 800ae24:	2301      	movne	r3, #1
 800ae26:	2300      	moveq	r3, #0
 800ae28:	4a50      	ldr	r2, [pc, #320]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae2a:	4295      	cmp	r5, r2
 800ae2c:	bf0c      	ite	eq
 800ae2e:	2300      	moveq	r3, #0
 800ae30:	f003 0301 	andne.w	r3, r3, #1
 800ae34:	b11b      	cbz	r3, 800ae3e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800ae36:	4b48      	ldr	r3, [pc, #288]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	f040 81db 	bne.w	800b1f4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800ae3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae42:	4b47      	ldr	r3, [pc, #284]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ae44:	4847      	ldr	r0, [pc, #284]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae46:	4948      	ldr	r1, [pc, #288]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae48:	429d      	cmp	r5, r3
 800ae4a:	bf18      	it	ne
 800ae4c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae4e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae50:	bf14      	ite	ne
 800ae52:	2301      	movne	r3, #1
 800ae54:	2300      	moveq	r3, #0
 800ae56:	4a45      	ldr	r2, [pc, #276]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae58:	4295      	cmp	r5, r2
 800ae5a:	bf0c      	ite	eq
 800ae5c:	2300      	moveq	r3, #0
 800ae5e:	f003 0301 	andne.w	r3, r3, #1
 800ae62:	b11b      	cbz	r3, 800ae6c <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800ae64:	4b3c      	ldr	r3, [pc, #240]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae66:	429d      	cmp	r5, r3
 800ae68:	f040 822d 	bne.w	800b2c6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	e6d7      	b.n	800ac20 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae70:	3b48      	subs	r3, #72	; 0x48
 800ae72:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ae76:	3218      	adds	r2, #24
 800ae78:	429d      	cmp	r5, r3
 800ae7a:	bf18      	it	ne
 800ae7c:	428d      	cmpne	r5, r1
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	4295      	cmp	r5, r2
 800ae86:	bf0c      	ite	eq
 800ae88:	2300      	moveq	r3, #0
 800ae8a:	f003 0301 	andne.w	r3, r3, #1
 800ae8e:	b11b      	cbz	r3, 800ae98 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800ae90:	4b31      	ldr	r3, [pc, #196]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae92:	429d      	cmp	r5, r3
 800ae94:	f040 81d0 	bne.w	800b238 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 800ae98:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae9c:	4b31      	ldr	r3, [pc, #196]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ae9e:	4830      	ldr	r0, [pc, #192]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aea0:	4a31      	ldr	r2, [pc, #196]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aea2:	429d      	cmp	r5, r3
 800aea4:	bf18      	it	ne
 800aea6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aea8:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aeaa:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800aeae:	bf14      	ite	ne
 800aeb0:	2301      	movne	r3, #1
 800aeb2:	2300      	moveq	r3, #0
 800aeb4:	4295      	cmp	r5, r2
 800aeb6:	bf0c      	ite	eq
 800aeb8:	2300      	moveq	r3, #0
 800aeba:	f003 0301 	andne.w	r3, r3, #1
 800aebe:	b11b      	cbz	r3, 800aec8 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aec2:	429d      	cmp	r5, r3
 800aec4:	f040 817e 	bne.w	800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800aec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aecc:	4b24      	ldr	r3, [pc, #144]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800aece:	4825      	ldr	r0, [pc, #148]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aed0:	4925      	ldr	r1, [pc, #148]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aed2:	429d      	cmp	r5, r3
 800aed4:	bf18      	it	ne
 800aed6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aed8:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aeda:	bf14      	ite	ne
 800aedc:	2301      	movne	r3, #1
 800aede:	2300      	moveq	r3, #0
 800aee0:	4a22      	ldr	r2, [pc, #136]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800aee2:	4295      	cmp	r5, r2
 800aee4:	bf0c      	ite	eq
 800aee6:	2300      	moveq	r3, #0
 800aee8:	f003 0301 	andne.w	r3, r3, #1
 800aeec:	b11b      	cbz	r3, 800aef6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800aeee:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aef0:	429d      	cmp	r5, r3
 800aef2:	f040 81fe 	bne.w	800b2f2 <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800aef6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800aefc:	4818      	ldr	r0, [pc, #96]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aefe:	491a      	ldr	r1, [pc, #104]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af00:	429d      	cmp	r5, r3
 800af02:	bf18      	it	ne
 800af04:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af06:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af08:	bf14      	ite	ne
 800af0a:	2301      	movne	r3, #1
 800af0c:	2300      	moveq	r3, #0
 800af0e:	4a17      	ldr	r2, [pc, #92]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800af10:	4295      	cmp	r5, r2
 800af12:	bf0c      	ite	eq
 800af14:	2300      	moveq	r3, #0
 800af16:	f003 0301 	andne.w	r3, r3, #1
 800af1a:	b11b      	cbz	r3, 800af24 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800af1e:	429d      	cmp	r5, r3
 800af20:	f040 81ba 	bne.w	800b298 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800af24:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800af2a:	480d      	ldr	r0, [pc, #52]	; (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af2c:	490e      	ldr	r1, [pc, #56]	; (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af2e:	429d      	cmp	r5, r3
 800af30:	bf18      	it	ne
 800af32:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af34:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	4a0b      	ldr	r2, [pc, #44]	; (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800af3e:	4295      	cmp	r5, r2
 800af40:	bf0c      	ite	eq
 800af42:	2300      	moveq	r3, #0
 800af44:	f003 0301 	andne.w	r3, r3, #1
 800af48:	b11b      	cbz	r3, 800af52 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800af4a:	4b03      	ldr	r3, [pc, #12]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800af4c:	429d      	cmp	r5, r3
 800af4e:	f040 81e6 	bne.w	800b31e <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800af52:	2340      	movs	r3, #64	; 0x40
 800af54:	e644      	b.n	800abe0 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800af56:	bf00      	nop
 800af58:	40026488 	.word	0x40026488
 800af5c:	40026400 	.word	0x40026400
 800af60:	40026428 	.word	0x40026428
 800af64:	40026028 	.word	0x40026028
 800af68:	40026000 	.word	0x40026000
 800af6c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af70:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800af74:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800af78:	3218      	adds	r2, #24
 800af7a:	429d      	cmp	r5, r3
 800af7c:	bf18      	it	ne
 800af7e:	428d      	cmpne	r5, r1
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	4295      	cmp	r5, r2
 800af88:	bf0c      	ite	eq
 800af8a:	2300      	moveq	r3, #0
 800af8c:	f003 0301 	andne.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 81e6 	beq.w	800b362 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800af96:	4ba3      	ldr	r3, [pc, #652]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af98:	429d      	cmp	r5, r3
 800af9a:	f000 81e2 	beq.w	800b362 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800af9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afa2:	4ba1      	ldr	r3, [pc, #644]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afa4:	48a1      	ldr	r0, [pc, #644]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800afa6:	4aa2      	ldr	r2, [pc, #648]	; (800b230 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afa8:	429d      	cmp	r5, r3
 800afaa:	bf18      	it	ne
 800afac:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800afae:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afb0:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800afb4:	bf14      	ite	ne
 800afb6:	2301      	movne	r3, #1
 800afb8:	2300      	moveq	r3, #0
 800afba:	4295      	cmp	r5, r2
 800afbc:	bf0c      	ite	eq
 800afbe:	2300      	moveq	r3, #0
 800afc0:	f003 0301 	andne.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 81c9 	beq.w	800b35c <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800afca:	4b96      	ldr	r3, [pc, #600]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800afcc:	429d      	cmp	r5, r3
 800afce:	f000 81c5 	beq.w	800b35c <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800afd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800afd6:	4b94      	ldr	r3, [pc, #592]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afd8:	4894      	ldr	r0, [pc, #592]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afda:	4995      	ldr	r1, [pc, #596]	; (800b230 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800afdc:	429d      	cmp	r5, r3
 800afde:	bf18      	it	ne
 800afe0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afe2:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	4a92      	ldr	r2, [pc, #584]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800afec:	4295      	cmp	r5, r2
 800afee:	bf0c      	ite	eq
 800aff0:	2300      	moveq	r3, #0
 800aff2:	f003 0301 	andne.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 81ad 	beq.w	800b356 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800affc:	4b89      	ldr	r3, [pc, #548]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800affe:	429d      	cmp	r5, r3
 800b000:	f000 81a9 	beq.w	800b356 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800b004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b008:	4b87      	ldr	r3, [pc, #540]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b00a:	4888      	ldr	r0, [pc, #544]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b00c:	4988      	ldr	r1, [pc, #544]	; (800b230 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b00e:	429d      	cmp	r5, r3
 800b010:	bf18      	it	ne
 800b012:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b014:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	4a85      	ldr	r2, [pc, #532]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b01e:	4295      	cmp	r5, r2
 800b020:	bf0c      	ite	eq
 800b022:	2300      	moveq	r3, #0
 800b024:	f003 0301 	andne.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8191 	beq.w	800b350 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800b02e:	4b7d      	ldr	r3, [pc, #500]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b030:	429d      	cmp	r5, r3
 800b032:	f000 818d 	beq.w	800b350 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800b036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b03a:	4b7b      	ldr	r3, [pc, #492]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b03c:	487b      	ldr	r0, [pc, #492]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b03e:	497c      	ldr	r1, [pc, #496]	; (800b230 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b040:	429d      	cmp	r5, r3
 800b042:	bf18      	it	ne
 800b044:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b046:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b048:	bf14      	ite	ne
 800b04a:	2301      	movne	r3, #1
 800b04c:	2300      	moveq	r3, #0
 800b04e:	4a79      	ldr	r2, [pc, #484]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b050:	4295      	cmp	r5, r2
 800b052:	bf0c      	ite	eq
 800b054:	2300      	moveq	r3, #0
 800b056:	f003 0301 	andne.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 8174 	beq.w	800b348 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800b060:	4b70      	ldr	r3, [pc, #448]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b062:	429d      	cmp	r5, r3
 800b064:	f000 8170 	beq.w	800b348 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800b068:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b06c:	e546      	b.n	800aafc <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b06e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800b072:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800b076:	3218      	adds	r2, #24
 800b078:	429d      	cmp	r5, r3
 800b07a:	bf18      	it	ne
 800b07c:	428d      	cmpne	r5, r1
 800b07e:	bf14      	ite	ne
 800b080:	2301      	movne	r3, #1
 800b082:	2300      	moveq	r3, #0
 800b084:	4295      	cmp	r5, r2
 800b086:	bf0c      	ite	eq
 800b088:	2300      	moveq	r3, #0
 800b08a:	f003 0301 	andne.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 816d 	beq.w	800b36e <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b094:	4b63      	ldr	r3, [pc, #396]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b096:	429d      	cmp	r5, r3
 800b098:	f000 8169 	beq.w	800b36e <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b09c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b0a0:	e5d7      	b.n	800ac52 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b0a2:	4b62      	ldr	r3, [pc, #392]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b0a4:	4960      	ldr	r1, [pc, #384]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b0a6:	4a63      	ldr	r2, [pc, #396]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0a8:	429d      	cmp	r5, r3
 800b0aa:	bf18      	it	ne
 800b0ac:	428d      	cmpne	r5, r1
 800b0ae:	bf14      	ite	ne
 800b0b0:	2301      	movne	r3, #1
 800b0b2:	2300      	moveq	r3, #0
 800b0b4:	4295      	cmp	r5, r2
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2300      	moveq	r3, #0
 800b0ba:	f003 0301 	andne.w	r3, r3, #1
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 815b 	beq.w	800b37a <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b0c4:	4b57      	ldr	r3, [pc, #348]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	f000 8157 	beq.w	800b37a <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b0cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b0d0:	e5d7      	b.n	800ac82 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b0d2:	4b55      	ldr	r3, [pc, #340]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b0d4:	4955      	ldr	r1, [pc, #340]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b0d6:	4a57      	ldr	r2, [pc, #348]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0d8:	429d      	cmp	r5, r3
 800b0da:	bf18      	it	ne
 800b0dc:	428d      	cmpne	r5, r1
 800b0de:	bf14      	ite	ne
 800b0e0:	2301      	movne	r3, #1
 800b0e2:	2300      	moveq	r3, #0
 800b0e4:	4295      	cmp	r5, r2
 800b0e6:	bf0c      	ite	eq
 800b0e8:	2300      	moveq	r3, #0
 800b0ea:	f003 0301 	andne.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 8140 	beq.w	800b374 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b0f4:	4b4b      	ldr	r3, [pc, #300]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	f000 813c 	beq.w	800b374 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b0fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b100:	e5ed      	b.n	800acde <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b102:	4b49      	ldr	r3, [pc, #292]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b104:	4949      	ldr	r1, [pc, #292]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b106:	4a4b      	ldr	r2, [pc, #300]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b108:	429d      	cmp	r5, r3
 800b10a:	bf18      	it	ne
 800b10c:	428d      	cmpne	r5, r1
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	4295      	cmp	r5, r2
 800b116:	bf0c      	ite	eq
 800b118:	2300      	moveq	r3, #0
 800b11a:	f003 0301 	andne.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 812e 	beq.w	800b380 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b124:	4b3f      	ldr	r3, [pc, #252]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b126:	429d      	cmp	r5, r3
 800b128:	f000 812a 	beq.w	800b380 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b12c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b130:	e5be      	b.n	800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b132:	4b3d      	ldr	r3, [pc, #244]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b134:	493d      	ldr	r1, [pc, #244]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b136:	4a3f      	ldr	r2, [pc, #252]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b138:	429d      	cmp	r5, r3
 800b13a:	bf18      	it	ne
 800b13c:	428d      	cmpne	r5, r1
 800b13e:	bf14      	ite	ne
 800b140:	2301      	movne	r3, #1
 800b142:	2300      	moveq	r3, #0
 800b144:	4295      	cmp	r5, r2
 800b146:	bf0c      	ite	eq
 800b148:	2300      	moveq	r3, #0
 800b14a:	f003 0301 	andne.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 810a 	beq.w	800b368 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b154:	4b33      	ldr	r3, [pc, #204]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b156:	429d      	cmp	r5, r3
 800b158:	f000 8106 	beq.w	800b368 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b15c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b160:	e510      	b.n	800ab84 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b162:	3b48      	subs	r3, #72	; 0x48
 800b164:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800b168:	3218      	adds	r2, #24
 800b16a:	429d      	cmp	r5, r3
 800b16c:	bf18      	it	ne
 800b16e:	428d      	cmpne	r5, r1
 800b170:	bf14      	ite	ne
 800b172:	2301      	movne	r3, #1
 800b174:	2300      	moveq	r3, #0
 800b176:	4295      	cmp	r5, r2
 800b178:	bf0c      	ite	eq
 800b17a:	2300      	moveq	r3, #0
 800b17c:	f003 0301 	andne.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 8112 	beq.w	800b3aa <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b186:	4b27      	ldr	r3, [pc, #156]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b188:	429d      	cmp	r5, r3
 800b18a:	f000 810e 	beq.w	800b3aa <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b18e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b192:	e610      	b.n	800adb6 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b194:	4b24      	ldr	r3, [pc, #144]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b196:	4925      	ldr	r1, [pc, #148]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b198:	4a26      	ldr	r2, [pc, #152]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b19a:	429d      	cmp	r5, r3
 800b19c:	bf18      	it	ne
 800b19e:	428d      	cmpne	r5, r1
 800b1a0:	bf14      	ite	ne
 800b1a2:	2301      	movne	r3, #1
 800b1a4:	2300      	moveq	r3, #0
 800b1a6:	4295      	cmp	r5, r2
 800b1a8:	bf0c      	ite	eq
 800b1aa:	2300      	moveq	r3, #0
 800b1ac:	f003 0301 	andne.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 80ee 	beq.w	800b392 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b1b6:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	f000 80ea 	beq.w	800b392 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b1be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b1c2:	e610      	b.n	800ade6 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800b1c4:	4b19      	ldr	r3, [pc, #100]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b1c6:	4918      	ldr	r1, [pc, #96]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b1c8:	4a1a      	ldr	r2, [pc, #104]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b1ca:	429d      	cmp	r5, r3
 800b1cc:	bf18      	it	ne
 800b1ce:	428d      	cmpne	r5, r1
 800b1d0:	bf14      	ite	ne
 800b1d2:	2301      	movne	r3, #1
 800b1d4:	2300      	moveq	r3, #0
 800b1d6:	4295      	cmp	r5, r2
 800b1d8:	bf0c      	ite	eq
 800b1da:	2300      	moveq	r3, #0
 800b1dc:	f003 0301 	andne.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 80e8 	beq.w	800b3b6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b1e8:	429d      	cmp	r5, r3
 800b1ea:	f000 80e4 	beq.w	800b3b6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b1ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b1f2:	e66b      	b.n	800aecc <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b1f4:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b1f6:	490c      	ldr	r1, [pc, #48]	; (800b228 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b1f8:	4a0e      	ldr	r2, [pc, #56]	; (800b234 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	bf18      	it	ne
 800b1fe:	428d      	cmpne	r5, r1
 800b200:	bf14      	ite	ne
 800b202:	2301      	movne	r3, #1
 800b204:	2300      	moveq	r3, #0
 800b206:	4295      	cmp	r5, r2
 800b208:	bf0c      	ite	eq
 800b20a:	2300      	moveq	r3, #0
 800b20c:	f003 0301 	andne.w	r3, r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 80bb 	beq.w	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b216:	4b03      	ldr	r3, [pc, #12]	; (800b224 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b218:	429d      	cmp	r5, r3
 800b21a:	f000 80b7 	beq.w	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b21e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b222:	e60e      	b.n	800ae42 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800b224:	400264a0 	.word	0x400264a0
 800b228:	40026040 	.word	0x40026040
 800b22c:	40026440 	.word	0x40026440
 800b230:	40026400 	.word	0x40026400
 800b234:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b238:	3b48      	subs	r3, #72	; 0x48
 800b23a:	3118      	adds	r1, #24
 800b23c:	3218      	adds	r2, #24
 800b23e:	429d      	cmp	r5, r3
 800b240:	bf18      	it	ne
 800b242:	428d      	cmpne	r5, r1
 800b244:	bf14      	ite	ne
 800b246:	2301      	movne	r3, #1
 800b248:	2300      	moveq	r3, #0
 800b24a:	4295      	cmp	r5, r2
 800b24c:	bf0c      	ite	eq
 800b24e:	2300      	moveq	r3, #0
 800b250:	f003 0301 	andne.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 80ab 	beq.w	800b3b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b25a:	4b5a      	ldr	r3, [pc, #360]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b25c:	429d      	cmp	r5, r3
 800b25e:	f000 80a7 	beq.w	800b3b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b262:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b266:	e619      	b.n	800ae9c <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b268:	4b57      	ldr	r3, [pc, #348]	; (800b3c8 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b26a:	4958      	ldr	r1, [pc, #352]	; (800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b26c:	4a58      	ldr	r2, [pc, #352]	; (800b3d0 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b26e:	429d      	cmp	r5, r3
 800b270:	bf18      	it	ne
 800b272:	428d      	cmpne	r5, r1
 800b274:	bf14      	ite	ne
 800b276:	2301      	movne	r3, #1
 800b278:	2300      	moveq	r3, #0
 800b27a:	4295      	cmp	r5, r2
 800b27c:	bf0c      	ite	eq
 800b27e:	2300      	moveq	r3, #0
 800b280:	f003 0301 	andne.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 808a 	beq.w	800b39e <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b28a:	4b4e      	ldr	r3, [pc, #312]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b28c:	429d      	cmp	r5, r3
 800b28e:	f000 8086 	beq.w	800b39e <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b296:	e5bd      	b.n	800ae14 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b298:	4b4c      	ldr	r3, [pc, #304]	; (800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b29a:	494b      	ldr	r1, [pc, #300]	; (800b3c8 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b29c:	4a4c      	ldr	r2, [pc, #304]	; (800b3d0 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b29e:	429d      	cmp	r5, r3
 800b2a0:	bf18      	it	ne
 800b2a2:	428d      	cmpne	r5, r1
 800b2a4:	bf14      	ite	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	2300      	moveq	r3, #0
 800b2aa:	4295      	cmp	r5, r2
 800b2ac:	bf0c      	ite	eq
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	f003 0301 	andne.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 8081 	beq.w	800b3bc <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b2ba:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	d07d      	beq.n	800b3bc <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b2c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2c4:	e630      	b.n	800af28 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b2c6:	4b40      	ldr	r3, [pc, #256]	; (800b3c8 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b2c8:	4940      	ldr	r1, [pc, #256]	; (800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b2ca:	4a41      	ldr	r2, [pc, #260]	; (800b3d0 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	bf18      	it	ne
 800b2d0:	428d      	cmpne	r5, r1
 800b2d2:	bf14      	ite	ne
 800b2d4:	2301      	movne	r3, #1
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	4295      	cmp	r5, r2
 800b2da:	bf0c      	ite	eq
 800b2dc:	2300      	moveq	r3, #0
 800b2de:	f003 0301 	andne.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d058      	beq.n	800b398 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b2e6:	4b37      	ldr	r3, [pc, #220]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2e8:	429d      	cmp	r5, r3
 800b2ea:	d055      	beq.n	800b398 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b2ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2f0:	e496      	b.n	800ac20 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b2f2:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b2f4:	4935      	ldr	r1, [pc, #212]	; (800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b2f6:	4a36      	ldr	r2, [pc, #216]	; (800b3d0 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b2f8:	429d      	cmp	r5, r3
 800b2fa:	bf18      	it	ne
 800b2fc:	428d      	cmpne	r5, r1
 800b2fe:	bf14      	ite	ne
 800b300:	2301      	movne	r3, #1
 800b302:	2300      	moveq	r3, #0
 800b304:	4295      	cmp	r5, r2
 800b306:	bf0c      	ite	eq
 800b308:	2300      	moveq	r3, #0
 800b30a:	f003 0301 	andne.w	r3, r3, #1
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d048      	beq.n	800b3a4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b312:	4b2c      	ldr	r3, [pc, #176]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b314:	429d      	cmp	r5, r3
 800b316:	d045      	beq.n	800b3a4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b31c:	e5ed      	b.n	800aefa <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b31e:	4b2a      	ldr	r3, [pc, #168]	; (800b3c8 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b320:	492a      	ldr	r1, [pc, #168]	; (800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b322:	4a2b      	ldr	r2, [pc, #172]	; (800b3d0 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b324:	429d      	cmp	r5, r3
 800b326:	bf18      	it	ne
 800b328:	428d      	cmpne	r5, r1
 800b32a:	bf14      	ite	ne
 800b32c:	2301      	movne	r3, #1
 800b32e:	2300      	moveq	r3, #0
 800b330:	4295      	cmp	r5, r2
 800b332:	bf0c      	ite	eq
 800b334:	2300      	moveq	r3, #0
 800b336:	f003 0301 	andne.w	r3, r3, #1
 800b33a:	b323      	cbz	r3, 800b386 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b33c:	4b21      	ldr	r3, [pc, #132]	; (800b3c4 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b33e:	429d      	cmp	r5, r3
 800b340:	d021      	beq.n	800b386 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b346:	e44b      	b.n	800abe0 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800b348:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b34c:	f7ff bbd6 	b.w	800aafc <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b350:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b354:	e671      	b.n	800b03a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b356:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b35a:	e655      	b.n	800b008 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b35c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b360:	e639      	b.n	800afd6 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b366:	e61c      	b.n	800afa2 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b36c:	e40a      	b.n	800ab84 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b36e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b372:	e46e      	b.n	800ac52 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b374:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b378:	e4b1      	b.n	800acde <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b37a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b37e:	e480      	b.n	800ac82 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b380:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b384:	e494      	b.n	800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b38a:	e429      	b.n	800abe0 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b38c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b390:	e557      	b.n	800ae42 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b392:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b396:	e526      	b.n	800ade6 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b39c:	e440      	b.n	800ac20 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b39e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b3a2:	e537      	b.n	800ae14 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800b3a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b3a8:	e5a7      	b.n	800aefa <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b3aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3ae:	e502      	b.n	800adb6 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800b3b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3b4:	e572      	b.n	800ae9c <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b3b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3ba:	e587      	b.n	800aecc <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b3bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b3c0:	e5b2      	b.n	800af28 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800b3c2:	bf00      	nop
 800b3c4:	400264a0 	.word	0x400264a0
 800b3c8:	40026040 	.word	0x40026040
 800b3cc:	40026440 	.word	0x40026440
 800b3d0:	400260a0 	.word	0x400260a0

0800b3d4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	d15b      	bne.n	800b494 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800b3dc:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800b3e0:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b3e2:	69e3      	ldr	r3, [r4, #28]
 800b3e4:	b90b      	cbnz	r3, 800b3ea <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800b3e6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800b3ea:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3ec:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b3ee:	4b2e      	ldr	r3, [pc, #184]	; (800b4a8 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800b3f0:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b3f2:	402b      	ands	r3, r5
 800b3f4:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b3f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b3fa:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b3fc:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3fe:	f7fd ffbb 	bl	8009378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b402:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b404:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b406:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800b408:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b40a:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b40c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800b40e:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b410:	f7fd ffb2 	bl	8009378 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b414:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b416:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b41a:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800b41c:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b41e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b420:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800b422:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b424:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b42a:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800b42c:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b42e:	f7fd ffa3 	bl	8009378 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b432:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b434:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800b436:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b438:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800b43a:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b43c:	f7fd ff9c 	bl	8009378 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b440:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b442:	491a      	ldr	r1, [pc, #104]	; (800b4ac <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b444:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800b448:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b44a:	4a19      	ldr	r2, [pc, #100]	; (800b4b0 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b44c:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b44e:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b450:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b452:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b454:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800b456:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b458:	f7fd ff8e 	bl	8009378 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b45c:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b45e:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b460:	4a14      	ldr	r2, [pc, #80]	; (800b4b4 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800b462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b466:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b468:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800b46a:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b46c:	f7fd ff84 	bl	8009378 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b470:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b472:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800b474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b478:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800b47a:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b47c:	d103      	bne.n	800b486 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b47e:	69d9      	ldr	r1, [r3, #28]
 800b480:	4a0d      	ldr	r2, [pc, #52]	; (800b4b8 <ETH_MACDMAConfig+0xe4>)
 800b482:	430a      	orrs	r2, r1
 800b484:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b486:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b488:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b48a:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b48c:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b48e:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b490:	645a      	str	r2, [r3, #68]	; 0x44
}
 800b492:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b494:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800b498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b49c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800b4a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800b4a4:	e79d      	b.n	800b3e2 <ETH_MACDMAConfig+0xe>
 800b4a6:	bf00      	nop
 800b4a8:	ff20810f 	.word	0xff20810f
 800b4ac:	f8de3f23 	.word	0xf8de3f23
 800b4b0:	02200004 	.word	0x02200004
 800b4b4:	02c12080 	.word	0x02c12080
 800b4b8:	00010040 	.word	0x00010040
 800b4bc:	40028000 	.word	0x40028000

0800b4c0 <HAL_ETH_DMATxDescListInit>:
{
 800b4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c4:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800b4c6:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b4ca:	2801      	cmp	r0, #1
 800b4cc:	d03b      	beq.n	800b546 <HAL_ETH_DMATxDescListInit+0x86>
 800b4ce:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b4d2:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800b4d4:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800b4d8:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b4dc:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800b4e0:	b31b      	cbz	r3, 800b52a <HAL_ETH_DMATxDescListInit+0x6a>
 800b4e2:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b4e4:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800b4e8:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b4ec:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b4ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800b4f2:	f10c 36ff 	add.w	r6, ip, #4294967295
 800b4f6:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b4fa:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b4fc:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b4fe:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b500:	f1ba 0f00 	cmp.w	sl, #0
 800b504:	d103      	bne.n	800b50e <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b506:	6817      	ldr	r7, [r2, #0]
 800b508:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800b50c:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800b50e:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800b510:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800b514:	bf34      	ite	cc
 800b516:	4675      	movcc	r5, lr
 800b518:	f102 0e20 	addcs.w	lr, r2, #32
 800b51c:	4563      	cmp	r3, ip
 800b51e:	60d5      	str	r5, [r2, #12]
 800b520:	f10c 0501 	add.w	r5, ip, #1
 800b524:	4672      	mov	r2, lr
 800b526:	46ac      	mov	ip, r5
 800b528:	d8e3      	bhi.n	800b4f2 <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b52a:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800b52e:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b530:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b536:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800b538:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800b53c:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b53e:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800b542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800b546:	2002      	movs	r0, #2
}
 800b548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b54c <HAL_ETH_DMARxDescListInit>:
{
 800b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b550:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800b552:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b556:	2801      	cmp	r0, #1
 800b558:	d033      	beq.n	800b5c2 <HAL_ETH_DMARxDescListInit+0x76>
 800b55a:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b55e:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800b560:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800b562:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b566:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800b56a:	b1eb      	cbz	r3, 800b5a8 <HAL_ETH_DMARxDescListInit+0x5c>
 800b56c:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800b56e:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b572:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b574:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b578:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800b57c:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b580:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b582:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800b584:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800b588:	45c6      	cmp	lr, r8
 800b58a:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b58e:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b590:	bf34      	ite	cc
 800b592:	4675      	movcc	r5, lr
 800b594:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800b598:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b59a:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800b59c:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800b59e:	f10c 0501 	add.w	r5, ip, #1
 800b5a2:	4672      	mov	r2, lr
 800b5a4:	46ac      	mov	ip, r5
 800b5a6:	d8e9      	bhi.n	800b57c <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b5a8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800b5aa:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b5ac:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b2:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800b5b4:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800b5b8:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b5ba:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800b5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800b5c2:	2002      	movs	r0, #2
}
 800b5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5c8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800b5c8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d078      	beq.n	800b6c2 <HAL_ETH_TransmitFrame+0xfa>
 800b5d0:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800b5d8:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b5dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800b5e0:	2900      	cmp	r1, #0
 800b5e2:	d03c      	beq.n	800b65e <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b5e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b5e6:	6818      	ldr	r0, [r3, #0]
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	db60      	blt.n	800b6ae <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b5ec:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800b5f0:	4281      	cmp	r1, r0
{
 800b5f2:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b5f4:	d93c      	bls.n	800b670 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b5f6:	4c34      	ldr	r4, [pc, #208]	; (800b6c8 <HAL_ETH_TransmitFrame+0x100>)
 800b5f8:	fba4 4c01 	umull	r4, ip, r4, r1
 800b5fc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b600:	fb00 101c 	mls	r0, r0, ip, r1
 800b604:	2800      	cmp	r0, #0
 800b606:	d030      	beq.n	800b66a <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800b608:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b60c:	482f      	ldr	r0, [pc, #188]	; (800b6cc <HAL_ETH_TransmitFrame+0x104>)
 800b60e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800b612:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b614:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b618:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800b61c:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b620:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800b624:	e00f      	b.n	800b646 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800b626:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b628:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800b62a:	d104      	bne.n	800b636 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b62c:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b62e:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b630:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b634:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b636:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800b638:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b63a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800b63e:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b640:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b642:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800b644:	d03b      	beq.n	800b6be <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800b64c:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d1e9      	bne.n	800b626 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b652:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b654:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b656:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800b65a:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800b65c:	e7eb      	b.n	800b636 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800b65e:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800b660:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b664:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800b668:	4770      	bx	lr
  if (bufcount == 1)
 800b66a:	f1bc 0f01 	cmp.w	ip, #1
 800b66e:	d1cd      	bne.n	800b60c <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b670:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b672:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b676:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b678:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b67c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b67e:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b680:	6819      	ldr	r1, [r3, #0]
 800b682:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b686:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b688:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b68a:	6813      	ldr	r3, [r2, #0]
 800b68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b690:	6959      	ldr	r1, [r3, #20]
 800b692:	0749      	lsls	r1, r1, #29
 800b694:	d503      	bpl.n	800b69e <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b696:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800b698:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b69a:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800b69c:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800b69e:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800b6a0:	2101      	movs	r1, #1
  return HAL_OK;
 800b6a2:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b6a4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b6a8:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800b6ac:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b6ae:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800b6b0:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b6b2:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b6b4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b6b8:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800b6bc:	4770      	bx	lr
 800b6be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6c0:	e7e3      	b.n	800b68a <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800b6c2:	2002      	movs	r0, #2
}
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	ac02b00b 	.word	0xac02b00b
 800b6cc:	fffffa0c 	.word	0xfffffa0c

0800b6d0 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800b6d0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d02f      	beq.n	800b738 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800b6d8:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b6da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b6dc:	4602      	mov	r2, r0
{
 800b6de:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800b6e0:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b6e2:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800b6e6:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	2900      	cmp	r1, #0
 800b6ee:	db15      	blt.n	800b71c <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800b6f0:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b6f2:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800b6f4:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b6f6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b6fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b6fe:	d016      	beq.n	800b72e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b700:	6819      	ldr	r1, [r3, #0]
 800b702:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800b706:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b708:	d118      	bne.n	800b73c <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b70a:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800b70c:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b70e:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800b710:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	2900      	cmp	r1, #0
 800b716:	db01      	blt.n	800b71c <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800b718:	2804      	cmp	r0, #4
 800b71a:	d1ea      	bne.n	800b6f2 <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800b71c:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800b71e:	2100      	movs	r1, #0
  return HAL_ERROR;
 800b720:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b722:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b726:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800b72a:	bc30      	pop	{r4, r5}
 800b72c:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b72e:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b730:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800b732:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b734:	6293      	str	r3, [r2, #40]	; 0x28
 800b736:	e7ec      	b.n	800b712 <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800b738:	2002      	movs	r0, #2
}
 800b73a:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800b73c:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800b73e:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b740:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800b742:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b744:	d011      	beq.n	800b76a <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b746:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b748:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800b74a:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b74c:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b74e:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b750:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800b754:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b756:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b758:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b75a:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800b75c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800b760:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b762:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800b764:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800b768:	e7df      	b.n	800b72a <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b76a:	4618      	mov	r0, r3
 800b76c:	6313      	str	r3, [r2, #48]	; 0x30
 800b76e:	e7eb      	b.n	800b748 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800b770 <HAL_ETH_TxCpltCallback>:
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop

0800b774 <HAL_ETH_ErrorCallback>:
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop

0800b778 <HAL_ETH_IRQHandler>:
{
 800b778:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b77a:	6803      	ldr	r3, [r0, #0]
{
 800b77c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b782:	695d      	ldr	r5, [r3, #20]
 800b784:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800b788:	d125      	bne.n	800b7d6 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	07d2      	lsls	r2, r2, #31
 800b78e:	d416      	bmi.n	800b7be <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800b790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b794:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	041b      	lsls	r3, r3, #16
 800b79a:	d400      	bmi.n	800b79e <HAL_ETH_IRQHandler+0x26>
}
 800b79c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7ff ffe8 	bl	800b774 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800b7aa:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b7b0:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7b2:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b7b4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b7b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800b7be:	f7ff ffd7 	bl	800b770 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ca:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b7cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b7d0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b7d4:	e7dc      	b.n	800b790 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800b7d6:	f009 ff4f 	bl	8015678 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800b7de:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b7e4:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b7e6:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b7e8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b7ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b7f0:	e7ce      	b.n	800b790 <HAL_ETH_IRQHandler+0x18>
 800b7f2:	bf00      	nop

0800b7f4 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b7f4:	8a03      	ldrh	r3, [r0, #16]
 800b7f6:	2b20      	cmp	r3, #32
{
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	460e      	mov	r6, r1
 800b7fe:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b800:	d834      	bhi.n	800b86c <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b806:	2b82      	cmp	r3, #130	; 0x82
 800b808:	d039      	beq.n	800b87e <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b80a:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800b80c:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b80e:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b810:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b814:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b816:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b81a:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b81c:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b81e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b822:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b824:	430b      	orrs	r3, r1
 800b826:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b828:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800b82c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b82e:	f7fd fd9d 	bl	800936c <HAL_GetTick>
 800b832:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b834:	e004      	b.n	800b840 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800b836:	6821      	ldr	r1, [r4, #0]
 800b838:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b83a:	f013 0301 	ands.w	r3, r3, #1
 800b83e:	d00d      	beq.n	800b85c <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b840:	f7fd fd94 	bl	800936c <HAL_GetTick>
 800b844:	1b83      	subs	r3, r0, r6
 800b846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b84a:	d3f4      	bcc.n	800b836 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800b84c:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b84e:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b850:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b852:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b85c:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b85e:	2101      	movs	r1, #1
  return HAL_OK;
 800b860:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b862:	b292      	uxth	r2, r2
 800b864:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800b866:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b86c:	f240 5116 	movw	r1, #1302	; 0x516
 800b870:	4804      	ldr	r0, [pc, #16]	; (800b884 <HAL_ETH_ReadPHYRegister+0x90>)
 800b872:	f7fa f837 	bl	80058e4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b876:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b87a:	2b82      	cmp	r3, #130	; 0x82
 800b87c:	d1c5      	bne.n	800b80a <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800b87e:	2002      	movs	r0, #2
}
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	bf00      	nop
 800b884:	0802e310 	.word	0x0802e310

0800b888 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b888:	8a03      	ldrh	r3, [r0, #16]
 800b88a:	2b20      	cmp	r3, #32
{
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b894:	d833      	bhi.n	800b8fe <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b896:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b89a:	2b42      	cmp	r3, #66	; 0x42
 800b89c:	d038      	beq.n	800b910 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b89e:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800b8a0:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8a2:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b8a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b8a8:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8aa:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8ac:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b8b0:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8b2:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b8b4:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b8b6:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8ba:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b8c0:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800b8c4:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b8c6:	f7fd fd51 	bl	800936c <HAL_GetTick>
 800b8ca:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b8cc:	e004      	b.n	800b8d8 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b8d2:	f013 0301 	ands.w	r3, r3, #1
 800b8d6:	d00d      	beq.n	800b8f4 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b8d8:	f7fd fd48 	bl	800936c <HAL_GetTick>
 800b8dc:	1b43      	subs	r3, r0, r5
 800b8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e2:	d3f4      	bcc.n	800b8ce <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800b8e4:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b8e6:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b8e8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b8ea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b8ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800b8f4:	2201      	movs	r2, #1
  return HAL_OK; 
 800b8f6:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b8f8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b8fe:	f240 515e 	movw	r1, #1374	; 0x55e
 800b902:	4804      	ldr	r0, [pc, #16]	; (800b914 <HAL_ETH_WritePHYRegister+0x8c>)
 800b904:	f7f9 ffee 	bl	80058e4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b908:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b90c:	2b42      	cmp	r3, #66	; 0x42
 800b90e:	d1c6      	bne.n	800b89e <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800b910:	2002      	movs	r0, #2
}
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	0802e310 	.word	0x0802e310

0800b918 <HAL_ETH_Init>:
{
 800b918:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800b91a:	2300      	movs	r3, #0
{
 800b91c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800b91e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800b920:	2800      	cmp	r0, #0
 800b922:	f000 80f5 	beq.w	800bb10 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800b926:	6843      	ldr	r3, [r0, #4]
 800b928:	4604      	mov	r4, r0
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	f200 809c 	bhi.w	800ba68 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b930:	69a3      	ldr	r3, [r4, #24]
 800b932:	2b01      	cmp	r3, #1
 800b934:	f200 808f 	bhi.w	800ba56 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b938:	69e3      	ldr	r3, [r4, #28]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d873      	bhi.n	800ba26 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b93e:	6a23      	ldr	r3, [r4, #32]
 800b940:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b944:	d177      	bne.n	800ba36 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b946:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b94a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d07b      	beq.n	800ba4a <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b952:	4b91      	ldr	r3, [pc, #580]	; (800bb98 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b954:	4a91      	ldr	r2, [pc, #580]	; (800bb9c <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b956:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b958:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b95c:	6459      	str	r1, [r3, #68]	; 0x44
 800b95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b968:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b96a:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b96c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b974:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b976:	6851      	ldr	r1, [r2, #4]
 800b978:	6a20      	ldr	r0, [r4, #32]
 800b97a:	4301      	orrs	r1, r0
 800b97c:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	f042 0201 	orr.w	r2, r2, #1
 800b984:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b986:	f7fd fcf1 	bl	800936c <HAL_GetTick>
 800b98a:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b98c:	e005      	b.n	800b99a <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b98e:	f7fd fced 	bl	800936c <HAL_GetTick>
 800b992:	1b43      	subs	r3, r0, r5
 800b994:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b998:	d86f      	bhi.n	800ba7a <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800b9a0:	6812      	ldr	r2, [r2, #0]
 800b9a2:	07d0      	lsls	r0, r2, #31
 800b9a4:	d4f3      	bmi.n	800b98e <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800b9a6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800b9a8:	f003 faac 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b9ac:	4b7c      	ldr	r3, [pc, #496]	; (800bba0 <HAL_ETH_Init+0x288>)
 800b9ae:	4a7d      	ldr	r2, [pc, #500]	; (800bba4 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800b9b0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b9b4:	4403      	add	r3, r0
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d274      	bcs.n	800baa4 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b9ba:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b9be:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b9c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b9c8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b9ca:	f7ff ff5d 	bl	800b888 <HAL_ETH_WritePHYRegister>
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d15c      	bne.n	800ba8e <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800b9d4:	20ff      	movs	r0, #255	; 0xff
 800b9d6:	f7fd fccf 	bl	8009378 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b9da:	6863      	ldr	r3, [r4, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d178      	bne.n	800bad2 <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b9e6:	f040 809e 	bne.w	800bb26 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800b9ea:	68e3      	ldr	r3, [r4, #12]
 800b9ec:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800b9f0:	f040 8092 	bne.w	800bb18 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800b9f4:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b9f6:	08db      	lsrs	r3, r3, #3
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800ba00:	b292      	uxth	r2, r2
 800ba02:	f7ff ff41 	bl	800b888 <HAL_ETH_WritePHYRegister>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d141      	bne.n	800ba8e <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800ba0a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800ba0e:	f7fd fcb3 	bl	8009378 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800ba12:	4620      	mov	r0, r4
 800ba14:	2100      	movs	r1, #0
 800ba16:	f7ff fcdd 	bl	800b3d4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800ba1a:	2301      	movs	r3, #1
}
 800ba1c:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800ba1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ba22:	b003      	add	sp, #12
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800ba26:	21e0      	movs	r1, #224	; 0xe0
 800ba28:	485f      	ldr	r0, [pc, #380]	; (800bba8 <HAL_ETH_Init+0x290>)
 800ba2a:	f7f9 ff5b 	bl	80058e4 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800ba2e:	6a23      	ldr	r3, [r4, #32]
 800ba30:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800ba34:	d087      	beq.n	800b946 <HAL_ETH_Init+0x2e>
 800ba36:	21e1      	movs	r1, #225	; 0xe1
 800ba38:	485b      	ldr	r0, [pc, #364]	; (800bba8 <HAL_ETH_Init+0x290>)
 800ba3a:	f7f9 ff53 	bl	80058e4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800ba3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d183      	bne.n	800b952 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800ba4a:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800ba4c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800ba50:	f009 fd84 	bl	801555c <HAL_ETH_MspInit>
 800ba54:	e77d      	b.n	800b952 <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800ba56:	21df      	movs	r1, #223	; 0xdf
 800ba58:	4853      	ldr	r0, [pc, #332]	; (800bba8 <HAL_ETH_Init+0x290>)
 800ba5a:	f7f9 ff43 	bl	80058e4 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800ba5e:	69e3      	ldr	r3, [r4, #28]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	f67f af6c 	bls.w	800b93e <HAL_ETH_Init+0x26>
 800ba66:	e7de      	b.n	800ba26 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800ba68:	21de      	movs	r1, #222	; 0xde
 800ba6a:	484f      	ldr	r0, [pc, #316]	; (800bba8 <HAL_ETH_Init+0x290>)
 800ba6c:	f7f9 ff3a 	bl	80058e4 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800ba70:	69a3      	ldr	r3, [r4, #24]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	f67f af60 	bls.w	800b938 <HAL_ETH_Init+0x20>
 800ba78:	e7ed      	b.n	800ba56 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800ba7c:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800ba7e:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800ba84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800ba88:	4628      	mov	r0, r5
 800ba8a:	b003      	add	sp, #12
 800ba8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800ba8e:	4620      	mov	r0, r4
 800ba90:	2101      	movs	r1, #1
 800ba92:	f7ff fc9f 	bl	800b3d4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800ba96:	2301      	movs	r3, #1
      return HAL_ERROR;
 800ba98:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800ba9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ba9e:	4628      	mov	r0, r5
 800baa0:	b003      	add	sp, #12
 800baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800baa4:	4b41      	ldr	r3, [pc, #260]	; (800bbac <HAL_ETH_Init+0x294>)
 800baa6:	4a42      	ldr	r2, [pc, #264]	; (800bbb0 <HAL_ETH_Init+0x298>)
 800baa8:	4403      	add	r3, r0
 800baaa:	4293      	cmp	r3, r2
 800baac:	d90e      	bls.n	800bacc <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800baae:	4b41      	ldr	r3, [pc, #260]	; (800bbb4 <HAL_ETH_Init+0x29c>)
 800bab0:	4a41      	ldr	r2, [pc, #260]	; (800bbb8 <HAL_ETH_Init+0x2a0>)
 800bab2:	4403      	add	r3, r0
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d382      	bcc.n	800b9be <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800bab8:	4b40      	ldr	r3, [pc, #256]	; (800bbbc <HAL_ETH_Init+0x2a4>)
 800baba:	4a41      	ldr	r2, [pc, #260]	; (800bbc0 <HAL_ETH_Init+0x2a8>)
 800babc:	4403      	add	r3, r0
 800babe:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800bac0:	bf94      	ite	ls
 800bac2:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800bac6:	f045 0510 	orrhi.w	r5, r5, #16
 800baca:	e778      	b.n	800b9be <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800bacc:	f045 050c 	orr.w	r5, r5, #12
 800bad0:	e775      	b.n	800b9be <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800bad2:	f7fd fc4b 	bl	800936c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800bad6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bada:	4606      	mov	r6, r0
 800badc:	e002      	b.n	800bae4 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800bade:	9b00      	ldr	r3, [sp, #0]
 800bae0:	0759      	lsls	r1, r3, #29
 800bae2:	d426      	bmi.n	800bb32 <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800bae4:	466a      	mov	r2, sp
 800bae6:	2101      	movs	r1, #1
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff fe83 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800baee:	f7fd fc3d 	bl	800936c <HAL_GetTick>
 800baf2:	1b80      	subs	r0, r0, r6
 800baf4:	42b8      	cmp	r0, r7
 800baf6:	d9f2      	bls.n	800bade <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800baf8:	2101      	movs	r1, #1
 800bafa:	4620      	mov	r0, r4
 800bafc:	f7ff fc6a 	bl	800b3d4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800bb00:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800bb02:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800bb04:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800bb06:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800bb0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800bb0e:	e7bb      	b.n	800ba88 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800bb10:	2501      	movs	r5, #1
}
 800bb12:	4628      	mov	r0, r5
 800bb14:	b003      	add	sp, #12
 800bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800bb18:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800bb1c:	4822      	ldr	r0, [pc, #136]	; (800bba8 <HAL_ETH_Init+0x290>)
 800bb1e:	f7f9 fee1 	bl	80058e4 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800bb22:	68e3      	ldr	r3, [r4, #12]
 800bb24:	e766      	b.n	800b9f4 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bb26:	f240 11c5 	movw	r1, #453	; 0x1c5
 800bb2a:	481f      	ldr	r0, [pc, #124]	; (800bba8 <HAL_ETH_Init+0x290>)
 800bb2c:	f7f9 feda 	bl	80058e4 <assert_failed>
 800bb30:	e75b      	b.n	800b9ea <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800bb32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb36:	2100      	movs	r1, #0
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7ff fea5 	bl	800b888 <HAL_ETH_WritePHYRegister>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1a5      	bne.n	800ba8e <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800bb42:	f7fd fc13 	bl	800936c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800bb46:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	e002      	b.n	800bb54 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bb4e:	9b00      	ldr	r3, [sp, #0]
 800bb50:	069a      	lsls	r2, r3, #26
 800bb52:	d40a      	bmi.n	800bb6a <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800bb54:	466a      	mov	r2, sp
 800bb56:	2101      	movs	r1, #1
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f7ff fe4b 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800bb5e:	f7fd fc05 	bl	800936c <HAL_GetTick>
 800bb62:	1b80      	subs	r0, r0, r6
 800bb64:	42b8      	cmp	r0, r7
 800bb66:	d9f2      	bls.n	800bb4e <HAL_ETH_Init+0x236>
 800bb68:	e7c6      	b.n	800baf8 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	2110      	movs	r1, #16
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff fe40 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d18a      	bne.n	800ba8e <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bb78:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800bb7a:	f013 0204 	ands.w	r2, r3, #4
 800bb7e:	bf18      	it	ne
 800bb80:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800bb84:	079b      	lsls	r3, r3, #30
 800bb86:	60e2      	str	r2, [r4, #12]
 800bb88:	d501      	bpl.n	800bb8e <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800bb8a:	60a0      	str	r0, [r4, #8]
 800bb8c:	e741      	b.n	800ba12 <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800bb8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb92:	60a3      	str	r3, [r4, #8]
 800bb94:	e73d      	b.n	800ba12 <HAL_ETH_Init+0xfa>
 800bb96:	bf00      	nop
 800bb98:	40023800 	.word	0x40023800
 800bb9c:	40013800 	.word	0x40013800
 800bba0:	feced300 	.word	0xfeced300
 800bba4:	00e4e1c0 	.word	0x00e4e1c0
 800bba8:	0802e310 	.word	0x0802e310
 800bbac:	fde9f140 	.word	0xfde9f140
 800bbb0:	017d783f 	.word	0x017d783f
 800bbb4:	fc6c7900 	.word	0xfc6c7900
 800bbb8:	02625a00 	.word	0x02625a00
 800bbbc:	fa0a1f00 	.word	0xfa0a1f00
 800bbc0:	02faf07f 	.word	0x02faf07f

0800bbc4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800bbc4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d044      	beq.n	800bc56 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bbcc:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bbce:	2202      	movs	r2, #2
{  
 800bbd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800bbd2:	2601      	movs	r6, #1
{  
 800bbd4:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800bbd6:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800bbd8:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bbdc:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800bbe0:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800bbe2:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbe4:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	f042 0208 	orr.w	r2, r2, #8
 800bbec:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbf2:	f7fd fbc1 	bl	8009378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bbf6:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbf8:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800bbfe:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	f042 0204 	orr.w	r2, r2, #4
 800bc06:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc0c:	f7fd fbb4 	bl	8009378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc10:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc12:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bc14:	6823      	ldr	r3, [r4, #0]
 800bc16:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bc1c:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc24:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc2a:	f7fd fba5 	bl	8009378 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bc2e:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800bc30:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800bc32:	9a01      	ldr	r2, [sp, #4]
 800bc34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc38:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc40:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bc42:	699a      	ldr	r2, [r3, #24]
 800bc44:	f042 0202 	orr.w	r2, r2, #2
 800bc48:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800bc4a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bc4e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bc52:	b004      	add	sp, #16
 800bc54:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bc56:	2002      	movs	r0, #2
}
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop

0800bc5c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800bc5c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d046      	beq.n	800bcf2 <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc64:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bc66:	2102      	movs	r1, #2
{  
 800bc68:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc6a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800bc6e:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800bc70:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800bc74:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800bc76:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800bc7a:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc7c:	6991      	ldr	r1, [r2, #24]
 800bc7e:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc80:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc82:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800bc86:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bc88:	6991      	ldr	r1, [r2, #24]
 800bc8a:	f021 0102 	bic.w	r1, r1, #2
 800bc8e:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bc90:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	f022 0204 	bic.w	r2, r2, #4
 800bc98:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc9e:	f7fd fb6b 	bl	8009378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bca2:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bca4:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bcae:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bcb0:	699a      	ldr	r2, [r3, #24]
 800bcb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bcb6:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcbc:	f7fd fb5c 	bl	8009378 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bcc0:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcc2:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800bcc4:	9902      	ldr	r1, [sp, #8]
 800bcc6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800bcca:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bccc:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	f022 0208 	bic.w	r2, r2, #8
 800bcd4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcda:	f7fd fb4d 	bl	8009378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bcde:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800bce0:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800bce6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bcea:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bcee:	b004      	add	sp, #16
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bcf2:	2002      	movs	r0, #2
}
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop

0800bcf8 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800bcf8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	f000 8249 	beq.w	800c194 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd02:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800bd04:	2202      	movs	r2, #2
{
 800bd06:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd08:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bd0c:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800bd0e:	f04f 0101 	mov.w	r1, #1
 800bd12:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800bd14:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bd18:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd1c:	f040 8207 	bne.w	800c12e <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bd20:	68eb      	ldr	r3, [r5, #12]
 800bd22:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bd26:	f040 8114 	bne.w	800bf52 <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	f000 8119 	beq.w	800bf62 <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bd30:	6823      	ldr	r3, [r4, #0]
 800bd32:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800bd36:	f040 8139 	bne.w	800bfac <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bd3a:	6863      	ldr	r3, [r4, #4]
 800bd3c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bd40:	f040 816b 	bne.w	800c01a <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bd44:	68a3      	ldr	r3, [r4, #8]
 800bd46:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800bd4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd4e:	d002      	beq.n	800bd56 <HAL_ETH_ConfigMAC+0x5e>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f040 8221 	bne.w	800c198 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bd56:	68e3      	ldr	r3, [r4, #12]
 800bd58:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bd5c:	f040 8152 	bne.w	800c004 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bd66:	f040 8142 	bne.w	800bfee <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bd6a:	6963      	ldr	r3, [r4, #20]
 800bd6c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bd70:	f040 8132 	bne.w	800bfd8 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bd74:	69a3      	ldr	r3, [r4, #24]
 800bd76:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bd7a:	f040 8122 	bne.w	800bfc2 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bd7e:	69e3      	ldr	r3, [r4, #28]
 800bd80:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bd84:	f040 81a3 	bne.w	800c0ce <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800bd88:	6a23      	ldr	r3, [r4, #32]
 800bd8a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bd8e:	f040 818e 	bne.w	800c0ae <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800bd92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd94:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800bd98:	f040 8193 	bne.w	800c0c2 <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800bd9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd9e:	f033 0310 	bics.w	r3, r3, #16
 800bda2:	f040 8179 	bne.w	800c098 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800bda6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bda8:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800bdac:	f040 819a 	bne.w	800c0e4 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bdb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdb2:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800bdb6:	d003      	beq.n	800bdc0 <HAL_ETH_ConfigMAC+0xc8>
 800bdb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdbc:	f040 81d8 	bne.w	800c170 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bdc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bdc6:	2a40      	cmp	r2, #64	; 0x40
 800bdc8:	d002      	beq.n	800bdd0 <HAL_ETH_ConfigMAC+0xd8>
 800bdca:	2b80      	cmp	r3, #128	; 0x80
 800bdcc:	f040 81ba 	bne.w	800c144 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bdd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdd2:	f033 0320 	bics.w	r3, r3, #32
 800bdd6:	f040 80de 	bne.w	800bf96 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bdda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bddc:	f033 0308 	bics.w	r3, r3, #8
 800bde0:	f040 80cf 	bne.w	800bf82 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bde4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	f200 80a5 	bhi.w	800bf36 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bdec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bdee:	f240 4204 	movw	r2, #1028	; 0x404
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	bf18      	it	ne
 800bdf6:	2b10      	cmpne	r3, #16
 800bdf8:	d003      	beq.n	800be02 <HAL_ETH_ConfigMAC+0x10a>
 800bdfa:	f033 0304 	bics.w	r3, r3, #4
 800bdfe:	f040 81c3 	bne.w	800c188 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800be02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800be04:	f033 0202 	bics.w	r2, r3, #2
 800be08:	d004      	beq.n	800be14 <HAL_ETH_ConfigMAC+0x11c>
 800be0a:	f240 4202 	movw	r2, #1026	; 0x402
 800be0e:	4293      	cmp	r3, r2
 800be10:	f040 81a3 	bne.w	800c15a <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800be14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be1a:	f080 816e 	bcs.w	800c0fa <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800be1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be20:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800be24:	f040 8173 	bne.w	800c10e <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800be28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800be2a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800be2e:	f040 8178 	bne.w	800c122 <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800be32:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800be34:	f033 0308 	bics.w	r3, r3, #8
 800be38:	f040 8123 	bne.w	800c082 <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800be3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be3e:	f033 0304 	bics.w	r3, r3, #4
 800be42:	f040 8113 	bne.w	800c06c <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800be46:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be48:	f033 0302 	bics.w	r3, r3, #2
 800be4c:	f040 8103 	bne.w	800c056 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800be50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be52:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800be56:	f040 80f3 	bne.w	800c040 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800be5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be60:	f080 80e8 	bcs.w	800c034 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800be64:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800be66:	49b5      	ldr	r1, [pc, #724]	; (800c13c <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800be68:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800be6a:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800be6c:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800be6e:	6860      	ldr	r0, [r4, #4]
 800be70:	4303      	orrs	r3, r0
 800be72:	68a0      	ldr	r0, [r4, #8]
 800be74:	4303      	orrs	r3, r0
 800be76:	68e0      	ldr	r0, [r4, #12]
 800be78:	4303      	orrs	r3, r0
 800be7a:	6920      	ldr	r0, [r4, #16]
 800be7c:	4303      	orrs	r3, r0
 800be7e:	6960      	ldr	r0, [r4, #20]
 800be80:	4303      	orrs	r3, r0
 800be82:	69a0      	ldr	r0, [r4, #24]
 800be84:	4303      	orrs	r3, r0
 800be86:	69e0      	ldr	r0, [r4, #28]
 800be88:	4303      	orrs	r3, r0
 800be8a:	6a20      	ldr	r0, [r4, #32]
 800be8c:	4303      	orrs	r3, r0
 800be8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be90:	4303      	orrs	r3, r0
 800be92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800be94:	4303      	orrs	r3, r0
 800be96:	68a8      	ldr	r0, [r5, #8]
 800be98:	4303      	orrs	r3, r0
 800be9a:	68e8      	ldr	r0, [r5, #12]
 800be9c:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800be9e:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800bea0:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bea2:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bea4:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bea6:	f7fd fa67 	bl	8009378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800beaa:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800beac:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800beae:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800beb2:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800beb4:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800beb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beb8:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800beba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bebc:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800bebe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bec0:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800bec2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bec4:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800bec6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bec8:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800beca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800becc:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800bece:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800bed0:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bed2:	f7fd fa51 	bl	8009378 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800bed6:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800bed8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800beda:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800bedc:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800bede:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800bee0:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800bee4:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800bee6:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800bee8:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800beea:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800beee:	4303      	orrs	r3, r0
 800bef0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bef2:	4303      	orrs	r3, r0
 800bef4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bef6:	4303      	orrs	r3, r0
 800bef8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800befa:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800befc:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800befe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf02:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800bf04:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800bf06:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800bf08:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf0a:	f7fd fa35 	bl	8009378 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800bf0e:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf10:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bf12:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800bf16:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800bf1c:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf1e:	f7fd fa2b 	bl	8009378 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800bf22:	682b      	ldr	r3, [r5, #0]
 800bf24:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800bf26:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800bf28:	2201      	movs	r2, #1
  return HAL_OK;  
 800bf2a:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800bf2c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bf30:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bf36:	f240 6123 	movw	r1, #1571	; 0x623
 800bf3a:	4881      	ldr	r0, [pc, #516]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bf3c:	f7f9 fcd2 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bf40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bf42:	f240 4204 	movw	r2, #1028	; 0x404
 800bf46:	4293      	cmp	r3, r2
 800bf48:	bf18      	it	ne
 800bf4a:	2b10      	cmpne	r3, #16
 800bf4c:	f47f af55 	bne.w	800bdfa <HAL_ETH_ConfigMAC+0x102>
 800bf50:	e757      	b.n	800be02 <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bf52:	f240 610e 	movw	r1, #1550	; 0x60e
 800bf56:	487a      	ldr	r0, [pc, #488]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bf58:	f7f9 fcc4 	bl	80058e4 <assert_failed>
  if (macconf != NULL)
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	f47f aee7 	bne.w	800bd30 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800bf62:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf64:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf66:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800bf6a:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf6c:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800bf6e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf72:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bf74:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bf76:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf78:	f7fd f9fe 	bl	8009378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	601c      	str	r4, [r3, #0]
 800bf80:	e7d1      	b.n	800bf26 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bf82:	f240 6122 	movw	r1, #1570	; 0x622
 800bf86:	486e      	ldr	r0, [pc, #440]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bf88:	f7f9 fcac 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bf8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	f67f af2c 	bls.w	800bdec <HAL_ETH_ConfigMAC+0xf4>
 800bf94:	e7cf      	b.n	800bf36 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bf96:	f240 6121 	movw	r1, #1569	; 0x621
 800bf9a:	4869      	ldr	r0, [pc, #420]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bf9c:	f7f9 fca2 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bfa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfa2:	f033 0308 	bics.w	r3, r3, #8
 800bfa6:	f43f af1d 	beq.w	800bde4 <HAL_ETH_ConfigMAC+0xec>
 800bfaa:	e7ea      	b.n	800bf82 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bfac:	f240 6113 	movw	r1, #1555	; 0x613
 800bfb0:	4863      	ldr	r0, [pc, #396]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bfb2:	f7f9 fc97 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bfb6:	6863      	ldr	r3, [r4, #4]
 800bfb8:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bfbc:	f43f aec2 	beq.w	800bd44 <HAL_ETH_ConfigMAC+0x4c>
 800bfc0:	e02b      	b.n	800c01a <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bfc2:	f240 6119 	movw	r1, #1561	; 0x619
 800bfc6:	485e      	ldr	r0, [pc, #376]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bfc8:	f7f9 fc8c 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bfcc:	69e3      	ldr	r3, [r4, #28]
 800bfce:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bfd2:	f43f aed9 	beq.w	800bd88 <HAL_ETH_ConfigMAC+0x90>
 800bfd6:	e07a      	b.n	800c0ce <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bfd8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800bfdc:	4858      	ldr	r0, [pc, #352]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bfde:	f7f9 fc81 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bfe2:	69a3      	ldr	r3, [r4, #24]
 800bfe4:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bfe8:	f43f aec9 	beq.w	800bd7e <HAL_ETH_ConfigMAC+0x86>
 800bfec:	e7e9      	b.n	800bfc2 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bfee:	f240 6117 	movw	r1, #1559	; 0x617
 800bff2:	4853      	ldr	r0, [pc, #332]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800bff4:	f7f9 fc76 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bff8:	6963      	ldr	r3, [r4, #20]
 800bffa:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bffe:	f43f aeb9 	beq.w	800bd74 <HAL_ETH_ConfigMAC+0x7c>
 800c002:	e7e9      	b.n	800bfd8 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800c004:	f240 6116 	movw	r1, #1558	; 0x616
 800c008:	484d      	ldr	r0, [pc, #308]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c00a:	f7f9 fc6b 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c014:	f43f aea9 	beq.w	800bd6a <HAL_ETH_ConfigMAC+0x72>
 800c018:	e7e9      	b.n	800bfee <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800c01a:	f240 6114 	movw	r1, #1556	; 0x614
 800c01e:	4848      	ldr	r0, [pc, #288]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c020:	f7f9 fc60 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800c024:	68a3      	ldr	r3, [r4, #8]
 800c026:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800c02a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c02e:	f47f ae8f 	bne.w	800bd50 <HAL_ETH_ConfigMAC+0x58>
 800c032:	e690      	b.n	800bd56 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800c034:	f240 612d 	movw	r1, #1581	; 0x62d
 800c038:	4841      	ldr	r0, [pc, #260]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c03a:	f7f9 fc53 	bl	80058e4 <assert_failed>
 800c03e:	e711      	b.n	800be64 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800c040:	f240 612c 	movw	r1, #1580	; 0x62c
 800c044:	483e      	ldr	r0, [pc, #248]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c046:	f7f9 fc4d 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800c04a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c050:	f4ff af08 	bcc.w	800be64 <HAL_ETH_ConfigMAC+0x16c>
 800c054:	e7ee      	b.n	800c034 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800c056:	f240 612b 	movw	r1, #1579	; 0x62b
 800c05a:	4839      	ldr	r0, [pc, #228]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c05c:	f7f9 fc42 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800c060:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c062:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c066:	f43f aef8 	beq.w	800be5a <HAL_ETH_ConfigMAC+0x162>
 800c06a:	e7e9      	b.n	800c040 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c06c:	f240 612a 	movw	r1, #1578	; 0x62a
 800c070:	4833      	ldr	r0, [pc, #204]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c072:	f7f9 fc37 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800c076:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c078:	f033 0302 	bics.w	r3, r3, #2
 800c07c:	f43f aee8 	beq.w	800be50 <HAL_ETH_ConfigMAC+0x158>
 800c080:	e7e9      	b.n	800c056 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800c082:	f240 6129 	movw	r1, #1577	; 0x629
 800c086:	482e      	ldr	r0, [pc, #184]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c088:	f7f9 fc2c 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c08c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c08e:	f033 0304 	bics.w	r3, r3, #4
 800c092:	f43f aed8 	beq.w	800be46 <HAL_ETH_ConfigMAC+0x14e>
 800c096:	e7e9      	b.n	800c06c <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800c098:	f240 611d 	movw	r1, #1565	; 0x61d
 800c09c:	4828      	ldr	r0, [pc, #160]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c09e:	f7f9 fc21 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c0a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0a4:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800c0a8:	f43f ae82 	beq.w	800bdb0 <HAL_ETH_ConfigMAC+0xb8>
 800c0ac:	e01a      	b.n	800c0e4 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c0ae:	f240 611b 	movw	r1, #1563	; 0x61b
 800c0b2:	4823      	ldr	r0, [pc, #140]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c0b4:	f7f9 fc16 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800c0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ba:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800c0be:	f43f ae6d 	beq.w	800bd9c <HAL_ETH_ConfigMAC+0xa4>
 800c0c2:	f240 611c 	movw	r1, #1564	; 0x61c
 800c0c6:	481e      	ldr	r0, [pc, #120]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c0c8:	f7f9 fc0c 	bl	80058e4 <assert_failed>
 800c0cc:	e666      	b.n	800bd9c <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800c0ce:	f240 611a 	movw	r1, #1562	; 0x61a
 800c0d2:	481b      	ldr	r0, [pc, #108]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c0d4:	f7f9 fc06 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c0d8:	6a23      	ldr	r3, [r4, #32]
 800c0da:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c0de:	f43f ae58 	beq.w	800bd92 <HAL_ETH_ConfigMAC+0x9a>
 800c0e2:	e7e4      	b.n	800c0ae <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c0e4:	f240 611e 	movw	r1, #1566	; 0x61e
 800c0e8:	4815      	ldr	r0, [pc, #84]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c0ea:	f7f9 fbfb 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c0ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0f0:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800c0f4:	f47f ae60 	bne.w	800bdb8 <HAL_ETH_ConfigMAC+0xc0>
 800c0f8:	e662      	b.n	800bdc0 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c0fa:	f240 6126 	movw	r1, #1574	; 0x626
 800c0fe:	4810      	ldr	r0, [pc, #64]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c100:	f7f9 fbf0 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800c104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c106:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c10a:	f43f ae8d 	beq.w	800be28 <HAL_ETH_ConfigMAC+0x130>
 800c10e:	f240 6127 	movw	r1, #1575	; 0x627
 800c112:	480b      	ldr	r0, [pc, #44]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c114:	f7f9 fbe6 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800c118:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c11a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800c11e:	f43f ae88 	beq.w	800be32 <HAL_ETH_ConfigMAC+0x13a>
 800c122:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800c126:	4806      	ldr	r0, [pc, #24]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c128:	f7f9 fbdc 	bl	80058e4 <assert_failed>
 800c12c:	e681      	b.n	800be32 <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800c12e:	f240 610d 	movw	r1, #1549	; 0x60d
 800c132:	4803      	ldr	r0, [pc, #12]	; (800c140 <HAL_ETH_ConfigMAC+0x448>)
 800c134:	f7f9 fbd6 	bl	80058e4 <assert_failed>
 800c138:	e5f2      	b.n	800bd20 <HAL_ETH_ConfigMAC+0x28>
 800c13a:	bf00      	nop
 800c13c:	ff20810f 	.word	0xff20810f
 800c140:	0802e310 	.word	0x0802e310
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c144:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800c148:	4816      	ldr	r0, [pc, #88]	; (800c1a4 <HAL_ETH_ConfigMAC+0x4ac>)
 800c14a:	f7f9 fbcb 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800c14e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c150:	f033 0320 	bics.w	r3, r3, #32
 800c154:	f43f ae41 	beq.w	800bdda <HAL_ETH_ConfigMAC+0xe2>
 800c158:	e71d      	b.n	800bf96 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800c15a:	f240 6125 	movw	r1, #1573	; 0x625
 800c15e:	4811      	ldr	r0, [pc, #68]	; (800c1a4 <HAL_ETH_ConfigMAC+0x4ac>)
 800c160:	f7f9 fbc0 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c164:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c16a:	f4ff ae58 	bcc.w	800be1e <HAL_ETH_ConfigMAC+0x126>
 800c16e:	e7c4      	b.n	800c0fa <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c170:	f240 611f 	movw	r1, #1567	; 0x61f
 800c174:	480b      	ldr	r0, [pc, #44]	; (800c1a4 <HAL_ETH_ConfigMAC+0x4ac>)
 800c176:	f7f9 fbb5 	bl	80058e4 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c17c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c180:	2a40      	cmp	r2, #64	; 0x40
 800c182:	f47f ae22 	bne.w	800bdca <HAL_ETH_ConfigMAC+0xd2>
 800c186:	e623      	b.n	800bdd0 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800c188:	f240 6124 	movw	r1, #1572	; 0x624
 800c18c:	4805      	ldr	r0, [pc, #20]	; (800c1a4 <HAL_ETH_ConfigMAC+0x4ac>)
 800c18e:	f7f9 fba9 	bl	80058e4 <assert_failed>
 800c192:	e636      	b.n	800be02 <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800c194:	2002      	movs	r0, #2
}
 800c196:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800c198:	f240 6115 	movw	r1, #1557	; 0x615
 800c19c:	4801      	ldr	r0, [pc, #4]	; (800c1a4 <HAL_ETH_ConfigMAC+0x4ac>)
 800c19e:	f7f9 fba1 	bl	80058e4 <assert_failed>
 800c1a2:	e5d8      	b.n	800bd56 <HAL_ETH_ConfigMAC+0x5e>
 800c1a4:	0802e310 	.word	0x0802e310

0800c1a8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c1a8:	4b18      	ldr	r3, [pc, #96]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	079b      	lsls	r3, r3, #30
 800c1ae:	d504      	bpl.n	800c1ba <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c1b0:	4a17      	ldr	r2, [pc, #92]	; (800c210 <FLASH_SetErrorCode+0x68>)
 800c1b2:	6993      	ldr	r3, [r2, #24]
 800c1b4:	f043 0320 	orr.w	r3, r3, #32
 800c1b8:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c1ba:	4b14      	ldr	r3, [pc, #80]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	06d8      	lsls	r0, r3, #27
 800c1c0:	d504      	bpl.n	800c1cc <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c1c2:	4a13      	ldr	r2, [pc, #76]	; (800c210 <FLASH_SetErrorCode+0x68>)
 800c1c4:	6993      	ldr	r3, [r2, #24]
 800c1c6:	f043 0310 	orr.w	r3, r3, #16
 800c1ca:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c1cc:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	0699      	lsls	r1, r3, #26
 800c1d2:	d504      	bpl.n	800c1de <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c1d4:	4a0e      	ldr	r2, [pc, #56]	; (800c210 <FLASH_SetErrorCode+0x68>)
 800c1d6:	6993      	ldr	r3, [r2, #24]
 800c1d8:	f043 0308 	orr.w	r3, r3, #8
 800c1dc:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c1de:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	065a      	lsls	r2, r3, #25
 800c1e4:	d504      	bpl.n	800c1f0 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c1e6:	4a0a      	ldr	r2, [pc, #40]	; (800c210 <FLASH_SetErrorCode+0x68>)
 800c1e8:	6993      	ldr	r3, [r2, #24]
 800c1ea:	f043 0304 	orr.w	r3, r3, #4
 800c1ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800c1f0:	4b06      	ldr	r3, [pc, #24]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	061b      	lsls	r3, r3, #24
 800c1f6:	d504      	bpl.n	800c202 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800c1f8:	4a05      	ldr	r2, [pc, #20]	; (800c210 <FLASH_SetErrorCode+0x68>)
 800c1fa:	6993      	ldr	r3, [r2, #24]
 800c1fc:	f043 0302 	orr.w	r3, r3, #2
 800c200:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c202:	4b02      	ldr	r3, [pc, #8]	; (800c20c <FLASH_SetErrorCode+0x64>)
 800c204:	22f2      	movs	r2, #242	; 0xf2
 800c206:	60da      	str	r2, [r3, #12]
}
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	40023c00 	.word	0x40023c00
 800c210:	20003574 	.word	0x20003574

0800c214 <FLASH_Program_Byte>:
{
 800c214:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c216:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c21a:	4604      	mov	r4, r0
 800c21c:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c21e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c222:	d304      	bcc.n	800c22e <FLASH_Program_Byte+0x1a>
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <FLASH_Program_Byte+0x44>)
 800c226:	4403      	add	r3, r0
 800c228:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c22c:	d20e      	bcs.n	800c24c <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <FLASH_Program_Byte+0x48>)
 800c230:	691a      	ldr	r2, [r3, #16]
 800c232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c236:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c238:	691a      	ldr	r2, [r3, #16]
 800c23a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c23c:	691a      	ldr	r2, [r3, #16]
 800c23e:	f042 0201 	orr.w	r2, r2, #1
 800c242:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800c244:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800c246:	f3bf 8f4f 	dsb	sy
}
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c24c:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c250:	4803      	ldr	r0, [pc, #12]	; (800c260 <FLASH_Program_Byte+0x4c>)
 800c252:	f7f9 fb47 	bl	80058e4 <assert_failed>
 800c256:	e7ea      	b.n	800c22e <FLASH_Program_Byte+0x1a>
 800c258:	e00f1000 	.word	0xe00f1000
 800c25c:	40023c00 	.word	0x40023c00
 800c260:	0802e348 	.word	0x0802e348

0800c264 <FLASH_Program_HalfWord>:
{
 800c264:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c266:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c26a:	4604      	mov	r4, r0
 800c26c:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c26e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c272:	d304      	bcc.n	800c27e <FLASH_Program_HalfWord+0x1a>
 800c274:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <FLASH_Program_HalfWord+0x48>)
 800c276:	4403      	add	r3, r0
 800c278:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c27c:	d210      	bcs.n	800c2a0 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c27e:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <FLASH_Program_HalfWord+0x4c>)
 800c280:	691a      	ldr	r2, [r3, #16]
 800c282:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c286:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c288:	691a      	ldr	r2, [r3, #16]
 800c28a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c28e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c290:	691a      	ldr	r2, [r3, #16]
 800c292:	f042 0201 	orr.w	r2, r2, #1
 800c296:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800c298:	8025      	strh	r5, [r4, #0]
 800c29a:	f3bf 8f4f 	dsb	sy
}
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2a0:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c2a4:	4803      	ldr	r0, [pc, #12]	; (800c2b4 <FLASH_Program_HalfWord+0x50>)
 800c2a6:	f7f9 fb1d 	bl	80058e4 <assert_failed>
 800c2aa:	e7e8      	b.n	800c27e <FLASH_Program_HalfWord+0x1a>
 800c2ac:	e00f1000 	.word	0xe00f1000
 800c2b0:	40023c00 	.word	0x40023c00
 800c2b4:	0802e348 	.word	0x0802e348

0800c2b8 <FLASH_Program_Word>:
{
 800c2b8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2ba:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c2be:	4604      	mov	r4, r0
 800c2c0:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2c6:	d304      	bcc.n	800c2d2 <FLASH_Program_Word+0x1a>
 800c2c8:	4b0d      	ldr	r3, [pc, #52]	; (800c300 <FLASH_Program_Word+0x48>)
 800c2ca:	4403      	add	r3, r0
 800c2cc:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c2d0:	d210      	bcs.n	800c2f4 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c2d2:	4b0c      	ldr	r3, [pc, #48]	; (800c304 <FLASH_Program_Word+0x4c>)
 800c2d4:	691a      	ldr	r2, [r3, #16]
 800c2d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c2da:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c2dc:	691a      	ldr	r2, [r3, #16]
 800c2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2e2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c2e4:	691a      	ldr	r2, [r3, #16]
 800c2e6:	f042 0201 	orr.w	r2, r2, #1
 800c2ea:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800c2ec:	6025      	str	r5, [r4, #0]
 800c2ee:	f3bf 8f4f 	dsb	sy
}
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2f4:	f240 21b3 	movw	r1, #691	; 0x2b3
 800c2f8:	4803      	ldr	r0, [pc, #12]	; (800c308 <FLASH_Program_Word+0x50>)
 800c2fa:	f7f9 faf3 	bl	80058e4 <assert_failed>
 800c2fe:	e7e8      	b.n	800c2d2 <FLASH_Program_Word+0x1a>
 800c300:	e00f1000 	.word	0xe00f1000
 800c304:	40023c00 	.word	0x40023c00
 800c308:	0802e348 	.word	0x0802e348

0800c30c <FLASH_Program_DoubleWord>:
{
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800c310:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c314:	4604      	mov	r4, r0
 800c316:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800c318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c31c:	d304      	bcc.n	800c328 <FLASH_Program_DoubleWord+0x1c>
 800c31e:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <FLASH_Program_DoubleWord+0x50>)
 800c320:	4403      	add	r3, r0
 800c322:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c326:	d213      	bcs.n	800c350 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800c328:	490d      	ldr	r1, [pc, #52]	; (800c360 <FLASH_Program_DoubleWord+0x54>)
 800c32a:	690b      	ldr	r3, [r1, #16]
 800c32c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c330:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c332:	690b      	ldr	r3, [r1, #16]
 800c334:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c338:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c33a:	690b      	ldr	r3, [r1, #16]
 800c33c:	f043 0301 	orr.w	r3, r3, #1
 800c340:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c342:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c344:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c348:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800c34a:	f3bf 8f4f 	dsb	sy
}
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c350:	f240 218e 	movw	r1, #654	; 0x28e
 800c354:	4803      	ldr	r0, [pc, #12]	; (800c364 <FLASH_Program_DoubleWord+0x58>)
 800c356:	f7f9 fac5 	bl	80058e4 <assert_failed>
 800c35a:	e7e5      	b.n	800c328 <FLASH_Program_DoubleWord+0x1c>
 800c35c:	e00f1000 	.word	0xe00f1000
 800c360:	40023c00 	.word	0x40023c00
 800c364:	0802e348 	.word	0x0802e348

0800c368 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c368:	4b06      	ldr	r3, [pc, #24]	; (800c384 <HAL_FLASH_Unlock+0x1c>)
 800c36a:	691a      	ldr	r2, [r3, #16]
 800c36c:	2a00      	cmp	r2, #0
 800c36e:	db01      	blt.n	800c374 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800c370:	2000      	movs	r0, #0
}
 800c372:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c374:	4904      	ldr	r1, [pc, #16]	; (800c388 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c376:	4a05      	ldr	r2, [pc, #20]	; (800c38c <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c378:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c37a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c37c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800c37e:	0fc0      	lsrs	r0, r0, #31
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	40023c00 	.word	0x40023c00
 800c388:	45670123 	.word	0x45670123
 800c38c:	cdef89ab 	.word	0xcdef89ab

0800c390 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800c390:	4a03      	ldr	r2, [pc, #12]	; (800c3a0 <HAL_FLASH_Lock+0x10>)
}
 800c392:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800c394:	6913      	ldr	r3, [r2, #16]
 800c396:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c39a:	6113      	str	r3, [r2, #16]
}
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	40023c00 	.word	0x40023c00

0800c3a4 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800c3a4:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <HAL_FLASH_OB_Unlock+0x18>)
 800c3a6:	695a      	ldr	r2, [r3, #20]
 800c3a8:	07d2      	lsls	r2, r2, #31
 800c3aa:	d505      	bpl.n	800c3b8 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c3ac:	4904      	ldr	r1, [pc, #16]	; (800c3c0 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800c3ae:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c3b0:	4a04      	ldr	r2, [pc, #16]	; (800c3c4 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c3b2:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c3b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800c3b6:	4770      	bx	lr
    return HAL_ERROR;
 800c3b8:	2001      	movs	r0, #1
}
 800c3ba:	4770      	bx	lr
 800c3bc:	40023c00 	.word	0x40023c00
 800c3c0:	08192a3b 	.word	0x08192a3b
 800c3c4:	4c5d6e7f 	.word	0x4c5d6e7f

0800c3c8 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c3c8:	4a03      	ldr	r2, [pc, #12]	; (800c3d8 <HAL_FLASH_OB_Lock+0x10>)
}
 800c3ca:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c3cc:	6953      	ldr	r3, [r2, #20]
 800c3ce:	f043 0301 	orr.w	r3, r3, #1
 800c3d2:	6153      	str	r3, [r2, #20]
}
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40023c00 	.word	0x40023c00

0800c3dc <HAL_FLASH_OB_Launch>:
{
 800c3dc:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c3de:	4c14      	ldr	r4, [pc, #80]	; (800c430 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4a14      	ldr	r2, [pc, #80]	; (800c434 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c3e4:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c3e8:	6963      	ldr	r3, [r4, #20]
 800c3ea:	f043 0302 	orr.w	r3, r3, #2
 800c3ee:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3f0:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800c3f2:	f7fc ffbb 	bl	800936c <HAL_GetTick>
 800c3f6:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c3f8:	e004      	b.n	800c404 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c3fa:	f7fc ffb7 	bl	800936c <HAL_GetTick>
 800c3fe:	1b40      	subs	r0, r0, r5
 800c400:	42b0      	cmp	r0, r6
 800c402:	d80e      	bhi.n	800c422 <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c404:	68e3      	ldr	r3, [r4, #12]
 800c406:	03db      	lsls	r3, r3, #15
 800c408:	d4f7      	bmi.n	800c3fa <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c40a:	68e2      	ldr	r2, [r4, #12]
 800c40c:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c410:	d109      	bne.n	800c426 <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c412:	68e0      	ldr	r0, [r4, #12]
 800c414:	f010 0001 	ands.w	r0, r0, #1
 800c418:	d002      	beq.n	800c420 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c41a:	2301      	movs	r3, #1
  return HAL_OK;
 800c41c:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c41e:	60e3      	str	r3, [r4, #12]
}
 800c420:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800c422:	2003      	movs	r0, #3
}
 800c424:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c426:	f7ff febf 	bl	800c1a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c42a:	2001      	movs	r0, #1
}
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	bf00      	nop
 800c430:	40023c00 	.word	0x40023c00
 800c434:	20003574 	.word	0x20003574

0800c438 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800c438:	4b01      	ldr	r3, [pc, #4]	; (800c440 <HAL_FLASH_GetError+0x8>)
 800c43a:	6998      	ldr	r0, [r3, #24]
}  
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20003574 	.word	0x20003574

0800c444 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c444:	4b13      	ldr	r3, [pc, #76]	; (800c494 <FLASH_WaitForLastOperation+0x50>)
 800c446:	2200      	movs	r2, #0
{ 
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c44c:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c44e:	4d12      	ldr	r5, [pc, #72]	; (800c498 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800c450:	f7fc ff8c 	bl	800936c <HAL_GetTick>
 800c454:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c456:	e001      	b.n	800c45c <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800c458:	1c62      	adds	r2, r4, #1
 800c45a:	d10e      	bne.n	800c47a <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c45c:	68eb      	ldr	r3, [r5, #12]
 800c45e:	03db      	lsls	r3, r3, #15
 800c460:	d4fa      	bmi.n	800c458 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c462:	68ea      	ldr	r2, [r5, #12]
 800c464:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c468:	d10f      	bne.n	800c48a <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c46a:	68e8      	ldr	r0, [r5, #12]
 800c46c:	f010 0001 	ands.w	r0, r0, #1
 800c470:	d002      	beq.n	800c478 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c472:	2301      	movs	r3, #1
  return HAL_OK;
 800c474:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c476:	60eb      	str	r3, [r5, #12]
}  
 800c478:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c47a:	b124      	cbz	r4, 800c486 <FLASH_WaitForLastOperation+0x42>
 800c47c:	f7fc ff76 	bl	800936c <HAL_GetTick>
 800c480:	1b80      	subs	r0, r0, r6
 800c482:	42a0      	cmp	r0, r4
 800c484:	d9ea      	bls.n	800c45c <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800c486:	2003      	movs	r0, #3
}  
 800c488:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c48a:	f7ff fe8d 	bl	800c1a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c48e:	2001      	movs	r0, #1
}  
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	bf00      	nop
 800c494:	20003574 	.word	0x20003574
 800c498:	40023c00 	.word	0x40023c00

0800c49c <HAL_FLASH_Program>:
{
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800c4a0:	4d23      	ldr	r5, [pc, #140]	; (800c530 <HAL_FLASH_Program+0x94>)
{
 800c4a2:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800c4a4:	7d2a      	ldrb	r2, [r5, #20]
 800c4a6:	2a01      	cmp	r2, #1
 800c4a8:	d03a      	beq.n	800c520 <HAL_FLASH_Program+0x84>
 800c4aa:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c4ac:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800c4ae:	f04f 0301 	mov.w	r3, #1
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c4b6:	d81d      	bhi.n	800c4f4 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4bc:	460e      	mov	r6, r1
 800c4be:	f7ff ffc1 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c4c2:	b998      	cbnz	r0, 800c4ec <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800c4c4:	3c01      	subs	r4, #1
 800c4c6:	2c02      	cmp	r4, #2
 800c4c8:	d82d      	bhi.n	800c526 <HAL_FLASH_Program+0x8a>
 800c4ca:	e8df f004 	tbb	[pc, r4]
 800c4ce:	1e02      	.short	0x1e02
 800c4d0:	23          	.byte	0x23
 800c4d1:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c4d2:	b2b9      	uxth	r1, r7
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff fec5 	bl	800c264 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4da:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4de:	f7ff ffb1 	bl	800c444 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800c4e2:	4a14      	ldr	r2, [pc, #80]	; (800c534 <HAL_FLASH_Program+0x98>)
 800c4e4:	6913      	ldr	r3, [r2, #16]
 800c4e6:	f023 0301 	bic.w	r3, r3, #1
 800c4ea:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	752b      	strb	r3, [r5, #20]
}
 800c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c4f4:	4810      	ldr	r0, [pc, #64]	; (800c538 <HAL_FLASH_Program+0x9c>)
 800c4f6:	21aa      	movs	r1, #170	; 0xaa
 800c4f8:	f7f9 f9f4 	bl	80058e4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c500:	f7ff ffa0 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c504:	2800      	cmp	r0, #0
 800c506:	d1f1      	bne.n	800c4ec <HAL_FLASH_Program+0x50>
 800c508:	e7e7      	b.n	800c4da <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800c50a:	4639      	mov	r1, r7
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff fed3 	bl	800c2b8 <FLASH_Program_Word>
        break;
 800c512:	e7e2      	b.n	800c4da <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800c514:	463a      	mov	r2, r7
 800c516:	4643      	mov	r3, r8
 800c518:	4630      	mov	r0, r6
 800c51a:	f7ff fef7 	bl	800c30c <FLASH_Program_DoubleWord>
        break;
 800c51e:	e7dc      	b.n	800c4da <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800c520:	2002      	movs	r0, #2
}
 800c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800c526:	b2f9      	uxtb	r1, r7
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff fe73 	bl	800c214 <FLASH_Program_Byte>
        break;
 800c52e:	e7d4      	b.n	800c4da <HAL_FLASH_Program+0x3e>
 800c530:	20003574 	.word	0x20003574
 800c534:	40023c00 	.word	0x40023c00
 800c538:	0802e348 	.word	0x0802e348

0800c53c <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c53c:	2803      	cmp	r0, #3
{
 800c53e:	b538      	push	{r3, r4, r5, lr}
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c544:	d82f      	bhi.n	800c5a6 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800c546:	1e6b      	subs	r3, r5, #1
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d81c      	bhi.n	800c586 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800c54c:	4b19      	ldr	r3, [pc, #100]	; (800c5b4 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800c54e:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800c550:	691a      	ldr	r2, [r3, #16]
 800c552:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c556:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800c558:	d10e      	bne.n	800c578 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800c55a:	6919      	ldr	r1, [r3, #16]
 800c55c:	f248 0204 	movw	r2, #32772	; 0x8004
 800c560:	430a      	orrs	r2, r1
 800c562:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800c564:	4a13      	ldr	r2, [pc, #76]	; (800c5b4 <FLASH_MassErase+0x78>)
 800c566:	6910      	ldr	r0, [r2, #16]
 800c568:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800c56c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c570:	6110      	str	r0, [r2, #16]
 800c572:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800c576:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800c578:	2d02      	cmp	r5, #2
 800c57a:	d10e      	bne.n	800c59a <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800c57c:	691a      	ldr	r2, [r3, #16]
 800c57e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c582:	611a      	str	r2, [r3, #16]
 800c584:	e7ee      	b.n	800c564 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800c586:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c58a:	480b      	ldr	r0, [pc, #44]	; (800c5b8 <FLASH_MassErase+0x7c>)
 800c58c:	f7f9 f9aa 	bl	80058e4 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800c590:	4a08      	ldr	r2, [pc, #32]	; (800c5b4 <FLASH_MassErase+0x78>)
 800c592:	6913      	ldr	r3, [r2, #16]
 800c594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c598:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800c59a:	4a06      	ldr	r2, [pc, #24]	; (800c5b4 <FLASH_MassErase+0x78>)
 800c59c:	6913      	ldr	r3, [r2, #16]
 800c59e:	f043 0304 	orr.w	r3, r3, #4
 800c5a2:	6113      	str	r3, [r2, #16]
 800c5a4:	e7de      	b.n	800c564 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c5a6:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c5aa:	4803      	ldr	r0, [pc, #12]	; (800c5b8 <FLASH_MassErase+0x7c>)
 800c5ac:	f7f9 f99a 	bl	80058e4 <assert_failed>
 800c5b0:	e7c9      	b.n	800c546 <FLASH_MassErase+0xa>
 800c5b2:	bf00      	nop
 800c5b4:	40023c00 	.word	0x40023c00
 800c5b8:	0802e384 	.word	0x0802e384

0800c5bc <HAL_FLASHEx_OBProgram>:
{
 800c5bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800c5be:	4d64      	ldr	r5, [pc, #400]	; (800c750 <HAL_FLASHEx_OBProgram+0x194>)
 800c5c0:	7d2b      	ldrb	r3, [r5, #20]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	f000 80bb 	beq.w	800c73e <HAL_FLASHEx_OBProgram+0x182>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c5ce:	6803      	ldr	r3, [r0, #0]
 800c5d0:	2b3f      	cmp	r3, #63	; 0x3f
 800c5d2:	f200 808c 	bhi.w	800c6ee <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c5d6:	07d9      	lsls	r1, r3, #31
 800c5d8:	d40d      	bmi.n	800c5f6 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c5da:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c5dc:	079a      	lsls	r2, r3, #30
 800c5de:	d42c      	bmi.n	800c63a <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c5e0:	075e      	lsls	r6, r3, #29
 800c5e2:	d440      	bmi.n	800c666 <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c5e4:	0719      	lsls	r1, r3, #28
 800c5e6:	d44f      	bmi.n	800c688 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c5e8:	06da      	lsls	r2, r3, #27
 800c5ea:	d45b      	bmi.n	800c6a4 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c5ec:	069b      	lsls	r3, r3, #26
 800c5ee:	d46c      	bmi.n	800c6ca <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	752b      	strb	r3, [r5, #20]
}
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800c5f6:	6863      	ldr	r3, [r4, #4]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d905      	bls.n	800c608 <HAL_FLASHEx_OBProgram+0x4c>
 800c5fc:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800c600:	4854      	ldr	r0, [pc, #336]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c602:	f7f9 f96f 	bl	80058e4 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c606:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800c608:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c60a:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c60c:	4b52      	ldr	r3, [pc, #328]	; (800c758 <HAL_FLASHEx_OBProgram+0x19c>)
 800c60e:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c612:	d07f      	beq.n	800c714 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c614:	b903      	cbnz	r3, 800c618 <HAL_FLASHEx_OBProgram+0x5c>
 800c616:	b926      	cbnz	r6, 800c622 <HAL_FLASHEx_OBProgram+0x66>
 800c618:	f240 314f 	movw	r1, #847	; 0x34f
 800c61c:	484d      	ldr	r0, [pc, #308]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c61e:	f7f9 f961 	bl	80058e4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c622:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c626:	f7ff ff0d 	bl	800c444 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c62a:	b918      	cbnz	r0, 800c634 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800c62c:	4b4b      	ldr	r3, [pc, #300]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c62e:	695a      	ldr	r2, [r3, #20]
 800c630:	4316      	orrs	r6, r2
 800c632:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	079a      	lsls	r2, r3, #30
 800c638:	d5d2      	bpl.n	800c5e0 <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800c63a:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800c63c:	2eaa      	cmp	r6, #170	; 0xaa
 800c63e:	bf18      	it	ne
 800c640:	2e55      	cmpne	r6, #85	; 0x55
 800c642:	d006      	beq.n	800c652 <HAL_FLASHEx_OBProgram+0x96>
 800c644:	2ecc      	cmp	r6, #204	; 0xcc
 800c646:	d004      	beq.n	800c652 <HAL_FLASHEx_OBProgram+0x96>
 800c648:	f240 316e 	movw	r1, #878	; 0x36e
 800c64c:	4841      	ldr	r0, [pc, #260]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c64e:	f7f9 f949 	bl	80058e4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c652:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c656:	f7ff fef5 	bl	800c444 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c65a:	b908      	cbnz	r0, 800c660 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800c65c:	4b3f      	ldr	r3, [pc, #252]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c65e:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	075e      	lsls	r6, r3, #29
 800c664:	d5be      	bpl.n	800c5e4 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c666:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800c66a:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c66c:	f7ff feea 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c670:	b938      	cbnz	r0, 800c682 <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c672:	493a      	ldr	r1, [pc, #232]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c674:	4b3a      	ldr	r3, [pc, #232]	; (800c760 <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c676:	4a3b      	ldr	r2, [pc, #236]	; (800c764 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c678:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c67a:	694e      	ldr	r6, [r1, #20]
 800c67c:	4032      	ands	r2, r6
 800c67e:	4313      	orrs	r3, r2
 800c680:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	0719      	lsls	r1, r3, #28
 800c686:	d5af      	bpl.n	800c5e8 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c688:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c68a:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800c68e:	d158      	bne.n	800c742 <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c690:	4932      	ldr	r1, [pc, #200]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c692:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c694:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c696:	694a      	ldr	r2, [r1, #20]
 800c698:	f022 020c 	bic.w	r2, r2, #12
 800c69c:	4332      	orrs	r2, r6
 800c69e:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c6a0:	06da      	lsls	r2, r3, #27
 800c6a2:	d5a3      	bpl.n	800c5ec <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800c6a4:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c6a6:	f248 0313 	movw	r3, #32787	; 0x8013
 800c6aa:	429e      	cmp	r6, r3
 800c6ac:	d826      	bhi.n	800c6fc <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6b2:	f7ff fec7 	bl	800c444 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800c6b6:	b928      	cbnz	r0, 800c6c4 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800c6b8:	4a28      	ldr	r2, [pc, #160]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6ba:	4b2b      	ldr	r3, [pc, #172]	; (800c768 <HAL_FLASHEx_OBProgram+0x1ac>)
 800c6bc:	6991      	ldr	r1, [r2, #24]
 800c6be:	400b      	ands	r3, r1
 800c6c0:	4333      	orrs	r3, r6
 800c6c2:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	069b      	lsls	r3, r3, #26
 800c6c8:	d592      	bpl.n	800c5f0 <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800c6ca:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c6cc:	f248 0313 	movw	r3, #32787	; 0x8013
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d819      	bhi.n	800c708 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6d8:	f7ff feb4 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d187      	bne.n	800c5f0 <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800c6e0:	4a1e      	ldr	r2, [pc, #120]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6e2:	6993      	ldr	r3, [r2, #24]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c6ea:	6193      	str	r3, [r2, #24]
 800c6ec:	e780      	b.n	800c5f0 <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c6ee:	f240 1125 	movw	r1, #293	; 0x125
 800c6f2:	4818      	ldr	r0, [pc, #96]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c6f4:	f7f9 f8f6 	bl	80058e4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	e76c      	b.n	800c5d6 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c6fc:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c700:	4814      	ldr	r0, [pc, #80]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c702:	f7f9 f8ef 	bl	80058e4 <assert_failed>
 800c706:	e7d2      	b.n	800c6ae <HAL_FLASHEx_OBProgram+0xf2>
 800c708:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c70c:	4811      	ldr	r0, [pc, #68]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c70e:	f7f9 f8e9 	bl	80058e4 <assert_failed>
 800c712:	e7df      	b.n	800c6d4 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c714:	b96b      	cbnz	r3, 800c732 <HAL_FLASHEx_OBProgram+0x176>
 800c716:	b166      	cbz	r6, 800c732 <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c71c:	f7ff fe92 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c720:	2800      	cmp	r0, #0
 800c722:	d187      	bne.n	800c634 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800c724:	4a0d      	ldr	r2, [pc, #52]	; (800c75c <HAL_FLASHEx_OBProgram+0x1a0>)
 800c726:	6953      	ldr	r3, [r2, #20]
 800c728:	ea23 0606 	bic.w	r6, r3, r6
 800c72c:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	e754      	b.n	800c5dc <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c732:	f240 312b 	movw	r1, #811	; 0x32b
 800c736:	4807      	ldr	r0, [pc, #28]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c738:	f7f9 f8d4 	bl	80058e4 <assert_failed>
 800c73c:	e7ec      	b.n	800c718 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800c73e:	2002      	movs	r0, #2
}
 800c740:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c742:	f44f 7162 	mov.w	r1, #904	; 0x388
 800c746:	4803      	ldr	r0, [pc, #12]	; (800c754 <HAL_FLASHEx_OBProgram+0x198>)
 800c748:	f7f9 f8cc 	bl	80058e4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	e79f      	b.n	800c690 <HAL_FLASHEx_OBProgram+0xd4>
 800c750:	20003574 	.word	0x20003574
 800c754:	0802e384 	.word	0x0802e384
 800c758:	f000ffff 	.word	0xf000ffff
 800c75c:	40023c00 	.word	0x40023c00
 800c760:	f00000f0 	.word	0xf00000f0
 800c764:	0fffff0f 	.word	0x0fffff0f
 800c768:	ffff0000 	.word	0xffff0000

0800c76c <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c76c:	4a11      	ldr	r2, [pc, #68]	; (800c7b4 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c76e:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c770:	4b11      	ldr	r3, [pc, #68]	; (800c7b8 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c772:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c774:	6951      	ldr	r1, [r2, #20]
 800c776:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800c778:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800c77a:	7d51      	ldrb	r1, [r2, #21]
 800c77c:	29aa      	cmp	r1, #170	; 0xaa
 800c77e:	b2cb      	uxtb	r3, r1
 800c780:	d015      	beq.n	800c7ae <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800c782:	7d53      	ldrb	r3, [r2, #21]
 800c784:	2bcc      	cmp	r3, #204	; 0xcc
 800c786:	bf0c      	ite	eq
 800c788:	22cc      	moveq	r2, #204	; 0xcc
 800c78a:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c78c:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800c78e:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c790:	4a0a      	ldr	r2, [pc, #40]	; (800c7bc <HAL_FLASHEx_OBGetConfig+0x50>)
 800c792:	6959      	ldr	r1, [r3, #20]
 800c794:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800c796:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800c798:	695a      	ldr	r2, [r3, #20]
 800c79a:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800c79e:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800c7a0:	699a      	ldr	r2, [r3, #24]
 800c7a2:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800c7a4:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800c7aa:	61c3      	str	r3, [r0, #28]
}
 800c7ac:	4770      	bx	lr
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	e7ec      	b.n	800c78c <HAL_FLASHEx_OBGetConfig+0x20>
 800c7b2:	bf00      	nop
 800c7b4:	40023c00 	.word	0x40023c00
 800c7b8:	0fff0000 	.word	0x0fff0000
 800c7bc:	f00000f0 	.word	0xf00000f0

0800c7c0 <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800c7c0:	2817      	cmp	r0, #23
{
 800c7c2:	b538      	push	{r3, r4, r5, lr}
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800c7c8:	d82b      	bhi.n	800c822 <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c7ca:	2c03      	cmp	r4, #3
 800c7cc:	d821      	bhi.n	800c812 <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c7ce:	b9dc      	cbnz	r4, 800c808 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800c7d0:	4b1a      	ldr	r3, [pc, #104]	; (800c83c <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800c7d2:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800c7d4:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800c7d6:	bf88      	it	hi
 800c7d8:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800c7da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c7de:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800c7e0:	6919      	ldr	r1, [r3, #16]
 800c7e2:	430c      	orrs	r4, r1
 800c7e4:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c7e6:	691a      	ldr	r2, [r3, #16]
 800c7e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800c7ec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c7ee:	6918      	ldr	r0, [r3, #16]
 800c7f0:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800c7f4:	f045 0502 	orr.w	r5, r5, #2
 800c7f8:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c7fa:	691a      	ldr	r2, [r3, #16]
 800c7fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c800:	611a      	str	r2, [r3, #16]
 800c802:	f3bf 8f4f 	dsb	sy
}
 800c806:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c808:	2c01      	cmp	r4, #1
 800c80a:	d110      	bne.n	800c82e <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c80c:	f44f 7480 	mov.w	r4, #256	; 0x100
 800c810:	e7de      	b.n	800c7d0 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c812:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800c816:	480a      	ldr	r0, [pc, #40]	; (800c840 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c818:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c81c:	f7f9 f862 	bl	80058e4 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c820:	e7d6      	b.n	800c7d0 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800c822:	f240 11eb 	movw	r1, #491	; 0x1eb
 800c826:	4806      	ldr	r0, [pc, #24]	; (800c840 <FLASH_Erase_Sector+0x80>)
 800c828:	f7f9 f85c 	bl	80058e4 <assert_failed>
 800c82c:	e7cd      	b.n	800c7ca <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c82e:	2c02      	cmp	r4, #2
 800c830:	bf0c      	ite	eq
 800c832:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800c836:	f44f 7440 	movne.w	r4, #768	; 0x300
 800c83a:	e7c9      	b.n	800c7d0 <FLASH_Erase_Sector+0x10>
 800c83c:	40023c00 	.word	0x40023c00
 800c840:	0802e384 	.word	0x0802e384

0800c844 <HAL_FLASHEx_Erase>:
{
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800c848:	4f2f      	ldr	r7, [pc, #188]	; (800c908 <HAL_FLASHEx_Erase+0xc4>)
 800c84a:	7d3b      	ldrb	r3, [r7, #20]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d040      	beq.n	800c8d2 <HAL_FLASHEx_Erase+0x8e>
 800c850:	2301      	movs	r3, #1
 800c852:	4604      	mov	r4, r0
 800c854:	4688      	mov	r8, r1
 800c856:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800c858:	6803      	ldr	r3, [r0, #0]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d903      	bls.n	800c866 <HAL_FLASHEx_Erase+0x22>
 800c85e:	21a5      	movs	r1, #165	; 0xa5
 800c860:	482a      	ldr	r0, [pc, #168]	; (800c90c <HAL_FLASHEx_Erase+0xc8>)
 800c862:	f7f9 f83f 	bl	80058e4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c86a:	f7ff fdeb 	bl	800c444 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c86e:	4606      	mov	r6, r0
 800c870:	bb50      	cbnz	r0, 800c8c8 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800c872:	f04f 33ff 	mov.w	r3, #4294967295
 800c876:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d034      	beq.n	800c8ea <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c880:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c884:	442b      	add	r3, r5
 800c886:	1e5a      	subs	r2, r3, #1
 800c888:	2a17      	cmp	r2, #23
 800c88a:	d826      	bhi.n	800c8da <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c88c:	429d      	cmp	r5, r3
 800c88e:	d21b      	bcs.n	800c8c8 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c890:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800c910 <HAL_FLASHEx_Erase+0xcc>
 800c894:	e005      	b.n	800c8a2 <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c896:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800c89a:	3501      	adds	r5, #1
 800c89c:	4413      	add	r3, r2
 800c89e:	42ab      	cmp	r3, r5
 800c8a0:	d912      	bls.n	800c8c8 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	7c21      	ldrb	r1, [r4, #16]
 800c8a6:	f7ff ff8b 	bl	800c7c0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c8ae:	f7ff fdc9 	bl	800c444 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c8b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8b6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c8ba:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0e9      	beq.n	800c896 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8c2:	4606      	mov	r6, r0
          *SectorError = index;
 800c8c4:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800c8cc:	753b      	strb	r3, [r7, #20]
}
 800c8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800c8d2:	2602      	movs	r6, #2
}
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c8da:	21c1      	movs	r1, #193	; 0xc1
 800c8dc:	480b      	ldr	r0, [pc, #44]	; (800c90c <HAL_FLASHEx_Erase+0xc8>)
 800c8de:	f7f9 f801 	bl	80058e4 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c8e2:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c8e6:	442b      	add	r3, r5
 800c8e8:	e7d0      	b.n	800c88c <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c8ea:	6861      	ldr	r1, [r4, #4]
 800c8ec:	7c20      	ldrb	r0, [r4, #16]
 800c8ee:	f7ff fe25 	bl	800c53c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c8f6:	f7ff fda5 	bl	800c444 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800c8fa:	4a05      	ldr	r2, [pc, #20]	; (800c910 <HAL_FLASHEx_Erase+0xcc>)
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8fe:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800c900:	6911      	ldr	r1, [r2, #16]
 800c902:	400b      	ands	r3, r1
 800c904:	6113      	str	r3, [r2, #16]
 800c906:	e7df      	b.n	800c8c8 <HAL_FLASHEx_Erase+0x84>
 800c908:	20003574 	.word	0x20003574
 800c90c:	0802e384 	.word	0x0802e384
 800c910:	40023c00 	.word	0x40023c00
 800c914:	ffff7ffb 	.word	0xffff7ffb

0800c918 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c918:	4bb9      	ldr	r3, [pc, #740]	; (800cc00 <HAL_GPIO_Init+0x2e8>)
 800c91a:	4aba      	ldr	r2, [pc, #744]	; (800cc04 <HAL_GPIO_Init+0x2ec>)
 800c91c:	4290      	cmp	r0, r2
 800c91e:	bf18      	it	ne
 800c920:	4298      	cmpne	r0, r3
{
 800c922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c926:	bf18      	it	ne
 800c928:	2301      	movne	r3, #1
{
 800c92a:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c92c:	bf08      	it	eq
 800c92e:	2300      	moveq	r3, #0
{
 800c930:	4606      	mov	r6, r0
 800c932:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	d026      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c938:	4bb3      	ldr	r3, [pc, #716]	; (800cc08 <HAL_GPIO_Init+0x2f0>)
 800c93a:	4298      	cmp	r0, r3
 800c93c:	d023      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c93e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c942:	4298      	cmp	r0, r3
 800c944:	d01f      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c94a:	4298      	cmp	r0, r3
 800c94c:	d01b      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c94e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c952:	4298      	cmp	r0, r3
 800c954:	d017      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95a:	4298      	cmp	r0, r3
 800c95c:	d013      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c95e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c962:	4298      	cmp	r0, r3
 800c964:	d00f      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c966:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c96e:	4290      	cmp	r0, r2
 800c970:	bf18      	it	ne
 800c972:	4298      	cmpne	r0, r3
 800c974:	d007      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c97a:	4298      	cmp	r0, r3
 800c97c:	d003      	beq.n	800c986 <HAL_GPIO_Init+0x6e>
 800c97e:	21aa      	movs	r1, #170	; 0xaa
 800c980:	48a2      	ldr	r0, [pc, #648]	; (800cc0c <HAL_GPIO_Init+0x2f4>)
 800c982:	f7f8 ffaf 	bl	80058e4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800c986:	883b      	ldrh	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 811a 	beq.w	800cbc2 <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800c994:	bf18      	it	ne
 800c996:	2a03      	cmpne	r2, #3
 800c998:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800c99c:	bf8c      	ite	hi
 800c99e:	2301      	movhi	r3, #1
 800c9a0:	2300      	movls	r3, #0
 800c9a2:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2300      	moveq	r3, #0
 800c9aa:	f003 0301 	andne.w	r3, r3, #1
 800c9ae:	3a11      	subs	r2, #17
 800c9b0:	2a01      	cmp	r2, #1
 800c9b2:	bf94      	ite	ls
 800c9b4:	2300      	movls	r3, #0
 800c9b6:	f003 0301 	andhi.w	r3, r3, #1
 800c9ba:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800c9be:	bf0c      	ite	eq
 800c9c0:	2300      	moveq	r3, #0
 800c9c2:	f003 0301 	andne.w	r3, r3, #1
 800c9c6:	b11b      	cbz	r3, 800c9d0 <HAL_GPIO_Init+0xb8>
 800c9c8:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800c9cc:	f040 813e 	bne.w	800cc4c <HAL_GPIO_Init+0x334>
{
 800c9d0:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9d2:	f8df a260 	ldr.w	sl, [pc, #608]	; 800cc34 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c9d6:	46b8      	mov	r8, r7
 800c9d8:	e003      	b.n	800c9e2 <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800c9da:	3501      	adds	r5, #1
 800c9dc:	2d10      	cmp	r5, #16
 800c9de:	f000 80b3 	beq.w	800cb48 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800c9e2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9e4:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800c9e8:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9ea:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800c9ee:	ea34 0303 	bics.w	r3, r4, r3
 800c9f2:	d1f2      	bne.n	800c9da <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c9f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9f8:	f001 0303 	and.w	r3, r1, #3
 800c9fc:	1e5a      	subs	r2, r3, #1
 800c9fe:	2a01      	cmp	r2, #1
 800ca00:	f240 80a5 	bls.w	800cb4e <HAL_GPIO_Init+0x236>
 800ca04:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ca06:	f04f 0b03 	mov.w	fp, #3
 800ca0a:	fa0b fb07 	lsl.w	fp, fp, r7
 800ca0e:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d025      	beq.n	800ca62 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ca16:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ca1a:	2802      	cmp	r0, #2
 800ca1c:	f200 80b3 	bhi.w	800cb86 <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800ca20:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ca22:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca24:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ca26:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ca2a:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800ca2e:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca30:	d117      	bne.n	800ca62 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800ca32:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ca36:	280f      	cmp	r0, #15
 800ca38:	f200 80c8 	bhi.w	800cbcc <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800ca3c:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ca3e:	f005 0e07 	and.w	lr, r5, #7
 800ca42:	f04f 0c0f 	mov.w	ip, #15
 800ca46:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ca4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ca4e:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ca50:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ca54:	fa0c fe0e 	lsl.w	lr, ip, lr
 800ca58:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ca5c:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800ca60:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800ca62:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca64:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca66:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ca6a:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca6e:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800ca72:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca74:	d0b1      	beq.n	800c9da <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca76:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800ca7a:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca7e:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca86:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca88:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800ca8c:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800ca90:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800ca94:	9203      	str	r2, [sp, #12]
 800ca96:	4a5e      	ldr	r2, [pc, #376]	; (800cc10 <HAL_GPIO_Init+0x2f8>)
 800ca98:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800ca9a:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca9c:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800ca9e:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800caa0:	40a3      	lsls	r3, r4
 800caa2:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800caa6:	4857      	ldr	r0, [pc, #348]	; (800cc04 <HAL_GPIO_Init+0x2ec>)
 800caa8:	4286      	cmp	r6, r0
 800caaa:	d025      	beq.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800caac:	9801      	ldr	r0, [sp, #4]
 800caae:	2800      	cmp	r0, #0
 800cab0:	d07d      	beq.n	800cbae <HAL_GPIO_Init+0x296>
 800cab2:	4855      	ldr	r0, [pc, #340]	; (800cc08 <HAL_GPIO_Init+0x2f0>)
 800cab4:	4286      	cmp	r6, r0
 800cab6:	d07f      	beq.n	800cbb8 <HAL_GPIO_Init+0x2a0>
 800cab8:	4856      	ldr	r0, [pc, #344]	; (800cc14 <HAL_GPIO_Init+0x2fc>)
 800caba:	4286      	cmp	r6, r0
 800cabc:	f000 8091 	beq.w	800cbe2 <HAL_GPIO_Init+0x2ca>
 800cac0:	4855      	ldr	r0, [pc, #340]	; (800cc18 <HAL_GPIO_Init+0x300>)
 800cac2:	4286      	cmp	r6, r0
 800cac4:	f000 8092 	beq.w	800cbec <HAL_GPIO_Init+0x2d4>
 800cac8:	4854      	ldr	r0, [pc, #336]	; (800cc1c <HAL_GPIO_Init+0x304>)
 800caca:	4286      	cmp	r6, r0
 800cacc:	f000 80b4 	beq.w	800cc38 <HAL_GPIO_Init+0x320>
 800cad0:	4853      	ldr	r0, [pc, #332]	; (800cc20 <HAL_GPIO_Init+0x308>)
 800cad2:	4286      	cmp	r6, r0
 800cad4:	f000 80b5 	beq.w	800cc42 <HAL_GPIO_Init+0x32a>
 800cad8:	4852      	ldr	r0, [pc, #328]	; (800cc24 <HAL_GPIO_Init+0x30c>)
 800cada:	4286      	cmp	r6, r0
 800cadc:	f000 808b 	beq.w	800cbf6 <HAL_GPIO_Init+0x2de>
 800cae0:	4851      	ldr	r0, [pc, #324]	; (800cc28 <HAL_GPIO_Init+0x310>)
 800cae2:	4286      	cmp	r6, r0
 800cae4:	f000 80b7 	beq.w	800cc56 <HAL_GPIO_Init+0x33e>
 800cae8:	4850      	ldr	r0, [pc, #320]	; (800cc2c <HAL_GPIO_Init+0x314>)
 800caea:	4286      	cmp	r6, r0
 800caec:	bf0c      	ite	eq
 800caee:	2009      	moveq	r0, #9
 800caf0:	200a      	movne	r0, #10
 800caf2:	fa00 f404 	lsl.w	r4, r0, r4
 800caf6:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800caf8:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800cafa:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800cafe:	4b4c      	ldr	r3, [pc, #304]	; (800cc30 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb00:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800cb02:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cb04:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800cb06:	4b4a      	ldr	r3, [pc, #296]	; (800cc30 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb08:	bf54      	ite	pl
 800cb0a:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb0c:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cb10:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800cb12:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800cb14:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800cb16:	4b46      	ldr	r3, [pc, #280]	; (800cc30 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb18:	bf54      	ite	pl
 800cb1a:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb1c:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cb20:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800cb22:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800cb24:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800cb26:	4b42      	ldr	r3, [pc, #264]	; (800cc30 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb28:	bf54      	ite	pl
 800cb2a:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb2c:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800cb30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cb32:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800cb34:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800cb36:	4a3e      	ldr	r2, [pc, #248]	; (800cc30 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb38:	bf54      	ite	pl
 800cb3a:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800cb3c:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb40:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800cb42:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb44:	f47f af4d 	bne.w	800c9e2 <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800cb48:	b005      	add	sp, #20
 800cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cb4e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800cb52:	2803      	cmp	r0, #3
 800cb54:	d820      	bhi.n	800cb98 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800cb56:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb58:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb5c:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb60:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800cb64:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb66:	ea20 000b 	bic.w	r0, r0, fp
 800cb6a:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb6e:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800cb72:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800cb74:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb76:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb7a:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800cb7e:	40ac      	lsls	r4, r5
 800cb80:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800cb82:	6074      	str	r4, [r6, #4]
 800cb84:	e745      	b.n	800ca12 <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800cb86:	21ce      	movs	r1, #206	; 0xce
 800cb88:	4820      	ldr	r0, [pc, #128]	; (800cc0c <HAL_GPIO_Init+0x2f4>)
 800cb8a:	f7f8 feab 	bl	80058e4 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800cb8e:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb92:	f001 0303 	and.w	r3, r1, #3
 800cb96:	e743      	b.n	800ca20 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cb98:	21bd      	movs	r1, #189	; 0xbd
 800cb9a:	481c      	ldr	r0, [pc, #112]	; (800cc0c <HAL_GPIO_Init+0x2f4>)
 800cb9c:	f7f8 fea2 	bl	80058e4 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cba0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cba4:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cba8:	f001 0303 	and.w	r3, r1, #3
 800cbac:	e7d3      	b.n	800cb56 <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbae:	2001      	movs	r0, #1
 800cbb0:	fa00 f404 	lsl.w	r4, r0, r4
 800cbb4:	4323      	orrs	r3, r4
 800cbb6:	e79f      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cbb8:	2002      	movs	r0, #2
 800cbba:	fa00 f404 	lsl.w	r4, r0, r4
 800cbbe:	4323      	orrs	r3, r4
 800cbc0:	e79a      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800cbc2:	21ab      	movs	r1, #171	; 0xab
 800cbc4:	4811      	ldr	r0, [pc, #68]	; (800cc0c <HAL_GPIO_Init+0x2f4>)
 800cbc6:	f7f8 fe8d 	bl	80058e4 <assert_failed>
 800cbca:	e6e0      	b.n	800c98e <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800cbcc:	21db      	movs	r1, #219	; 0xdb
 800cbce:	480f      	ldr	r0, [pc, #60]	; (800cc0c <HAL_GPIO_Init+0x2f4>)
 800cbd0:	f7f8 fe88 	bl	80058e4 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cbd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cbd8:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cbdc:	f001 0303 	and.w	r3, r1, #3
 800cbe0:	e72c      	b.n	800ca3c <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbe2:	2003      	movs	r0, #3
 800cbe4:	fa00 f404 	lsl.w	r4, r0, r4
 800cbe8:	4323      	orrs	r3, r4
 800cbea:	e785      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cbec:	2004      	movs	r0, #4
 800cbee:	fa00 f404 	lsl.w	r4, r0, r4
 800cbf2:	4323      	orrs	r3, r4
 800cbf4:	e780      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cbf6:	2007      	movs	r0, #7
 800cbf8:	fa00 f404 	lsl.w	r4, r0, r4
 800cbfc:	4323      	orrs	r3, r4
 800cbfe:	e77b      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cc00:	40020400 	.word	0x40020400
 800cc04:	40020000 	.word	0x40020000
 800cc08:	40020800 	.word	0x40020800
 800cc0c:	0802e3c4 	.word	0x0802e3c4
 800cc10:	40013800 	.word	0x40013800
 800cc14:	40020c00 	.word	0x40020c00
 800cc18:	40021000 	.word	0x40021000
 800cc1c:	40021400 	.word	0x40021400
 800cc20:	40021800 	.word	0x40021800
 800cc24:	40021c00 	.word	0x40021c00
 800cc28:	40022000 	.word	0x40022000
 800cc2c:	40022400 	.word	0x40022400
 800cc30:	40013c00 	.word	0x40013c00
 800cc34:	40023800 	.word	0x40023800
 800cc38:	2005      	movs	r0, #5
 800cc3a:	fa00 f404 	lsl.w	r4, r0, r4
 800cc3e:	4323      	orrs	r3, r4
 800cc40:	e75a      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cc42:	2006      	movs	r0, #6
 800cc44:	fa00 f404 	lsl.w	r4, r0, r4
 800cc48:	4323      	orrs	r3, r4
 800cc4a:	e755      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800cc4c:	21ac      	movs	r1, #172	; 0xac
 800cc4e:	4804      	ldr	r0, [pc, #16]	; (800cc60 <HAL_GPIO_Init+0x348>)
 800cc50:	f7f8 fe48 	bl	80058e4 <assert_failed>
 800cc54:	e6bc      	b.n	800c9d0 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cc56:	2008      	movs	r0, #8
 800cc58:	fa00 f404 	lsl.w	r4, r0, r4
 800cc5c:	4323      	orrs	r3, r4
 800cc5e:	e74b      	b.n	800caf8 <HAL_GPIO_Init+0x1e0>
 800cc60:	0802e3c4 	.word	0x0802e3c4

0800cc64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc68:	4f6b      	ldr	r7, [pc, #428]	; (800ce18 <HAL_GPIO_DeInit+0x1b4>)
{
 800cc6a:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc6c:	4b6b      	ldr	r3, [pc, #428]	; (800ce1c <HAL_GPIO_DeInit+0x1b8>)
{
 800cc6e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc70:	42b8      	cmp	r0, r7
 800cc72:	bf18      	it	ne
 800cc74:	4298      	cmpne	r0, r3
 800cc76:	bf14      	ite	ne
 800cc78:	2701      	movne	r7, #1
 800cc7a:	2700      	moveq	r7, #0
 800cc7c:	d027      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cc7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc82:	4298      	cmp	r0, r3
 800cc84:	d023      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cc86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc8a:	4298      	cmp	r0, r3
 800cc8c:	d01f      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc92:	4298      	cmp	r0, r3
 800cc94:	d01b      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cc96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc9a:	4298      	cmp	r0, r3
 800cc9c:	d017      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cc9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca2:	4298      	cmp	r0, r3
 800cca4:	d013      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800cca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccaa:	4298      	cmp	r0, r3
 800ccac:	d00f      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800ccae:	4a5c      	ldr	r2, [pc, #368]	; (800ce20 <HAL_GPIO_DeInit+0x1bc>)
 800ccb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb4:	4290      	cmp	r0, r2
 800ccb6:	bf18      	it	ne
 800ccb8:	4298      	cmpne	r0, r3
 800ccba:	d008      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800ccbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc0:	4298      	cmp	r0, r3
 800ccc2:	d004      	beq.n	800ccce <HAL_GPIO_DeInit+0x6a>
 800ccc4:	f240 112b 	movw	r1, #299	; 0x12b
 800ccc8:	4856      	ldr	r0, [pc, #344]	; (800ce24 <HAL_GPIO_DeInit+0x1c0>)
 800ccca:	f7f8 fe0b 	bl	80058e4 <assert_failed>
{
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ce44 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800ccd4:	f8df a140 	ldr.w	sl, [pc, #320]	; 800ce18 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ccd8:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800ce48 <HAL_GPIO_DeInit+0x1e4>
 800ccdc:	e002      	b.n	800cce4 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800ccde:	3301      	adds	r3, #1
 800cce0:	2b10      	cmp	r3, #16
 800cce2:	d07b      	beq.n	800cddc <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800cce4:	2001      	movs	r0, #1
 800cce6:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800ccea:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800ccee:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800ccf2:	d1f4      	bne.n	800ccde <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800ccf4:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ccf8:	f003 0103 	and.w	r1, r3, #3
 800ccfc:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cd00:	4554      	cmp	r4, sl
 800cd02:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cd04:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800cd08:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cd0c:	fa0c fc01 	lsl.w	ip, ip, r1
 800cd10:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cd14:	d01e      	beq.n	800cd54 <HAL_GPIO_DeInit+0xf0>
 800cd16:	2f00      	cmp	r7, #0
 800cd18:	d063      	beq.n	800cde2 <HAL_GPIO_DeInit+0x17e>
 800cd1a:	4843      	ldr	r0, [pc, #268]	; (800ce28 <HAL_GPIO_DeInit+0x1c4>)
 800cd1c:	4284      	cmp	r4, r0
 800cd1e:	d063      	beq.n	800cde8 <HAL_GPIO_DeInit+0x184>
 800cd20:	4842      	ldr	r0, [pc, #264]	; (800ce2c <HAL_GPIO_DeInit+0x1c8>)
 800cd22:	4284      	cmp	r4, r0
 800cd24:	d064      	beq.n	800cdf0 <HAL_GPIO_DeInit+0x18c>
 800cd26:	4842      	ldr	r0, [pc, #264]	; (800ce30 <HAL_GPIO_DeInit+0x1cc>)
 800cd28:	4284      	cmp	r4, r0
 800cd2a:	d065      	beq.n	800cdf8 <HAL_GPIO_DeInit+0x194>
 800cd2c:	4841      	ldr	r0, [pc, #260]	; (800ce34 <HAL_GPIO_DeInit+0x1d0>)
 800cd2e:	4284      	cmp	r4, r0
 800cd30:	d066      	beq.n	800ce00 <HAL_GPIO_DeInit+0x19c>
 800cd32:	4841      	ldr	r0, [pc, #260]	; (800ce38 <HAL_GPIO_DeInit+0x1d4>)
 800cd34:	4284      	cmp	r4, r0
 800cd36:	d053      	beq.n	800cde0 <HAL_GPIO_DeInit+0x17c>
 800cd38:	4840      	ldr	r0, [pc, #256]	; (800ce3c <HAL_GPIO_DeInit+0x1d8>)
 800cd3a:	4284      	cmp	r4, r0
 800cd3c:	d064      	beq.n	800ce08 <HAL_GPIO_DeInit+0x1a4>
 800cd3e:	4838      	ldr	r0, [pc, #224]	; (800ce20 <HAL_GPIO_DeInit+0x1bc>)
 800cd40:	4284      	cmp	r4, r0
 800cd42:	d065      	beq.n	800ce10 <HAL_GPIO_DeInit+0x1ac>
 800cd44:	483e      	ldr	r0, [pc, #248]	; (800ce40 <HAL_GPIO_DeInit+0x1dc>)
 800cd46:	4284      	cmp	r4, r0
 800cd48:	bf14      	ite	ne
 800cd4a:	200a      	movne	r0, #10
 800cd4c:	2009      	moveq	r0, #9
 800cd4e:	fa00 f101 	lsl.w	r1, r0, r1
 800cd52:	e000      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800cd54:	2100      	movs	r1, #0
 800cd56:	4588      	cmp	r8, r1
 800cd58:	d11b      	bne.n	800cd92 <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cd5a:	f8d9 1000 	ldr.w	r1, [r9]
 800cd5e:	ea21 010e 	bic.w	r1, r1, lr
 800cd62:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cd66:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd6a:	ea21 010e 	bic.w	r1, r1, lr
 800cd6e:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd72:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800cd76:	ea21 010e 	bic.w	r1, r1, lr
 800cd7a:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd7e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cd82:	ea21 010e 	bic.w	r1, r1, lr
 800cd86:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cd8a:	68b1      	ldr	r1, [r6, #8]
 800cd8c:	ea21 010c 	bic.w	r1, r1, ip
 800cd90:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd92:	0059      	lsls	r1, r3, #1
 800cd94:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd96:	f003 0c07 	and.w	ip, r3, #7
 800cd9a:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd9c:	fa00 f101 	lsl.w	r1, r0, r1
 800cda0:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cda2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cda6:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdaa:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cdae:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdb0:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800cdb8:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdba:	6a06      	ldr	r6, [r0, #32]
 800cdbc:	ea26 060c 	bic.w	r6, r6, ip
 800cdc0:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cdc2:	68e0      	ldr	r0, [r4, #12]
 800cdc4:	ea20 0001 	bic.w	r0, r0, r1
 800cdc8:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cdca:	6860      	ldr	r0, [r4, #4]
 800cdcc:	ea20 0202 	bic.w	r2, r0, r2
 800cdd0:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cdd2:	68a2      	ldr	r2, [r4, #8]
 800cdd4:	ea22 0101 	bic.w	r1, r2, r1
 800cdd8:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cdda:	d183      	bne.n	800cce4 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800cddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cde0:	2006      	movs	r0, #6
 800cde2:	fa00 f101 	lsl.w	r1, r0, r1
 800cde6:	e7b6      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800cde8:	2002      	movs	r0, #2
 800cdea:	fa00 f101 	lsl.w	r1, r0, r1
 800cdee:	e7b2      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800cdf0:	2003      	movs	r0, #3
 800cdf2:	fa00 f101 	lsl.w	r1, r0, r1
 800cdf6:	e7ae      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800cdf8:	2004      	movs	r0, #4
 800cdfa:	fa00 f101 	lsl.w	r1, r0, r1
 800cdfe:	e7aa      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800ce00:	2005      	movs	r0, #5
 800ce02:	fa00 f101 	lsl.w	r1, r0, r1
 800ce06:	e7a6      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800ce08:	2007      	movs	r0, #7
 800ce0a:	fa00 f101 	lsl.w	r1, r0, r1
 800ce0e:	e7a2      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800ce10:	2008      	movs	r0, #8
 800ce12:	fa00 f101 	lsl.w	r1, r0, r1
 800ce16:	e79e      	b.n	800cd56 <HAL_GPIO_DeInit+0xf2>
 800ce18:	40020000 	.word	0x40020000
 800ce1c:	40020400 	.word	0x40020400
 800ce20:	40022000 	.word	0x40022000
 800ce24:	0802e3c4 	.word	0x0802e3c4
 800ce28:	40020800 	.word	0x40020800
 800ce2c:	40020c00 	.word	0x40020c00
 800ce30:	40021000 	.word	0x40021000
 800ce34:	40021400 	.word	0x40021400
 800ce38:	40021800 	.word	0x40021800
 800ce3c:	40021c00 	.word	0x40021c00
 800ce40:	40022400 	.word	0x40022400
 800ce44:	40013800 	.word	0x40013800
 800ce48:	40013c00 	.word	0x40013c00

0800ce4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce50:	460c      	mov	r4, r1
 800ce52:	b129      	cbz	r1, 800ce60 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce54:	692b      	ldr	r3, [r5, #16]
 800ce56:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800ce58:	bf14      	ite	ne
 800ce5a:	2001      	movne	r0, #1
 800ce5c:	2000      	moveq	r0, #0
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce60:	f240 1177 	movw	r1, #375	; 0x177
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <HAL_GPIO_ReadPin+0x20>)
 800ce66:	f7f8 fd3d 	bl	80058e4 <assert_failed>
 800ce6a:	e7f3      	b.n	800ce54 <HAL_GPIO_ReadPin+0x8>
 800ce6c:	0802e3c4 	.word	0x0802e3c4

0800ce70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce74:	460c      	mov	r4, r1
{
 800ce76:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce78:	b161      	cbz	r1, 800ce94 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ce7a:	2d01      	cmp	r5, #1
 800ce7c:	d803      	bhi.n	800ce86 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800ce7e:	b905      	cbnz	r5, 800ce82 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce80:	0424      	lsls	r4, r4, #16
 800ce82:	61b4      	str	r4, [r6, #24]
  }
}
 800ce84:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ce86:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800ce8a:	4805      	ldr	r0, [pc, #20]	; (800cea0 <HAL_GPIO_WritePin+0x30>)
 800ce8c:	f7f8 fd2a 	bl	80058e4 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce90:	61b4      	str	r4, [r6, #24]
}
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce94:	f240 1197 	movw	r1, #407	; 0x197
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <HAL_GPIO_WritePin+0x30>)
 800ce9a:	f7f8 fd23 	bl	80058e4 <assert_failed>
 800ce9e:	e7ec      	b.n	800ce7a <HAL_GPIO_WritePin+0xa>
 800cea0:	0802e3c4 	.word	0x0802e3c4

0800cea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cea8:	460c      	mov	r4, r1
 800ceaa:	b141      	cbz	r1, 800cebe <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ceac:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ceae:	ea04 0301 	and.w	r3, r4, r1
 800ceb2:	ea24 0401 	bic.w	r4, r4, r1
 800ceb6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ceba:	61ac      	str	r4, [r5, #24]
}
 800cebc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cebe:	f240 11af 	movw	r1, #431	; 0x1af
 800cec2:	4802      	ldr	r0, [pc, #8]	; (800cecc <HAL_GPIO_TogglePin+0x28>)
 800cec4:	f7f8 fd0e 	bl	80058e4 <assert_failed>
 800cec8:	e7f0      	b.n	800ceac <HAL_GPIO_TogglePin+0x8>
 800ceca:	bf00      	nop
 800cecc:	0802e3c4 	.word	0x0802e3c4

0800ced0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop

0800ced4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ced4:	4a04      	ldr	r2, [pc, #16]	; (800cee8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800ced6:	6951      	ldr	r1, [r2, #20]
 800ced8:	4201      	tst	r1, r0
 800ceda:	d100      	bne.n	800cede <HAL_GPIO_EXTI_IRQHandler+0xa>
 800cedc:	4770      	bx	lr
{
 800cede:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cee0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cee2:	f7ff fff5 	bl	800ced0 <HAL_GPIO_EXTI_Callback>
}
 800cee6:	bd08      	pop	{r3, pc}
 800cee8:	40013c00 	.word	0x40013c00

0800ceec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef0:	460d      	mov	r5, r1
 800cef2:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cef4:	4926      	ldr	r1, [pc, #152]	; (800cf90 <I2C_TransferConfig+0xa4>)
{
 800cef6:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cef8:	4a26      	ldr	r2, [pc, #152]	; (800cf94 <I2C_TransferConfig+0xa8>)
{
 800cefa:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cefc:	6803      	ldr	r3, [r0, #0]
{
 800cefe:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf00:	4293      	cmp	r3, r2
 800cf02:	bf18      	it	ne
 800cf04:	428b      	cmpne	r3, r1
 800cf06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf0a:	bf14      	ite	ne
 800cf0c:	2201      	movne	r2, #1
 800cf0e:	2200      	moveq	r2, #0
 800cf10:	428b      	cmp	r3, r1
 800cf12:	bf0c      	ite	eq
 800cf14:	2200      	moveq	r2, #0
 800cf16:	f002 0201 	andne.w	r2, r2, #1
 800cf1a:	b112      	cbz	r2, 800cf22 <I2C_TransferConfig+0x36>
 800cf1c:	4a1e      	ldr	r2, [pc, #120]	; (800cf98 <I2C_TransferConfig+0xac>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d123      	bne.n	800cf6a <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cf22:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800cf26:	d002      	beq.n	800cf2e <I2C_TransferConfig+0x42>
 800cf28:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800cf2c:	d129      	bne.n	800cf82 <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cf2e:	4b1b      	ldr	r3, [pc, #108]	; (800cf9c <I2C_TransferConfig+0xb0>)
 800cf30:	429f      	cmp	r7, r3
 800cf32:	d005      	beq.n	800cf40 <I2C_TransferConfig+0x54>
 800cf34:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800cf38:	4a19      	ldr	r2, [pc, #100]	; (800cfa0 <I2C_TransferConfig+0xb4>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d000      	beq.n	800cf40 <I2C_TransferConfig+0x54>
 800cf3e:	b9d7      	cbnz	r7, 800cf76 <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf40:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf44:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf48:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800cf4c:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf50:	4a14      	ldr	r2, [pc, #80]	; (800cfa4 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf52:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf54:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800cf58:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf5e:	ea27 0702 	bic.w	r7, r7, r2
 800cf62:	433b      	orrs	r3, r7
 800cf64:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf6a:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800cf6e:	480e      	ldr	r0, [pc, #56]	; (800cfa8 <I2C_TransferConfig+0xbc>)
 800cf70:	f7f8 fcb8 	bl	80058e4 <assert_failed>
 800cf74:	e7d5      	b.n	800cf22 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cf76:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800cf7a:	480b      	ldr	r0, [pc, #44]	; (800cfa8 <I2C_TransferConfig+0xbc>)
 800cf7c:	f7f8 fcb2 	bl	80058e4 <assert_failed>
 800cf80:	e7de      	b.n	800cf40 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cf82:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800cf86:	4808      	ldr	r0, [pc, #32]	; (800cfa8 <I2C_TransferConfig+0xbc>)
 800cf88:	f7f8 fcac 	bl	80058e4 <assert_failed>
 800cf8c:	e7cf      	b.n	800cf2e <I2C_TransferConfig+0x42>
 800cf8e:	bf00      	nop
 800cf90:	40005800 	.word	0x40005800
 800cf94:	40005400 	.word	0x40005400
 800cf98:	40006000 	.word	0x40006000
 800cf9c:	80004000 	.word	0x80004000
 800cfa0:	80002000 	.word	0x80002000
 800cfa4:	03ff63ff 	.word	0x03ff63ff
 800cfa8:	0802e400 	.word	0x0802e400

0800cfac <I2C_IsErrorOccurred>:
{
 800cfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800cfb0:	6803      	ldr	r3, [r0, #0]
{
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800cfb6:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cfb8:	f011 0110 	ands.w	r1, r1, #16
 800cfbc:	d045      	beq.n	800d04a <I2C_IsErrorOccurred+0x9e>
 800cfbe:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800cfc0:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfc4:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800cfc6:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfca:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cfcc:	699a      	ldr	r2, [r3, #24]
 800cfce:	0696      	lsls	r6, r2, #26
 800cfd0:	f100 808d 	bmi.w	800d0ee <I2C_IsErrorOccurred+0x142>
 800cfd4:	f1b9 0f00 	cmp.w	r9, #0
 800cfd8:	f040 808d 	bne.w	800d0f6 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800cfdc:	1c6a      	adds	r2, r5, #1
 800cfde:	d152      	bne.n	800d086 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	0697      	lsls	r7, r2, #26
 800cfe4:	d5fc      	bpl.n	800cfe0 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfe6:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800cfe8:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800cfea:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfee:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800cff0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cff2:	05d5      	lsls	r5, r2, #23
 800cff4:	d42d      	bmi.n	800d052 <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cff6:	0557      	lsls	r7, r2, #21
 800cff8:	d53d      	bpl.n	800d076 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cffa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800cffe:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d002:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d004:	0596      	lsls	r6, r2, #22
 800d006:	d504      	bpl.n	800d012 <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d008:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800d00c:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d010:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d012:	699a      	ldr	r2, [r3, #24]
 800d014:	0790      	lsls	r0, r2, #30
 800d016:	d501      	bpl.n	800d01c <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800d018:	2200      	movs	r2, #0
 800d01a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d01c:	699a      	ldr	r2, [r3, #24]
 800d01e:	07d2      	lsls	r2, r2, #31
 800d020:	d524      	bpl.n	800d06c <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800d022:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d024:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800d026:	4835      	ldr	r0, [pc, #212]	; (800d0fc <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800d028:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800d02c:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d02e:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800d030:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800d032:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800d034:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800d038:	4319      	orrs	r1, r3
 800d03a:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d03c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d040:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800d044:	4648      	mov	r0, r9
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800d04a:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800d04c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d04e:	05d5      	lsls	r5, r2, #23
 800d050:	d5d1      	bpl.n	800cff6 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d052:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800d056:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d05a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d05c:	0550      	lsls	r0, r2, #21
 800d05e:	d5d1      	bpl.n	800d004 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d060:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800d064:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d068:	61d8      	str	r0, [r3, #28]
 800d06a:	e7cb      	b.n	800d004 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d06c:	699a      	ldr	r2, [r3, #24]
 800d06e:	f042 0201 	orr.w	r2, r2, #1
 800d072:	619a      	str	r2, [r3, #24]
 800d074:	e7d5      	b.n	800d022 <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d076:	0595      	lsls	r5, r2, #22
 800d078:	d4c6      	bmi.n	800d008 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800d07a:	f1b9 0f00 	cmp.w	r9, #0
 800d07e:	d1c8      	bne.n	800d012 <I2C_IsErrorOccurred+0x66>
}
 800d080:	4648      	mov	r0, r9
 800d082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d086:	f7fc f971 	bl	800936c <HAL_GetTick>
 800d08a:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d08c:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d08e:	42a8      	cmp	r0, r5
 800d090:	d801      	bhi.n	800d096 <I2C_IsErrorOccurred+0xea>
 800d092:	2d00      	cmp	r5, #0
 800d094:	d19a      	bne.n	800cfcc <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d096:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800d098:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d09c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800d09e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d0a0:	040e      	lsls	r6, r1, #16
 800d0a2:	d50d      	bpl.n	800d0c0 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800d0a4:	0441      	lsls	r1, r0, #17
 800d0a6:	d40b      	bmi.n	800d0c0 <I2C_IsErrorOccurred+0x114>
 800d0a8:	2a20      	cmp	r2, #32
 800d0aa:	d009      	beq.n	800d0c0 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0b2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800d0b4:	f7fc f95a 	bl	800936c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0b8:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800d0ba:	4607      	mov	r7, r0
 800d0bc:	e000      	b.n	800d0c0 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	699e      	ldr	r6, [r3, #24]
 800d0c2:	f016 0620 	ands.w	r6, r6, #32
 800d0c6:	d181      	bne.n	800cfcc <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d0c8:	f7fc f950 	bl	800936c <HAL_GetTick>
 800d0cc:	1bc0      	subs	r0, r0, r7
 800d0ce:	2819      	cmp	r0, #25
 800d0d0:	d9f5      	bls.n	800d0be <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800d0d4:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800d0d8:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0dc:	f043 0320 	orr.w	r3, r3, #32
 800d0e0:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d0e2:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0e6:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0e8:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800d0ec:	e7e8      	b.n	800d0c0 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800d0ee:	f1b9 0f00 	cmp.w	r9, #0
 800d0f2:	f43f af78 	beq.w	800cfe6 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	e7a8      	b.n	800d04c <I2C_IsErrorOccurred+0xa0>
 800d0fa:	bf00      	nop
 800d0fc:	fe00e800 	.word	0xfe00e800

0800d100 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	4604      	mov	r4, r0
 800d104:	460d      	mov	r5, r1
 800d106:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d108:	e004      	b.n	800d114 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d10a:	f7ff ff4f 	bl	800cfac <I2C_IsErrorOccurred>
 800d10e:	b950      	cbnz	r0, 800d126 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800d110:	1c6a      	adds	r2, r5, #1
 800d112:	d10a      	bne.n	800d12a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d114:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d116:	4632      	mov	r2, r6
 800d118:	4629      	mov	r1, r5
 800d11a:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	079b      	lsls	r3, r3, #30
 800d120:	d5f3      	bpl.n	800d10a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800d122:	2000      	movs	r0, #0
}
 800d124:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d126:	2001      	movs	r0, #1
}
 800d128:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d12a:	f7fc f91f 	bl	800936c <HAL_GetTick>
 800d12e:	1b80      	subs	r0, r0, r6
 800d130:	42a8      	cmp	r0, r5
 800d132:	d801      	bhi.n	800d138 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800d134:	2d00      	cmp	r5, #0
 800d136:	d1ed      	bne.n	800d114 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d138:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d13a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d13c:	2200      	movs	r2, #0
        return HAL_ERROR;
 800d13e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d140:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d142:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d146:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d148:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d14c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d150:	bd70      	pop	{r4, r5, r6, pc}
 800d152:	bf00      	nop

0800d154 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	4605      	mov	r5, r0
 800d158:	460c      	mov	r4, r1
 800d15a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d15c:	e008      	b.n	800d170 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d15e:	f7ff ff25 	bl	800cfac <I2C_IsErrorOccurred>
 800d162:	b9d8      	cbnz	r0, 800d19c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d164:	f7fc f902 	bl	800936c <HAL_GetTick>
 800d168:	1b80      	subs	r0, r0, r6
 800d16a:	42a0      	cmp	r0, r4
 800d16c:	d809      	bhi.n	800d182 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800d16e:	b144      	cbz	r4, 800d182 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d170:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d172:	4632      	mov	r2, r6
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	069b      	lsls	r3, r3, #26
 800d17c:	d5ef      	bpl.n	800d15e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800d17e:	2000      	movs	r0, #0
}
 800d180:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d182:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d184:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d186:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d188:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d18a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d18c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d190:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d192:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d196:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d19a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d19c:	2001      	movs	r0, #1
}
 800d19e:	bd70      	pop	{r4, r5, r6, pc}

0800d1a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	460d      	mov	r5, r1
 800d1a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1a8:	e00c      	b.n	800d1c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1aa:	f7ff feff 	bl	800cfac <I2C_IsErrorOccurred>
 800d1ae:	b9e8      	cbnz	r0, 800d1ec <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	699a      	ldr	r2, [r3, #24]
 800d1b4:	0691      	lsls	r1, r2, #26
 800d1b6:	d41b      	bmi.n	800d1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1b8:	f7fc f8d8 	bl	800936c <HAL_GetTick>
 800d1bc:	1b80      	subs	r0, r0, r6
 800d1be:	42a8      	cmp	r0, r5
 800d1c0:	d809      	bhi.n	800d1d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800d1c2:	b145      	cbz	r5, 800d1d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1c4:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1c6:	4632      	mov	r2, r6
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	075b      	lsls	r3, r3, #29
 800d1d0:	d5eb      	bpl.n	800d1aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800d1d2:	2000      	movs	r0, #0
}
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d1d8:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800d1da:	2100      	movs	r1, #0
      return HAL_ERROR;
 800d1dc:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1de:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800d1e0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1e4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d1e6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d1ec:	2001      	movs	r0, #1
}
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d1f0:	699a      	ldr	r2, [r3, #24]
 800d1f2:	0752      	lsls	r2, r2, #29
 800d1f4:	d502      	bpl.n	800d1fc <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800d1f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	d1ea      	bne.n	800d1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1fc:	699a      	ldr	r2, [r3, #24]
 800d1fe:	f012 0210 	ands.w	r2, r2, #16
 800d202:	d012      	beq.n	800d22a <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d204:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d206:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d208:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d20a:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d20c:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800d20e:	4808      	ldr	r0, [pc, #32]	; (800d230 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d210:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d212:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4002      	ands	r2, r0
        return HAL_ERROR;
 800d218:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800d21a:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d21c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800d220:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d224:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d228:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d22a:	6462      	str	r2, [r4, #68]	; 0x44
 800d22c:	e7ee      	b.n	800d20c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800d22e:	bf00      	nop
 800d230:	fe00e800 	.word	0xfe00e800

0800d234 <I2C_RequestMemoryRead>:
{
 800d234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d238:	4c26      	ldr	r4, [pc, #152]	; (800d2d4 <I2C_RequestMemoryRead+0xa0>)
{
 800d23a:	b083      	sub	sp, #12
 800d23c:	4698      	mov	r8, r3
 800d23e:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d240:	9400      	str	r4, [sp, #0]
{
 800d242:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d244:	2300      	movs	r3, #0
 800d246:	fa5f f288 	uxtb.w	r2, r8
{
 800d24a:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d24e:	f7ff fe4d 	bl	800ceec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d252:	4628      	mov	r0, r5
 800d254:	463a      	mov	r2, r7
 800d256:	4621      	mov	r1, r4
 800d258:	f7ff ff52 	bl	800d100 <I2C_WaitOnTXISFlagUntilTimeout>
 800d25c:	b9e0      	cbnz	r0, 800d298 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d25e:	f1b8 0f01 	cmp.w	r8, #1
 800d262:	4606      	mov	r6, r0
 800d264:	d10d      	bne.n	800d282 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d266:	fa5f f389 	uxtb.w	r3, r9
 800d26a:	682a      	ldr	r2, [r5, #0]
 800d26c:	6293      	str	r3, [r2, #40]	; 0x28
 800d26e:	e001      	b.n	800d274 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800d270:	1c61      	adds	r1, r4, #1
 800d272:	d116      	bne.n	800d2a2 <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d274:	6993      	ldr	r3, [r2, #24]
 800d276:	065b      	lsls	r3, r3, #25
 800d278:	d5fa      	bpl.n	800d270 <I2C_RequestMemoryRead+0x3c>
}
 800d27a:	4630      	mov	r0, r6
 800d27c:	b003      	add	sp, #12
 800d27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d282:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800d286:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d28c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d28e:	463a      	mov	r2, r7
 800d290:	f7ff ff36 	bl	800d100 <I2C_WaitOnTXISFlagUntilTimeout>
 800d294:	2800      	cmp	r0, #0
 800d296:	d0e6      	beq.n	800d266 <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800d298:	2601      	movs	r6, #1
}
 800d29a:	4630      	mov	r0, r6
 800d29c:	b003      	add	sp, #12
 800d29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2a2:	f7fc f863 	bl	800936c <HAL_GetTick>
 800d2a6:	1bc0      	subs	r0, r0, r7
 800d2a8:	4284      	cmp	r4, r0
 800d2aa:	d302      	bcc.n	800d2b2 <I2C_RequestMemoryRead+0x7e>
 800d2ac:	b10c      	cbz	r4, 800d2b2 <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2ae:	682a      	ldr	r2, [r5, #0]
 800d2b0:	e7e0      	b.n	800d274 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2b4:	2120      	movs	r1, #32
    return HAL_ERROR;
 800d2b6:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2b8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2ba:	430b      	orrs	r3, r1
}
 800d2bc:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800d2be:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2c2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2c4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2c8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d2cc:	b003      	add	sp, #12
 800d2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d2:	bf00      	nop
 800d2d4:	80002000 	.word	0x80002000

0800d2d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	f000 80c1 	beq.w	800d460 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d2de:	4b61      	ldr	r3, [pc, #388]	; (800d464 <HAL_I2C_Init+0x18c>)
 800d2e0:	6802      	ldr	r2, [r0, #0]
 800d2e2:	4961      	ldr	r1, [pc, #388]	; (800d468 <HAL_I2C_Init+0x190>)
{
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d2e8:	4860      	ldr	r0, [pc, #384]	; (800d46c <HAL_I2C_Init+0x194>)
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	bf18      	it	ne
 800d2ee:	4282      	cmpne	r2, r0
 800d2f0:	bf14      	ite	ne
 800d2f2:	2301      	movne	r3, #1
 800d2f4:	2300      	moveq	r3, #0
 800d2f6:	428a      	cmp	r2, r1
 800d2f8:	bf0c      	ite	eq
 800d2fa:	2300      	moveq	r3, #0
 800d2fc:	f003 0301 	andne.w	r3, r3, #1
 800d300:	b11b      	cbz	r3, 800d30a <HAL_I2C_Init+0x32>
 800d302:	4b5b      	ldr	r3, [pc, #364]	; (800d470 <HAL_I2C_Init+0x198>)
 800d304:	429a      	cmp	r2, r3
 800d306:	f040 80a5 	bne.w	800d454 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d30a:	68a3      	ldr	r3, [r4, #8]
 800d30c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d310:	f080 809a 	bcs.w	800d448 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d314:	68e3      	ldr	r3, [r4, #12]
 800d316:	3b01      	subs	r3, #1
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d855      	bhi.n	800d3c8 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d322:	d15a      	bne.n	800d3da <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d324:	6963      	ldr	r3, [r4, #20]
 800d326:	2bff      	cmp	r3, #255	; 0xff
 800d328:	d85f      	bhi.n	800d3ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d32a:	69a3      	ldr	r3, [r4, #24]
 800d32c:	2b07      	cmp	r3, #7
 800d32e:	d864      	bhi.n	800d3fa <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d330:	69e3      	ldr	r3, [r4, #28]
 800d332:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d336:	d169      	bne.n	800d40c <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d338:	6a23      	ldr	r3, [r4, #32]
 800d33a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d33e:	d16e      	bne.n	800d41e <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d340:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d344:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d073      	beq.n	800d434 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800d34c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d34e:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d350:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d352:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d356:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d35c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800d35e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d362:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800d364:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d366:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d368:	689a      	ldr	r2, [r3, #8]
 800d36a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d36e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d370:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d372:	d065      	beq.n	800d440 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d374:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d378:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d37a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d37c:	d102      	bne.n	800d384 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d37e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d382:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d384:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800d386:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d38a:	493a      	ldr	r1, [pc, #232]	; (800d474 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d38c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d38e:	4301      	orrs	r1, r0
 800d390:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d392:	68d9      	ldr	r1, [r3, #12]
 800d394:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800d398:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d39a:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d39e:	4302      	orrs	r2, r0
 800d3a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3a4:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3a8:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3aa:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3ac:	4301      	orrs	r1, r0
  return HAL_OK;
 800d3ae:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3b0:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d3b2:	6819      	ldr	r1, [r3, #0]
 800d3b4:	f041 0101 	orr.w	r1, r1, #1
 800d3b8:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3ba:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d3bc:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d3c0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3c2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d3c6:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d3c8:	f240 2117 	movw	r1, #535	; 0x217
 800d3cc:	482a      	ldr	r0, [pc, #168]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d3ce:	f7f8 fa89 	bl	80058e4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d3d8:	d0a4      	beq.n	800d324 <HAL_I2C_Init+0x4c>
 800d3da:	f44f 7106 	mov.w	r1, #536	; 0x218
 800d3de:	4826      	ldr	r0, [pc, #152]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d3e0:	f7f8 fa80 	bl	80058e4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d3e4:	6963      	ldr	r3, [r4, #20]
 800d3e6:	2bff      	cmp	r3, #255	; 0xff
 800d3e8:	d99f      	bls.n	800d32a <HAL_I2C_Init+0x52>
 800d3ea:	f240 2119 	movw	r1, #537	; 0x219
 800d3ee:	4822      	ldr	r0, [pc, #136]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d3f0:	f7f8 fa78 	bl	80058e4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d3f4:	69a3      	ldr	r3, [r4, #24]
 800d3f6:	2b07      	cmp	r3, #7
 800d3f8:	d99a      	bls.n	800d330 <HAL_I2C_Init+0x58>
 800d3fa:	f240 211a 	movw	r1, #538	; 0x21a
 800d3fe:	481e      	ldr	r0, [pc, #120]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d400:	f7f8 fa70 	bl	80058e4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d404:	69e3      	ldr	r3, [r4, #28]
 800d406:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d40a:	d095      	beq.n	800d338 <HAL_I2C_Init+0x60>
 800d40c:	f240 211b 	movw	r1, #539	; 0x21b
 800d410:	4819      	ldr	r0, [pc, #100]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d412:	f7f8 fa67 	bl	80058e4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d416:	6a23      	ldr	r3, [r4, #32]
 800d418:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d41c:	d090      	beq.n	800d340 <HAL_I2C_Init+0x68>
 800d41e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800d422:	4815      	ldr	r0, [pc, #84]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d424:	f7f8 fa5e 	bl	80058e4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d428:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d42c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d430:	2b00      	cmp	r3, #0
 800d432:	d18b      	bne.n	800d34c <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800d434:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d436:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d43a:	f7fa f8d3 	bl	80075e4 <HAL_I2C_MspInit>
 800d43e:	e785      	b.n	800d34c <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d444:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d446:	e79d      	b.n	800d384 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d448:	f240 2116 	movw	r1, #534	; 0x216
 800d44c:	480a      	ldr	r0, [pc, #40]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d44e:	f7f8 fa49 	bl	80058e4 <assert_failed>
 800d452:	e75f      	b.n	800d314 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d454:	f240 2115 	movw	r1, #533	; 0x215
 800d458:	4807      	ldr	r0, [pc, #28]	; (800d478 <HAL_I2C_Init+0x1a0>)
 800d45a:	f7f8 fa43 	bl	80058e4 <assert_failed>
 800d45e:	e754      	b.n	800d30a <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800d460:	2001      	movs	r0, #1
}
 800d462:	4770      	bx	lr
 800d464:	40005400 	.word	0x40005400
 800d468:	40005c00 	.word	0x40005c00
 800d46c:	40005800 	.word	0x40005800
 800d470:	40006000 	.word	0x40006000
 800d474:	02008000 	.word	0x02008000
 800d478:	0802e400 	.word	0x0802e400

0800d47c <HAL_I2C_Master_Transmit>:
{
 800d47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d480:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d482:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d486:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d488:	2b20      	cmp	r3, #32
{
 800d48a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d48c:	d16d      	bne.n	800d56a <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800d48e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d492:	4604      	mov	r4, r0
 800d494:	2b01      	cmp	r3, #1
 800d496:	d068      	beq.n	800d56a <HAL_I2C_Master_Transmit+0xee>
 800d498:	2301      	movs	r3, #1
 800d49a:	460f      	mov	r7, r1
 800d49c:	4691      	mov	r9, r2
 800d49e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d4a2:	f7fb ff63 	bl	800936c <HAL_GetTick>
 800d4a6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4a8:	e004      	b.n	800d4b4 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4aa:	f7fb ff5f 	bl	800936c <HAL_GetTick>
 800d4ae:	1b80      	subs	r0, r0, r6
 800d4b0:	2819      	cmp	r0, #25
 800d4b2:	d85e      	bhi.n	800d572 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	6999      	ldr	r1, [r3, #24]
 800d4b8:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d4bc:	d1f5      	bne.n	800d4aa <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d4be:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800d4c0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d4c4:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d4c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d4ca:	2310      	movs	r3, #16
 800d4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4d0:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d4d2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	2bff      	cmp	r3, #255	; 0xff
 800d4dc:	d86d      	bhi.n	800d5ba <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800d4de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	4b48      	ldr	r3, [pc, #288]	; (800d604 <HAL_I2C_Master_Transmit+0x188>)
 800d4e4:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d4e6:	b292      	uxth	r2, r2
 800d4e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d4f2:	f7ff fcfb 	bl	800ceec <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d4f6:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d4fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d500:	4632      	mov	r2, r6
 800d502:	4629      	mov	r1, r5
 800d504:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d506:	b29b      	uxth	r3, r3
 800d508:	b1eb      	cbz	r3, 800d546 <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d50a:	f7ff fdf9 	bl	800d100 <I2C_WaitOnTXISFlagUntilTimeout>
 800d50e:	2800      	cmp	r0, #0
 800d510:	d174      	bne.n	800d5fc <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d514:	6821      	ldr	r1, [r4, #0]
 800d516:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d51a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d51c:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d51e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d520:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d522:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d524:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d526:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d528:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d52a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d52c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d52e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d530:	b292      	uxth	r2, r2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e3      	bne.n	800d4fe <HAL_I2C_Master_Transmit+0x82>
 800d536:	bb6a      	cbnz	r2, 800d594 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800d538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d53a:	4632      	mov	r2, r6
 800d53c:	4629      	mov	r1, r5
 800d53e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d540:	b29b      	uxth	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1e1      	bne.n	800d50a <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d546:	f7ff fe05 	bl	800d154 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d156      	bne.n	800d5fc <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d552:	4d2d      	ldr	r5, [pc, #180]	; (800d608 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d554:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	402a      	ands	r2, r5
 800d55a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d55c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d560:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d564:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d568:	e000      	b.n	800d56c <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800d56a:	2002      	movs	r0, #2
}
 800d56c:	b003      	add	sp, #12
 800d56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d572:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d574:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d576:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d578:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d57a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d57c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d580:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d582:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d586:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800d590:	1c6a      	adds	r2, r5, #1
 800d592:	d11d      	bne.n	800d5d0 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d594:	698b      	ldr	r3, [r1, #24]
 800d596:	061b      	lsls	r3, r3, #24
 800d598:	d5fa      	bpl.n	800d590 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d59a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	2bff      	cmp	r3, #255	; 0xff
 800d5a0:	d91f      	bls.n	800d5e2 <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5a2:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5aa:	22ff      	movs	r2, #255	; 0xff
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f8cd 8000 	str.w	r8, [sp]
 800d5b4:	f7ff fc9a 	bl	800ceec <I2C_TransferConfig>
 800d5b8:	e7a1      	b.n	800d4fe <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5ba:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5bc:	4b11      	ldr	r3, [pc, #68]	; (800d604 <HAL_I2C_Master_Transmit+0x188>)
 800d5be:	4639      	mov	r1, r7
 800d5c0:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5c2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5ca:	f7ff fc8f 	bl	800ceec <I2C_TransferConfig>
 800d5ce:	e792      	b.n	800d4f6 <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5d0:	f7fb fecc 	bl	800936c <HAL_GetTick>
 800d5d4:	1b80      	subs	r0, r0, r6
 800d5d6:	4285      	cmp	r5, r0
 800d5d8:	d3cb      	bcc.n	800d572 <HAL_I2C_Master_Transmit+0xf6>
 800d5da:	2d00      	cmp	r5, #0
 800d5dc:	d0c9      	beq.n	800d572 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5de:	6821      	ldr	r1, [r4, #0]
 800d5e0:	e7d8      	b.n	800d594 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d5e2:	f8cd 8000 	str.w	r8, [sp]
 800d5e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d5ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d5f0:	b292      	uxth	r2, r2
 800d5f2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d5f4:	b2d2      	uxtb	r2, r2
 800d5f6:	f7ff fc79 	bl	800ceec <I2C_TransferConfig>
 800d5fa:	e780      	b.n	800d4fe <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800d5fc:	2001      	movs	r0, #1
}
 800d5fe:	b003      	add	sp, #12
 800d600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d604:	80002000 	.word	0x80002000
 800d608:	fe00e800 	.word	0xfe00e800

0800d60c <HAL_I2C_Master_Receive>:
{
 800d60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d610:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d612:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d616:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d618:	2b20      	cmp	r3, #32
{
 800d61a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d61c:	f040 8088 	bne.w	800d730 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800d620:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d624:	4604      	mov	r4, r0
 800d626:	2b01      	cmp	r3, #1
 800d628:	f000 8082 	beq.w	800d730 <HAL_I2C_Master_Receive+0x124>
 800d62c:	2301      	movs	r3, #1
 800d62e:	460f      	mov	r7, r1
 800d630:	4691      	mov	r9, r2
 800d632:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d636:	f7fb fe99 	bl	800936c <HAL_GetTick>
 800d63a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d63c:	e004      	b.n	800d648 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d63e:	f7fb fe95 	bl	800936c <HAL_GetTick>
 800d642:	1b80      	subs	r0, r0, r6
 800d644:	2819      	cmp	r0, #25
 800d646:	d87e      	bhi.n	800d746 <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	6999      	ldr	r1, [r3, #24]
 800d64c:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d650:	d1f5      	bne.n	800d63e <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d652:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800d654:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d658:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d65a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d65e:	2310      	movs	r3, #16
 800d660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d664:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d666:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d66a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	2bff      	cmp	r3, #255	; 0xff
 800d670:	d878      	bhi.n	800d764 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800d672:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d674:	4639      	mov	r1, r7
 800d676:	4b49      	ldr	r3, [pc, #292]	; (800d79c <HAL_I2C_Master_Receive+0x190>)
 800d678:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d67a:	b292      	uxth	r2, r2
 800d67c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d67e:	b2d2      	uxtb	r2, r2
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d686:	f7ff fc31 	bl	800ceec <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d68a:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d68e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d692:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d694:	4632      	mov	r2, r6
 800d696:	4629      	mov	r1, r5
 800d698:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d035      	beq.n	800d70c <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6a0:	f7ff fd7e 	bl	800d1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d175      	bne.n	800d794 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d6a8:	6822      	ldr	r2, [r4, #0]
 800d6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d6ae:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d6b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d6b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d6b4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d6b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d6b8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d6ba:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d6bc:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d6be:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d6c0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d6c4:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6c6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d6c8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1e1      	bne.n	800d692 <HAL_I2C_Master_Receive+0x86>
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	d0df      	beq.n	800d692 <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	e001      	b.n	800d6da <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800d6d6:	1c69      	adds	r1, r5, #1
 800d6d8:	d12e      	bne.n	800d738 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6da:	6993      	ldr	r3, [r2, #24]
 800d6dc:	061b      	lsls	r3, r3, #24
 800d6de:	d5fa      	bpl.n	800d6d6 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	2bff      	cmp	r3, #255	; 0xff
 800d6e6:	d948      	bls.n	800d77a <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d6e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d6ec:	22ff      	movs	r2, #255	; 0xff
 800d6ee:	4639      	mov	r1, r7
 800d6f0:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6f2:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d6f6:	f8cd 8000 	str.w	r8, [sp]
 800d6fa:	f7ff fbf7 	bl	800ceec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d6fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d700:	4632      	mov	r2, r6
 800d702:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800d704:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d706:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1c9      	bne.n	800d6a0 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d70c:	f7ff fd22 	bl	800d154 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d710:	2800      	cmp	r0, #0
 800d712:	d13f      	bne.n	800d794 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d718:	4d21      	ldr	r5, [pc, #132]	; (800d7a0 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d71a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	402a      	ands	r2, r5
 800d720:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d722:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d726:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d72a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d72e:	e000      	b.n	800d732 <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800d730:	2002      	movs	r0, #2
}
 800d732:	b003      	add	sp, #12
 800d734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d738:	f7fb fe18 	bl	800936c <HAL_GetTick>
 800d73c:	1b80      	subs	r0, r0, r6
 800d73e:	4285      	cmp	r5, r0
 800d740:	d301      	bcc.n	800d746 <HAL_I2C_Master_Receive+0x13a>
 800d742:	2d00      	cmp	r5, #0
 800d744:	d1c5      	bne.n	800d6d2 <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d746:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d748:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d74a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d74c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d74e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d750:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d754:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d756:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d75a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d75e:	b003      	add	sp, #12
 800d760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d764:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d766:	4b0d      	ldr	r3, [pc, #52]	; (800d79c <HAL_I2C_Master_Receive+0x190>)
 800d768:	4639      	mov	r1, r7
 800d76a:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d76c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d774:	f7ff fbba 	bl	800ceec <I2C_TransferConfig>
 800d778:	e787      	b.n	800d68a <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d77a:	f8cd 8000 	str.w	r8, [sp]
 800d77e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d782:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d784:	4639      	mov	r1, r7
 800d786:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d788:	b292      	uxth	r2, r2
 800d78a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d78c:	b2d2      	uxtb	r2, r2
 800d78e:	f7ff fbad 	bl	800ceec <I2C_TransferConfig>
 800d792:	e77e      	b.n	800d692 <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800d794:	2001      	movs	r0, #1
}
 800d796:	b003      	add	sp, #12
 800d798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d79c:	80002400 	.word	0x80002400
 800d7a0:	fe00e800 	.word	0xfe00e800

0800d7a4 <HAL_I2C_Mem_Read>:
{
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7aa:	3b01      	subs	r3, #1
{
 800d7ac:	b083      	sub	sp, #12
 800d7ae:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7b0:	2b01      	cmp	r3, #1
{
 800d7b2:	4688      	mov	r8, r1
 800d7b4:	4691      	mov	r9, r2
 800d7b6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d7ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7bc:	d904      	bls.n	800d7c8 <HAL_I2C_Mem_Read+0x24>
 800d7be:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800d7c2:	486e      	ldr	r0, [pc, #440]	; (800d97c <HAL_I2C_Mem_Read+0x1d8>)
 800d7c4:	f7f8 f88e 	bl	80058e4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7c8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d7cc:	2b20      	cmp	r3, #32
 800d7ce:	d17f      	bne.n	800d8d0 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800d7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d075      	beq.n	800d8c2 <HAL_I2C_Mem_Read+0x11e>
 800d7d6:	f1ba 0f00 	cmp.w	sl, #0
 800d7da:	d072      	beq.n	800d8c2 <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800d7dc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d075      	beq.n	800d8d0 <HAL_I2C_Mem_Read+0x12c>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d7ea:	f7fb fdbf 	bl	800936c <HAL_GetTick>
 800d7ee:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7f0:	e004      	b.n	800d7fc <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7f2:	f7fb fdbb 	bl	800936c <HAL_GetTick>
 800d7f6:	1b80      	subs	r0, r0, r6
 800d7f8:	2819      	cmp	r0, #25
 800d7fa:	d874      	bhi.n	800d8e6 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800d804:	d1f5      	bne.n	800d7f2 <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800d806:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d808:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800d80a:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d80e:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800d810:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d812:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d814:	4628      	mov	r0, r5
 800d816:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d81a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d81e:	2140      	movs	r1, #64	; 0x40
 800d820:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d824:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d826:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800d82a:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d82e:	f7ff fd01 	bl	800d234 <I2C_RequestMemoryRead>
 800d832:	2800      	cmp	r0, #0
 800d834:	f040 8083 	bne.w	800d93e <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d838:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	2bff      	cmp	r3, #255	; 0xff
 800d83e:	f240 808e 	bls.w	800d95e <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d842:	4b4f      	ldr	r3, [pc, #316]	; (800d980 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d844:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d846:	4641      	mov	r1, r8
 800d848:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d84a:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d852:	f7ff fb4b 	bl	800ceec <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d856:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d858:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d85c:	682a      	ldr	r2, [r5, #0]
 800d85e:	e001      	b.n	800d864 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800d860:	1c63      	adds	r3, r4, #1
 800d862:	d139      	bne.n	800d8d8 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d864:	6993      	ldr	r3, [r2, #24]
 800d866:	0758      	lsls	r0, r3, #29
 800d868:	d5fa      	bpl.n	800d860 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d86a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d86c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d86e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d870:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800d872:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800d874:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d876:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800d878:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d87a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d87c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d87e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d880:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d882:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d884:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d886:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d888:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d88a:	b90b      	cbnz	r3, 800d890 <HAL_I2C_Mem_Read+0xec>
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	d140      	bne.n	800d912 <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800d890:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d892:	b29b      	uxth	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e1      	bne.n	800d85c <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d898:	4632      	mov	r2, r6
 800d89a:	4621      	mov	r1, r4
 800d89c:	4628      	mov	r0, r5
 800d89e:	f7ff fc59 	bl	800d154 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	d168      	bne.n	800d978 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8a6:	682b      	ldr	r3, [r5, #0]
 800d8a8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d8aa:	4c36      	ldr	r4, [pc, #216]	; (800d984 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8ac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4022      	ands	r2, r4
 800d8b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d8b4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d8b8:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d8bc:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800d8c0:	e003      	b.n	800d8ca <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d8c6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d8c8:	646b      	str	r3, [r5, #68]	; 0x44
}
 800d8ca:	b003      	add	sp, #12
 800d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800d8d0:	2002      	movs	r0, #2
}
 800d8d2:	b003      	add	sp, #12
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8d8:	f7fb fd48 	bl	800936c <HAL_GetTick>
 800d8dc:	1b80      	subs	r0, r0, r6
 800d8de:	4284      	cmp	r4, r0
 800d8e0:	d301      	bcc.n	800d8e6 <HAL_I2C_Mem_Read+0x142>
 800d8e2:	2c00      	cmp	r4, #0
 800d8e4:	d1ba      	bne.n	800d85c <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8e8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8ea:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d8ec:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8ee:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d8f0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8f4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8f6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8fa:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d8fe:	b003      	add	sp, #12
 800d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d904:	f7fb fd32 	bl	800936c <HAL_GetTick>
 800d908:	1b80      	subs	r0, r0, r6
 800d90a:	4284      	cmp	r4, r0
 800d90c:	d3eb      	bcc.n	800d8e6 <HAL_I2C_Mem_Read+0x142>
 800d90e:	2c00      	cmp	r4, #0
 800d910:	d0e9      	beq.n	800d8e6 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d912:	682a      	ldr	r2, [r5, #0]
 800d914:	e001      	b.n	800d91a <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800d916:	1c61      	adds	r1, r4, #1
 800d918:	d1f4      	bne.n	800d904 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d91a:	6993      	ldr	r3, [r2, #24]
 800d91c:	061b      	lsls	r3, r3, #24
 800d91e:	d5fa      	bpl.n	800d916 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d920:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d922:	b29b      	uxth	r3, r3
 800d924:	2bff      	cmp	r3, #255	; 0xff
 800d926:	d90e      	bls.n	800d946 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d928:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d92c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d930:	22ff      	movs	r2, #255	; 0xff
 800d932:	4641      	mov	r1, r8
 800d934:	4628      	mov	r0, r5
 800d936:	9700      	str	r7, [sp, #0]
 800d938:	f7ff fad8 	bl	800ceec <I2C_TransferConfig>
 800d93c:	e7a8      	b.n	800d890 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800d93e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d940:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800d944:	e7c1      	b.n	800d8ca <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d946:	9700      	str	r7, [sp, #0]
 800d948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d94c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d94e:	4641      	mov	r1, r8
 800d950:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800d952:	b292      	uxth	r2, r2
 800d954:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d956:	b2d2      	uxtb	r2, r2
 800d958:	f7ff fac8 	bl	800ceec <I2C_TransferConfig>
 800d95c:	e798      	b.n	800d890 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800d95e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d960:	4641      	mov	r1, r8
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <HAL_I2C_Mem_Read+0x1dc>)
 800d964:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800d966:	b292      	uxth	r2, r2
 800d968:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d972:	f7ff fabb 	bl	800ceec <I2C_TransferConfig>
 800d976:	e76e      	b.n	800d856 <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800d978:	2001      	movs	r0, #1
 800d97a:	e7a6      	b.n	800d8ca <HAL_I2C_Mem_Read+0x126>
 800d97c:	0802e400 	.word	0x0802e400
 800d980:	80002400 	.word	0x80002400
 800d984:	fe00e800 	.word	0xfe00e800

0800d988 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d988:	4b23      	ldr	r3, [pc, #140]	; (800da18 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800d98a:	6802      	ldr	r2, [r0, #0]
{
 800d98c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d98e:	4d23      	ldr	r5, [pc, #140]	; (800da1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800d990:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d992:	4e23      	ldr	r6, [pc, #140]	; (800da20 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800d994:	429a      	cmp	r2, r3
 800d996:	bf18      	it	ne
 800d998:	42aa      	cmpne	r2, r5
{
 800d99a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d99c:	bf14      	ite	ne
 800d99e:	2301      	movne	r3, #1
 800d9a0:	2300      	moveq	r3, #0
 800d9a2:	42b2      	cmp	r2, r6
 800d9a4:	bf0c      	ite	eq
 800d9a6:	2300      	moveq	r3, #0
 800d9a8:	f003 0301 	andne.w	r3, r3, #1
 800d9ac:	b113      	cbz	r3, 800d9b4 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d9ae:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d12c      	bne.n	800da0e <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d9b4:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800d9b8:	d124      	bne.n	800da04 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	b2de      	uxtb	r6, r3
 800d9c2:	d11d      	bne.n	800da00 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d019      	beq.n	800da00 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9cc:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9ce:	2224      	movs	r2, #36	; 0x24
 800d9d0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	f022 0201 	bic.w	r2, r2, #1
 800d9da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d9e4:	6819      	ldr	r1, [r3, #0]
 800d9e6:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9e8:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800d9ea:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800d9ec:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	f042 0201 	orr.w	r2, r2, #1
 800d9f4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d9f6:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d9fa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800da00:	2002      	movs	r0, #2
}
 800da02:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800da04:	215f      	movs	r1, #95	; 0x5f
 800da06:	4808      	ldr	r0, [pc, #32]	; (800da28 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800da08:	f7f7 ff6c 	bl	80058e4 <assert_failed>
 800da0c:	e7d5      	b.n	800d9ba <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da0e:	215e      	movs	r1, #94	; 0x5e
 800da10:	4805      	ldr	r0, [pc, #20]	; (800da28 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800da12:	f7f7 ff67 	bl	80058e4 <assert_failed>
 800da16:	e7cd      	b.n	800d9b4 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800da18:	40005400 	.word	0x40005400
 800da1c:	40005800 	.word	0x40005800
 800da20:	40005c00 	.word	0x40005c00
 800da24:	40006000 	.word	0x40006000
 800da28:	0802e438 	.word	0x0802e438

0800da2c <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da2c:	4b22      	ldr	r3, [pc, #136]	; (800dab8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800da2e:	6802      	ldr	r2, [r0, #0]
{
 800da30:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da32:	4d22      	ldr	r5, [pc, #136]	; (800dabc <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800da34:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da36:	4e22      	ldr	r6, [pc, #136]	; (800dac0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800da38:	429a      	cmp	r2, r3
 800da3a:	bf18      	it	ne
 800da3c:	42aa      	cmpne	r2, r5
{
 800da3e:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da40:	bf14      	ite	ne
 800da42:	2301      	movne	r3, #1
 800da44:	2300      	moveq	r3, #0
 800da46:	42b2      	cmp	r2, r6
 800da48:	bf0c      	ite	eq
 800da4a:	2300      	moveq	r3, #0
 800da4c:	f003 0301 	andne.w	r3, r3, #1
 800da50:	b113      	cbz	r3, 800da58 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800da52:	4b1c      	ldr	r3, [pc, #112]	; (800dac4 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800da54:	429a      	cmp	r2, r3
 800da56:	d12a      	bne.n	800daae <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800da58:	2d0f      	cmp	r5, #15
 800da5a:	d823      	bhi.n	800daa4 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800da60:	2b20      	cmp	r3, #32
 800da62:	b2de      	uxtb	r6, r3
 800da64:	d11c      	bne.n	800daa0 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da66:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d018      	beq.n	800daa0 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da6e:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800da70:	2224      	movs	r2, #36	; 0x24
 800da72:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	f022 0201 	bic.w	r2, r2, #1
 800da7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da7e:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da80:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da84:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da88:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800da8a:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800da8c:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	f042 0201 	orr.w	r2, r2, #1
 800da94:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800da96:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800da9a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800daa0:	2002      	movs	r0, #2
}
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800daa4:	218d      	movs	r1, #141	; 0x8d
 800daa6:	4808      	ldr	r0, [pc, #32]	; (800dac8 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800daa8:	f7f7 ff1c 	bl	80058e4 <assert_failed>
 800daac:	e7d6      	b.n	800da5c <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800daae:	218c      	movs	r1, #140	; 0x8c
 800dab0:	4805      	ldr	r0, [pc, #20]	; (800dac8 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800dab2:	f7f7 ff17 	bl	80058e4 <assert_failed>
 800dab6:	e7cf      	b.n	800da58 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800dab8:	40005400 	.word	0x40005400
 800dabc:	40005800 	.word	0x40005800
 800dac0:	40005c00 	.word	0x40005c00
 800dac4:	40006000 	.word	0x40006000
 800dac8:	0802e438 	.word	0x0802e438

0800dacc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800dacc:	2800      	cmp	r0, #0
 800dace:	d04c      	beq.n	800db6a <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800dad0:	6802      	ldr	r2, [r0, #0]
{
 800dad2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800dad4:	4b26      	ldr	r3, [pc, #152]	; (800db70 <HAL_IWDG_Init+0xa4>)
 800dad6:	4604      	mov	r4, r0
 800dad8:	429a      	cmp	r2, r3
 800dada:	d003      	beq.n	800dae4 <HAL_IWDG_Init+0x18>
 800dadc:	21b5      	movs	r1, #181	; 0xb5
 800dade:	4825      	ldr	r0, [pc, #148]	; (800db74 <HAL_IWDG_Init+0xa8>)
 800dae0:	f7f7 ff00 	bl	80058e4 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800dae4:	6863      	ldr	r3, [r4, #4]
 800dae6:	2b06      	cmp	r3, #6
 800dae8:	d835      	bhi.n	800db56 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800daea:	68a3      	ldr	r3, [r4, #8]
 800daec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf0:	d22c      	bcs.n	800db4c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800daf2:	68e3      	ldr	r3, [r4, #12]
 800daf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf8:	d223      	bcs.n	800db42 <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800dafa:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800dafe:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800db00:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800db04:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800db06:	f245 5055 	movw	r0, #21845	; 0x5555
 800db0a:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800db0c:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800db0e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800db10:	f7fb fc2c 	bl	800936c <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db14:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800db16:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	0751      	lsls	r1, r2, #29
 800db1c:	d00a      	beq.n	800db34 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800db1e:	f7fb fc25 	bl	800936c <HAL_GetTick>
 800db22:	1b43      	subs	r3, r0, r5
 800db24:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db26:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800db28:	d9f6      	bls.n	800db18 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db2a:	68da      	ldr	r2, [r3, #12]
 800db2c:	0752      	lsls	r2, r2, #29
 800db2e:	d0f3      	beq.n	800db18 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800db30:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800db32:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800db34:	6919      	ldr	r1, [r3, #16]
 800db36:	68e2      	ldr	r2, [r4, #12]
 800db38:	4291      	cmp	r1, r2
 800db3a:	d011      	beq.n	800db60 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800db3c:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800db3e:	611a      	str	r2, [r3, #16]
}
 800db40:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800db42:	21b8      	movs	r1, #184	; 0xb8
 800db44:	480b      	ldr	r0, [pc, #44]	; (800db74 <HAL_IWDG_Init+0xa8>)
 800db46:	f7f7 fecd 	bl	80058e4 <assert_failed>
 800db4a:	e7d6      	b.n	800dafa <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800db4c:	21b7      	movs	r1, #183	; 0xb7
 800db4e:	4809      	ldr	r0, [pc, #36]	; (800db74 <HAL_IWDG_Init+0xa8>)
 800db50:	f7f7 fec8 	bl	80058e4 <assert_failed>
 800db54:	e7cd      	b.n	800daf2 <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800db56:	21b6      	movs	r1, #182	; 0xb6
 800db58:	4806      	ldr	r0, [pc, #24]	; (800db74 <HAL_IWDG_Init+0xa8>)
 800db5a:	f7f7 fec3 	bl	80058e4 <assert_failed>
 800db5e:	e7c4      	b.n	800daea <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db60:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800db64:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db66:	601a      	str	r2, [r3, #0]
}
 800db68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db6a:	2001      	movs	r0, #1
}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	40003000 	.word	0x40003000
 800db74:	0802e474 	.word	0x0802e474

0800db78 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800db78:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db7a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800db7e:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	601a      	str	r2, [r3, #0]
}
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop

0800db88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f000 809d 	beq.w	800dccc <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800db92:	6804      	ldr	r4, [r0, #0]
 800db94:	4605      	mov	r5, r0
 800db96:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800db9a:	d003      	beq.n	800dba4 <HAL_PCD_Init+0x1c>
 800db9c:	4b4f      	ldr	r3, [pc, #316]	; (800dcdc <HAL_PCD_Init+0x154>)
 800db9e:	429c      	cmp	r4, r3
 800dba0:	f040 8081 	bne.w	800dca6 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dba4:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800dba8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 8086 	beq.w	800dcbe <HAL_PCD_Init+0x136>
 800dbb2:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbb4:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbb6:	462e      	mov	r6, r5
 800dbb8:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbba:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dbbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbc0:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dbc2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800dbc6:	bf08      	it	eq
 800dbc8:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800dbca:	f006 fe87 	bl	80148dc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbce:	f856 eb10 	ldr.w	lr, [r6], #16
 800dbd2:	46b4      	mov	ip, r6
 800dbd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbe0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800dbe4:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbe8:	4670      	mov	r0, lr
 800dbea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dbee:	f006 fdb5 	bl	801475c <USB_CoreInit>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	b130      	cbz	r0, 800dc04 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800dbf6:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dbf8:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800dbfa:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dbfc:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800dc00:	b00b      	add	sp, #44	; 0x2c
 800dc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800dc04:	4601      	mov	r1, r0
 800dc06:	6828      	ldr	r0, [r5, #0]
 800dc08:	f006 fe70 	bl	80148ec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc0c:	6868      	ldr	r0, [r5, #4]
 800dc0e:	b358      	cbz	r0, 800dc68 <HAL_PCD_Init+0xe0>
 800dc10:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dc12:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc16:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dc18:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc1c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800dc20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800dc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dc28:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc2c:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800dc30:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc34:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc36:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc3a:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc3c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc40:	d3ea      	bcc.n	800dc18 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800dc42:	2200      	movs	r2, #0
 800dc44:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc48:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800dc4a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800dc4e:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc52:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800dc54:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc58:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dc5a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dc5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dc62:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc66:	d3ed      	bcc.n	800dc44 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dc68:	466c      	mov	r4, sp
 800dc6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc72:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dc76:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc7a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dc7e:	6828      	ldr	r0, [r5, #0]
 800dc80:	f006 feb8 	bl	80149f4 <USB_DevInit>
 800dc84:	4604      	mov	r4, r0
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d1b5      	bne.n	800dbf6 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800dc8a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800dc8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800dc8e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800dc92:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800dc94:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800dc98:	d01c      	beq.n	800dcd4 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800dc9a:	6828      	ldr	r0, [r5, #0]
 800dc9c:	f007 fa72 	bl	8015184 <USB_DevDisconnect>
}
 800dca0:	4620      	mov	r0, r4
 800dca2:	b00b      	add	sp, #44	; 0x2c
 800dca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800dca6:	2187      	movs	r1, #135	; 0x87
 800dca8:	480d      	ldr	r0, [pc, #52]	; (800dce0 <HAL_PCD_Init+0x158>)
 800dcaa:	f7f7 fe1b 	bl	80058e4 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dcae:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800dcb2:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dcb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f47f af7a 	bne.w	800dbb2 <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800dcbe:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800dcc0:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800dcc4:	f017 f97a 	bl	8024fbc <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800dcc8:	6828      	ldr	r0, [r5, #0]
 800dcca:	e773      	b.n	800dbb4 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800dccc:	2401      	movs	r4, #1
}
 800dcce:	4620      	mov	r0, r4
 800dcd0:	b00b      	add	sp, #44	; 0x2c
 800dcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 fcc7 	bl	800e668 <HAL_PCDEx_ActivateLPM>
 800dcda:	e7de      	b.n	800dc9a <HAL_PCD_Init+0x112>
 800dcdc:	40040000 	.word	0x40040000
 800dce0:	0802e4b0 	.word	0x0802e4b0

0800dce4 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800dce4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d00f      	beq.n	800dd0c <HAL_PCD_Start+0x28>
 800dcec:	2301      	movs	r3, #1
{
 800dcee:	b510      	push	{r4, lr}
 800dcf0:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800dcf2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800dcf4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800dcf8:	f006 fde8 	bl	80148cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dcfc:	6820      	ldr	r0, [r4, #0]
 800dcfe:	f007 fa31 	bl	8015164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd02:	2300      	movs	r3, #0

  return HAL_OK;
 800dd04:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800dd06:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800dd0a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800dd0c:	2002      	movs	r0, #2
}
 800dd0e:	4770      	bx	lr

0800dd10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd14:	6807      	ldr	r7, [r0, #0]
{
 800dd16:	b089      	sub	sp, #36	; 0x24
 800dd18:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	f007 fa70 	bl	8015200 <USB_GetMode>
 800dd20:	b110      	cbz	r0, 800dd28 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800dd22:	b009      	add	sp, #36	; 0x24
 800dd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800dd28:	4683      	mov	fp, r0
 800dd2a:	6820      	ldr	r0, [r4, #0]
 800dd2c:	f007 fa3a 	bl	80151a4 <USB_ReadInterrupts>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d0f6      	beq.n	800dd22 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	f007 fa35 	bl	80151a4 <USB_ReadInterrupts>
 800dd3a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dd3e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dd40:	d003      	beq.n	800dd4a <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dd42:	6943      	ldr	r3, [r0, #20]
 800dd44:	f003 0302 	and.w	r3, r3, #2
 800dd48:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dd4a:	f007 fa2b 	bl	80151a4 <USB_ReadInterrupts>
 800dd4e:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd52:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dd54:	d012      	beq.n	800dd7c <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd56:	6983      	ldr	r3, [r0, #24]
 800dd58:	f023 0310 	bic.w	r3, r3, #16
 800dd5c:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800dd5e:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dd60:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800dd64:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	f000 8253 	beq.w	800e214 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800dd6e:	2b06      	cmp	r3, #6
 800dd70:	f000 81b1 	beq.w	800e0d6 <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd74:	6983      	ldr	r3, [r0, #24]
 800dd76:	f043 0310 	orr.w	r3, r3, #16
 800dd7a:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dd7c:	f007 fa12 	bl	80151a4 <USB_ReadInterrupts>
 800dd80:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dd84:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dd86:	f040 80cf 	bne.w	800df28 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dd8a:	f007 fa0b 	bl	80151a4 <USB_ReadInterrupts>
 800dd8e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dd92:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dd94:	d175      	bne.n	800de82 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800dd96:	f007 fa05 	bl	80151a4 <USB_ReadInterrupts>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	db5d      	blt.n	800de5a <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800dd9e:	6820      	ldr	r0, [r4, #0]
 800dda0:	f007 fa00 	bl	80151a4 <USB_ReadInterrupts>
 800dda4:	0500      	lsls	r0, r0, #20
 800dda6:	d44d      	bmi.n	800de44 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800dda8:	6820      	ldr	r0, [r4, #0]
 800ddaa:	f007 f9fb 	bl	80151a4 <USB_ReadInterrupts>
 800ddae:	0102      	lsls	r2, r0, #4
 800ddb0:	d514      	bpl.n	800dddc <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	6953      	ldr	r3, [r2, #20]
 800ddb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddba:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800ddbc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f040 8172 	bne.w	800e0aa <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800ddc6:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ddc8:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800ddca:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ddce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ddd0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800ddd4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ddd8:	f017 fa5e 	bl	8025298 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800dddc:	6820      	ldr	r0, [r4, #0]
 800ddde:	f007 f9e1 	bl	80151a4 <USB_ReadInterrupts>
 800dde2:	04c3      	lsls	r3, r0, #19
 800dde4:	f100 8116 	bmi.w	800e014 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dde8:	6820      	ldr	r0, [r4, #0]
 800ddea:	f007 f9db 	bl	80151a4 <USB_ReadInterrupts>
 800ddee:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800ddf2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ddf4:	f040 80f7 	bne.w	800dfe6 <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ddf8:	f007 f9d4 	bl	80151a4 <USB_ReadInterrupts>
 800ddfc:	0707      	lsls	r7, r0, #28
 800ddfe:	f100 80e9 	bmi.w	800dfd4 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800de02:	6820      	ldr	r0, [r4, #0]
 800de04:	f007 f9ce 	bl	80151a4 <USB_ReadInterrupts>
 800de08:	02c6      	lsls	r6, r0, #11
 800de0a:	f100 80d9 	bmi.w	800dfc0 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800de0e:	6820      	ldr	r0, [r4, #0]
 800de10:	f007 f9c8 	bl	80151a4 <USB_ReadInterrupts>
 800de14:	0285      	lsls	r5, r0, #10
 800de16:	f100 80c9 	bmi.w	800dfac <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800de1a:	6820      	ldr	r0, [r4, #0]
 800de1c:	f007 f9c2 	bl	80151a4 <USB_ReadInterrupts>
 800de20:	0040      	lsls	r0, r0, #1
 800de22:	f100 80ba 	bmi.w	800df9a <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800de26:	6820      	ldr	r0, [r4, #0]
 800de28:	f007 f9bc 	bl	80151a4 <USB_ReadInterrupts>
 800de2c:	0741      	lsls	r1, r0, #29
 800de2e:	f57f af78 	bpl.w	800dd22 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800de36:	076a      	lsls	r2, r5, #29
 800de38:	f100 820d 	bmi.w	800e256 <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	432a      	orrs	r2, r5
 800de40:	605a      	str	r2, [r3, #4]
 800de42:	e76e      	b.n	800dd22 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800de44:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800de48:	07d9      	lsls	r1, r3, #31
 800de4a:	f100 8200 	bmi.w	800e24e <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800de4e:	6820      	ldr	r0, [r4, #0]
 800de50:	6943      	ldr	r3, [r0, #20]
 800de52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de56:	6143      	str	r3, [r0, #20]
 800de58:	e7a7      	b.n	800ddaa <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800de5a:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800de5e:	f022 0201 	bic.w	r2, r2, #1
 800de62:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800de66:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	f000 812c 	beq.w	800e0c8 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800de70:	4620      	mov	r0, r4
 800de72:	f017 f93f 	bl	80250f4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800de76:	6820      	ldr	r0, [r4, #0]
 800de78:	6943      	ldr	r3, [r0, #20]
 800de7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de7e:	6143      	str	r3, [r0, #20]
 800de80:	e78e      	b.n	800dda0 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800de82:	f007 f99b 	bl	80151bc <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800de86:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800de88:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800de8a:	f1b8 0f00 	cmp.w	r8, #0
 800de8e:	d082      	beq.n	800dd96 <HAL_PCD_IRQHandler+0x86>
 800de90:	4626      	mov	r6, r4
 800de92:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800de96:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800de9a:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800de9e:	e009      	b.n	800deb4 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800dea0:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800dea4:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800dea8:	f106 061c 	add.w	r6, r6, #28
 800deac:	f109 0920 	add.w	r9, r9, #32
 800deb0:	f000 8126 	beq.w	800e100 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800deb4:	f018 0f01 	tst.w	r8, #1
 800deb8:	d0f2      	beq.n	800dea0 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800deba:	fa5f f78a 	uxtb.w	r7, sl
 800debe:	4639      	mov	r1, r7
 800dec0:	f007 f98e 	bl	80151e0 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dec4:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dec6:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dec8:	d515      	bpl.n	800def6 <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800deca:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800decc:	f00a 030f 	and.w	r3, sl, #15
 800ded0:	2201      	movs	r2, #1
 800ded2:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ded4:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800ded8:	ea23 0302 	bic.w	r3, r3, r2
 800dedc:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dee0:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800dee2:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dee4:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800dee8:	4299      	cmp	r1, r3
 800deea:	f000 81b9 	beq.w	800e260 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800deee:	4639      	mov	r1, r7
 800def0:	4620      	mov	r0, r4
 800def2:	f017 f8c3 	bl	802507c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800def6:	0728      	lsls	r0, r5, #28
 800def8:	d502      	bpl.n	800df00 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800defa:	2308      	movs	r3, #8
 800defc:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800df00:	06e9      	lsls	r1, r5, #27
 800df02:	d502      	bpl.n	800df0a <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800df04:	2310      	movs	r3, #16
 800df06:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800df0a:	066a      	lsls	r2, r5, #25
 800df0c:	d502      	bpl.n	800df14 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800df0e:	2340      	movs	r3, #64	; 0x40
 800df10:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800df14:	07ab      	lsls	r3, r5, #30
 800df16:	d502      	bpl.n	800df1e <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800df18:	2302      	movs	r3, #2
 800df1a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800df1e:	062d      	lsls	r5, r5, #24
 800df20:	f100 80f1 	bmi.w	800e106 <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800df24:	6820      	ldr	r0, [r4, #0]
 800df26:	e7bb      	b.n	800dea0 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800df28:	f007 f940 	bl	80151ac <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800df2c:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df2e:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800df30:	2d00      	cmp	r5, #0
 800df32:	f43f af2a 	beq.w	800dd8a <HAL_PCD_IRQHandler+0x7a>
 800df36:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800df3a:	46a2      	mov	sl, r4
      epnum = 0U;
 800df3c:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800df40:	9703      	str	r7, [sp, #12]
 800df42:	e008      	b.n	800df56 <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800df44:	086d      	lsrs	r5, r5, #1
        epnum++;
 800df46:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800df4a:	f106 0620 	add.w	r6, r6, #32
 800df4e:	f10a 0a1c 	add.w	sl, sl, #28
 800df52:	f000 80d3 	beq.w	800e0fc <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800df56:	07ef      	lsls	r7, r5, #31
 800df58:	d5f4      	bpl.n	800df44 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df5a:	fa5f f788 	uxtb.w	r7, r8
 800df5e:	4639      	mov	r1, r7
 800df60:	f007 f934 	bl	80151cc <USB_ReadDevOutEPInterrupt>
 800df64:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800df66:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800df68:	f019 0f01 	tst.w	r9, #1
 800df6c:	f040 8135 	bne.w	800e1da <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800df70:	f019 0f08 	tst.w	r9, #8
 800df74:	f040 8119 	bne.w	800e1aa <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800df78:	f019 0f10 	tst.w	r9, #16
 800df7c:	d001      	beq.n	800df82 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800df7e:	2310      	movs	r3, #16
 800df80:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800df82:	f019 0f20 	tst.w	r9, #32
 800df86:	d001      	beq.n	800df8c <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800df88:	2320      	movs	r3, #32
 800df8a:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800df8c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800df90:	d0d8      	beq.n	800df44 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800df92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df96:	60b3      	str	r3, [r6, #8]
 800df98:	e7d4      	b.n	800df44 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800df9a:	4620      	mov	r0, r4
 800df9c:	f017 f8b6 	bl	802510c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	6943      	ldr	r3, [r0, #20]
 800dfa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dfa8:	6143      	str	r3, [r0, #20]
 800dfaa:	e73d      	b.n	800de28 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800dfac:	4620      	mov	r0, r4
 800dfae:	2100      	movs	r1, #0
 800dfb0:	f017 f8a4 	bl	80250fc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	6943      	ldr	r3, [r0, #20]
 800dfb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfbc:	6143      	str	r3, [r0, #20]
 800dfbe:	e72d      	b.n	800de1c <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	f017 f89e 	bl	8025104 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	6943      	ldr	r3, [r0, #20]
 800dfcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfd0:	6143      	str	r3, [r0, #20]
 800dfd2:	e71d      	b.n	800de10 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f017 f85b 	bl	8025090 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800dfda:	6820      	ldr	r0, [r4, #0]
 800dfdc:	6943      	ldr	r3, [r0, #20]
 800dfde:	f003 0308 	and.w	r3, r3, #8
 800dfe2:	6143      	str	r3, [r0, #20]
 800dfe4:	e70e      	b.n	800de04 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800dfe6:	f007 f90f 	bl	8015208 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800dfea:	6820      	ldr	r0, [r4, #0]
 800dfec:	f006 fdc0 	bl	8014b70 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dff0:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800dff2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dff4:	f000 ff86 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
 800dff8:	7b22      	ldrb	r2, [r4, #12]
 800dffa:	4601      	mov	r1, r0
 800dffc:	4628      	mov	r0, r5
 800dffe:	f006 fbeb 	bl	80147d8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800e002:	4620      	mov	r0, r4
 800e004:	f017 f848 	bl	8025098 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e008:	6820      	ldr	r0, [r4, #0]
 800e00a:	6943      	ldr	r3, [r0, #20]
 800e00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e010:	6143      	str	r3, [r0, #20]
 800e012:	e6f1      	b.n	800ddf8 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e014:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800e018:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e01c:	2110      	movs	r1, #16
 800e01e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e020:	f023 0301 	bic.w	r3, r3, #1
 800e024:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e026:	f006 fc97 	bl	8014958 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e02a:	6860      	ldr	r0, [r4, #4]
 800e02c:	b1e0      	cbz	r0, 800e068 <HAL_PCD_IRQHandler+0x358>
 800e02e:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e032:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800e036:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e038:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e03c:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e03e:	3320      	adds	r3, #32
 800e040:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e042:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e046:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e04a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e04e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800e052:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e056:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e05a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800e05e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e062:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e066:	d1e6      	bne.n	800e036 <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e068:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e06a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e06c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e070:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e072:	b9f2      	cbnz	r2, 800e0b2 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e074:	696a      	ldr	r2, [r5, #20]
 800e076:	f242 032b 	movw	r3, #8235	; 0x202b
 800e07a:	4313      	orrs	r3, r2
 800e07c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e07e:	692b      	ldr	r3, [r5, #16]
 800e080:	f043 030b 	orr.w	r3, r3, #11
 800e084:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e086:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e08a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e08e:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e090:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e094:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e096:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e09a:	f007 f8cb 	bl	8015234 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e09e:	6820      	ldr	r0, [r4, #0]
 800e0a0:	6943      	ldr	r3, [r0, #20]
 800e0a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e0a6:	6143      	str	r3, [r0, #20]
 800e0a8:	e69f      	b.n	800ddea <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f017 f80a 	bl	80250c4 <HAL_PCD_SuspendCallback>
 800e0b0:	e694      	b.n	800dddc <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e0b2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800e0b6:	f043 030b 	orr.w	r3, r3, #11
 800e0ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e0be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e0c0:	f043 030b 	orr.w	r3, r3, #11
 800e0c4:	646b      	str	r3, [r5, #68]	; 0x44
 800e0c6:	e7de      	b.n	800e086 <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800e0c8:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e0ca:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800e0cc:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e0d0:	f017 f8e2 	bl	8025298 <HAL_PCDEx_LPM_Callback>
 800e0d4:	e6cf      	b.n	800de76 <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e0d6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e0da:	2208      	movs	r2, #8
 800e0dc:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f006 ffa9 	bl	8015038 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e0e6:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800e0ea:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e0ee:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e0f0:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800e0f4:	440b      	add	r3, r1
 800e0f6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800e0fa:	e63b      	b.n	800dd74 <HAL_PCD_IRQHandler+0x64>
 800e0fc:	9f03      	ldr	r7, [sp, #12]
 800e0fe:	e644      	b.n	800dd8a <HAL_PCD_IRQHandler+0x7a>
 800e100:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800e104:	e647      	b.n	800dd96 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800e106:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e10a:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800e10e:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e110:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800e112:	f63f aec5 	bhi.w	800dea0 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e116:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800e11a:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e11c:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e120:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800e124:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800e126:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800e128:	428a      	cmp	r2, r1
 800e12a:	bf28      	it	cs
 800e12c:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e12e:	9905      	ldr	r1, [sp, #20]
 800e130:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800e132:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e134:	b289      	uxth	r1, r1
 800e136:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800e13a:	f0c0 80bc 	bcc.w	800e2b6 <HAL_PCD_IRQHandler+0x5a6>
 800e13e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e142:	46a0      	mov	r8, r4
 800e144:	9c05      	ldr	r4, [sp, #20]
 800e146:	e01a      	b.n	800e17e <HAL_PCD_IRQHandler+0x46e>
 800e148:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e14a:	463a      	mov	r2, r7
 800e14c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800e14e:	4658      	mov	r0, fp
 800e150:	429d      	cmp	r5, r3
 800e152:	bf28      	it	cs
 800e154:	461d      	movcs	r5, r3
 800e156:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	b2ab      	uxth	r3, r5
 800e15e:	f006 ff55 	bl	801500c <USB_WritePacket>
    ep->xfer_buff  += len;
 800e162:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e164:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800e166:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e168:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800e16a:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800e16c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e16e:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800e170:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e172:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800e176:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e178:	f0c0 8096 	bcc.w	800e2a8 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e17c:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800e17e:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800e180:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e184:	d3e0      	bcc.n	800e148 <HAL_PCD_IRQHandler+0x438>
 800e186:	4644      	mov	r4, r8
 800e188:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e18c:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e190:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e192:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e194:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e196:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e19a:	f00a 030f 	and.w	r3, sl, #15
 800e19e:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e1a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e1a2:	ea23 0302 	bic.w	r3, r3, r2
 800e1a6:	634b      	str	r3, [r1, #52]	; 0x34
 800e1a8:	e67a      	b.n	800dea0 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e1aa:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1ac:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e1b0:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e1b6:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1b8:	485f      	ldr	r0, [pc, #380]	; (800e338 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1ba:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1bc:	4282      	cmp	r2, r0
 800e1be:	d961      	bls.n	800e284 <HAL_PCD_IRQHandler+0x574>
 800e1c0:	040a      	lsls	r2, r1, #16
 800e1c2:	d502      	bpl.n	800e1ca <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e1c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e1c8:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f016 ff46 	bl	802505c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e1d0:	6921      	ldr	r1, [r4, #16]
 800e1d2:	2901      	cmp	r1, #1
 800e1d4:	d07f      	beq.n	800e2d6 <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e1d6:	6820      	ldr	r0, [r4, #0]
 800e1d8:	e6ce      	b.n	800df78 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e1da:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800e1dc:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e1de:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1e0:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800e1e4:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e1e6:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1ea:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800e1ee:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800e1f0:	d04d      	beq.n	800e28e <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e1f2:	4952      	ldr	r1, [pc, #328]	; (800e33c <HAL_PCD_IRQHandler+0x62c>)
 800e1f4:	458c      	cmp	ip, r1
 800e1f6:	d062      	beq.n	800e2be <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e1f8:	f1b8 0f00 	cmp.w	r8, #0
 800e1fc:	d104      	bne.n	800e208 <HAL_PCD_IRQHandler+0x4f8>
 800e1fe:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e202:	2a00      	cmp	r2, #0
 800e204:	f000 8092 	beq.w	800e32c <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e208:	4620      	mov	r0, r4
 800e20a:	4639      	mov	r1, r7
 800e20c:	f016 ff2c 	bl	8025068 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e210:	6820      	ldr	r0, [r4, #0]
 800e212:	e6ad      	b.n	800df70 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e214:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e218:	421d      	tst	r5, r3
 800e21a:	f43f adab 	beq.w	800dd74 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e21e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e222:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800e226:	4638      	mov	r0, r7
 800e228:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e22c:	4615      	mov	r5, r2
 800e22e:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800e232:	f006 ff01 	bl	8015038 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e236:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e23a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e23c:	442b      	add	r3, r5
 800e23e:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e242:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800e246:	442b      	add	r3, r5
 800e248:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800e24c:	e592      	b.n	800dd74 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800e24e:	4620      	mov	r0, r4
 800e250:	f016 ff38 	bl	80250c4 <HAL_PCD_SuspendCallback>
 800e254:	e5fb      	b.n	800de4e <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800e256:	4620      	mov	r0, r4
 800e258:	f016 ff5c 	bl	8025114 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	e5ed      	b.n	800de3c <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e260:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800e264:	4413      	add	r3, r2
 800e266:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e268:	f1ba 0f00 	cmp.w	sl, #0
 800e26c:	f47f ae3f 	bne.w	800deee <HAL_PCD_IRQHandler+0x1de>
 800e270:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e272:	2b00      	cmp	r3, #0
 800e274:	f47f ae3b 	bne.w	800deee <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e278:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e27c:	6820      	ldr	r0, [r4, #0]
 800e27e:	f006 ffd9 	bl	8015234 <USB_EP0_OutStart>
 800e282:	e634      	b.n	800deee <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800e284:	4620      	mov	r0, r4
 800e286:	f016 fee9 	bl	802505c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e28a:	6820      	ldr	r0, [r4, #0]
 800e28c:	e674      	b.n	800df78 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e28e:	0719      	lsls	r1, r3, #28
 800e290:	d51c      	bpl.n	800e2cc <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e292:	4929      	ldr	r1, [pc, #164]	; (800e338 <HAL_PCD_IRQHandler+0x628>)
 800e294:	458c      	cmp	ip, r1
 800e296:	f67f ae6b 	bls.w	800df70 <HAL_PCD_IRQHandler+0x260>
 800e29a:	041f      	lsls	r7, r3, #16
 800e29c:	f57f ae68 	bpl.w	800df70 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e2a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2a4:	6093      	str	r3, [r2, #8]
 800e2a6:	e663      	b.n	800df70 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e2a8:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800e2aa:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e2ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e2b0:	f8d4 b000 	ldr.w	fp, [r4]
 800e2b4:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800e2b6:	42ab      	cmp	r3, r5
 800e2b8:	f4ff adf2 	bcc.w	800dea0 <HAL_PCD_IRQHandler+0x190>
 800e2bc:	e768      	b.n	800e190 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e2be:	0419      	lsls	r1, r3, #16
 800e2c0:	d4ee      	bmi.n	800e2a0 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e2c2:	0699      	lsls	r1, r3, #26
 800e2c4:	d5a0      	bpl.n	800e208 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2c6:	2120      	movs	r1, #32
 800e2c8:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e2ca:	e79d      	b.n	800e208 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e2cc:	0699      	lsls	r1, r3, #26
 800e2ce:	d508      	bpl.n	800e2e2 <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2d0:	2320      	movs	r3, #32
 800e2d2:	6093      	str	r3, [r2, #8]
 800e2d4:	e64c      	b.n	800df70 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e2d6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e2da:	6820      	ldr	r0, [r4, #0]
 800e2dc:	f006 ffaa 	bl	8015234 <USB_EP0_OutStart>
 800e2e0:	e779      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e2e2:	f013 0f28 	tst.w	r3, #40	; 0x28
 800e2e6:	f47f ae43 	bne.w	800df70 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2ea:	4913      	ldr	r1, [pc, #76]	; (800e338 <HAL_PCD_IRQHandler+0x628>)
 800e2ec:	458c      	cmp	ip, r1
 800e2ee:	d901      	bls.n	800e2f4 <HAL_PCD_IRQHandler+0x5e4>
 800e2f0:	041b      	lsls	r3, r3, #16
 800e2f2:	d4d5      	bmi.n	800e2a0 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2f4:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800e2f6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800e2fe:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800e300:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800e304:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800e308:	440a      	add	r2, r1
 800e30a:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e30e:	f1b8 0f00 	cmp.w	r8, #0
 800e312:	f47f af79 	bne.w	800e208 <HAL_PCD_IRQHandler+0x4f8>
 800e316:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e31a:	2a00      	cmp	r2, #0
 800e31c:	f47f af74 	bne.w	800e208 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e320:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e324:	2101      	movs	r1, #1
 800e326:	f006 ff85 	bl	8015234 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e32a:	e76d      	b.n	800e208 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e32c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e330:	4641      	mov	r1, r8
 800e332:	f006 ff7f 	bl	8015234 <USB_EP0_OutStart>
 800e336:	e767      	b.n	800e208 <HAL_PCD_IRQHandler+0x4f8>
 800e338:	4f54300a 	.word	0x4f54300a
 800e33c:	4f54310a 	.word	0x4f54310a

0800e340 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800e340:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800e344:	2a01      	cmp	r2, #1
 800e346:	d00e      	beq.n	800e366 <HAL_PCD_SetAddress+0x26>
 800e348:	2201      	movs	r2, #1
{
 800e34a:	b510      	push	{r4, lr}
 800e34c:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e34e:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800e350:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800e354:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e358:	f006 fef2 	bl	8015140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e35c:	2300      	movs	r3, #0
  return HAL_OK;
 800e35e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e360:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e364:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800e366:	2002      	movs	r0, #2
}
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop

0800e36c <HAL_PCD_EP_Open>:
{
 800e36c:	b510      	push	{r4, lr}
 800e36e:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800e372:	0609      	lsls	r1, r1, #24
{
 800e374:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e376:	d427      	bmi.n	800e3c8 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e378:	f04f 0c1c 	mov.w	ip, #28
 800e37c:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800e380:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800e384:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800e388:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e38c:	2000      	movs	r0, #0
 800e38e:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800e392:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800e394:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e396:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800e39a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800e39c:	b10a      	cbz	r2, 800e3a2 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800e39e:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d101      	bne.n	800e3aa <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800e3aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d018      	beq.n	800e3e4 <HAL_PCD_EP_Open+0x78>
 800e3b2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e3b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e3b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e3ba:	f006 fbe5 	bl	8014b88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e3be:	2300      	movs	r3, #0
  return ret;
 800e3c0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e3c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e3c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3c8:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800e3ca:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3ce:	fb00 400e 	mla	r0, r0, lr, r4
 800e3d2:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800e3d6:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800e3da:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e3de:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800e3e2:	e7d6      	b.n	800e392 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800e3e4:	2002      	movs	r0, #2
}
 800e3e6:	bd10      	pop	{r4, pc}

0800e3e8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800e3e8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e3ec:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3f0:	f04f 011c 	mov.w	r1, #28
{
 800e3f4:	b510      	push	{r4, lr}
 800e3f6:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e3f8:	d11a      	bne.n	800e430 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3fa:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e3fe:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e402:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e404:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e408:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e40c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e410:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e412:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e416:	2b01      	cmp	r3, #1
 800e418:	d019      	beq.n	800e44e <HAL_PCD_EP_Close+0x66>
 800e41a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e41c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e41e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e422:	f006 fbf9 	bl	8014c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e426:	2300      	movs	r3, #0
  return HAL_OK;
 800e428:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e42a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e42e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e430:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e434:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e438:	2001      	movs	r0, #1
 800e43a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e43e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e440:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e444:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e446:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d1e5      	bne.n	800e41a <HAL_PCD_EP_Close+0x32>
 800e44e:	2002      	movs	r0, #2
}
 800e450:	bd10      	pop	{r4, pc}
 800e452:	bf00      	nop

0800e454 <HAL_PCD_EP_Receive>:
{
 800e454:	b510      	push	{r4, lr}
 800e456:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e45a:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e45c:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e460:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e464:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e468:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800e46c:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800e470:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e472:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800e476:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800e47a:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800e47e:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800e482:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e484:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e486:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e488:	bf08      	it	eq
 800e48a:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e48e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e490:	b91c      	cbnz	r4, 800e49a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e492:	f006 fd37 	bl	8014f04 <USB_EP0StartXfer>
}
 800e496:	2000      	movs	r0, #0
 800e498:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e49a:	f006 fc1b 	bl	8014cd4 <USB_EPStartXfer>
}
 800e49e:	2000      	movs	r0, #0
 800e4a0:	bd10      	pop	{r4, pc}
 800e4a2:	bf00      	nop

0800e4a4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e4a4:	f001 010f 	and.w	r1, r1, #15
 800e4a8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e4ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800e4b0:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop

0800e4b8 <HAL_PCD_EP_Transmit>:
{
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4be:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e4c0:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4c4:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e4c8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4cc:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800e4ce:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800e4d2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e4d4:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800e4d8:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800e4dc:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4de:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800e4e2:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800e4e6:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4e8:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e4ea:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e4ec:	bf08      	it	eq
 800e4ee:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4f2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e4f4:	b91c      	cbnz	r4, 800e4fe <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4f6:	f006 fd05 	bl	8014f04 <USB_EP0StartXfer>
}
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4fe:	f006 fbe9 	bl	8014cd4 <USB_EPStartXfer>
}
 800e502:	2000      	movs	r0, #0
 800e504:	bd10      	pop	{r4, pc}
 800e506:	bf00      	nop

0800e508 <HAL_PCD_EP_SetStall>:
{
 800e508:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e50a:	6843      	ldr	r3, [r0, #4]
 800e50c:	f001 050f 	and.w	r5, r1, #15
 800e510:	429d      	cmp	r5, r3
 800e512:	d834      	bhi.n	800e57e <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800e514:	060b      	lsls	r3, r1, #24
 800e516:	4604      	mov	r4, r0
 800e518:	d41d      	bmi.n	800e556 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800e51a:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800e51c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800e520:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800e524:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e528:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800e52a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e52e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800e532:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e534:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e536:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e538:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d01c      	beq.n	800e57a <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e540:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e542:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e546:	f006 fd9b 	bl	8015080 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e54a:	b1d5      	cbz	r5, 800e582 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800e54c:	2300      	movs	r3, #0
  return HAL_OK;
 800e54e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e550:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e554:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e556:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800e558:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800e55c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e55e:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800e562:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e566:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800e56c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e56e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e570:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e572:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e576:	429a      	cmp	r2, r3
 800e578:	d1e2      	bne.n	800e540 <HAL_PCD_EP_SetStall+0x38>
 800e57a:	2002      	movs	r0, #2
}
 800e57c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e57e:	2001      	movs	r0, #1
}
 800e580:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e582:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e586:	7c21      	ldrb	r1, [r4, #16]
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	f006 fe53 	bl	8015234 <USB_EP0_OutStart>
 800e58e:	e7dd      	b.n	800e54c <HAL_PCD_EP_SetStall+0x44>

0800e590 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e590:	6842      	ldr	r2, [r0, #4]
{
 800e592:	b538      	push	{r3, r4, r5, lr}
 800e594:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d832      	bhi.n	800e602 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800e59c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e5a0:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5a2:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800e5a6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800e5aa:	d119      	bne.n	800e5e0 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5ac:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e5b6:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5b8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e5bc:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5c0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e5c2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e5c4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d018      	beq.n	800e5fe <HAL_PCD_EP_ClrStall+0x6e>
 800e5cc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e5ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e5d0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e5d4:	f006 fd88 	bl	80150e8 <USB_EPClearStall>
  return HAL_OK;
 800e5d8:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800e5da:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5e0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e5ea:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5ec:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e5ee:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5f2:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e5f4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e5f6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d1e6      	bne.n	800e5cc <HAL_PCD_EP_ClrStall+0x3c>
 800e5fe:	2002      	movs	r0, #2
}
 800e600:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e602:	2001      	movs	r0, #1
}
 800e604:	bd38      	pop	{r3, r4, r5, pc}
 800e606:	bf00      	nop

0800e608 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e608:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e60a:	6804      	ldr	r4, [r0, #0]
 800e60c:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800e60e:	b931      	cbnz	r1, 800e61e <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e610:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e614:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800e616:	2000      	movs	r0, #0
 800e618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61c:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e61e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800e620:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e624:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e628:	d00b      	beq.n	800e642 <HAL_PCDEx_SetTxFiFo+0x3a>
 800e62a:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e62c:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800e630:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e632:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800e636:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e638:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800e63a:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e63c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e640:	d3f4      	bcc.n	800e62c <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e642:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e646:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e64a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800e64e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e652:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e656:	2000      	movs	r0, #0
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop

0800e65c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e65c:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800e65e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6259      	str	r1, [r3, #36]	; 0x24
}
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop

0800e668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e668:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800e66a:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e66e:	4909      	ldr	r1, [pc, #36]	; (800e694 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e670:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800e672:	4660      	mov	r0, ip
{
 800e674:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800e676:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800e678:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800e67c:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e680:	6993      	ldr	r3, [r2, #24]
}
 800e682:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e68a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e68c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e68e:	4319      	orrs	r1, r3
 800e690:	6551      	str	r1, [r2, #84]	; 0x54
}
 800e692:	4770      	bx	lr
 800e694:	10000003 	.word	0x10000003

0800e698 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e698:	4a02      	ldr	r2, [pc, #8]	; (800e6a4 <HAL_PWR_EnableBkUpAccess+0xc>)
 800e69a:	6813      	ldr	r3, [r2, #0]
 800e69c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6a0:	6013      	str	r3, [r2, #0]
}
 800e6a2:	4770      	bx	lr
 800e6a4:	40007000 	.word	0x40007000

0800e6a8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800e6a8:	4b1a      	ldr	r3, [pc, #104]	; (800e714 <HAL_PWREx_EnableOverDrive+0x6c>)
 800e6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800e6b0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6b2:	641a      	str	r2, [r3, #64]	; 0x40
{
 800e6b4:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e6b8:	4c17      	ldr	r4, [pc, #92]	; (800e718 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6c8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e6ca:	f7fa fe4f 	bl	800936c <HAL_GetTick>
 800e6ce:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e6d0:	e005      	b.n	800e6de <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e6d2:	f7fa fe4b 	bl	800936c <HAL_GetTick>
 800e6d6:	1b40      	subs	r0, r0, r5
 800e6d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e6dc:	d817      	bhi.n	800e70e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e6de:	6863      	ldr	r3, [r4, #4]
 800e6e0:	03da      	lsls	r2, r3, #15
 800e6e2:	d5f6      	bpl.n	800e6d2 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e6e4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e6e6:	4d0c      	ldr	r5, [pc, #48]	; (800e718 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e6e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6ec:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e6ee:	f7fa fe3d 	bl	800936c <HAL_GetTick>
 800e6f2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e6f4:	e005      	b.n	800e702 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e6f6:	f7fa fe39 	bl	800936c <HAL_GetTick>
 800e6fa:	1b00      	subs	r0, r0, r4
 800e6fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e700:	d805      	bhi.n	800e70e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e702:	686b      	ldr	r3, [r5, #4]
 800e704:	039b      	lsls	r3, r3, #14
 800e706:	d5f6      	bpl.n	800e6f6 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800e708:	2000      	movs	r0, #0
}
 800e70a:	b003      	add	sp, #12
 800e70c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800e70e:	2003      	movs	r0, #3
}
 800e710:	b003      	add	sp, #12
 800e712:	bd30      	pop	{r4, r5, pc}
 800e714:	40023800 	.word	0x40023800
 800e718:	40007000 	.word	0x40007000

0800e71c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e71c:	2800      	cmp	r0, #0
 800e71e:	f000 828c 	beq.w	800ec3a <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e722:	6803      	ldr	r3, [r0, #0]
 800e724:	2b0f      	cmp	r3, #15
{
 800e726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	4604      	mov	r4, r0
 800e72c:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e72e:	f200 8123 	bhi.w	800e978 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e732:	07dd      	lsls	r5, r3, #31
 800e734:	d534      	bpl.n	800e7a0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e736:	6863      	ldr	r3, [r4, #4]
 800e738:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800e73c:	d003      	beq.n	800e746 <HAL_RCC_OscConfig+0x2a>
 800e73e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e742:	f040 8175 	bne.w	800ea30 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e746:	4aa3      	ldr	r2, [pc, #652]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e748:	6893      	ldr	r3, [r2, #8]
 800e74a:	f003 030c 	and.w	r3, r3, #12
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d01d      	beq.n	800e78e <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e752:	6893      	ldr	r3, [r2, #8]
 800e754:	f003 030c 	and.w	r3, r3, #12
 800e758:	2b08      	cmp	r3, #8
 800e75a:	d015      	beq.n	800e788 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e75c:	6863      	ldr	r3, [r4, #4]
 800e75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e762:	f000 816b 	beq.w	800ea3c <HAL_RCC_OscConfig+0x320>
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 819c 	beq.w	800eaa4 <HAL_RCC_OscConfig+0x388>
 800e76c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e770:	4b98      	ldr	r3, [pc, #608]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	f000 822d 	beq.w	800ebd2 <HAL_RCC_OscConfig+0x4b6>
 800e778:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	e15e      	b.n	800ea46 <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e788:	6853      	ldr	r3, [r2, #4]
 800e78a:	0258      	lsls	r0, r3, #9
 800e78c:	d5e6      	bpl.n	800e75c <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e78e:	4b91      	ldr	r3, [pc, #580]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	0399      	lsls	r1, r3, #14
 800e794:	d503      	bpl.n	800e79e <HAL_RCC_OscConfig+0x82>
 800e796:	6863      	ldr	r3, [r4, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f000 80ff 	beq.w	800e99c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	079f      	lsls	r7, r3, #30
 800e7a2:	d531      	bpl.n	800e808 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e7a4:	68e3      	ldr	r3, [r4, #12]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	f200 80fc 	bhi.w	800e9a4 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e7ac:	6923      	ldr	r3, [r4, #16]
 800e7ae:	2b1f      	cmp	r3, #31
 800e7b0:	f200 8101 	bhi.w	800e9b6 <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e7b4:	4b87      	ldr	r3, [pc, #540]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	f012 0f0c 	tst.w	r2, #12
 800e7bc:	f000 80e7 	beq.w	800e98e <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	f002 020c 	and.w	r2, r2, #12
 800e7c6:	2a08      	cmp	r2, #8
 800e7c8:	f000 80dd 	beq.w	800e986 <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e7cc:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e7ce:	4d81      	ldr	r5, [pc, #516]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f000 819d 	beq.w	800eb10 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	f043 0301 	orr.w	r3, r3, #1
 800e7dc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7de:	f7fa fdc5 	bl	800936c <HAL_GetTick>
 800e7e2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7e4:	e005      	b.n	800e7f2 <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7e6:	f7fa fdc1 	bl	800936c <HAL_GetTick>
 800e7ea:	1b80      	subs	r0, r0, r6
 800e7ec:	2802      	cmp	r0, #2
 800e7ee:	f200 8155 	bhi.w	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7f2:	682b      	ldr	r3, [r5, #0]
 800e7f4:	0798      	lsls	r0, r3, #30
 800e7f6:	d5f6      	bpl.n	800e7e6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	6922      	ldr	r2, [r4, #16]
 800e7fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e800:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e804:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	071a      	lsls	r2, r3, #28
 800e80a:	d42a      	bmi.n	800e862 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e80c:	075e      	lsls	r6, r3, #29
 800e80e:	d544      	bpl.n	800e89a <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e810:	68a3      	ldr	r3, [r4, #8]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d906      	bls.n	800e824 <HAL_RCC_OscConfig+0x108>
 800e816:	2b05      	cmp	r3, #5
 800e818:	d004      	beq.n	800e824 <HAL_RCC_OscConfig+0x108>
 800e81a:	f240 2106 	movw	r1, #518	; 0x206
 800e81e:	486e      	ldr	r0, [pc, #440]	; (800e9d8 <HAL_RCC_OscConfig+0x2bc>)
 800e820:	f7f7 f860 	bl	80058e4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e824:	4b6b      	ldr	r3, [pc, #428]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e828:	00d5      	lsls	r5, r2, #3
 800e82a:	f140 80ec 	bpl.w	800ea06 <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800e82e:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e830:	4e6a      	ldr	r6, [pc, #424]	; (800e9dc <HAL_RCC_OscConfig+0x2c0>)
 800e832:	6833      	ldr	r3, [r6, #0]
 800e834:	05d8      	lsls	r0, r3, #23
 800e836:	f140 8121 	bpl.w	800ea7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e83a:	68a3      	ldr	r3, [r4, #8]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	f000 8179 	beq.w	800eb34 <HAL_RCC_OscConfig+0x418>
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 8144 	beq.w	800ead0 <HAL_RCC_OscConfig+0x3b4>
 800e848:	2b05      	cmp	r3, #5
 800e84a:	4b62      	ldr	r3, [pc, #392]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e84c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e84e:	f000 81c8 	beq.w	800ebe2 <HAL_RCC_OscConfig+0x4c6>
 800e852:	f022 0201 	bic.w	r2, r2, #1
 800e856:	671a      	str	r2, [r3, #112]	; 0x70
 800e858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e85a:	f022 0204 	bic.w	r2, r2, #4
 800e85e:	671a      	str	r2, [r3, #112]	; 0x70
 800e860:	e16d      	b.n	800eb3e <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e862:	6963      	ldr	r3, [r4, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	f200 80c4 	bhi.w	800e9f2 <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800e86a:	4d5a      	ldr	r5, [pc, #360]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f000 80a8 	beq.w	800e9c2 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800e872:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e874:	f043 0301 	orr.w	r3, r3, #1
 800e878:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e87a:	f7fa fd77 	bl	800936c <HAL_GetTick>
 800e87e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e880:	e005      	b.n	800e88e <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e882:	f7fa fd73 	bl	800936c <HAL_GetTick>
 800e886:	1b80      	subs	r0, r0, r6
 800e888:	2802      	cmp	r0, #2
 800e88a:	f200 8107 	bhi.w	800ea9c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e88e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e890:	079b      	lsls	r3, r3, #30
 800e892:	d5f6      	bpl.n	800e882 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	075e      	lsls	r6, r3, #29
 800e898:	d4ba      	bmi.n	800e810 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e89a:	69a0      	ldr	r0, [r4, #24]
 800e89c:	2802      	cmp	r0, #2
 800e89e:	f200 80bd 	bhi.w	800ea1c <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d064      	beq.n	800e970 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8a6:	4d4b      	ldr	r5, [pc, #300]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e8a8:	68ab      	ldr	r3, [r5, #8]
 800e8aa:	f003 030c 	and.w	r3, r3, #12
 800e8ae:	2b08      	cmp	r3, #8
 800e8b0:	f000 8158 	beq.w	800eb64 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e8b4:	2802      	cmp	r0, #2
 800e8b6:	f040 81ae 	bne.w	800ec16 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e8ba:	69e3      	ldr	r3, [r4, #28]
 800e8bc:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800e8c0:	f040 81a3 	bne.w	800ec0a <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e8c4:	6a23      	ldr	r3, [r4, #32]
 800e8c6:	3b02      	subs	r3, #2
 800e8c8:	2b3d      	cmp	r3, #61	; 0x3d
 800e8ca:	f200 8198 	bhi.w	800ebfe <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8d0:	3b32      	subs	r3, #50	; 0x32
 800e8d2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e8d6:	f200 818c 	bhi.w	800ebf2 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e8da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	f200 8172 	bhi.w	800ebc6 <HAL_RCC_OscConfig+0x4aa>
 800e8e2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800e8ea:	07d8      	lsls	r0, r3, #31
 800e8ec:	f140 816b 	bpl.w	800ebc6 <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e8f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e8f2:	3b02      	subs	r3, #2
 800e8f4:	2b0d      	cmp	r3, #13
 800e8f6:	f200 81a8 	bhi.w	800ec4a <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e8fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e8fc:	3b02      	subs	r3, #2
 800e8fe:	2b05      	cmp	r3, #5
 800e900:	f200 819d 	bhi.w	800ec3e <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e904:	4d33      	ldr	r5, [pc, #204]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e906:	682b      	ldr	r3, [r5, #0]
 800e908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e90c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e90e:	f7fa fd2d 	bl	800936c <HAL_GetTick>
 800e912:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e914:	e005      	b.n	800e922 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e916:	f7fa fd29 	bl	800936c <HAL_GetTick>
 800e91a:	1b80      	subs	r0, r0, r6
 800e91c:	2802      	cmp	r0, #2
 800e91e:	f200 80bd 	bhi.w	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	0199      	lsls	r1, r3, #6
 800e926:	d4f6      	bmi.n	800e916 <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e928:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800e92c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e92e:	430b      	orrs	r3, r1
 800e930:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e932:	4e28      	ldr	r6, [pc, #160]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e934:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e938:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800e93c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e940:	0852      	lsrs	r2, r2, #1
 800e942:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e946:	3a01      	subs	r2, #1
 800e948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e94c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800e94e:	682b      	ldr	r3, [r5, #0]
 800e950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e956:	f7fa fd09 	bl	800936c <HAL_GetTick>
 800e95a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e95c:	e005      	b.n	800e96a <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e95e:	f7fa fd05 	bl	800936c <HAL_GetTick>
 800e962:	1b00      	subs	r0, r0, r4
 800e964:	2802      	cmp	r0, #2
 800e966:	f200 8099 	bhi.w	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e96a:	6833      	ldr	r3, [r6, #0]
 800e96c:	019a      	lsls	r2, r3, #6
 800e96e:	d5f6      	bpl.n	800e95e <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800e970:	2000      	movs	r0, #0
}
 800e972:	b002      	add	sp, #8
 800e974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e978:	f240 1163 	movw	r1, #355	; 0x163
 800e97c:	4816      	ldr	r0, [pc, #88]	; (800e9d8 <HAL_RCC_OscConfig+0x2bc>)
 800e97e:	f7f6 ffb1 	bl	80058e4 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	e6d5      	b.n	800e732 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	025e      	lsls	r6, r3, #9
 800e98a:	f53f af1f 	bmi.w	800e7cc <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e98e:	4b11      	ldr	r3, [pc, #68]	; (800e9d4 <HAL_RCC_OscConfig+0x2b8>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	079d      	lsls	r5, r3, #30
 800e994:	d565      	bpl.n	800ea62 <HAL_RCC_OscConfig+0x346>
 800e996:	68e3      	ldr	r3, [r4, #12]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d062      	beq.n	800ea62 <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800e99c:	2001      	movs	r0, #1
}
 800e99e:	b002      	add	sp, #8
 800e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e9a4:	f240 119b 	movw	r1, #411	; 0x19b
 800e9a8:	480b      	ldr	r0, [pc, #44]	; (800e9d8 <HAL_RCC_OscConfig+0x2bc>)
 800e9aa:	f7f6 ff9b 	bl	80058e4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e9ae:	6923      	ldr	r3, [r4, #16]
 800e9b0:	2b1f      	cmp	r3, #31
 800e9b2:	f67f aeff 	bls.w	800e7b4 <HAL_RCC_OscConfig+0x98>
 800e9b6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800e9ba:	4807      	ldr	r0, [pc, #28]	; (800e9d8 <HAL_RCC_OscConfig+0x2bc>)
 800e9bc:	f7f6 ff92 	bl	80058e4 <assert_failed>
 800e9c0:	e6f8      	b.n	800e7b4 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800e9c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e9c4:	f023 0301 	bic.w	r3, r3, #1
 800e9c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e9ca:	f7fa fccf 	bl	800936c <HAL_GetTick>
 800e9ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9d0:	e00b      	b.n	800e9ea <HAL_RCC_OscConfig+0x2ce>
 800e9d2:	bf00      	nop
 800e9d4:	40023800 	.word	0x40023800
 800e9d8:	0802e4e8 	.word	0x0802e4e8
 800e9dc:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e9e0:	f7fa fcc4 	bl	800936c <HAL_GetTick>
 800e9e4:	1b80      	subs	r0, r0, r6
 800e9e6:	2802      	cmp	r0, #2
 800e9e8:	d858      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e9ec:	079f      	lsls	r7, r3, #30
 800e9ee:	d4f7      	bmi.n	800e9e0 <HAL_RCC_OscConfig+0x2c4>
 800e9f0:	e750      	b.n	800e894 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e9f2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800e9f6:	4898      	ldr	r0, [pc, #608]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800e9f8:	f7f6 ff74 	bl	80058e4 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e9fc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800e9fe:	4d97      	ldr	r5, [pc, #604]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d0de      	beq.n	800e9c2 <HAL_RCC_OscConfig+0x2a6>
 800ea04:	e735      	b.n	800e872 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800ea08:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ea0e:	641a      	str	r2, [r3, #64]	; 0x40
 800ea10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ea1a:	e709      	b.n	800e830 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ea1c:	488e      	ldr	r0, [pc, #568]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ea1e:	f240 214a 	movw	r1, #586	; 0x24a
 800ea22:	f7f6 ff5f 	bl	80058e4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea26:	69a0      	ldr	r0, [r4, #24]
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	f47f af3c 	bne.w	800e8a6 <HAL_RCC_OscConfig+0x18a>
 800ea2e:	e79f      	b.n	800e970 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ea30:	f240 1169 	movw	r1, #361	; 0x169
 800ea34:	4888      	ldr	r0, [pc, #544]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ea36:	f7f6 ff55 	bl	80058e4 <assert_failed>
 800ea3a:	e684      	b.n	800e746 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea3c:	4a87      	ldr	r2, [pc, #540]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
 800ea3e:	6813      	ldr	r3, [r2, #0]
 800ea40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ea46:	f7fa fc91 	bl	800936c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea4a:	4e84      	ldr	r6, [pc, #528]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800ea4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea4e:	e004      	b.n	800ea5a <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea50:	f7fa fc8c 	bl	800936c <HAL_GetTick>
 800ea54:	1b40      	subs	r0, r0, r5
 800ea56:	2864      	cmp	r0, #100	; 0x64
 800ea58:	d820      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea5a:	6833      	ldr	r3, [r6, #0]
 800ea5c:	039a      	lsls	r2, r3, #14
 800ea5e:	d5f7      	bpl.n	800ea50 <HAL_RCC_OscConfig+0x334>
 800ea60:	e69d      	b.n	800e79e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea62:	4a7e      	ldr	r2, [pc, #504]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
 800ea64:	6921      	ldr	r1, [r4, #16]
 800ea66:	6813      	ldr	r3, [r2, #0]
 800ea68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ea6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ea70:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea72:	6823      	ldr	r3, [r4, #0]
 800ea74:	071a      	lsls	r2, r3, #28
 800ea76:	f57f aec9 	bpl.w	800e80c <HAL_RCC_OscConfig+0xf0>
 800ea7a:	e6f2      	b.n	800e862 <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800ea7c:	6833      	ldr	r3, [r6, #0]
 800ea7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea82:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ea84:	f7fa fc72 	bl	800936c <HAL_GetTick>
 800ea88:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea8a:	6833      	ldr	r3, [r6, #0]
 800ea8c:	05d9      	lsls	r1, r3, #23
 800ea8e:	f53f aed4 	bmi.w	800e83a <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea92:	f7fa fc6b 	bl	800936c <HAL_GetTick>
 800ea96:	1bc0      	subs	r0, r0, r7
 800ea98:	2864      	cmp	r0, #100	; 0x64
 800ea9a:	d9f6      	bls.n	800ea8a <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800ea9c:	2003      	movs	r0, #3
}
 800ea9e:	b002      	add	sp, #8
 800eaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eaa4:	4d6d      	ldr	r5, [pc, #436]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eaac:	602b      	str	r3, [r5, #0]
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eab4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eab6:	f7fa fc59 	bl	800936c <HAL_GetTick>
 800eaba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eabc:	e004      	b.n	800eac8 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eabe:	f7fa fc55 	bl	800936c <HAL_GetTick>
 800eac2:	1b80      	subs	r0, r0, r6
 800eac4:	2864      	cmp	r0, #100	; 0x64
 800eac6:	d8e9      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	039b      	lsls	r3, r3, #14
 800eacc:	d4f7      	bmi.n	800eabe <HAL_RCC_OscConfig+0x3a2>
 800eace:	e666      	b.n	800e79e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ead0:	4e62      	ldr	r6, [pc, #392]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ead2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ead6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ead8:	f023 0301 	bic.w	r3, r3, #1
 800eadc:	6733      	str	r3, [r6, #112]	; 0x70
 800eade:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800eae0:	f023 0304 	bic.w	r3, r3, #4
 800eae4:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eae6:	f7fa fc41 	bl	800936c <HAL_GetTick>
 800eaea:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaec:	e004      	b.n	800eaf8 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaee:	f7fa fc3d 	bl	800936c <HAL_GetTick>
 800eaf2:	1bc0      	subs	r0, r0, r7
 800eaf4:	4540      	cmp	r0, r8
 800eaf6:	d8d1      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaf8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800eafa:	079b      	lsls	r3, r3, #30
 800eafc:	d4f7      	bmi.n	800eaee <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	f43f aecb 	beq.w	800e89a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb04:	4a55      	ldr	r2, [pc, #340]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
 800eb06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800eb08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb0c:	6413      	str	r3, [r2, #64]	; 0x40
 800eb0e:	e6c4      	b.n	800e89a <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	f023 0301 	bic.w	r3, r3, #1
 800eb16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eb18:	f7fa fc28 	bl	800936c <HAL_GetTick>
 800eb1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb1e:	e004      	b.n	800eb2a <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb20:	f7fa fc24 	bl	800936c <HAL_GetTick>
 800eb24:	1b80      	subs	r0, r0, r6
 800eb26:	2802      	cmp	r0, #2
 800eb28:	d8b8      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	0799      	lsls	r1, r3, #30
 800eb2e:	d4f7      	bmi.n	800eb20 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	e669      	b.n	800e808 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb34:	4a49      	ldr	r2, [pc, #292]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
 800eb36:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800eb38:	f043 0301 	orr.w	r3, r3, #1
 800eb3c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eb3e:	f7fa fc15 	bl	800936c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb42:	4f46      	ldr	r7, [pc, #280]	; (800ec5c <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb44:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800eb48:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb4a:	e004      	b.n	800eb56 <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb4c:	f7fa fc0e 	bl	800936c <HAL_GetTick>
 800eb50:	1b80      	subs	r0, r0, r6
 800eb52:	4540      	cmp	r0, r8
 800eb54:	d8a2      	bhi.n	800ea9c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb58:	079a      	lsls	r2, r3, #30
 800eb5a:	d5f7      	bpl.n	800eb4c <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800eb5c:	2d00      	cmp	r5, #0
 800eb5e:	f43f ae9c 	beq.w	800e89a <HAL_RCC_OscConfig+0x17e>
 800eb62:	e7cf      	b.n	800eb04 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb64:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800eb66:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb68:	f43f af03 	beq.w	800e972 <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb70:	69e1      	ldr	r1, [r4, #28]
 800eb72:	428b      	cmp	r3, r1
 800eb74:	f47f af12 	bne.w	800e99c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb78:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb7c:	6a21      	ldr	r1, [r4, #32]
 800eb7e:	428b      	cmp	r3, r1
 800eb80:	f47f af0c 	bne.w	800e99c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eb88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb8a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb8c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800eb90:	f47f af04 	bne.w	800e99c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800eb94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb96:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800eb9a:	085b      	lsrs	r3, r3, #1
 800eb9c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb9e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800eba2:	f47f aefb 	bne.w	800e99c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eba6:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800ebaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ebac:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800ebb0:	f47f aef4 	bne.w	800e99c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ebb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebb6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ebba:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800ebbe:	bf14      	ite	ne
 800ebc0:	2001      	movne	r0, #1
 800ebc2:	2000      	moveq	r0, #0
 800ebc4:	e6d5      	b.n	800e972 <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800ebc6:	f240 2156 	movw	r1, #598	; 0x256
 800ebca:	4823      	ldr	r0, [pc, #140]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ebcc:	f7f6 fe8a 	bl	80058e4 <assert_failed>
 800ebd0:	e68e      	b.n	800e8f0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ebd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ebde:	601a      	str	r2, [r3, #0]
 800ebe0:	e731      	b.n	800ea46 <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebe2:	f042 0204 	orr.w	r2, r2, #4
 800ebe6:	671a      	str	r2, [r3, #112]	; 0x70
 800ebe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ebea:	f042 0201 	orr.w	r2, r2, #1
 800ebee:	671a      	str	r2, [r3, #112]	; 0x70
 800ebf0:	e7a5      	b.n	800eb3e <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ebf2:	f240 2155 	movw	r1, #597	; 0x255
 800ebf6:	4818      	ldr	r0, [pc, #96]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ebf8:	f7f6 fe74 	bl	80058e4 <assert_failed>
 800ebfc:	e66d      	b.n	800e8da <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ebfe:	f44f 7115 	mov.w	r1, #596	; 0x254
 800ec02:	4815      	ldr	r0, [pc, #84]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ec04:	f7f6 fe6e 	bl	80058e4 <assert_failed>
 800ec08:	e661      	b.n	800e8ce <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ec0a:	f240 2153 	movw	r1, #595	; 0x253
 800ec0e:	4812      	ldr	r0, [pc, #72]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ec10:	f7f6 fe68 	bl	80058e4 <assert_failed>
 800ec14:	e656      	b.n	800e8c4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800ec16:	682b      	ldr	r3, [r5, #0]
 800ec18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ec1e:	f7fa fba5 	bl	800936c <HAL_GetTick>
 800ec22:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec24:	e005      	b.n	800ec32 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec26:	f7fa fba1 	bl	800936c <HAL_GetTick>
 800ec2a:	1b00      	subs	r0, r0, r4
 800ec2c:	2802      	cmp	r0, #2
 800ec2e:	f63f af35 	bhi.w	800ea9c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	019b      	lsls	r3, r3, #6
 800ec36:	d4f6      	bmi.n	800ec26 <HAL_RCC_OscConfig+0x50a>
 800ec38:	e69a      	b.n	800e970 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800ec3a:	2001      	movs	r0, #1
}
 800ec3c:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ec3e:	f240 2159 	movw	r1, #601	; 0x259
 800ec42:	4805      	ldr	r0, [pc, #20]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ec44:	f7f6 fe4e 	bl	80058e4 <assert_failed>
 800ec48:	e65c      	b.n	800e904 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ec4a:	f240 2157 	movw	r1, #599	; 0x257
 800ec4e:	4802      	ldr	r0, [pc, #8]	; (800ec58 <HAL_RCC_OscConfig+0x53c>)
 800ec50:	f7f6 fe48 	bl	80058e4 <assert_failed>
 800ec54:	e651      	b.n	800e8fa <HAL_RCC_OscConfig+0x1de>
 800ec56:	bf00      	nop
 800ec58:	0802e4e8 	.word	0x0802e4e8
 800ec5c:	40023800 	.word	0x40023800

0800ec60 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec60:	4916      	ldr	r1, [pc, #88]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ec62:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec64:	688b      	ldr	r3, [r1, #8]
 800ec66:	f003 030c 	and.w	r3, r3, #12
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	d01b      	beq.n	800eca6 <HAL_RCC_GetSysClockFreq+0x46>
 800ec6e:	2b08      	cmp	r3, #8
 800ec70:	d117      	bne.n	800eca2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec72:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec74:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec7a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ec80:	d113      	bne.n	800ecaa <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec82:	480f      	ldr	r0, [pc, #60]	; (800ecc0 <HAL_RCC_GetSysClockFreq+0x60>)
 800ec84:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ec88:	fba1 0100 	umull	r0, r1, r1, r0
 800ec8c:	f7f1 fb90 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ec90:	4b0a      	ldr	r3, [pc, #40]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x5c>)
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ec98:	3301      	adds	r3, #1
 800ec9a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ec9c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800eca0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800eca2:	4807      	ldr	r0, [pc, #28]	; (800ecc0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800eca4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eca6:	4807      	ldr	r0, [pc, #28]	; (800ecc4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800eca8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ecaa:	4806      	ldr	r0, [pc, #24]	; (800ecc4 <HAL_RCC_GetSysClockFreq+0x64>)
 800ecac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	fba1 0100 	umull	r0, r1, r1, r0
 800ecb6:	f7f1 fb7b 	bl	80003b0 <__aeabi_uldivmod>
 800ecba:	e7e9      	b.n	800ec90 <HAL_RCC_GetSysClockFreq+0x30>
 800ecbc:	40023800 	.word	0x40023800
 800ecc0:	00f42400 	.word	0x00f42400
 800ecc4:	007a1200 	.word	0x007a1200

0800ecc8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f000 80f6 	beq.w	800eeba <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ecce:	6803      	ldr	r3, [r0, #0]
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	2b0e      	cmp	r3, #14
{
 800ecd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd8:	4604      	mov	r4, r0
 800ecda:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ecdc:	f200 80d6 	bhi.w	800ee8c <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ece0:	2d0f      	cmp	r5, #15
 800ece2:	f200 80c3 	bhi.w	800ee6c <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ece6:	4a81      	ldr	r2, [pc, #516]	; (800eeec <HAL_RCC_ClockConfig+0x224>)
 800ece8:	6813      	ldr	r3, [r2, #0]
 800ecea:	f003 030f 	and.w	r3, r3, #15
 800ecee:	42ab      	cmp	r3, r5
 800ecf0:	d36f      	bcc.n	800edd2 <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	0798      	lsls	r0, r3, #30
 800ecf6:	d530      	bpl.n	800ed5a <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecf8:	0759      	lsls	r1, r3, #29
 800ecfa:	d504      	bpl.n	800ed06 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ecfc:	497c      	ldr	r1, [pc, #496]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ecfe:	688a      	ldr	r2, [r1, #8]
 800ed00:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800ed04:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed06:	071a      	lsls	r2, r3, #28
 800ed08:	d504      	bpl.n	800ed14 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ed0a:	4979      	ldr	r1, [pc, #484]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ed0c:	688a      	ldr	r2, [r1, #8]
 800ed0e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800ed12:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ed14:	68a1      	ldr	r1, [r4, #8]
 800ed16:	f021 0220 	bic.w	r2, r1, #32
 800ed1a:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800ed1e:	2a90      	cmp	r2, #144	; 0x90
 800ed20:	bf18      	it	ne
 800ed22:	2800      	cmpne	r0, #0
 800ed24:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800ed28:	bf14      	ite	ne
 800ed2a:	2201      	movne	r2, #1
 800ed2c:	2200      	moveq	r2, #0
 800ed2e:	29f0      	cmp	r1, #240	; 0xf0
 800ed30:	bf0c      	ite	eq
 800ed32:	2200      	moveq	r2, #0
 800ed34:	f002 0201 	andne.w	r2, r2, #1
 800ed38:	28a0      	cmp	r0, #160	; 0xa0
 800ed3a:	bf0c      	ite	eq
 800ed3c:	2200      	moveq	r2, #0
 800ed3e:	f002 0201 	andne.w	r2, r2, #1
 800ed42:	b122      	cbz	r2, 800ed4e <HAL_RCC_ClockConfig+0x86>
 800ed44:	f021 0210 	bic.w	r2, r1, #16
 800ed48:	2ac0      	cmp	r2, #192	; 0xc0
 800ed4a:	f040 80b8 	bne.w	800eebe <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed4e:	4868      	ldr	r0, [pc, #416]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ed50:	6882      	ldr	r2, [r0, #8]
 800ed52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ed56:	4311      	orrs	r1, r2
 800ed58:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ed5a:	07df      	lsls	r7, r3, #31
 800ed5c:	d526      	bpl.n	800edac <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	f200 80a1 	bhi.w	800eea8 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed66:	4a62      	ldr	r2, [pc, #392]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed68:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed6a:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed6c:	f000 8098 	beq.w	800eea0 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	f000 8091 	beq.w	800ee98 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed76:	0791      	lsls	r1, r2, #30
 800ed78:	d528      	bpl.n	800edcc <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed7a:	4e5d      	ldr	r6, [pc, #372]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed7c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed80:	68b2      	ldr	r2, [r6, #8]
 800ed82:	f022 0203 	bic.w	r2, r2, #3
 800ed86:	4313      	orrs	r3, r2
 800ed88:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800ed8a:	f7fa faef 	bl	800936c <HAL_GetTick>
 800ed8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed90:	e005      	b.n	800ed9e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed92:	f7fa faeb 	bl	800936c <HAL_GetTick>
 800ed96:	1bc0      	subs	r0, r0, r7
 800ed98:	4540      	cmp	r0, r8
 800ed9a:	f200 808c 	bhi.w	800eeb6 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed9e:	68b3      	ldr	r3, [r6, #8]
 800eda0:	6862      	ldr	r2, [r4, #4]
 800eda2:	f003 030c 	and.w	r3, r3, #12
 800eda6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800edaa:	d1f2      	bne.n	800ed92 <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800edac:	4a4f      	ldr	r2, [pc, #316]	; (800eeec <HAL_RCC_ClockConfig+0x224>)
 800edae:	6813      	ldr	r3, [r2, #0]
 800edb0:	f003 030f 	and.w	r3, r3, #15
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	d91a      	bls.n	800edee <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edb8:	6813      	ldr	r3, [r2, #0]
 800edba:	f023 030f 	bic.w	r3, r3, #15
 800edbe:	432b      	orrs	r3, r5
 800edc0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edc2:	6813      	ldr	r3, [r2, #0]
 800edc4:	f003 030f 	and.w	r3, r3, #15
 800edc8:	42ab      	cmp	r3, r5
 800edca:	d010      	beq.n	800edee <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800edcc:	2001      	movs	r0, #1
}
 800edce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edd2:	6813      	ldr	r3, [r2, #0]
 800edd4:	f023 030f 	bic.w	r3, r3, #15
 800edd8:	432b      	orrs	r3, r5
 800edda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eddc:	6813      	ldr	r3, [r2, #0]
 800edde:	f003 030f 	and.w	r3, r3, #15
 800ede2:	42ab      	cmp	r3, r5
 800ede4:	d1f2      	bne.n	800edcc <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	0798      	lsls	r0, r3, #30
 800edea:	d485      	bmi.n	800ecf8 <HAL_RCC_ClockConfig+0x30>
 800edec:	e7b5      	b.n	800ed5a <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	075a      	lsls	r2, r3, #29
 800edf2:	d512      	bpl.n	800ee1a <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800edf4:	68e1      	ldr	r1, [r4, #12]
 800edf6:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800edfa:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800edfe:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800ee02:	bf18      	it	ne
 800ee04:	2a00      	cmpne	r2, #0
 800ee06:	d002      	beq.n	800ee0e <HAL_RCC_ClockConfig+0x146>
 800ee08:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800ee0c:	d15f      	bne.n	800eece <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ee0e:	4838      	ldr	r0, [pc, #224]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ee10:	6882      	ldr	r2, [r0, #8]
 800ee12:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800ee16:	430a      	orrs	r2, r1
 800ee18:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee1a:	071b      	lsls	r3, r3, #28
 800ee1c:	d513      	bpl.n	800ee46 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ee1e:	6922      	ldr	r2, [r4, #16]
 800ee20:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800ee24:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800ee28:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800ee2c:	bf18      	it	ne
 800ee2e:	2b00      	cmpne	r3, #0
 800ee30:	d002      	beq.n	800ee38 <HAL_RCC_ClockConfig+0x170>
 800ee32:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800ee36:	d152      	bne.n	800eede <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ee38:	492d      	ldr	r1, [pc, #180]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ee3a:	688b      	ldr	r3, [r1, #8]
 800ee3c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ee40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ee44:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee46:	f7ff ff0b 	bl	800ec60 <HAL_RCC_GetSysClockFreq>
 800ee4a:	4a29      	ldr	r2, [pc, #164]	; (800eef0 <HAL_RCC_ClockConfig+0x228>)
 800ee4c:	4c29      	ldr	r4, [pc, #164]	; (800eef4 <HAL_RCC_ClockConfig+0x22c>)
 800ee4e:	4603      	mov	r3, r0
 800ee50:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800ee52:	4829      	ldr	r0, [pc, #164]	; (800eef8 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee54:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ee58:	4928      	ldr	r1, [pc, #160]	; (800eefc <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800ee5a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee5c:	5ca2      	ldrb	r2, [r4, r2]
 800ee5e:	40d3      	lsrs	r3, r2
 800ee60:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800ee62:	f7f9 f9ef 	bl	8008244 <HAL_InitTick>
  return HAL_OK;
 800ee66:	2000      	movs	r0, #0
}
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ee6c:	f240 21de 	movw	r1, #734	; 0x2de
 800ee70:	4823      	ldr	r0, [pc, #140]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800ee72:	f7f6 fd37 	bl	80058e4 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee76:	4b1d      	ldr	r3, [pc, #116]	; (800eeec <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800ee78:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee7a:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee7c:	6819      	ldr	r1, [r3, #0]
 800ee7e:	f021 010f 	bic.w	r1, r1, #15
 800ee82:	430d      	orrs	r5, r1
 800ee84:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee86:	681b      	ldr	r3, [r3, #0]
}
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ee8c:	f240 21dd 	movw	r1, #733	; 0x2dd
 800ee90:	481b      	ldr	r0, [pc, #108]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800ee92:	f7f6 fd27 	bl	80058e4 <assert_failed>
 800ee96:	e723      	b.n	800ece0 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee98:	0190      	lsls	r0, r2, #6
 800ee9a:	f53f af6e 	bmi.w	800ed7a <HAL_RCC_ClockConfig+0xb2>
 800ee9e:	e795      	b.n	800edcc <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eea0:	0396      	lsls	r6, r2, #14
 800eea2:	f53f af6a 	bmi.w	800ed7a <HAL_RCC_ClockConfig+0xb2>
 800eea6:	e791      	b.n	800edcc <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800eea8:	f240 3109 	movw	r1, #777	; 0x309
 800eeac:	4814      	ldr	r0, [pc, #80]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800eeae:	f7f6 fd19 	bl	80058e4 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eeb2:	6863      	ldr	r3, [r4, #4]
 800eeb4:	e757      	b.n	800ed66 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800eeb6:	2003      	movs	r0, #3
 800eeb8:	e789      	b.n	800edce <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800eeba:	2001      	movs	r0, #1
}
 800eebc:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800eebe:	f240 3102 	movw	r1, #770	; 0x302
 800eec2:	480f      	ldr	r0, [pc, #60]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800eec4:	f7f6 fd0e 	bl	80058e4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eec8:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	e73f      	b.n	800ed4e <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800eece:	f240 3146 	movw	r1, #838	; 0x346
 800eed2:	480b      	ldr	r0, [pc, #44]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800eed4:	f7f6 fd06 	bl	80058e4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eed8:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	e797      	b.n	800ee0e <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800eede:	f240 314d 	movw	r1, #845	; 0x34d
 800eee2:	4807      	ldr	r0, [pc, #28]	; (800ef00 <HAL_RCC_ClockConfig+0x238>)
 800eee4:	f7f6 fcfe 	bl	80058e4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800eee8:	6922      	ldr	r2, [r4, #16]
 800eeea:	e7a5      	b.n	800ee38 <HAL_RCC_ClockConfig+0x170>
 800eeec:	40023c00 	.word	0x40023c00
 800eef0:	40023800 	.word	0x40023800
 800eef4:	0802daf0 	.word	0x0802daf0
 800eef8:	20000318 	.word	0x20000318
 800eefc:	200002b8 	.word	0x200002b8
 800ef00:	0802e4e8 	.word	0x0802e4e8

0800ef04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800ef04:	4b01      	ldr	r3, [pc, #4]	; (800ef0c <HAL_RCC_GetHCLKFreq+0x8>)
}
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	200002b8 	.word	0x200002b8

0800ef10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ef10:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800ef12:	4905      	ldr	r1, [pc, #20]	; (800ef28 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	4a05      	ldr	r2, [pc, #20]	; (800ef2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ef18:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800ef1c:	6808      	ldr	r0, [r1, #0]
 800ef1e:	5cd3      	ldrb	r3, [r2, r3]
}
 800ef20:	40d8      	lsrs	r0, r3
 800ef22:	4770      	bx	lr
 800ef24:	40023800 	.word	0x40023800
 800ef28:	200002b8 	.word	0x200002b8
 800ef2c:	0802db00 	.word	0x0802db00

0800ef30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ef30:	4b04      	ldr	r3, [pc, #16]	; (800ef44 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ef32:	4905      	ldr	r1, [pc, #20]	; (800ef48 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	4a05      	ldr	r2, [pc, #20]	; (800ef4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ef38:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800ef3c:	6808      	ldr	r0, [r1, #0]
 800ef3e:	5cd3      	ldrb	r3, [r2, r3]
}
 800ef40:	40d8      	lsrs	r0, r3
 800ef42:	4770      	bx	lr
 800ef44:	40023800 	.word	0x40023800
 800ef48:	200002b8 	.word	0x200002b8
 800ef4c:	0802db00 	.word	0x0802db00

0800ef50 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef50:	4b0e      	ldr	r3, [pc, #56]	; (800ef8c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ef52:	220f      	movs	r2, #15
 800ef54:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef56:	689a      	ldr	r2, [r3, #8]
 800ef58:	f002 0203 	and.w	r2, r2, #3
 800ef5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ef5e:	689a      	ldr	r2, [r3, #8]
 800ef60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ef64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ef66:	689a      	ldr	r2, [r3, #8]
 800ef68:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ef6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	08db      	lsrs	r3, r3, #3
{
 800ef72:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef74:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef78:	4c05      	ldr	r4, [pc, #20]	; (800ef90 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef7a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef7c:	6823      	ldr	r3, [r4, #0]
}
 800ef7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef82:	f003 030f 	and.w	r3, r3, #15
 800ef86:	600b      	str	r3, [r1, #0]
}
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	40023800 	.word	0x40023800
 800ef90:	40023c00 	.word	0x40023c00

0800ef94 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ef94:	4a56      	ldr	r2, [pc, #344]	; (800f0f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ef96:	6803      	ldr	r3, [r0, #0]
 800ef98:	401a      	ands	r2, r3
{
 800ef9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef9e:	4604      	mov	r4, r0
 800efa0:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800efa2:	2a00      	cmp	r2, #0
 800efa4:	f000 833f 	beq.w	800f626 <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800efa8:	f013 0601 	ands.w	r6, r3, #1
 800efac:	d00f      	beq.n	800efce <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800efae:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800efb0:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800efb4:	f040 8342 	bne.w	800f63c <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800efb8:	4a4e      	ldr	r2, [pc, #312]	; (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800efba:	6891      	ldr	r1, [r2, #8]
 800efbc:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800efc0:	6091      	str	r1, [r2, #8]
 800efc2:	6891      	ldr	r1, [r2, #8]
 800efc4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800efc6:	fab6 f686 	clz	r6, r6
 800efca:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800efcc:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800efce:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800efd2:	d014      	beq.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800efd4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800efd6:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800efda:	f040 838d 	bne.w	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800efde:	4945      	ldr	r1, [pc, #276]	; (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800efe0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800efe4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800efe8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800efec:	ea42 0205 	orr.w	r2, r2, r5
 800eff0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800eff4:	f000 831f 	beq.w	800f636 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800eff8:	fab5 f585 	clz	r5, r5
 800effc:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800effe:	02d9      	lsls	r1, r3, #11
 800f000:	d514      	bpl.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f002:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f004:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800f008:	f040 837d 	bne.w	800f706 <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f00c:	4839      	ldr	r0, [pc, #228]	; (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f00e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f012:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f016:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f01a:	ea42 0201 	orr.w	r2, r2, r1
 800f01e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f022:	f000 8306 	beq.w	800f632 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800f026:	2900      	cmp	r1, #0
 800f028:	bf08      	it	eq
 800f02a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800f02c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800f030:	bf18      	it	ne
 800f032:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f034:	069a      	lsls	r2, r3, #26
 800f036:	f140 8099 	bpl.w	800f16c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f03a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f03c:	482e      	ldr	r0, [pc, #184]	; (800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800f03e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f042:	bf18      	it	ne
 800f044:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800f048:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800f04c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800f050:	bf14      	ite	ne
 800f052:	2301      	movne	r3, #1
 800f054:	2300      	moveq	r3, #0
 800f056:	4287      	cmp	r7, r0
 800f058:	bf0c      	ite	eq
 800f05a:	2300      	moveq	r3, #0
 800f05c:	f003 0301 	andne.w	r3, r3, #1
 800f060:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800f064:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f068:	4287      	cmp	r7, r0
 800f06a:	bf0c      	ite	eq
 800f06c:	2300      	moveq	r3, #0
 800f06e:	f003 0301 	andne.w	r3, r3, #1
 800f072:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f076:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800f07a:	4281      	cmp	r1, r0
 800f07c:	bf0c      	ite	eq
 800f07e:	2300      	moveq	r3, #0
 800f080:	f003 0301 	andne.w	r3, r3, #1
 800f084:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800f088:	4287      	cmp	r7, r0
 800f08a:	bf0c      	ite	eq
 800f08c:	2300      	moveq	r3, #0
 800f08e:	f003 0301 	andne.w	r3, r3, #1
 800f092:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f096:	4281      	cmp	r1, r0
 800f098:	bf0c      	ite	eq
 800f09a:	2300      	moveq	r3, #0
 800f09c:	f003 0301 	andne.w	r3, r3, #1
 800f0a0:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f0a4:	4281      	cmp	r1, r0
 800f0a6:	bf0c      	ite	eq
 800f0a8:	2300      	moveq	r3, #0
 800f0aa:	f003 0301 	andne.w	r3, r3, #1
 800f0ae:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f0b2:	4281      	cmp	r1, r0
 800f0b4:	bf0c      	ite	eq
 800f0b6:	2300      	moveq	r3, #0
 800f0b8:	f003 0301 	andne.w	r3, r3, #1
 800f0bc:	b12b      	cbz	r3, 800f0ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f0be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f0c2:	4b0e      	ldr	r3, [pc, #56]	; (800f0fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	f040 8438 	bne.w	800f93a <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f0ca:	4b0a      	ldr	r3, [pc, #40]	; (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f0cc:	4f0c      	ldr	r7, [pc, #48]	; (800f100 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800f0ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f0d4:	641a      	str	r2, [r3, #64]	; 0x40
 800f0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0dc:	9301      	str	r3, [sp, #4]
 800f0de:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0e6:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0e8:	f7fa f940 	bl	800936c <HAL_GetTick>
 800f0ec:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f0ee:	e010      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800f0f0:	1dfffff9 	.word	0x1dfffff9
 800f0f4:	40023800 	.word	0x40023800
 800f0f8:	00020300 	.word	0x00020300
 800f0fc:	001c0300 	.word	0x001c0300
 800f100:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f104:	f7fa f932 	bl	800936c <HAL_GetTick>
 800f108:	eba0 0008 	sub.w	r0, r0, r8
 800f10c:	2864      	cmp	r0, #100	; 0x64
 800f10e:	f200 8286 	bhi.w	800f61e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	05db      	lsls	r3, r3, #23
 800f116:	d5f5      	bpl.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f118:	4fb0      	ldr	r7, [pc, #704]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f11a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f11c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f11e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f122:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800f126:	d011      	beq.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800f128:	4291      	cmp	r1, r2
 800f12a:	d00f      	beq.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f12c:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f12e:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f130:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800f134:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800f138:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f13a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f13c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800f140:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f142:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f144:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f146:	07d0      	lsls	r0, r2, #31
 800f148:	f100 836c 	bmi.w	800f824 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f14c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800f150:	f000 82c9 	beq.w	800f6e6 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800f154:	49a1      	ldr	r1, [pc, #644]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f156:	688a      	ldr	r2, [r1, #8]
 800f158:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f15c:	608a      	str	r2, [r1, #8]
 800f15e:	4a9f      	ldr	r2, [pc, #636]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f164:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f166:	430b      	orrs	r3, r1
 800f168:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	06da      	lsls	r2, r3, #27
 800f16e:	d510      	bpl.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f170:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800f172:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800f176:	f040 82db 	bne.w	800f730 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f17a:	4a98      	ldr	r2, [pc, #608]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f17c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800f180:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800f184:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800f188:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f18c:	4339      	orrs	r1, r7
 800f18e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f192:	045f      	lsls	r7, r3, #17
 800f194:	d50f      	bpl.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f196:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f198:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800f19c:	d003      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f19e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800f1a2:	f040 8299 	bne.w	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f1a6:	488d      	ldr	r0, [pc, #564]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f1b0:	430a      	orrs	r2, r1
 800f1b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f1b6:	0418      	lsls	r0, r3, #16
 800f1b8:	d50f      	bpl.n	800f1da <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f1ba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f1bc:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800f1c0:	d003      	beq.n	800f1ca <HAL_RCCEx_PeriphCLKConfig+0x236>
 800f1c2:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800f1c6:	f040 826a 	bne.w	800f69e <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f1ca:	4884      	ldr	r0, [pc, #528]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1cc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1d0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f1d4:	430a      	orrs	r2, r1
 800f1d6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f1da:	03d9      	lsls	r1, r3, #15
 800f1dc:	d50f      	bpl.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f1de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f1e0:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800f1e4:	d003      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f1e6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800f1ea:	f040 8260 	bne.w	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f1ee:	487b      	ldr	r0, [pc, #492]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f1f8:	430a      	orrs	r2, r1
 800f1fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f1fe:	039a      	lsls	r2, r3, #14
 800f200:	d50f      	bpl.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f202:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800f204:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800f208:	d003      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800f20a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800f20e:	f040 825b 	bne.w	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f212:	4872      	ldr	r0, [pc, #456]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f214:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f218:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f21c:	430a      	orrs	r2, r1
 800f21e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f222:	065f      	lsls	r7, r3, #25
 800f224:	d50b      	bpl.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f226:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f228:	2903      	cmp	r1, #3
 800f22a:	f200 82b3 	bhi.w	800f794 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f22e:	486b      	ldr	r0, [pc, #428]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f230:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f234:	f022 0203 	bic.w	r2, r2, #3
 800f238:	430a      	orrs	r2, r1
 800f23a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f23e:	0618      	lsls	r0, r3, #24
 800f240:	d50c      	bpl.n	800f25c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f242:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f244:	f031 020c 	bics.w	r2, r1, #12
 800f248:	f040 82b4 	bne.w	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f24c:	4863      	ldr	r0, [pc, #396]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f24e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f252:	f022 020c 	bic.w	r2, r2, #12
 800f256:	430a      	orrs	r2, r1
 800f258:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f25c:	05d9      	lsls	r1, r3, #23
 800f25e:	d50c      	bpl.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f260:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f262:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800f266:	f040 82ad 	bne.w	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f26a:	485c      	ldr	r0, [pc, #368]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f26c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f270:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f274:	430a      	orrs	r2, r1
 800f276:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f27a:	059a      	lsls	r2, r3, #22
 800f27c:	d50c      	bpl.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f27e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800f280:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800f284:	f040 82a6 	bne.w	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f288:	4854      	ldr	r0, [pc, #336]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f28a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f28e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f292:	430a      	orrs	r2, r1
 800f294:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f298:	055f      	lsls	r7, r3, #21
 800f29a:	d50c      	bpl.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f29c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f29e:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800f2a2:	f040 829f 	bne.w	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f2a6:	484d      	ldr	r0, [pc, #308]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f2b0:	430a      	orrs	r2, r1
 800f2b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f2b6:	0518      	lsls	r0, r3, #20
 800f2b8:	d50c      	bpl.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f2ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f2bc:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800f2c0:	f040 8298 	bne.w	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f2c4:	4845      	ldr	r0, [pc, #276]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f2ce:	430a      	orrs	r2, r1
 800f2d0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f2d4:	04d9      	lsls	r1, r3, #19
 800f2d6:	d50c      	bpl.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f2d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f2da:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800f2de:	f040 8291 	bne.w	800f804 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f2e2:	483e      	ldr	r0, [pc, #248]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2e4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f2f2:	049a      	lsls	r2, r3, #18
 800f2f4:	d50c      	bpl.n	800f310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f2f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f2f8:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800f2fc:	f040 828a 	bne.w	800f814 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f300:	4836      	ldr	r0, [pc, #216]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f302:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f30a:	430a      	orrs	r2, r1
 800f30c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f310:	025f      	lsls	r7, r3, #9
 800f312:	d50c      	bpl.n	800f32e <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f314:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f316:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800f31a:	f040 8222 	bne.w	800f762 <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f31e:	482f      	ldr	r0, [pc, #188]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f320:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f324:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f328:	430a      	orrs	r2, r1
 800f32a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f32e:	0298      	lsls	r0, r3, #10
 800f330:	d510      	bpl.n	800f354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f332:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800f334:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800f338:	f040 821b 	bne.w	800f772 <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f33c:	4827      	ldr	r0, [pc, #156]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800f33e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f342:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800f346:	bf08      	it	eq
 800f348:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f34a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800f34e:	430a      	orrs	r2, r1
 800f350:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800f354:	f013 0f08 	tst.w	r3, #8
 800f358:	bf18      	it	ne
 800f35a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f35c:	0359      	lsls	r1, r3, #13
 800f35e:	d50c      	bpl.n	800f37a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f360:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800f362:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800f366:	f040 821d 	bne.w	800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f36a:	481c      	ldr	r0, [pc, #112]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f36c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f374:	430a      	orrs	r2, r1
 800f376:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f37a:	021a      	lsls	r2, r3, #8
 800f37c:	d50d      	bpl.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f37e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f382:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800f386:	f040 81fc 	bne.w	800f782 <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f38a:	4814      	ldr	r0, [pc, #80]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f38c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f390:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f394:	430a      	orrs	r2, r1
 800f396:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f39a:	015f      	lsls	r7, r3, #5
 800f39c:	d50d      	bpl.n	800f3ba <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f39e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f3a2:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800f3a6:	f040 81ca 	bne.w	800f73e <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f3aa:	480c      	ldr	r0, [pc, #48]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f3ac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f3b0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f3ba:	0118      	lsls	r0, r3, #4
 800f3bc:	d510      	bpl.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f3be:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800f3c2:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800f3c6:	f040 81c3 	bne.w	800f750 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f3ca:	4804      	ldr	r0, [pc, #16]	; (800f3dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f3cc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f3d0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800f3da:	e001      	b.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800f3dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f3e0:	00d9      	lsls	r1, r3, #3
 800f3e2:	d50d      	bpl.n	800f400 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f3e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f3e8:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800f3ec:	f040 8198 	bne.w	800f720 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f3f0:	49b3      	ldr	r1, [pc, #716]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f3f2:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800f3f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f400:	2e01      	cmp	r6, #1
 800f402:	d003      	beq.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	019a      	lsls	r2, r3, #6
 800f408:	f140 8083 	bpl.w	800f512 <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f40c:	4eac      	ldr	r6, [pc, #688]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f40e:	6833      	ldr	r3, [r6, #0]
 800f410:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f414:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f416:	f7f9 ffa9 	bl	800936c <HAL_GetTick>
 800f41a:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f41c:	e005      	b.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f41e:	f7f9 ffa5 	bl	800936c <HAL_GetTick>
 800f422:	1bc0      	subs	r0, r0, r7
 800f424:	2864      	cmp	r0, #100	; 0x64
 800f426:	f200 80fa 	bhi.w	800f61e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f42a:	6833      	ldr	r3, [r6, #0]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	d4f6      	bmi.n	800f41e <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f430:	6863      	ldr	r3, [r4, #4]
 800f432:	3b32      	subs	r3, #50	; 0x32
 800f434:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f438:	f200 816c 	bhi.w	800f714 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	07df      	lsls	r7, r3, #31
 800f440:	d517      	bpl.n	800f472 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f442:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f444:	b9aa      	cbnz	r2, 800f472 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f446:	68a7      	ldr	r7, [r4, #8]
 800f448:	1eba      	subs	r2, r7, #2
 800f44a:	2a05      	cmp	r2, #5
 800f44c:	f200 820c 	bhi.w	800f868 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f450:	499b      	ldr	r1, [pc, #620]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f452:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f454:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f458:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f45c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800f460:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800f464:	4332      	orrs	r2, r6
 800f466:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f46a:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800f46e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f472:	031e      	lsls	r6, r3, #12
 800f474:	f100 80e9 	bmi.w	800f64a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800f478:	02d8      	lsls	r0, r3, #11
 800f47a:	d504      	bpl.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f47c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f47e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f482:	f000 80e7 	beq.w	800f654 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f486:	01d9      	lsls	r1, r3, #7
 800f488:	d514      	bpl.n	800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f48a:	6927      	ldr	r7, [r4, #16]
 800f48c:	2f03      	cmp	r7, #3
 800f48e:	f200 81f9 	bhi.w	800f884 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f492:	498b      	ldr	r1, [pc, #556]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f494:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f496:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f49a:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f49e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f4a2:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800f4a6:	4332      	orrs	r2, r6
 800f4a8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f4ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f4b0:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f4b4:	019a      	lsls	r2, r3, #6
 800f4b6:	d51a      	bpl.n	800f4ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	f200 81dc 	bhi.w	800f878 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f4c0:	68a3      	ldr	r3, [r4, #8]
 800f4c2:	3b02      	subs	r3, #2
 800f4c4:	2b05      	cmp	r3, #5
 800f4c6:	f200 81ec 	bhi.w	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f4ca:	68e2      	ldr	r2, [r4, #12]
 800f4cc:	1e93      	subs	r3, r2, #2
 800f4ce:	2b0d      	cmp	r3, #13
 800f4d0:	f200 81e0 	bhi.w	800f894 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f4d4:	6923      	ldr	r3, [r4, #16]
 800f4d6:	6861      	ldr	r1, [r4, #4]
 800f4d8:	041b      	lsls	r3, r3, #16
 800f4da:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f4de:	68a1      	ldr	r1, [r4, #8]
 800f4e0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f4e4:	4976      	ldr	r1, [pc, #472]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f4e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f4ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f4ee:	4e74      	ldr	r6, [pc, #464]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f4f0:	6833      	ldr	r3, [r6, #0]
 800f4f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f4f6:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4f8:	f7f9 ff38 	bl	800936c <HAL_GetTick>
 800f4fc:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f4fe:	e005      	b.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f500:	f7f9 ff34 	bl	800936c <HAL_GetTick>
 800f504:	1bc0      	subs	r0, r0, r7
 800f506:	2864      	cmp	r0, #100	; 0x64
 800f508:	f200 8089 	bhi.w	800f61e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	011b      	lsls	r3, r3, #4
 800f510:	d5f6      	bpl.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f512:	2d01      	cmp	r5, #1
 800f514:	d003      	beq.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800f516:	2000      	movs	r0, #0
}
 800f518:	b003      	add	sp, #12
 800f51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800f51e:	4d68      	ldr	r5, [pc, #416]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f526:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f528:	f7f9 ff20 	bl	800936c <HAL_GetTick>
 800f52c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f52e:	e004      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f530:	f7f9 ff1c 	bl	800936c <HAL_GetTick>
 800f534:	1b80      	subs	r0, r0, r6
 800f536:	2864      	cmp	r0, #100	; 0x64
 800f538:	d871      	bhi.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	009f      	lsls	r7, r3, #2
 800f53e:	d4f7      	bmi.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f540:	6963      	ldr	r3, [r4, #20]
 800f542:	3b32      	subs	r3, #50	; 0x32
 800f544:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f548:	f200 81b9 	bhi.w	800f8be <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f54c:	6823      	ldr	r3, [r4, #0]
 800f54e:	031d      	lsls	r5, r3, #12
 800f550:	f140 81ad 	bpl.w	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800f554:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f556:	2a00      	cmp	r2, #0
 800f558:	f040 81a9 	bne.w	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f55c:	69a3      	ldr	r3, [r4, #24]
 800f55e:	3b02      	subs	r3, #2
 800f560:	2b0d      	cmp	r3, #13
 800f562:	f200 81d5 	bhi.w	800f910 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f568:	1e59      	subs	r1, r3, #1
 800f56a:	291f      	cmp	r1, #31
 800f56c:	f200 81c8 	bhi.w	800f900 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f570:	4a53      	ldr	r2, [pc, #332]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f572:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f576:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f57a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f57e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f582:	4303      	orrs	r3, r0
 800f584:	6960      	ldr	r0, [r4, #20]
 800f586:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f58a:	69a0      	ldr	r0, [r4, #24]
 800f58c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f594:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f598:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800f59c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f5a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	0299      	lsls	r1, r3, #10
 800f5a8:	d504      	bpl.n	800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800f5aa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f5ac:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800f5b0:	f000 818b 	beq.w	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f5b4:	071a      	lsls	r2, r3, #28
 800f5b6:	d522      	bpl.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f5b8:	69e3      	ldr	r3, [r4, #28]
 800f5ba:	3b02      	subs	r3, #2
 800f5bc:	2b05      	cmp	r3, #5
 800f5be:	f200 8199 	bhi.w	800f8f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f5c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f5c4:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800f5c8:	f040 81a8 	bne.w	800f91c <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f5cc:	4a3c      	ldr	r2, [pc, #240]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f5ce:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f5d0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f5d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f5d8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800f5dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	69e1      	ldr	r1, [r4, #28]
 800f5e4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800f5e8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f5ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f5f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f5f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800f5f8:	4303      	orrs	r3, r0
 800f5fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800f5fe:	4c30      	ldr	r4, [pc, #192]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f600:	6823      	ldr	r3, [r4, #0]
 800f602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f606:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800f608:	f7f9 feb0 	bl	800936c <HAL_GetTick>
 800f60c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	d480      	bmi.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f614:	f7f9 feaa 	bl	800936c <HAL_GetTick>
 800f618:	1b40      	subs	r0, r0, r5
 800f61a:	2864      	cmp	r0, #100	; 0x64
 800f61c:	d9f7      	bls.n	800f60e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800f61e:	2003      	movs	r0, #3
}
 800f620:	b003      	add	sp, #12
 800f622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f626:	2172      	movs	r1, #114	; 0x72
 800f628:	4826      	ldr	r0, [pc, #152]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f62a:	f7f6 f95b 	bl	80058e4 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	e4ba      	b.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800f632:	2601      	movs	r6, #1
 800f634:	e4fa      	b.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800f636:	2500      	movs	r5, #0
      plli2sused = 1;
 800f638:	2601      	movs	r6, #1
 800f63a:	e4e0      	b.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800f63c:	2178      	movs	r1, #120	; 0x78
 800f63e:	4821      	ldr	r0, [pc, #132]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f640:	f7f6 f950 	bl	80058e4 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f644:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	e4b6      	b.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f64a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f64c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f650:	f47f af12 	bne.w	800f478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f654:	68e3      	ldr	r3, [r4, #12]
 800f656:	3b02      	subs	r3, #2
 800f658:	2b0d      	cmp	r3, #13
 800f65a:	f200 80f7 	bhi.w	800f84c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f660:	1e59      	subs	r1, r3, #1
 800f662:	291f      	cmp	r1, #31
 800f664:	f200 80f8 	bhi.w	800f858 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f668:	4a15      	ldr	r2, [pc, #84]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f66a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f66e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f676:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f67a:	4303      	orrs	r3, r0
 800f67c:	6860      	ldr	r0, [r4, #4]
 800f67e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f682:	68e0      	ldr	r0, [r4, #12]
 800f684:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f68c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f690:	f023 031f 	bic.w	r3, r3, #31
 800f694:	430b      	orrs	r3, r1
 800f696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	e6f3      	b.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f69e:	f240 1105 	movw	r1, #261	; 0x105
 800f6a2:	4808      	ldr	r0, [pc, #32]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f6a4:	f7f6 f91e 	bl	80058e4 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f6a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	e58d      	b.n	800f1ca <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f6ae:	f240 110f 	movw	r1, #271	; 0x10f
 800f6b2:	4804      	ldr	r0, [pc, #16]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f6b4:	f7f6 f916 	bl	80058e4 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f6b8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	e597      	b.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f6be:	bf00      	nop
 800f6c0:	40023800 	.word	0x40023800
 800f6c4:	0802e520 	.word	0x0802e520
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f6c8:	f240 1119 	movw	r1, #281	; 0x119
 800f6cc:	489e      	ldr	r0, [pc, #632]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6ce:	f7f6 f909 	bl	80058e4 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f6d2:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	e59c      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f6d8:	21fb      	movs	r1, #251	; 0xfb
 800f6da:	489b      	ldr	r0, [pc, #620]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6dc:	f7f6 f902 	bl	80058e4 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f6e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	e55f      	b.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f6e6:	4899      	ldr	r0, [pc, #612]	; (800f94c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f6e8:	4999      	ldr	r1, [pc, #612]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800f6ea:	6882      	ldr	r2, [r0, #8]
 800f6ec:	4019      	ands	r1, r3
 800f6ee:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	6082      	str	r2, [r0, #8]
 800f6f6:	e532      	b.n	800f15e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800f6f8:	2188      	movs	r1, #136	; 0x88
 800f6fa:	4893      	ldr	r0, [pc, #588]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6fc:	f7f6 f8f2 	bl	80058e4 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f700:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	e46b      	b.n	800efde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f706:	219c      	movs	r1, #156	; 0x9c
 800f708:	488f      	ldr	r0, [pc, #572]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f70a:	f7f6 f8eb 	bl	80058e4 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f70e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	e47b      	b.n	800f00c <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f714:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800f718:	488b      	ldr	r0, [pc, #556]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f71a:	f7f6 f8e3 	bl	80058e4 <assert_failed>
 800f71e:	e68d      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f720:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800f724:	4888      	ldr	r0, [pc, #544]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f726:	f7f6 f8dd 	bl	80058e4 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f72a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f72e:	e65f      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f730:	21f1      	movs	r1, #241	; 0xf1
 800f732:	4885      	ldr	r0, [pc, #532]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f734:	f7f6 f8d6 	bl	80058e4 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f738:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	e51d      	b.n	800f17a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f73e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f742:	4881      	ldr	r0, [pc, #516]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f744:	f7f6 f8ce 	bl	80058e4 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f748:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	e62c      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f750:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800f754:	487c      	ldr	r0, [pc, #496]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f756:	f7f6 f8c5 	bl	80058e4 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f75a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	e633      	b.n	800f3ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f762:	f240 1173 	movw	r1, #371	; 0x173
 800f766:	4878      	ldr	r0, [pc, #480]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f768:	f7f6 f8bc 	bl	80058e4 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f76c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	e5d5      	b.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f772:	f240 117d 	movw	r1, #381	; 0x17d
 800f776:	4874      	ldr	r0, [pc, #464]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f778:	f7f6 f8b4 	bl	80058e4 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f77c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	e5dc      	b.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f782:	f240 119f 	movw	r1, #415	; 0x19f
 800f786:	4870      	ldr	r0, [pc, #448]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f788:	f7f6 f8ac 	bl	80058e4 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f78c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	e5fa      	b.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f794:	f240 1123 	movw	r1, #291	; 0x123
 800f798:	486b      	ldr	r0, [pc, #428]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f79a:	f7f6 f8a3 	bl	80058e4 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f79e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	e544      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f7a4:	f240 1195 	movw	r1, #405	; 0x195
 800f7a8:	4867      	ldr	r0, [pc, #412]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7aa:	f7f6 f89b 	bl	80058e4 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f7ae:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	e5da      	b.n	800f36a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f7b4:	f240 112d 	movw	r1, #301	; 0x12d
 800f7b8:	4863      	ldr	r0, [pc, #396]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7ba:	f7f6 f893 	bl	80058e4 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f7be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	e543      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f7c4:	f240 1137 	movw	r1, #311	; 0x137
 800f7c8:	485f      	ldr	r0, [pc, #380]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7ca:	f7f6 f88b 	bl	80058e4 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f7ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	e54a      	b.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f7d4:	f240 1141 	movw	r1, #321	; 0x141
 800f7d8:	485b      	ldr	r0, [pc, #364]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7da:	f7f6 f883 	bl	80058e4 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f7de:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	e551      	b.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f7e4:	f240 114b 	movw	r1, #331	; 0x14b
 800f7e8:	4857      	ldr	r0, [pc, #348]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7ea:	f7f6 f87b 	bl	80058e4 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f7ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f7f0:	6823      	ldr	r3, [r4, #0]
 800f7f2:	e558      	b.n	800f2a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f7f4:	f240 1155 	movw	r1, #341	; 0x155
 800f7f8:	4853      	ldr	r0, [pc, #332]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7fa:	f7f6 f873 	bl	80058e4 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f7fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	e55f      	b.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f804:	f240 115f 	movw	r1, #351	; 0x15f
 800f808:	484f      	ldr	r0, [pc, #316]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f80a:	f7f6 f86b 	bl	80058e4 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f80e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	e566      	b.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f814:	f240 1169 	movw	r1, #361	; 0x169
 800f818:	484b      	ldr	r0, [pc, #300]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f81a:	f7f6 f863 	bl	80058e4 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f81e:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	e56d      	b.n	800f300 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800f824:	f7f9 fda2 	bl	800936c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f828:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f82c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f82e:	e006      	b.n	800f83e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f830:	f7f9 fd9c 	bl	800936c <HAL_GetTick>
 800f834:	eba0 0008 	sub.w	r0, r0, r8
 800f838:	4548      	cmp	r0, r9
 800f83a:	f63f aef0 	bhi.w	800f61e <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f840:	0799      	lsls	r1, r3, #30
 800f842:	d5f5      	bpl.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f846:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f84a:	e47f      	b.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f84c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800f850:	483d      	ldr	r0, [pc, #244]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f852:	f7f6 f847 	bl	80058e4 <assert_failed>
 800f856:	e702      	b.n	800f65e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f858:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800f85c:	483a      	ldr	r0, [pc, #232]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f85e:	f7f6 f841 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f864:	1e59      	subs	r1, r3, #1
 800f866:	e6ff      	b.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f868:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f86c:	4836      	ldr	r0, [pc, #216]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f86e:	f7f6 f839 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f872:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	e5eb      	b.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f878:	f44f 7105 	mov.w	r1, #532	; 0x214
 800f87c:	4832      	ldr	r0, [pc, #200]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f87e:	f7f6 f831 	bl	80058e4 <assert_failed>
 800f882:	e61d      	b.n	800f4c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f884:	f240 2105 	movw	r1, #517	; 0x205
 800f888:	482f      	ldr	r0, [pc, #188]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f88a:	f7f6 f82b 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f88e:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	e5fe      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f894:	f240 2116 	movw	r1, #534	; 0x216
 800f898:	482b      	ldr	r0, [pc, #172]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f89a:	f7f6 f823 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f89e:	68e2      	ldr	r2, [r4, #12]
 800f8a0:	e618      	b.n	800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f8a2:	f240 2115 	movw	r1, #533	; 0x215
 800f8a6:	4828      	ldr	r0, [pc, #160]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8a8:	f7f6 f81c 	bl	80058e4 <assert_failed>
 800f8ac:	e60d      	b.n	800f4ca <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f8ae:	02d8      	lsls	r0, r3, #11
 800f8b0:	f57f ae79 	bpl.w	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f8b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	f47f ae75 	bne.w	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800f8bc:	e64e      	b.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f8be:	f44f 7111 	mov.w	r1, #580	; 0x244
 800f8c2:	4821      	ldr	r0, [pc, #132]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8c4:	f7f6 f80e 	bl	80058e4 <assert_failed>
 800f8c8:	e640      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f8ca:	6a20      	ldr	r0, [r4, #32]
 800f8cc:	2803      	cmp	r0, #3
 800f8ce:	d82c      	bhi.n	800f92a <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f8d0:	491e      	ldr	r1, [pc, #120]	; (800f94c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f8d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f8d6:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f8da:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f8de:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800f8e2:	432a      	orrs	r2, r5
 800f8e4:	6965      	ldr	r5, [r4, #20]
 800f8e6:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800f8ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f8ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800f8f2:	e65f      	b.n	800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f8f4:	f240 216f 	movw	r1, #623	; 0x26f
 800f8f8:	4813      	ldr	r0, [pc, #76]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8fa:	f7f5 fff3 	bl	80058e4 <assert_failed>
 800f8fe:	e660      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f900:	f240 214d 	movw	r1, #589	; 0x24d
 800f904:	4810      	ldr	r0, [pc, #64]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f906:	f7f5 ffed 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f90a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f90c:	1e59      	subs	r1, r3, #1
 800f90e:	e62f      	b.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f910:	f240 214b 	movw	r1, #587	; 0x24b
 800f914:	480c      	ldr	r0, [pc, #48]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f916:	f7f5 ffe5 	bl	80058e4 <assert_failed>
 800f91a:	e624      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f91c:	480a      	ldr	r0, [pc, #40]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f91e:	f44f 711c 	mov.w	r1, #624	; 0x270
 800f922:	f7f5 ffdf 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f926:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f928:	e650      	b.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f92a:	4807      	ldr	r0, [pc, #28]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f92c:	f44f 7118 	mov.w	r1, #608	; 0x260
 800f930:	f7f5 ffd8 	bl	80058e4 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f934:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	e7ca      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f93a:	21b7      	movs	r1, #183	; 0xb7
 800f93c:	4802      	ldr	r0, [pc, #8]	; (800f948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f93e:	f7f5 ffd1 	bl	80058e4 <assert_failed>
 800f942:	f7ff bbc2 	b.w	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f946:	bf00      	nop
 800f948:	0802e520 	.word	0x0802e520
 800f94c:	40023800 	.word	0x40023800
 800f950:	0ffffcff 	.word	0x0ffffcff

0800f954 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f954:	b308      	cbz	r0, 800f99a <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f956:	4b12      	ldr	r3, [pc, #72]	; (800f9a0 <HAL_RNG_Init+0x4c>)
 800f958:	6802      	ldr	r2, [r0, #0]
 800f95a:	429a      	cmp	r2, r3
{
 800f95c:	b510      	push	{r4, lr}
 800f95e:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f960:	d003      	beq.n	800f96a <HAL_RNG_Init+0x16>
 800f962:	21a3      	movs	r1, #163	; 0xa3
 800f964:	480f      	ldr	r0, [pc, #60]	; (800f9a4 <HAL_RNG_Init+0x50>)
 800f966:	f7f5 ffbd 	bl	80058e4 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f96a:	7963      	ldrb	r3, [r4, #5]
 800f96c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f970:	b173      	cbz	r3, 800f990 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f972:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f974:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f976:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800f978:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800f97c:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800f97e:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800f980:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800f982:	f043 0304 	orr.w	r3, r3, #4
 800f986:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800f988:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f98c:	60a2      	str	r2, [r4, #8]
}
 800f98e:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800f990:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800f992:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800f994:	f7f7 fed6 	bl	8007744 <HAL_RNG_MspInit>
 800f998:	e7eb      	b.n	800f972 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800f99a:	2001      	movs	r0, #1
}
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	50060800 	.word	0x50060800
 800f9a4:	0802e55c 	.word	0x0802e55c

0800f9a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	4615      	mov	r5, r2
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f9b2:	4425      	add	r5, r4
 800f9b4:	f7f9 fcda 	bl	800936c <HAL_GetTick>
 800f9b8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800f9ba:	f7f9 fcd7 	bl	800936c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f9be:	4b25      	ldr	r3, [pc, #148]	; (800fa54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800f9c0:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800f9c8:	fb05 f303 	mul.w	r3, r5, r3
 800f9cc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9ce:	6832      	ldr	r2, [r6, #0]
 800f9d0:	e001      	b.n	800f9d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f9d2:	1c63      	adds	r3, r4, #1
 800f9d4:	d106      	bne.n	800f9e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9d6:	6893      	ldr	r3, [r2, #8]
 800f9d8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800f9dc:	d1f9      	bne.n	800f9d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800f9de:	4618      	mov	r0, r3
}
 800f9e0:	b003      	add	sp, #12
 800f9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f9e4:	f7f9 fcc2 	bl	800936c <HAL_GetTick>
 800f9e8:	1bc0      	subs	r0, r0, r7
 800f9ea:	42a8      	cmp	r0, r5
 800f9ec:	d208      	bcs.n	800fa00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800f9ee:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800f9f0:	2b00      	cmp	r3, #0
      count--;
 800f9f2:	9b01      	ldr	r3, [sp, #4]
 800f9f4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800f9f8:	bf08      	it	eq
 800f9fa:	2500      	moveq	r5, #0
      count--;
 800f9fc:	9301      	str	r3, [sp, #4]
 800f9fe:	e7e6      	b.n	800f9ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa00:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa04:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa06:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa0e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa10:	d014      	beq.n	800fa3c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa12:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800fa14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fa18:	d007      	beq.n	800fa2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800fa1a:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800fa1c:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800fa1e:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800fa20:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800fa24:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800fa28:	e7da      	b.n	800f9e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	e7ee      	b.n	800fa1a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa3c:	68b2      	ldr	r2, [r6, #8]
 800fa3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fa42:	d002      	beq.n	800fa4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800fa44:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fa48:	d1e3      	bne.n	800fa12 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	e7de      	b.n	800fa12 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800fa54:	200002b8 	.word	0x200002b8

0800fa58 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa5c:	4615      	mov	r5, r2
 800fa5e:	4698      	mov	r8, r3
 800fa60:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fa62:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa64:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa66:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800fa68:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa6c:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa6e:	f7f9 fc7d 	bl	800936c <HAL_GetTick>
 800fa72:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800fa76:	f7f9 fc79 	bl	800936c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa7a:	4b2e      	ldr	r3, [pc, #184]	; (800fb34 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fa7c:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800fa80:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa82:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800fa84:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fa8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800fa8e:	0d1b      	lsrs	r3, r3, #20
 800fa90:	fb07 f303 	mul.w	r3, r7, r3
 800fa94:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa96:	e00b      	b.n	800fab0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fa98:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800fa9c:	d106      	bne.n	800faac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fa9e:	f899 300c 	ldrb.w	r3, [r9, #12]
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800faa8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800faac:	1c6b      	adds	r3, r5, #1
 800faae:	d106      	bne.n	800fabe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800fab0:	6893      	ldr	r3, [r2, #8]
 800fab2:	4023      	ands	r3, r4
 800fab4:	d1f0      	bne.n	800fa98 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800fab6:	4618      	mov	r0, r3
}
 800fab8:	b003      	add	sp, #12
 800faba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fabe:	f7f9 fc55 	bl	800936c <HAL_GetTick>
 800fac2:	eba0 0008 	sub.w	r0, r0, r8
 800fac6:	42b8      	cmp	r0, r7
 800fac8:	d209      	bcs.n	800fade <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800faca:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800facc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800face:	2b00      	cmp	r3, #0
      count--;
 800fad0:	9b01      	ldr	r3, [sp, #4]
 800fad2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800fad6:	bf08      	it	eq
 800fad8:	2700      	moveq	r7, #0
      count--;
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	e7e8      	b.n	800fab0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fade:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fae2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fae4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800faec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800faee:	d014      	beq.n	800fb1a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800faf0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800faf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800faf6:	d007      	beq.n	800fb08 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800faf8:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800fafa:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800fafc:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800fafe:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800fb02:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800fb06:	e7d7      	b.n	800fab8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fb0e:	601a      	str	r2, [r3, #0]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	e7ee      	b.n	800faf8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb1a:	68b2      	ldr	r2, [r6, #8]
 800fb1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fb20:	d002      	beq.n	800fb28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800fb22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fb26:	d1e3      	bne.n	800faf0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	e7de      	b.n	800faf0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800fb32:	bf00      	nop
 800fb34:	200002b8 	.word	0x200002b8

0800fb38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	460e      	mov	r6, r1
 800fb40:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb42:	9201      	str	r2, [sp, #4]
 800fb44:	460a      	mov	r2, r1
 800fb46:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fb4a:	f7ff ff85 	bl	800fa58 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fb4e:	9b01      	ldr	r3, [sp, #4]
 800fb50:	bb58      	cbnz	r0, 800fbaa <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb52:	4919      	ldr	r1, [pc, #100]	; (800fbb8 <SPI_EndRxTxTransaction+0x80>)
 800fb54:	4a19      	ldr	r2, [pc, #100]	; (800fbbc <SPI_EndRxTxTransaction+0x84>)
 800fb56:	6808      	ldr	r0, [r1, #0]
 800fb58:	fba2 2000 	umull	r2, r0, r2, r0
 800fb5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb60:	0d40      	lsrs	r0, r0, #21
 800fb62:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb66:	686a      	ldr	r2, [r5, #4]
 800fb68:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb6c:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb6e:	d107      	bne.n	800fb80 <SPI_EndRxTxTransaction+0x48>
 800fb70:	e012      	b.n	800fb98 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800fb72:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb74:	682a      	ldr	r2, [r5, #0]
      count--;
 800fb76:	3c01      	subs	r4, #1
 800fb78:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb7a:	6894      	ldr	r4, [r2, #8]
 800fb7c:	0622      	lsls	r2, r4, #24
 800fb7e:	d502      	bpl.n	800fb86 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800fb80:	9c03      	ldr	r4, [sp, #12]
 800fb82:	2c00      	cmp	r4, #0
 800fb84:	d1f5      	bne.n	800fb72 <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb86:	4632      	mov	r2, r6
 800fb88:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	f7ff ff63 	bl	800fa58 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fb92:	b950      	cbnz	r0, 800fbaa <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800fb94:	b004      	add	sp, #16
 800fb96:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	f7ff ff02 	bl	800f9a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d0ed      	beq.n	800fb86 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbaa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800fbac:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbae:	f043 0320 	orr.w	r3, r3, #32
 800fbb2:	662b      	str	r3, [r5, #96]	; 0x60
}
 800fbb4:	b004      	add	sp, #16
 800fbb6:	bd70      	pop	{r4, r5, r6, pc}
 800fbb8:	200002b8 	.word	0x200002b8
 800fbbc:	165e9f81 	.word	0x165e9f81

0800fbc0 <HAL_SPI_Init>:
  if (hspi == NULL)
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	f000 8128 	beq.w	800fe16 <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fbc6:	6802      	ldr	r2, [r0, #0]
 800fbc8:	4ba7      	ldr	r3, [pc, #668]	; (800fe68 <HAL_SPI_Init+0x2a8>)
 800fbca:	49a8      	ldr	r1, [pc, #672]	; (800fe6c <HAL_SPI_Init+0x2ac>)
{
 800fbcc:	b570      	push	{r4, r5, r6, lr}
 800fbce:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fbd0:	48a7      	ldr	r0, [pc, #668]	; (800fe70 <HAL_SPI_Init+0x2b0>)
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	bf18      	it	ne
 800fbd6:	4282      	cmpne	r2, r0
 800fbd8:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800fbdc:	bf14      	ite	ne
 800fbde:	2301      	movne	r3, #1
 800fbe0:	2300      	moveq	r3, #0
 800fbe2:	428a      	cmp	r2, r1
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2300      	moveq	r3, #0
 800fbe8:	f003 0301 	andne.w	r3, r3, #1
 800fbec:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800fbf0:	4282      	cmp	r2, r0
 800fbf2:	bf0c      	ite	eq
 800fbf4:	2300      	moveq	r3, #0
 800fbf6:	f003 0301 	andne.w	r3, r3, #1
 800fbfa:	428a      	cmp	r2, r1
 800fbfc:	bf0c      	ite	eq
 800fbfe:	2300      	moveq	r3, #0
 800fc00:	f003 0301 	andne.w	r3, r3, #1
 800fc04:	b11b      	cbz	r3, 800fc0e <HAL_SPI_Init+0x4e>
 800fc06:	4b9b      	ldr	r3, [pc, #620]	; (800fe74 <HAL_SPI_Init+0x2b4>)
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	f040 80fe 	bne.w	800fe0a <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fc0e:	6863      	ldr	r3, [r4, #4]
 800fc10:	b11b      	cbz	r3, 800fc1a <HAL_SPI_Init+0x5a>
 800fc12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc16:	f040 80cd 	bne.w	800fdb4 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fc1a:	68a3      	ldr	r3, [r4, #8]
 800fc1c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800fc20:	d003      	beq.n	800fc2a <HAL_SPI_Init+0x6a>
 800fc22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc26:	f040 80db 	bne.w	800fde0 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fc2a:	68e2      	ldr	r2, [r4, #12]
 800fc2c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800fc30:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800fc34:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800fc38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fc3c:	bf18      	it	ne
 800fc3e:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800fc42:	bf14      	ite	ne
 800fc44:	2301      	movne	r3, #1
 800fc46:	2300      	moveq	r3, #0
 800fc48:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800fc4c:	bf0c      	ite	eq
 800fc4e:	2300      	moveq	r3, #0
 800fc50:	f003 0301 	andne.w	r3, r3, #1
 800fc54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fc58:	bf0c      	ite	eq
 800fc5a:	2300      	moveq	r3, #0
 800fc5c:	f003 0301 	andne.w	r3, r3, #1
 800fc60:	b12b      	cbz	r3, 800fc6e <HAL_SPI_Init+0xae>
 800fc62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc66:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fc6a:	f040 80f7 	bne.w	800fe5c <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fc6e:	69a3      	ldr	r3, [r4, #24]
 800fc70:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800fc74:	d003      	beq.n	800fc7e <HAL_SPI_Init+0xbe>
 800fc76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fc7a:	f040 80a1 	bne.w	800fdc0 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fc7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc80:	f033 0308 	bics.w	r3, r3, #8
 800fc84:	f040 80a6 	bne.w	800fdd4 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fc88:	69e3      	ldr	r3, [r4, #28]
 800fc8a:	f023 0318 	bic.w	r3, r3, #24
 800fc8e:	2b20      	cmp	r3, #32
 800fc90:	d002      	beq.n	800fc98 <HAL_SPI_Init+0xd8>
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f040 80d6 	bne.w	800fe44 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fc98:	6a23      	ldr	r3, [r4, #32]
 800fc9a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fc9e:	f040 80a8 	bne.w	800fdf2 <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fca4:	f033 0210 	bics.w	r2, r3, #16
 800fca8:	d17b      	bne.n	800fda2 <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d16e      	bne.n	800fd8c <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fcae:	6923      	ldr	r3, [r4, #16]
 800fcb0:	f033 0302 	bics.w	r3, r3, #2
 800fcb4:	f040 80c0 	bne.w	800fe38 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800fcb8:	6963      	ldr	r3, [r4, #20]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d904      	bls.n	800fcc8 <HAL_SPI_Init+0x108>
 800fcbe:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800fcc2:	486d      	ldr	r0, [pc, #436]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fcc4:	f7f5 fe0e 	bl	80058e4 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fcc8:	6863      	ldr	r3, [r4, #4]
 800fcca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcce:	f000 80a4 	beq.w	800fe1a <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fcd6:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcd8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fcdc:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f000 808b 	beq.w	800fdfe <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800fce8:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fcea:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fcec:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fcee:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800fcf2:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fcf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800fcf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fcfc:	bf8c      	ite	hi
 800fcfe:	f04f 0c00 	movhi.w	ip, #0
 800fd02:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800fd06:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fd08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd0c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800fd10:	d16c      	bne.n	800fdec <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fd14:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800fd18:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd1a:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd1e:	6923      	ldr	r3, [r4, #16]
 800fd20:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800fd24:	68a1      	ldr	r1, [r4, #8]
 800fd26:	f003 0302 	and.w	r3, r3, #2
 800fd2a:	69a6      	ldr	r6, [r4, #24]
 800fd2c:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800fd30:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd32:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd34:	431a      	orrs	r2, r3
 800fd36:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd38:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd44:	f003 0310 	and.w	r3, r3, #16
 800fd48:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd4a:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd4c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd50:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800fd54:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd58:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd5a:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd5e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd62:	430a      	orrs	r2, r1
 800fd64:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd66:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd68:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd6c:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd70:	430a      	orrs	r2, r1
 800fd72:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd74:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd76:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800fd78:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd7a:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fd7c:	69eb      	ldr	r3, [r5, #28]
 800fd7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd82:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd84:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fd86:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800fd8a:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fd8c:	69e3      	ldr	r3, [r4, #28]
 800fd8e:	f023 0318 	bic.w	r3, r3, #24
 800fd92:	2b20      	cmp	r3, #32
 800fd94:	d001      	beq.n	800fd9a <HAL_SPI_Init+0x1da>
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d15a      	bne.n	800fe50 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fd9a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fd9c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800fda0:	e799      	b.n	800fcd6 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fda2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800fda6:	4834      	ldr	r0, [pc, #208]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fda8:	f7f5 fd9c 	bl	80058e4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fdac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1ec      	bne.n	800fd8c <HAL_SPI_Init+0x1cc>
 800fdb2:	e77c      	b.n	800fcae <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fdb4:	f240 1147 	movw	r1, #327	; 0x147
 800fdb8:	482f      	ldr	r0, [pc, #188]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fdba:	f7f5 fd93 	bl	80058e4 <assert_failed>
 800fdbe:	e72c      	b.n	800fc1a <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fdc0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fdc4:	482c      	ldr	r0, [pc, #176]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fdc6:	f7f5 fd8d 	bl	80058e4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fdca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdcc:	f033 0308 	bics.w	r3, r3, #8
 800fdd0:	f43f af5a 	beq.w	800fc88 <HAL_SPI_Init+0xc8>
 800fdd4:	f240 114b 	movw	r1, #331	; 0x14b
 800fdd8:	4827      	ldr	r0, [pc, #156]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fdda:	f7f5 fd83 	bl	80058e4 <assert_failed>
 800fdde:	e753      	b.n	800fc88 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fde0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fde4:	4824      	ldr	r0, [pc, #144]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fde6:	f7f5 fd7d 	bl	80058e4 <assert_failed>
 800fdea:	e71e      	b.n	800fc2a <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdec:	2000      	movs	r0, #0
 800fdee:	62a0      	str	r0, [r4, #40]	; 0x28
 800fdf0:	e792      	b.n	800fd18 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fdf2:	f240 114d 	movw	r1, #333	; 0x14d
 800fdf6:	4820      	ldr	r0, [pc, #128]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fdf8:	f7f5 fd74 	bl	80058e4 <assert_failed>
 800fdfc:	e751      	b.n	800fca2 <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800fdfe:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800fe00:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800fe04:	f7f7 fcb4 	bl	8007770 <HAL_SPI_MspInit>
 800fe08:	e76e      	b.n	800fce8 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fe0a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800fe0e:	481a      	ldr	r0, [pc, #104]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe10:	f7f5 fd68 	bl	80058e4 <assert_failed>
 800fe14:	e6fb      	b.n	800fc0e <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800fe16:	2001      	movs	r0, #1
}
 800fe18:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe1a:	69e3      	ldr	r3, [r4, #28]
 800fe1c:	f023 0318 	bic.w	r3, r3, #24
 800fe20:	2b20      	cmp	r3, #32
 800fe22:	f43f af58 	beq.w	800fcd6 <HAL_SPI_Init+0x116>
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f43f af55 	beq.w	800fcd6 <HAL_SPI_Init+0x116>
 800fe2c:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800fe30:	4811      	ldr	r0, [pc, #68]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe32:	f7f5 fd57 	bl	80058e4 <assert_failed>
 800fe36:	e74e      	b.n	800fcd6 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fe38:	f240 1151 	movw	r1, #337	; 0x151
 800fe3c:	480e      	ldr	r0, [pc, #56]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe3e:	f7f5 fd51 	bl	80058e4 <assert_failed>
 800fe42:	e739      	b.n	800fcb8 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe44:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800fe48:	480b      	ldr	r0, [pc, #44]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe4a:	f7f5 fd4b 	bl	80058e4 <assert_failed>
 800fe4e:	e723      	b.n	800fc98 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe50:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fe54:	4808      	ldr	r0, [pc, #32]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe56:	f7f5 fd45 	bl	80058e4 <assert_failed>
 800fe5a:	e79e      	b.n	800fd9a <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fe5c:	f240 1149 	movw	r1, #329	; 0x149
 800fe60:	4805      	ldr	r0, [pc, #20]	; (800fe78 <HAL_SPI_Init+0x2b8>)
 800fe62:	f7f5 fd3f 	bl	80058e4 <assert_failed>
 800fe66:	e702      	b.n	800fc6e <HAL_SPI_Init+0xae>
 800fe68:	40013000 	.word	0x40013000
 800fe6c:	40003c00 	.word	0x40003c00
 800fe70:	40003800 	.word	0x40003800
 800fe74:	40015400 	.word	0x40015400
 800fe78:	0802e594 	.word	0x0802e594

0800fe7c <HAL_SPI_Transmit>:
{
 800fe7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe80:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe82:	6883      	ldr	r3, [r0, #8]
{
 800fe84:	b082      	sub	sp, #8
 800fe86:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe88:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800fe8c:	460f      	mov	r7, r1
 800fe8e:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe90:	d171      	bne.n	800ff76 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800fe92:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d076      	beq.n	800ff88 <HAL_SPI_Transmit+0x10c>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800fea0:	f7f9 fa64 	bl	800936c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800fea4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800fea8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800feaa:	2b01      	cmp	r3, #1
 800feac:	b2d8      	uxtb	r0, r3
 800feae:	d009      	beq.n	800fec4 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800feb0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800feb2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800feb4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800feb6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800feba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800febe:	b002      	add	sp, #8
 800fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fec4:	2f00      	cmp	r7, #0
 800fec6:	d0f4      	beq.n	800feb2 <HAL_SPI_Transmit+0x36>
 800fec8:	fab8 f388 	clz	r3, r8
 800fecc:	095b      	lsrs	r3, r3, #5
 800fece:	f1b8 0f00 	cmp.w	r8, #0
 800fed2:	d0ee      	beq.n	800feb2 <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fed4:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fed6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fed8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fedc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fee0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fee2:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800fee6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800feea:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800feec:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800fef0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800fefa:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fefc:	d07a      	beq.n	800fff4 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	0652      	lsls	r2, r2, #25
 800ff02:	d403      	bmi.n	800ff0c <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff0c:	68e2      	ldr	r2, [r4, #12]
 800ff0e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff12:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff14:	d93c      	bls.n	800ff90 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff16:	b112      	cbz	r2, 800ff1e <HAL_SPI_Transmit+0xa2>
 800ff18:	f1b8 0f01 	cmp.w	r8, #1
 800ff1c:	d107      	bne.n	800ff2e <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff1e:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ff22:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800ff24:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff26:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800ff28:	3a01      	subs	r2, #1
 800ff2a:	b292      	uxth	r2, r2
 800ff2c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff2e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ff30:	b292      	uxth	r2, r2
 800ff32:	b992      	cbnz	r2, 800ff5a <HAL_SPI_Transmit+0xde>
 800ff34:	e072      	b.n	801001c <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff38:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ff3c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800ff3e:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff42:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ff44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff48:	fa1f fc8c 	uxth.w	ip, ip
 800ff4c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d061      	beq.n	801001c <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	0797      	lsls	r7, r2, #30
 800ff5e:	d4ea      	bmi.n	800ff36 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff60:	f7f9 fa04 	bl	800936c <HAL_GetTick>
 800ff64:	1b80      	subs	r0, r0, r6
 800ff66:	42a8      	cmp	r0, r5
 800ff68:	d301      	bcc.n	800ff6e <HAL_SPI_Transmit+0xf2>
 800ff6a:	1c68      	adds	r0, r5, #1
 800ff6c:	d101      	bne.n	800ff72 <HAL_SPI_Transmit+0xf6>
 800ff6e:	2d00      	cmp	r5, #0
 800ff70:	d1ee      	bne.n	800ff50 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800ff72:	2003      	movs	r0, #3
 800ff74:	e79d      	b.n	800feb2 <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ff76:	f240 313d 	movw	r1, #829	; 0x33d
 800ff7a:	4838      	ldr	r0, [pc, #224]	; (801005c <HAL_SPI_Transmit+0x1e0>)
 800ff7c:	f7f5 fcb2 	bl	80058e4 <assert_failed>
  __HAL_LOCK(hspi);
 800ff80:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d188      	bne.n	800fe9a <HAL_SPI_Transmit+0x1e>
 800ff88:	2002      	movs	r0, #2
}
 800ff8a:	b002      	add	sp, #8
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff90:	b112      	cbz	r2, 800ff98 <HAL_SPI_Transmit+0x11c>
 800ff92:	f1b8 0f01 	cmp.w	r8, #1
 800ff96:	d10b      	bne.n	800ffb0 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800ff98:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ff9a:	b292      	uxth	r2, r2
 800ff9c:	2a01      	cmp	r2, #1
 800ff9e:	d953      	bls.n	8010048 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffa0:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ffa4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800ffa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffa8:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ffaa:	3b02      	subs	r3, #2
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ffb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	b983      	cbnz	r3, 800ffd8 <HAL_SPI_Transmit+0x15c>
 800ffb6:	e031      	b.n	801001c <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800ffb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d922      	bls.n	8010006 <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffc2:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ffc6:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ffc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffca:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ffcc:	3b02      	subs	r3, #2
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ffd2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ffd4:	b289      	uxth	r1, r1
 800ffd6:	b309      	cbz	r1, 801001c <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ffd8:	6822      	ldr	r2, [r4, #0]
 800ffda:	6893      	ldr	r3, [r2, #8]
 800ffdc:	0799      	lsls	r1, r3, #30
 800ffde:	d4eb      	bmi.n	800ffb8 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffe0:	f7f9 f9c4 	bl	800936c <HAL_GetTick>
 800ffe4:	1b80      	subs	r0, r0, r6
 800ffe6:	42a8      	cmp	r0, r5
 800ffe8:	d301      	bcc.n	800ffee <HAL_SPI_Transmit+0x172>
 800ffea:	1c6b      	adds	r3, r5, #1
 800ffec:	d1c1      	bne.n	800ff72 <HAL_SPI_Transmit+0xf6>
 800ffee:	2d00      	cmp	r5, #0
 800fff0:	d1ef      	bne.n	800ffd2 <HAL_SPI_Transmit+0x156>
 800fff2:	e7be      	b.n	800ff72 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	e77b      	b.n	800fefe <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 801000c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 801000e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8010010:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8010012:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8010014:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8010016:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8010018:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801001a:	e7da      	b.n	800ffd2 <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801001c:	4632      	mov	r2, r6
 801001e:	4629      	mov	r1, r5
 8010020:	4620      	mov	r0, r4
 8010022:	f7ff fd89 	bl	800fb38 <SPI_EndRxTxTransaction>
 8010026:	b108      	cbz	r0, 801002c <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010028:	2320      	movs	r3, #32
 801002a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801002c:	68a3      	ldr	r3, [r4, #8]
 801002e:	b933      	cbnz	r3, 801003e <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010030:	6822      	ldr	r2, [r4, #0]
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	68d3      	ldr	r3, [r2, #12]
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	6893      	ldr	r3, [r2, #8]
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801003e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8010040:	3800      	subs	r0, #0
 8010042:	bf18      	it	ne
 8010044:	2001      	movne	r0, #1
error:
 8010046:	e734      	b.n	800feb2 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010048:	783a      	ldrb	r2, [r7, #0]
 801004a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 801004c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 801004e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010050:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 8010052:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8010054:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8010056:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010058:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801005a:	e7a9      	b.n	800ffb0 <HAL_SPI_Transmit+0x134>
 801005c:	0802e594 	.word	0x0802e594

08010060 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010060:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010062:	4a12      	ldr	r2, [pc, #72]	; (80100ac <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8010068:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801006a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 801006c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801006e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8010070:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010072:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010076:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8010078:	680d      	ldr	r5, [r1, #0]
 801007a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801007c:	688d      	ldr	r5, [r1, #8]
 801007e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010082:	4d0b      	ldr	r5, [pc, #44]	; (80100b0 <TIM_OC5_SetConfig+0x50>)
 8010084:	42a8      	cmp	r0, r5
 8010086:	d00a      	beq.n	801009e <TIM_OC5_SetConfig+0x3e>
 8010088:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801008c:	42a8      	cmp	r0, r5
 801008e:	d006      	beq.n	801009e <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010090:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010092:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8010094:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8010096:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010098:	6203      	str	r3, [r0, #32]
}
 801009a:	bc30      	pop	{r4, r5}
 801009c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 801009e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80100a2:	694d      	ldr	r5, [r1, #20]
 80100a4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80100a8:	e7f2      	b.n	8010090 <TIM_OC5_SetConfig+0x30>
 80100aa:	bf00      	nop
 80100ac:	fffeff8f 	.word	0xfffeff8f
 80100b0:	40010000 	.word	0x40010000

080100b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100b4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100b6:	4a12      	ldr	r2, [pc, #72]	; (8010100 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80100bc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80100c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80100c2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80100c4:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100ca:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100cc:	680d      	ldr	r5, [r1, #0]
 80100ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100d2:	688d      	ldr	r5, [r1, #8]
 80100d4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100d8:	4d0a      	ldr	r5, [pc, #40]	; (8010104 <TIM_OC6_SetConfig+0x50>)
 80100da:	42a8      	cmp	r0, r5
 80100dc:	d00a      	beq.n	80100f4 <TIM_OC6_SetConfig+0x40>
 80100de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80100e2:	42a8      	cmp	r0, r5
 80100e4:	d006      	beq.n	80100f4 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80100e6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80100e8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80100ea:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80100ec:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100ee:	6203      	str	r3, [r0, #32]
}
 80100f0:	bc30      	pop	{r4, r5}
 80100f2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 80100f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80100f8:	694d      	ldr	r5, [r1, #20]
 80100fa:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80100fe:	e7f2      	b.n	80100e6 <TIM_OC6_SetConfig+0x32>
 8010100:	feff8fff 	.word	0xfeff8fff
 8010104:	40010000 	.word	0x40010000

08010108 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010108:	6a03      	ldr	r3, [r0, #32]
 801010a:	f023 0301 	bic.w	r3, r3, #1
{
 801010e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010112:	6203      	str	r3, [r0, #32]
{
 8010114:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8010116:	6a05      	ldr	r5, [r0, #32]
{
 8010118:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 801011a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801011e:	4b27      	ldr	r3, [pc, #156]	; (80101bc <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 8010120:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 8010124:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8010126:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010128:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 801012a:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 801012c:	688b      	ldr	r3, [r1, #8]
 801012e:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010130:	4b23      	ldr	r3, [pc, #140]	; (80101c0 <TIM_OC1_SetConfig+0xb8>)
 8010132:	4298      	cmp	r0, r3
 8010134:	d00b      	beq.n	801014e <TIM_OC1_SetConfig+0x46>
 8010136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801013a:	4298      	cmp	r0, r3
 801013c:	d007      	beq.n	801014e <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 801013e:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8010140:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010144:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8010146:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8010148:	6225      	str	r5, [r4, #32]
}
 801014a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801014e:	68f3      	ldr	r3, [r6, #12]
 8010150:	f033 0208 	bics.w	r2, r3, #8
 8010154:	d120      	bne.n	8010198 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 8010156:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 801015a:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801015c:	69b3      	ldr	r3, [r6, #24]
 801015e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 8010162:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010166:	d11e      	bne.n	80101a6 <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010168:	6973      	ldr	r3, [r6, #20]
 801016a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801016e:	d106      	bne.n	801017e <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010170:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 8010174:	69b1      	ldr	r1, [r6, #24]
 8010176:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 8010178:	ea42 0803 	orr.w	r8, r2, r3
 801017c:	e7df      	b.n	801013e <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801017e:	f641 316d 	movw	r1, #7021	; 0x1b6d
 8010182:	4810      	ldr	r0, [pc, #64]	; (80101c4 <TIM_OC1_SetConfig+0xbc>)
 8010184:	f7f5 fbae 	bl	80058e4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010188:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 801018c:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 801018e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 8010190:	430a      	orrs	r2, r1
 8010192:	ea42 0803 	orr.w	r8, r2, r3
 8010196:	e7d2      	b.n	801013e <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010198:	f641 315f 	movw	r1, #7007	; 0x1b5f
 801019c:	4809      	ldr	r0, [pc, #36]	; (80101c4 <TIM_OC1_SetConfig+0xbc>)
 801019e:	f7f5 fba1 	bl	80058e4 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 80101a2:	68f3      	ldr	r3, [r6, #12]
 80101a4:	e7d7      	b.n	8010156 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101a6:	f641 316c 	movw	r1, #7020	; 0x1b6c
 80101aa:	4806      	ldr	r0, [pc, #24]	; (80101c4 <TIM_OC1_SetConfig+0xbc>)
 80101ac:	f7f5 fb9a 	bl	80058e4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101b0:	6973      	ldr	r3, [r6, #20]
 80101b2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80101b6:	d0db      	beq.n	8010170 <TIM_OC1_SetConfig+0x68>
 80101b8:	e7e1      	b.n	801017e <TIM_OC1_SetConfig+0x76>
 80101ba:	bf00      	nop
 80101bc:	fffeff8c 	.word	0xfffeff8c
 80101c0:	40010000 	.word	0x40010000
 80101c4:	0802e5cc 	.word	0x0802e5cc

080101c8 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101c8:	6a03      	ldr	r3, [r0, #32]
 80101ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80101ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101d2:	6203      	str	r3, [r0, #32]
{
 80101d4:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 80101d6:	6a05      	ldr	r5, [r0, #32]
{
 80101d8:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80101da:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80101de:	4b29      	ldr	r3, [pc, #164]	; (8010284 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 80101e0:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 80101e4:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 80101e6:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80101e8:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 80101ea:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80101ec:	688b      	ldr	r3, [r1, #8]
 80101ee:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80101f2:	4b25      	ldr	r3, [pc, #148]	; (8010288 <TIM_OC3_SetConfig+0xc0>)
 80101f4:	4298      	cmp	r0, r3
 80101f6:	d00b      	beq.n	8010210 <TIM_OC3_SetConfig+0x48>
 80101f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101fc:	4298      	cmp	r0, r3
 80101fe:	d007      	beq.n	8010210 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 8010200:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8010202:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010206:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8010208:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 801020a:	6225      	str	r5, [r4, #32]
}
 801020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010210:	68f3      	ldr	r3, [r6, #12]
 8010212:	f033 0208 	bics.w	r2, r3, #8
 8010216:	d123      	bne.n	8010260 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 8010218:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801021c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010220:	69b3      	ldr	r3, [r6, #24]
 8010222:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 8010226:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801022a:	d120      	bne.n	801026e <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801022c:	6973      	ldr	r3, [r6, #20]
 801022e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010232:	d107      	bne.n	8010244 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010234:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010238:	69b1      	ldr	r1, [r6, #24]
 801023a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801023e:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 8010242:	e7dd      	b.n	8010200 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010244:	f641 4103 	movw	r1, #7171	; 0x1c03
 8010248:	4810      	ldr	r0, [pc, #64]	; (801028c <TIM_OC3_SetConfig+0xc4>)
 801024a:	f7f5 fb4b 	bl	80058e4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801024e:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010252:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010254:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010256:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801025a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 801025e:	e7cf      	b.n	8010200 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010260:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 8010264:	4809      	ldr	r0, [pc, #36]	; (801028c <TIM_OC3_SetConfig+0xc4>)
 8010266:	f7f5 fb3d 	bl	80058e4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801026a:	68f3      	ldr	r3, [r6, #12]
 801026c:	e7d4      	b.n	8010218 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801026e:	f641 4102 	movw	r1, #7170	; 0x1c02
 8010272:	4806      	ldr	r0, [pc, #24]	; (801028c <TIM_OC3_SetConfig+0xc4>)
 8010274:	f7f5 fb36 	bl	80058e4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010278:	6973      	ldr	r3, [r6, #20]
 801027a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801027e:	d0d9      	beq.n	8010234 <TIM_OC3_SetConfig+0x6c>
 8010280:	e7e0      	b.n	8010244 <TIM_OC3_SetConfig+0x7c>
 8010282:	bf00      	nop
 8010284:	fffeff8c 	.word	0xfffeff8c
 8010288:	40010000 	.word	0x40010000
 801028c:	0802e5cc 	.word	0x0802e5cc

08010290 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010290:	6a03      	ldr	r3, [r0, #32]
 8010292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8010296:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010298:	6203      	str	r3, [r0, #32]
{
 801029a:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 801029c:	6a06      	ldr	r6, [r0, #32]
{
 801029e:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 80102a0:	6842      	ldr	r2, [r0, #4]
{
 80102a2:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 80102a4:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80102a6:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102aa:	4b16      	ldr	r3, [pc, #88]	; (8010304 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102ac:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102ae:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102b0:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80102b4:	68ab      	ldr	r3, [r5, #8]
 80102b6:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102ba:	4b13      	ldr	r3, [pc, #76]	; (8010308 <TIM_OC4_SetConfig+0x78>)
 80102bc:	4298      	cmp	r0, r3
 80102be:	d00a      	beq.n	80102d6 <TIM_OC4_SetConfig+0x46>
 80102c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80102c4:	4298      	cmp	r0, r3
 80102c6:	d006      	beq.n	80102d6 <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 80102c8:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80102ca:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80102cc:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80102ce:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80102d0:	6226      	str	r6, [r4, #32]
}
 80102d2:	b003      	add	sp, #12
 80102d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80102d6:	696b      	ldr	r3, [r5, #20]
 80102d8:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 80102dc:	d104      	bne.n	80102e8 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80102de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102e2:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 80102e6:	e7ef      	b.n	80102c8 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80102e8:	f641 4141 	movw	r1, #7233	; 0x1c41
 80102ec:	4807      	ldr	r0, [pc, #28]	; (801030c <TIM_OC4_SetConfig+0x7c>)
 80102ee:	9201      	str	r2, [sp, #4]
 80102f0:	f7f5 faf8 	bl	80058e4 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102f4:	9a01      	ldr	r2, [sp, #4]
 80102f6:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80102f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102fc:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8010300:	e7e2      	b.n	80102c8 <TIM_OC4_SetConfig+0x38>
 8010302:	bf00      	nop
 8010304:	feff8cff 	.word	0xfeff8cff
 8010308:	40010000 	.word	0x40010000
 801030c:	0802e5cc 	.word	0x0802e5cc

08010310 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010310:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010312:	684a      	ldr	r2, [r1, #4]
{
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 8010318:	6899      	ldr	r1, [r3, #8]
{
 801031a:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801031c:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 801031e:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010322:	4980      	ldr	r1, [pc, #512]	; (8010524 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010324:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010326:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 801032a:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801032e:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8010332:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8010334:	f000 8104 	beq.w	8010540 <TIM_SlaveTimer_SetConfig+0x230>
 8010338:	d953      	bls.n	80103e2 <TIM_SlaveTimer_SetConfig+0xd2>
 801033a:	2a60      	cmp	r2, #96	; 0x60
 801033c:	f000 816b 	beq.w	8010616 <TIM_SlaveTimer_SetConfig+0x306>
 8010340:	2a70      	cmp	r2, #112	; 0x70
 8010342:	d151      	bne.n	80103e8 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010344:	4a78      	ldr	r2, [pc, #480]	; (8010528 <TIM_SlaveTimer_SetConfig+0x218>)
 8010346:	4979      	ldr	r1, [pc, #484]	; (801052c <TIM_SlaveTimer_SetConfig+0x21c>)
 8010348:	4293      	cmp	r3, r2
 801034a:	bf18      	it	ne
 801034c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010350:	bf14      	ite	ne
 8010352:	2201      	movne	r2, #1
 8010354:	2200      	moveq	r2, #0
 8010356:	428b      	cmp	r3, r1
 8010358:	bf0c      	ite	eq
 801035a:	2200      	moveq	r2, #0
 801035c:	f002 0201 	andne.w	r2, r2, #1
 8010360:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010364:	428b      	cmp	r3, r1
 8010366:	bf0c      	ite	eq
 8010368:	2200      	moveq	r2, #0
 801036a:	f002 0201 	andne.w	r2, r2, #1
 801036e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010372:	428b      	cmp	r3, r1
 8010374:	bf0c      	ite	eq
 8010376:	2200      	moveq	r2, #0
 8010378:	f002 0201 	andne.w	r2, r2, #1
 801037c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010380:	428b      	cmp	r3, r1
 8010382:	bf0c      	ite	eq
 8010384:	2200      	moveq	r2, #0
 8010386:	f002 0201 	andne.w	r2, r2, #1
 801038a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801038e:	428b      	cmp	r3, r1
 8010390:	bf0c      	ite	eq
 8010392:	2200      	moveq	r2, #0
 8010394:	f002 0201 	andne.w	r2, r2, #1
 8010398:	b11a      	cbz	r2, 80103a2 <TIM_SlaveTimer_SetConfig+0x92>
 801039a:	4a65      	ldr	r2, [pc, #404]	; (8010530 <TIM_SlaveTimer_SetConfig+0x220>)
 801039c:	4293      	cmp	r3, r2
 801039e:	f040 81bb 	bne.w	8010718 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80103a2:	68e3      	ldr	r3, [r4, #12]
 80103a4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80103a8:	f040 819e 	bne.w	80106e8 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80103ac:	68a3      	ldr	r3, [r4, #8]
 80103ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103b2:	bf18      	it	ne
 80103b4:	2b0a      	cmpne	r3, #10
 80103b6:	d003      	beq.n	80103c0 <TIM_SlaveTimer_SetConfig+0xb0>
 80103b8:	f033 0302 	bics.w	r3, r3, #2
 80103bc:	f040 81a6 	bne.w	801070c <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80103c0:	6921      	ldr	r1, [r4, #16]
 80103c2:	290f      	cmp	r1, #15
 80103c4:	f200 8175 	bhi.w	80106b2 <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80103c8:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103ca:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 80103ce:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103d0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80103d2:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103d4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80103d8:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103de:	60ab      	str	r3, [r5, #8]
}
 80103e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80103e2:	2a40      	cmp	r2, #64	; 0x40
 80103e4:	d03a      	beq.n	801045c <TIM_SlaveTimer_SetConfig+0x14c>
 80103e6:	d901      	bls.n	80103ec <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 80103e8:	2001      	movs	r0, #1
}
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80103ec:	2a20      	cmp	r2, #32
 80103ee:	d002      	beq.n	80103f6 <TIM_SlaveTimer_SetConfig+0xe6>
 80103f0:	d930      	bls.n	8010454 <TIM_SlaveTimer_SetConfig+0x144>
 80103f2:	2a30      	cmp	r2, #48	; 0x30
 80103f4:	d1f8      	bne.n	80103e8 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80103f6:	4a4c      	ldr	r2, [pc, #304]	; (8010528 <TIM_SlaveTimer_SetConfig+0x218>)
 80103f8:	484c      	ldr	r0, [pc, #304]	; (801052c <TIM_SlaveTimer_SetConfig+0x21c>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	bf18      	it	ne
 80103fe:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010402:	494c      	ldr	r1, [pc, #304]	; (8010534 <TIM_SlaveTimer_SetConfig+0x224>)
 8010404:	4c4c      	ldr	r4, [pc, #304]	; (8010538 <TIM_SlaveTimer_SetConfig+0x228>)
 8010406:	bf14      	ite	ne
 8010408:	2201      	movne	r2, #1
 801040a:	2200      	moveq	r2, #0
 801040c:	4283      	cmp	r3, r0
 801040e:	bf0c      	ite	eq
 8010410:	2200      	moveq	r2, #0
 8010412:	f002 0201 	andne.w	r2, r2, #1
 8010416:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 801041a:	428b      	cmp	r3, r1
 801041c:	bf0c      	ite	eq
 801041e:	2200      	moveq	r2, #0
 8010420:	f002 0201 	andne.w	r2, r2, #1
 8010424:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8010428:	42a3      	cmp	r3, r4
 801042a:	bf0c      	ite	eq
 801042c:	2200      	moveq	r2, #0
 801042e:	f002 0201 	andne.w	r2, r2, #1
 8010432:	4283      	cmp	r3, r0
 8010434:	bf0c      	ite	eq
 8010436:	2200      	moveq	r2, #0
 8010438:	f002 0201 	andne.w	r2, r2, #1
 801043c:	428b      	cmp	r3, r1
 801043e:	bf0c      	ite	eq
 8010440:	2200      	moveq	r2, #0
 8010442:	f002 0201 	andne.w	r2, r2, #1
 8010446:	b11a      	cbz	r2, 8010450 <TIM_SlaveTimer_SetConfig+0x140>
 8010448:	4a39      	ldr	r2, [pc, #228]	; (8010530 <TIM_SlaveTimer_SetConfig+0x220>)
 801044a:	4293      	cmp	r3, r2
 801044c:	f040 816a 	bne.w	8010724 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 8010450:	2000      	movs	r0, #0
}
 8010452:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8010454:	f032 0210 	bics.w	r2, r2, #16
 8010458:	d1c6      	bne.n	80103e8 <TIM_SlaveTimer_SetConfig+0xd8>
 801045a:	e7cc      	b.n	80103f6 <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801045c:	4a32      	ldr	r2, [pc, #200]	; (8010528 <TIM_SlaveTimer_SetConfig+0x218>)
 801045e:	4933      	ldr	r1, [pc, #204]	; (801052c <TIM_SlaveTimer_SetConfig+0x21c>)
 8010460:	4293      	cmp	r3, r2
 8010462:	bf18      	it	ne
 8010464:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010468:	bf14      	ite	ne
 801046a:	2201      	movne	r2, #1
 801046c:	2200      	moveq	r2, #0
 801046e:	428b      	cmp	r3, r1
 8010470:	bf0c      	ite	eq
 8010472:	2200      	moveq	r2, #0
 8010474:	f002 0201 	andne.w	r2, r2, #1
 8010478:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801047c:	428b      	cmp	r3, r1
 801047e:	bf0c      	ite	eq
 8010480:	2200      	moveq	r2, #0
 8010482:	f002 0201 	andne.w	r2, r2, #1
 8010486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801048a:	428b      	cmp	r3, r1
 801048c:	bf0c      	ite	eq
 801048e:	2200      	moveq	r2, #0
 8010490:	f002 0201 	andne.w	r2, r2, #1
 8010494:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010498:	428b      	cmp	r3, r1
 801049a:	bf0c      	ite	eq
 801049c:	2200      	moveq	r2, #0
 801049e:	f002 0201 	andne.w	r2, r2, #1
 80104a2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80104a6:	428b      	cmp	r3, r1
 80104a8:	bf0c      	ite	eq
 80104aa:	2200      	moveq	r2, #0
 80104ac:	f002 0201 	andne.w	r2, r2, #1
 80104b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104b4:	428b      	cmp	r3, r1
 80104b6:	bf0c      	ite	eq
 80104b8:	2200      	moveq	r2, #0
 80104ba:	f002 0201 	andne.w	r2, r2, #1
 80104be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104c2:	428b      	cmp	r3, r1
 80104c4:	bf0c      	ite	eq
 80104c6:	2200      	moveq	r2, #0
 80104c8:	f002 0201 	andne.w	r2, r2, #1
 80104cc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80104d0:	428b      	cmp	r3, r1
 80104d2:	bf0c      	ite	eq
 80104d4:	2200      	moveq	r2, #0
 80104d6:	f002 0201 	andne.w	r2, r2, #1
 80104da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104de:	428b      	cmp	r3, r1
 80104e0:	bf0c      	ite	eq
 80104e2:	2200      	moveq	r2, #0
 80104e4:	f002 0201 	andne.w	r2, r2, #1
 80104e8:	b11a      	cbz	r2, 80104f2 <TIM_SlaveTimer_SetConfig+0x1e2>
 80104ea:	4a14      	ldr	r2, [pc, #80]	; (801053c <TIM_SlaveTimer_SetConfig+0x22c>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	f040 8126 	bne.w	801073e <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80104f2:	6923      	ldr	r3, [r4, #16]
 80104f4:	2b0f      	cmp	r3, #15
 80104f6:	f200 80ea 	bhi.w	80106ce <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	2b05      	cmp	r3, #5
 80104fe:	f43f af73 	beq.w	80103e8 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 8010502:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010504:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010506:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 8010508:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801050a:	6a19      	ldr	r1, [r3, #32]
 801050c:	f021 0101 	bic.w	r1, r1, #1
 8010510:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010512:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010514:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010518:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 801051c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801051e:	621c      	str	r4, [r3, #32]
}
 8010520:	bd70      	pop	{r4, r5, r6, pc}
 8010522:	bf00      	nop
 8010524:	fffefff8 	.word	0xfffefff8
 8010528:	40010000 	.word	0x40010000
 801052c:	40000400 	.word	0x40000400
 8010530:	40001800 	.word	0x40001800
 8010534:	40000800 	.word	0x40000800
 8010538:	40000c00 	.word	0x40000c00
 801053c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010540:	4a85      	ldr	r2, [pc, #532]	; (8010758 <TIM_SlaveTimer_SetConfig+0x448>)
 8010542:	4986      	ldr	r1, [pc, #536]	; (801075c <TIM_SlaveTimer_SetConfig+0x44c>)
 8010544:	4293      	cmp	r3, r2
 8010546:	bf18      	it	ne
 8010548:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801054c:	bf14      	ite	ne
 801054e:	2201      	movne	r2, #1
 8010550:	2200      	moveq	r2, #0
 8010552:	428b      	cmp	r3, r1
 8010554:	bf0c      	ite	eq
 8010556:	2200      	moveq	r2, #0
 8010558:	f002 0201 	andne.w	r2, r2, #1
 801055c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010560:	428b      	cmp	r3, r1
 8010562:	bf0c      	ite	eq
 8010564:	2200      	moveq	r2, #0
 8010566:	f002 0201 	andne.w	r2, r2, #1
 801056a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801056e:	428b      	cmp	r3, r1
 8010570:	bf0c      	ite	eq
 8010572:	2200      	moveq	r2, #0
 8010574:	f002 0201 	andne.w	r2, r2, #1
 8010578:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801057c:	428b      	cmp	r3, r1
 801057e:	bf0c      	ite	eq
 8010580:	2200      	moveq	r2, #0
 8010582:	f002 0201 	andne.w	r2, r2, #1
 8010586:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801058a:	428b      	cmp	r3, r1
 801058c:	bf0c      	ite	eq
 801058e:	2200      	moveq	r2, #0
 8010590:	f002 0201 	andne.w	r2, r2, #1
 8010594:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010598:	428b      	cmp	r3, r1
 801059a:	bf0c      	ite	eq
 801059c:	2200      	moveq	r2, #0
 801059e:	f002 0201 	andne.w	r2, r2, #1
 80105a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105a6:	428b      	cmp	r3, r1
 80105a8:	bf0c      	ite	eq
 80105aa:	2200      	moveq	r2, #0
 80105ac:	f002 0201 	andne.w	r2, r2, #1
 80105b0:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80105b4:	428b      	cmp	r3, r1
 80105b6:	bf0c      	ite	eq
 80105b8:	2200      	moveq	r2, #0
 80105ba:	f002 0201 	andne.w	r2, r2, #1
 80105be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105c2:	428b      	cmp	r3, r1
 80105c4:	bf0c      	ite	eq
 80105c6:	2200      	moveq	r2, #0
 80105c8:	f002 0201 	andne.w	r2, r2, #1
 80105cc:	b11a      	cbz	r2, 80105d6 <TIM_SlaveTimer_SetConfig+0x2c6>
 80105ce:	4a64      	ldr	r2, [pc, #400]	; (8010760 <TIM_SlaveTimer_SetConfig+0x450>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	f040 80ba 	bne.w	801074a <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80105d6:	68a3      	ldr	r3, [r4, #8]
 80105d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105dc:	bf18      	it	ne
 80105de:	2b0a      	cmpne	r3, #10
 80105e0:	d003      	beq.n	80105ea <TIM_SlaveTimer_SetConfig+0x2da>
 80105e2:	f033 0302 	bics.w	r3, r3, #2
 80105e6:	f040 808b 	bne.w	8010700 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80105ea:	6926      	ldr	r6, [r4, #16]
 80105ec:	2e0f      	cmp	r6, #15
 80105ee:	d874      	bhi.n	80106da <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80105f0:	682b      	ldr	r3, [r5, #0]
 80105f2:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 80105f4:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105f6:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80105f8:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105fc:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8010600:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010602:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010604:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010606:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010608:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801060c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010612:	6219      	str	r1, [r3, #32]
}
 8010614:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010616:	4a50      	ldr	r2, [pc, #320]	; (8010758 <TIM_SlaveTimer_SetConfig+0x448>)
 8010618:	4950      	ldr	r1, [pc, #320]	; (801075c <TIM_SlaveTimer_SetConfig+0x44c>)
 801061a:	4293      	cmp	r3, r2
 801061c:	bf18      	it	ne
 801061e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010622:	bf14      	ite	ne
 8010624:	2201      	movne	r2, #1
 8010626:	2200      	moveq	r2, #0
 8010628:	428b      	cmp	r3, r1
 801062a:	bf0c      	ite	eq
 801062c:	2200      	moveq	r2, #0
 801062e:	f002 0201 	andne.w	r2, r2, #1
 8010632:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010636:	428b      	cmp	r3, r1
 8010638:	bf0c      	ite	eq
 801063a:	2200      	moveq	r2, #0
 801063c:	f002 0201 	andne.w	r2, r2, #1
 8010640:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010644:	428b      	cmp	r3, r1
 8010646:	bf0c      	ite	eq
 8010648:	2200      	moveq	r2, #0
 801064a:	f002 0201 	andne.w	r2, r2, #1
 801064e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010652:	428b      	cmp	r3, r1
 8010654:	bf0c      	ite	eq
 8010656:	2200      	moveq	r2, #0
 8010658:	f002 0201 	andne.w	r2, r2, #1
 801065c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010660:	428b      	cmp	r3, r1
 8010662:	bf0c      	ite	eq
 8010664:	2200      	moveq	r2, #0
 8010666:	f002 0201 	andne.w	r2, r2, #1
 801066a:	b112      	cbz	r2, 8010672 <TIM_SlaveTimer_SetConfig+0x362>
 801066c:	4a3d      	ldr	r2, [pc, #244]	; (8010764 <TIM_SlaveTimer_SetConfig+0x454>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d15f      	bne.n	8010732 <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010678:	bf18      	it	ne
 801067a:	2b0a      	cmpne	r3, #10
 801067c:	d002      	beq.n	8010684 <TIM_SlaveTimer_SetConfig+0x374>
 801067e:	f033 0302 	bics.w	r3, r3, #2
 8010682:	d137      	bne.n	80106f4 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010684:	6926      	ldr	r6, [r4, #16]
 8010686:	2e0f      	cmp	r6, #15
 8010688:	d81a      	bhi.n	80106c0 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801068a:	682b      	ldr	r3, [r5, #0]
 801068c:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801068e:	6a18      	ldr	r0, [r3, #32]
 8010690:	f020 0010 	bic.w	r0, r0, #16
 8010694:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8010696:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010698:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 801069a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801069c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106a4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80106a8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80106ac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80106ae:	621a      	str	r2, [r3, #32]
}
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106b2:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 80106b6:	482c      	ldr	r0, [pc, #176]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106b8:	f7f5 f914 	bl	80058e4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80106bc:	6921      	ldr	r1, [r4, #16]
 80106be:	e683      	b.n	80103c8 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106c0:	f641 511f 	movw	r1, #7455	; 0x1d1f
 80106c4:	4828      	ldr	r0, [pc, #160]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106c6:	f7f5 f90d 	bl	80058e4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80106ca:	6926      	ldr	r6, [r4, #16]
 80106cc:	e7dd      	b.n	801068a <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106ce:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 80106d2:	4825      	ldr	r0, [pc, #148]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106d4:	f7f5 f906 	bl	80058e4 <assert_failed>
 80106d8:	e70f      	b.n	80104fa <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106da:	f641 5111 	movw	r1, #7441	; 0x1d11
 80106de:	4822      	ldr	r0, [pc, #136]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106e0:	f7f5 f900 	bl	80058e4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80106e4:	6926      	ldr	r6, [r4, #16]
 80106e6:	e783      	b.n	80105f0 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80106e8:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 80106ec:	481e      	ldr	r0, [pc, #120]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106ee:	f7f5 f8f9 	bl	80058e4 <assert_failed>
 80106f2:	e65b      	b.n	80103ac <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80106f4:	f641 511e 	movw	r1, #7454	; 0x1d1e
 80106f8:	481b      	ldr	r0, [pc, #108]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 80106fa:	f7f5 f8f3 	bl	80058e4 <assert_failed>
 80106fe:	e7c1      	b.n	8010684 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010700:	f641 5110 	movw	r1, #7440	; 0x1d10
 8010704:	4818      	ldr	r0, [pc, #96]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 8010706:	f7f5 f8ed 	bl	80058e4 <assert_failed>
 801070a:	e76e      	b.n	80105ea <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801070c:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 8010710:	4815      	ldr	r0, [pc, #84]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 8010712:	f7f5 f8e7 	bl	80058e4 <assert_failed>
 8010716:	e653      	b.n	80103c0 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010718:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 801071c:	4812      	ldr	r0, [pc, #72]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 801071e:	f7f5 f8e1 	bl	80058e4 <assert_failed>
 8010722:	e63e      	b.n	80103a2 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010724:	f641 512e 	movw	r1, #7470	; 0x1d2e
 8010728:	480f      	ldr	r0, [pc, #60]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 801072a:	f7f5 f8db 	bl	80058e4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 801072e:	2000      	movs	r0, #0
}
 8010730:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010732:	f641 511d 	movw	r1, #7453	; 0x1d1d
 8010736:	480c      	ldr	r0, [pc, #48]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 8010738:	f7f5 f8d4 	bl	80058e4 <assert_failed>
 801073c:	e799      	b.n	8010672 <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801073e:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 8010742:	4809      	ldr	r0, [pc, #36]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 8010744:	f7f5 f8ce 	bl	80058e4 <assert_failed>
 8010748:	e6d3      	b.n	80104f2 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801074a:	f641 510f 	movw	r1, #7439	; 0x1d0f
 801074e:	4806      	ldr	r0, [pc, #24]	; (8010768 <TIM_SlaveTimer_SetConfig+0x458>)
 8010750:	f7f5 f8c8 	bl	80058e4 <assert_failed>
 8010754:	e73f      	b.n	80105d6 <TIM_SlaveTimer_SetConfig+0x2c6>
 8010756:	bf00      	nop
 8010758:	40010000 	.word	0x40010000
 801075c:	40000400 	.word	0x40000400
 8010760:	40002000 	.word	0x40002000
 8010764:	40001800 	.word	0x40001800
 8010768:	0802e5cc 	.word	0x0802e5cc

0801076c <HAL_TIM_Base_Start>:
{
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010770:	4b52      	ldr	r3, [pc, #328]	; (80108bc <HAL_TIM_Base_Start+0x150>)
 8010772:	4d53      	ldr	r5, [pc, #332]	; (80108c0 <HAL_TIM_Base_Start+0x154>)
 8010774:	6822      	ldr	r2, [r4, #0]
 8010776:	4953      	ldr	r1, [pc, #332]	; (80108c4 <HAL_TIM_Base_Start+0x158>)
 8010778:	429a      	cmp	r2, r3
 801077a:	bf18      	it	ne
 801077c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010780:	4851      	ldr	r0, [pc, #324]	; (80108c8 <HAL_TIM_Base_Start+0x15c>)
 8010782:	bf14      	ite	ne
 8010784:	2301      	movne	r3, #1
 8010786:	2300      	moveq	r3, #0
 8010788:	42aa      	cmp	r2, r5
 801078a:	bf0c      	ite	eq
 801078c:	2300      	moveq	r3, #0
 801078e:	f003 0301 	andne.w	r3, r3, #1
 8010792:	428a      	cmp	r2, r1
 8010794:	bf0c      	ite	eq
 8010796:	2300      	moveq	r3, #0
 8010798:	f003 0301 	andne.w	r3, r3, #1
 801079c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107a0:	4282      	cmp	r2, r0
 80107a2:	bf0c      	ite	eq
 80107a4:	2300      	moveq	r3, #0
 80107a6:	f003 0301 	andne.w	r3, r3, #1
 80107aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80107ae:	428a      	cmp	r2, r1
 80107b0:	bf0c      	ite	eq
 80107b2:	2300      	moveq	r3, #0
 80107b4:	f003 0301 	andne.w	r3, r3, #1
 80107b8:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80107bc:	4282      	cmp	r2, r0
 80107be:	bf0c      	ite	eq
 80107c0:	2300      	moveq	r3, #0
 80107c2:	f003 0301 	andne.w	r3, r3, #1
 80107c6:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80107ca:	428a      	cmp	r2, r1
 80107cc:	bf0c      	ite	eq
 80107ce:	2300      	moveq	r3, #0
 80107d0:	f003 0301 	andne.w	r3, r3, #1
 80107d4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80107d8:	4282      	cmp	r2, r0
 80107da:	bf0c      	ite	eq
 80107dc:	2300      	moveq	r3, #0
 80107de:	f003 0301 	andne.w	r3, r3, #1
 80107e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80107e6:	428a      	cmp	r2, r1
 80107e8:	bf0c      	ite	eq
 80107ea:	2300      	moveq	r3, #0
 80107ec:	f003 0301 	andne.w	r3, r3, #1
 80107f0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80107f4:	4282      	cmp	r2, r0
 80107f6:	bf0c      	ite	eq
 80107f8:	2300      	moveq	r3, #0
 80107fa:	f003 0301 	andne.w	r3, r3, #1
 80107fe:	428a      	cmp	r2, r1
 8010800:	bf0c      	ite	eq
 8010802:	2300      	moveq	r3, #0
 8010804:	f003 0301 	andne.w	r3, r3, #1
 8010808:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801080c:	428a      	cmp	r2, r1
 801080e:	bf0c      	ite	eq
 8010810:	2300      	moveq	r3, #0
 8010812:	f003 0301 	andne.w	r3, r3, #1
 8010816:	b113      	cbz	r3, 801081e <HAL_TIM_Base_Start+0xb2>
 8010818:	4b2c      	ldr	r3, [pc, #176]	; (80108cc <HAL_TIM_Base_Start+0x160>)
 801081a:	429a      	cmp	r2, r3
 801081c:	d143      	bne.n	80108a6 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 801081e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010822:	2b01      	cmp	r3, #1
 8010824:	d13b      	bne.n	801089e <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010826:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010828:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801082a:	4b24      	ldr	r3, [pc, #144]	; (80108bc <HAL_TIM_Base_Start+0x150>)
 801082c:	4d24      	ldr	r5, [pc, #144]	; (80108c0 <HAL_TIM_Base_Start+0x154>)
 801082e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010832:	bf18      	it	ne
 8010834:	429a      	cmpne	r2, r3
 8010836:	4923      	ldr	r1, [pc, #140]	; (80108c4 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010838:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801083c:	bf0c      	ite	eq
 801083e:	2301      	moveq	r3, #1
 8010840:	2300      	movne	r3, #0
 8010842:	4c21      	ldr	r4, [pc, #132]	; (80108c8 <HAL_TIM_Base_Start+0x15c>)
 8010844:	42aa      	cmp	r2, r5
 8010846:	bf08      	it	eq
 8010848:	f043 0301 	orreq.w	r3, r3, #1
 801084c:	4820      	ldr	r0, [pc, #128]	; (80108d0 <HAL_TIM_Base_Start+0x164>)
 801084e:	428a      	cmp	r2, r1
 8010850:	bf08      	it	eq
 8010852:	f043 0301 	orreq.w	r3, r3, #1
 8010856:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 801085a:	42a2      	cmp	r2, r4
 801085c:	bf08      	it	eq
 801085e:	f043 0301 	orreq.w	r3, r3, #1
 8010862:	4282      	cmp	r2, r0
 8010864:	bf08      	it	eq
 8010866:	f043 0301 	orreq.w	r3, r3, #1
 801086a:	428a      	cmp	r2, r1
 801086c:	bf08      	it	eq
 801086e:	f043 0301 	orreq.w	r3, r3, #1
 8010872:	b933      	cbnz	r3, 8010882 <HAL_TIM_Base_Start+0x116>
 8010874:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010878:	1a10      	subs	r0, r2, r0
 801087a:	fab0 f080 	clz	r0, r0
 801087e:	0940      	lsrs	r0, r0, #5
 8010880:	b1b8      	cbz	r0, 80108b2 <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010882:	6891      	ldr	r1, [r2, #8]
 8010884:	4b13      	ldr	r3, [pc, #76]	; (80108d4 <HAL_TIM_Base_Start+0x168>)
 8010886:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010888:	2b06      	cmp	r3, #6
 801088a:	d00a      	beq.n	80108a2 <HAL_TIM_Base_Start+0x136>
 801088c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010890:	d007      	beq.n	80108a2 <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 8010892:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8010894:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8010896:	f043 0301 	orr.w	r3, r3, #1
 801089a:	6013      	str	r3, [r2, #0]
}
 801089c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801089e:	2001      	movs	r0, #1
}
 80108a0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80108a2:	2000      	movs	r0, #0
}
 80108a4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80108a6:	f240 1197 	movw	r1, #407	; 0x197
 80108aa:	480b      	ldr	r0, [pc, #44]	; (80108d8 <HAL_TIM_Base_Start+0x16c>)
 80108ac:	f7f5 f81a 	bl	80058e4 <assert_failed>
 80108b0:	e7b5      	b.n	801081e <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80108b2:	6813      	ldr	r3, [r2, #0]
 80108b4:	f043 0301 	orr.w	r3, r3, #1
 80108b8:	6013      	str	r3, [r2, #0]
}
 80108ba:	bd38      	pop	{r3, r4, r5, pc}
 80108bc:	40010000 	.word	0x40010000
 80108c0:	40000400 	.word	0x40000400
 80108c4:	40000800 	.word	0x40000800
 80108c8:	40000c00 	.word	0x40000c00
 80108cc:	40002000 	.word	0x40002000
 80108d0:	40010400 	.word	0x40010400
 80108d4:	00010007 	.word	0x00010007
 80108d8:	0802e5cc 	.word	0x0802e5cc

080108dc <HAL_TIM_Base_Start_IT>:
{
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80108e0:	4b54      	ldr	r3, [pc, #336]	; (8010a34 <HAL_TIM_Base_Start_IT+0x158>)
 80108e2:	4d55      	ldr	r5, [pc, #340]	; (8010a38 <HAL_TIM_Base_Start_IT+0x15c>)
 80108e4:	6822      	ldr	r2, [r4, #0]
 80108e6:	4955      	ldr	r1, [pc, #340]	; (8010a3c <HAL_TIM_Base_Start_IT+0x160>)
 80108e8:	429a      	cmp	r2, r3
 80108ea:	bf18      	it	ne
 80108ec:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80108f0:	4853      	ldr	r0, [pc, #332]	; (8010a40 <HAL_TIM_Base_Start_IT+0x164>)
 80108f2:	bf14      	ite	ne
 80108f4:	2301      	movne	r3, #1
 80108f6:	2300      	moveq	r3, #0
 80108f8:	42aa      	cmp	r2, r5
 80108fa:	bf0c      	ite	eq
 80108fc:	2300      	moveq	r3, #0
 80108fe:	f003 0301 	andne.w	r3, r3, #1
 8010902:	428a      	cmp	r2, r1
 8010904:	bf0c      	ite	eq
 8010906:	2300      	moveq	r3, #0
 8010908:	f003 0301 	andne.w	r3, r3, #1
 801090c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010910:	4282      	cmp	r2, r0
 8010912:	bf0c      	ite	eq
 8010914:	2300      	moveq	r3, #0
 8010916:	f003 0301 	andne.w	r3, r3, #1
 801091a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801091e:	428a      	cmp	r2, r1
 8010920:	bf0c      	ite	eq
 8010922:	2300      	moveq	r3, #0
 8010924:	f003 0301 	andne.w	r3, r3, #1
 8010928:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801092c:	4282      	cmp	r2, r0
 801092e:	bf0c      	ite	eq
 8010930:	2300      	moveq	r3, #0
 8010932:	f003 0301 	andne.w	r3, r3, #1
 8010936:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801093a:	428a      	cmp	r2, r1
 801093c:	bf0c      	ite	eq
 801093e:	2300      	moveq	r3, #0
 8010940:	f003 0301 	andne.w	r3, r3, #1
 8010944:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010948:	4282      	cmp	r2, r0
 801094a:	bf0c      	ite	eq
 801094c:	2300      	moveq	r3, #0
 801094e:	f003 0301 	andne.w	r3, r3, #1
 8010952:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010956:	428a      	cmp	r2, r1
 8010958:	bf0c      	ite	eq
 801095a:	2300      	moveq	r3, #0
 801095c:	f003 0301 	andne.w	r3, r3, #1
 8010960:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010964:	4282      	cmp	r2, r0
 8010966:	bf0c      	ite	eq
 8010968:	2300      	moveq	r3, #0
 801096a:	f003 0301 	andne.w	r3, r3, #1
 801096e:	428a      	cmp	r2, r1
 8010970:	bf0c      	ite	eq
 8010972:	2300      	moveq	r3, #0
 8010974:	f003 0301 	andne.w	r3, r3, #1
 8010978:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801097c:	428a      	cmp	r2, r1
 801097e:	bf0c      	ite	eq
 8010980:	2300      	moveq	r3, #0
 8010982:	f003 0301 	andne.w	r3, r3, #1
 8010986:	b113      	cbz	r3, 801098e <HAL_TIM_Base_Start_IT+0xb2>
 8010988:	4b2e      	ldr	r3, [pc, #184]	; (8010a44 <HAL_TIM_Base_Start_IT+0x168>)
 801098a:	429a      	cmp	r2, r3
 801098c:	d147      	bne.n	8010a1e <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 801098e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010992:	2b01      	cmp	r3, #1
 8010994:	d13f      	bne.n	8010a16 <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010996:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010998:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801099a:	4b26      	ldr	r3, [pc, #152]	; (8010a34 <HAL_TIM_Base_Start_IT+0x158>)
 801099c:	4d26      	ldr	r5, [pc, #152]	; (8010a38 <HAL_TIM_Base_Start_IT+0x15c>)
 801099e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80109a2:	bf18      	it	ne
 80109a4:	429a      	cmpne	r2, r3
 80109a6:	4825      	ldr	r0, [pc, #148]	; (8010a3c <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 80109a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109ac:	bf0c      	ite	eq
 80109ae:	2301      	moveq	r3, #1
 80109b0:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109b2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109b4:	42aa      	cmp	r2, r5
 80109b6:	bf08      	it	eq
 80109b8:	f043 0301 	orreq.w	r3, r3, #1
 80109bc:	4c20      	ldr	r4, [pc, #128]	; (8010a40 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109be:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109c2:	4282      	cmp	r2, r0
 80109c4:	bf08      	it	eq
 80109c6:	f043 0301 	orreq.w	r3, r3, #1
 80109ca:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109ce:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109d0:	42a2      	cmp	r2, r4
 80109d2:	bf08      	it	eq
 80109d4:	f043 0301 	orreq.w	r3, r3, #1
 80109d8:	491b      	ldr	r1, [pc, #108]	; (8010a48 <HAL_TIM_Base_Start_IT+0x16c>)
 80109da:	4282      	cmp	r2, r0
 80109dc:	bf08      	it	eq
 80109de:	f043 0301 	orreq.w	r3, r3, #1
 80109e2:	428a      	cmp	r2, r1
 80109e4:	bf08      	it	eq
 80109e6:	f043 0301 	orreq.w	r3, r3, #1
 80109ea:	b933      	cbnz	r3, 80109fa <HAL_TIM_Base_Start_IT+0x11e>
 80109ec:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 80109f0:	1a10      	subs	r0, r2, r0
 80109f2:	fab0 f080 	clz	r0, r0
 80109f6:	0940      	lsrs	r0, r0, #5
 80109f8:	b1b8      	cbz	r0, 8010a2a <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109fa:	6891      	ldr	r1, [r2, #8]
 80109fc:	4b13      	ldr	r3, [pc, #76]	; (8010a4c <HAL_TIM_Base_Start_IT+0x170>)
 80109fe:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a00:	2b06      	cmp	r3, #6
 8010a02:	d00a      	beq.n	8010a1a <HAL_TIM_Base_Start_IT+0x13e>
 8010a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a08:	d007      	beq.n	8010a1a <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 8010a0a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8010a0c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8010a0e:	f043 0301 	orr.w	r3, r3, #1
 8010a12:	6013      	str	r3, [r2, #0]
}
 8010a14:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010a16:	2001      	movs	r0, #1
}
 8010a18:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8010a1a:	2000      	movs	r0, #0
}
 8010a1c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010a1e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8010a22:	480b      	ldr	r0, [pc, #44]	; (8010a50 <HAL_TIM_Base_Start_IT+0x174>)
 8010a24:	f7f4 ff5e 	bl	80058e4 <assert_failed>
 8010a28:	e7b1      	b.n	801098e <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 8010a2a:	6813      	ldr	r3, [r2, #0]
 8010a2c:	f043 0301 	orr.w	r3, r3, #1
 8010a30:	6013      	str	r3, [r2, #0]
}
 8010a32:	bd38      	pop	{r3, r4, r5, pc}
 8010a34:	40010000 	.word	0x40010000
 8010a38:	40000400 	.word	0x40000400
 8010a3c:	40000800 	.word	0x40000800
 8010a40:	40000c00 	.word	0x40000c00
 8010a44:	40002000 	.word	0x40002000
 8010a48:	40014000 	.word	0x40014000
 8010a4c:	00010007 	.word	0x00010007
 8010a50:	0802e5cc 	.word	0x0802e5cc

08010a54 <HAL_TIM_OC_MspInit>:
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop

08010a58 <HAL_TIM_PWM_MspInit>:
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop

08010a5c <HAL_TIM_IC_MspInit>:
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop

08010a60 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010a60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	f000 8151 	beq.w	8010d0c <HAL_TIM_ConfigClockSource+0x2ac>
 8010a6a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8010a6c:	2302      	movs	r3, #2
{
 8010a6e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8010a70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010a74:	460d      	mov	r5, r1
 8010a76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	680b      	ldr	r3, [r1, #0]
 8010a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a82:	bf18      	it	ne
 8010a84:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8010a88:	bf14      	ite	ne
 8010a8a:	2201      	movne	r2, #1
 8010a8c:	2200      	moveq	r2, #0
 8010a8e:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 8010a92:	f002 0201 	and.w	r2, r2, #1
 8010a96:	bf08      	it	eq
 8010a98:	2200      	moveq	r2, #0
 8010a9a:	b112      	cbz	r2, 8010aa2 <HAL_TIM_ConfigClockSource+0x42>
 8010a9c:	2940      	cmp	r1, #64	; 0x40
 8010a9e:	f040 8267 	bne.w	8010f70 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 8010aa2:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 8010aa4:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010aa6:	499a      	ldr	r1, [pc, #616]	; (8010d10 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8010aa8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010aaa:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8010aae:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010ab0:	f000 8138 	beq.w	8010d24 <HAL_TIM_ConfigClockSource+0x2c4>
 8010ab4:	d84f      	bhi.n	8010b56 <HAL_TIM_ConfigClockSource+0xf6>
 8010ab6:	2b40      	cmp	r3, #64	; 0x40
 8010ab8:	f000 81d7 	beq.w	8010e6a <HAL_TIM_ConfigClockSource+0x40a>
 8010abc:	f240 80a2 	bls.w	8010c04 <HAL_TIM_ConfigClockSource+0x1a4>
 8010ac0:	2b50      	cmp	r3, #80	; 0x50
 8010ac2:	f040 8097 	bne.w	8010bf4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010ac6:	4b93      	ldr	r3, [pc, #588]	; (8010d14 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010ac8:	4993      	ldr	r1, [pc, #588]	; (8010d18 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010aca:	429a      	cmp	r2, r3
 8010acc:	bf18      	it	ne
 8010ace:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010ad2:	bf14      	ite	ne
 8010ad4:	2301      	movne	r3, #1
 8010ad6:	2300      	moveq	r3, #0
 8010ad8:	428a      	cmp	r2, r1
 8010ada:	bf0c      	ite	eq
 8010adc:	2300      	moveq	r3, #0
 8010ade:	f003 0301 	andne.w	r3, r3, #1
 8010ae2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ae6:	428a      	cmp	r2, r1
 8010ae8:	bf0c      	ite	eq
 8010aea:	2300      	moveq	r3, #0
 8010aec:	f003 0301 	andne.w	r3, r3, #1
 8010af0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010af4:	428a      	cmp	r2, r1
 8010af6:	bf0c      	ite	eq
 8010af8:	2300      	moveq	r3, #0
 8010afa:	f003 0301 	andne.w	r3, r3, #1
 8010afe:	b11b      	cbz	r3, 8010b08 <HAL_TIM_ConfigClockSource+0xa8>
 8010b00:	4b86      	ldr	r3, [pc, #536]	; (8010d1c <HAL_TIM_ConfigClockSource+0x2bc>)
 8010b02:	429a      	cmp	r2, r3
 8010b04:	f040 8222 	bne.w	8010f4c <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010b08:	686b      	ldr	r3, [r5, #4]
 8010b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b0e:	bf18      	it	ne
 8010b10:	2b0a      	cmpne	r3, #10
 8010b12:	d003      	beq.n	8010b1c <HAL_TIM_ConfigClockSource+0xbc>
 8010b14:	f033 0302 	bics.w	r3, r3, #2
 8010b18:	f040 81fe 	bne.w	8010f18 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010b1c:	68ee      	ldr	r6, [r5, #12]
 8010b1e:	2e0f      	cmp	r6, #15
 8010b20:	f200 8242 	bhi.w	8010fa8 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b24:	6823      	ldr	r3, [r4, #0]
 8010b26:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010b28:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b2a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b2c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b30:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010b34:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010b36:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b38:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b3a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b40:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b46:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010b48:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b4e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010b52:	609a      	str	r2, [r3, #8]
}
 8010b54:	e04f      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b5a:	f000 812c 	beq.w	8010db6 <HAL_TIM_ConfigClockSource+0x356>
 8010b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b62:	d17e      	bne.n	8010c62 <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010b64:	4b6b      	ldr	r3, [pc, #428]	; (8010d14 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010b66:	496c      	ldr	r1, [pc, #432]	; (8010d18 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	bf18      	it	ne
 8010b6c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010b70:	bf14      	ite	ne
 8010b72:	2301      	movne	r3, #1
 8010b74:	2300      	moveq	r3, #0
 8010b76:	428a      	cmp	r2, r1
 8010b78:	bf0c      	ite	eq
 8010b7a:	2300      	moveq	r3, #0
 8010b7c:	f003 0301 	andne.w	r3, r3, #1
 8010b80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b84:	428a      	cmp	r2, r1
 8010b86:	bf0c      	ite	eq
 8010b88:	2300      	moveq	r3, #0
 8010b8a:	f003 0301 	andne.w	r3, r3, #1
 8010b8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b92:	428a      	cmp	r2, r1
 8010b94:	bf0c      	ite	eq
 8010b96:	2300      	moveq	r3, #0
 8010b98:	f003 0301 	andne.w	r3, r3, #1
 8010b9c:	b11b      	cbz	r3, 8010ba6 <HAL_TIM_ConfigClockSource+0x146>
 8010b9e:	4b5f      	ldr	r3, [pc, #380]	; (8010d1c <HAL_TIM_ConfigClockSource+0x2bc>)
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	f040 81c5 	bne.w	8010f30 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010ba6:	68ab      	ldr	r3, [r5, #8]
 8010ba8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010bac:	f040 8210 	bne.w	8010fd0 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010bb0:	686b      	ldr	r3, [r5, #4]
 8010bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bb6:	bf18      	it	ne
 8010bb8:	2b0a      	cmpne	r3, #10
 8010bba:	d003      	beq.n	8010bc4 <HAL_TIM_ConfigClockSource+0x164>
 8010bbc:	f033 0302 	bics.w	r3, r3, #2
 8010bc0:	f040 81a4 	bne.w	8010f0c <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010bc4:	68ee      	ldr	r6, [r5, #12]
 8010bc6:	2e0f      	cmp	r6, #15
 8010bc8:	f200 81d9 	bhi.w	8010f7e <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 8010bcc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010bce:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010bd2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010bd4:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010bd6:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010bd8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010bdc:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010bde:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010be2:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010be4:	6893      	ldr	r3, [r2, #8]
 8010be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010bea:	6093      	str	r3, [r2, #8]
      break;
 8010bec:	e003      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010bee:	f033 0110 	bics.w	r1, r3, #16
 8010bf2:	d00c      	beq.n	8010c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8010bf4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8010bf6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8010bf8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010bfa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8010c04:	2b20      	cmp	r3, #32
 8010c06:	d002      	beq.n	8010c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8010c08:	d9f1      	bls.n	8010bee <HAL_TIM_ConfigClockSource+0x18e>
 8010c0a:	2b30      	cmp	r3, #48	; 0x30
 8010c0c:	d1f2      	bne.n	8010bf4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010c0e:	4941      	ldr	r1, [pc, #260]	; (8010d14 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010c10:	4841      	ldr	r0, [pc, #260]	; (8010d18 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010c12:	428a      	cmp	r2, r1
 8010c14:	bf18      	it	ne
 8010c16:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c1a:	bf14      	ite	ne
 8010c1c:	2101      	movne	r1, #1
 8010c1e:	2100      	moveq	r1, #0
 8010c20:	4282      	cmp	r2, r0
 8010c22:	bf0c      	ite	eq
 8010c24:	2100      	moveq	r1, #0
 8010c26:	f001 0101 	andne.w	r1, r1, #1
 8010c2a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010c2e:	4282      	cmp	r2, r0
 8010c30:	bf0c      	ite	eq
 8010c32:	2100      	moveq	r1, #0
 8010c34:	f001 0101 	andne.w	r1, r1, #1
 8010c38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010c3c:	4282      	cmp	r2, r0
 8010c3e:	bf0c      	ite	eq
 8010c40:	2100      	moveq	r1, #0
 8010c42:	f001 0101 	andne.w	r1, r1, #1
 8010c46:	b119      	cbz	r1, 8010c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8010c48:	4934      	ldr	r1, [pc, #208]	; (8010d1c <HAL_TIM_ConfigClockSource+0x2bc>)
 8010c4a:	428a      	cmp	r2, r1
 8010c4c:	f040 8176 	bne.w	8010f3c <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 8010c50:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010c52:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c54:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c58:	430b      	orrs	r3, r1
 8010c5a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8010c5e:	6093      	str	r3, [r2, #8]
}
 8010c60:	e7c9      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010c62:	2b70      	cmp	r3, #112	; 0x70
 8010c64:	d1c6      	bne.n	8010bf4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010c66:	4b2b      	ldr	r3, [pc, #172]	; (8010d14 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010c68:	492b      	ldr	r1, [pc, #172]	; (8010d18 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	bf18      	it	ne
 8010c6e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c72:	bf14      	ite	ne
 8010c74:	2301      	movne	r3, #1
 8010c76:	2300      	moveq	r3, #0
 8010c78:	428a      	cmp	r2, r1
 8010c7a:	bf0c      	ite	eq
 8010c7c:	2300      	moveq	r3, #0
 8010c7e:	f003 0301 	andne.w	r3, r3, #1
 8010c82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c86:	428a      	cmp	r2, r1
 8010c88:	bf0c      	ite	eq
 8010c8a:	2300      	moveq	r3, #0
 8010c8c:	f003 0301 	andne.w	r3, r3, #1
 8010c90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c94:	428a      	cmp	r2, r1
 8010c96:	bf0c      	ite	eq
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	f003 0301 	andne.w	r3, r3, #1
 8010c9e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010ca2:	428a      	cmp	r2, r1
 8010ca4:	bf0c      	ite	eq
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	f003 0301 	andne.w	r3, r3, #1
 8010cac:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010cb0:	428a      	cmp	r2, r1
 8010cb2:	bf0c      	ite	eq
 8010cb4:	2300      	moveq	r3, #0
 8010cb6:	f003 0301 	andne.w	r3, r3, #1
 8010cba:	b11b      	cbz	r3, 8010cc4 <HAL_TIM_ConfigClockSource+0x264>
 8010cbc:	4b18      	ldr	r3, [pc, #96]	; (8010d20 <HAL_TIM_ConfigClockSource+0x2c0>)
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	f040 818c 	bne.w	8010fdc <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010cc4:	68ab      	ldr	r3, [r5, #8]
 8010cc6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010cca:	f040 817b 	bne.w	8010fc4 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cce:	686b      	ldr	r3, [r5, #4]
 8010cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cd4:	bf18      	it	ne
 8010cd6:	2b0a      	cmpne	r3, #10
 8010cd8:	d003      	beq.n	8010ce2 <HAL_TIM_ConfigClockSource+0x282>
 8010cda:	f033 0302 	bics.w	r3, r3, #2
 8010cde:	f040 8121 	bne.w	8010f24 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010ce2:	68ee      	ldr	r6, [r5, #12]
 8010ce4:	2e0f      	cmp	r6, #15
 8010ce6:	f200 8166 	bhi.w	8010fb6 <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 8010cea:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010cec:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010cf0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010cf2:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010cf4:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010cf6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010cfa:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010cfc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010d00:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010d02:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010d08:	6093      	str	r3, [r2, #8]
      break;
 8010d0a:	e774      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 8010d0c:	2002      	movs	r0, #2
}
 8010d0e:	4770      	bx	lr
 8010d10:	fffe0088 	.word	0xfffe0088
 8010d14:	40010000 	.word	0x40010000
 8010d18:	40000400 	.word	0x40000400
 8010d1c:	40010400 	.word	0x40010400
 8010d20:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010d24:	4bb0      	ldr	r3, [pc, #704]	; (8010fe8 <HAL_TIM_ConfigClockSource+0x588>)
 8010d26:	49b1      	ldr	r1, [pc, #708]	; (8010fec <HAL_TIM_ConfigClockSource+0x58c>)
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	bf18      	it	ne
 8010d2c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010d30:	bf14      	ite	ne
 8010d32:	2301      	movne	r3, #1
 8010d34:	2300      	moveq	r3, #0
 8010d36:	428a      	cmp	r2, r1
 8010d38:	bf0c      	ite	eq
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	f003 0301 	andne.w	r3, r3, #1
 8010d40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d44:	428a      	cmp	r2, r1
 8010d46:	bf0c      	ite	eq
 8010d48:	2300      	moveq	r3, #0
 8010d4a:	f003 0301 	andne.w	r3, r3, #1
 8010d4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d52:	428a      	cmp	r2, r1
 8010d54:	bf0c      	ite	eq
 8010d56:	2300      	moveq	r3, #0
 8010d58:	f003 0301 	andne.w	r3, r3, #1
 8010d5c:	b11b      	cbz	r3, 8010d66 <HAL_TIM_ConfigClockSource+0x306>
 8010d5e:	4ba4      	ldr	r3, [pc, #656]	; (8010ff0 <HAL_TIM_ConfigClockSource+0x590>)
 8010d60:	429a      	cmp	r2, r3
 8010d62:	f040 80ff 	bne.w	8010f64 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010d66:	686b      	ldr	r3, [r5, #4]
 8010d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d6c:	bf18      	it	ne
 8010d6e:	2b0a      	cmpne	r3, #10
 8010d70:	d003      	beq.n	8010d7a <HAL_TIM_ConfigClockSource+0x31a>
 8010d72:	f033 0302 	bics.w	r3, r3, #2
 8010d76:	f040 80c3 	bne.w	8010f00 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d7a:	68ee      	ldr	r6, [r5, #12]
 8010d7c:	2e0f      	cmp	r6, #15
 8010d7e:	f200 810c 	bhi.w	8010f9a <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d86:	6a18      	ldr	r0, [r3, #32]
 8010d88:	f020 0010 	bic.w	r0, r0, #16
 8010d8c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8010d8e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010d90:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010d92:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010d94:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010d9c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010da0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010da4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010da6:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010da8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010dae:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010db2:	609a      	str	r2, [r3, #8]
}
 8010db4:	e71f      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010db6:	4b8c      	ldr	r3, [pc, #560]	; (8010fe8 <HAL_TIM_ConfigClockSource+0x588>)
 8010db8:	488c      	ldr	r0, [pc, #560]	; (8010fec <HAL_TIM_ConfigClockSource+0x58c>)
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	bf18      	it	ne
 8010dbe:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010dc2:	498c      	ldr	r1, [pc, #560]	; (8010ff4 <HAL_TIM_ConfigClockSource+0x594>)
 8010dc4:	bf14      	ite	ne
 8010dc6:	2301      	movne	r3, #1
 8010dc8:	2300      	moveq	r3, #0
 8010dca:	4282      	cmp	r2, r0
 8010dcc:	bf0c      	ite	eq
 8010dce:	2300      	moveq	r3, #0
 8010dd0:	f003 0301 	andne.w	r3, r3, #1
 8010dd4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010dd8:	428a      	cmp	r2, r1
 8010dda:	bf0c      	ite	eq
 8010ddc:	2300      	moveq	r3, #0
 8010dde:	f003 0301 	andne.w	r3, r3, #1
 8010de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010de6:	4282      	cmp	r2, r0
 8010de8:	bf0c      	ite	eq
 8010dea:	2300      	moveq	r3, #0
 8010dec:	f003 0301 	andne.w	r3, r3, #1
 8010df0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010df4:	428a      	cmp	r2, r1
 8010df6:	bf0c      	ite	eq
 8010df8:	2300      	moveq	r3, #0
 8010dfa:	f003 0301 	andne.w	r3, r3, #1
 8010dfe:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010e02:	4282      	cmp	r2, r0
 8010e04:	bf0c      	ite	eq
 8010e06:	2300      	moveq	r3, #0
 8010e08:	f003 0301 	andne.w	r3, r3, #1
 8010e0c:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010e10:	428a      	cmp	r2, r1
 8010e12:	bf0c      	ite	eq
 8010e14:	2300      	moveq	r3, #0
 8010e16:	f003 0301 	andne.w	r3, r3, #1
 8010e1a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010e1e:	4282      	cmp	r2, r0
 8010e20:	bf0c      	ite	eq
 8010e22:	2300      	moveq	r3, #0
 8010e24:	f003 0301 	andne.w	r3, r3, #1
 8010e28:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	bf0c      	ite	eq
 8010e30:	2300      	moveq	r3, #0
 8010e32:	f003 0301 	andne.w	r3, r3, #1
 8010e36:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010e3a:	4282      	cmp	r2, r0
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	f003 0301 	andne.w	r3, r3, #1
 8010e44:	428a      	cmp	r2, r1
 8010e46:	bf0c      	ite	eq
 8010e48:	2300      	moveq	r3, #0
 8010e4a:	f003 0301 	andne.w	r3, r3, #1
 8010e4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e52:	428a      	cmp	r2, r1
 8010e54:	bf0c      	ite	eq
 8010e56:	2300      	moveq	r3, #0
 8010e58:	f003 0301 	andne.w	r3, r3, #1
 8010e5c:	b11b      	cbz	r3, 8010e66 <HAL_TIM_ConfigClockSource+0x406>
 8010e5e:	4b66      	ldr	r3, [pc, #408]	; (8010ff8 <HAL_TIM_ConfigClockSource+0x598>)
 8010e60:	429a      	cmp	r2, r3
 8010e62:	f040 80cd 	bne.w	8011000 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 8010e66:	2000      	movs	r0, #0
 8010e68:	e6c5      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010e6a:	4b5f      	ldr	r3, [pc, #380]	; (8010fe8 <HAL_TIM_ConfigClockSource+0x588>)
 8010e6c:	495f      	ldr	r1, [pc, #380]	; (8010fec <HAL_TIM_ConfigClockSource+0x58c>)
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	bf18      	it	ne
 8010e72:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010e76:	bf14      	ite	ne
 8010e78:	2301      	movne	r3, #1
 8010e7a:	2300      	moveq	r3, #0
 8010e7c:	428a      	cmp	r2, r1
 8010e7e:	bf0c      	ite	eq
 8010e80:	2300      	moveq	r3, #0
 8010e82:	f003 0301 	andne.w	r3, r3, #1
 8010e86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e8a:	428a      	cmp	r2, r1
 8010e8c:	bf0c      	ite	eq
 8010e8e:	2300      	moveq	r3, #0
 8010e90:	f003 0301 	andne.w	r3, r3, #1
 8010e94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e98:	428a      	cmp	r2, r1
 8010e9a:	bf0c      	ite	eq
 8010e9c:	2300      	moveq	r3, #0
 8010e9e:	f003 0301 	andne.w	r3, r3, #1
 8010ea2:	b113      	cbz	r3, 8010eaa <HAL_TIM_ConfigClockSource+0x44a>
 8010ea4:	4b52      	ldr	r3, [pc, #328]	; (8010ff0 <HAL_TIM_ConfigClockSource+0x590>)
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d156      	bne.n	8010f58 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010eaa:	686b      	ldr	r3, [r5, #4]
 8010eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010eb0:	bf18      	it	ne
 8010eb2:	2b0a      	cmpne	r3, #10
 8010eb4:	d002      	beq.n	8010ebc <HAL_TIM_ConfigClockSource+0x45c>
 8010eb6:	f033 0302 	bics.w	r3, r3, #2
 8010eba:	d11b      	bne.n	8010ef4 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010ebc:	68ee      	ldr	r6, [r5, #12]
 8010ebe:	2e0f      	cmp	r6, #15
 8010ec0:	d864      	bhi.n	8010f8c <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ec2:	6823      	ldr	r3, [r4, #0]
 8010ec4:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010ec6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ec8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010eca:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ece:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010ed2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010ed4:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ed6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ed8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010eda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010ede:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ee4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010ee6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ee8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010eec:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010ef0:	609a      	str	r2, [r3, #8]
}
 8010ef2:	e680      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ef4:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8010ef8:	4840      	ldr	r0, [pc, #256]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010efa:	f7f4 fcf3 	bl	80058e4 <assert_failed>
 8010efe:	e7dd      	b.n	8010ebc <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f00:	f241 5196 	movw	r1, #5526	; 0x1596
 8010f04:	483d      	ldr	r0, [pc, #244]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f06:	f7f4 fced 	bl	80058e4 <assert_failed>
 8010f0a:	e736      	b.n	8010d7a <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f0c:	f241 5173 	movw	r1, #5491	; 0x1573
 8010f10:	483a      	ldr	r0, [pc, #232]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f12:	f7f4 fce7 	bl	80058e4 <assert_failed>
 8010f16:	e655      	b.n	8010bc4 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f18:	f241 5186 	movw	r1, #5510	; 0x1586
 8010f1c:	4837      	ldr	r0, [pc, #220]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f1e:	f7f4 fce1 	bl	80058e4 <assert_failed>
 8010f22:	e5fb      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f24:	f241 515b 	movw	r1, #5467	; 0x155b
 8010f28:	4834      	ldr	r0, [pc, #208]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f2a:	f7f4 fcdb 	bl	80058e4 <assert_failed>
 8010f2e:	e6d8      	b.n	8010ce2 <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010f30:	f241 516f 	movw	r1, #5487	; 0x156f
 8010f34:	4831      	ldr	r0, [pc, #196]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f36:	f7f4 fcd5 	bl	80058e4 <assert_failed>
 8010f3a:	e634      	b.n	8010ba6 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010f3c:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8010f40:	482e      	ldr	r0, [pc, #184]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f42:	f7f4 fccf 	bl	80058e4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010f46:	6822      	ldr	r2, [r4, #0]
 8010f48:	682b      	ldr	r3, [r5, #0]
 8010f4a:	e681      	b.n	8010c50 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f4c:	f241 5183 	movw	r1, #5507	; 0x1583
 8010f50:	482a      	ldr	r0, [pc, #168]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f52:	f7f4 fcc7 	bl	80058e4 <assert_failed>
 8010f56:	e5d7      	b.n	8010b08 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f58:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8010f5c:	4827      	ldr	r0, [pc, #156]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f5e:	f7f4 fcc1 	bl	80058e4 <assert_failed>
 8010f62:	e7a2      	b.n	8010eaa <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f64:	f241 5193 	movw	r1, #5523	; 0x1593
 8010f68:	4824      	ldr	r0, [pc, #144]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f6a:	f7f4 fcbb 	bl	80058e4 <assert_failed>
 8010f6e:	e6fa      	b.n	8010d66 <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010f70:	f241 5144 	movw	r1, #5444	; 0x1544
 8010f74:	4821      	ldr	r0, [pc, #132]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f76:	f7f4 fcb5 	bl	80058e4 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 8010f7a:	682b      	ldr	r3, [r5, #0]
 8010f7c:	e591      	b.n	8010aa2 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f7e:	f241 5174 	movw	r1, #5492	; 0x1574
 8010f82:	481e      	ldr	r0, [pc, #120]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f84:	f7f4 fcae 	bl	80058e4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010f88:	68ee      	ldr	r6, [r5, #12]
 8010f8a:	e61f      	b.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f8c:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8010f90:	481a      	ldr	r0, [pc, #104]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010f92:	f7f4 fca7 	bl	80058e4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f96:	68ee      	ldr	r6, [r5, #12]
 8010f98:	e793      	b.n	8010ec2 <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f9a:	f241 5197 	movw	r1, #5527	; 0x1597
 8010f9e:	4817      	ldr	r0, [pc, #92]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fa0:	f7f4 fca0 	bl	80058e4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010fa4:	68ee      	ldr	r6, [r5, #12]
 8010fa6:	e6ec      	b.n	8010d82 <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fa8:	f241 5187 	movw	r1, #5511	; 0x1587
 8010fac:	4813      	ldr	r0, [pc, #76]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fae:	f7f4 fc99 	bl	80058e4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010fb2:	68ee      	ldr	r6, [r5, #12]
 8010fb4:	e5b6      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fb6:	f241 515c 	movw	r1, #5468	; 0x155c
 8010fba:	4810      	ldr	r0, [pc, #64]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fbc:	f7f4 fc92 	bl	80058e4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010fc0:	68ee      	ldr	r6, [r5, #12]
 8010fc2:	e692      	b.n	8010cea <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010fc4:	f241 515a 	movw	r1, #5466	; 0x155a
 8010fc8:	480c      	ldr	r0, [pc, #48]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fca:	f7f4 fc8b 	bl	80058e4 <assert_failed>
 8010fce:	e67e      	b.n	8010cce <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010fd0:	f241 5172 	movw	r1, #5490	; 0x1572
 8010fd4:	4809      	ldr	r0, [pc, #36]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fd6:	f7f4 fc85 	bl	80058e4 <assert_failed>
 8010fda:	e5e9      	b.n	8010bb0 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010fdc:	f241 5157 	movw	r1, #5463	; 0x1557
 8010fe0:	4806      	ldr	r0, [pc, #24]	; (8010ffc <HAL_TIM_ConfigClockSource+0x59c>)
 8010fe2:	f7f4 fc7f 	bl	80058e4 <assert_failed>
 8010fe6:	e66d      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x264>
 8010fe8:	40010000 	.word	0x40010000
 8010fec:	40000400 	.word	0x40000400
 8010ff0:	40010400 	.word	0x40010400
 8010ff4:	40000800 	.word	0x40000800
 8010ff8:	40002000 	.word	0x40002000
 8010ffc:	0802e5cc 	.word	0x0802e5cc
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011000:	4803      	ldr	r0, [pc, #12]	; (8011010 <HAL_TIM_ConfigClockSource+0x5b0>)
 8011002:	f241 5150 	movw	r1, #5456	; 0x1550
 8011006:	f7f4 fc6d 	bl	80058e4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 801100a:	2000      	movs	r0, #0
 801100c:	e5f3      	b.n	8010bf6 <HAL_TIM_ConfigClockSource+0x196>
 801100e:	bf00      	nop
 8011010:	0802e5cc 	.word	0x0802e5cc

08011014 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011014:	6802      	ldr	r2, [r0, #0]
{
 8011016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011018:	4b39      	ldr	r3, [pc, #228]	; (8011100 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 801101a:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 801101c:	4f39      	ldr	r7, [pc, #228]	; (8011104 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 801101e:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011020:	429a      	cmp	r2, r3
 8011022:	bf18      	it	ne
 8011024:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8011028:	4e37      	ldr	r6, [pc, #220]	; (8011108 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 801102a:	4938      	ldr	r1, [pc, #224]	; (801110c <HAL_TIM_SlaveConfigSynchro+0xf8>)
 801102c:	bf14      	ite	ne
 801102e:	2301      	movne	r3, #1
 8011030:	2300      	moveq	r3, #0
 8011032:	42ba      	cmp	r2, r7
 8011034:	bf0c      	ite	eq
 8011036:	2300      	moveq	r3, #0
 8011038:	f003 0301 	andne.w	r3, r3, #1
 801103c:	42b2      	cmp	r2, r6
 801103e:	bf0c      	ite	eq
 8011040:	2300      	moveq	r3, #0
 8011042:	f003 0301 	andne.w	r3, r3, #1
 8011046:	428a      	cmp	r2, r1
 8011048:	bf0c      	ite	eq
 801104a:	2300      	moveq	r3, #0
 801104c:	f003 0301 	andne.w	r3, r3, #1
 8011050:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8011054:	428a      	cmp	r2, r1
 8011056:	bf0c      	ite	eq
 8011058:	2300      	moveq	r3, #0
 801105a:	f003 0301 	andne.w	r3, r3, #1
 801105e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8011062:	428a      	cmp	r2, r1
 8011064:	bf0c      	ite	eq
 8011066:	2300      	moveq	r3, #0
 8011068:	f003 0301 	andne.w	r3, r3, #1
 801106c:	b113      	cbz	r3, 8011074 <HAL_TIM_SlaveConfigSynchro+0x60>
 801106e:	4b28      	ldr	r3, [pc, #160]	; (8011110 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 8011070:	429a      	cmp	r2, r3
 8011072:	d138      	bne.n	80110e6 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8011074:	682b      	ldr	r3, [r5, #0]
 8011076:	1f1a      	subs	r2, r3, #4
 8011078:	2a03      	cmp	r2, #3
 801107a:	d902      	bls.n	8011082 <HAL_TIM_SlaveConfigSynchro+0x6e>
 801107c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8011080:	d12b      	bne.n	80110da <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8011082:	686b      	ldr	r3, [r5, #4]
 8011084:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011088:	2b40      	cmp	r3, #64	; 0x40
 801108a:	d000      	beq.n	801108e <HAL_TIM_SlaveConfigSynchro+0x7a>
 801108c:	bb8b      	cbnz	r3, 80110f2 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 801108e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011092:	2b01      	cmp	r3, #1
 8011094:	d01f      	beq.n	80110d6 <HAL_TIM_SlaveConfigSynchro+0xc2>
 8011096:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8011098:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801109a:	4629      	mov	r1, r5
 801109c:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 801109e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80110a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80110a6:	f7ff f933 	bl	8010310 <TIM_SlaveTimer_SetConfig>
 80110aa:	b968      	cbnz	r0, 80110c8 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	68da      	ldr	r2, [r3, #12]
 80110b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110b4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80110b6:	68da      	ldr	r2, [r3, #12]
 80110b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80110bc:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80110be:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80110c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80110c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 80110c8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80110ca:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 80110cc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80110d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80110d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80110d6:	2002      	movs	r0, #2
}
 80110d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80110da:	f241 51f7 	movw	r1, #5623	; 0x15f7
 80110de:	480d      	ldr	r0, [pc, #52]	; (8011114 <HAL_TIM_SlaveConfigSynchro+0x100>)
 80110e0:	f7f4 fc00 	bl	80058e4 <assert_failed>
 80110e4:	e7cd      	b.n	8011082 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 80110e6:	f241 51f6 	movw	r1, #5622	; 0x15f6
 80110ea:	480a      	ldr	r0, [pc, #40]	; (8011114 <HAL_TIM_SlaveConfigSynchro+0x100>)
 80110ec:	f7f4 fbfa 	bl	80058e4 <assert_failed>
 80110f0:	e7c0      	b.n	8011074 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 80110f2:	f241 51f8 	movw	r1, #5624	; 0x15f8
 80110f6:	4807      	ldr	r0, [pc, #28]	; (8011114 <HAL_TIM_SlaveConfigSynchro+0x100>)
 80110f8:	f7f4 fbf4 	bl	80058e4 <assert_failed>
 80110fc:	e7c7      	b.n	801108e <HAL_TIM_SlaveConfigSynchro+0x7a>
 80110fe:	bf00      	nop
 8011100:	40010000 	.word	0x40010000
 8011104:	40000400 	.word	0x40000400
 8011108:	40000800 	.word	0x40000800
 801110c:	40000c00 	.word	0x40000c00
 8011110:	40001800 	.word	0x40001800
 8011114:	0802e5cc 	.word	0x0802e5cc

08011118 <HAL_TIM_OC_DelayElapsedCallback>:
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop

0801111c <TIM_DMACaptureCplt>:
{
 801111c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801111e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011122:	4283      	cmp	r3, r0
 8011124:	d01e      	beq.n	8011164 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011128:	4283      	cmp	r3, r0
 801112a:	d00b      	beq.n	8011144 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801112c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801112e:	4283      	cmp	r3, r0
 8011130:	d027      	beq.n	8011182 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011134:	4283      	cmp	r3, r0
 8011136:	d02f      	beq.n	8011198 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8011138:	4620      	mov	r0, r4
 801113a:	f7f3 fa71 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801113e:	2300      	movs	r3, #0
 8011140:	7723      	strb	r3, [r4, #28]
}
 8011142:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011144:	2202      	movs	r2, #2
 8011146:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011148:	69db      	ldr	r3, [r3, #28]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1f4      	bne.n	8011138 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801114e:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 8011150:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011152:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 801115a:	f7f3 fa61 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801115e:	2300      	movs	r3, #0
 8011160:	7723      	strb	r3, [r4, #28]
}
 8011162:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011164:	2201      	movs	r2, #1
 8011166:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d1e4      	bne.n	8011138 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801116e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8011172:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011174:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8011178:	f7f3 fa52 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801117c:	2300      	movs	r3, #0
 801117e:	7723      	strb	r3, [r4, #28]
}
 8011180:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011182:	2204      	movs	r2, #4
 8011184:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011186:	69db      	ldr	r3, [r3, #28]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1d5      	bne.n	8011138 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801118c:	2301      	movs	r3, #1
 801118e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011192:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011196:	e7cf      	b.n	8011138 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011198:	2208      	movs	r2, #8
 801119a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1ca      	bne.n	8011138 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111a2:	2301      	movs	r3, #1
 80111a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111a8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80111ac:	e7c4      	b.n	8011138 <TIM_DMACaptureCplt+0x1c>
 80111ae:	bf00      	nop

080111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop

080111b4 <TIM_DMACaptureHalfCplt>:
{
 80111b4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80111b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111ba:	4283      	cmp	r3, r0
 80111bc:	d016      	beq.n	80111ec <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80111be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80111c0:	4283      	cmp	r3, r0
 80111c2:	d00b      	beq.n	80111dc <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80111c6:	4283      	cmp	r3, r0
 80111c8:	d018      	beq.n	80111fc <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111cc:	4283      	cmp	r3, r0
 80111ce:	d01d      	beq.n	801120c <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111d0:	4620      	mov	r0, r4
 80111d2:	f7ff ffed 	bl	80111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111d6:	2300      	movs	r3, #0
 80111d8:	7723      	strb	r3, [r4, #28]
}
 80111da:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111dc:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111de:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111e0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111e2:	f7ff ffe5 	bl	80111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111e6:	2300      	movs	r3, #0
 80111e8:	7723      	strb	r3, [r4, #28]
}
 80111ea:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111ec:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111ee:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111f0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111f2:	f7ff ffdd 	bl	80111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111f6:	2300      	movs	r3, #0
 80111f8:	7723      	strb	r3, [r4, #28]
}
 80111fa:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111fc:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111fe:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011200:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011202:	f7ff ffd5 	bl	80111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011206:	2300      	movs	r3, #0
 8011208:	7723      	strb	r3, [r4, #28]
}
 801120a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801120c:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801120e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011210:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011212:	f7ff ffcd 	bl	80111b0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011216:	2300      	movs	r3, #0
 8011218:	7723      	strb	r3, [r4, #28]
}
 801121a:	bd10      	pop	{r4, pc}

0801121c <HAL_TIM_PWM_PulseFinishedCallback>:
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop

08011220 <HAL_TIM_TriggerCallback>:
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop

08011224 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011224:	6803      	ldr	r3, [r0, #0]
 8011226:	691a      	ldr	r2, [r3, #16]
 8011228:	0791      	lsls	r1, r2, #30
{
 801122a:	b510      	push	{r4, lr}
 801122c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801122e:	d502      	bpl.n	8011236 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011230:	68da      	ldr	r2, [r3, #12]
 8011232:	0792      	lsls	r2, r2, #30
 8011234:	d468      	bmi.n	8011308 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011236:	691a      	ldr	r2, [r3, #16]
 8011238:	0752      	lsls	r2, r2, #29
 801123a:	d502      	bpl.n	8011242 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801123c:	68da      	ldr	r2, [r3, #12]
 801123e:	0750      	lsls	r0, r2, #29
 8011240:	d44f      	bmi.n	80112e2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	0711      	lsls	r1, r2, #28
 8011246:	d502      	bpl.n	801124e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011248:	68da      	ldr	r2, [r3, #12]
 801124a:	0712      	lsls	r2, r2, #28
 801124c:	d437      	bmi.n	80112be <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801124e:	691a      	ldr	r2, [r3, #16]
 8011250:	06d0      	lsls	r0, r2, #27
 8011252:	d502      	bpl.n	801125a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011254:	68da      	ldr	r2, [r3, #12]
 8011256:	06d1      	lsls	r1, r2, #27
 8011258:	d41e      	bmi.n	8011298 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801125a:	691a      	ldr	r2, [r3, #16]
 801125c:	07d2      	lsls	r2, r2, #31
 801125e:	d502      	bpl.n	8011266 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011260:	68da      	ldr	r2, [r3, #12]
 8011262:	07d0      	lsls	r0, r2, #31
 8011264:	d469      	bmi.n	801133a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011266:	691a      	ldr	r2, [r3, #16]
 8011268:	0611      	lsls	r1, r2, #24
 801126a:	d502      	bpl.n	8011272 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801126c:	68da      	ldr	r2, [r3, #12]
 801126e:	0612      	lsls	r2, r2, #24
 8011270:	d46b      	bmi.n	801134a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011272:	691a      	ldr	r2, [r3, #16]
 8011274:	05d0      	lsls	r0, r2, #23
 8011276:	d502      	bpl.n	801127e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011278:	68da      	ldr	r2, [r3, #12]
 801127a:	0611      	lsls	r1, r2, #24
 801127c:	d46d      	bmi.n	801135a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801127e:	691a      	ldr	r2, [r3, #16]
 8011280:	0652      	lsls	r2, r2, #25
 8011282:	d502      	bpl.n	801128a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011284:	68da      	ldr	r2, [r3, #12]
 8011286:	0650      	lsls	r0, r2, #25
 8011288:	d46f      	bmi.n	801136a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801128a:	691a      	ldr	r2, [r3, #16]
 801128c:	0691      	lsls	r1, r2, #26
 801128e:	d502      	bpl.n	8011296 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011290:	68da      	ldr	r2, [r3, #12]
 8011292:	0692      	lsls	r2, r2, #26
 8011294:	d449      	bmi.n	801132a <HAL_TIM_IRQHandler+0x106>
}
 8011296:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011298:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801129c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801129e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80112a0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80112a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80112a4:	69db      	ldr	r3, [r3, #28]
 80112a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80112aa:	d16f      	bne.n	801138c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112ac:	f7ff ff34 	bl	8011118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff ffb3 	bl	801121c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80112b8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112ba:	7722      	strb	r2, [r4, #28]
 80112bc:	e7cd      	b.n	801125a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80112be:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112c2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80112c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80112c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80112ca:	69db      	ldr	r3, [r3, #28]
 80112cc:	079b      	lsls	r3, r3, #30
 80112ce:	d15a      	bne.n	8011386 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112d0:	f7ff ff22 	bl	8011118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ff ffa1 	bl	801121c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112da:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80112dc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112de:	7722      	strb	r2, [r4, #28]
 80112e0:	e7b5      	b.n	801124e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80112e2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80112e6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80112e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80112ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80112ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80112ee:	699b      	ldr	r3, [r3, #24]
 80112f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80112f4:	d144      	bne.n	8011380 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112f6:	f7ff ff0f 	bl	8011118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112fa:	4620      	mov	r0, r4
 80112fc:	f7ff ff8e 	bl	801121c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011300:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011302:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011304:	7722      	strb	r2, [r4, #28]
 8011306:	e79c      	b.n	8011242 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011308:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801130c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801130e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011310:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	0799      	lsls	r1, r3, #30
 8011316:	d130      	bne.n	801137a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011318:	f7ff fefe 	bl	8011118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801131c:	4620      	mov	r0, r4
 801131e:	f7ff ff7d 	bl	801121c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011322:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011324:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011326:	7722      	strb	r2, [r4, #28]
 8011328:	e785      	b.n	8011236 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801132a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801132e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011330:	611a      	str	r2, [r3, #16]
}
 8011332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8011336:	f001 be53 	b.w	8012fe0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801133a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801133e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011340:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8011342:	f7f3 f9d5 	bl	80046f0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	e78d      	b.n	8011266 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801134a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 801134e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011350:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8011352:	f001 fe47 	bl	8012fe4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	e78b      	b.n	8011272 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801135a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801135e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011360:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8011362:	f001 fe41 	bl	8012fe8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	e789      	b.n	801127e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801136a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801136e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011370:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8011372:	f7ff ff55 	bl	8011220 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	e787      	b.n	801128a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 801137a:	f7f3 f951 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 801137e:	e7d0      	b.n	8011322 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8011380:	f7f3 f94e 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 8011384:	e7bc      	b.n	8011300 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8011386:	f7f3 f94b 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 801138a:	e7a6      	b.n	80112da <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 801138c:	f7f3 f948 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 8011390:	e791      	b.n	80112b6 <HAL_TIM_IRQHandler+0x92>
 8011392:	bf00      	nop

08011394 <HAL_TIM_ErrorCallback>:
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop

08011398 <TIM_DMAError>:
{
 8011398:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801139a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801139c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801139e:	4283      	cmp	r3, r0
 80113a0:	d01c      	beq.n	80113dc <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80113a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113a4:	4283      	cmp	r3, r0
 80113a6:	d00e      	beq.n	80113c6 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80113a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80113aa:	4283      	cmp	r3, r0
 80113ac:	d020      	beq.n	80113f0 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80113ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80113b0:	4283      	cmp	r3, r0
 80113b2:	d028      	beq.n	8011406 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 80113b4:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80113b6:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 80113b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 80113bc:	f7ff ffea 	bl	8011394 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113c0:	2300      	movs	r3, #0
 80113c2:	7723      	strb	r3, [r4, #28]
}
 80113c4:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80113c6:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113c8:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 80113ca:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80113cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113d0:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80113d2:	f7ff ffdf 	bl	8011394 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113d6:	2300      	movs	r3, #0
 80113d8:	7723      	strb	r3, [r4, #28]
}
 80113da:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80113dc:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80113de:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80113e0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80113e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 80113e6:	f7ff ffd5 	bl	8011394 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113ea:	2300      	movs	r3, #0
 80113ec:	7723      	strb	r3, [r4, #28]
}
 80113ee:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80113f0:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113f2:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 80113f4:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80113f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113fa:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80113fc:	f7ff ffca 	bl	8011394 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011400:	2300      	movs	r3, #0
 8011402:	7723      	strb	r3, [r4, #28]
}
 8011404:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011406:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011408:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 801140a:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801140c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011410:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8011412:	f7ff ffbf 	bl	8011394 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011416:	2300      	movs	r3, #0
 8011418:	7723      	strb	r3, [r4, #28]
}
 801141a:	bd10      	pop	{r4, pc}

0801141c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801141c:	4a3c      	ldr	r2, [pc, #240]	; (8011510 <TIM_Base_SetConfig+0xf4>)
 801141e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8011422:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011424:	eba0 0202 	sub.w	r2, r0, r2
 8011428:	fab2 f282 	clz	r2, r2
{
 801142c:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801142e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8011432:	d010      	beq.n	8011456 <TIM_Base_SetConfig+0x3a>
 8011434:	b97a      	cbnz	r2, 8011456 <TIM_Base_SetConfig+0x3a>
 8011436:	4d37      	ldr	r5, [pc, #220]	; (8011514 <TIM_Base_SetConfig+0xf8>)
 8011438:	4c37      	ldr	r4, [pc, #220]	; (8011518 <TIM_Base_SetConfig+0xfc>)
 801143a:	42a0      	cmp	r0, r4
 801143c:	bf18      	it	ne
 801143e:	42a8      	cmpne	r0, r5
 8011440:	d12b      	bne.n	801149a <TIM_Base_SetConfig+0x7e>
 8011442:	4c36      	ldr	r4, [pc, #216]	; (801151c <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011448:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801144a:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 801144c:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801144e:	fab4 f484 	clz	r4, r4
 8011452:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011454:	e008      	b.n	8011468 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8011456:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801145c:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801145e:	4c2f      	ldr	r4, [pc, #188]	; (801151c <TIM_Base_SetConfig+0x100>)
 8011460:	1b04      	subs	r4, r0, r4
 8011462:	fab4 f484 	clz	r4, r4
 8011466:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011468:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 801146a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801146e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011470:	694d      	ldr	r5, [r1, #20]
 8011472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011476:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011478:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801147a:	688b      	ldr	r3, [r1, #8]
 801147c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801147e:	680b      	ldr	r3, [r1, #0]
 8011480:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011482:	b922      	cbnz	r2, 801148e <TIM_Base_SetConfig+0x72>
 8011484:	b91c      	cbnz	r4, 801148e <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 8011486:	2301      	movs	r3, #1
}
 8011488:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 801148a:	6143      	str	r3, [r0, #20]
}
 801148c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 801148e:	690b      	ldr	r3, [r1, #16]
 8011490:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011492:	2301      	movs	r3, #1
}
 8011494:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8011496:	6143      	str	r3, [r0, #20]
}
 8011498:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801149a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801149e:	42a0      	cmp	r0, r4
 80114a0:	d024      	beq.n	80114ec <TIM_Base_SetConfig+0xd0>
 80114a2:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80114a6:	42a0      	cmp	r0, r4
 80114a8:	d020      	beq.n	80114ec <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114aa:	4c1d      	ldr	r4, [pc, #116]	; (8011520 <TIM_Base_SetConfig+0x104>)
 80114ac:	4d1d      	ldr	r5, [pc, #116]	; (8011524 <TIM_Base_SetConfig+0x108>)
 80114ae:	42a0      	cmp	r0, r4
 80114b0:	bf18      	it	ne
 80114b2:	42a8      	cmpne	r0, r5
 80114b4:	bf0c      	ite	eq
 80114b6:	2401      	moveq	r4, #1
 80114b8:	2400      	movne	r4, #0
 80114ba:	d027      	beq.n	801150c <TIM_Base_SetConfig+0xf0>
 80114bc:	4e1a      	ldr	r6, [pc, #104]	; (8011528 <TIM_Base_SetConfig+0x10c>)
 80114be:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 80114c2:	42a8      	cmp	r0, r5
 80114c4:	bf18      	it	ne
 80114c6:	42b0      	cmpne	r0, r6
 80114c8:	d0ce      	beq.n	8011468 <TIM_Base_SetConfig+0x4c>
 80114ca:	4c18      	ldr	r4, [pc, #96]	; (801152c <TIM_Base_SetConfig+0x110>)
 80114cc:	42a0      	cmp	r0, r4
 80114ce:	d01d      	beq.n	801150c <TIM_Base_SetConfig+0xf0>
 80114d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80114d4:	42a0      	cmp	r0, r4
 80114d6:	d019      	beq.n	801150c <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114d8:	694d      	ldr	r5, [r1, #20]
 80114da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114de:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80114e0:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114e2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80114e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80114e8:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114ea:	e7cc      	b.n	8011486 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80114ec:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80114ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114f2:	4c0a      	ldr	r4, [pc, #40]	; (801151c <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 80114f4:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114f6:	4d0e      	ldr	r5, [pc, #56]	; (8011530 <TIM_Base_SetConfig+0x114>)
 80114f8:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114fa:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114fc:	fab4 f484 	clz	r4, r4
 8011500:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011504:	d0b0      	beq.n	8011468 <TIM_Base_SetConfig+0x4c>
 8011506:	2c00      	cmp	r4, #0
 8011508:	d1ae      	bne.n	8011468 <TIM_Base_SetConfig+0x4c>
 801150a:	e7ce      	b.n	80114aa <TIM_Base_SetConfig+0x8e>
 801150c:	2400      	movs	r4, #0
 801150e:	e7ab      	b.n	8011468 <TIM_Base_SetConfig+0x4c>
 8011510:	40010000 	.word	0x40010000
 8011514:	40000400 	.word	0x40000400
 8011518:	40000800 	.word	0x40000800
 801151c:	40010400 	.word	0x40010400
 8011520:	40014400 	.word	0x40014400
 8011524:	40014000 	.word	0x40014000
 8011528:	40014800 	.word	0x40014800
 801152c:	40001c00 	.word	0x40001c00
 8011530:	40000c00 	.word	0x40000c00

08011534 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011534:	2800      	cmp	r0, #0
 8011536:	f000 80b8 	beq.w	80116aa <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801153a:	6802      	ldr	r2, [r0, #0]
 801153c:	4b5f      	ldr	r3, [pc, #380]	; (80116bc <HAL_TIM_Base_Init+0x188>)
 801153e:	4960      	ldr	r1, [pc, #384]	; (80116c0 <HAL_TIM_Base_Init+0x18c>)
 8011540:	429a      	cmp	r2, r3
 8011542:	bf18      	it	ne
 8011544:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011548:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801154a:	bf14      	ite	ne
 801154c:	2301      	movne	r3, #1
 801154e:	2300      	moveq	r3, #0
 8011550:	4604      	mov	r4, r0
 8011552:	485c      	ldr	r0, [pc, #368]	; (80116c4 <HAL_TIM_Base_Init+0x190>)
 8011554:	4282      	cmp	r2, r0
 8011556:	bf0c      	ite	eq
 8011558:	2300      	moveq	r3, #0
 801155a:	f003 0301 	andne.w	r3, r3, #1
 801155e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011562:	428a      	cmp	r2, r1
 8011564:	bf0c      	ite	eq
 8011566:	2300      	moveq	r3, #0
 8011568:	f003 0301 	andne.w	r3, r3, #1
 801156c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011570:	4282      	cmp	r2, r0
 8011572:	bf0c      	ite	eq
 8011574:	2300      	moveq	r3, #0
 8011576:	f003 0301 	andne.w	r3, r3, #1
 801157a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801157e:	428a      	cmp	r2, r1
 8011580:	bf0c      	ite	eq
 8011582:	2300      	moveq	r3, #0
 8011584:	f003 0301 	andne.w	r3, r3, #1
 8011588:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801158c:	4282      	cmp	r2, r0
 801158e:	bf0c      	ite	eq
 8011590:	2300      	moveq	r3, #0
 8011592:	f003 0301 	andne.w	r3, r3, #1
 8011596:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801159a:	428a      	cmp	r2, r1
 801159c:	bf0c      	ite	eq
 801159e:	2300      	moveq	r3, #0
 80115a0:	f003 0301 	andne.w	r3, r3, #1
 80115a4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80115a8:	4282      	cmp	r2, r0
 80115aa:	bf0c      	ite	eq
 80115ac:	2300      	moveq	r3, #0
 80115ae:	f003 0301 	andne.w	r3, r3, #1
 80115b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80115b6:	428a      	cmp	r2, r1
 80115b8:	bf0c      	ite	eq
 80115ba:	2300      	moveq	r3, #0
 80115bc:	f003 0301 	andne.w	r3, r3, #1
 80115c0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80115c4:	4282      	cmp	r2, r0
 80115c6:	bf0c      	ite	eq
 80115c8:	2300      	moveq	r3, #0
 80115ca:	f003 0301 	andne.w	r3, r3, #1
 80115ce:	428a      	cmp	r2, r1
 80115d0:	bf0c      	ite	eq
 80115d2:	2300      	moveq	r3, #0
 80115d4:	f003 0301 	andne.w	r3, r3, #1
 80115d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80115dc:	428a      	cmp	r2, r1
 80115de:	bf0c      	ite	eq
 80115e0:	2300      	moveq	r3, #0
 80115e2:	f003 0301 	andne.w	r3, r3, #1
 80115e6:	b113      	cbz	r3, 80115ee <HAL_TIM_Base_Init+0xba>
 80115e8:	4b37      	ldr	r3, [pc, #220]	; (80116c8 <HAL_TIM_Base_Init+0x194>)
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d15f      	bne.n	80116ae <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	f023 0210 	bic.w	r2, r3, #16
 80115f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80115f8:	2920      	cmp	r1, #32
 80115fa:	bf18      	it	ne
 80115fc:	2a00      	cmpne	r2, #0
 80115fe:	d001      	beq.n	8011604 <HAL_TIM_Base_Init+0xd0>
 8011600:	2b40      	cmp	r3, #64	; 0x40
 8011602:	d14c      	bne.n	801169e <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011604:	6923      	ldr	r3, [r4, #16]
 8011606:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801160a:	d002      	beq.n	8011612 <HAL_TIM_Base_Init+0xde>
 801160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011610:	d12b      	bne.n	801166a <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011612:	69a3      	ldr	r3, [r4, #24]
 8011614:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011618:	d130      	bne.n	801167c <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801161a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801161e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011622:	b3b3      	cbz	r3, 8011692 <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011624:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011626:	2302      	movs	r3, #2
 8011628:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801162c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011630:	f7ff fef4 	bl	801141c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011634:	2301      	movs	r3, #1
  return HAL_OK;
 8011636:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011638:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801163c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011640:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011644:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801164c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011654:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801165c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011660:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011668:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801166a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801166e:	4817      	ldr	r0, [pc, #92]	; (80116cc <HAL_TIM_Base_Init+0x198>)
 8011670:	f7f4 f938 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011674:	69a3      	ldr	r3, [r4, #24]
 8011676:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801167a:	d0ce      	beq.n	801161a <HAL_TIM_Base_Init+0xe6>
 801167c:	f240 1119 	movw	r1, #281	; 0x119
 8011680:	4812      	ldr	r0, [pc, #72]	; (80116cc <HAL_TIM_Base_Init+0x198>)
 8011682:	f7f4 f92f 	bl	80058e4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011686:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801168a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801168e:	2b00      	cmp	r3, #0
 8011690:	d1c8      	bne.n	8011624 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 8011692:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011694:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011698:	f7f6 f920 	bl	80078dc <HAL_TIM_Base_MspInit>
 801169c:	e7c2      	b.n	8011624 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801169e:	f240 1117 	movw	r1, #279	; 0x117
 80116a2:	480a      	ldr	r0, [pc, #40]	; (80116cc <HAL_TIM_Base_Init+0x198>)
 80116a4:	f7f4 f91e 	bl	80058e4 <assert_failed>
 80116a8:	e7ac      	b.n	8011604 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 80116aa:	2001      	movs	r0, #1
}
 80116ac:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80116ae:	f44f 718b 	mov.w	r1, #278	; 0x116
 80116b2:	4806      	ldr	r0, [pc, #24]	; (80116cc <HAL_TIM_Base_Init+0x198>)
 80116b4:	f7f4 f916 	bl	80058e4 <assert_failed>
 80116b8:	e799      	b.n	80115ee <HAL_TIM_Base_Init+0xba>
 80116ba:	bf00      	nop
 80116bc:	40010000 	.word	0x40010000
 80116c0:	40000800 	.word	0x40000800
 80116c4:	40000400 	.word	0x40000400
 80116c8:	40002000 	.word	0x40002000
 80116cc:	0802e5cc 	.word	0x0802e5cc

080116d0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f000 80b8 	beq.w	8011846 <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80116d6:	6802      	ldr	r2, [r0, #0]
 80116d8:	4b5f      	ldr	r3, [pc, #380]	; (8011858 <HAL_TIM_OC_Init+0x188>)
 80116da:	4960      	ldr	r1, [pc, #384]	; (801185c <HAL_TIM_OC_Init+0x18c>)
 80116dc:	429a      	cmp	r2, r3
 80116de:	bf18      	it	ne
 80116e0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80116e4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80116e6:	bf14      	ite	ne
 80116e8:	2301      	movne	r3, #1
 80116ea:	2300      	moveq	r3, #0
 80116ec:	4604      	mov	r4, r0
 80116ee:	485c      	ldr	r0, [pc, #368]	; (8011860 <HAL_TIM_OC_Init+0x190>)
 80116f0:	4282      	cmp	r2, r0
 80116f2:	bf0c      	ite	eq
 80116f4:	2300      	moveq	r3, #0
 80116f6:	f003 0301 	andne.w	r3, r3, #1
 80116fa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80116fe:	428a      	cmp	r2, r1
 8011700:	bf0c      	ite	eq
 8011702:	2300      	moveq	r3, #0
 8011704:	f003 0301 	andne.w	r3, r3, #1
 8011708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801170c:	4282      	cmp	r2, r0
 801170e:	bf0c      	ite	eq
 8011710:	2300      	moveq	r3, #0
 8011712:	f003 0301 	andne.w	r3, r3, #1
 8011716:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801171a:	428a      	cmp	r2, r1
 801171c:	bf0c      	ite	eq
 801171e:	2300      	moveq	r3, #0
 8011720:	f003 0301 	andne.w	r3, r3, #1
 8011724:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011728:	4282      	cmp	r2, r0
 801172a:	bf0c      	ite	eq
 801172c:	2300      	moveq	r3, #0
 801172e:	f003 0301 	andne.w	r3, r3, #1
 8011732:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011736:	428a      	cmp	r2, r1
 8011738:	bf0c      	ite	eq
 801173a:	2300      	moveq	r3, #0
 801173c:	f003 0301 	andne.w	r3, r3, #1
 8011740:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011744:	4282      	cmp	r2, r0
 8011746:	bf0c      	ite	eq
 8011748:	2300      	moveq	r3, #0
 801174a:	f003 0301 	andne.w	r3, r3, #1
 801174e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011752:	428a      	cmp	r2, r1
 8011754:	bf0c      	ite	eq
 8011756:	2300      	moveq	r3, #0
 8011758:	f003 0301 	andne.w	r3, r3, #1
 801175c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011760:	4282      	cmp	r2, r0
 8011762:	bf0c      	ite	eq
 8011764:	2300      	moveq	r3, #0
 8011766:	f003 0301 	andne.w	r3, r3, #1
 801176a:	428a      	cmp	r2, r1
 801176c:	bf0c      	ite	eq
 801176e:	2300      	moveq	r3, #0
 8011770:	f003 0301 	andne.w	r3, r3, #1
 8011774:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011778:	428a      	cmp	r2, r1
 801177a:	bf0c      	ite	eq
 801177c:	2300      	moveq	r3, #0
 801177e:	f003 0301 	andne.w	r3, r3, #1
 8011782:	b113      	cbz	r3, 801178a <HAL_TIM_OC_Init+0xba>
 8011784:	4b37      	ldr	r3, [pc, #220]	; (8011864 <HAL_TIM_OC_Init+0x194>)
 8011786:	429a      	cmp	r2, r3
 8011788:	d15f      	bne.n	801184a <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801178a:	68a3      	ldr	r3, [r4, #8]
 801178c:	f023 0210 	bic.w	r2, r3, #16
 8011790:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011794:	2920      	cmp	r1, #32
 8011796:	bf18      	it	ne
 8011798:	2a00      	cmpne	r2, #0
 801179a:	d001      	beq.n	80117a0 <HAL_TIM_OC_Init+0xd0>
 801179c:	2b40      	cmp	r3, #64	; 0x40
 801179e:	d14c      	bne.n	801183a <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80117a6:	d002      	beq.n	80117ae <HAL_TIM_OC_Init+0xde>
 80117a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117ac:	d12b      	bne.n	8011806 <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80117ae:	69a3      	ldr	r3, [r4, #24]
 80117b0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80117b4:	d130      	bne.n	8011818 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80117b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80117ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80117be:	b3b3      	cbz	r3, 801182e <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80117c0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80117c2:	2302      	movs	r3, #2
 80117c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80117c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80117cc:	f7ff fe26 	bl	801141c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117d0:	2301      	movs	r3, #1
  return HAL_OK;
 80117d2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80117dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80117e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80117e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80117e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80117f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80117fc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011804:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011806:	f240 2197 	movw	r1, #663	; 0x297
 801180a:	4817      	ldr	r0, [pc, #92]	; (8011868 <HAL_TIM_OC_Init+0x198>)
 801180c:	f7f4 f86a 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011810:	69a3      	ldr	r3, [r4, #24]
 8011812:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011816:	d0ce      	beq.n	80117b6 <HAL_TIM_OC_Init+0xe6>
 8011818:	f44f 7126 	mov.w	r1, #664	; 0x298
 801181c:	4812      	ldr	r0, [pc, #72]	; (8011868 <HAL_TIM_OC_Init+0x198>)
 801181e:	f7f4 f861 	bl	80058e4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011822:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1c8      	bne.n	80117c0 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 801182e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011830:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8011834:	f7ff f90e 	bl	8010a54 <HAL_TIM_OC_MspInit>
 8011838:	e7c2      	b.n	80117c0 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801183a:	f240 2196 	movw	r1, #662	; 0x296
 801183e:	480a      	ldr	r0, [pc, #40]	; (8011868 <HAL_TIM_OC_Init+0x198>)
 8011840:	f7f4 f850 	bl	80058e4 <assert_failed>
 8011844:	e7ac      	b.n	80117a0 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 8011846:	2001      	movs	r0, #1
}
 8011848:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801184a:	f240 2195 	movw	r1, #661	; 0x295
 801184e:	4806      	ldr	r0, [pc, #24]	; (8011868 <HAL_TIM_OC_Init+0x198>)
 8011850:	f7f4 f848 	bl	80058e4 <assert_failed>
 8011854:	e799      	b.n	801178a <HAL_TIM_OC_Init+0xba>
 8011856:	bf00      	nop
 8011858:	40010000 	.word	0x40010000
 801185c:	40000800 	.word	0x40000800
 8011860:	40000400 	.word	0x40000400
 8011864:	40002000 	.word	0x40002000
 8011868:	0802e5cc 	.word	0x0802e5cc

0801186c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 801186c:	2800      	cmp	r0, #0
 801186e:	f000 80b8 	beq.w	80119e2 <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011872:	6802      	ldr	r2, [r0, #0]
 8011874:	4b5f      	ldr	r3, [pc, #380]	; (80119f4 <HAL_TIM_PWM_Init+0x188>)
 8011876:	4960      	ldr	r1, [pc, #384]	; (80119f8 <HAL_TIM_PWM_Init+0x18c>)
 8011878:	429a      	cmp	r2, r3
 801187a:	bf18      	it	ne
 801187c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011880:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011882:	bf14      	ite	ne
 8011884:	2301      	movne	r3, #1
 8011886:	2300      	moveq	r3, #0
 8011888:	4604      	mov	r4, r0
 801188a:	485c      	ldr	r0, [pc, #368]	; (80119fc <HAL_TIM_PWM_Init+0x190>)
 801188c:	4282      	cmp	r2, r0
 801188e:	bf0c      	ite	eq
 8011890:	2300      	moveq	r3, #0
 8011892:	f003 0301 	andne.w	r3, r3, #1
 8011896:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801189a:	428a      	cmp	r2, r1
 801189c:	bf0c      	ite	eq
 801189e:	2300      	moveq	r3, #0
 80118a0:	f003 0301 	andne.w	r3, r3, #1
 80118a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118a8:	4282      	cmp	r2, r0
 80118aa:	bf0c      	ite	eq
 80118ac:	2300      	moveq	r3, #0
 80118ae:	f003 0301 	andne.w	r3, r3, #1
 80118b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80118b6:	428a      	cmp	r2, r1
 80118b8:	bf0c      	ite	eq
 80118ba:	2300      	moveq	r3, #0
 80118bc:	f003 0301 	andne.w	r3, r3, #1
 80118c0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80118c4:	4282      	cmp	r2, r0
 80118c6:	bf0c      	ite	eq
 80118c8:	2300      	moveq	r3, #0
 80118ca:	f003 0301 	andne.w	r3, r3, #1
 80118ce:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80118d2:	428a      	cmp	r2, r1
 80118d4:	bf0c      	ite	eq
 80118d6:	2300      	moveq	r3, #0
 80118d8:	f003 0301 	andne.w	r3, r3, #1
 80118dc:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80118e0:	4282      	cmp	r2, r0
 80118e2:	bf0c      	ite	eq
 80118e4:	2300      	moveq	r3, #0
 80118e6:	f003 0301 	andne.w	r3, r3, #1
 80118ea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80118ee:	428a      	cmp	r2, r1
 80118f0:	bf0c      	ite	eq
 80118f2:	2300      	moveq	r3, #0
 80118f4:	f003 0301 	andne.w	r3, r3, #1
 80118f8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80118fc:	4282      	cmp	r2, r0
 80118fe:	bf0c      	ite	eq
 8011900:	2300      	moveq	r3, #0
 8011902:	f003 0301 	andne.w	r3, r3, #1
 8011906:	428a      	cmp	r2, r1
 8011908:	bf0c      	ite	eq
 801190a:	2300      	moveq	r3, #0
 801190c:	f003 0301 	andne.w	r3, r3, #1
 8011910:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011914:	428a      	cmp	r2, r1
 8011916:	bf0c      	ite	eq
 8011918:	2300      	moveq	r3, #0
 801191a:	f003 0301 	andne.w	r3, r3, #1
 801191e:	b113      	cbz	r3, 8011926 <HAL_TIM_PWM_Init+0xba>
 8011920:	4b37      	ldr	r3, [pc, #220]	; (8011a00 <HAL_TIM_PWM_Init+0x194>)
 8011922:	429a      	cmp	r2, r3
 8011924:	d15f      	bne.n	80119e6 <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011926:	68a3      	ldr	r3, [r4, #8]
 8011928:	f023 0210 	bic.w	r2, r3, #16
 801192c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011930:	2920      	cmp	r1, #32
 8011932:	bf18      	it	ne
 8011934:	2a00      	cmpne	r2, #0
 8011936:	d001      	beq.n	801193c <HAL_TIM_PWM_Init+0xd0>
 8011938:	2b40      	cmp	r3, #64	; 0x40
 801193a:	d14c      	bne.n	80119d6 <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801193c:	6923      	ldr	r3, [r4, #16]
 801193e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011942:	d002      	beq.n	801194a <HAL_TIM_PWM_Init+0xde>
 8011944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011948:	d12b      	bne.n	80119a2 <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801194a:	69a3      	ldr	r3, [r4, #24]
 801194c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011950:	d130      	bne.n	80119b4 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011952:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801195a:	b3b3      	cbz	r3, 80119ca <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801195c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801195e:	2302      	movs	r3, #2
 8011960:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011964:	f851 0b04 	ldr.w	r0, [r1], #4
 8011968:	f7ff fd58 	bl	801141c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801196c:	2301      	movs	r3, #1
  return HAL_OK;
 801196e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011970:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011974:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011978:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801197c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011980:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801198c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011994:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011998:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801199c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80119a0:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80119a2:	f240 5132 	movw	r1, #1330	; 0x532
 80119a6:	4817      	ldr	r0, [pc, #92]	; (8011a04 <HAL_TIM_PWM_Init+0x198>)
 80119a8:	f7f3 ff9c 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80119ac:	69a3      	ldr	r3, [r4, #24]
 80119ae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80119b2:	d0ce      	beq.n	8011952 <HAL_TIM_PWM_Init+0xe6>
 80119b4:	f240 5133 	movw	r1, #1331	; 0x533
 80119b8:	4812      	ldr	r0, [pc, #72]	; (8011a04 <HAL_TIM_PWM_Init+0x198>)
 80119ba:	f7f3 ff93 	bl	80058e4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80119be:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80119c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1c8      	bne.n	801195c <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 80119ca:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80119cc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80119d0:	f7ff f842 	bl	8010a58 <HAL_TIM_PWM_MspInit>
 80119d4:	e7c2      	b.n	801195c <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80119d6:	f240 5131 	movw	r1, #1329	; 0x531
 80119da:	480a      	ldr	r0, [pc, #40]	; (8011a04 <HAL_TIM_PWM_Init+0x198>)
 80119dc:	f7f3 ff82 	bl	80058e4 <assert_failed>
 80119e0:	e7ac      	b.n	801193c <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 80119e2:	2001      	movs	r0, #1
}
 80119e4:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80119e6:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 80119ea:	4806      	ldr	r0, [pc, #24]	; (8011a04 <HAL_TIM_PWM_Init+0x198>)
 80119ec:	f7f3 ff7a 	bl	80058e4 <assert_failed>
 80119f0:	e799      	b.n	8011926 <HAL_TIM_PWM_Init+0xba>
 80119f2:	bf00      	nop
 80119f4:	40010000 	.word	0x40010000
 80119f8:	40000800 	.word	0x40000800
 80119fc:	40000400 	.word	0x40000400
 8011a00:	40002000 	.word	0x40002000
 8011a04:	0802e5cc 	.word	0x0802e5cc

08011a08 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	f000 80b8 	beq.w	8011b7e <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011a0e:	6802      	ldr	r2, [r0, #0]
 8011a10:	4b5f      	ldr	r3, [pc, #380]	; (8011b90 <HAL_TIM_IC_Init+0x188>)
 8011a12:	4960      	ldr	r1, [pc, #384]	; (8011b94 <HAL_TIM_IC_Init+0x18c>)
 8011a14:	429a      	cmp	r2, r3
 8011a16:	bf18      	it	ne
 8011a18:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011a1c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011a1e:	bf14      	ite	ne
 8011a20:	2301      	movne	r3, #1
 8011a22:	2300      	moveq	r3, #0
 8011a24:	4604      	mov	r4, r0
 8011a26:	485c      	ldr	r0, [pc, #368]	; (8011b98 <HAL_TIM_IC_Init+0x190>)
 8011a28:	4282      	cmp	r2, r0
 8011a2a:	bf0c      	ite	eq
 8011a2c:	2300      	moveq	r3, #0
 8011a2e:	f003 0301 	andne.w	r3, r3, #1
 8011a32:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a36:	428a      	cmp	r2, r1
 8011a38:	bf0c      	ite	eq
 8011a3a:	2300      	moveq	r3, #0
 8011a3c:	f003 0301 	andne.w	r3, r3, #1
 8011a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a44:	4282      	cmp	r2, r0
 8011a46:	bf0c      	ite	eq
 8011a48:	2300      	moveq	r3, #0
 8011a4a:	f003 0301 	andne.w	r3, r3, #1
 8011a4e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a52:	428a      	cmp	r2, r1
 8011a54:	bf0c      	ite	eq
 8011a56:	2300      	moveq	r3, #0
 8011a58:	f003 0301 	andne.w	r3, r3, #1
 8011a5c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011a60:	4282      	cmp	r2, r0
 8011a62:	bf0c      	ite	eq
 8011a64:	2300      	moveq	r3, #0
 8011a66:	f003 0301 	andne.w	r3, r3, #1
 8011a6a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011a6e:	428a      	cmp	r2, r1
 8011a70:	bf0c      	ite	eq
 8011a72:	2300      	moveq	r3, #0
 8011a74:	f003 0301 	andne.w	r3, r3, #1
 8011a78:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011a7c:	4282      	cmp	r2, r0
 8011a7e:	bf0c      	ite	eq
 8011a80:	2300      	moveq	r3, #0
 8011a82:	f003 0301 	andne.w	r3, r3, #1
 8011a86:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a8a:	428a      	cmp	r2, r1
 8011a8c:	bf0c      	ite	eq
 8011a8e:	2300      	moveq	r3, #0
 8011a90:	f003 0301 	andne.w	r3, r3, #1
 8011a94:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011a98:	4282      	cmp	r2, r0
 8011a9a:	bf0c      	ite	eq
 8011a9c:	2300      	moveq	r3, #0
 8011a9e:	f003 0301 	andne.w	r3, r3, #1
 8011aa2:	428a      	cmp	r2, r1
 8011aa4:	bf0c      	ite	eq
 8011aa6:	2300      	moveq	r3, #0
 8011aa8:	f003 0301 	andne.w	r3, r3, #1
 8011aac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011ab0:	428a      	cmp	r2, r1
 8011ab2:	bf0c      	ite	eq
 8011ab4:	2300      	moveq	r3, #0
 8011ab6:	f003 0301 	andne.w	r3, r3, #1
 8011aba:	b113      	cbz	r3, 8011ac2 <HAL_TIM_IC_Init+0xba>
 8011abc:	4b37      	ldr	r3, [pc, #220]	; (8011b9c <HAL_TIM_IC_Init+0x194>)
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d15f      	bne.n	8011b82 <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011ac2:	68a3      	ldr	r3, [r4, #8]
 8011ac4:	f023 0210 	bic.w	r2, r3, #16
 8011ac8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011acc:	2920      	cmp	r1, #32
 8011ace:	bf18      	it	ne
 8011ad0:	2a00      	cmpne	r2, #0
 8011ad2:	d001      	beq.n	8011ad8 <HAL_TIM_IC_Init+0xd0>
 8011ad4:	2b40      	cmp	r3, #64	; 0x40
 8011ad6:	d14c      	bne.n	8011b72 <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011ad8:	6923      	ldr	r3, [r4, #16]
 8011ada:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011ade:	d002      	beq.n	8011ae6 <HAL_TIM_IC_Init+0xde>
 8011ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ae4:	d12b      	bne.n	8011b3e <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011ae6:	69a3      	ldr	r3, [r4, #24]
 8011ae8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011aec:	d130      	bne.n	8011b50 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011aee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011af6:	b3b3      	cbz	r3, 8011b66 <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011af8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011afa:	2302      	movs	r3, #2
 8011afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b00:	f851 0b04 	ldr.w	r0, [r1], #4
 8011b04:	f7ff fc8a 	bl	801141c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b08:	2301      	movs	r3, #1
  return HAL_OK;
 8011b0a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b0c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011b14:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011b18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b30:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011b34:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011b3c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011b3e:	f240 71cc 	movw	r1, #1996	; 0x7cc
 8011b42:	4817      	ldr	r0, [pc, #92]	; (8011ba0 <HAL_TIM_IC_Init+0x198>)
 8011b44:	f7f3 fece 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011b48:	69a3      	ldr	r3, [r4, #24]
 8011b4a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011b4e:	d0ce      	beq.n	8011aee <HAL_TIM_IC_Init+0xe6>
 8011b50:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8011b54:	4812      	ldr	r0, [pc, #72]	; (8011ba0 <HAL_TIM_IC_Init+0x198>)
 8011b56:	f7f3 fec5 	bl	80058e4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011b5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011b5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1c8      	bne.n	8011af8 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8011b66:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011b68:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8011b6c:	f7fe ff76 	bl	8010a5c <HAL_TIM_IC_MspInit>
 8011b70:	e7c2      	b.n	8011af8 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011b72:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8011b76:	480a      	ldr	r0, [pc, #40]	; (8011ba0 <HAL_TIM_IC_Init+0x198>)
 8011b78:	f7f3 feb4 	bl	80058e4 <assert_failed>
 8011b7c:	e7ac      	b.n	8011ad8 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 8011b7e:	2001      	movs	r0, #1
}
 8011b80:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011b82:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8011b86:	4806      	ldr	r0, [pc, #24]	; (8011ba0 <HAL_TIM_IC_Init+0x198>)
 8011b88:	f7f3 feac 	bl	80058e4 <assert_failed>
 8011b8c:	e799      	b.n	8011ac2 <HAL_TIM_IC_Init+0xba>
 8011b8e:	bf00      	nop
 8011b90:	40010000 	.word	0x40010000
 8011b94:	40000800 	.word	0x40000800
 8011b98:	40000400 	.word	0x40000400
 8011b9c:	40002000 	.word	0x40002000
 8011ba0:	0802e5cc 	.word	0x0802e5cc

08011ba4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ba4:	6a03      	ldr	r3, [r0, #32]
 8011ba6:	f023 0310 	bic.w	r3, r3, #16
{
 8011baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bae:	6203      	str	r3, [r0, #32]
{
 8011bb0:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8011bb2:	6a05      	ldr	r5, [r0, #32]
{
 8011bb4:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8011bb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011bba:	4b29      	ldr	r3, [pc, #164]	; (8011c60 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8011bbc:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8011bc0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bc2:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011bc4:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bc6:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011bca:	688b      	ldr	r3, [r1, #8]
 8011bcc:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011bd0:	4b24      	ldr	r3, [pc, #144]	; (8011c64 <TIM_OC2_SetConfig+0xc0>)
 8011bd2:	4298      	cmp	r0, r3
 8011bd4:	d00b      	beq.n	8011bee <TIM_OC2_SetConfig+0x4a>
 8011bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bda:	4298      	cmp	r0, r3
 8011bdc:	d007      	beq.n	8011bee <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 8011bde:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8011be0:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011be4:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011be6:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011be8:	6225      	str	r5, [r4, #32]
}
 8011bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011bee:	68f3      	ldr	r3, [r6, #12]
 8011bf0:	f033 0208 	bics.w	r2, r3, #8
 8011bf4:	d123      	bne.n	8011c3e <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011bf6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011bfa:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011bfe:	69b3      	ldr	r3, [r6, #24]
 8011c00:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8011c04:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011c08:	d120      	bne.n	8011c4c <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c0a:	6973      	ldr	r3, [r6, #20]
 8011c0c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011c10:	d107      	bne.n	8011c22 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011c12:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c16:	69b1      	ldr	r1, [r6, #24]
 8011c18:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011c1c:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011c20:	e7dd      	b.n	8011bde <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c22:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8011c26:	4810      	ldr	r0, [pc, #64]	; (8011c68 <TIM_OC2_SetConfig+0xc4>)
 8011c28:	f7f3 fe5c 	bl	80058e4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011c2c:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c30:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011c32:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c34:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011c38:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011c3c:	e7cf      	b.n	8011bde <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011c3e:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8011c42:	4809      	ldr	r0, [pc, #36]	; (8011c68 <TIM_OC2_SetConfig+0xc4>)
 8011c44:	f7f3 fe4e 	bl	80058e4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011c48:	68f3      	ldr	r3, [r6, #12]
 8011c4a:	e7d4      	b.n	8011bf6 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011c4c:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8011c50:	4805      	ldr	r0, [pc, #20]	; (8011c68 <TIM_OC2_SetConfig+0xc4>)
 8011c52:	f7f3 fe47 	bl	80058e4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c56:	6973      	ldr	r3, [r6, #20]
 8011c58:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011c5c:	d0d9      	beq.n	8011c12 <TIM_OC2_SetConfig+0x6e>
 8011c5e:	e7e0      	b.n	8011c22 <TIM_OC2_SetConfig+0x7e>
 8011c60:	feff8cff 	.word	0xfeff8cff
 8011c64:	40010000 	.word	0x40010000
 8011c68:	0802e5cc 	.word	0x0802e5cc

08011c6c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c6c:	2a14      	cmp	r2, #20
{
 8011c6e:	b570      	push	{r4, r5, r6, lr}
 8011c70:	4614      	mov	r4, r2
 8011c72:	4605      	mov	r5, r0
 8011c74:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c76:	d937      	bls.n	8011ce8 <HAL_TIM_OC_ConfigChannel+0x7c>
 8011c78:	2a3c      	cmp	r2, #60	; 0x3c
 8011c7a:	d139      	bne.n	8011cf0 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011c7c:	6833      	ldr	r3, [r6, #0]
 8011c7e:	f023 0210 	bic.w	r2, r3, #16
 8011c82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011c86:	2a40      	cmp	r2, #64	; 0x40
 8011c88:	bf18      	it	ne
 8011c8a:	2b00      	cmpne	r3, #0
 8011c8c:	d003      	beq.n	8011c96 <HAL_TIM_OC_ConfigChannel+0x2a>
 8011c8e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011c92:	f040 8138 	bne.w	8011f06 <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011c96:	68b3      	ldr	r3, [r6, #8]
 8011c98:	f033 0302 	bics.w	r3, r3, #2
 8011c9c:	d12e      	bne.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8011c9e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d033      	beq.n	8011d0e <HAL_TIM_OC_ConfigChannel+0xa2>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011cac:	2c14      	cmp	r4, #20
 8011cae:	d816      	bhi.n	8011cde <HAL_TIM_OC_ConfigChannel+0x72>
 8011cb0:	e8df f014 	tbh	[pc, r4, lsl #1]
 8011cb4:	0015002f 	.word	0x0015002f
 8011cb8:	00150015 	.word	0x00150015
 8011cbc:	00150080 	.word	0x00150080
 8011cc0:	00150015 	.word	0x00150015
 8011cc4:	001500b5 	.word	0x001500b5
 8011cc8:	00150015 	.word	0x00150015
 8011ccc:	001500db 	.word	0x001500db
 8011cd0:	00150015 	.word	0x00150015
 8011cd4:	00150101 	.word	0x00150101
 8011cd8:	00150015 	.word	0x00150015
 8011cdc:	010e      	.short	0x010e
 8011cde:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8011ce8:	4b98      	ldr	r3, [pc, #608]	; (8011f4c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8011cea:	40d3      	lsrs	r3, r2
 8011cec:	07db      	lsls	r3, r3, #31
 8011cee:	d4c5      	bmi.n	8011c7c <HAL_TIM_OC_ConfigChannel+0x10>
 8011cf0:	f640 71df 	movw	r1, #4063	; 0xfdf
 8011cf4:	4896      	ldr	r0, [pc, #600]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011cf6:	f7f3 fdf5 	bl	80058e4 <assert_failed>
 8011cfa:	e7bf      	b.n	8011c7c <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011cfc:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8011d00:	4893      	ldr	r0, [pc, #588]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011d02:	f7f3 fdef 	bl	80058e4 <assert_failed>
  __HAL_LOCK(htim);
 8011d06:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d1cb      	bne.n	8011ca6 <HAL_TIM_OC_ConfigChannel+0x3a>
 8011d0e:	2002      	movs	r0, #2
}
 8011d10:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011d12:	6828      	ldr	r0, [r5, #0]
 8011d14:	4b8f      	ldr	r3, [pc, #572]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011d16:	4a90      	ldr	r2, [pc, #576]	; (8011f58 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011d18:	4298      	cmp	r0, r3
 8011d1a:	bf18      	it	ne
 8011d1c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011d20:	bf14      	ite	ne
 8011d22:	2301      	movne	r3, #1
 8011d24:	2300      	moveq	r3, #0
 8011d26:	4290      	cmp	r0, r2
 8011d28:	bf0c      	ite	eq
 8011d2a:	2300      	moveq	r3, #0
 8011d2c:	f003 0301 	andne.w	r3, r3, #1
 8011d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d34:	4290      	cmp	r0, r2
 8011d36:	bf0c      	ite	eq
 8011d38:	2300      	moveq	r3, #0
 8011d3a:	f003 0301 	andne.w	r3, r3, #1
 8011d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d42:	4290      	cmp	r0, r2
 8011d44:	bf0c      	ite	eq
 8011d46:	2300      	moveq	r3, #0
 8011d48:	f003 0301 	andne.w	r3, r3, #1
 8011d4c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011d50:	4290      	cmp	r0, r2
 8011d52:	bf0c      	ite	eq
 8011d54:	2300      	moveq	r3, #0
 8011d56:	f003 0301 	andne.w	r3, r3, #1
 8011d5a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011d5e:	4290      	cmp	r0, r2
 8011d60:	bf0c      	ite	eq
 8011d62:	2300      	moveq	r3, #0
 8011d64:	f003 0301 	andne.w	r3, r3, #1
 8011d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d6c:	4290      	cmp	r0, r2
 8011d6e:	bf0c      	ite	eq
 8011d70:	2300      	moveq	r3, #0
 8011d72:	f003 0301 	andne.w	r3, r3, #1
 8011d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d7a:	4290      	cmp	r0, r2
 8011d7c:	bf0c      	ite	eq
 8011d7e:	2300      	moveq	r3, #0
 8011d80:	f003 0301 	andne.w	r3, r3, #1
 8011d84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011d88:	4290      	cmp	r0, r2
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2300      	moveq	r3, #0
 8011d8e:	f003 0301 	andne.w	r3, r3, #1
 8011d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d96:	4290      	cmp	r0, r2
 8011d98:	bf0c      	ite	eq
 8011d9a:	2300      	moveq	r3, #0
 8011d9c:	f003 0301 	andne.w	r3, r3, #1
 8011da0:	b11b      	cbz	r3, 8011daa <HAL_TIM_OC_ConfigChannel+0x13e>
 8011da2:	4b6e      	ldr	r3, [pc, #440]	; (8011f5c <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8011da4:	4298      	cmp	r0, r3
 8011da6:	f040 80c9 	bne.w	8011f3c <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011daa:	4631      	mov	r1, r6
 8011dac:	f7fe f9ac 	bl	8010108 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011db0:	2000      	movs	r0, #0
      break;
 8011db2:	e795      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011db4:	6828      	ldr	r0, [r5, #0]
 8011db6:	4b67      	ldr	r3, [pc, #412]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011db8:	4a67      	ldr	r2, [pc, #412]	; (8011f58 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011dba:	4298      	cmp	r0, r3
 8011dbc:	bf18      	it	ne
 8011dbe:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011dc2:	bf14      	ite	ne
 8011dc4:	2301      	movne	r3, #1
 8011dc6:	2300      	moveq	r3, #0
 8011dc8:	4290      	cmp	r0, r2
 8011dca:	bf0c      	ite	eq
 8011dcc:	2300      	moveq	r3, #0
 8011dce:	f003 0301 	andne.w	r3, r3, #1
 8011dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011dd6:	4290      	cmp	r0, r2
 8011dd8:	bf0c      	ite	eq
 8011dda:	2300      	moveq	r3, #0
 8011ddc:	f003 0301 	andne.w	r3, r3, #1
 8011de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011de4:	4290      	cmp	r0, r2
 8011de6:	bf0c      	ite	eq
 8011de8:	2300      	moveq	r3, #0
 8011dea:	f003 0301 	andne.w	r3, r3, #1
 8011dee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011df2:	4290      	cmp	r0, r2
 8011df4:	bf0c      	ite	eq
 8011df6:	2300      	moveq	r3, #0
 8011df8:	f003 0301 	andne.w	r3, r3, #1
 8011dfc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011e00:	4290      	cmp	r0, r2
 8011e02:	bf0c      	ite	eq
 8011e04:	2300      	moveq	r3, #0
 8011e06:	f003 0301 	andne.w	r3, r3, #1
 8011e0a:	b11b      	cbz	r3, 8011e14 <HAL_TIM_OC_ConfigChannel+0x1a8>
 8011e0c:	4b54      	ldr	r3, [pc, #336]	; (8011f60 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8011e0e:	4298      	cmp	r0, r3
 8011e10:	f040 808d 	bne.w	8011f2e <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011e14:	4631      	mov	r1, r6
 8011e16:	f7ff fec5 	bl	8011ba4 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e1a:	2000      	movs	r0, #0
      break;
 8011e1c:	e760      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011e1e:	6828      	ldr	r0, [r5, #0]
 8011e20:	4b4c      	ldr	r3, [pc, #304]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e22:	4a4d      	ldr	r2, [pc, #308]	; (8011f58 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011e24:	4298      	cmp	r0, r3
 8011e26:	bf18      	it	ne
 8011e28:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e2c:	bf14      	ite	ne
 8011e2e:	2301      	movne	r3, #1
 8011e30:	2300      	moveq	r3, #0
 8011e32:	4290      	cmp	r0, r2
 8011e34:	bf0c      	ite	eq
 8011e36:	2300      	moveq	r3, #0
 8011e38:	f003 0301 	andne.w	r3, r3, #1
 8011e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e40:	4290      	cmp	r0, r2
 8011e42:	bf0c      	ite	eq
 8011e44:	2300      	moveq	r3, #0
 8011e46:	f003 0301 	andne.w	r3, r3, #1
 8011e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e4e:	4290      	cmp	r0, r2
 8011e50:	bf0c      	ite	eq
 8011e52:	2300      	moveq	r3, #0
 8011e54:	f003 0301 	andne.w	r3, r3, #1
 8011e58:	b113      	cbz	r3, 8011e60 <HAL_TIM_OC_ConfigChannel+0x1f4>
 8011e5a:	4b42      	ldr	r3, [pc, #264]	; (8011f64 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011e5c:	4298      	cmp	r0, r3
 8011e5e:	d15f      	bne.n	8011f20 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011e60:	4631      	mov	r1, r6
 8011e62:	f7fe f9b1 	bl	80101c8 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e66:	2000      	movs	r0, #0
      break;
 8011e68:	e73a      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011e6a:	6828      	ldr	r0, [r5, #0]
 8011e6c:	4b39      	ldr	r3, [pc, #228]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e6e:	4a3a      	ldr	r2, [pc, #232]	; (8011f58 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011e70:	4298      	cmp	r0, r3
 8011e72:	bf18      	it	ne
 8011e74:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e78:	bf14      	ite	ne
 8011e7a:	2301      	movne	r3, #1
 8011e7c:	2300      	moveq	r3, #0
 8011e7e:	4290      	cmp	r0, r2
 8011e80:	bf0c      	ite	eq
 8011e82:	2300      	moveq	r3, #0
 8011e84:	f003 0301 	andne.w	r3, r3, #1
 8011e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e8c:	4290      	cmp	r0, r2
 8011e8e:	bf0c      	ite	eq
 8011e90:	2300      	moveq	r3, #0
 8011e92:	f003 0301 	andne.w	r3, r3, #1
 8011e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e9a:	4290      	cmp	r0, r2
 8011e9c:	bf0c      	ite	eq
 8011e9e:	2300      	moveq	r3, #0
 8011ea0:	f003 0301 	andne.w	r3, r3, #1
 8011ea4:	b113      	cbz	r3, 8011eac <HAL_TIM_OC_ConfigChannel+0x240>
 8011ea6:	4b2f      	ldr	r3, [pc, #188]	; (8011f64 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011ea8:	4298      	cmp	r0, r3
 8011eaa:	d132      	bne.n	8011f12 <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011eac:	4631      	mov	r1, r6
 8011eae:	f7fe f9ef 	bl	8010290 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011eb2:	2000      	movs	r0, #0
      break;
 8011eb4:	e714      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011eb6:	6828      	ldr	r0, [r5, #0]
 8011eb8:	4b26      	ldr	r3, [pc, #152]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011eba:	4298      	cmp	r0, r3
 8011ebc:	d003      	beq.n	8011ec6 <HAL_TIM_OC_ConfigChannel+0x25a>
 8011ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ec2:	4298      	cmp	r0, r3
 8011ec4:	d118      	bne.n	8011ef8 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	f7fe f8ca 	bl	8010060 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011ecc:	2000      	movs	r0, #0
      break;
 8011ece:	e707      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011ed0:	6828      	ldr	r0, [r5, #0]
 8011ed2:	4b20      	ldr	r3, [pc, #128]	; (8011f54 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011ed4:	4298      	cmp	r0, r3
 8011ed6:	d003      	beq.n	8011ee0 <HAL_TIM_OC_ConfigChannel+0x274>
 8011ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011edc:	4298      	cmp	r0, r3
 8011ede:	d104      	bne.n	8011eea <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	f7fe f8e7 	bl	80100b4 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011ee6:	2000      	movs	r0, #0
      break;
 8011ee8:	e6fa      	b.n	8011ce0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011eea:	4819      	ldr	r0, [pc, #100]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011eec:	f241 011d 	movw	r1, #4125	; 0x101d
 8011ef0:	f7f3 fcf8 	bl	80058e4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ef4:	6828      	ldr	r0, [r5, #0]
 8011ef6:	e7f3      	b.n	8011ee0 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011ef8:	4815      	ldr	r0, [pc, #84]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011efa:	f241 0113 	movw	r1, #4115	; 0x1013
 8011efe:	f7f3 fcf1 	bl	80058e4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011f02:	6828      	ldr	r0, [r5, #0]
 8011f04:	e7df      	b.n	8011ec6 <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011f06:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8011f0a:	4811      	ldr	r0, [pc, #68]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f0c:	f7f3 fcea 	bl	80058e4 <assert_failed>
 8011f10:	e6c1      	b.n	8011c96 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011f12:	480f      	ldr	r0, [pc, #60]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f14:	f241 0109 	movw	r1, #4105	; 0x1009
 8011f18:	f7f3 fce4 	bl	80058e4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f1c:	6828      	ldr	r0, [r5, #0]
 8011f1e:	e7c5      	b.n	8011eac <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011f20:	480b      	ldr	r0, [pc, #44]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f22:	f640 71ff 	movw	r1, #4095	; 0xfff
 8011f26:	f7f3 fcdd 	bl	80058e4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f2a:	6828      	ldr	r0, [r5, #0]
 8011f2c:	e798      	b.n	8011e60 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011f2e:	4808      	ldr	r0, [pc, #32]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f30:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011f34:	f7f3 fcd6 	bl	80058e4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f38:	6828      	ldr	r0, [r5, #0]
 8011f3a:	e76b      	b.n	8011e14 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011f3c:	4804      	ldr	r0, [pc, #16]	; (8011f50 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f3e:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8011f42:	f7f3 fccf 	bl	80058e4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f46:	6828      	ldr	r0, [r5, #0]
 8011f48:	e72f      	b.n	8011daa <HAL_TIM_OC_ConfigChannel+0x13e>
 8011f4a:	bf00      	nop
 8011f4c:	00111111 	.word	0x00111111
 8011f50:	0802e5cc 	.word	0x0802e5cc
 8011f54:	40010000 	.word	0x40010000
 8011f58:	40000400 	.word	0x40000400
 8011f5c:	40002000 	.word	0x40002000
 8011f60:	40001800 	.word	0x40001800
 8011f64:	40010400 	.word	0x40010400

08011f68 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f68:	2a14      	cmp	r2, #20
{
 8011f6a:	b570      	push	{r4, r5, r6, lr}
 8011f6c:	4616      	mov	r6, r2
 8011f6e:	4605      	mov	r5, r0
 8011f70:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f72:	d933      	bls.n	8011fdc <HAL_TIM_PWM_ConfigChannel+0x74>
 8011f74:	2a3c      	cmp	r2, #60	; 0x3c
 8011f76:	d135      	bne.n	8011fe4 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011f78:	6822      	ldr	r2, [r4, #0]
 8011f7a:	4b90      	ldr	r3, [pc, #576]	; (80121bc <HAL_TIM_PWM_ConfigChannel+0x254>)
 8011f7c:	4013      	ands	r3, r2
 8011f7e:	2b60      	cmp	r3, #96	; 0x60
 8011f80:	d004      	beq.n	8011f8c <HAL_TIM_PWM_ConfigChannel+0x24>
 8011f82:	f022 0210 	bic.w	r2, r2, #16
 8011f86:	4b8e      	ldr	r3, [pc, #568]	; (80121c0 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d147      	bne.n	801201c <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011f8c:	68a3      	ldr	r3, [r4, #8]
 8011f8e:	f033 0302 	bics.w	r3, r3, #2
 8011f92:	d13d      	bne.n	8012010 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011f94:	6923      	ldr	r3, [r4, #16]
 8011f96:	f033 0304 	bics.w	r3, r3, #4
 8011f9a:	d12e      	bne.n	8011ffa <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8011f9c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d033      	beq.n	801200c <HAL_TIM_PWM_ConfigChannel+0xa4>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011faa:	2e14      	cmp	r6, #20
 8011fac:	d820      	bhi.n	8011ff0 <HAL_TIM_PWM_ConfigChannel+0x88>
 8011fae:	e8df f016 	tbh	[pc, r6, lsl #1]
 8011fb2:	00a7      	.short	0x00a7
 8011fb4:	001f001f 	.word	0x001f001f
 8011fb8:	0115001f 	.word	0x0115001f
 8011fbc:	001f001f 	.word	0x001f001f
 8011fc0:	0157001f 	.word	0x0157001f
 8011fc4:	001f001f 	.word	0x001f001f
 8011fc8:	0057001f 	.word	0x0057001f
 8011fcc:	001f001f 	.word	0x001f001f
 8011fd0:	008c001f 	.word	0x008c001f
 8011fd4:	001f001f 	.word	0x001f001f
 8011fd8:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8011fdc:	4b79      	ldr	r3, [pc, #484]	; (80121c4 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8011fde:	40d3      	lsrs	r3, r2
 8011fe0:	07db      	lsls	r3, r3, #31
 8011fe2:	d4c9      	bmi.n	8011f78 <HAL_TIM_PWM_ConfigChannel+0x10>
 8011fe4:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8011fe8:	4877      	ldr	r0, [pc, #476]	; (80121c8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011fea:	f7f3 fc7b 	bl	80058e4 <assert_failed>
 8011fee:	e7c3      	b.n	8011f78 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8011ff0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011ff8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011ffa:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8011ffe:	4872      	ldr	r0, [pc, #456]	; (80121c8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8012000:	f7f3 fc70 	bl	80058e4 <assert_failed>
  __HAL_LOCK(htim);
 8012004:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8012008:	2b01      	cmp	r3, #1
 801200a:	d1cb      	bne.n	8011fa4 <HAL_TIM_PWM_ConfigChannel+0x3c>
 801200c:	2002      	movs	r0, #2
}
 801200e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8012010:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8012014:	486c      	ldr	r0, [pc, #432]	; (80121c8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8012016:	f7f3 fc65 	bl	80058e4 <assert_failed>
 801201a:	e7bb      	b.n	8011f94 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 801201c:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8012020:	4869      	ldr	r0, [pc, #420]	; (80121c8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8012022:	f7f3 fc5f 	bl	80058e4 <assert_failed>
 8012026:	e7b1      	b.n	8011f8c <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8012028:	6828      	ldr	r0, [r5, #0]
 801202a:	4b68      	ldr	r3, [pc, #416]	; (80121cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 801202c:	4298      	cmp	r0, r3
 801202e:	d004      	beq.n	801203a <HAL_TIM_PWM_ConfigChannel+0xd2>
 8012030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012034:	4298      	cmp	r0, r3
 8012036:	f040 814d 	bne.w	80122d4 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801203a:	4621      	mov	r1, r4
 801203c:	f7fe f83a 	bl	80100b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012040:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012042:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012046:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801204a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801204c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801204e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8012052:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012056:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 801205a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801205c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801205e:	e7c8      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8012060:	6828      	ldr	r0, [r5, #0]
 8012062:	4b5a      	ldr	r3, [pc, #360]	; (80121cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012064:	4a5a      	ldr	r2, [pc, #360]	; (80121d0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8012066:	4298      	cmp	r0, r3
 8012068:	bf18      	it	ne
 801206a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801206e:	bf14      	ite	ne
 8012070:	2301      	movne	r3, #1
 8012072:	2300      	moveq	r3, #0
 8012074:	4290      	cmp	r0, r2
 8012076:	bf0c      	ite	eq
 8012078:	2300      	moveq	r3, #0
 801207a:	f003 0301 	andne.w	r3, r3, #1
 801207e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012082:	4290      	cmp	r0, r2
 8012084:	bf0c      	ite	eq
 8012086:	2300      	moveq	r3, #0
 8012088:	f003 0301 	andne.w	r3, r3, #1
 801208c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012090:	4290      	cmp	r0, r2
 8012092:	bf0c      	ite	eq
 8012094:	2300      	moveq	r3, #0
 8012096:	f003 0301 	andne.w	r3, r3, #1
 801209a:	b11b      	cbz	r3, 80120a4 <HAL_TIM_PWM_ConfigChannel+0x13c>
 801209c:	4b4d      	ldr	r3, [pc, #308]	; (80121d4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 801209e:	4298      	cmp	r0, r3
 80120a0:	f040 811f 	bne.w	80122e2 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120a4:	4621      	mov	r1, r4
 80120a6:	f7fe f8f3 	bl	8010290 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120aa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120ac:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120ae:	69d9      	ldr	r1, [r3, #28]
 80120b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80120b4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80120b6:	69d9      	ldr	r1, [r3, #28]
 80120b8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80120bc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120be:	69da      	ldr	r2, [r3, #28]
 80120c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80120c4:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120c6:	61da      	str	r2, [r3, #28]
      break;
 80120c8:	e793      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80120ca:	6828      	ldr	r0, [r5, #0]
 80120cc:	4b3f      	ldr	r3, [pc, #252]	; (80121cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 80120ce:	4298      	cmp	r0, r3
 80120d0:	d004      	beq.n	80120dc <HAL_TIM_PWM_ConfigChannel+0x174>
 80120d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120d6:	4298      	cmp	r0, r3
 80120d8:	f040 80f5 	bne.w	80122c6 <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80120dc:	4621      	mov	r1, r4
 80120de:	f7fd ffbf 	bl	8010060 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80120e2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80120e4:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80120e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120e8:	f041 0108 	orr.w	r1, r1, #8
 80120ec:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80120ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120f0:	f021 0104 	bic.w	r1, r1, #4
 80120f4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80120f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120f8:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80120fa:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80120fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80120fe:	e778      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012100:	6828      	ldr	r0, [r5, #0]
 8012102:	4b32      	ldr	r3, [pc, #200]	; (80121cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012104:	4a32      	ldr	r2, [pc, #200]	; (80121d0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8012106:	4298      	cmp	r0, r3
 8012108:	bf18      	it	ne
 801210a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801210e:	bf14      	ite	ne
 8012110:	2301      	movne	r3, #1
 8012112:	2300      	moveq	r3, #0
 8012114:	4290      	cmp	r0, r2
 8012116:	bf0c      	ite	eq
 8012118:	2300      	moveq	r3, #0
 801211a:	f003 0301 	andne.w	r3, r3, #1
 801211e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012122:	4290      	cmp	r0, r2
 8012124:	bf0c      	ite	eq
 8012126:	2300      	moveq	r3, #0
 8012128:	f003 0301 	andne.w	r3, r3, #1
 801212c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012130:	4290      	cmp	r0, r2
 8012132:	bf0c      	ite	eq
 8012134:	2300      	moveq	r3, #0
 8012136:	f003 0301 	andne.w	r3, r3, #1
 801213a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801213e:	4290      	cmp	r0, r2
 8012140:	bf0c      	ite	eq
 8012142:	2300      	moveq	r3, #0
 8012144:	f003 0301 	andne.w	r3, r3, #1
 8012148:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801214c:	4290      	cmp	r0, r2
 801214e:	bf0c      	ite	eq
 8012150:	2300      	moveq	r3, #0
 8012152:	f003 0301 	andne.w	r3, r3, #1
 8012156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801215a:	4290      	cmp	r0, r2
 801215c:	bf0c      	ite	eq
 801215e:	2300      	moveq	r3, #0
 8012160:	f003 0301 	andne.w	r3, r3, #1
 8012164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012168:	4290      	cmp	r0, r2
 801216a:	bf0c      	ite	eq
 801216c:	2300      	moveq	r3, #0
 801216e:	f003 0301 	andne.w	r3, r3, #1
 8012172:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012176:	4290      	cmp	r0, r2
 8012178:	bf0c      	ite	eq
 801217a:	2300      	moveq	r3, #0
 801217c:	f003 0301 	andne.w	r3, r3, #1
 8012180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012184:	4290      	cmp	r0, r2
 8012186:	bf0c      	ite	eq
 8012188:	2300      	moveq	r3, #0
 801218a:	f003 0301 	andne.w	r3, r3, #1
 801218e:	b11b      	cbz	r3, 8012198 <HAL_TIM_PWM_ConfigChannel+0x230>
 8012190:	4b11      	ldr	r3, [pc, #68]	; (80121d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8012192:	4298      	cmp	r0, r3
 8012194:	f040 80ba 	bne.w	801230c <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012198:	4621      	mov	r1, r4
 801219a:	f7fd ffb5 	bl	8010108 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801219e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121a0:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80121a2:	6999      	ldr	r1, [r3, #24]
 80121a4:	f041 0108 	orr.w	r1, r1, #8
 80121a8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80121aa:	6999      	ldr	r1, [r3, #24]
 80121ac:	f021 0104 	bic.w	r1, r1, #4
 80121b0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121b2:	699a      	ldr	r2, [r3, #24]
 80121b4:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80121b6:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121b8:	619a      	str	r2, [r3, #24]
      break;
 80121ba:	e71a      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80121bc:	fffeffef 	.word	0xfffeffef
 80121c0:	00010040 	.word	0x00010040
 80121c4:	00111111 	.word	0x00111111
 80121c8:	0802e5cc 	.word	0x0802e5cc
 80121cc:	40010000 	.word	0x40010000
 80121d0:	40000400 	.word	0x40000400
 80121d4:	40010400 	.word	0x40010400
 80121d8:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80121dc:	6828      	ldr	r0, [r5, #0]
 80121de:	4b4f      	ldr	r3, [pc, #316]	; (801231c <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80121e0:	4a4f      	ldr	r2, [pc, #316]	; (8012320 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 80121e2:	4298      	cmp	r0, r3
 80121e4:	bf18      	it	ne
 80121e6:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80121ea:	bf14      	ite	ne
 80121ec:	2301      	movne	r3, #1
 80121ee:	2300      	moveq	r3, #0
 80121f0:	4290      	cmp	r0, r2
 80121f2:	bf0c      	ite	eq
 80121f4:	2300      	moveq	r3, #0
 80121f6:	f003 0301 	andne.w	r3, r3, #1
 80121fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121fe:	4290      	cmp	r0, r2
 8012200:	bf0c      	ite	eq
 8012202:	2300      	moveq	r3, #0
 8012204:	f003 0301 	andne.w	r3, r3, #1
 8012208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801220c:	4290      	cmp	r0, r2
 801220e:	bf0c      	ite	eq
 8012210:	2300      	moveq	r3, #0
 8012212:	f003 0301 	andne.w	r3, r3, #1
 8012216:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801221a:	4290      	cmp	r0, r2
 801221c:	bf0c      	ite	eq
 801221e:	2300      	moveq	r3, #0
 8012220:	f003 0301 	andne.w	r3, r3, #1
 8012224:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012228:	4290      	cmp	r0, r2
 801222a:	bf0c      	ite	eq
 801222c:	2300      	moveq	r3, #0
 801222e:	f003 0301 	andne.w	r3, r3, #1
 8012232:	b113      	cbz	r3, 801223a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8012234:	4b3b      	ldr	r3, [pc, #236]	; (8012324 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8012236:	4298      	cmp	r0, r3
 8012238:	d161      	bne.n	80122fe <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801223a:	4621      	mov	r1, r4
 801223c:	f7ff fcb2 	bl	8011ba4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012240:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012242:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012244:	6999      	ldr	r1, [r3, #24]
 8012246:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801224a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801224c:	6999      	ldr	r1, [r3, #24]
 801224e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8012252:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012254:	699a      	ldr	r2, [r3, #24]
 8012256:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 801225a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801225c:	619a      	str	r2, [r3, #24]
      break;
 801225e:	e6c8      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012260:	6828      	ldr	r0, [r5, #0]
 8012262:	4b2e      	ldr	r3, [pc, #184]	; (801231c <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8012264:	4a2e      	ldr	r2, [pc, #184]	; (8012320 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8012266:	4298      	cmp	r0, r3
 8012268:	bf18      	it	ne
 801226a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801226e:	bf14      	ite	ne
 8012270:	2301      	movne	r3, #1
 8012272:	2300      	moveq	r3, #0
 8012274:	4290      	cmp	r0, r2
 8012276:	bf0c      	ite	eq
 8012278:	2300      	moveq	r3, #0
 801227a:	f003 0301 	andne.w	r3, r3, #1
 801227e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012282:	4290      	cmp	r0, r2
 8012284:	bf0c      	ite	eq
 8012286:	2300      	moveq	r3, #0
 8012288:	f003 0301 	andne.w	r3, r3, #1
 801228c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012290:	4290      	cmp	r0, r2
 8012292:	bf0c      	ite	eq
 8012294:	2300      	moveq	r3, #0
 8012296:	f003 0301 	andne.w	r3, r3, #1
 801229a:	b113      	cbz	r3, 80122a2 <HAL_TIM_PWM_ConfigChannel+0x33a>
 801229c:	4b22      	ldr	r3, [pc, #136]	; (8012328 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 801229e:	4298      	cmp	r0, r3
 80122a0:	d126      	bne.n	80122f0 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80122a2:	4621      	mov	r1, r4
 80122a4:	f7fd ff90 	bl	80101c8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122a8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122aa:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122ac:	69d9      	ldr	r1, [r3, #28]
 80122ae:	f041 0108 	orr.w	r1, r1, #8
 80122b2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80122b4:	69d9      	ldr	r1, [r3, #28]
 80122b6:	f021 0104 	bic.w	r1, r1, #4
 80122ba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122bc:	69da      	ldr	r2, [r3, #28]
 80122be:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80122c0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122c2:	61da      	str	r2, [r3, #28]
      break;
 80122c4:	e695      	b.n	8011ff2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80122c6:	4819      	ldr	r0, [pc, #100]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122c8:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80122cc:	f7f3 fb0a 	bl	80058e4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80122d0:	6828      	ldr	r0, [r5, #0]
 80122d2:	e703      	b.n	80120dc <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80122d4:	4815      	ldr	r0, [pc, #84]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122d6:	f241 1109 	movw	r1, #4361	; 0x1109
 80122da:	f7f3 fb03 	bl	80058e4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80122de:	6828      	ldr	r0, [r5, #0]
 80122e0:	e6ab      	b.n	801203a <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80122e2:	4812      	ldr	r0, [pc, #72]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122e4:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80122e8:	f7f3 fafc 	bl	80058e4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80122ec:	6828      	ldr	r0, [r5, #0]
 80122ee:	e6d9      	b.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80122f0:	480e      	ldr	r0, [pc, #56]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122f2:	f241 01d6 	movw	r1, #4310	; 0x10d6
 80122f6:	f7f3 faf5 	bl	80058e4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80122fa:	6828      	ldr	r0, [r5, #0]
 80122fc:	e7d1      	b.n	80122a2 <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80122fe:	480b      	ldr	r0, [pc, #44]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8012300:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8012304:	f7f3 faee 	bl	80058e4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012308:	6828      	ldr	r0, [r5, #0]
 801230a:	e796      	b.n	801223a <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801230c:	4807      	ldr	r0, [pc, #28]	; (801232c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801230e:	f241 01b4 	movw	r1, #4276	; 0x10b4
 8012312:	f7f3 fae7 	bl	80058e4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012316:	6828      	ldr	r0, [r5, #0]
 8012318:	e73e      	b.n	8012198 <HAL_TIM_PWM_ConfigChannel+0x230>
 801231a:	bf00      	nop
 801231c:	40010000 	.word	0x40010000
 8012320:	40000400 	.word	0x40000400
 8012324:	40001800 	.word	0x40001800
 8012328:	40010400 	.word	0x40010400
 801232c:	0802e5cc 	.word	0x0802e5cc

08012330 <TIM_TI1_SetConfig>:
{
 8012330:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012332:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012334:	4e1b      	ldr	r6, [pc, #108]	; (80123a4 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012336:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801233a:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801233c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801233e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8012340:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012342:	d01d      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 8012344:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012348:	d01a      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 801234a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 801234e:	42b0      	cmp	r0, r6
 8012350:	d016      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 8012352:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012356:	42b0      	cmp	r0, r6
 8012358:	d012      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 801235a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801235e:	42b0      	cmp	r0, r6
 8012360:	d00e      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 8012362:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8012366:	42b0      	cmp	r0, r6
 8012368:	d00a      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 801236a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 801236e:	42b0      	cmp	r0, r6
 8012370:	d006      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
 8012372:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8012376:	42b0      	cmp	r0, r6
 8012378:	d002      	beq.n	8012380 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801237a:	f044 0201 	orr.w	r2, r4, #1
 801237e:	e002      	b.n	8012386 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012380:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8012384:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012386:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012388:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801238c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012390:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012394:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012396:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012398:	4313      	orrs	r3, r2
}
 801239a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 801239c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 801239e:	6201      	str	r1, [r0, #32]
}
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	40010000 	.word	0x40010000

080123a8 <HAL_TIM_IC_ConfigChannel>:
{
 80123a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123aa:	4ba8      	ldr	r3, [pc, #672]	; (801264c <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 80123ac:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123ae:	6801      	ldr	r1, [r0, #0]
{
 80123b0:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123b2:	4fa7      	ldr	r7, [pc, #668]	; (8012650 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 80123b4:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123b6:	4299      	cmp	r1, r3
 80123b8:	bf18      	it	ne
 80123ba:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 80123be:	4aa5      	ldr	r2, [pc, #660]	; (8012654 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 80123c0:	bf14      	ite	ne
 80123c2:	2301      	movne	r3, #1
 80123c4:	2300      	moveq	r3, #0
 80123c6:	42b9      	cmp	r1, r7
 80123c8:	bf0c      	ite	eq
 80123ca:	2300      	moveq	r3, #0
 80123cc:	f003 0301 	andne.w	r3, r3, #1
 80123d0:	4291      	cmp	r1, r2
 80123d2:	bf0c      	ite	eq
 80123d4:	2300      	moveq	r3, #0
 80123d6:	f003 0301 	andne.w	r3, r3, #1
 80123da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123de:	4291      	cmp	r1, r2
 80123e0:	bf0c      	ite	eq
 80123e2:	2300      	moveq	r3, #0
 80123e4:	f003 0301 	andne.w	r3, r3, #1
 80123e8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80123ec:	4291      	cmp	r1, r2
 80123ee:	bf0c      	ite	eq
 80123f0:	2300      	moveq	r3, #0
 80123f2:	f003 0301 	andne.w	r3, r3, #1
 80123f6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80123fa:	4291      	cmp	r1, r2
 80123fc:	bf0c      	ite	eq
 80123fe:	2300      	moveq	r3, #0
 8012400:	f003 0301 	andne.w	r3, r3, #1
 8012404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012408:	4291      	cmp	r1, r2
 801240a:	bf0c      	ite	eq
 801240c:	2300      	moveq	r3, #0
 801240e:	f003 0301 	andne.w	r3, r3, #1
 8012412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012416:	4291      	cmp	r1, r2
 8012418:	bf0c      	ite	eq
 801241a:	2300      	moveq	r3, #0
 801241c:	f003 0301 	andne.w	r3, r3, #1
 8012420:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012424:	4291      	cmp	r1, r2
 8012426:	bf0c      	ite	eq
 8012428:	2300      	moveq	r3, #0
 801242a:	f003 0301 	andne.w	r3, r3, #1
 801242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012432:	4291      	cmp	r1, r2
 8012434:	bf0c      	ite	eq
 8012436:	2300      	moveq	r3, #0
 8012438:	f003 0301 	andne.w	r3, r3, #1
 801243c:	b11b      	cbz	r3, 8012446 <HAL_TIM_IC_ConfigChannel+0x9e>
 801243e:	4b86      	ldr	r3, [pc, #536]	; (8012658 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8012440:	4299      	cmp	r1, r3
 8012442:	f040 8158 	bne.w	80126f6 <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	f033 0202 	bics.w	r2, r3, #2
 801244c:	d001      	beq.n	8012452 <HAL_TIM_IC_ConfigChannel+0xaa>
 801244e:	2b0a      	cmp	r3, #10
 8012450:	d11e      	bne.n	8012490 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8012452:	6863      	ldr	r3, [r4, #4]
 8012454:	3b01      	subs	r3, #1
 8012456:	2b02      	cmp	r3, #2
 8012458:	d823      	bhi.n	80124a2 <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 801245a:	68a3      	ldr	r3, [r4, #8]
 801245c:	f033 030c 	bics.w	r3, r3, #12
 8012460:	d128      	bne.n	80124b4 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8012462:	68e3      	ldr	r3, [r4, #12]
 8012464:	2b0f      	cmp	r3, #15
 8012466:	d82d      	bhi.n	80124c4 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8012468:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801246c:	2b01      	cmp	r3, #1
 801246e:	d032      	beq.n	80124d6 <HAL_TIM_IC_ConfigChannel+0x12e>
 8012470:	2001      	movs	r0, #1
 8012472:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8012476:	b386      	cbz	r6, 80124da <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8012478:	2e04      	cmp	r6, #4
 801247a:	d042      	beq.n	8012502 <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 801247c:	2e08      	cmp	r6, #8
 801247e:	f000 80f3 	beq.w	8012668 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 8012482:	2e0c      	cmp	r6, #12
 8012484:	f000 8095 	beq.w	80125b2 <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8012488:	2300      	movs	r3, #0
 801248a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 801248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8012490:	f241 0141 	movw	r1, #4161	; 0x1041
 8012494:	4871      	ldr	r0, [pc, #452]	; (801265c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012496:	f7f3 fa25 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801249a:	6863      	ldr	r3, [r4, #4]
 801249c:	3b01      	subs	r3, #1
 801249e:	2b02      	cmp	r3, #2
 80124a0:	d9db      	bls.n	801245a <HAL_TIM_IC_ConfigChannel+0xb2>
 80124a2:	f241 0142 	movw	r1, #4162	; 0x1042
 80124a6:	486d      	ldr	r0, [pc, #436]	; (801265c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124a8:	f7f3 fa1c 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80124ac:	68a3      	ldr	r3, [r4, #8]
 80124ae:	f033 030c 	bics.w	r3, r3, #12
 80124b2:	d0d6      	beq.n	8012462 <HAL_TIM_IC_ConfigChannel+0xba>
 80124b4:	f241 0143 	movw	r1, #4163	; 0x1043
 80124b8:	4868      	ldr	r0, [pc, #416]	; (801265c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124ba:	f7f3 fa13 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80124be:	68e3      	ldr	r3, [r4, #12]
 80124c0:	2b0f      	cmp	r3, #15
 80124c2:	d9d1      	bls.n	8012468 <HAL_TIM_IC_ConfigChannel+0xc0>
 80124c4:	f241 0144 	movw	r1, #4164	; 0x1044
 80124c8:	4864      	ldr	r0, [pc, #400]	; (801265c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124ca:	f7f3 fa0b 	bl	80058e4 <assert_failed>
  __HAL_LOCK(htim);
 80124ce:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d1cc      	bne.n	8012470 <HAL_TIM_IC_ConfigChannel+0xc8>
 80124d6:	2002      	movs	r0, #2
}
 80124d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80124da:	e9d4 1200 	ldrd	r1, r2, [r4]
 80124de:	68e3      	ldr	r3, [r4, #12]
 80124e0:	6828      	ldr	r0, [r5, #0]
 80124e2:	f7ff ff25 	bl	8012330 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80124e6:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80124e8:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80124ea:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80124ec:	6999      	ldr	r1, [r3, #24]
 80124ee:	f021 010c 	bic.w	r1, r1, #12
 80124f2:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80124f4:	699a      	ldr	r2, [r3, #24]
 80124f6:	4322      	orrs	r2, r4
 80124f8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80124fa:	2300      	movs	r3, #0
 80124fc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8012500:	e7c5      	b.n	801248e <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8012502:	682a      	ldr	r2, [r5, #0]
 8012504:	4b51      	ldr	r3, [pc, #324]	; (801264c <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8012506:	4952      	ldr	r1, [pc, #328]	; (8012650 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8012508:	429a      	cmp	r2, r3
 801250a:	bf18      	it	ne
 801250c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8012510:	bf14      	ite	ne
 8012512:	2301      	movne	r3, #1
 8012514:	2300      	moveq	r3, #0
 8012516:	428a      	cmp	r2, r1
 8012518:	bf0c      	ite	eq
 801251a:	2300      	moveq	r3, #0
 801251c:	f003 0301 	andne.w	r3, r3, #1
 8012520:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012524:	428a      	cmp	r2, r1
 8012526:	bf0c      	ite	eq
 8012528:	2300      	moveq	r3, #0
 801252a:	f003 0301 	andne.w	r3, r3, #1
 801252e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012532:	428a      	cmp	r2, r1
 8012534:	bf0c      	ite	eq
 8012536:	2300      	moveq	r3, #0
 8012538:	f003 0301 	andne.w	r3, r3, #1
 801253c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8012540:	428a      	cmp	r2, r1
 8012542:	bf0c      	ite	eq
 8012544:	2300      	moveq	r3, #0
 8012546:	f003 0301 	andne.w	r3, r3, #1
 801254a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801254e:	428a      	cmp	r2, r1
 8012550:	bf0c      	ite	eq
 8012552:	2300      	moveq	r3, #0
 8012554:	f003 0301 	andne.w	r3, r3, #1
 8012558:	b11b      	cbz	r3, 8012562 <HAL_TIM_IC_ConfigChannel+0x1ba>
 801255a:	4b41      	ldr	r3, [pc, #260]	; (8012660 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 801255c:	429a      	cmp	r2, r3
 801255e:	f040 80d7 	bne.w	8012710 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012562:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8012564:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012566:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801256a:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 801256c:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012570:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012572:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8012574:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012576:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012578:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801257a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801257e:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012582:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012586:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801258a:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 801258c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 801258e:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012590:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012594:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012596:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8012598:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801259a:	6991      	ldr	r1, [r2, #24]
 801259c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80125a0:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80125a2:	6993      	ldr	r3, [r2, #24]
 80125a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80125a8:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80125aa:	2300      	movs	r3, #0
 80125ac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80125b0:	e76d      	b.n	801248e <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80125b2:	682b      	ldr	r3, [r5, #0]
 80125b4:	4a25      	ldr	r2, [pc, #148]	; (801264c <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80125b6:	4926      	ldr	r1, [pc, #152]	; (8012650 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80125b8:	4293      	cmp	r3, r2
 80125ba:	bf18      	it	ne
 80125bc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80125c0:	bf14      	ite	ne
 80125c2:	2201      	movne	r2, #1
 80125c4:	2200      	moveq	r2, #0
 80125c6:	428b      	cmp	r3, r1
 80125c8:	bf0c      	ite	eq
 80125ca:	2200      	moveq	r2, #0
 80125cc:	f002 0201 	andne.w	r2, r2, #1
 80125d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80125d4:	428b      	cmp	r3, r1
 80125d6:	bf0c      	ite	eq
 80125d8:	2200      	moveq	r2, #0
 80125da:	f002 0201 	andne.w	r2, r2, #1
 80125de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80125e2:	428b      	cmp	r3, r1
 80125e4:	bf0c      	ite	eq
 80125e6:	2200      	moveq	r2, #0
 80125e8:	f002 0201 	andne.w	r2, r2, #1
 80125ec:	b142      	cbz	r2, 8012600 <HAL_TIM_IC_ConfigChannel+0x258>
 80125ee:	4a1d      	ldr	r2, [pc, #116]	; (8012664 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d005      	beq.n	8012600 <HAL_TIM_IC_ConfigChannel+0x258>
 80125f4:	f241 017a 	movw	r1, #4218	; 0x107a
 80125f8:	4818      	ldr	r0, [pc, #96]	; (801265c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80125fa:	f7f3 f973 	bl	80058e4 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 80125fe:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012600:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8012602:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012604:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012608:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 801260a:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801260e:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012610:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8012612:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012614:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012616:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012618:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801261c:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012620:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012624:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012628:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 801262a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 801262c:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801262e:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012632:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012634:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 8012636:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012638:	69d9      	ldr	r1, [r3, #28]
 801263a:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 801263e:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012640:	69da      	ldr	r2, [r3, #28]
 8012642:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8012646:	61da      	str	r2, [r3, #28]
 8012648:	e71e      	b.n	8012488 <HAL_TIM_IC_ConfigChannel+0xe0>
 801264a:	bf00      	nop
 801264c:	40010000 	.word	0x40010000
 8012650:	40000400 	.word	0x40000400
 8012654:	40000800 	.word	0x40000800
 8012658:	40002000 	.word	0x40002000
 801265c:	0802e5cc 	.word	0x0802e5cc
 8012660:	40001800 	.word	0x40001800
 8012664:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	4a2d      	ldr	r2, [pc, #180]	; (8012720 <HAL_TIM_IC_ConfigChannel+0x378>)
 801266c:	492d      	ldr	r1, [pc, #180]	; (8012724 <HAL_TIM_IC_ConfigChannel+0x37c>)
 801266e:	4293      	cmp	r3, r2
 8012670:	bf18      	it	ne
 8012672:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012676:	bf14      	ite	ne
 8012678:	2201      	movne	r2, #1
 801267a:	2200      	moveq	r2, #0
 801267c:	428b      	cmp	r3, r1
 801267e:	bf0c      	ite	eq
 8012680:	2200      	moveq	r2, #0
 8012682:	f002 0201 	andne.w	r2, r2, #1
 8012686:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801268a:	428b      	cmp	r3, r1
 801268c:	bf0c      	ite	eq
 801268e:	2200      	moveq	r2, #0
 8012690:	f002 0201 	andne.w	r2, r2, #1
 8012694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012698:	428b      	cmp	r3, r1
 801269a:	bf0c      	ite	eq
 801269c:	2200      	moveq	r2, #0
 801269e:	f002 0201 	andne.w	r2, r2, #1
 80126a2:	b112      	cbz	r2, 80126aa <HAL_TIM_IC_ConfigChannel+0x302>
 80126a4:	4a20      	ldr	r2, [pc, #128]	; (8012728 <HAL_TIM_IC_ConfigChannel+0x380>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d12b      	bne.n	8012702 <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126aa:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 80126ac:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126ae:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126b2:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 80126b4:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126b8:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126ba:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80126bc:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126be:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80126c0:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80126c2:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126c6:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 80126ca:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80126cc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126d0:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80126d2:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80126d4:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 80126d8:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126da:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80126dc:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80126de:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80126e0:	69d9      	ldr	r1, [r3, #28]
 80126e2:	f021 010c 	bic.w	r1, r1, #12
 80126e6:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80126e8:	69da      	ldr	r2, [r3, #28]
 80126ea:	4322      	orrs	r2, r4
 80126ec:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80126ee:	2300      	movs	r3, #0
 80126f0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80126f4:	e6cb      	b.n	801248e <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80126f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80126fa:	480c      	ldr	r0, [pc, #48]	; (801272c <HAL_TIM_IC_ConfigChannel+0x384>)
 80126fc:	f7f3 f8f2 	bl	80058e4 <assert_failed>
 8012700:	e6a1      	b.n	8012446 <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012702:	f241 016a 	movw	r1, #4202	; 0x106a
 8012706:	4809      	ldr	r0, [pc, #36]	; (801272c <HAL_TIM_IC_ConfigChannel+0x384>)
 8012708:	f7f3 f8ec 	bl	80058e4 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	e7cc      	b.n	80126aa <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8012710:	f241 015a 	movw	r1, #4186	; 0x105a
 8012714:	4805      	ldr	r0, [pc, #20]	; (801272c <HAL_TIM_IC_ConfigChannel+0x384>)
 8012716:	f7f3 f8e5 	bl	80058e4 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 801271a:	682a      	ldr	r2, [r5, #0]
 801271c:	e721      	b.n	8012562 <HAL_TIM_IC_ConfigChannel+0x1ba>
 801271e:	bf00      	nop
 8012720:	40010000 	.word	0x40010000
 8012724:	40000400 	.word	0x40000400
 8012728:	40010400 	.word	0x40010400
 801272c:	0802e5cc 	.word	0x0802e5cc

08012730 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8012730:	4b2b      	ldr	r3, [pc, #172]	; (80127e0 <TIM_CCxChannelCmd+0xb0>)
 8012732:	4298      	cmp	r0, r3
{
 8012734:	b530      	push	{r4, r5, lr}
 8012736:	4604      	mov	r4, r0
 8012738:	b083      	sub	sp, #12
 801273a:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 801273c:	d031      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801273e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012742:	d02e      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012744:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8012748:	4298      	cmp	r0, r3
 801274a:	d02a      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801274c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012750:	4298      	cmp	r0, r3
 8012752:	d026      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012758:	4298      	cmp	r0, r3
 801275a:	d022      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801275c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8012760:	4298      	cmp	r0, r3
 8012762:	d01e      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012764:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8012768:	4298      	cmp	r0, r3
 801276a:	d01a      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801276c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012770:	4298      	cmp	r0, r3
 8012772:	d016      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012778:	4298      	cmp	r0, r3
 801277a:	d012      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801277c:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012780:	4298      	cmp	r0, r3
 8012782:	d00e      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012788:	4298      	cmp	r0, r3
 801278a:	d00a      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 801278c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012790:	4298      	cmp	r0, r3
 8012792:	d006      	beq.n	80127a2 <TIM_CCxChannelCmd+0x72>
 8012794:	f641 6199 	movw	r1, #7833	; 0x1e99
 8012798:	4812      	ldr	r0, [pc, #72]	; (80127e4 <TIM_CCxChannelCmd+0xb4>)
 801279a:	9201      	str	r2, [sp, #4]
 801279c:	f7f3 f8a2 	bl	80058e4 <assert_failed>
 80127a0:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 80127a2:	2d14      	cmp	r5, #20
 80127a4:	d90f      	bls.n	80127c6 <TIM_CCxChannelCmd+0x96>
 80127a6:	2d3c      	cmp	r5, #60	; 0x3c
 80127a8:	d111      	bne.n	80127ce <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127aa:	f005 051f 	and.w	r5, r5, #31
 80127ae:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80127b0:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127b2:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127b4:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80127b6:	ea23 0301 	bic.w	r3, r3, r1
 80127ba:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127bc:	6a25      	ldr	r5, [r4, #32]
 80127be:	4315      	orrs	r5, r2
 80127c0:	6225      	str	r5, [r4, #32]
}
 80127c2:	b003      	add	sp, #12
 80127c4:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80127c6:	4b08      	ldr	r3, [pc, #32]	; (80127e8 <TIM_CCxChannelCmd+0xb8>)
 80127c8:	40eb      	lsrs	r3, r5
 80127ca:	07db      	lsls	r3, r3, #31
 80127cc:	d4ed      	bmi.n	80127aa <TIM_CCxChannelCmd+0x7a>
 80127ce:	f641 619a 	movw	r1, #7834	; 0x1e9a
 80127d2:	4804      	ldr	r0, [pc, #16]	; (80127e4 <TIM_CCxChannelCmd+0xb4>)
 80127d4:	9201      	str	r2, [sp, #4]
 80127d6:	f7f3 f885 	bl	80058e4 <assert_failed>
 80127da:	9a01      	ldr	r2, [sp, #4]
 80127dc:	e7e5      	b.n	80127aa <TIM_CCxChannelCmd+0x7a>
 80127de:	bf00      	nop
 80127e0:	40010000 	.word	0x40010000
 80127e4:	0802e5cc 	.word	0x0802e5cc
 80127e8:	00111111 	.word	0x00111111

080127ec <HAL_TIM_IC_Start_DMA>:
{
 80127ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127f0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80127f2:	460d      	mov	r5, r1
{
 80127f4:	4617      	mov	r7, r2
 80127f6:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80127f8:	2900      	cmp	r1, #0
 80127fa:	f040 8087 	bne.w	801290c <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80127fe:	6803      	ldr	r3, [r0, #0]
 8012800:	4aa4      	ldr	r2, [pc, #656]	; (8012a94 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012802:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012806:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012808:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801280c:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801280e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012812:	d037      	beq.n	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012818:	d034      	beq.n	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 801281a:	4a9f      	ldr	r2, [pc, #636]	; (8012a98 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d031      	beq.n	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012820:	4a9e      	ldr	r2, [pc, #632]	; (8012a9c <HAL_TIM_IC_Start_DMA+0x2b0>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d066      	beq.n	80128f4 <HAL_TIM_IC_Start_DMA+0x108>
 8012826:	4a9e      	ldr	r2, [pc, #632]	; (8012aa0 <HAL_TIM_IC_Start_DMA+0x2b4>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d063      	beq.n	80128f4 <HAL_TIM_IC_Start_DMA+0x108>
 801282c:	4a9d      	ldr	r2, [pc, #628]	; (8012aa4 <HAL_TIM_IC_Start_DMA+0x2b8>)
 801282e:	4293      	cmp	r3, r2
 8012830:	f040 80f7 	bne.w	8012a22 <HAL_TIM_IC_Start_DMA+0x236>
 8012834:	2d14      	cmp	r5, #20
 8012836:	d862      	bhi.n	80128fe <HAL_TIM_IC_Start_DMA+0x112>
 8012838:	4a9b      	ldr	r2, [pc, #620]	; (8012aa8 <HAL_TIM_IC_Start_DMA+0x2bc>)
 801283a:	40ea      	lsrs	r2, r5
 801283c:	07d2      	lsls	r2, r2, #31
 801283e:	d55e      	bpl.n	80128fe <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012840:	4994      	ldr	r1, [pc, #592]	; (8012a94 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8012842:	4a95      	ldr	r2, [pc, #596]	; (8012a98 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8012844:	428b      	cmp	r3, r1
 8012846:	bf18      	it	ne
 8012848:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801284c:	bf14      	ite	ne
 801284e:	2101      	movne	r1, #1
 8012850:	2100      	moveq	r1, #0
 8012852:	4293      	cmp	r3, r2
 8012854:	bf0c      	ite	eq
 8012856:	2100      	moveq	r1, #0
 8012858:	f001 0101 	andne.w	r1, r1, #1
 801285c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012860:	4293      	cmp	r3, r2
 8012862:	bf0c      	ite	eq
 8012864:	2100      	moveq	r1, #0
 8012866:	f001 0101 	andne.w	r1, r1, #1
 801286a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801286e:	4293      	cmp	r3, r2
 8012870:	bf0c      	ite	eq
 8012872:	2100      	moveq	r1, #0
 8012874:	f001 0101 	andne.w	r1, r1, #1
 8012878:	b121      	cbz	r1, 8012884 <HAL_TIM_IC_Start_DMA+0x98>
 801287a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801287e:	4293      	cmp	r3, r2
 8012880:	f040 80c5 	bne.w	8012a0e <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8012884:	2e02      	cmp	r6, #2
 8012886:	d06a      	beq.n	801295e <HAL_TIM_IC_Start_DMA+0x172>
 8012888:	f1b9 0f02 	cmp.w	r9, #2
 801288c:	d067      	beq.n	801295e <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 801288e:	2e01      	cmp	r6, #1
 8012890:	d106      	bne.n	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
 8012892:	f1b9 0f01 	cmp.w	r9, #1
 8012896:	d103      	bne.n	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8012898:	b92f      	cbnz	r7, 80128a6 <HAL_TIM_IC_Start_DMA+0xba>
 801289a:	f1b8 0f00 	cmp.w	r8, #0
 801289e:	d002      	beq.n	80128a6 <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 80128a0:	2001      	movs	r0, #1
}
 80128a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128a6:	2302      	movs	r3, #2
 80128a8:	2d00      	cmp	r5, #0
 80128aa:	d05b      	beq.n	8012964 <HAL_TIM_IC_Start_DMA+0x178>
 80128ac:	2d04      	cmp	r5, #4
 80128ae:	f000 8119 	beq.w	8012ae4 <HAL_TIM_IC_Start_DMA+0x2f8>
 80128b2:	2d08      	cmp	r5, #8
 80128b4:	f000 8141 	beq.w	8012b3a <HAL_TIM_IC_Start_DMA+0x34e>
 80128b8:	2d0c      	cmp	r5, #12
 80128ba:	f000 815d 	beq.w	8012b78 <HAL_TIM_IC_Start_DMA+0x38c>
 80128be:	2d10      	cmp	r5, #16
 80128c0:	f000 812f 	beq.w	8012b22 <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128c4:	4629      	mov	r1, r5
  switch (Channel)
 80128c6:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128cc:	2201      	movs	r2, #1
 80128ce:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128d0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128d4:	f7ff ff2c 	bl	8012730 <TIM_CCxChannelCmd>
  switch (Channel)
 80128d8:	2d08      	cmp	r5, #8
 80128da:	f200 812b 	bhi.w	8012b34 <HAL_TIM_IC_Start_DMA+0x348>
 80128de:	e8df f015 	tbh	[pc, r5, lsl #1]
 80128e2:	010a      	.short	0x010a
 80128e4:	01290129 	.word	0x01290129
 80128e8:	01350129 	.word	0x01350129
 80128ec:	01290129 	.word	0x01290129
 80128f0:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80128f4:	f035 0204 	bics.w	r2, r5, #4
 80128f8:	d0a2      	beq.n	8012840 <HAL_TIM_IC_Start_DMA+0x54>
 80128fa:	2a08      	cmp	r2, #8
 80128fc:	d0a0      	beq.n	8012840 <HAL_TIM_IC_Start_DMA+0x54>
 80128fe:	f640 114a 	movw	r1, #2378	; 0x94a
 8012902:	486a      	ldr	r0, [pc, #424]	; (8012aac <HAL_TIM_IC_Start_DMA+0x2c0>)
 8012904:	f7f2 ffee 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012908:	6823      	ldr	r3, [r4, #0]
 801290a:	e799      	b.n	8012840 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801290c:	2904      	cmp	r1, #4
 801290e:	f000 8090 	beq.w	8012a32 <HAL_TIM_IC_Start_DMA+0x246>
 8012912:	2908      	cmp	r1, #8
 8012914:	f000 80e0 	beq.w	8012ad8 <HAL_TIM_IC_Start_DMA+0x2ec>
 8012918:	290c      	cmp	r1, #12
 801291a:	d07e      	beq.n	8012a1a <HAL_TIM_IC_Start_DMA+0x22e>
 801291c:	2910      	cmp	r1, #16
 801291e:	f000 814a 	beq.w	8012bb6 <HAL_TIM_IC_Start_DMA+0x3ca>
 8012922:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 8012926:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	4a5a      	ldr	r2, [pc, #360]	; (8012a94 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801292c:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012930:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012932:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012936:	f000 8098 	beq.w	8012a6a <HAL_TIM_IC_Start_DMA+0x27e>
 801293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801293e:	f000 8088 	beq.w	8012a52 <HAL_TIM_IC_Start_DMA+0x266>
 8012942:	4a55      	ldr	r2, [pc, #340]	; (8012a98 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8012944:	4293      	cmp	r3, r2
 8012946:	f47f af6b 	bne.w	8012820 <HAL_TIM_IC_Start_DMA+0x34>
 801294a:	f035 020c 	bics.w	r2, r5, #12
 801294e:	d099      	beq.n	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012950:	4a57      	ldr	r2, [pc, #348]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2c4>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d1d3      	bne.n	80128fe <HAL_TIM_IC_Start_DMA+0x112>
 8012956:	2d00      	cmp	r5, #0
 8012958:	f43f af72 	beq.w	8012840 <HAL_TIM_IC_Start_DMA+0x54>
 801295c:	e7cf      	b.n	80128fe <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 801295e:	2002      	movs	r0, #2
}
 8012960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012964:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012968:	4629      	mov	r1, r5
 801296a:	2201      	movs	r2, #1
 801296c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801296e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012972:	f7ff fedd 	bl	8012730 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8012976:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012978:	494e      	ldr	r1, [pc, #312]	; (8012ab4 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 801297a:	4643      	mov	r3, r8
 801297c:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801297e:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012980:	494d      	ldr	r1, [pc, #308]	; (8012ab8 <HAL_TIM_IC_Start_DMA+0x2cc>)
 8012982:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012984:	494d      	ldr	r1, [pc, #308]	; (8012abc <HAL_TIM_IC_Start_DMA+0x2d0>)
 8012986:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012988:	6821      	ldr	r1, [r4, #0]
 801298a:	3134      	adds	r1, #52	; 0x34
 801298c:	f7f7 feb8 	bl	800a700 <HAL_DMA_Start_IT>
 8012990:	2800      	cmp	r0, #0
 8012992:	d185      	bne.n	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012994:	6822      	ldr	r2, [r4, #0]
 8012996:	68d3      	ldr	r3, [r2, #12]
 8012998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801299c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801299e:	4b3d      	ldr	r3, [pc, #244]	; (8012a94 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80129a0:	4c3d      	ldr	r4, [pc, #244]	; (8012a98 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80129a2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80129a6:	bf18      	it	ne
 80129a8:	429a      	cmpne	r2, r3
 80129aa:	493c      	ldr	r1, [pc, #240]	; (8012a9c <HAL_TIM_IC_Start_DMA+0x2b0>)
 80129ac:	bf0c      	ite	eq
 80129ae:	2301      	moveq	r3, #1
 80129b0:	2300      	movne	r3, #0
 80129b2:	42a2      	cmp	r2, r4
 80129b4:	bf08      	it	eq
 80129b6:	f043 0301 	orreq.w	r3, r3, #1
 80129ba:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80129be:	428a      	cmp	r2, r1
 80129c0:	bf08      	it	eq
 80129c2:	f043 0301 	orreq.w	r3, r3, #1
 80129c6:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80129ca:	42a2      	cmp	r2, r4
 80129cc:	bf08      	it	eq
 80129ce:	f043 0301 	orreq.w	r3, r3, #1
 80129d2:	428a      	cmp	r2, r1
 80129d4:	bf08      	it	eq
 80129d6:	f043 0301 	orreq.w	r3, r3, #1
 80129da:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80129de:	428a      	cmp	r2, r1
 80129e0:	bf08      	it	eq
 80129e2:	f043 0301 	orreq.w	r3, r3, #1
 80129e6:	b913      	cbnz	r3, 80129ee <HAL_TIM_IC_Start_DMA+0x202>
 80129e8:	4b35      	ldr	r3, [pc, #212]	; (8012ac0 <HAL_TIM_IC_Start_DMA+0x2d4>)
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d109      	bne.n	8012a02 <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129ee:	6891      	ldr	r1, [r2, #8]
 80129f0:	4b34      	ldr	r3, [pc, #208]	; (8012ac4 <HAL_TIM_IC_Start_DMA+0x2d8>)
 80129f2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129f4:	2b06      	cmp	r3, #6
 80129f6:	f43f af54 	beq.w	80128a2 <HAL_TIM_IC_Start_DMA+0xb6>
 80129fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129fe:	f43f af50 	beq.w	80128a2 <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 8012a02:	6813      	ldr	r3, [r2, #0]
 8012a04:	f043 0301 	orr.w	r3, r3, #1
 8012a08:	6013      	str	r3, [r2, #0]
}
 8012a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012a0e:	f640 114b 	movw	r1, #2379	; 0x94b
 8012a12:	4826      	ldr	r0, [pc, #152]	; (8012aac <HAL_TIM_IC_Start_DMA+0x2c0>)
 8012a14:	f7f2 ff66 	bl	80058e4 <assert_failed>
 8012a18:	e734      	b.n	8012884 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a1a:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8012a1e:	b2f6      	uxtb	r6, r6
 8012a20:	e782      	b.n	8012928 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a22:	4a29      	ldr	r2, [pc, #164]	; (8012ac8 <HAL_TIM_IC_Start_DMA+0x2dc>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d128      	bne.n	8012a7a <HAL_TIM_IC_Start_DMA+0x28e>
 8012a28:	f035 0204 	bics.w	r2, r5, #4
 8012a2c:	f47f af67 	bne.w	80128fe <HAL_TIM_IC_Start_DMA+0x112>
 8012a30:	e706      	b.n	8012840 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a32:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a36:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a3a:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a3c:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a3e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a42:	4a14      	ldr	r2, [pc, #80]	; (8012a94 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	f43f af1d 	beq.w	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a4e:	f47f af78 	bne.w	8012942 <HAL_TIM_IC_Start_DMA+0x156>
 8012a52:	f035 020c 	bics.w	r2, r5, #12
 8012a56:	f43f af15 	beq.w	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012a5a:	4a1c      	ldr	r2, [pc, #112]	; (8012acc <HAL_TIM_IC_Start_DMA+0x2e0>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	f47f af77 	bne.w	8012950 <HAL_TIM_IC_Start_DMA+0x164>
 8012a62:	2d00      	cmp	r5, #0
 8012a64:	f43f aeec 	beq.w	8012840 <HAL_TIM_IC_Start_DMA+0x54>
 8012a68:	e749      	b.n	80128fe <HAL_TIM_IC_Start_DMA+0x112>
 8012a6a:	f025 0204 	bic.w	r2, r5, #4
 8012a6e:	2a08      	cmp	r2, #8
 8012a70:	f43f af08 	beq.w	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012a74:	2a10      	cmp	r2, #16
 8012a76:	f43f af05 	beq.w	8012884 <HAL_TIM_IC_Start_DMA+0x98>
 8012a7a:	4a15      	ldr	r2, [pc, #84]	; (8012ad0 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	f43f af6a 	beq.w	8012956 <HAL_TIM_IC_Start_DMA+0x16a>
 8012a82:	4a14      	ldr	r2, [pc, #80]	; (8012ad4 <HAL_TIM_IC_Start_DMA+0x2e8>)
 8012a84:	4293      	cmp	r3, r2
 8012a86:	f43f af66 	beq.w	8012956 <HAL_TIM_IC_Start_DMA+0x16a>
 8012a8a:	4a0d      	ldr	r2, [pc, #52]	; (8012ac0 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d0cb      	beq.n	8012a28 <HAL_TIM_IC_Start_DMA+0x23c>
 8012a90:	e7e3      	b.n	8012a5a <HAL_TIM_IC_Start_DMA+0x26e>
 8012a92:	bf00      	nop
 8012a94:	40010000 	.word	0x40010000
 8012a98:	40000400 	.word	0x40000400
 8012a9c:	40000800 	.word	0x40000800
 8012aa0:	40000c00 	.word	0x40000c00
 8012aa4:	40010400 	.word	0x40010400
 8012aa8:	00111111 	.word	0x00111111
 8012aac:	0802e5cc 	.word	0x0802e5cc
 8012ab0:	40002000 	.word	0x40002000
 8012ab4:	0801111d 	.word	0x0801111d
 8012ab8:	080111b5 	.word	0x080111b5
 8012abc:	08011399 	.word	0x08011399
 8012ac0:	40001800 	.word	0x40001800
 8012ac4:	00010007 	.word	0x00010007
 8012ac8:	40014000 	.word	0x40014000
 8012acc:	40001c00 	.word	0x40001c00
 8012ad0:	40014400 	.word	0x40014400
 8012ad4:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012ad8:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012adc:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012ae0:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012ae2:	e7ab      	b.n	8012a3c <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ae4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ae8:	4629      	mov	r1, r5
 8012aea:	2201      	movs	r2, #1
 8012aec:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012af2:	f7ff fe1d 	bl	8012730 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012af6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012af8:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012afa:	4931      	ldr	r1, [pc, #196]	; (8012bc0 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012afc:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012afe:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b00:	4930      	ldr	r1, [pc, #192]	; (8012bc4 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b02:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012b04:	4930      	ldr	r1, [pc, #192]	; (8012bc8 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b06:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012b08:	6821      	ldr	r1, [r4, #0]
 8012b0a:	3138      	adds	r1, #56	; 0x38
 8012b0c:	f7f7 fdf8 	bl	800a700 <HAL_DMA_Start_IT>
 8012b10:	2800      	cmp	r0, #0
 8012b12:	f47f aec5 	bne.w	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	68d3      	ldr	r3, [r2, #12]
 8012b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012b1e:	60d3      	str	r3, [r2, #12]
      break;
 8012b20:	e73d      	b.n	801299e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b26:	2201      	movs	r2, #1
 8012b28:	4629      	mov	r1, r5
 8012b2a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b30:	f7ff fdfe 	bl	8012730 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b34:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 8012b36:	2001      	movs	r0, #1
 8012b38:	e731      	b.n	801299e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b3e:	4629      	mov	r1, r5
 8012b40:	2201      	movs	r2, #1
 8012b42:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b44:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b48:	f7ff fdf2 	bl	8012730 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b4e:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b50:	491b      	ldr	r1, [pc, #108]	; (8012bc0 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b52:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b54:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b56:	491b      	ldr	r1, [pc, #108]	; (8012bc4 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b58:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012b5a:	491b      	ldr	r1, [pc, #108]	; (8012bc8 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b5c:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b5e:	6821      	ldr	r1, [r4, #0]
 8012b60:	313c      	adds	r1, #60	; 0x3c
 8012b62:	f7f7 fdcd 	bl	800a700 <HAL_DMA_Start_IT>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f47f ae9a 	bne.w	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012b6c:	6822      	ldr	r2, [r4, #0]
 8012b6e:	68d3      	ldr	r3, [r2, #12]
 8012b70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012b74:	60d3      	str	r3, [r2, #12]
      break;
 8012b76:	e712      	b.n	801299e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b7c:	4629      	mov	r1, r5
 8012b7e:	2201      	movs	r2, #1
 8012b80:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b82:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b86:	f7ff fdd3 	bl	8012730 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b8c:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b8e:	490c      	ldr	r1, [pc, #48]	; (8012bc0 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b90:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b92:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b94:	490b      	ldr	r1, [pc, #44]	; (8012bc4 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b96:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012b98:	490b      	ldr	r1, [pc, #44]	; (8012bc8 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b9a:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b9c:	6821      	ldr	r1, [r4, #0]
 8012b9e:	3140      	adds	r1, #64	; 0x40
 8012ba0:	f7f7 fdae 	bl	800a700 <HAL_DMA_Start_IT>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	f47f ae7b 	bne.w	80128a0 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012baa:	6822      	ldr	r2, [r4, #0]
 8012bac:	68d3      	ldr	r3, [r2, #12]
 8012bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012bb2:	60d3      	str	r3, [r2, #12]
      break;
 8012bb4:	e6f3      	b.n	801299e <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012bb6:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8012bba:	b2f6      	uxtb	r6, r6
 8012bbc:	e6b4      	b.n	8012928 <HAL_TIM_IC_Start_DMA+0x13c>
 8012bbe:	bf00      	nop
 8012bc0:	0801111d 	.word	0x0801111d
 8012bc4:	080111b5 	.word	0x080111b5
 8012bc8:	08011399 	.word	0x08011399

08012bcc <HAL_TIM_IC_Stop_DMA>:
{
 8012bcc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bce:	4b82      	ldr	r3, [pc, #520]	; (8012dd8 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8012bd0:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bd2:	6800      	ldr	r0, [r0, #0]
{
 8012bd4:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bd6:	4298      	cmp	r0, r3
 8012bd8:	f000 80cc 	beq.w	8012d74 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012bdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012be0:	d056      	beq.n	8012c90 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012be2:	4b7e      	ldr	r3, [pc, #504]	; (8012ddc <HAL_TIM_IC_Stop_DMA+0x210>)
 8012be4:	4298      	cmp	r0, r3
 8012be6:	d053      	beq.n	8012c90 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012be8:	4b7d      	ldr	r3, [pc, #500]	; (8012de0 <HAL_TIM_IC_Stop_DMA+0x214>)
 8012bea:	4298      	cmp	r0, r3
 8012bec:	d050      	beq.n	8012c90 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012bee:	4b7d      	ldr	r3, [pc, #500]	; (8012de4 <HAL_TIM_IC_Stop_DMA+0x218>)
 8012bf0:	4298      	cmp	r0, r3
 8012bf2:	d04d      	beq.n	8012c90 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012bf4:	4b7c      	ldr	r3, [pc, #496]	; (8012de8 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012bf6:	4298      	cmp	r0, r3
 8012bf8:	f000 80bc 	beq.w	8012d74 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012bfc:	4b7b      	ldr	r3, [pc, #492]	; (8012dec <HAL_TIM_IC_Stop_DMA+0x220>)
 8012bfe:	4298      	cmp	r0, r3
 8012c00:	d00c      	beq.n	8012c1c <HAL_TIM_IC_Stop_DMA+0x50>
 8012c02:	4b7b      	ldr	r3, [pc, #492]	; (8012df0 <HAL_TIM_IC_Stop_DMA+0x224>)
 8012c04:	4298      	cmp	r0, r3
 8012c06:	f000 80d9 	beq.w	8012dbc <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012c0a:	4b7a      	ldr	r3, [pc, #488]	; (8012df4 <HAL_TIM_IC_Stop_DMA+0x228>)
 8012c0c:	4298      	cmp	r0, r3
 8012c0e:	f000 80d5 	beq.w	8012dbc <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012c12:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012c16:	4298      	cmp	r0, r3
 8012c18:	f040 80c9 	bne.w	8012dae <HAL_TIM_IC_Stop_DMA+0x1e2>
 8012c1c:	f035 0304 	bics.w	r3, r5, #4
 8012c20:	f000 80cf 	beq.w	8012dc2 <HAL_TIM_IC_Stop_DMA+0x1f6>
 8012c24:	4874      	ldr	r0, [pc, #464]	; (8012df8 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012c26:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8012c2a:	f7f2 fe5b 	bl	80058e4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012c2e:	6820      	ldr	r0, [r4, #0]
 8012c30:	4b69      	ldr	r3, [pc, #420]	; (8012dd8 <HAL_TIM_IC_Stop_DMA+0x20c>)
 8012c32:	4a6a      	ldr	r2, [pc, #424]	; (8012ddc <HAL_TIM_IC_Stop_DMA+0x210>)
 8012c34:	4298      	cmp	r0, r3
 8012c36:	bf18      	it	ne
 8012c38:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012c3c:	bf14      	ite	ne
 8012c3e:	2301      	movne	r3, #1
 8012c40:	2300      	moveq	r3, #0
 8012c42:	4290      	cmp	r0, r2
 8012c44:	bf0c      	ite	eq
 8012c46:	2300      	moveq	r3, #0
 8012c48:	f003 0301 	andne.w	r3, r3, #1
 8012c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c50:	4290      	cmp	r0, r2
 8012c52:	bf0c      	ite	eq
 8012c54:	2300      	moveq	r3, #0
 8012c56:	f003 0301 	andne.w	r3, r3, #1
 8012c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c5e:	4290      	cmp	r0, r2
 8012c60:	bf0c      	ite	eq
 8012c62:	2300      	moveq	r3, #0
 8012c64:	f003 0301 	andne.w	r3, r3, #1
 8012c68:	b11b      	cbz	r3, 8012c72 <HAL_TIM_IC_Stop_DMA+0xa6>
 8012c6a:	4b5f      	ldr	r3, [pc, #380]	; (8012de8 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012c6c:	4298      	cmp	r0, r3
 8012c6e:	f040 80a8 	bne.w	8012dc2 <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012c72:	2200      	movs	r2, #0
 8012c74:	4629      	mov	r1, r5
 8012c76:	f7ff fd5b 	bl	8012730 <TIM_CCxChannelCmd>
  switch (Channel)
 8012c7a:	2d0c      	cmp	r5, #12
 8012c7c:	d80c      	bhi.n	8012c98 <HAL_TIM_IC_Stop_DMA+0xcc>
 8012c7e:	e8df f005 	tbb	[pc, r5]
 8012c82:	0b0d      	.short	0x0b0d
 8012c84:	0b640b0b 	.word	0x0b640b0b
 8012c88:	0b4a0b0b 	.word	0x0b4a0b0b
 8012c8c:	0b0b      	.short	0x0b0b
 8012c8e:	22          	.byte	0x22
 8012c8f:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012c90:	f035 030c 	bics.w	r3, r5, #12
 8012c94:	d1c6      	bne.n	8012c24 <HAL_TIM_IC_Stop_DMA+0x58>
 8012c96:	e7ec      	b.n	8012c72 <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8012c98:	2001      	movs	r0, #1
}
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012c9c:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012ca0:	68d3      	ldr	r3, [r2, #12]
 8012ca2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ca6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012ca8:	f7f7 fdce 	bl	800a848 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cb2:	6a19      	ldr	r1, [r3, #32]
 8012cb4:	4211      	tst	r1, r2
 8012cb6:	d06c      	beq.n	8012d92 <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cb8:	2301      	movs	r3, #1
 8012cba:	2000      	movs	r0, #0
 8012cbc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012cc6:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012cc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012cca:	68d3      	ldr	r3, [r2, #12]
 8012ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cd0:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012cd2:	f7f7 fdb9 	bl	800a848 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cdc:	6a19      	ldr	r1, [r3, #32]
 8012cde:	4211      	tst	r1, r2
 8012ce0:	d161      	bne.n	8012da6 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012ce2:	6a19      	ldr	r1, [r3, #32]
 8012ce4:	f240 4244 	movw	r2, #1092	; 0x444
 8012ce8:	4211      	tst	r1, r2
 8012cea:	d15c      	bne.n	8012da6 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012cec:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cee:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8012cf0:	f022 0201 	bic.w	r2, r2, #1
 8012cf4:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cf6:	d036      	beq.n	8012d66 <HAL_TIM_IC_Stop_DMA+0x19a>
 8012cf8:	2d08      	cmp	r5, #8
 8012cfa:	d01f      	beq.n	8012d3c <HAL_TIM_IC_Stop_DMA+0x170>
 8012cfc:	2d0c      	cmp	r5, #12
 8012cfe:	d052      	beq.n	8012da6 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012d00:	2d10      	cmp	r5, #16
 8012d02:	f04f 0301 	mov.w	r3, #1
 8012d06:	d063      	beq.n	8012dd0 <HAL_TIM_IC_Stop_DMA+0x204>
 8012d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	2000      	movs	r0, #0
 8012d10:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8012d14:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012d16:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012d18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012d1a:	68d3      	ldr	r3, [r2, #12]
 8012d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d20:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012d22:	f7f7 fd91 	bl	800a848 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012d26:	6823      	ldr	r3, [r4, #0]
 8012d28:	f241 1211 	movw	r2, #4369	; 0x1111
 8012d2c:	6a19      	ldr	r1, [r3, #32]
 8012d2e:	4211      	tst	r1, r2
 8012d30:	d104      	bne.n	8012d3c <HAL_TIM_IC_Stop_DMA+0x170>
 8012d32:	6a19      	ldr	r1, [r3, #32]
 8012d34:	f240 4244 	movw	r2, #1092	; 0x444
 8012d38:	4211      	tst	r1, r2
 8012d3a:	d0d7      	beq.n	8012cec <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	2000      	movs	r0, #0
 8012d40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d44:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8012d48:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012d4a:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012d4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012d4e:	68d3      	ldr	r3, [r2, #12]
 8012d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012d54:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012d56:	f7f7 fd77 	bl	800a848 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	f241 1211 	movw	r2, #4369	; 0x1111
 8012d60:	6a19      	ldr	r1, [r3, #32]
 8012d62:	4211      	tst	r1, r2
 8012d64:	d00f      	beq.n	8012d86 <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d66:	2301      	movs	r3, #1
 8012d68:	2000      	movs	r0, #0
 8012d6a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8012d72:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012d74:	2d14      	cmp	r5, #20
 8012d76:	f63f af55 	bhi.w	8012c24 <HAL_TIM_IC_Stop_DMA+0x58>
 8012d7a:	4b20      	ldr	r3, [pc, #128]	; (8012dfc <HAL_TIM_IC_Stop_DMA+0x230>)
 8012d7c:	40eb      	lsrs	r3, r5
 8012d7e:	07db      	lsls	r3, r3, #31
 8012d80:	f53f af77 	bmi.w	8012c72 <HAL_TIM_IC_Stop_DMA+0xa6>
 8012d84:	e74e      	b.n	8012c24 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8012d86:	6a19      	ldr	r1, [r3, #32]
 8012d88:	f240 4244 	movw	r2, #1092	; 0x444
 8012d8c:	4211      	tst	r1, r2
 8012d8e:	d0ad      	beq.n	8012cec <HAL_TIM_IC_Stop_DMA+0x120>
 8012d90:	e7e9      	b.n	8012d66 <HAL_TIM_IC_Stop_DMA+0x19a>
 8012d92:	6a19      	ldr	r1, [r3, #32]
 8012d94:	f240 4244 	movw	r2, #1092	; 0x444
 8012d98:	4211      	tst	r1, r2
 8012d9a:	d18d      	bne.n	8012cb8 <HAL_TIM_IC_Stop_DMA+0xec>
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	f022 0201 	bic.w	r2, r2, #1
 8012da2:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012da4:	e788      	b.n	8012cb8 <HAL_TIM_IC_Stop_DMA+0xec>
 8012da6:	2301      	movs	r3, #1
 8012da8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012dac:	e7ae      	b.n	8012d0c <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012dae:	4b14      	ldr	r3, [pc, #80]	; (8012e00 <HAL_TIM_IC_Stop_DMA+0x234>)
 8012db0:	4298      	cmp	r0, r3
 8012db2:	d003      	beq.n	8012dbc <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012db4:	4b13      	ldr	r3, [pc, #76]	; (8012e04 <HAL_TIM_IC_Stop_DMA+0x238>)
 8012db6:	4298      	cmp	r0, r3
 8012db8:	f47f af34 	bne.w	8012c24 <HAL_TIM_IC_Stop_DMA+0x58>
 8012dbc:	2d00      	cmp	r5, #0
 8012dbe:	f47f af31 	bne.w	8012c24 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012dc2:	480d      	ldr	r0, [pc, #52]	; (8012df8 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012dc4:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8012dc8:	f7f2 fd8c 	bl	80058e4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	e750      	b.n	8012c72 <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dd4:	e79a      	b.n	8012d0c <HAL_TIM_IC_Stop_DMA+0x140>
 8012dd6:	bf00      	nop
 8012dd8:	40010000 	.word	0x40010000
 8012ddc:	40000400 	.word	0x40000400
 8012de0:	40000800 	.word	0x40000800
 8012de4:	40000c00 	.word	0x40000c00
 8012de8:	40010400 	.word	0x40010400
 8012dec:	40014000 	.word	0x40014000
 8012df0:	40014400 	.word	0x40014400
 8012df4:	40014800 	.word	0x40014800
 8012df8:	0802e5cc 	.word	0x0802e5cc
 8012dfc:	00111111 	.word	0x00111111
 8012e00:	40001c00 	.word	0x40001c00
 8012e04:	40002000 	.word	0x40002000

08012e08 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e08:	6802      	ldr	r2, [r0, #0]
{
 8012e0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e0e:	4b6d      	ldr	r3, [pc, #436]	; (8012fc4 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8012e10:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e12:	4f6d      	ldr	r7, [pc, #436]	; (8012fc8 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8012e14:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e16:	429a      	cmp	r2, r3
 8012e18:	bf18      	it	ne
 8012e1a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8012e1e:	4e6b      	ldr	r6, [pc, #428]	; (8012fcc <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8012e20:	496b      	ldr	r1, [pc, #428]	; (8012fd0 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8012e22:	bf14      	ite	ne
 8012e24:	2301      	movne	r3, #1
 8012e26:	2300      	moveq	r3, #0
 8012e28:	42ba      	cmp	r2, r7
 8012e2a:	bf0c      	ite	eq
 8012e2c:	2300      	moveq	r3, #0
 8012e2e:	f003 0301 	andne.w	r3, r3, #1
 8012e32:	42b2      	cmp	r2, r6
 8012e34:	bf0c      	ite	eq
 8012e36:	2300      	moveq	r3, #0
 8012e38:	f003 0301 	andne.w	r3, r3, #1
 8012e3c:	428a      	cmp	r2, r1
 8012e3e:	bf0c      	ite	eq
 8012e40:	2300      	moveq	r3, #0
 8012e42:	f003 0301 	andne.w	r3, r3, #1
 8012e46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e4a:	428a      	cmp	r2, r1
 8012e4c:	bf0c      	ite	eq
 8012e4e:	2300      	moveq	r3, #0
 8012e50:	f003 0301 	andne.w	r3, r3, #1
 8012e54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e58:	428a      	cmp	r2, r1
 8012e5a:	bf0c      	ite	eq
 8012e5c:	2300      	moveq	r3, #0
 8012e5e:	f003 0301 	andne.w	r3, r3, #1
 8012e62:	b11b      	cbz	r3, 8012e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8012e64:	4b5b      	ldr	r3, [pc, #364]	; (8012fd4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8012e66:	429a      	cmp	r2, r3
 8012e68:	f040 808c 	bne.w	8012f84 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012e6c:	682b      	ldr	r3, [r5, #0]
 8012e6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8012e72:	2b40      	cmp	r3, #64	; 0x40
 8012e74:	d002      	beq.n	8012e7c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f040 808a 	bne.w	8012f90 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012e7c:	68ab      	ldr	r3, [r5, #8]
 8012e7e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8012e82:	d173      	bne.n	8012f6c <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8012e84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d078      	beq.n	8012f7e <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012e8c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8012e8e:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e90:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8012fc4 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8012e94:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e96:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8012fd4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8012e9a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e9e:	eba2 0009 	sub.w	r0, r2, r9
 8012ea2:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8012ea6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eaa:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8012eae:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eb0:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8012eb4:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eb6:	0940      	lsrs	r0, r0, #5
 8012eb8:	0949      	lsrs	r1, r1, #5
 8012eba:	ea50 0301 	orrs.w	r3, r0, r1
 8012ebe:	d135      	bne.n	8012f2c <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8012ec0:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ec2:	430b      	orrs	r3, r1
 8012ec4:	4940      	ldr	r1, [pc, #256]	; (8012fc8 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ec6:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012eca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012ece:	bf08      	it	eq
 8012ed0:	f043 0301 	orreq.w	r3, r3, #1
 8012ed4:	428a      	cmp	r2, r1
 8012ed6:	bf08      	it	eq
 8012ed8:	f043 0301 	orreq.w	r3, r3, #1
 8012edc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012ee0:	428a      	cmp	r2, r1
 8012ee2:	bf08      	it	eq
 8012ee4:	f043 0301 	orreq.w	r3, r3, #1
 8012ee8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012eec:	428a      	cmp	r2, r1
 8012eee:	bf08      	it	eq
 8012ef0:	f043 0301 	orreq.w	r3, r3, #1
 8012ef4:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8012ef8:	428a      	cmp	r2, r1
 8012efa:	bf08      	it	eq
 8012efc:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012f00:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f02:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012f04:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8012f06:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f08:	b913      	cbnz	r3, 8012f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012f0a:	4b33      	ldr	r3, [pc, #204]	; (8012fd8 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d104      	bne.n	8012f1a <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012f10:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012f12:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012f16:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012f18:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8012f1a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8012f1c:	2201      	movs	r2, #1

  return HAL_OK;
 8012f1e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8012f20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8012f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8012f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012f2c:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8012f30:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8012f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012f38:	bf18      	it	ne
 8012f3a:	2b00      	cmpne	r3, #0
 8012f3c:	bf14      	ite	ne
 8012f3e:	f04f 0c01 	movne.w	ip, #1
 8012f42:	f04f 0c00 	moveq.w	ip, #0
 8012f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f4a:	bf0c      	ite	eq
 8012f4c:	f04f 0c00 	moveq.w	ip, #0
 8012f50:	f00c 0c01 	andne.w	ip, ip, #1
 8012f54:	f1bc 0f00 	cmp.w	ip, #0
 8012f58:	d002      	beq.n	8012f60 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012f5e:	d11d      	bne.n	8012f9c <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012f60:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012f64:	4603      	mov	r3, r0
 8012f66:	ea47 070e 	orr.w	r7, r7, lr
 8012f6a:	e7aa      	b.n	8012ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012f6c:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8012f70:	481a      	ldr	r0, [pc, #104]	; (8012fdc <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f72:	f7f2 fcb7 	bl	80058e4 <assert_failed>
  __HAL_LOCK(htim);
 8012f76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d186      	bne.n	8012e8c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8012f7e:	2002      	movs	r0, #2
}
 8012f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012f84:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8012f88:	4814      	ldr	r0, [pc, #80]	; (8012fdc <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f8a:	f7f2 fcab 	bl	80058e4 <assert_failed>
 8012f8e:	e76d      	b.n	8012e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012f90:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8012f94:	4811      	ldr	r0, [pc, #68]	; (8012fdc <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f96:	f7f2 fca5 	bl	80058e4 <assert_failed>
 8012f9a:	e76f      	b.n	8012e7c <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012f9c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8012fa0:	480e      	ldr	r0, [pc, #56]	; (8012fdc <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012fa2:	f7f2 fc9f 	bl	80058e4 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8012fa6:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012fa8:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012fac:	eba2 0309 	sub.w	r3, r2, r9
 8012fb0:	eba2 0c08 	sub.w	ip, r2, r8
 8012fb4:	4258      	negs	r0, r3
 8012fb6:	4158      	adcs	r0, r3
 8012fb8:	f1dc 0100 	rsbs	r1, ip, #0
 8012fbc:	eb41 010c 	adc.w	r1, r1, ip
 8012fc0:	e7ce      	b.n	8012f60 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012fc2:	bf00      	nop
 8012fc4:	40010000 	.word	0x40010000
 8012fc8:	40000400 	.word	0x40000400
 8012fcc:	40000800 	.word	0x40000800
 8012fd0:	40000c00 	.word	0x40000c00
 8012fd4:	40010400 	.word	0x40010400
 8012fd8:	40001800 	.word	0x40001800
 8012fdc:	0802e604 	.word	0x0802e604

08012fe0 <HAL_TIMEx_CommutCallback>:
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop

08012fe4 <HAL_TIMEx_BreakCallback>:
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop

08012fe8 <HAL_TIMEx_Break2Callback>:
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop

08012fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fec:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fee:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff6:	e842 3100 	strex	r1, r3, [r2]
 8012ffa:	2900      	cmp	r1, #0
 8012ffc:	d1f7      	bne.n	8012fee <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ffe:	f102 0308 	add.w	r3, r2, #8
 8013002:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013006:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801300a:	f102 0c08 	add.w	ip, r2, #8
 801300e:	e84c 3100 	strex	r1, r3, [ip]
 8013012:	2900      	cmp	r1, #0
 8013014:	d1f3      	bne.n	8012ffe <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013016:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013018:	2b01      	cmp	r3, #1
 801301a:	d005      	beq.n	8013028 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801301c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801301e:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013020:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8013022:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013024:	6603      	str	r3, [r0, #96]	; 0x60
}
 8013026:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013028:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801302c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013030:	e842 3100 	strex	r1, r3, [r2]
 8013034:	2900      	cmp	r1, #0
 8013036:	d0f1      	beq.n	801301c <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013038:	e852 3f00 	ldrex	r3, [r2]
 801303c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013040:	e842 3100 	strex	r1, r3, [r2]
 8013044:	2900      	cmp	r1, #0
 8013046:	d1ef      	bne.n	8013028 <UART_EndRxTransfer+0x3c>
 8013048:	e7e8      	b.n	801301c <UART_EndRxTransfer+0x30>
 801304a:	bf00      	nop

0801304c <HAL_UART_DeInit>:
  if (huart == NULL)
 801304c:	2800      	cmp	r0, #0
 801304e:	d046      	beq.n	80130de <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8013050:	6802      	ldr	r2, [r0, #0]
 8013052:	4927      	ldr	r1, [pc, #156]	; (80130f0 <HAL_UART_DeInit+0xa4>)
{
 8013054:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8013056:	4b27      	ldr	r3, [pc, #156]	; (80130f4 <HAL_UART_DeInit+0xa8>)
 8013058:	4604      	mov	r4, r0
 801305a:	4827      	ldr	r0, [pc, #156]	; (80130f8 <HAL_UART_DeInit+0xac>)
 801305c:	429a      	cmp	r2, r3
 801305e:	bf18      	it	ne
 8013060:	4282      	cmpne	r2, r0
 8013062:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8013066:	bf14      	ite	ne
 8013068:	2301      	movne	r3, #1
 801306a:	2300      	moveq	r3, #0
 801306c:	428a      	cmp	r2, r1
 801306e:	bf0c      	ite	eq
 8013070:	2300      	moveq	r3, #0
 8013072:	f003 0301 	andne.w	r3, r3, #1
 8013076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801307a:	4282      	cmp	r2, r0
 801307c:	bf0c      	ite	eq
 801307e:	2300      	moveq	r3, #0
 8013080:	f003 0301 	andne.w	r3, r3, #1
 8013084:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8013088:	428a      	cmp	r2, r1
 801308a:	bf0c      	ite	eq
 801308c:	2300      	moveq	r3, #0
 801308e:	f003 0301 	andne.w	r3, r3, #1
 8013092:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8013096:	4282      	cmp	r2, r0
 8013098:	bf0c      	ite	eq
 801309a:	2300      	moveq	r3, #0
 801309c:	f003 0301 	andne.w	r3, r3, #1
 80130a0:	428a      	cmp	r2, r1
 80130a2:	bf0c      	ite	eq
 80130a4:	2300      	moveq	r3, #0
 80130a6:	f003 0301 	andne.w	r3, r3, #1
 80130aa:	b113      	cbz	r3, 80130b2 <HAL_UART_DeInit+0x66>
 80130ac:	4b13      	ldr	r3, [pc, #76]	; (80130fc <HAL_UART_DeInit+0xb0>)
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d117      	bne.n	80130e2 <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 80130b2:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 80130b4:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 80130b6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80130b8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80130ba:	6813      	ldr	r3, [r2, #0]
 80130bc:	f023 0301 	bic.w	r3, r3, #1
 80130c0:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 80130c2:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 80130c4:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 80130c6:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 80130c8:	f7f5 f800 	bl	80080cc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130cc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 80130d0:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 80130d2:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80130d4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80130d8:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130da:	6625      	str	r5, [r4, #96]	; 0x60
}
 80130dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80130de:	2001      	movs	r0, #1
}
 80130e0:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80130e2:	f240 2167 	movw	r1, #615	; 0x267
 80130e6:	4806      	ldr	r0, [pc, #24]	; (8013100 <HAL_UART_DeInit+0xb4>)
 80130e8:	f7f2 fbfc 	bl	80058e4 <assert_failed>
  __HAL_UART_DISABLE(huart);
 80130ec:	6822      	ldr	r2, [r4, #0]
 80130ee:	e7e0      	b.n	80130b2 <HAL_UART_DeInit+0x66>
 80130f0:	40004800 	.word	0x40004800
 80130f4:	40011000 	.word	0x40011000
 80130f8:	40004400 	.word	0x40004400
 80130fc:	40007c00 	.word	0x40007c00
 8013100:	0802e640 	.word	0x0802e640

08013104 <HAL_UART_Transmit_DMA>:
{
 8013104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8013106:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8013108:	2f20      	cmp	r7, #32
 801310a:	d141      	bne.n	8013190 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 801310c:	2900      	cmp	r1, #0
 801310e:	d03d      	beq.n	801318c <HAL_UART_Transmit_DMA+0x88>
 8013110:	fab2 f682 	clz	r6, r2
 8013114:	0976      	lsrs	r6, r6, #5
 8013116:	2a00      	cmp	r2, #0
 8013118:	d038      	beq.n	801318c <HAL_UART_Transmit_DMA+0x88>
 801311a:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 801311c:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8013120:	2801      	cmp	r0, #1
 8013122:	d035      	beq.n	8013190 <HAL_UART_Transmit_DMA+0x8c>
 8013124:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013126:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8013128:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 801312a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 801312e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013130:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8013134:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8013138:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801313c:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 801313e:	b190      	cbz	r0, 8013166 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013140:	f8df c060 	ldr.w	ip, [pc, #96]	; 80131a4 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013144:	4613      	mov	r3, r2
 8013146:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013148:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801314c:	f8df c058 	ldr.w	ip, [pc, #88]	; 80131a8 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013150:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8013152:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013154:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013158:	f8df c050 	ldr.w	ip, [pc, #80]	; 80131ac <HAL_UART_Transmit_DMA+0xa8>
 801315c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013160:	f7f7 face 	bl	800a700 <HAL_DMA_Start_IT>
 8013164:	b9b0      	cbnz	r0, 8013194 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013166:	6822      	ldr	r2, [r4, #0]
 8013168:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 801316a:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801316c:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 801316e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013172:	f102 0308 	add.w	r3, r2, #8
 8013176:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801317e:	f102 0108 	add.w	r1, r2, #8
 8013182:	e841 3000 	strex	r0, r3, [r1]
 8013186:	2800      	cmp	r0, #0
 8013188:	d1f3      	bne.n	8013172 <HAL_UART_Transmit_DMA+0x6e>
}
 801318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 801318c:	2001      	movs	r0, #1
}
 801318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8013190:	2002      	movs	r0, #2
}
 8013192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013194:	2310      	movs	r3, #16
        return HAL_ERROR;
 8013196:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8013198:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801319c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80131a0:	67a7      	str	r7, [r4, #120]	; 0x78
}
 80131a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131a4:	080132b5 	.word	0x080132b5
 80131a8:	080132fd 	.word	0x080132fd
 80131ac:	0801330d 	.word	0x0801330d

080131b0 <HAL_UART_Abort>:
{
 80131b0:	b538      	push	{r3, r4, r5, lr}
 80131b2:	4604      	mov	r4, r0
 80131b4:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131b6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80131ba:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131be:	e843 2100 	strex	r1, r2, [r3]
 80131c2:	2900      	cmp	r1, #0
 80131c4:	d1f7      	bne.n	80131b6 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131c6:	f103 0208 	add.w	r2, r3, #8
 80131ca:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131ce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131d2:	f103 0008 	add.w	r0, r3, #8
 80131d6:	e840 2100 	strex	r1, r2, [r0]
 80131da:	2900      	cmp	r1, #0
 80131dc:	d1f3      	bne.n	80131c6 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80131de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80131e0:	2a01      	cmp	r2, #1
 80131e2:	d043      	beq.n	801326c <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80131e4:	6899      	ldr	r1, [r3, #8]
 80131e6:	461a      	mov	r2, r3
 80131e8:	0608      	lsls	r0, r1, #24
 80131ea:	d42a      	bmi.n	8013242 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131ec:	6899      	ldr	r1, [r3, #8]
 80131ee:	0649      	lsls	r1, r1, #25
 80131f0:	d514      	bpl.n	801321c <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131f2:	f103 0208 	add.w	r2, r3, #8
 80131f6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80131fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131fe:	f103 0008 	add.w	r0, r3, #8
 8013202:	e840 2100 	strex	r1, r2, [r0]
 8013206:	2900      	cmp	r1, #0
 8013208:	d1f3      	bne.n	80131f2 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 801320a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801320c:	2800      	cmp	r0, #0
 801320e:	d03e      	beq.n	801328e <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8013210:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013212:	f7f7 fad1 	bl	800a7b8 <HAL_DMA_Abort>
 8013216:	2800      	cmp	r0, #0
 8013218:	d145      	bne.n	80132a6 <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801321a:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 801321c:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801321e:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8013220:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8013222:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8013226:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8013228:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801322c:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801322e:	6991      	ldr	r1, [r2, #24]
 8013230:	f041 0108 	orr.w	r1, r1, #8
 8013234:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8013236:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013238:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801323a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801323c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8013240:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013242:	f103 0208 	add.w	r2, r3, #8
 8013246:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801324a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801324e:	f103 0008 	add.w	r0, r3, #8
 8013252:	e840 2100 	strex	r1, r2, [r0]
 8013256:	2900      	cmp	r1, #0
 8013258:	d1f3      	bne.n	8013242 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 801325a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801325c:	b120      	cbz	r0, 8013268 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 801325e:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013260:	f7f7 faaa 	bl	800a7b8 <HAL_DMA_Abort>
 8013264:	b9a8      	cbnz	r0, 8013292 <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	461a      	mov	r2, r3
 801326a:	e7bf      	b.n	80131ec <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801326c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013270:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013274:	e843 2100 	strex	r1, r2, [r3]
 8013278:	2900      	cmp	r1, #0
 801327a:	d0b3      	beq.n	80131e4 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801327c:	e853 2f00 	ldrex	r2, [r3]
 8013280:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013284:	e843 2100 	strex	r1, r2, [r3]
 8013288:	2900      	cmp	r1, #0
 801328a:	d1ef      	bne.n	801326c <HAL_UART_Abort+0xbc>
 801328c:	e7aa      	b.n	80131e4 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801328e:	461a      	mov	r2, r3
 8013290:	e7c4      	b.n	801321c <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013292:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013294:	f7f7 fbdc 	bl	800aa50 <HAL_DMA_GetError>
 8013298:	2820      	cmp	r0, #32
 801329a:	d1e4      	bne.n	8013266 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801329c:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 801329e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80132a4:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80132a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80132a8:	f7f7 fbd2 	bl	800aa50 <HAL_DMA_GetError>
 80132ac:	2820      	cmp	r0, #32
 80132ae:	d1b4      	bne.n	801321a <HAL_UART_Abort+0x6a>
 80132b0:	e7f4      	b.n	801329c <HAL_UART_Abort+0xec>
 80132b2:	bf00      	nop

080132b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80132b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132b6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132be:	d018      	beq.n	80132f2 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 80132c0:	2300      	movs	r3, #0
 80132c2:	6802      	ldr	r2, [r0, #0]
 80132c4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132c8:	f102 0308 	add.w	r3, r2, #8
 80132cc:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80132d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132d4:	f102 0008 	add.w	r0, r2, #8
 80132d8:	e840 3100 	strex	r1, r3, [r0]
 80132dc:	2900      	cmp	r1, #0
 80132de:	d1f3      	bne.n	80132c8 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132e0:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80132e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132e8:	e842 3100 	strex	r1, r3, [r2]
 80132ec:	2900      	cmp	r1, #0
 80132ee:	d1f7      	bne.n	80132e0 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80132f0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80132f2:	f7ee fe81 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 80132f6:	bd08      	pop	{r3, pc}

080132f8 <HAL_UART_TxHalfCpltCallback>:
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop

080132fc <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80132fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80132fe:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8013300:	f7ff fffa 	bl	80132f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013304:	bd08      	pop	{r3, pc}
 8013306:	bf00      	nop

08013308 <HAL_UART_RxHalfCpltCallback>:
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop

0801330c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801330c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801330e:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013310:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8013312:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013314:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013316:	6893      	ldr	r3, [r2, #8]
 8013318:	061b      	lsls	r3, r3, #24
 801331a:	d501      	bpl.n	8013320 <UART_DMAError+0x14>
 801331c:	2921      	cmp	r1, #33	; 0x21
 801331e:	d00d      	beq.n	801333c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013320:	6893      	ldr	r3, [r2, #8]
 8013322:	065b      	lsls	r3, r3, #25
 8013324:	d501      	bpl.n	801332a <UART_DMAError+0x1e>
 8013326:	2c22      	cmp	r4, #34	; 0x22
 8013328:	d016      	beq.n	8013358 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801332a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801332e:	f043 0310 	orr.w	r3, r3, #16
 8013332:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013336:	f7f2 fe35 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801333a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 801333c:	2300      	movs	r3, #0
 801333e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013342:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013346:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801334a:	e842 3100 	strex	r1, r3, [r2]
 801334e:	2900      	cmp	r1, #0
 8013350:	d1f7      	bne.n	8013342 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8013352:	2320      	movs	r3, #32
 8013354:	6783      	str	r3, [r0, #120]	; 0x78
}
 8013356:	e7e3      	b.n	8013320 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8013358:	2300      	movs	r3, #0
 801335a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801335e:	f7ff fe45 	bl	8012fec <UART_EndRxTransfer>
 8013362:	e7e2      	b.n	801332a <UART_DMAError+0x1e>

08013364 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013364:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013366:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8013368:	2300      	movs	r3, #0
 801336a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801336e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013372:	f7f2 fe17 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013376:	bd08      	pop	{r3, pc}

08013378 <HAL_UART_AbortCpltCallback>:
 8013378:	4770      	bx	lr
 801337a:	bf00      	nop

0801337c <HAL_UART_Abort_IT>:
{
 801337c:	b570      	push	{r4, r5, r6, lr}
 801337e:	6803      	ldr	r3, [r0, #0]
 8013380:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013382:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8013386:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801338a:	e843 2100 	strex	r1, r2, [r3]
 801338e:	2900      	cmp	r1, #0
 8013390:	d1f7      	bne.n	8013382 <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013392:	f103 0208 	add.w	r2, r3, #8
 8013396:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801339a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801339e:	f103 0008 	add.w	r0, r3, #8
 80133a2:	e840 2100 	strex	r1, r2, [r0]
 80133a6:	2900      	cmp	r1, #0
 80133a8:	d1f3      	bne.n	8013392 <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133aa:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80133ac:	2a01      	cmp	r2, #1
 80133ae:	d05e      	beq.n	801346e <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 80133b0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d071      	beq.n	801349a <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80133b6:	689a      	ldr	r2, [r3, #8]
 80133b8:	461c      	mov	r4, r3
 80133ba:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80133be:	bf18      	it	ne
 80133c0:	4a3b      	ldrne	r2, [pc, #236]	; (80134b0 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 80133c2:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80133c4:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80133c6:	b129      	cbz	r1, 80133d4 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133c8:	689a      	ldr	r2, [r3, #8]
 80133ca:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80133ce:	bf18      	it	ne
 80133d0:	4a38      	ldrne	r2, [pc, #224]	; (80134b4 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 80133d2:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80133d4:	689a      	ldr	r2, [r3, #8]
 80133d6:	0612      	lsls	r2, r2, #24
 80133d8:	d430      	bmi.n	801343c <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133da:	689a      	ldr	r2, [r3, #8]
 80133dc:	0656      	lsls	r6, r2, #25
 80133de:	d515      	bpl.n	801340c <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80133e0:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133e2:	f103 0208 	add.w	r2, r3, #8
 80133e6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80133ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ee:	f103 0008 	add.w	r0, r3, #8
 80133f2:	e840 2600 	strex	r6, r2, [r0]
 80133f6:	2e00      	cmp	r6, #0
 80133f8:	d1f3      	bne.n	80133e2 <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 80133fa:	2900      	cmp	r1, #0
 80133fc:	d04f      	beq.n	801349e <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80133fe:	4608      	mov	r0, r1
 8013400:	f7f7 fa22 	bl	800a848 <HAL_DMA_Abort_IT>
 8013404:	b1c0      	cbz	r0, 8013438 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8013406:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013408:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 801340a:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 801340c:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801340e:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8013410:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8013412:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8013414:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8013418:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 801341a:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 801341e:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013420:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013424:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013426:	69a2      	ldr	r2, [r4, #24]
 8013428:	f042 0208 	orr.w	r2, r2, #8
 801342c:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 801342e:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8013430:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013432:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8013434:	f7ff ffa0 	bl	8013378 <HAL_UART_AbortCpltCallback>
}
 8013438:	2000      	movs	r0, #0
 801343a:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801343c:	f103 0208 	add.w	r2, r3, #8
 8013440:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013448:	f103 0608 	add.w	r6, r3, #8
 801344c:	e846 2400 	strex	r4, r2, [r6]
 8013450:	2c00      	cmp	r4, #0
 8013452:	d1f3      	bne.n	801343c <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8013454:	b1e0      	cbz	r0, 8013490 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8013456:	f7f7 f9f7 	bl	800a848 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801345a:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801345c:	b318      	cbz	r0, 80134a6 <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 801345e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013460:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 8013462:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013464:	461c      	mov	r4, r3
 8013466:	0651      	lsls	r1, r2, #25
 8013468:	d5d0      	bpl.n	801340c <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 801346a:	2401      	movs	r4, #1
 801346c:	e01e      	b.n	80134ac <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801346e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013472:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013476:	e843 2100 	strex	r1, r2, [r3]
 801347a:	2900      	cmp	r1, #0
 801347c:	d098      	beq.n	80133b0 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801347e:	e853 2f00 	ldrex	r2, [r3]
 8013482:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013486:	e843 2100 	strex	r1, r2, [r3]
 801348a:	2900      	cmp	r1, #0
 801348c:	d1ef      	bne.n	801346e <HAL_UART_Abort_IT+0xf2>
 801348e:	e78f      	b.n	80133b0 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013490:	689a      	ldr	r2, [r3, #8]
 8013492:	461c      	mov	r4, r3
 8013494:	0652      	lsls	r2, r2, #25
 8013496:	d5b9      	bpl.n	801340c <HAL_UART_Abort_IT+0x90>
 8013498:	e7a2      	b.n	80133e0 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801349a:	461c      	mov	r4, r3
 801349c:	e792      	b.n	80133c4 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 801349e:	2c01      	cmp	r4, #1
 80134a0:	d1ca      	bne.n	8013438 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134a2:	461c      	mov	r4, r3
 80134a4:	e7b2      	b.n	801340c <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80134a6:	689a      	ldr	r2, [r3, #8]
 80134a8:	0650      	lsls	r0, r2, #25
 80134aa:	d5c5      	bpl.n	8013438 <HAL_UART_Abort_IT+0xbc>
 80134ac:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80134ae:	e798      	b.n	80133e2 <HAL_UART_Abort_IT+0x66>
 80134b0:	080134f9 	.word	0x080134f9
 80134b4:	080134b9 	.word	0x080134b9

080134b8 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80134b8:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 80134ba:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80134bc:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 80134c0:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 80134c2:	b113      	cbz	r3, 80134ca <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80134c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134c6:	b103      	cbz	r3, 80134ca <UART_DMARxAbortCallback+0x12>
 80134c8:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80134ca:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134cc:	6802      	ldr	r2, [r0, #0]
 80134ce:	210f      	movs	r1, #15
{
 80134d0:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80134d2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80134d6:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 80134d8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134e0:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80134e2:	6991      	ldr	r1, [r2, #24]
 80134e4:	f041 0108 	orr.w	r1, r1, #8
 80134e8:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80134ea:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80134ec:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134ee:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80134f0:	f7ff ff42 	bl	8013378 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80134f4:	bd10      	pop	{r4, pc}
 80134f6:	bf00      	nop

080134f8 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80134f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80134fa:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 80134fc:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8013500:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8013502:	b113      	cbz	r3, 801350a <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8013504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013506:	b103      	cbz	r3, 801350a <UART_DMATxAbortCallback+0x12>
 8013508:	4770      	bx	lr
{
 801350a:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 801350c:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 801350e:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013510:	6801      	ldr	r1, [r0, #0]
 8013512:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8013514:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8013518:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801351c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013520:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8013522:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013524:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013526:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8013528:	f7ff ff26 	bl	8013378 <HAL_UART_AbortCpltCallback>
}
 801352c:	bd10      	pop	{r4, pc}
 801352e:	bf00      	nop

08013530 <HAL_UARTEx_RxEventCallback>:
}
 8013530:	4770      	bx	lr
 8013532:	bf00      	nop

08013534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013534:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013536:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8013538:	2b22      	cmp	r3, #34	; 0x22
 801353a:	d005      	beq.n	8013548 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801353c:	6802      	ldr	r2, [r0, #0]
 801353e:	6993      	ldr	r3, [r2, #24]
 8013540:	f043 0308 	orr.w	r3, r3, #8
 8013544:	6193      	str	r3, [r2, #24]
  }
}
 8013546:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013548:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801354a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013550:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013552:	400b      	ands	r3, r1
 8013554:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8013556:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 801355a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801355c:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 801355e:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8013560:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8013562:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013564:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013568:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 801356c:	b29b      	uxth	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1e9      	bne.n	8013546 <UART_RxISR_8BIT+0x12>
 8013572:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013574:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013578:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801357c:	e843 2100 	strex	r1, r2, [r3]
 8013580:	2900      	cmp	r1, #0
 8013582:	d1f7      	bne.n	8013574 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013584:	f103 0208 	add.w	r2, r3, #8
 8013588:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801358c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013590:	f103 0c08 	add.w	ip, r3, #8
 8013594:	e84c 2100 	strex	r1, r2, [ip]
 8013598:	2900      	cmp	r1, #0
 801359a:	d1f3      	bne.n	8013584 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 801359c:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 801359e:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80135a0:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135a2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80135a4:	2a01      	cmp	r2, #1
 80135a6:	d112      	bne.n	80135ce <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135a8:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135aa:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135b2:	e843 2100 	strex	r1, r2, [r3]
 80135b6:	2900      	cmp	r1, #0
 80135b8:	d1f7      	bne.n	80135aa <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80135ba:	69da      	ldr	r2, [r3, #28]
 80135bc:	06d2      	lsls	r2, r2, #27
 80135be:	d501      	bpl.n	80135c4 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80135c0:	2210      	movs	r2, #16
 80135c2:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80135c4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80135c8:	f7ff ffb2 	bl	8013530 <HAL_UARTEx_RxEventCallback>
}
 80135cc:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80135ce:	f7f2 fc6b 	bl	8005ea8 <HAL_UART_RxCpltCallback>
}
 80135d2:	bd08      	pop	{r3, pc}

080135d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80135d4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80135d6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80135d8:	2b22      	cmp	r3, #34	; 0x22
 80135da:	d005      	beq.n	80135e8 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135dc:	6802      	ldr	r2, [r0, #0]
 80135de:	6993      	ldr	r3, [r2, #24]
 80135e0:	f043 0308 	orr.w	r3, r3, #8
 80135e4:	6193      	str	r3, [r2, #24]
  }
}
 80135e6:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80135e8:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80135ea:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80135ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80135f0:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80135f2:	ea02 020c 	and.w	r2, r2, ip
 80135f6:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80135fa:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80135fe:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013600:	3a01      	subs	r2, #1
 8013602:	b292      	uxth	r2, r2
 8013604:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013608:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 801360c:	b292      	uxth	r2, r2
 801360e:	2a00      	cmp	r2, #0
 8013610:	d1e9      	bne.n	80135e6 <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013612:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801361a:	e843 2100 	strex	r1, r2, [r3]
 801361e:	2900      	cmp	r1, #0
 8013620:	d1f7      	bne.n	8013612 <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013622:	f103 0208 	add.w	r2, r3, #8
 8013626:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801362a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801362e:	f103 0c08 	add.w	ip, r3, #8
 8013632:	e84c 2100 	strex	r1, r2, [ip]
 8013636:	2900      	cmp	r1, #0
 8013638:	d1f3      	bne.n	8013622 <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 801363a:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 801363c:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 801363e:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013640:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013642:	2a01      	cmp	r2, #1
 8013644:	d112      	bne.n	801366c <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013646:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013648:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801364c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013650:	e843 2100 	strex	r1, r2, [r3]
 8013654:	2900      	cmp	r1, #0
 8013656:	d1f7      	bne.n	8013648 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013658:	69da      	ldr	r2, [r3, #28]
 801365a:	06d2      	lsls	r2, r2, #27
 801365c:	d501      	bpl.n	8013662 <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801365e:	2210      	movs	r2, #16
 8013660:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013662:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013666:	f7ff ff63 	bl	8013530 <HAL_UARTEx_RxEventCallback>
}
 801366a:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 801366c:	f7f2 fc1c 	bl	8005ea8 <HAL_UART_RxCpltCallback>
}
 8013670:	bd08      	pop	{r3, pc}
 8013672:	bf00      	nop

08013674 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013674:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8013676:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013678:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801367a:	2b01      	cmp	r3, #1
 801367c:	d002      	beq.n	8013684 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 801367e:	f7ff fe43 	bl	8013308 <HAL_UART_RxHalfCpltCallback>
}
 8013682:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013684:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013688:	0849      	lsrs	r1, r1, #1
 801368a:	f7ff ff51 	bl	8013530 <HAL_UARTEx_RxEventCallback>
}
 801368e:	bd08      	pop	{r3, pc}

08013690 <UART_DMAReceiveCplt>:
{
 8013690:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013692:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013694:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801369a:	d028      	beq.n	80136ee <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 801369c:	2200      	movs	r2, #0
 801369e:	6803      	ldr	r3, [r0, #0]
 80136a0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136a4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80136a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ac:	e843 2100 	strex	r1, r2, [r3]
 80136b0:	2900      	cmp	r1, #0
 80136b2:	d1f7      	bne.n	80136a4 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136b4:	f103 0208 	add.w	r2, r3, #8
 80136b8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136c0:	f103 0c08 	add.w	ip, r3, #8
 80136c4:	e84c 2100 	strex	r1, r2, [ip]
 80136c8:	2900      	cmp	r1, #0
 80136ca:	d1f3      	bne.n	80136b4 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136cc:	f103 0208 	add.w	r2, r3, #8
 80136d0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136d8:	f103 0c08 	add.w	ip, r3, #8
 80136dc:	e84c 2100 	strex	r1, r2, [ip]
 80136e0:	2900      	cmp	r1, #0
 80136e2:	d1f3      	bne.n	80136cc <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80136e4:	2220      	movs	r2, #32
 80136e6:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136e8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80136ea:	2a01      	cmp	r2, #1
 80136ec:	d005      	beq.n	80136fa <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d013      	beq.n	801371c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80136f4:	f7f2 fbd8 	bl	8005ea8 <HAL_UART_RxCpltCallback>
}
 80136f8:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136fa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80136fe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013702:	e843 2100 	strex	r1, r2, [r3]
 8013706:	2900      	cmp	r1, #0
 8013708:	d0f1      	beq.n	80136ee <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801370a:	e853 2f00 	ldrex	r2, [r3]
 801370e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013712:	e843 2100 	strex	r1, r2, [r3]
 8013716:	2900      	cmp	r1, #0
 8013718:	d1ef      	bne.n	80136fa <UART_DMAReceiveCplt+0x6a>
 801371a:	e7e8      	b.n	80136ee <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801371c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013720:	f7ff ff06 	bl	8013530 <HAL_UARTEx_RxEventCallback>
}
 8013724:	bd08      	pop	{r3, pc}
 8013726:	bf00      	nop

08013728 <HAL_UARTEx_WakeupCallback>:
}
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801372c:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801372e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013732:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013734:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8013736:	ea12 0f0c 	tst.w	r2, ip
{
 801373a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013740:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8013742:	d17d      	bne.n	8013840 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013744:	0697      	lsls	r7, r2, #26
 8013746:	d502      	bpl.n	801374e <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013748:	068e      	lsls	r6, r1, #26
 801374a:	f100 80f4 	bmi.w	8013936 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801374e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013750:	2801      	cmp	r0, #1
 8013752:	d024      	beq.n	801379e <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013754:	02d0      	lsls	r0, r2, #11
 8013756:	d502      	bpl.n	801375e <HAL_UART_IRQHandler+0x32>
 8013758:	026f      	lsls	r7, r5, #9
 801375a:	f100 80f1 	bmi.w	8013940 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 801375e:	0616      	lsls	r6, r2, #24
 8013760:	d414      	bmi.n	801378c <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013762:	0650      	lsls	r0, r2, #25
 8013764:	d501      	bpl.n	801376a <HAL_UART_IRQHandler+0x3e>
 8013766:	064a      	lsls	r2, r1, #25
 8013768:	d401      	bmi.n	801376e <HAL_UART_IRQHandler+0x42>
}
 801376a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801376e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013776:	e843 2100 	strex	r1, r2, [r3]
 801377a:	2900      	cmp	r1, #0
 801377c:	d1f7      	bne.n	801376e <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 801377e:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8013780:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8013782:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8013784:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8013786:	f7ee fc37 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 801378a:	e7ee      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801378c:	060d      	lsls	r5, r1, #24
 801378e:	d5e8      	bpl.n	8013762 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8013790:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8013792:	2b00      	cmp	r3, #0
 8013794:	d0e9      	beq.n	801376a <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8013796:	4620      	mov	r0, r4
}
 8013798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 801379c:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801379e:	06d7      	lsls	r7, r2, #27
 80137a0:	d5d8      	bpl.n	8013754 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80137a2:	06ce      	lsls	r6, r1, #27
 80137a4:	d5d6      	bpl.n	8013754 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80137a6:	2210      	movs	r2, #16
 80137a8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137aa:	689a      	ldr	r2, [r3, #8]
 80137ac:	0655      	lsls	r5, r2, #25
 80137ae:	f140 80d9 	bpl.w	8013964 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80137b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80137b4:	6802      	ldr	r2, [r0, #0]
 80137b6:	6852      	ldr	r2, [r2, #4]
 80137b8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	d0d5      	beq.n	801376a <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80137be:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80137c2:	4291      	cmp	r1, r2
 80137c4:	d9d1      	bls.n	801376a <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 80137c6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80137ca:	69c2      	ldr	r2, [r0, #28]
 80137cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80137d0:	d02e      	beq.n	8013830 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137d2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80137d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137da:	e843 2100 	strex	r1, r2, [r3]
 80137de:	2900      	cmp	r1, #0
 80137e0:	d1f7      	bne.n	80137d2 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137e2:	f103 0208 	add.w	r2, r3, #8
 80137e6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137ea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137ee:	f103 0508 	add.w	r5, r3, #8
 80137f2:	e845 2100 	strex	r1, r2, [r5]
 80137f6:	2900      	cmp	r1, #0
 80137f8:	d1f3      	bne.n	80137e2 <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137fa:	f103 0208 	add.w	r2, r3, #8
 80137fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013806:	f103 0508 	add.w	r5, r3, #8
 801380a:	e845 2100 	strex	r1, r2, [r5]
 801380e:	2900      	cmp	r1, #0
 8013810:	d1f3      	bne.n	80137fa <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 8013812:	2220      	movs	r2, #32
 8013814:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013816:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013818:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801381c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013820:	e843 2100 	strex	r1, r2, [r3]
 8013824:	2900      	cmp	r1, #0
 8013826:	d1f7      	bne.n	8013818 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013828:	f7f6 ffc6 	bl	800a7b8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801382c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8013830:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8013834:	4620      	mov	r0, r4
 8013836:	1ac9      	subs	r1, r1, r3
 8013838:	b289      	uxth	r1, r1
 801383a:	f7ff fe79 	bl	8013530 <HAL_UARTEx_RxEventCallback>
 801383e:	e794      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013840:	4864      	ldr	r0, [pc, #400]	; (80139d4 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013842:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013846:	4008      	ands	r0, r1
 8013848:	4330      	orrs	r0, r6
 801384a:	d080      	beq.n	801374e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801384c:	07d5      	lsls	r5, r2, #31
 801384e:	461f      	mov	r7, r3
 8013850:	d509      	bpl.n	8013866 <HAL_UART_IRQHandler+0x13a>
 8013852:	05c8      	lsls	r0, r1, #23
 8013854:	d507      	bpl.n	8013866 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013856:	2001      	movs	r0, #1
 8013858:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801385a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801385e:	f040 0001 	orr.w	r0, r0, #1
 8013862:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013866:	0795      	lsls	r5, r2, #30
 8013868:	d560      	bpl.n	801392c <HAL_UART_IRQHandler+0x200>
 801386a:	b18e      	cbz	r6, 8013890 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801386c:	2002      	movs	r0, #2
 801386e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013870:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013874:	f040 0004 	orr.w	r0, r0, #4
 8013878:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801387c:	0750      	lsls	r0, r2, #29
 801387e:	d507      	bpl.n	8013890 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013880:	2004      	movs	r0, #4
 8013882:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013884:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013888:	f040 0002 	orr.w	r0, r0, #2
 801388c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013890:	0710      	lsls	r0, r2, #28
 8013892:	d50b      	bpl.n	80138ac <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013894:	f001 0020 	and.w	r0, r1, #32
 8013898:	4330      	orrs	r0, r6
 801389a:	d007      	beq.n	80138ac <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801389c:	2008      	movs	r0, #8
 801389e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80138a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80138a4:	f040 0008 	orr.w	r0, r0, #8
 80138a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80138ac:	0516      	lsls	r6, r2, #20
 80138ae:	d50a      	bpl.n	80138c6 <HAL_UART_IRQHandler+0x19a>
 80138b0:	014d      	lsls	r5, r1, #5
 80138b2:	d508      	bpl.n	80138c6 <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80138b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80138ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80138be:	f043 0320 	orr.w	r3, r3, #32
 80138c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80138c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f43f af4d 	beq.w	801376a <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80138d0:	0690      	lsls	r0, r2, #26
 80138d2:	d501      	bpl.n	80138d8 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80138d4:	0689      	lsls	r1, r1, #26
 80138d6:	d43e      	bmi.n	8013956 <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80138d8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80138dc:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80138de:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80138e0:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80138e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138e8:	431d      	orrs	r5, r3
 80138ea:	d06e      	beq.n	80139ca <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 80138ec:	f7ff fb7e 	bl	8012fec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	689a      	ldr	r2, [r3, #8]
 80138f4:	0652      	lsls	r2, r2, #25
 80138f6:	d52a      	bpl.n	801394e <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138f8:	f103 0208 	add.w	r2, r3, #8
 80138fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013904:	f103 0008 	add.w	r0, r3, #8
 8013908:	e840 2100 	strex	r1, r2, [r0]
 801390c:	2900      	cmp	r1, #0
 801390e:	d1f3      	bne.n	80138f8 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 8013910:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8013912:	b1e0      	cbz	r0, 801394e <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013914:	4b30      	ldr	r3, [pc, #192]	; (80139d8 <HAL_UART_IRQHandler+0x2ac>)
 8013916:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013918:	f7f6 ff96 	bl	800a848 <HAL_DMA_Abort_IT>
 801391c:	2800      	cmp	r0, #0
 801391e:	f43f af24 	beq.w	801376a <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013922:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8013924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013928:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801392a:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801392c:	0755      	lsls	r5, r2, #29
 801392e:	d5af      	bpl.n	8013890 <HAL_UART_IRQHandler+0x164>
 8013930:	2e00      	cmp	r6, #0
 8013932:	d1a5      	bne.n	8013880 <HAL_UART_IRQHandler+0x154>
 8013934:	e7ac      	b.n	8013890 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8013936:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8013938:	2b00      	cmp	r3, #0
 801393a:	f47f af2d 	bne.w	8013798 <HAL_UART_IRQHandler+0x6c>
 801393e:	e714      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013940:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8013944:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013946:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8013948:	f7ff feee 	bl	8013728 <HAL_UARTEx_WakeupCallback>
    return;
 801394c:	e70d      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 801394e:	4620      	mov	r0, r4
 8013950:	f7f2 fb28 	bl	8005fa4 <HAL_UART_ErrorCallback>
 8013954:	e709      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8013956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013958:	2b00      	cmp	r3, #0
 801395a:	d0bd      	beq.n	80138d8 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 801395c:	4620      	mov	r0, r4
 801395e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013960:	6827      	ldr	r7, [r4, #0]
 8013962:	e7b9      	b.n	80138d8 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013964:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8013968:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 801396c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013970:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8013972:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013974:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8013976:	2900      	cmp	r1, #0
 8013978:	f43f aef7 	beq.w	801376a <HAL_UART_IRQHandler+0x3e>
 801397c:	2a00      	cmp	r2, #0
 801397e:	f43f aef4 	beq.w	801376a <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013982:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801398a:	e843 2000 	strex	r0, r2, [r3]
 801398e:	2800      	cmp	r0, #0
 8013990:	d1f7      	bne.n	8013982 <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013992:	f103 0208 	add.w	r2, r3, #8
 8013996:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801399a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801399e:	f103 0508 	add.w	r5, r3, #8
 80139a2:	e845 2000 	strex	r0, r2, [r5]
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d1f3      	bne.n	8013992 <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 80139aa:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80139ac:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80139ae:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139b0:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139b2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139b6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ba:	e843 2000 	strex	r0, r2, [r3]
 80139be:	2800      	cmp	r0, #0
 80139c0:	d1f7      	bne.n	80139b2 <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80139c2:	4620      	mov	r0, r4
 80139c4:	f7ff fdb4 	bl	8013530 <HAL_UARTEx_RxEventCallback>
 80139c8:	e6cf      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 80139ca:	f7f2 faeb 	bl	8005fa4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139ce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80139d2:	e6ca      	b.n	801376a <HAL_UART_IRQHandler+0x3e>
 80139d4:	04000120 	.word	0x04000120
 80139d8:	08013365 	.word	0x08013365

080139dc <UART_SetConfig>:
{
 80139dc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80139de:	6842      	ldr	r2, [r0, #4]
{
 80139e0:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80139e2:	4bac      	ldr	r3, [pc, #688]	; (8013c94 <UART_SetConfig+0x2b8>)
 80139e4:	429a      	cmp	r2, r3
 80139e6:	f200 80bb 	bhi.w	8013b60 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80139ea:	68a3      	ldr	r3, [r4, #8]
 80139ec:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80139f0:	d002      	beq.n	80139f8 <UART_SetConfig+0x1c>
 80139f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80139f6:	d179      	bne.n	8013aec <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80139f8:	68e3      	ldr	r3, [r4, #12]
 80139fa:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80139fe:	d17e      	bne.n	8013afe <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013a00:	6a23      	ldr	r3, [r4, #32]
 8013a02:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8013a06:	f040 8084 	bne.w	8013b12 <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8013a0a:	6923      	ldr	r3, [r4, #16]
 8013a0c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8013a10:	d002      	beq.n	8013a18 <UART_SetConfig+0x3c>
 8013a12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013a16:	d163      	bne.n	8013ae0 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013a18:	6963      	ldr	r3, [r4, #20]
 8013a1a:	f033 020c 	bics.w	r2, r3, #12
 8013a1e:	d146      	bne.n	8013aae <UART_SetConfig+0xd2>
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d044      	beq.n	8013aae <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013a24:	69a3      	ldr	r3, [r4, #24]
 8013a26:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013a2a:	d149      	bne.n	8013ac0 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013a2c:	69e0      	ldr	r0, [r4, #28]
 8013a2e:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8013a32:	d14e      	bne.n	8013ad2 <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a34:	6921      	ldr	r1, [r4, #16]
 8013a36:	68a2      	ldr	r2, [r4, #8]
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	430a      	orrs	r2, r1
 8013a3c:	6961      	ldr	r1, [r4, #20]
 8013a3e:	681d      	ldr	r5, [r3, #0]
 8013a40:	430a      	orrs	r2, r1
 8013a42:	4995      	ldr	r1, [pc, #596]	; (8013c98 <UART_SetConfig+0x2bc>)
 8013a44:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a46:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a48:	430a      	orrs	r2, r1
 8013a4a:	4302      	orrs	r2, r0
 8013a4c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a4e:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013a50:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a52:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8013a56:	4329      	orrs	r1, r5
 8013a58:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8013a5a:	6a21      	ldr	r1, [r4, #32]
 8013a5c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a5e:	6899      	ldr	r1, [r3, #8]
 8013a60:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8013a64:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a66:	498d      	ldr	r1, [pc, #564]	; (8013c9c <UART_SetConfig+0x2c0>)
 8013a68:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a6a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a6c:	d07e      	beq.n	8013b6c <UART_SetConfig+0x190>
 8013a6e:	4a8c      	ldr	r2, [pc, #560]	; (8013ca0 <UART_SetConfig+0x2c4>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d054      	beq.n	8013b1e <UART_SetConfig+0x142>
 8013a74:	4a8b      	ldr	r2, [pc, #556]	; (8013ca4 <UART_SetConfig+0x2c8>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	f000 812a 	beq.w	8013cd0 <UART_SetConfig+0x2f4>
 8013a7c:	4a8a      	ldr	r2, [pc, #552]	; (8013ca8 <UART_SetConfig+0x2cc>)
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	f000 8137 	beq.w	8013cf2 <UART_SetConfig+0x316>
 8013a84:	4a89      	ldr	r2, [pc, #548]	; (8013cac <UART_SetConfig+0x2d0>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	f000 809e 	beq.w	8013bc8 <UART_SetConfig+0x1ec>
 8013a8c:	4a88      	ldr	r2, [pc, #544]	; (8013cb0 <UART_SetConfig+0x2d4>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	f000 80d1 	beq.w	8013c36 <UART_SetConfig+0x25a>
 8013a94:	4a87      	ldr	r2, [pc, #540]	; (8013cb4 <UART_SetConfig+0x2d8>)
 8013a96:	4293      	cmp	r3, r2
 8013a98:	f000 8151 	beq.w	8013d3e <UART_SetConfig+0x362>
 8013a9c:	4a86      	ldr	r2, [pc, #536]	; (8013cb8 <UART_SetConfig+0x2dc>)
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	f000 8164 	beq.w	8013d6c <UART_SetConfig+0x390>
    switch (clocksource)
 8013aa4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8013aa6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013aa8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013aac:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013aae:	f640 3176 	movw	r1, #2934	; 0xb76
 8013ab2:	4882      	ldr	r0, [pc, #520]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013ab4:	f7f1 ff16 	bl	80058e4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013ab8:	69a3      	ldr	r3, [r4, #24]
 8013aba:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013abe:	d0b5      	beq.n	8013a2c <UART_SetConfig+0x50>
 8013ac0:	487e      	ldr	r0, [pc, #504]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013ac2:	f640 3177 	movw	r1, #2935	; 0xb77
 8013ac6:	f7f1 ff0d 	bl	80058e4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013aca:	69e0      	ldr	r0, [r4, #28]
 8013acc:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8013ad0:	d0b0      	beq.n	8013a34 <UART_SetConfig+0x58>
 8013ad2:	487a      	ldr	r0, [pc, #488]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013ad4:	f640 3178 	movw	r1, #2936	; 0xb78
 8013ad8:	f7f1 ff04 	bl	80058e4 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013adc:	69e0      	ldr	r0, [r4, #28]
 8013ade:	e7a9      	b.n	8013a34 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8013ae0:	f640 3175 	movw	r1, #2933	; 0xb75
 8013ae4:	4875      	ldr	r0, [pc, #468]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013ae6:	f7f1 fefd 	bl	80058e4 <assert_failed>
 8013aea:	e795      	b.n	8013a18 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8013aec:	f640 3171 	movw	r1, #2929	; 0xb71
 8013af0:	4872      	ldr	r0, [pc, #456]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013af2:	f7f1 fef7 	bl	80058e4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013af6:	68e3      	ldr	r3, [r4, #12]
 8013af8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8013afc:	d080      	beq.n	8013a00 <UART_SetConfig+0x24>
 8013afe:	f640 3172 	movw	r1, #2930	; 0xb72
 8013b02:	486e      	ldr	r0, [pc, #440]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013b04:	f7f1 feee 	bl	80058e4 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013b08:	6a23      	ldr	r3, [r4, #32]
 8013b0a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8013b0e:	f43f af7c 	beq.w	8013a0a <UART_SetConfig+0x2e>
 8013b12:	f640 3173 	movw	r1, #2931	; 0xb73
 8013b16:	4869      	ldr	r0, [pc, #420]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013b18:	f7f1 fee4 	bl	80058e4 <assert_failed>
 8013b1c:	e775      	b.n	8013a0a <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b1e:	4b68      	ldr	r3, [pc, #416]	; (8013cc0 <UART_SetConfig+0x2e4>)
 8013b20:	4a68      	ldr	r2, [pc, #416]	; (8013cc4 <UART_SetConfig+0x2e8>)
 8013b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b26:	f003 030c 	and.w	r3, r3, #12
 8013b2a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b30:	d033      	beq.n	8013b9a <UART_SetConfig+0x1be>
    switch (clocksource)
 8013b32:	2b08      	cmp	r3, #8
 8013b34:	d8b6      	bhi.n	8013aa4 <UART_SetConfig+0xc8>
 8013b36:	a201      	add	r2, pc, #4	; (adr r2, 8013b3c <UART_SetConfig+0x160>)
 8013b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b3c:	08013bf7 	.word	0x08013bf7
 8013b40:	08013b83 	.word	0x08013b83
 8013b44:	08013c4d 	.word	0x08013c4d
 8013b48:	08013aa5 	.word	0x08013aa5
 8013b4c:	08013beb 	.word	0x08013beb
 8013b50:	08013aa5 	.word	0x08013aa5
 8013b54:	08013aa5 	.word	0x08013aa5
 8013b58:	08013aa5 	.word	0x08013aa5
 8013b5c:	08013c0d 	.word	0x08013c0d
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8013b60:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8013b64:	4855      	ldr	r0, [pc, #340]	; (8013cbc <UART_SetConfig+0x2e0>)
 8013b66:	f7f1 febd 	bl	80058e4 <assert_failed>
 8013b6a:	e73e      	b.n	80139ea <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b6c:	4b54      	ldr	r3, [pc, #336]	; (8013cc0 <UART_SetConfig+0x2e4>)
 8013b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b72:	f003 0303 	and.w	r3, r3, #3
 8013b76:	3b01      	subs	r3, #1
 8013b78:	2b02      	cmp	r3, #2
 8013b7a:	d90b      	bls.n	8013b94 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b80:	d066      	beq.n	8013c50 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013b82:	f7fb f9d5 	bl	800ef30 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013b86:	2800      	cmp	r0, #0
 8013b88:	d142      	bne.n	8013c10 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8013b8e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013b92:	bd38      	pop	{r3, r4, r5, pc}
 8013b94:	4a4c      	ldr	r2, [pc, #304]	; (8013cc8 <UART_SetConfig+0x2ec>)
 8013b96:	5cd3      	ldrb	r3, [r2, r3]
 8013b98:	e7c8      	b.n	8013b2c <UART_SetConfig+0x150>
    switch (clocksource)
 8013b9a:	2b08      	cmp	r3, #8
 8013b9c:	d882      	bhi.n	8013aa4 <UART_SetConfig+0xc8>
 8013b9e:	a201      	add	r2, pc, #4	; (adr r2, 8013ba4 <UART_SetConfig+0x1c8>)
 8013ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba4:	08013c8d 	.word	0x08013c8d
 8013ba8:	08013c51 	.word	0x08013c51
 8013bac:	08013d35 	.word	0x08013d35
 8013bb0:	08013aa5 	.word	0x08013aa5
 8013bb4:	08013c87 	.word	0x08013c87
 8013bb8:	08013aa5 	.word	0x08013aa5
 8013bbc:	08013aa5 	.word	0x08013aa5
 8013bc0:	08013aa5 	.word	0x08013aa5
 8013bc4:	08013d39 	.word	0x08013d39
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013bc8:	4b3d      	ldr	r3, [pc, #244]	; (8013cc0 <UART_SetConfig+0x2e4>)
 8013bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013bd6:	d036      	beq.n	8013c46 <UART_SetConfig+0x26a>
 8013bd8:	d810      	bhi.n	8013bfc <UART_SetConfig+0x220>
 8013bda:	b14b      	cbz	r3, 8013bf0 <UART_SetConfig+0x214>
 8013bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013be0:	f47f af60 	bne.w	8013aa4 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013be4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013be8:	d04d      	beq.n	8013c86 <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8013bea:	f7fb f839 	bl	800ec60 <HAL_RCC_GetSysClockFreq>
        break;
 8013bee:	e7ca      	b.n	8013b86 <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013bf0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013bf4:	d04a      	beq.n	8013c8c <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013bf6:	f7fb f98b 	bl	800ef10 <HAL_RCC_GetPCLK1Freq>
        break;
 8013bfa:	e7c4      	b.n	8013b86 <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c00:	f47f af50 	bne.w	8013aa4 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c04:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c08:	f000 8096 	beq.w	8013d38 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 8013c0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013c10:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c12:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013c16:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8013c1a:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c1e:	f1a3 0110 	sub.w	r1, r3, #16
 8013c22:	4291      	cmp	r1, r2
 8013c24:	f63f af3e 	bhi.w	8013aa4 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013c28:	6822      	ldr	r2, [r4, #0]
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8013c2e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013c30:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013c34:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013c36:	4b22      	ldr	r3, [pc, #136]	; (8013cc0 <UART_SetConfig+0x2e4>)
 8013c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c44:	d168      	bne.n	8013d18 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c4a:	d073      	beq.n	8013d34 <UART_SetConfig+0x358>
    switch (clocksource)
 8013c4c:	481f      	ldr	r0, [pc, #124]	; (8013ccc <UART_SetConfig+0x2f0>)
 8013c4e:	e7df      	b.n	8013c10 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013c50:	f7fb f96e 	bl	800ef30 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d098      	beq.n	8013b8a <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013c58:	0043      	lsls	r3, r0, #1
 8013c5a:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c5c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013c60:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013c64:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c68:	f1a3 0210 	sub.w	r2, r3, #16
 8013c6c:	428a      	cmp	r2, r1
 8013c6e:	f63f af19 	bhi.w	8013aa4 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c72:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013c76:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8013c7a:	6821      	ldr	r1, [r4, #0]
 8013c7c:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c7e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8013c80:	4313      	orrs	r3, r2
 8013c82:	60cb      	str	r3, [r1, #12]
 8013c84:	e70f      	b.n	8013aa6 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8013c86:	f7fa ffeb 	bl	800ec60 <HAL_RCC_GetSysClockFreq>
        break;
 8013c8a:	e7e3      	b.n	8013c54 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013c8c:	f7fb f940 	bl	800ef10 <HAL_RCC_GetPCLK1Freq>
        break;
 8013c90:	e7e0      	b.n	8013c54 <UART_SetConfig+0x278>
 8013c92:	bf00      	nop
 8013c94:	019bfcc0 	.word	0x019bfcc0
 8013c98:	efff69f3 	.word	0xefff69f3
 8013c9c:	40011000 	.word	0x40011000
 8013ca0:	40004400 	.word	0x40004400
 8013ca4:	40004800 	.word	0x40004800
 8013ca8:	40004c00 	.word	0x40004c00
 8013cac:	40005000 	.word	0x40005000
 8013cb0:	40011400 	.word	0x40011400
 8013cb4:	40007800 	.word	0x40007800
 8013cb8:	40007c00 	.word	0x40007c00
 8013cbc:	0802e640 	.word	0x0802e640
 8013cc0:	40023800 	.word	0x40023800
 8013cc4:	0802e680 	.word	0x0802e680
 8013cc8:	0802e67c 	.word	0x0802e67c
 8013ccc:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cd0:	4b32      	ldr	r3, [pc, #200]	; (8013d9c <UART_SetConfig+0x3c0>)
 8013cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013cda:	2b20      	cmp	r3, #32
 8013cdc:	d0b3      	beq.n	8013c46 <UART_SetConfig+0x26a>
 8013cde:	d805      	bhi.n	8013cec <UART_SetConfig+0x310>
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d085      	beq.n	8013bf0 <UART_SetConfig+0x214>
 8013ce4:	2b10      	cmp	r3, #16
 8013ce6:	f43f af7d 	beq.w	8013be4 <UART_SetConfig+0x208>
 8013cea:	e6db      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013cec:	2b30      	cmp	r3, #48	; 0x30
 8013cee:	d089      	beq.n	8013c04 <UART_SetConfig+0x228>
 8013cf0:	e6d8      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013cf2:	4b2a      	ldr	r3, [pc, #168]	; (8013d9c <UART_SetConfig+0x3c0>)
 8013cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013cfc:	2b80      	cmp	r3, #128	; 0x80
 8013cfe:	d0a2      	beq.n	8013c46 <UART_SetConfig+0x26a>
 8013d00:	d806      	bhi.n	8013d10 <UART_SetConfig+0x334>
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f43f af74 	beq.w	8013bf0 <UART_SetConfig+0x214>
 8013d08:	2b40      	cmp	r3, #64	; 0x40
 8013d0a:	f43f af6b 	beq.w	8013be4 <UART_SetConfig+0x208>
 8013d0e:	e6c9      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d10:	2bc0      	cmp	r3, #192	; 0xc0
 8013d12:	f43f af77 	beq.w	8013c04 <UART_SetConfig+0x228>
 8013d16:	e6c5      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d18:	d807      	bhi.n	8013d2a <UART_SetConfig+0x34e>
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f43f af2e 	beq.w	8013b7c <UART_SetConfig+0x1a0>
 8013d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d24:	f43f af5e 	beq.w	8013be4 <UART_SetConfig+0x208>
 8013d28:	e6bc      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013d2e:	f43f af69 	beq.w	8013c04 <UART_SetConfig+0x228>
 8013d32:	e6b7      	b.n	8013aa4 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d34:	4b1a      	ldr	r3, [pc, #104]	; (8013da0 <UART_SetConfig+0x3c4>)
 8013d36:	e790      	b.n	8013c5a <UART_SetConfig+0x27e>
    switch (clocksource)
 8013d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013d3c:	e78d      	b.n	8013c5a <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d3e:	4b17      	ldr	r3, [pc, #92]	; (8013d9c <UART_SetConfig+0x3c0>)
 8013d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d4c:	f43f af7b 	beq.w	8013c46 <UART_SetConfig+0x26a>
 8013d50:	d807      	bhi.n	8013d62 <UART_SetConfig+0x386>
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f43f af4c 	beq.w	8013bf0 <UART_SetConfig+0x214>
 8013d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d5c:	f43f af42 	beq.w	8013be4 <UART_SetConfig+0x208>
 8013d60:	e6a0      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013d66:	f43f af4d 	beq.w	8013c04 <UART_SetConfig+0x228>
 8013d6a:	e69b      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d6c:	4b0b      	ldr	r3, [pc, #44]	; (8013d9c <UART_SetConfig+0x3c0>)
 8013d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d7a:	f43f af64 	beq.w	8013c46 <UART_SetConfig+0x26a>
 8013d7e:	d807      	bhi.n	8013d90 <UART_SetConfig+0x3b4>
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f43f af35 	beq.w	8013bf0 <UART_SetConfig+0x214>
 8013d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013d8a:	f43f af2b 	beq.w	8013be4 <UART_SetConfig+0x208>
 8013d8e:	e689      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013d94:	f43f af36 	beq.w	8013c04 <UART_SetConfig+0x228>
 8013d98:	e684      	b.n	8013aa4 <UART_SetConfig+0xc8>
 8013d9a:	bf00      	nop
 8013d9c:	40023800 	.word	0x40023800
 8013da0:	01e84800 	.word	0x01e84800

08013da4 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013da4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013da6:	2bff      	cmp	r3, #255	; 0xff
{
 8013da8:	b510      	push	{r4, lr}
 8013daa:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013dac:	d87b      	bhi.n	8013ea6 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013dae:	07da      	lsls	r2, r3, #31
 8013db0:	d50a      	bpl.n	8013dc8 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013db2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013db4:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8013db8:	f040 808e 	bne.w	8013ed8 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013dbc:	6820      	ldr	r0, [r4, #0]
 8013dbe:	6842      	ldr	r2, [r0, #4]
 8013dc0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013dc4:	430a      	orrs	r2, r1
 8013dc6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013dc8:	0798      	lsls	r0, r3, #30
 8013dca:	d50a      	bpl.n	8013de2 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013dcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013dce:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8013dd2:	f040 8089 	bne.w	8013ee8 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013dd6:	6820      	ldr	r0, [r4, #0]
 8013dd8:	6842      	ldr	r2, [r0, #4]
 8013dda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013dde:	430a      	orrs	r2, r1
 8013de0:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013de2:	0759      	lsls	r1, r3, #29
 8013de4:	d50a      	bpl.n	8013dfc <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013de6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013de8:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8013dec:	f040 8084 	bne.w	8013ef8 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013df0:	6820      	ldr	r0, [r4, #0]
 8013df2:	6842      	ldr	r2, [r0, #4]
 8013df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013df8:	430a      	orrs	r2, r1
 8013dfa:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013dfc:	071a      	lsls	r2, r3, #28
 8013dfe:	d509      	bpl.n	8013e14 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e02:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8013e06:	d17f      	bne.n	8013f08 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013e08:	6820      	ldr	r0, [r4, #0]
 8013e0a:	6842      	ldr	r2, [r0, #4]
 8013e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013e10:	430a      	orrs	r2, r1
 8013e12:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013e14:	06d8      	lsls	r0, r3, #27
 8013e16:	d509      	bpl.n	8013e2c <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013e18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013e1a:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8013e1e:	d17b      	bne.n	8013f18 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013e20:	6820      	ldr	r0, [r4, #0]
 8013e22:	6882      	ldr	r2, [r0, #8]
 8013e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013e2c:	0699      	lsls	r1, r3, #26
 8013e2e:	d509      	bpl.n	8013e44 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013e30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013e32:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8013e36:	d177      	bne.n	8013f28 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013e38:	6820      	ldr	r0, [r4, #0]
 8013e3a:	6882      	ldr	r2, [r0, #8]
 8013e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013e40:	430a      	orrs	r2, r1
 8013e42:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013e44:	065a      	lsls	r2, r3, #25
 8013e46:	d521      	bpl.n	8013e8c <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013e48:	4b46      	ldr	r3, [pc, #280]	; (8013f64 <UART_AdvFeatureConfig+0x1c0>)
 8013e4a:	6822      	ldr	r2, [r4, #0]
 8013e4c:	4846      	ldr	r0, [pc, #280]	; (8013f68 <UART_AdvFeatureConfig+0x1c4>)
 8013e4e:	4947      	ldr	r1, [pc, #284]	; (8013f6c <UART_AdvFeatureConfig+0x1c8>)
 8013e50:	429a      	cmp	r2, r3
 8013e52:	bf18      	it	ne
 8013e54:	4282      	cmpne	r2, r0
 8013e56:	bf14      	ite	ne
 8013e58:	2301      	movne	r3, #1
 8013e5a:	2300      	moveq	r3, #0
 8013e5c:	428a      	cmp	r2, r1
 8013e5e:	bf0c      	ite	eq
 8013e60:	2300      	moveq	r3, #0
 8013e62:	f003 0301 	andne.w	r3, r3, #1
 8013e66:	b113      	cbz	r3, 8013e6e <UART_AdvFeatureConfig+0xca>
 8013e68:	4b41      	ldr	r3, [pc, #260]	; (8013f70 <UART_AdvFeatureConfig+0x1cc>)
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d16b      	bne.n	8013f46 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013e6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013e70:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8013e74:	d160      	bne.n	8013f38 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e76:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e78:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e7c:	684b      	ldr	r3, [r1, #4]
 8013e7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013e82:	ea43 0302 	orr.w	r3, r3, r2
 8013e86:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e88:	d014      	beq.n	8013eb4 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e8c:	061b      	lsls	r3, r3, #24
 8013e8e:	d509      	bpl.n	8013ea4 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013e90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013e92:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8013e96:	d118      	bne.n	8013eca <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013e98:	6821      	ldr	r1, [r4, #0]
 8013e9a:	684b      	ldr	r3, [r1, #4]
 8013e9c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013ea0:	4313      	orrs	r3, r2
 8013ea2:	604b      	str	r3, [r1, #4]
}
 8013ea4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013ea6:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8013eaa:	4832      	ldr	r0, [pc, #200]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013eac:	f7f1 fd1a 	bl	80058e4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eb2:	e77c      	b.n	8013dae <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013eb4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013eb6:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8013eba:	d14a      	bne.n	8013f52 <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ebc:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ec0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8013ec4:	4302      	orrs	r2, r0
 8013ec6:	604a      	str	r2, [r1, #4]
 8013ec8:	e7e0      	b.n	8013e8c <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013eca:	f640 4136 	movw	r1, #3126	; 0xc36
 8013ece:	4829      	ldr	r0, [pc, #164]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013ed0:	f7f1 fd08 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013ed4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013ed6:	e7df      	b.n	8013e98 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013ed8:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8013edc:	4825      	ldr	r0, [pc, #148]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013ede:	f7f1 fd01 	bl	80058e4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ee2:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8013ee6:	e769      	b.n	8013dbc <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013ee8:	f640 4105 	movw	r1, #3077	; 0xc05
 8013eec:	4821      	ldr	r0, [pc, #132]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013eee:	f7f1 fcf9 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013ef2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ef6:	e76e      	b.n	8013dd6 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013ef8:	f640 410c 	movw	r1, #3084	; 0xc0c
 8013efc:	481d      	ldr	r0, [pc, #116]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013efe:	f7f1 fcf1 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013f02:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f06:	e773      	b.n	8013df0 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013f08:	f640 4113 	movw	r1, #3091	; 0xc13
 8013f0c:	4819      	ldr	r0, [pc, #100]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f0e:	f7f1 fce9 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f16:	e777      	b.n	8013e08 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013f18:	f640 411a 	movw	r1, #3098	; 0xc1a
 8013f1c:	4815      	ldr	r0, [pc, #84]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f1e:	f7f1 fce1 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013f22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f26:	e77b      	b.n	8013e20 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013f28:	f640 4121 	movw	r1, #3105	; 0xc21
 8013f2c:	4811      	ldr	r0, [pc, #68]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f2e:	f7f1 fcd9 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013f32:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f36:	e77f      	b.n	8013e38 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013f38:	f640 4129 	movw	r1, #3113	; 0xc29
 8013f3c:	480d      	ldr	r0, [pc, #52]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f3e:	f7f1 fcd1 	bl	80058e4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013f42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013f44:	e797      	b.n	8013e76 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013f46:	f640 4128 	movw	r1, #3112	; 0xc28
 8013f4a:	480a      	ldr	r0, [pc, #40]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f4c:	f7f1 fcca 	bl	80058e4 <assert_failed>
 8013f50:	e78d      	b.n	8013e6e <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013f52:	f640 412e 	movw	r1, #3118	; 0xc2e
 8013f56:	4807      	ldr	r0, [pc, #28]	; (8013f74 <UART_AdvFeatureConfig+0x1d0>)
 8013f58:	f7f1 fcc4 	bl	80058e4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013f5c:	6821      	ldr	r1, [r4, #0]
 8013f5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013f60:	e7ac      	b.n	8013ebc <UART_AdvFeatureConfig+0x118>
 8013f62:	bf00      	nop
 8013f64:	40011000 	.word	0x40011000
 8013f68:	40004400 	.word	0x40004400
 8013f6c:	40004800 	.word	0x40004800
 8013f70:	40011400 	.word	0x40011400
 8013f74:	0802e640 	.word	0x0802e640

08013f78 <UART_WaitOnFlagUntilTimeout>:
{
 8013f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f80:	4681      	mov	r9, r0
 8013f82:	460f      	mov	r7, r1
 8013f84:	4616      	mov	r6, r2
 8013f86:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f88:	6805      	ldr	r5, [r0, #0]
 8013f8a:	e002      	b.n	8013f92 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8013f8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013f90:	d10c      	bne.n	8013fac <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f92:	69ec      	ldr	r4, [r5, #28]
 8013f94:	ea37 0304 	bics.w	r3, r7, r4
 8013f98:	bf0c      	ite	eq
 8013f9a:	f04f 0c01 	moveq.w	ip, #1
 8013f9e:	f04f 0c00 	movne.w	ip, #0
 8013fa2:	45b4      	cmp	ip, r6
 8013fa4:	d0f2      	beq.n	8013f8c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8013fa6:	2000      	movs	r0, #0
}
 8013fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013fac:	f7f5 f9de 	bl	800936c <HAL_GetTick>
 8013fb0:	eba0 000a 	sub.w	r0, r0, sl
 8013fb4:	4540      	cmp	r0, r8
 8013fb6:	d82d      	bhi.n	8014014 <UART_WaitOnFlagUntilTimeout+0x9c>
 8013fb8:	f1b8 0f00 	cmp.w	r8, #0
 8013fbc:	d02a      	beq.n	8014014 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013fbe:	f8d9 5000 	ldr.w	r5, [r9]
 8013fc2:	682b      	ldr	r3, [r5, #0]
 8013fc4:	462a      	mov	r2, r5
 8013fc6:	0759      	lsls	r1, r3, #29
 8013fc8:	d5e3      	bpl.n	8013f92 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013fca:	69eb      	ldr	r3, [r5, #28]
 8013fcc:	051b      	lsls	r3, r3, #20
 8013fce:	d5e0      	bpl.n	8013f92 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fd4:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fd6:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fde:	e842 3100 	strex	r1, r3, [r2]
 8013fe2:	2900      	cmp	r1, #0
 8013fe4:	d1f7      	bne.n	8013fd6 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe6:	f102 0308 	add.w	r3, r2, #8
 8013fea:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ff2:	f102 0008 	add.w	r0, r2, #8
 8013ff6:	e840 3100 	strex	r1, r3, [r0]
 8013ffa:	2900      	cmp	r1, #0
 8013ffc:	d1f3      	bne.n	8013fe6 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8013ffe:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8014000:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8014002:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8014006:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801400a:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801400e:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8014012:	e7c9      	b.n	8013fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8014014:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014018:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801401c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014020:	e842 3100 	strex	r1, r3, [r2]
 8014024:	2900      	cmp	r1, #0
 8014026:	d1f7      	bne.n	8014018 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014028:	f102 0308 	add.w	r3, r2, #8
 801402c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014030:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014034:	f102 0008 	add.w	r0, r2, #8
 8014038:	e840 3100 	strex	r1, r3, [r0]
 801403c:	2900      	cmp	r1, #0
 801403e:	d1f3      	bne.n	8014028 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8014040:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8014042:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8014044:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8014048:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801404c:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8014050:	e7aa      	b.n	8013fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8014052:	bf00      	nop

08014054 <HAL_UART_Transmit>:
{
 8014054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014058:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 801405a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 801405c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801405e:	2b20      	cmp	r3, #32
 8014060:	d14b      	bne.n	80140fa <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8014062:	460d      	mov	r5, r1
 8014064:	2900      	cmp	r1, #0
 8014066:	d044      	beq.n	80140f2 <HAL_UART_Transmit+0x9e>
 8014068:	fab2 f982 	clz	r9, r2
 801406c:	4617      	mov	r7, r2
 801406e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014072:	2a00      	cmp	r2, #0
 8014074:	d03d      	beq.n	80140f2 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8014076:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 801407a:	4604      	mov	r4, r0
 801407c:	2b01      	cmp	r3, #1
 801407e:	d03c      	beq.n	80140fa <HAL_UART_Transmit+0xa6>
 8014080:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014082:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8014086:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801408a:	2321      	movs	r3, #33	; 0x21
 801408c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 801408e:	f7f5 f96d 	bl	800936c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014092:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8014094:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8014096:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 801409e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140a2:	d040      	beq.n	8014126 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 80140a4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 80140a8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80140aa:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80140ac:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80140b0:	b973      	cbnz	r3, 80140d0 <HAL_UART_Transmit+0x7c>
 80140b2:	e02a      	b.n	801410a <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80140b4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80140b8:	6823      	ldr	r3, [r4, #0]
 80140ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80140bc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80140c0:	3a01      	subs	r2, #1
 80140c2:	b292      	uxth	r2, r2
 80140c4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80140c8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80140cc:	b292      	uxth	r2, r2
 80140ce:	b1e2      	cbz	r2, 801410a <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80140d0:	4643      	mov	r3, r8
 80140d2:	2200      	movs	r2, #0
 80140d4:	2180      	movs	r1, #128	; 0x80
 80140d6:	4620      	mov	r0, r4
 80140d8:	9600      	str	r6, [sp, #0]
 80140da:	f7ff ff4d 	bl	8013f78 <UART_WaitOnFlagUntilTimeout>
 80140de:	b980      	cbnz	r0, 8014102 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80140e0:	2d00      	cmp	r5, #0
 80140e2:	d1e7      	bne.n	80140b4 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80140e4:	f839 3b02 	ldrh.w	r3, [r9], #2
 80140e8:	6822      	ldr	r2, [r4, #0]
 80140ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140ee:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80140f0:	e7e4      	b.n	80140bc <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 80140f2:	2001      	movs	r0, #1
}
 80140f4:	b003      	add	sp, #12
 80140f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80140fa:	2002      	movs	r0, #2
}
 80140fc:	b003      	add	sp, #12
 80140fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8014102:	2003      	movs	r0, #3
}
 8014104:	b003      	add	sp, #12
 8014106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801410a:	4643      	mov	r3, r8
 801410c:	2200      	movs	r2, #0
 801410e:	2140      	movs	r1, #64	; 0x40
 8014110:	4620      	mov	r0, r4
 8014112:	9600      	str	r6, [sp, #0]
 8014114:	f7ff ff30 	bl	8013f78 <UART_WaitOnFlagUntilTimeout>
 8014118:	2800      	cmp	r0, #0
 801411a:	d1f2      	bne.n	8014102 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 801411c:	2320      	movs	r3, #32
 801411e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8014120:	b003      	add	sp, #12
 8014122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014126:	6923      	ldr	r3, [r4, #16]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1bb      	bne.n	80140a4 <HAL_UART_Transmit+0x50>
 801412c:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 801412e:	461d      	mov	r5, r3
 8014130:	e7b8      	b.n	80140a4 <HAL_UART_Transmit+0x50>
 8014132:	bf00      	nop

08014134 <UART_CheckIdleState>:
{
 8014134:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014136:	2600      	movs	r6, #0
{
 8014138:	4604      	mov	r4, r0
 801413a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801413c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8014140:	f7f5 f914 	bl	800936c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014144:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8014146:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	0712      	lsls	r2, r2, #28
 801414c:	d40c      	bmi.n	8014168 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	075b      	lsls	r3, r3, #29
 8014152:	d418      	bmi.n	8014186 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014154:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8014156:	2220      	movs	r2, #32
  return HAL_OK;
 8014158:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 801415a:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 801415c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8014160:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014162:	6623      	str	r3, [r4, #96]	; 0x60
}
 8014164:	b002      	add	sp, #8
 8014166:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014168:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 801416c:	4603      	mov	r3, r0
 801416e:	4632      	mov	r2, r6
 8014170:	4620      	mov	r0, r4
 8014172:	9100      	str	r1, [sp, #0]
 8014174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014178:	f7ff fefe 	bl	8013f78 <UART_WaitOnFlagUntilTimeout>
 801417c:	b978      	cbnz	r0, 801419e <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801417e:	6823      	ldr	r3, [r4, #0]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	075b      	lsls	r3, r3, #29
 8014184:	d5e6      	bpl.n	8014154 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014186:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 801418a:	462b      	mov	r3, r5
 801418c:	2200      	movs	r2, #0
 801418e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014192:	9000      	str	r0, [sp, #0]
 8014194:	4620      	mov	r0, r4
 8014196:	f7ff feef 	bl	8013f78 <UART_WaitOnFlagUntilTimeout>
 801419a:	2800      	cmp	r0, #0
 801419c:	d0da      	beq.n	8014154 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 801419e:	2003      	movs	r0, #3
}
 80141a0:	b002      	add	sp, #8
 80141a2:	bd70      	pop	{r4, r5, r6, pc}

080141a4 <HAL_UART_Init>:
  if (huart == NULL)
 80141a4:	2800      	cmp	r0, #0
 80141a6:	f000 8099 	beq.w	80142dc <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80141aa:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80141ac:	6802      	ldr	r2, [r0, #0]
{
 80141ae:	b510      	push	{r4, lr}
 80141b0:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d051      	beq.n	801425a <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80141b6:	4b4d      	ldr	r3, [pc, #308]	; (80142ec <HAL_UART_Init+0x148>)
 80141b8:	484d      	ldr	r0, [pc, #308]	; (80142f0 <HAL_UART_Init+0x14c>)
 80141ba:	494e      	ldr	r1, [pc, #312]	; (80142f4 <HAL_UART_Init+0x150>)
 80141bc:	429a      	cmp	r2, r3
 80141be:	bf18      	it	ne
 80141c0:	4282      	cmpne	r2, r0
 80141c2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80141c6:	bf14      	ite	ne
 80141c8:	2301      	movne	r3, #1
 80141ca:	2300      	moveq	r3, #0
 80141cc:	428a      	cmp	r2, r1
 80141ce:	bf0c      	ite	eq
 80141d0:	2300      	moveq	r3, #0
 80141d2:	f003 0301 	andne.w	r3, r3, #1
 80141d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141da:	4282      	cmp	r2, r0
 80141dc:	bf0c      	ite	eq
 80141de:	2300      	moveq	r3, #0
 80141e0:	f003 0301 	andne.w	r3, r3, #1
 80141e4:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80141e8:	428a      	cmp	r2, r1
 80141ea:	bf0c      	ite	eq
 80141ec:	2300      	moveq	r3, #0
 80141ee:	f003 0301 	andne.w	r3, r3, #1
 80141f2:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80141f6:	4282      	cmp	r2, r0
 80141f8:	bf0c      	ite	eq
 80141fa:	2300      	moveq	r3, #0
 80141fc:	f003 0301 	andne.w	r3, r3, #1
 8014200:	428a      	cmp	r2, r1
 8014202:	bf0c      	ite	eq
 8014204:	2300      	moveq	r3, #0
 8014206:	f003 0301 	andne.w	r3, r3, #1
 801420a:	b113      	cbz	r3, 8014212 <HAL_UART_Init+0x6e>
 801420c:	4b3a      	ldr	r3, [pc, #232]	; (80142f8 <HAL_UART_Init+0x154>)
 801420e:	429a      	cmp	r2, r3
 8014210:	d166      	bne.n	80142e0 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8014212:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014214:	2b00      	cmp	r3, #0
 8014216:	d057      	beq.n	80142c8 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8014218:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801421a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 801421c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801421e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014220:	6813      	ldr	r3, [r2, #0]
 8014222:	f023 0301 	bic.w	r3, r3, #1
 8014226:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014228:	f7ff fbd8 	bl	80139dc <UART_SetConfig>
 801422c:	2801      	cmp	r0, #1
 801422e:	d049      	beq.n	80142c4 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014232:	2b00      	cmp	r3, #0
 8014234:	d14e      	bne.n	80142d4 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014236:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8014238:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801423a:	685a      	ldr	r2, [r3, #4]
 801423c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014242:	689a      	ldr	r2, [r3, #8]
 8014244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014248:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	f042 0201 	orr.w	r2, r2, #1
}
 8014250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8014254:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8014256:	f7ff bf6d 	b.w	8014134 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 801425a:	4b24      	ldr	r3, [pc, #144]	; (80142ec <HAL_UART_Init+0x148>)
 801425c:	4824      	ldr	r0, [pc, #144]	; (80142f0 <HAL_UART_Init+0x14c>)
 801425e:	4925      	ldr	r1, [pc, #148]	; (80142f4 <HAL_UART_Init+0x150>)
 8014260:	429a      	cmp	r2, r3
 8014262:	bf18      	it	ne
 8014264:	4282      	cmpne	r2, r0
 8014266:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801426a:	bf14      	ite	ne
 801426c:	2301      	movne	r3, #1
 801426e:	2300      	moveq	r3, #0
 8014270:	428a      	cmp	r2, r1
 8014272:	bf0c      	ite	eq
 8014274:	2300      	moveq	r3, #0
 8014276:	f003 0301 	andne.w	r3, r3, #1
 801427a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801427e:	4282      	cmp	r2, r0
 8014280:	bf0c      	ite	eq
 8014282:	2300      	moveq	r3, #0
 8014284:	f003 0301 	andne.w	r3, r3, #1
 8014288:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 801428c:	428a      	cmp	r2, r1
 801428e:	bf0c      	ite	eq
 8014290:	2300      	moveq	r3, #0
 8014292:	f003 0301 	andne.w	r3, r3, #1
 8014296:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801429a:	4282      	cmp	r2, r0
 801429c:	bf0c      	ite	eq
 801429e:	2300      	moveq	r3, #0
 80142a0:	f003 0301 	andne.w	r3, r3, #1
 80142a4:	428a      	cmp	r2, r1
 80142a6:	bf0c      	ite	eq
 80142a8:	2300      	moveq	r3, #0
 80142aa:	f003 0301 	andne.w	r3, r3, #1
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d0af      	beq.n	8014212 <HAL_UART_Init+0x6e>
 80142b2:	4b11      	ldr	r3, [pc, #68]	; (80142f8 <HAL_UART_Init+0x154>)
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d0ac      	beq.n	8014212 <HAL_UART_Init+0x6e>
 80142b8:	f240 1131 	movw	r1, #305	; 0x131
 80142bc:	480f      	ldr	r0, [pc, #60]	; (80142fc <HAL_UART_Init+0x158>)
 80142be:	f7f1 fb11 	bl	80058e4 <assert_failed>
 80142c2:	e7a6      	b.n	8014212 <HAL_UART_Init+0x6e>
}
 80142c4:	2001      	movs	r0, #1
 80142c6:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 80142c8:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80142ca:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80142ce:	f7f3 fc4b 	bl	8007b68 <HAL_UART_MspInit>
 80142d2:	e7a1      	b.n	8014218 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 80142d4:	4620      	mov	r0, r4
 80142d6:	f7ff fd65 	bl	8013da4 <UART_AdvFeatureConfig>
 80142da:	e7ac      	b.n	8014236 <HAL_UART_Init+0x92>
}
 80142dc:	2001      	movs	r0, #1
 80142de:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80142e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80142e4:	4805      	ldr	r0, [pc, #20]	; (80142fc <HAL_UART_Init+0x158>)
 80142e6:	f7f1 fafd 	bl	80058e4 <assert_failed>
 80142ea:	e792      	b.n	8014212 <HAL_UART_Init+0x6e>
 80142ec:	40011000 	.word	0x40011000
 80142f0:	40004400 	.word	0x40004400
 80142f4:	40004800 	.word	0x40004800
 80142f8:	40007c00 	.word	0x40007c00
 80142fc:	0802e640 	.word	0x0802e640

08014300 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8014300:	2800      	cmp	r0, #0
 8014302:	d04a      	beq.n	801439a <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8014304:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8014308:	b570      	push	{r4, r5, r6, lr}
 801430a:	460e      	mov	r6, r1
 801430c:	4604      	mov	r4, r0
 801430e:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8014310:	d13d      	bne.n	801438e <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8014312:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014314:	2b00      	cmp	r3, #0
 8014316:	d034      	beq.n	8014382 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8014318:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801431a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 801431c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801431e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014320:	6813      	ldr	r3, [r2, #0]
 8014322:	f023 0301 	bic.w	r3, r3, #1
 8014326:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014328:	f7ff fb58 	bl	80139dc <UART_SetConfig>
 801432c:	2801      	cmp	r0, #1
 801432e:	d026      	beq.n	801437e <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014332:	bb03      	cbnz	r3, 8014376 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014334:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8014336:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014342:	689a      	ldr	r2, [r3, #8]
 8014344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014348:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801434a:	d00d      	beq.n	8014368 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 801434c:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801434e:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8014350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014354:	4315      	orrs	r5, r2
 8014356:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	f042 0201 	orr.w	r2, r2, #1
}
 801435e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 8014362:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8014364:	f7ff bee6 	b.w	8014134 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8014368:	6859      	ldr	r1, [r3, #4]
 801436a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801436e:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8014372:	605e      	str	r6, [r3, #4]
 8014374:	e7ea      	b.n	801434c <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8014376:	4620      	mov	r0, r4
 8014378:	f7ff fd14 	bl	8013da4 <UART_AdvFeatureConfig>
 801437c:	e7da      	b.n	8014334 <HAL_MultiProcessor_Init+0x34>
}
 801437e:	2001      	movs	r0, #1
 8014380:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8014382:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8014384:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8014388:	f7f3 fbee 	bl	8007b68 <HAL_UART_MspInit>
 801438c:	e7c4      	b.n	8014318 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 801438e:	f240 211d 	movw	r1, #541	; 0x21d
 8014392:	4803      	ldr	r0, [pc, #12]	; (80143a0 <HAL_MultiProcessor_Init+0xa0>)
 8014394:	f7f1 faa6 	bl	80058e4 <assert_failed>
 8014398:	e7bb      	b.n	8014312 <HAL_MultiProcessor_Init+0x12>
}
 801439a:	2001      	movs	r0, #1
 801439c:	4770      	bx	lr
 801439e:	bf00      	nop
 80143a0:	0802e640 	.word	0x0802e640

080143a4 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80143a4:	6883      	ldr	r3, [r0, #8]
{
 80143a6:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80143a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80143ac:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 80143b0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80143b2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80143b6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80143ba:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80143bc:	d04f      	beq.n	801445e <UART_Start_Receive_IT+0xba>
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d043      	beq.n	801444a <UART_Start_Receive_IT+0xa6>
 80143c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80143c6:	d057      	beq.n	8014478 <UART_Start_Receive_IT+0xd4>
 80143c8:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143cc:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80143ce:	2322      	movs	r3, #34	; 0x22
 80143d0:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143d2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80143d6:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143d8:	f102 0308 	add.w	r3, r2, #8
 80143dc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143e0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143e4:	f102 0408 	add.w	r4, r2, #8
 80143e8:	e844 3100 	strex	r1, r3, [r4]
 80143ec:	2900      	cmp	r1, #0
 80143ee:	d1f3      	bne.n	80143d8 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80143f0:	6883      	ldr	r3, [r0, #8]
 80143f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80143f6:	d011      	beq.n	801441c <UART_Start_Receive_IT+0x78>
 80143f8:	4c23      	ldr	r4, [pc, #140]	; (8014488 <UART_Start_Receive_IT+0xe4>)
 80143fa:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 80143fc:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8014400:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014402:	b18b      	cbz	r3, 8014428 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014404:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014408:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801440c:	e842 3100 	strex	r1, r3, [r2]
 8014410:	2900      	cmp	r1, #0
 8014412:	d1f7      	bne.n	8014404 <UART_Start_Receive_IT+0x60>
}
 8014414:	2000      	movs	r0, #0
 8014416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801441a:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801441c:	6903      	ldr	r3, [r0, #16]
 801441e:	bb33      	cbnz	r3, 801446e <UART_Start_Receive_IT+0xca>
 8014420:	491a      	ldr	r1, [pc, #104]	; (801448c <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 8014422:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8014426:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014428:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801442c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014430:	e842 3100 	strex	r1, r3, [r2]
 8014434:	2900      	cmp	r1, #0
 8014436:	d0ed      	beq.n	8014414 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014438:	e852 3f00 	ldrex	r3, [r2]
 801443c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014440:	e842 3100 	strex	r1, r3, [r2]
 8014444:	2900      	cmp	r1, #0
 8014446:	d1ef      	bne.n	8014428 <UART_Start_Receive_IT+0x84>
 8014448:	e7e4      	b.n	8014414 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 801444a:	6903      	ldr	r3, [r0, #16]
 801444c:	b91b      	cbnz	r3, 8014456 <UART_Start_Receive_IT+0xb2>
 801444e:	23ff      	movs	r3, #255	; 0xff
 8014450:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014454:	e7ba      	b.n	80143cc <UART_Start_Receive_IT+0x28>
 8014456:	237f      	movs	r3, #127	; 0x7f
 8014458:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801445c:	e7b6      	b.n	80143cc <UART_Start_Receive_IT+0x28>
 801445e:	6903      	ldr	r3, [r0, #16]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d1f4      	bne.n	801444e <UART_Start_Receive_IT+0xaa>
 8014464:	f240 13ff 	movw	r3, #511	; 0x1ff
 8014468:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801446c:	e7ae      	b.n	80143cc <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 801446e:	4b06      	ldr	r3, [pc, #24]	; (8014488 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8014470:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8014474:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014476:	e7c5      	b.n	8014404 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8014478:	6903      	ldr	r3, [r0, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d0eb      	beq.n	8014456 <UART_Start_Receive_IT+0xb2>
 801447e:	233f      	movs	r3, #63	; 0x3f
 8014480:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014484:	e7a2      	b.n	80143cc <UART_Start_Receive_IT+0x28>
 8014486:	bf00      	nop
 8014488:	08013535 	.word	0x08013535
 801448c:	080135d5 	.word	0x080135d5

08014490 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8014490:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8014492:	2b20      	cmp	r3, #32
 8014494:	d11e      	bne.n	80144d4 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 8014496:	b1d9      	cbz	r1, 80144d0 <HAL_UART_Receive_IT+0x40>
 8014498:	fab2 f382 	clz	r3, r2
 801449c:	095b      	lsrs	r3, r3, #5
 801449e:	b1ba      	cbz	r2, 80144d0 <HAL_UART_Receive_IT+0x40>
{
 80144a0:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80144a2:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80144a6:	2c01      	cmp	r4, #1
 80144a8:	d016      	beq.n	80144d8 <HAL_UART_Receive_IT+0x48>
 80144aa:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80144ac:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144ae:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80144b0:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80144b4:	6863      	ldr	r3, [r4, #4]
 80144b6:	021b      	lsls	r3, r3, #8
 80144b8:	d507      	bpl.n	80144ca <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144ba:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80144be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144c2:	e844 3500 	strex	r5, r3, [r4]
 80144c6:	2d00      	cmp	r5, #0
 80144c8:	d1f7      	bne.n	80144ba <HAL_UART_Receive_IT+0x2a>
}
 80144ca:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80144cc:	f7ff bf6a 	b.w	80143a4 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80144d0:	2001      	movs	r0, #1
}
 80144d2:	4770      	bx	lr
    return HAL_BUSY;
 80144d4:	2002      	movs	r0, #2
 80144d6:	4770      	bx	lr
 80144d8:	2002      	movs	r0, #2
}
 80144da:	bc30      	pop	{r4, r5}
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop

080144e0 <UART_Start_Receive_DMA>:
{
 80144e0:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144e2:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144e4:	2500      	movs	r5, #0
{
 80144e6:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80144e8:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144ea:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 80144ee:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144f2:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80144f4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80144f6:	b168      	cbz	r0, 8014514 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80144f8:	4e1f      	ldr	r6, [pc, #124]	; (8014578 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80144fa:	4613      	mov	r3, r2
 80144fc:	460a      	mov	r2, r1
 80144fe:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014500:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014502:	4e1e      	ldr	r6, [pc, #120]	; (801457c <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014504:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8014506:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014508:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801450a:	4e1d      	ldr	r6, [pc, #116]	; (8014580 <UART_Start_Receive_DMA+0xa0>)
 801450c:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801450e:	f7f6 f8f7 	bl	800a700 <HAL_DMA_Start_IT>
 8014512:	bb40      	cbnz	r0, 8014566 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8014514:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014516:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8014518:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 801451c:	b14b      	cbz	r3, 8014532 <UART_Start_Receive_DMA+0x52>
 801451e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014520:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014528:	e843 2100 	strex	r1, r2, [r3]
 801452c:	2900      	cmp	r1, #0
 801452e:	d1f7      	bne.n	8014520 <UART_Start_Receive_DMA+0x40>
 8014530:	e000      	b.n	8014534 <UART_Start_Receive_DMA+0x54>
 8014532:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014534:	f103 0208 	add.w	r2, r3, #8
 8014538:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801453c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014540:	f103 0008 	add.w	r0, r3, #8
 8014544:	e840 2100 	strex	r1, r2, [r0]
 8014548:	2900      	cmp	r1, #0
 801454a:	d1f3      	bne.n	8014534 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801454c:	f103 0208 	add.w	r2, r3, #8
 8014550:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014558:	f103 0108 	add.w	r1, r3, #8
 801455c:	e841 2000 	strex	r0, r2, [r1]
 8014560:	2800      	cmp	r0, #0
 8014562:	d1f3      	bne.n	801454c <UART_Start_Receive_DMA+0x6c>
}
 8014564:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014566:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8014568:	2320      	movs	r3, #32
      return HAL_ERROR;
 801456a:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 801456c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014570:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8014574:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8014576:	bd70      	pop	{r4, r5, r6, pc}
 8014578:	08013691 	.word	0x08013691
 801457c:	08013675 	.word	0x08013675
 8014580:	0801330d 	.word	0x0801330d

08014584 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8014584:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8014586:	2b20      	cmp	r3, #32
 8014588:	d11e      	bne.n	80145c8 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 801458a:	b1d9      	cbz	r1, 80145c4 <HAL_UART_Receive_DMA+0x40>
 801458c:	fab2 f382 	clz	r3, r2
 8014590:	095b      	lsrs	r3, r3, #5
 8014592:	b1ba      	cbz	r2, 80145c4 <HAL_UART_Receive_DMA+0x40>
{
 8014594:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8014596:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801459a:	2c01      	cmp	r4, #1
 801459c:	d016      	beq.n	80145cc <HAL_UART_Receive_DMA+0x48>
 801459e:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145a0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145a2:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80145a4:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145a8:	6863      	ldr	r3, [r4, #4]
 80145aa:	021b      	lsls	r3, r3, #8
 80145ac:	d507      	bpl.n	80145be <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ae:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145b6:	e844 3500 	strex	r5, r3, [r4]
 80145ba:	2d00      	cmp	r5, #0
 80145bc:	d1f7      	bne.n	80145ae <HAL_UART_Receive_DMA+0x2a>
}
 80145be:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80145c0:	f7ff bf8e 	b.w	80144e0 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80145c4:	2001      	movs	r0, #1
}
 80145c6:	4770      	bx	lr
    return HAL_BUSY;
 80145c8:	2002      	movs	r0, #2
 80145ca:	4770      	bx	lr
 80145cc:	2002      	movs	r0, #2
}
 80145ce:	bc30      	pop	{r4, r5}
 80145d0:	4770      	bx	lr
 80145d2:	bf00      	nop

080145d4 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80145d4:	2800      	cmp	r0, #0
 80145d6:	f000 808a 	beq.w	80146ee <HAL_RS485Ex_Init+0x11a>
{
 80145da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80145de:	4c47      	ldr	r4, [pc, #284]	; (80146fc <HAL_RS485Ex_Init+0x128>)
 80145e0:	4617      	mov	r7, r2
 80145e2:	461d      	mov	r5, r3
 80145e4:	4a46      	ldr	r2, [pc, #280]	; (8014700 <HAL_RS485Ex_Init+0x12c>)
 80145e6:	6803      	ldr	r3, [r0, #0]
 80145e8:	460e      	mov	r6, r1
 80145ea:	4680      	mov	r8, r0
 80145ec:	42a3      	cmp	r3, r4
 80145ee:	bf18      	it	ne
 80145f0:	4293      	cmpne	r3, r2
 80145f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80145f6:	bf14      	ite	ne
 80145f8:	2401      	movne	r4, #1
 80145fa:	2400      	moveq	r4, #0
 80145fc:	4293      	cmp	r3, r2
 80145fe:	bf0c      	ite	eq
 8014600:	2400      	moveq	r4, #0
 8014602:	f004 0401 	andne.w	r4, r4, #1
 8014606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801460a:	4293      	cmp	r3, r2
 801460c:	bf0c      	ite	eq
 801460e:	2400      	moveq	r4, #0
 8014610:	f004 0401 	andne.w	r4, r4, #1
 8014614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014618:	4293      	cmp	r3, r2
 801461a:	bf0c      	ite	eq
 801461c:	2400      	moveq	r4, #0
 801461e:	f004 0401 	andne.w	r4, r4, #1
 8014622:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8014626:	4293      	cmp	r3, r2
 8014628:	bf0c      	ite	eq
 801462a:	2400      	moveq	r4, #0
 801462c:	f004 0401 	andne.w	r4, r4, #1
 8014630:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8014634:	4293      	cmp	r3, r2
 8014636:	bf0c      	ite	eq
 8014638:	2400      	moveq	r4, #0
 801463a:	f004 0401 	andne.w	r4, r4, #1
 801463e:	b11c      	cbz	r4, 8014648 <HAL_RS485Ex_Init+0x74>
 8014640:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014644:	4293      	cmp	r3, r2
 8014646:	d154      	bne.n	80146f2 <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8014648:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 801464c:	d14a      	bne.n	80146e4 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801464e:	2f1f      	cmp	r7, #31
 8014650:	d843      	bhi.n	80146da <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8014652:	2d1f      	cmp	r5, #31
 8014654:	d83c      	bhi.n	80146d0 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8014656:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801465a:	b39b      	cbz	r3, 80146c4 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801465c:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8014660:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014662:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8014664:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014668:	6813      	ldr	r3, [r2, #0]
 801466a:	f023 0301 	bic.w	r3, r3, #1
 801466e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014670:	f7ff f9b4 	bl	80139dc <UART_SetConfig>
 8014674:	2801      	cmp	r0, #1
 8014676:	d022      	beq.n	80146be <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014678:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801467c:	b9db      	cbnz	r3, 80146b6 <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801467e:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8014682:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014684:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8014686:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8014688:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801468c:	4d1d      	ldr	r5, [pc, #116]	; (8014704 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801468e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014692:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8014694:	6899      	ldr	r1, [r3, #8]
 8014696:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801469a:	430e      	orrs	r6, r1
 801469c:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	4015      	ands	r5, r2
 80146a2:	432f      	orrs	r7, r5
 80146a4:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	f042 0201 	orr.w	r2, r2, #1
}
 80146ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 80146b0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80146b2:	f7ff bd3f 	b.w	8014134 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80146b6:	4640      	mov	r0, r8
 80146b8:	f7ff fb74 	bl	8013da4 <UART_AdvFeatureConfig>
 80146bc:	e7df      	b.n	801467e <HAL_RS485Ex_Init+0xaa>
}
 80146be:	2001      	movs	r0, #1
 80146c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 80146c4:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 80146c6:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80146ca:	f7f3 fa4d 	bl	8007b68 <HAL_UART_MspInit>
 80146ce:	e7c5      	b.n	801465c <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80146d0:	21aa      	movs	r1, #170	; 0xaa
 80146d2:	480d      	ldr	r0, [pc, #52]	; (8014708 <HAL_RS485Ex_Init+0x134>)
 80146d4:	f7f1 f906 	bl	80058e4 <assert_failed>
 80146d8:	e7bd      	b.n	8014656 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80146da:	21a7      	movs	r1, #167	; 0xa7
 80146dc:	480a      	ldr	r0, [pc, #40]	; (8014708 <HAL_RS485Ex_Init+0x134>)
 80146de:	f7f1 f901 	bl	80058e4 <assert_failed>
 80146e2:	e7b6      	b.n	8014652 <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80146e4:	21a4      	movs	r1, #164	; 0xa4
 80146e6:	4808      	ldr	r0, [pc, #32]	; (8014708 <HAL_RS485Ex_Init+0x134>)
 80146e8:	f7f1 f8fc 	bl	80058e4 <assert_failed>
 80146ec:	e7af      	b.n	801464e <HAL_RS485Ex_Init+0x7a>
}
 80146ee:	2001      	movs	r0, #1
 80146f0:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80146f2:	21a1      	movs	r1, #161	; 0xa1
 80146f4:	4804      	ldr	r0, [pc, #16]	; (8014708 <HAL_RS485Ex_Init+0x134>)
 80146f6:	f7f1 f8f5 	bl	80058e4 <assert_failed>
 80146fa:	e7a5      	b.n	8014648 <HAL_RS485Ex_Init+0x74>
 80146fc:	40011000 	.word	0x40011000
 8014700:	40004400 	.word	0x40004400
 8014704:	fc00ffff 	.word	0xfc00ffff
 8014708:	0802e690 	.word	0x0802e690

0801470c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801470c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801470e:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014710:	4a11      	ldr	r2, [pc, #68]	; (8014758 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 8014712:	9301      	str	r3, [sp, #4]
 8014714:	e002      	b.n	801471c <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014716:	6903      	ldr	r3, [r0, #16]
 8014718:	2b00      	cmp	r3, #0
 801471a:	db07      	blt.n	801472c <USB_CoreReset+0x20>
    if (++count > 200000U)
 801471c:	9b01      	ldr	r3, [sp, #4]
 801471e:	3301      	adds	r3, #1
 8014720:	4293      	cmp	r3, r2
 8014722:	9301      	str	r3, [sp, #4]
 8014724:	d9f7      	bls.n	8014716 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8014726:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8014728:	b002      	add	sp, #8
 801472a:	4770      	bx	lr
  count = 0U;
 801472c:	2300      	movs	r3, #0
    if (++count > 200000U)
 801472e:	4a0a      	ldr	r2, [pc, #40]	; (8014758 <USB_CoreReset+0x4c>)
  count = 0U;
 8014730:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014732:	6903      	ldr	r3, [r0, #16]
 8014734:	f043 0301 	orr.w	r3, r3, #1
 8014738:	6103      	str	r3, [r0, #16]
 801473a:	e003      	b.n	8014744 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801473c:	6903      	ldr	r3, [r0, #16]
 801473e:	f013 0301 	ands.w	r3, r3, #1
 8014742:	d005      	beq.n	8014750 <USB_CoreReset+0x44>
    if (++count > 200000U)
 8014744:	9b01      	ldr	r3, [sp, #4]
 8014746:	3301      	adds	r3, #1
 8014748:	4293      	cmp	r3, r2
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	d9f6      	bls.n	801473c <USB_CoreReset+0x30>
 801474e:	e7ea      	b.n	8014726 <USB_CoreReset+0x1a>
  return HAL_OK;
 8014750:	4618      	mov	r0, r3
}
 8014752:	b002      	add	sp, #8
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop
 8014758:	00030d40 	.word	0x00030d40

0801475c <USB_CoreInit>:
{
 801475c:	b084      	sub	sp, #16
 801475e:	b510      	push	{r4, lr}
 8014760:	f10d 0c0c 	add.w	ip, sp, #12
 8014764:	4604      	mov	r4, r0
 8014766:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801476a:	9b08      	ldr	r3, [sp, #32]
 801476c:	2b01      	cmp	r3, #1
 801476e:	d122      	bne.n	80147b6 <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014770:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014772:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8014776:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014778:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 801477c:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801477e:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014780:	68c2      	ldr	r2, [r0, #12]
 8014782:	ea03 0302 	and.w	r3, r3, r2
 8014786:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014788:	68c3      	ldr	r3, [r0, #12]
 801478a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801478e:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8014790:	d01c      	beq.n	80147cc <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 8014792:	4620      	mov	r0, r4
 8014794:	f7ff ffba 	bl	801470c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8014798:	9b06      	ldr	r3, [sp, #24]
 801479a:	2b01      	cmp	r3, #1
 801479c:	d107      	bne.n	80147ae <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801479e:	68a3      	ldr	r3, [r4, #8]
 80147a0:	f043 0306 	orr.w	r3, r3, #6
 80147a4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80147a6:	68a3      	ldr	r3, [r4, #8]
 80147a8:	f043 0320 	orr.w	r3, r3, #32
 80147ac:	60a3      	str	r3, [r4, #8]
}
 80147ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147b2:	b004      	add	sp, #16
 80147b4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80147b6:	68c3      	ldr	r3, [r0, #12]
 80147b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147bc:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80147be:	f7ff ffa5 	bl	801470c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80147c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80147c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80147ca:	e7e5      	b.n	8014798 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80147cc:	68c3      	ldr	r3, [r0, #12]
 80147ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80147d2:	60c3      	str	r3, [r0, #12]
 80147d4:	e7dd      	b.n	8014792 <USB_CoreInit+0x36>
 80147d6:	bf00      	nop

080147d8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80147d8:	2a02      	cmp	r2, #2
{
 80147da:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80147dc:	d00b      	beq.n	80147f6 <USB_SetTurnaroundTime+0x1e>
 80147de:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80147e2:	68d9      	ldr	r1, [r3, #12]
}
 80147e4:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80147e6:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80147ea:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80147ec:	68da      	ldr	r2, [r3, #12]
 80147ee:	ea42 020c 	orr.w	r2, r2, ip
 80147f2:	60da      	str	r2, [r3, #12]
}
 80147f4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80147f6:	4a23      	ldr	r2, [pc, #140]	; (8014884 <USB_SetTurnaroundTime+0xac>)
 80147f8:	4823      	ldr	r0, [pc, #140]	; (8014888 <USB_SetTurnaroundTime+0xb0>)
 80147fa:	440a      	add	r2, r1
 80147fc:	4282      	cmp	r2, r0
 80147fe:	d92c      	bls.n	801485a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014800:	4a22      	ldr	r2, [pc, #136]	; (801488c <USB_SetTurnaroundTime+0xb4>)
 8014802:	4823      	ldr	r0, [pc, #140]	; (8014890 <USB_SetTurnaroundTime+0xb8>)
 8014804:	440a      	add	r2, r1
 8014806:	4282      	cmp	r2, r0
 8014808:	d92a      	bls.n	8014860 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801480a:	4a22      	ldr	r2, [pc, #136]	; (8014894 <USB_SetTurnaroundTime+0xbc>)
 801480c:	4822      	ldr	r0, [pc, #136]	; (8014898 <USB_SetTurnaroundTime+0xc0>)
 801480e:	440a      	add	r2, r1
 8014810:	4282      	cmp	r2, r0
 8014812:	d928      	bls.n	8014866 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014814:	4a21      	ldr	r2, [pc, #132]	; (801489c <USB_SetTurnaroundTime+0xc4>)
 8014816:	4822      	ldr	r0, [pc, #136]	; (80148a0 <USB_SetTurnaroundTime+0xc8>)
 8014818:	440a      	add	r2, r1
 801481a:	4282      	cmp	r2, r0
 801481c:	d326      	bcc.n	801486c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801481e:	4a21      	ldr	r2, [pc, #132]	; (80148a4 <USB_SetTurnaroundTime+0xcc>)
 8014820:	4821      	ldr	r0, [pc, #132]	; (80148a8 <USB_SetTurnaroundTime+0xd0>)
 8014822:	440a      	add	r2, r1
 8014824:	4282      	cmp	r2, r0
 8014826:	d924      	bls.n	8014872 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014828:	4a20      	ldr	r2, [pc, #128]	; (80148ac <USB_SetTurnaroundTime+0xd4>)
 801482a:	4821      	ldr	r0, [pc, #132]	; (80148b0 <USB_SetTurnaroundTime+0xd8>)
 801482c:	440a      	add	r2, r1
 801482e:	4282      	cmp	r2, r0
 8014830:	d322      	bcc.n	8014878 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014832:	4a20      	ldr	r2, [pc, #128]	; (80148b4 <USB_SetTurnaroundTime+0xdc>)
 8014834:	4820      	ldr	r0, [pc, #128]	; (80148b8 <USB_SetTurnaroundTime+0xe0>)
 8014836:	440a      	add	r2, r1
 8014838:	4282      	cmp	r2, r0
 801483a:	d3d0      	bcc.n	80147de <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801483c:	4a1f      	ldr	r2, [pc, #124]	; (80148bc <USB_SetTurnaroundTime+0xe4>)
 801483e:	4820      	ldr	r0, [pc, #128]	; (80148c0 <USB_SetTurnaroundTime+0xe8>)
 8014840:	440a      	add	r2, r1
 8014842:	4282      	cmp	r2, r0
 8014844:	d31b      	bcc.n	801487e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014846:	4a1f      	ldr	r2, [pc, #124]	; (80148c4 <USB_SetTurnaroundTime+0xec>)
 8014848:	481f      	ldr	r0, [pc, #124]	; (80148c8 <USB_SetTurnaroundTime+0xf0>)
 801484a:	440a      	add	r2, r1
 801484c:	4282      	cmp	r2, r0
 801484e:	bf34      	ite	cc
 8014850:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8014854:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8014858:	e7c3      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 801485a:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 801485e:	e7c0      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 8014860:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8014864:	e7bd      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 8014866:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 801486a:	e7ba      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 801486c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8014870:	e7b7      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 8014872:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8014876:	e7b4      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 8014878:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 801487c:	e7b1      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 801487e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8014882:	e7ae      	b.n	80147e2 <USB_SetTurnaroundTime+0xa>
 8014884:	ff275340 	.word	0xff275340
 8014888:	000c34ff 	.word	0x000c34ff
 801488c:	ff1b1e40 	.word	0xff1b1e40
 8014890:	000f423f 	.word	0x000f423f
 8014894:	ff0bdc00 	.word	0xff0bdc00
 8014898:	00124f7f 	.word	0x00124f7f
 801489c:	fef98c80 	.word	0xfef98c80
 80148a0:	0013d620 	.word	0x0013d620
 80148a4:	fee5b660 	.word	0xfee5b660
 80148a8:	0016e35f 	.word	0x0016e35f
 80148ac:	feced300 	.word	0xfeced300
 80148b0:	001b7740 	.word	0x001b7740
 80148b4:	feb35bc0 	.word	0xfeb35bc0
 80148b8:	002191c0 	.word	0x002191c0
 80148bc:	fe91ca00 	.word	0xfe91ca00
 80148c0:	00387520 	.word	0x00387520
 80148c4:	fe5954e0 	.word	0xfe5954e0
 80148c8:	00419ce0 	.word	0x00419ce0

080148cc <USB_EnableGlobalInt>:
{
 80148cc:	4603      	mov	r3, r0
}
 80148ce:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80148d0:	689a      	ldr	r2, [r3, #8]
 80148d2:	f042 0201 	orr.w	r2, r2, #1
 80148d6:	609a      	str	r2, [r3, #8]
}
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop

080148dc <USB_DisableGlobalInt>:
{
 80148dc:	4603      	mov	r3, r0
}
 80148de:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80148e0:	689a      	ldr	r2, [r3, #8]
 80148e2:	f022 0201 	bic.w	r2, r2, #1
 80148e6:	609a      	str	r2, [r3, #8]
}
 80148e8:	4770      	bx	lr
 80148ea:	bf00      	nop

080148ec <USB_SetCurrentMode>:
{
 80148ec:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80148ee:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80148f0:	2901      	cmp	r1, #1
{
 80148f2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80148f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80148f8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80148fa:	d017      	beq.n	801492c <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80148fc:	b9a1      	cbnz	r1, 8014928 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80148fe:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8014900:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014906:	60c3      	str	r3, [r0, #12]
 8014908:	e001      	b.n	801490e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801490a:	2c32      	cmp	r4, #50	; 0x32
 801490c:	d00c      	beq.n	8014928 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 801490e:	2001      	movs	r0, #1
      ms++;
 8014910:	4404      	add	r4, r0
      HAL_Delay(1U);
 8014912:	f7f4 fd31 	bl	8009378 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8014916:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014918:	07db      	lsls	r3, r3, #31
 801491a:	d4f6      	bmi.n	801490a <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 801491c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8014920:	fab0 f080 	clz	r0, r0
 8014924:	0940      	lsrs	r0, r0, #5
}
 8014926:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8014928:	2001      	movs	r0, #1
}
 801492a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801492c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801492e:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014934:	60c3      	str	r3, [r0, #12]
 8014936:	e001      	b.n	801493c <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014938:	2c32      	cmp	r4, #50	; 0x32
 801493a:	d0f5      	beq.n	8014928 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 801493c:	2001      	movs	r0, #1
      ms++;
 801493e:	4404      	add	r4, r0
      HAL_Delay(1U);
 8014940:	f7f4 fd1a 	bl	8009378 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8014944:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014946:	07da      	lsls	r2, r3, #31
 8014948:	d5f6      	bpl.n	8014938 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 801494a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801494e:	fab0 f080 	clz	r0, r0
 8014952:	0940      	lsrs	r0, r0, #5
 8014954:	e7e7      	b.n	8014926 <USB_SetCurrentMode+0x3a>
 8014956:	bf00      	nop

08014958 <USB_FlushTxFifo>:
{
 8014958:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801495a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801495c:	4a11      	ldr	r2, [pc, #68]	; (80149a4 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801495e:	9301      	str	r3, [sp, #4]
 8014960:	e002      	b.n	8014968 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014962:	6903      	ldr	r3, [r0, #16]
 8014964:	2b00      	cmp	r3, #0
 8014966:	db07      	blt.n	8014978 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8014968:	9b01      	ldr	r3, [sp, #4]
 801496a:	3301      	adds	r3, #1
 801496c:	4293      	cmp	r3, r2
 801496e:	9301      	str	r3, [sp, #4]
 8014970:	d9f7      	bls.n	8014962 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8014972:	2003      	movs	r0, #3
}
 8014974:	b002      	add	sp, #8
 8014976:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014978:	0189      	lsls	r1, r1, #6
  count = 0U;
 801497a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801497c:	4a09      	ldr	r2, [pc, #36]	; (80149a4 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801497e:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8014982:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014984:	6101      	str	r1, [r0, #16]
 8014986:	e003      	b.n	8014990 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014988:	6903      	ldr	r3, [r0, #16]
 801498a:	f013 0320 	ands.w	r3, r3, #32
 801498e:	d005      	beq.n	801499c <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8014990:	9b01      	ldr	r3, [sp, #4]
 8014992:	3301      	adds	r3, #1
 8014994:	4293      	cmp	r3, r2
 8014996:	9301      	str	r3, [sp, #4]
 8014998:	d9f6      	bls.n	8014988 <USB_FlushTxFifo+0x30>
 801499a:	e7ea      	b.n	8014972 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 801499c:	4618      	mov	r0, r3
}
 801499e:	b002      	add	sp, #8
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	00030d40 	.word	0x00030d40

080149a8 <USB_FlushRxFifo>:
{
 80149a8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80149aa:	2300      	movs	r3, #0
    if (++count > 200000U)
 80149ac:	4a10      	ldr	r2, [pc, #64]	; (80149f0 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	e002      	b.n	80149b8 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80149b2:	6903      	ldr	r3, [r0, #16]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	db07      	blt.n	80149c8 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 80149b8:	9b01      	ldr	r3, [sp, #4]
 80149ba:	3301      	adds	r3, #1
 80149bc:	4293      	cmp	r3, r2
 80149be:	9301      	str	r3, [sp, #4]
 80149c0:	d9f7      	bls.n	80149b2 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 80149c2:	2003      	movs	r0, #3
}
 80149c4:	b002      	add	sp, #8
 80149c6:	4770      	bx	lr
  count = 0U;
 80149c8:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80149ca:	2310      	movs	r3, #16
    if (++count > 200000U)
 80149cc:	4a08      	ldr	r2, [pc, #32]	; (80149f0 <USB_FlushRxFifo+0x48>)
  count = 0U;
 80149ce:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80149d0:	6103      	str	r3, [r0, #16]
 80149d2:	e003      	b.n	80149dc <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80149d4:	6903      	ldr	r3, [r0, #16]
 80149d6:	f013 0310 	ands.w	r3, r3, #16
 80149da:	d005      	beq.n	80149e8 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80149dc:	9b01      	ldr	r3, [sp, #4]
 80149de:	3301      	adds	r3, #1
 80149e0:	4293      	cmp	r3, r2
 80149e2:	9301      	str	r3, [sp, #4]
 80149e4:	d9f6      	bls.n	80149d4 <USB_FlushRxFifo+0x2c>
 80149e6:	e7ec      	b.n	80149c2 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 80149e8:	4618      	mov	r0, r3
}
 80149ea:	b002      	add	sp, #8
 80149ec:	4770      	bx	lr
 80149ee:	bf00      	nop
 80149f0:	00030d40 	.word	0x00030d40

080149f4 <USB_DevInit>:
{
 80149f4:	b084      	sub	sp, #16
 80149f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149fa:	ad09      	add	r5, sp, #36	; 0x24
 80149fc:	4604      	mov	r4, r0
 80149fe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014a00:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8014a04:	2300      	movs	r3, #0
 8014a06:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 8014a08:	4619      	mov	r1, r3
 8014a0a:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8014a0e:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8014a10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8014a14:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8014a16:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8014a18:	d1f7      	bne.n	8014a0a <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8014a1a:	2e00      	cmp	r6, #0
 8014a1c:	f040 8092 	bne.w	8014b44 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014a20:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8014a24:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8014a28:	f043 0302 	orr.w	r3, r3, #2
 8014a2c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014a34:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a3c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014a3e:	6823      	ldr	r3, [r4, #0]
 8014a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a44:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8014a46:	2300      	movs	r3, #0
 8014a48:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d07d      	beq.n	8014b52 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	f043 0303 	orr.w	r3, r3, #3
 8014a5c:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014a5e:	2110      	movs	r1, #16
 8014a60:	4620      	mov	r0, r4
 8014a62:	f7ff ff79 	bl	8014958 <USB_FlushTxFifo>
 8014a66:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f7ff ff9d 	bl	80149a8 <USB_FlushRxFifo>
 8014a6e:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a72:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a74:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a76:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8014a78:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8014a7a:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014a7c:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8014a7e:	bf18      	it	ne
 8014a80:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a82:	b1ed      	cbz	r5, 8014ac0 <USB_DevInit+0xcc>
 8014a84:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014a88:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014a8c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8014a90:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014a92:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014a96:	e009      	b.n	8014aac <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8014a98:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a9c:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014a9e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014aa2:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014aa6:	3320      	adds	r3, #32
 8014aa8:	4295      	cmp	r5, r2
 8014aaa:	d02c      	beq.n	8014b06 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014aac:	6819      	ldr	r1, [r3, #0]
 8014aae:	2900      	cmp	r1, #0
 8014ab0:	daf2      	bge.n	8014a98 <USB_DevInit+0xa4>
      if (i == 0U)
 8014ab2:	b112      	cbz	r2, 8014aba <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014ab4:	f8c3 8000 	str.w	r8, [r3]
 8014ab8:	e7f0      	b.n	8014a9c <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014aba:	f8c3 9000 	str.w	r9, [r3]
 8014abe:	e7ed      	b.n	8014a9c <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014ac0:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8014ac2:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ac8:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014aca:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8014ace:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014ad0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8014ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ad4:	b91b      	cbnz	r3, 8014ade <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014ad6:	69a3      	ldr	r3, [r4, #24]
 8014ad8:	f043 0310 	orr.w	r3, r3, #16
 8014adc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014ade:	69a2      	ldr	r2, [r4, #24]
 8014ae0:	4b21      	ldr	r3, [pc, #132]	; (8014b68 <USB_DevInit+0x174>)
 8014ae2:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8014ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014ae6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8014ae8:	b11a      	cbz	r2, 8014af2 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014aea:	69a3      	ldr	r3, [r4, #24]
 8014aec:	f043 0308 	orr.w	r3, r3, #8
 8014af0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8014af2:	2e01      	cmp	r6, #1
 8014af4:	d103      	bne.n	8014afe <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014af6:	69a2      	ldr	r2, [r4, #24]
 8014af8:	4b1c      	ldr	r3, [pc, #112]	; (8014b6c <USB_DevInit+0x178>)
 8014afa:	4313      	orrs	r3, r2
 8014afc:	61a3      	str	r3, [r4, #24]
}
 8014afe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b02:	b004      	add	sp, #16
 8014b04:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b06:	2200      	movs	r2, #0
 8014b08:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014b0c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014b10:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014b14:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014b16:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014b1a:	e009      	b.n	8014b30 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014b1c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b20:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014b22:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014b26:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b2a:	3320      	adds	r3, #32
 8014b2c:	4295      	cmp	r5, r2
 8014b2e:	d0c7      	beq.n	8014ac0 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b30:	6819      	ldr	r1, [r3, #0]
 8014b32:	2900      	cmp	r1, #0
 8014b34:	daf2      	bge.n	8014b1c <USB_DevInit+0x128>
      if (i == 0U)
 8014b36:	b112      	cbz	r2, 8014b3e <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014b38:	f8c3 8000 	str.w	r8, [r3]
 8014b3c:	e7f0      	b.n	8014b20 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014b3e:	f8c3 9000 	str.w	r9, [r3]
 8014b42:	e7ed      	b.n	8014b20 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014b46:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b50:	e779      	b.n	8014a46 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8014b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b54:	b913      	cbnz	r3, 8014b5c <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014b5a:	e780      	b.n	8014a5e <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	f043 0301 	orr.w	r3, r3, #1
 8014b62:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014b64:	e77b      	b.n	8014a5e <USB_DevInit+0x6a>
 8014b66:	bf00      	nop
 8014b68:	803c3800 	.word	0x803c3800
 8014b6c:	40000004 	.word	0x40000004

08014b70 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014b70:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014b74:	f013 0006 	ands.w	r0, r3, #6
 8014b78:	d004      	beq.n	8014b84 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8014b7a:	f013 0f02 	tst.w	r3, #2
 8014b7e:	bf14      	ite	ne
 8014b80:	2002      	movne	r0, #2
 8014b82:	200f      	moveq	r0, #15
}
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop

08014b88 <USB_ActivateEndpoint>:
{
 8014b88:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8014b8a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014b8c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d020      	beq.n	8014bd4 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014b92:	f002 0c0f 	and.w	ip, r2, #15
 8014b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014b9a:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014b9e:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014ba2:	fa03 f30c 	lsl.w	r3, r3, ip
 8014ba6:	4323      	orrs	r3, r4
 8014ba8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014bac:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8014bb0:	041b      	lsls	r3, r3, #16
 8014bb2:	d40c      	bmi.n	8014bce <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014bb4:	688b      	ldr	r3, [r1, #8]
 8014bb6:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8014bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014bbe:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014bc0:	4914      	ldr	r1, [pc, #80]	; (8014c14 <USB_ActivateEndpoint+0x8c>)
 8014bc2:	4323      	orrs	r3, r4
 8014bc4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8014bc8:	4319      	orrs	r1, r3
 8014bca:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8014bce:	2000      	movs	r0, #0
 8014bd0:	bc30      	pop	{r4, r5}
 8014bd2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014bd4:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8014bd8:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014bdc:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014be0:	40ab      	lsls	r3, r5
 8014be2:	69e5      	ldr	r5, [r4, #28]
 8014be4:	432b      	orrs	r3, r5
 8014be6:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014be8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014bec:	041c      	lsls	r4, r3, #16
 8014bee:	d4ee      	bmi.n	8014bce <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014bf0:	688b      	ldr	r3, [r1, #8]
 8014bf2:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8014bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014bfa:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014bfc:	4905      	ldr	r1, [pc, #20]	; (8014c14 <USB_ActivateEndpoint+0x8c>)
 8014bfe:	432b      	orrs	r3, r5
 8014c00:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8014c04:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8014c08:	4311      	orrs	r1, r2
}
 8014c0a:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014c0c:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8014c10:	2000      	movs	r0, #0
 8014c12:	4770      	bx	lr
 8014c14:	10008000 	.word	0x10008000

08014c18 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8014c18:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014c1a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8014c1c:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c1e:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8014c22:	d02a      	beq.n	8014c7a <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014c24:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c28:	2a00      	cmp	r2, #0
 8014c2a:	db19      	blt.n	8014c60 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014c30:	f003 030f 	and.w	r3, r3, #15
 8014c34:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014c38:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014c3c:	4a23      	ldr	r2, [pc, #140]	; (8014ccc <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c3e:	ea21 0103 	bic.w	r1, r1, r3
 8014c42:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c46:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014c4a:	ea21 0303 	bic.w	r3, r1, r3
 8014c4e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014c52:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014c54:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014c58:	401a      	ands	r2, r3
 8014c5a:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8014c5e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014c60:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c64:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014c68:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014c6c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014c74:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8014c78:	e7d8      	b.n	8014c2c <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c7a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c7e:	2a00      	cmp	r2, #0
 8014c80:	da0b      	bge.n	8014c9a <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014c82:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c86:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014c8a:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014c8e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014c96:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014c9a:	f003 020f 	and.w	r2, r3, #15
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014ca4:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014ca6:	4a0a      	ldr	r2, [pc, #40]	; (8014cd0 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014ca8:	ea21 0103 	bic.w	r1, r1, r3
 8014cac:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014cb0:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014cb4:	ea21 0303 	bic.w	r3, r1, r3
 8014cb8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014cbc:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014cbe:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8014cc2:	401a      	ands	r2, r3
 8014cc4:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	eff37800 	.word	0xeff37800
 8014cd0:	ec337800 	.word	0xec337800

08014cd4 <USB_EPStartXfer>:
{
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8014cd8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014cda:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	d051      	beq.n	8014d86 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014ce2:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8014ce6:	4c84      	ldr	r4, [pc, #528]	; (8014ef8 <USB_EPStartXfer+0x224>)
 8014ce8:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8014cec:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8014cf0:	402c      	ands	r4, r5
 8014cf2:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014cf4:	4c81      	ldr	r4, [pc, #516]	; (8014efc <USB_EPStartXfer+0x228>)
 8014cf6:	691d      	ldr	r5, [r3, #16]
 8014cf8:	402c      	ands	r4, r5
 8014cfa:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8014cfc:	694c      	ldr	r4, [r1, #20]
 8014cfe:	b384      	cbz	r4, 8014d62 <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d00:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8014d02:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d04:	4e7e      	ldr	r6, [pc, #504]	; (8014f00 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d06:	442c      	add	r4, r5
 8014d08:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d0c:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d10:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8014d14:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d16:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d1a:	691d      	ldr	r5, [r3, #16]
 8014d1c:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d20:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d24:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d26:	691d      	ldr	r5, [r3, #16]
 8014d28:	ea44 0405 	orr.w	r4, r4, r5
 8014d2c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d2e:	d025      	beq.n	8014d7c <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8014d30:	78cb      	ldrb	r3, [r1, #3]
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d10c      	bne.n	8014d50 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014d36:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014d3a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014d3e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014d42:	bf0c      	ite	eq
 8014d44:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014d48:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014d4c:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014d50:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014d58:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d62:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8014d64:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d66:	691d      	ldr	r5, [r3, #16]
 8014d68:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8014d6c:	ea44 0405 	orr.w	r4, r4, r5
 8014d70:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d72:	691c      	ldr	r4, [r3, #16]
 8014d74:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8014d78:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d7a:	d1d9      	bne.n	8014d30 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d7c:	68ca      	ldr	r2, [r1, #12]
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	d0d6      	beq.n	8014d30 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014d82:	615a      	str	r2, [r3, #20]
 8014d84:	e7d4      	b.n	8014d30 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8014d86:	694d      	ldr	r5, [r1, #20]
 8014d88:	2d00      	cmp	r5, #0
 8014d8a:	d03d      	beq.n	8014e08 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d8c:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8014d90:	4e59      	ldr	r6, [pc, #356]	; (8014ef8 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014d92:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d96:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d9a:	4f58      	ldr	r7, [pc, #352]	; (8014efc <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d9c:	ea08 0606 	and.w	r6, r8, r6
 8014da0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014da4:	eb05 060e 	add.w	r6, r5, lr
 8014da8:	3e01      	subs	r6, #1
 8014daa:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014dae:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8014db2:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014db4:	4e52      	ldr	r6, [pc, #328]	; (8014f00 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014db6:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014dba:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8014dbe:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014dc2:	433e      	orrs	r6, r7
 8014dc4:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014dc8:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8014dcc:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014dd0:	433e      	orrs	r6, r7
 8014dd2:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014dd6:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8014dda:	f891 e003 	ldrb.w	lr, [r1, #3]
 8014dde:	f1be 0f01 	cmp.w	lr, #1
 8014de2:	d057      	beq.n	8014e94 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8014de4:	2a01      	cmp	r2, #1
 8014de6:	d072      	beq.n	8014ece <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014de8:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014dec:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014df0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014df4:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014df8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014dfc:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8014e00:	4313      	orrs	r3, r2
 8014e02:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8014e06:	e7a9      	b.n	8014d5c <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e08:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8014e0c:	4e3b      	ldr	r6, [pc, #236]	; (8014efc <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e0e:	4c3a      	ldr	r4, [pc, #232]	; (8014ef8 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8014e10:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e12:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8014e16:	ea06 0607 	and.w	r6, r6, r7
 8014e1a:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014e1e:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014e22:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014e26:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e2a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014e2e:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e32:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e36:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8014e3a:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8014e3e:	d03a      	beq.n	8014eb6 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e40:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014e44:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e48:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8014e4c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014e50:	d184      	bne.n	8014d5c <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e52:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014e56:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014e5a:	6833      	ldr	r3, [r6, #0]
 8014e5c:	bf0c      	ite	eq
 8014e5e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014e62:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014e66:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8014e68:	2a00      	cmp	r2, #0
 8014e6a:	f47f af77 	bne.w	8014d5c <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e6e:	b2ad      	uxth	r5, r5
 8014e70:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8014e72:	08ad      	lsrs	r5, r5, #2
 8014e74:	f43f af72 	beq.w	8014d5c <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014e78:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e7a:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8014e7e:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8014e82:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8014e86:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8014e8a:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e8c:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8014e90:	d1f9      	bne.n	8014e86 <USB_EPStartXfer+0x1b2>
 8014e92:	e763      	b.n	8014d5c <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014e94:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8014e96:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014e98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014e9c:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014e9e:	6933      	ldr	r3, [r6, #16]
 8014ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ea4:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8014ea6:	d017      	beq.n	8014ed8 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ea8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8014eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014eb0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014eb4:	e7cd      	b.n	8014e52 <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8014eb6:	690b      	ldr	r3, [r1, #16]
 8014eb8:	b963      	cbnz	r3, 8014ed4 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8014eba:	f1be 0f01 	cmp.w	lr, #1
 8014ebe:	d00e      	beq.n	8014ede <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ec0:	6833      	ldr	r3, [r6, #0]
}
 8014ec2:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ec8:	6033      	str	r3, [r6, #0]
}
 8014eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8014ece:	690b      	ldr	r3, [r1, #16]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d0f5      	beq.n	8014ec0 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014ed4:	6173      	str	r3, [r6, #20]
 8014ed6:	e7f0      	b.n	8014eba <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8014ed8:	690b      	ldr	r3, [r1, #16]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d1fa      	bne.n	8014ed4 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ede:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014ee2:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014ee6:	6833      	ldr	r3, [r6, #0]
 8014ee8:	bf0c      	ite	eq
 8014eea:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014eee:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014ef2:	6033      	str	r3, [r6, #0]
 8014ef4:	e7e4      	b.n	8014ec0 <USB_EPStartXfer+0x1ec>
 8014ef6:	bf00      	nop
 8014ef8:	fff80000 	.word	0xfff80000
 8014efc:	e007ffff 	.word	0xe007ffff
 8014f00:	1ff80000 	.word	0x1ff80000

08014f04 <USB_EP0StartXfer>:
{
 8014f04:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8014f06:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014f08:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	d027      	beq.n	8014f5e <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014f0e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8014f12:	4c3c      	ldr	r4, [pc, #240]	; (8015004 <USB_EP0StartXfer+0x100>)
 8014f14:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8014f18:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8014f1c:	402c      	ands	r4, r5
 8014f1e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014f20:	4c39      	ldr	r4, [pc, #228]	; (8015008 <USB_EP0StartXfer+0x104>)
 8014f22:	691d      	ldr	r5, [r3, #16]
 8014f24:	402c      	ands	r4, r5
 8014f26:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8014f28:	694c      	ldr	r4, [r1, #20]
 8014f2a:	b9ac      	cbnz	r4, 8014f58 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8014f2c:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014f2e:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014f30:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8014f34:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014f36:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014f3a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014f3c:	691d      	ldr	r5, [r3, #16]
 8014f3e:	ea44 0405 	orr.w	r4, r4, r5
 8014f42:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014f44:	d03e      	beq.n	8014fc4 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f46:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014f4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014f4e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014f52:	2000      	movs	r0, #0
 8014f54:	bcf0      	pop	{r4, r5, r6, r7}
 8014f56:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8014f58:	688c      	ldr	r4, [r1, #8]
 8014f5a:	614c      	str	r4, [r1, #20]
 8014f5c:	e7e7      	b.n	8014f2e <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f5e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8014f62:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8014f68:	2d00      	cmp	r5, #0
 8014f6a:	d030      	beq.n	8014fce <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014f6c:	691f      	ldr	r7, [r3, #16]
 8014f6e:	4e25      	ldr	r6, [pc, #148]	; (8015004 <USB_EP0StartXfer+0x100>)
 8014f70:	403e      	ands	r6, r7
 8014f72:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f74:	4e24      	ldr	r6, [pc, #144]	; (8015008 <USB_EP0StartXfer+0x104>)
 8014f76:	691f      	ldr	r7, [r3, #16]
 8014f78:	403e      	ands	r6, r7
 8014f7a:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8014f7c:	688e      	ldr	r6, [r1, #8]
 8014f7e:	42b5      	cmp	r5, r6
 8014f80:	d901      	bls.n	8014f86 <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8014f82:	4635      	mov	r5, r6
 8014f84:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f86:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014f88:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8014f8c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f8e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014f92:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014f94:	691e      	ldr	r6, [r3, #16]
 8014f96:	ea45 0506 	orr.w	r5, r5, r6
 8014f9a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014f9c:	d027      	beq.n	8014fee <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f9e:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014fa0:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014fa2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8014fa6:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014fa8:	2900      	cmp	r1, #0
 8014faa:	d0d2      	beq.n	8014f52 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014fac:	f004 020f 	and.w	r2, r4, #15
 8014fb0:	2401      	movs	r4, #1
 8014fb2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8014fb6:	4094      	lsls	r4, r2
 8014fb8:	431c      	orrs	r4, r3
 8014fba:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	bcf0      	pop	{r4, r5, r6, r7}
 8014fc2:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8014fc4:	68ca      	ldr	r2, [r1, #12]
 8014fc6:	2a00      	cmp	r2, #0
 8014fc8:	d0bd      	beq.n	8014f46 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014fca:	615a      	str	r2, [r3, #20]
 8014fcc:	e7bb      	b.n	8014f46 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014fce:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8014fd0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014fd2:	4d0d      	ldr	r5, [pc, #52]	; (8015008 <USB_EP0StartXfer+0x104>)
 8014fd4:	ea05 0506 	and.w	r5, r5, r6
 8014fd8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014fda:	691d      	ldr	r5, [r3, #16]
 8014fdc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014fe0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014fe2:	4d08      	ldr	r5, [pc, #32]	; (8015004 <USB_EP0StartXfer+0x100>)
 8014fe4:	691e      	ldr	r6, [r3, #16]
 8014fe6:	ea05 0506 	and.w	r5, r5, r6
 8014fea:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014fec:	d1d7      	bne.n	8014f9e <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8014fee:	690a      	ldr	r2, [r1, #16]
 8014ff0:	b102      	cbz	r2, 8014ff4 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014ff2:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ff4:	681a      	ldr	r2, [r3, #0]
}
 8014ff6:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ff8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8014ffc:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ffe:	601a      	str	r2, [r3, #0]
}
 8015000:	4770      	bx	lr
 8015002:	bf00      	nop
 8015004:	fff80000 	.word	0xfff80000
 8015008:	e007ffff 	.word	0xe007ffff

0801500c <USB_WritePacket>:
{
 801500c:	b410      	push	{r4}
 801500e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8015012:	b964      	cbnz	r4, 801502e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8015014:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8015016:	089b      	lsrs	r3, r3, #2
 8015018:	d009      	beq.n	801502e <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801501a:	3201      	adds	r2, #1
 801501c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015020:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8015024:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8015028:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801502a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 801502c:	d1fa      	bne.n	8015024 <USB_WritePacket+0x18>
}
 801502e:	2000      	movs	r0, #0
 8015030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015034:	4770      	bx	lr
 8015036:	bf00      	nop

08015038 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8015038:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8015040:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8015044:	d01a      	beq.n	801507c <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015046:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 801504a:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 801504c:	2300      	movs	r3, #0
 801504e:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015050:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8015054:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015056:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 801505a:	d1f8      	bne.n	801504e <USB_ReadPacket+0x16>
    pDest++;
 801505c:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8015060:	b15e      	cbz	r6, 801507a <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015062:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8015066:	4406      	add	r6, r0
 8015068:	2200      	movs	r2, #0
 801506a:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801506c:	fa21 f302 	lsr.w	r3, r1, r2
 8015070:	3208      	adds	r2, #8
 8015072:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8015076:	42b0      	cmp	r0, r6
 8015078:	d1f8      	bne.n	801506c <USB_ReadPacket+0x34>
}
 801507a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 801507c:	4608      	mov	r0, r1
 801507e:	e7ef      	b.n	8015060 <USB_ReadPacket+0x28>

08015080 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8015080:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8015082:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8015084:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015086:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801508a:	d00c      	beq.n	80150a6 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801508c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8015090:	b10b      	cbz	r3, 8015096 <USB_EPSetStall+0x16>
 8015092:	2a00      	cmp	r2, #0
 8015094:	da14      	bge.n	80150c0 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015096:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801509a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801509e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80150a2:	2000      	movs	r0, #0
 80150a4:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150a6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80150aa:	2a00      	cmp	r2, #0
 80150ac:	db00      	blt.n	80150b0 <USB_EPSetStall+0x30>
 80150ae:	b973      	cbnz	r3, 80150ce <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80150bc:	2000      	movs	r0, #0
 80150be:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80150c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80150c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80150c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80150cc:	e7e3      	b.n	8015096 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80150ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80150d6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80150e6:	e7e9      	b.n	80150bc <USB_EPSetStall+0x3c>

080150e8 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80150e8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80150ea:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80150ec:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80150ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80150f2:	d013      	beq.n	801511c <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80150f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80150f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80150fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015100:	78cb      	ldrb	r3, [r1, #3]
 8015102:	3b02      	subs	r3, #2
 8015104:	2b01      	cmp	r3, #1
 8015106:	d901      	bls.n	801510c <USB_EPClearStall+0x24>
}
 8015108:	2000      	movs	r0, #0
 801510a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801510c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015114:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8015118:	2000      	movs	r0, #0
 801511a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801511c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8015120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015124:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015128:	78cb      	ldrb	r3, [r1, #3]
 801512a:	3b02      	subs	r3, #2
 801512c:	2b01      	cmp	r3, #1
 801512e:	d8eb      	bhi.n	8015108 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015130:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8015134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015138:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 801513c:	2000      	movs	r0, #0
 801513e:	4770      	bx	lr

08015140 <USB_SetDevAddress>:
{
 8015140:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015142:	0109      	lsls	r1, r1, #4
}
 8015144:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015146:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801514a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801514e:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8015152:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015156:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 801515a:	4311      	orrs	r1, r2
 801515c:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8015160:	4770      	bx	lr
 8015162:	bf00      	nop

08015164 <USB_DevConnect>:
{
 8015164:	4603      	mov	r3, r0
}
 8015166:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015168:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801516c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015170:	f022 0203 	bic.w	r2, r2, #3
 8015174:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015178:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 801517c:	f023 0302 	bic.w	r3, r3, #2
 8015180:	604b      	str	r3, [r1, #4]
}
 8015182:	4770      	bx	lr

08015184 <USB_DevDisconnect>:
{
 8015184:	4603      	mov	r3, r0
}
 8015186:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015188:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801518c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015190:	f022 0203 	bic.w	r2, r2, #3
 8015194:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015198:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 801519c:	f043 0302 	orr.w	r3, r3, #2
 80151a0:	604b      	str	r3, [r1, #4]
}
 80151a2:	4770      	bx	lr

080151a4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80151a4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80151a6:	6980      	ldr	r0, [r0, #24]
}
 80151a8:	4010      	ands	r0, r2
 80151aa:	4770      	bx	lr

080151ac <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80151ac:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151b0:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80151b4:	4018      	ands	r0, r3
}
 80151b6:	0c00      	lsrs	r0, r0, #16
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop

080151bc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80151bc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151c0:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80151c4:	4018      	ands	r0, r3
}
 80151c6:	b280      	uxth	r0, r0
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop

080151cc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80151cc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80151d0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80151d4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80151d8:	6940      	ldr	r0, [r0, #20]
}
 80151da:	4010      	ands	r0, r2
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop

080151e0 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80151e0:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80151e4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80151e8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80151ec:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80151f0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80151f4:	40cb      	lsrs	r3, r1
 80151f6:	01db      	lsls	r3, r3, #7
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	4313      	orrs	r3, r2
}
 80151fc:	4018      	ands	r0, r3
 80151fe:	4770      	bx	lr

08015200 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8015200:	6940      	ldr	r0, [r0, #20]
}
 8015202:	f000 0001 	and.w	r0, r0, #1
 8015206:	4770      	bx	lr

08015208 <USB_ActivateSetup>:
{
 8015208:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801520a:	4a09      	ldr	r2, [pc, #36]	; (8015230 <USB_ActivateSetup+0x28>)
}
 801520c:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801520e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8015212:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015214:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8015218:	4022      	ands	r2, r4
}
 801521a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801521e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015222:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8015226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801522a:	604b      	str	r3, [r1, #4]
}
 801522c:	4770      	bx	lr
 801522e:	bf00      	nop
 8015230:	fffff800 	.word	0xfffff800

08015234 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015234:	4b14      	ldr	r3, [pc, #80]	; (8015288 <USB_EP0_OutStart+0x54>)
{
 8015236:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015238:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801523a:	429c      	cmp	r4, r3
 801523c:	d81a      	bhi.n	8015274 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801523e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015242:	2300      	movs	r3, #0
  if (dma == 1U)
 8015244:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015246:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015248:	6903      	ldr	r3, [r0, #16]
 801524a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801524e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015250:	6903      	ldr	r3, [r0, #16]
 8015252:	f043 0318 	orr.w	r3, r3, #24
 8015256:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015258:	6903      	ldr	r3, [r0, #16]
 801525a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801525e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8015260:	d104      	bne.n	801526c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015262:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801526a:	6003      	str	r3, [r0, #0]
}
 801526c:	2000      	movs	r0, #0
 801526e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015272:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015274:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015278:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 801527c:	2b00      	cmp	r3, #0
 801527e:	dae0      	bge.n	8015242 <USB_EP0_OutStart+0xe>
}
 8015280:	2000      	movs	r0, #0
 8015282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015286:	4770      	bx	lr
 8015288:	4f54300a 	.word	0x4f54300a

0801528c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801528c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801528e:	4903      	ldr	r1, [pc, #12]	; (801529c <MX_FATFS_Init+0x10>)
 8015290:	4803      	ldr	r0, [pc, #12]	; (80152a0 <MX_FATFS_Init+0x14>)
 8015292:	f001 f96f 	bl	8016574 <FATFS_LinkDriver>
 8015296:	4b03      	ldr	r3, [pc, #12]	; (80152a4 <MX_FATFS_Init+0x18>)
 8015298:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801529a:	bd08      	pop	{r3, pc}
 801529c:	20003590 	.word	0x20003590
 80152a0:	20000320 	.word	0x20000320
 80152a4:	20003594 	.word	0x20003594

080152a8 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80152a8:	4b02      	ldr	r3, [pc, #8]	; (80152b4 <USER_initialize+0xc>)
 80152aa:	2201      	movs	r2, #1
 80152ac:	701a      	strb	r2, [r3, #0]
    return Stat;
 80152ae:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 80152b0:	4770      	bx	lr
 80152b2:	bf00      	nop
 80152b4:	2000031c 	.word	0x2000031c

080152b8 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80152b8:	2000      	movs	r0, #0
 80152ba:	4770      	bx	lr

080152bc <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80152bc:	2001      	movs	r0, #1
 80152be:	4770      	bx	lr

080152c0 <USER_write>:
 80152c0:	2000      	movs	r0, #0
 80152c2:	4770      	bx	lr

080152c4 <USER_status>:
 80152c4:	4b02      	ldr	r3, [pc, #8]	; (80152d0 <USER_status+0xc>)
 80152c6:	2201      	movs	r2, #1
 80152c8:	701a      	strb	r2, [r3, #0]
 80152ca:	7818      	ldrb	r0, [r3, #0]
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	2000031c 	.word	0x2000031c

080152d4 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80152d4:	2100      	movs	r1, #0
{
 80152d6:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 80152d8:	4608      	mov	r0, r1
{
 80152da:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 80152dc:	f003 ff52 	bl	8019184 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80152e0:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 80152e2:	4b1f      	ldr	r3, [pc, #124]	; (8015360 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80152e4:	491f      	ldr	r1, [pc, #124]	; (8015364 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80152e6:	4a20      	ldr	r2, [pc, #128]	; (8015368 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80152e8:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 80152ea:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 80152ec:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 80152ee:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80152f0:	481e      	ldr	r0, [pc, #120]	; (801536c <MX_LWIP_Init+0x98>)
 80152f2:	4d1f      	ldr	r5, [pc, #124]	; (8015370 <MX_LWIP_Init+0x9c>)
 80152f4:	9002      	str	r0, [sp, #8]
 80152f6:	481f      	ldr	r0, [pc, #124]	; (8015374 <MX_LWIP_Init+0xa0>)
 80152f8:	9001      	str	r0, [sp, #4]
 80152fa:	4628      	mov	r0, r5
 80152fc:	f006 fcf0 	bl	801bce0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8015300:	4628      	mov	r0, r5
 8015302:	f006 fd9b 	bl	801be3c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8015306:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801530a:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 801530c:	075b      	lsls	r3, r3, #29
 801530e:	d524      	bpl.n	801535a <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 8015310:	f006 fd9a 	bl	801be48 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8015314:	4918      	ldr	r1, [pc, #96]	; (8015378 <MX_LWIP_Init+0xa4>)
 8015316:	4816      	ldr	r0, [pc, #88]	; (8015370 <MX_LWIP_Init+0x9c>)
 8015318:	f006 fe20 	bl	801bf5c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 801531c:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801531e:	2101      	movs	r1, #1
 8015320:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 8015322:	4e16      	ldr	r6, [pc, #88]	; (801537c <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015324:	4c16      	ldr	r4, [pc, #88]	; (8015380 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8015326:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801532a:	f001 fa0d 	bl	8016748 <osSemaphoreCreate>
 801532e:	4b15      	ldr	r3, [pc, #84]	; (8015384 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8015330:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015332:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8015336:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8015338:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801533a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801533c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015340:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015344:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8015348:	4631      	mov	r1, r6
 801534a:	a807      	add	r0, sp, #28
 801534c:	f001 f944 	bl	80165d8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8015350:	4807      	ldr	r0, [pc, #28]	; (8015370 <MX_LWIP_Init+0x9c>)
 8015352:	f00d fd8d 	bl	8022e70 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8015356:	b00e      	add	sp, #56	; 0x38
 8015358:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 801535a:	f006 fd97 	bl	801be8c <netif_set_down>
 801535e:	e7d9      	b.n	8015314 <MX_LWIP_Init+0x40>
 8015360:	200035d8 	.word	0x200035d8
 8015364:	200035dc 	.word	0x200035dc
 8015368:	200035e8 	.word	0x200035e8
 801536c:	080190fd 	.word	0x080190fd
 8015370:	2000359c 	.word	0x2000359c
 8015374:	08015685 	.word	0x08015685
 8015378:	08015865 	.word	0x08015865
 801537c:	200035e0 	.word	0x200035e0
 8015380:	0802a9a0 	.word	0x0802a9a0
 8015384:	20003598 	.word	0x20003598

08015388 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015388:	4b2c      	ldr	r3, [pc, #176]	; (801543c <low_level_output+0xb4>)
{
 801538a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801538e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8015390:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8015392:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015394:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8015396:	2900      	cmp	r1, #0
 8015398:	d04d      	beq.n	8015436 <low_level_output+0xae>
  bufferoffset = 0;
 801539a:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801539c:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 80153a0:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153a2:	6822      	ldr	r2, [r4, #0]
 80153a4:	2a00      	cmp	r2, #0
 80153a6:	db1b      	blt.n	80153e0 <low_level_output+0x58>
      byteslefttocopy = q->len;
 80153a8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153ac:	1995      	adds	r5, r2, r6
 80153ae:	454d      	cmp	r5, r9
 80153b0:	d93c      	bls.n	801542c <low_level_output+0xa4>
      payloadoffset = 0;
 80153b2:	2700      	movs	r7, #0
 80153b4:	e002      	b.n	80153bc <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153b6:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80153b8:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153ba:	d921      	bls.n	8015400 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80153bc:	eba9 0a06 	sub.w	sl, r9, r6
 80153c0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80153c4:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 80153c6:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80153c8:	4439      	add	r1, r7
 80153ca:	4652      	mov	r2, sl
 80153cc:	f010 f9f4 	bl	80257b8 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80153d0:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80153d2:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80153d6:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153d8:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80153da:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153dc:	42b3      	cmp	r3, r6
 80153de:	daea      	bge.n	80153b6 <low_level_output+0x2e>
        errval = ERR_USE;
 80153e0:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80153e4:	4b15      	ldr	r3, [pc, #84]	; (801543c <low_level_output+0xb4>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153ec:	695a      	ldr	r2, [r3, #20]
 80153ee:	0692      	lsls	r2, r2, #26
 80153f0:	d503      	bpl.n	80153fa <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80153f2:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80153f4:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80153f6:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 80153f8:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 80153fa:	b003      	add	sp, #12
 80153fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015400:	4618      	mov	r0, r3
 8015402:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015404:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015408:	462a      	mov	r2, r5
 801540a:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 801540c:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801540e:	4439      	add	r1, r7
 8015410:	f010 f9d2 	bl	80257b8 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8015414:	f8db b000 	ldr.w	fp, [fp]
 8015418:	9b01      	ldr	r3, [sp, #4]
 801541a:	f1bb 0f00 	cmp.w	fp, #0
 801541e:	d1c0      	bne.n	80153a2 <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8015420:	4641      	mov	r1, r8
 8015422:	4806      	ldr	r0, [pc, #24]	; (801543c <low_level_output+0xb4>)
 8015424:	f7f6 f8d0 	bl	800b5c8 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8015428:	2000      	movs	r0, #0
 801542a:	e7db      	b.n	80153e4 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801542c:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 801542e:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015430:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 8015432:	4615      	mov	r5, r2
 8015434:	e7e6      	b.n	8015404 <low_level_output+0x7c>
  uint32_t framelength = 0;
 8015436:	4688      	mov	r8, r1
 8015438:	e7f2      	b.n	8015420 <low_level_output+0x98>
 801543a:	bf00      	nop
 801543c:	2000668c 	.word	0x2000668c

08015440 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8015440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015444:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8015558 <ethernetif_input+0x118>
 8015448:	b083      	sub	sp, #12
 801544a:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801544c:	4b40      	ldr	r3, [pc, #256]	; (8015550 <ethernetif_input+0x110>)
 801544e:	f04f 31ff 	mov.w	r1, #4294967295
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	f001 f99e 	bl	8016794 <osSemaphoreWait>
 8015458:	2800      	cmp	r0, #0
 801545a:	d1f7      	bne.n	801544c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 801545c:	483d      	ldr	r0, [pc, #244]	; (8015554 <ethernetif_input+0x114>)
 801545e:	f00f fc9b 	bl	8024d98 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8015462:	483d      	ldr	r0, [pc, #244]	; (8015558 <ethernetif_input+0x118>)
 8015464:	f7f6 f934 	bl	800b6d0 <HAL_ETH_GetReceivedFrame_IT>
 8015468:	4604      	mov	r4, r0
 801546a:	2800      	cmp	r0, #0
 801546c:	d168      	bne.n	8015540 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 801546e:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8015472:	bb51      	cbnz	r1, 80154ca <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8015474:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015478:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801547c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015480:	b140      	cbz	r0, 8015494 <ethernetif_input+0x54>
 8015482:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015484:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015486:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015488:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801548c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801548e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8015490:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015492:	d1f7      	bne.n	8015484 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8015494:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8015498:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801549a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 801549e:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80154a2:	695a      	ldr	r2, [r3, #20]
 80154a4:	0612      	lsls	r2, r2, #24
 80154a6:	d503      	bpl.n	80154b0 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80154a8:	2280      	movs	r2, #128	; 0x80
 80154aa:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 80154ac:	2200      	movs	r2, #0
 80154ae:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 80154b0:	f1ba 0f00 	cmp.w	sl, #0
 80154b4:	d044      	beq.n	8015540 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 80154b6:	9901      	ldr	r1, [sp, #4]
 80154b8:	4650      	mov	r0, sl
 80154ba:	690b      	ldr	r3, [r1, #16]
 80154bc:	4798      	blx	r3
 80154be:	2800      	cmp	r0, #0
 80154c0:	d142      	bne.n	8015548 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 80154c2:	4824      	ldr	r0, [pc, #144]	; (8015554 <ethernetif_input+0x114>)
 80154c4:	f00f fc6e 	bl	8024da4 <sys_mutex_unlock>
      } while(p!=NULL);
 80154c8:	e7c8      	b.n	801545c <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80154ca:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80154ce:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80154d2:	f006 fe9b 	bl	801c20c <pbuf_alloc>
  if (p != NULL)
 80154d6:	4682      	mov	sl, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	d0cb      	beq.n	8015474 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80154dc:	4683      	mov	fp, r0
    bufferoffset = 0;
 80154de:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154e0:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80154e4:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 80154e8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154ec:	1854      	adds	r4, r2, r1
 80154ee:	4544      	cmp	r4, r8
 80154f0:	d923      	bls.n	801553a <ethernetif_input+0xfa>
      payloadoffset = 0;
 80154f2:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80154f4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80154f8:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80154fc:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015500:	4439      	add	r1, r7
 8015502:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8015504:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015506:	f010 f957 	bl	80257b8 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801550a:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801550c:	4544      	cmp	r4, r8
        bufferoffset = 0;
 801550e:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8015512:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015514:	d8ee      	bhi.n	80154f4 <ethernetif_input+0xb4>
 8015516:	4639      	mov	r1, r7
 8015518:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801551a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801551e:	4428      	add	r0, r5
 8015520:	f010 f94a 	bl	80257b8 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8015524:	f8db b000 	ldr.w	fp, [fp]
 8015528:	f1bb 0f00 	cmp.w	fp, #0
 801552c:	d0a4      	beq.n	8015478 <ethernetif_input+0x38>
 801552e:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8015530:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015534:	1854      	adds	r4, r2, r1
 8015536:	4544      	cmp	r4, r8
 8015538:	d8db      	bhi.n	80154f2 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801553a:	4439      	add	r1, r7
      payloadoffset = 0;
 801553c:	2500      	movs	r5, #0
 801553e:	e7ec      	b.n	801551a <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8015540:	4804      	ldr	r0, [pc, #16]	; (8015554 <ethernetif_input+0x114>)
 8015542:	f00f fc2f 	bl	8024da4 <sys_mutex_unlock>
      } while(p!=NULL);
 8015546:	e781      	b.n	801544c <ethernetif_input+0xc>
            pbuf_free(p);
 8015548:	4650      	mov	r0, sl
 801554a:	f007 f831 	bl	801c5b0 <pbuf_free>
 801554e:	e7b8      	b.n	80154c2 <ethernetif_input+0x82>
 8015550:	200066d4 	.word	0x200066d4
 8015554:	2001e994 	.word	0x2001e994
 8015558:	2000668c 	.word	0x2000668c

0801555c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 801555c:	4b41      	ldr	r3, [pc, #260]	; (8015664 <HAL_ETH_MspInit+0x108>)
 801555e:	6802      	ldr	r2, [r0, #0]
{
 8015560:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8015562:	429a      	cmp	r2, r3
{
 8015564:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015566:	f04f 0400 	mov.w	r4, #0
 801556a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801556e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8015572:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8015574:	d001      	beq.n	801557a <HAL_ETH_MspInit+0x1e>
}
 8015576:	b00d      	add	sp, #52	; 0x34
 8015578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 801557a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801557e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8015580:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015582:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8015584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015586:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015588:	4837      	ldr	r0, [pc, #220]	; (8015668 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 801558a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801558e:	631a      	str	r2, [r3, #48]	; 0x30
 8015590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015592:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8015596:	9200      	str	r2, [sp, #0]
 8015598:	9a00      	ldr	r2, [sp, #0]
 801559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801559c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80155a0:	631a      	str	r2, [r3, #48]	; 0x30
 80155a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155a4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80155a8:	9201      	str	r2, [sp, #4]
 80155aa:	9a01      	ldr	r2, [sp, #4]
 80155ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155ae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80155b2:	631a      	str	r2, [r3, #48]	; 0x30
 80155b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80155ba:	9202      	str	r2, [sp, #8]
 80155bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80155be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155c0:	f042 0204 	orr.w	r2, r2, #4
 80155c4:	631a      	str	r2, [r3, #48]	; 0x30
 80155c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155c8:	f002 0204 	and.w	r2, r2, #4
 80155cc:	9203      	str	r2, [sp, #12]
 80155ce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80155d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155d2:	f042 0201 	orr.w	r2, r2, #1
 80155d6:	631a      	str	r2, [r3, #48]	; 0x30
 80155d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155da:	f002 0201 	and.w	r2, r2, #1
 80155de:	9204      	str	r2, [sp, #16]
 80155e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80155e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155e4:	433a      	orrs	r2, r7
 80155e6:	631a      	str	r2, [r3, #48]	; 0x30
 80155e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155ea:	403a      	ands	r2, r7
 80155ec:	9205      	str	r2, [sp, #20]
 80155ee:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80155f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80155f6:	631a      	str	r2, [r3, #48]	; 0x30
 80155f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80155fa:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80155fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015600:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015602:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015606:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015608:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801560a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801560c:	f7f7 f984 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015610:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015612:	a907      	add	r1, sp, #28
 8015614:	4815      	ldr	r0, [pc, #84]	; (801566c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015616:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015618:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801561c:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015620:	f7f7 f97a 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015628:	a907      	add	r1, sp, #28
 801562a:	4811      	ldr	r0, [pc, #68]	; (8015670 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 801562c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801562e:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015632:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015636:	f7f7 f96f 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801563a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801563e:	a907      	add	r1, sp, #28
 8015640:	480c      	ldr	r0, [pc, #48]	; (8015674 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8015642:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015644:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015646:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015648:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801564c:	f7f7 f964 	bl	800c918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8015650:	4622      	mov	r2, r4
 8015652:	2106      	movs	r1, #6
 8015654:	203d      	movs	r0, #61	; 0x3d
 8015656:	f7f4 fae1 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801565a:	203d      	movs	r0, #61	; 0x3d
 801565c:	f7f4 fb28 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 8015660:	b00d      	add	sp, #52	; 0x34
 8015662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015664:	40028000 	.word	0x40028000
 8015668:	40020800 	.word	0x40020800
 801566c:	40020000 	.word	0x40020000
 8015670:	40020400 	.word	0x40020400
 8015674:	40021800 	.word	0x40021800

08015678 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8015678:	4b01      	ldr	r3, [pc, #4]	; (8015680 <HAL_ETH_RxCpltCallback+0x8>)
 801567a:	6818      	ldr	r0, [r3, #0]
 801567c:	f001 b8b6 	b.w	80167ec <osSemaphoreRelease>
 8015680:	200066d4 	.word	0x200066d4

08015684 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8015684:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015686:	4604      	mov	r4, r0
{
 8015688:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801568a:	2800      	cmp	r0, #0
 801568c:	f000 809e 	beq.w	80157cc <ethernetif_init+0x148>
  heth.Instance = ETH;
 8015690:	4d52      	ldr	r5, [pc, #328]	; (80157dc <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 8015692:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8015694:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8015698:	4b51      	ldr	r3, [pc, #324]	; (80157e0 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 801569a:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 801569c:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 801569e:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 80156a2:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80156a6:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 80156a8:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 80156aa:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 80156ac:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80156b0:	494c      	ldr	r1, [pc, #304]	; (80157e4 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 80156b2:	4a4d      	ldr	r2, [pc, #308]	; (80157e8 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 80156b4:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 80156b6:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80156b8:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80156ba:	494c      	ldr	r1, [pc, #304]	; (80157ec <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 80156bc:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80156c0:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 80156c2:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80156c4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 80156c8:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80156cc:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80156d0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80156d4:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80156d6:	4042      	eors	r2, r0
 80156d8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80156dc:	404a      	eors	r2, r1
 80156de:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80156e2:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80156e6:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80156ea:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80156ee:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80156f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80156f6:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80156f8:	404b      	eors	r3, r1
 80156fa:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80156fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015702:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 8015706:	ab01      	add	r3, sp, #4
 8015708:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801570a:	f7f6 f905 	bl	800b918 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801570e:	b928      	cbnz	r0, 801571c <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8015710:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8015714:	f043 0304 	orr.w	r3, r3, #4
 8015718:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801571c:	2304      	movs	r3, #4
 801571e:	4a34      	ldr	r2, [pc, #208]	; (80157f0 <ethernetif_init+0x16c>)
 8015720:	4934      	ldr	r1, [pc, #208]	; (80157f4 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 8015722:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8015724:	482d      	ldr	r0, [pc, #180]	; (80157dc <ethernetif_init+0x158>)
 8015726:	f7f5 fecb 	bl	800b4c0 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801572a:	2304      	movs	r3, #4
 801572c:	4a32      	ldr	r2, [pc, #200]	; (80157f8 <ethernetif_init+0x174>)
 801572e:	4933      	ldr	r1, [pc, #204]	; (80157fc <ethernetif_init+0x178>)
 8015730:	482a      	ldr	r0, [pc, #168]	; (80157dc <ethernetif_init+0x158>)
 8015732:	f7f5 ff0b 	bl	800b54c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015736:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015738:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801573a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 801573e:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015742:	4e2f      	ldr	r6, [pc, #188]	; (8015800 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015744:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015748:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801574c:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801574e:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015750:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8015754:	7858      	ldrb	r0, [r3, #1]
 8015756:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801575a:	7898      	ldrb	r0, [r3, #2]
 801575c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8015760:	78d8      	ldrb	r0, [r3, #3]
 8015762:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8015766:	7918      	ldrb	r0, [r3, #4]
 8015768:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801576c:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801576e:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8015770:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015772:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015774:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015778:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 801577c:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015780:	f000 ffe2 	bl	8016748 <osSemaphoreCreate>
 8015784:	4b1f      	ldr	r3, [pc, #124]	; (8015804 <ethernetif_init+0x180>)
 8015786:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015788:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801578a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801578c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015790:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8015794:	4621      	mov	r1, r4
 8015796:	a805      	add	r0, sp, #20
 8015798:	f000 ff1e 	bl	80165d8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801579c:	480f      	ldr	r0, [pc, #60]	; (80157dc <ethernetif_init+0x158>)
 801579e:	f7f6 fa11 	bl	800bbc4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80157a2:	466a      	mov	r2, sp
 80157a4:	211d      	movs	r1, #29
 80157a6:	480d      	ldr	r0, [pc, #52]	; (80157dc <ethernetif_init+0x158>)
 80157a8:	f7f6 f824 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80157ac:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80157ae:	211d      	movs	r1, #29
 80157b0:	480a      	ldr	r0, [pc, #40]	; (80157dc <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 80157b2:	f042 020b 	orr.w	r2, r2, #11
 80157b6:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80157b8:	f7f6 f866 	bl	800b888 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80157bc:	466a      	mov	r2, sp
 80157be:	211d      	movs	r1, #29
 80157c0:	4806      	ldr	r0, [pc, #24]	; (80157dc <ethernetif_init+0x158>)
 80157c2:	f7f6 f817 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80157c6:	4638      	mov	r0, r7
 80157c8:	b00d      	add	sp, #52	; 0x34
 80157ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80157cc:	4b0e      	ldr	r3, [pc, #56]	; (8015808 <ethernetif_init+0x184>)
 80157ce:	f240 223a 	movw	r2, #570	; 0x23a
 80157d2:	490e      	ldr	r1, [pc, #56]	; (801580c <ethernetif_init+0x188>)
 80157d4:	480e      	ldr	r0, [pc, #56]	; (8015810 <ethernetif_init+0x18c>)
 80157d6:	f010 ffb5 	bl	8026744 <iprintf>
 80157da:	e759      	b.n	8015690 <ethernetif_init+0xc>
 80157dc:	2000668c 	.word	0x2000668c
 80157e0:	1ff0f000 	.word	0x1ff0f000
 80157e4:	080239f1 	.word	0x080239f1
 80157e8:	40028000 	.word	0x40028000
 80157ec:	08015389 	.word	0x08015389
 80157f0:	20004ebc 	.word	0x20004ebc
 80157f4:	2000366c 	.word	0x2000366c
 80157f8:	200036ec 	.word	0x200036ec
 80157fc:	200035ec 	.word	0x200035ec
 8015800:	0802a9bc 	.word	0x0802a9bc
 8015804:	200066d4 	.word	0x200066d4
 8015808:	0802e6dc 	.word	0x0802e6dc
 801580c:	0802e6f8 	.word	0x0802e6f8
 8015810:	0802b43c 	.word	0x0802b43c

08015814 <sys_now>:
 8015814:	f7f3 bdaa 	b.w	800936c <HAL_GetTick>

08015818 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8015818:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 801581a:	2300      	movs	r3, #0
{
 801581c:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801581e:	4d0f      	ldr	r5, [pc, #60]	; (801585c <ethernetif_set_link+0x44>)
{
 8015820:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8015822:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8015824:	e003      	b.n	801582e <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8015826:	b1b3      	cbz	r3, 8015856 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8015828:	20c8      	movs	r0, #200	; 0xc8
 801582a:	f000 ff07 	bl	801663c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801582e:	aa01      	add	r2, sp, #4
 8015830:	2101      	movs	r1, #1
 8015832:	4628      	mov	r0, r5
 8015834:	f7f5 ffde 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015838:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 801583a:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801583c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8015840:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015844:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8015846:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015848:	d4ed      	bmi.n	8015826 <ethernetif_set_link+0xe>
 801584a:	b113      	cbz	r3, 8015852 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 801584c:	f006 fb46 	bl	801bedc <netif_set_link_up>
 8015850:	e7ea      	b.n	8015828 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8015852:	0753      	lsls	r3, r2, #29
 8015854:	d5e8      	bpl.n	8015828 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8015856:	f006 fb67 	bl	801bf28 <netif_set_link_down>
 801585a:	e7e5      	b.n	8015828 <ethernetif_set_link+0x10>
 801585c:	2000668c 	.word	0x2000668c

08015860 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop

08015864 <ethernetif_update_config>:
{
 8015864:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8015866:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 801586a:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 801586c:	2100      	movs	r1, #0
{
 801586e:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8015870:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8015872:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8015874:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8015876:	d538      	bpl.n	80158ea <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015878:	4c32      	ldr	r4, [pc, #200]	; (8015944 <ethernetif_update_config+0xe0>)
 801587a:	6863      	ldr	r3, [r4, #4]
 801587c:	b9e3      	cbnz	r3, 80158b8 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801587e:	68a3      	ldr	r3, [r4, #8]
 8015880:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8015884:	d140      	bne.n	8015908 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8015886:	68e2      	ldr	r2, [r4, #12]
 8015888:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 801588c:	d135      	bne.n	80158fa <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801588e:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015890:	08d2      	lsrs	r2, r2, #3
 8015892:	2100      	movs	r1, #0
 8015894:	482b      	ldr	r0, [pc, #172]	; (8015944 <ethernetif_update_config+0xe0>)
 8015896:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 801589a:	b292      	uxth	r2, r2
 801589c:	f7f5 fff4 	bl	800b888 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80158a0:	2100      	movs	r1, #0
 80158a2:	4828      	ldr	r0, [pc, #160]	; (8015944 <ethernetif_update_config+0xe0>)
 80158a4:	f7f6 fa28 	bl	800bcf8 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 80158a8:	4826      	ldr	r0, [pc, #152]	; (8015944 <ethernetif_update_config+0xe0>)
 80158aa:	f7f6 f98b 	bl	800bbc4 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 80158ae:	4628      	mov	r0, r5
 80158b0:	f7ff ffd6 	bl	8015860 <ethernetif_notify_conn_changed>
}
 80158b4:	b003      	add	sp, #12
 80158b6:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80158b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80158bc:	4620      	mov	r0, r4
 80158be:	f7f5 ffe3 	bl	800b888 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80158c2:	f7f3 fd53 	bl	800936c <HAL_GetTick>
 80158c6:	9000      	str	r0, [sp, #0]
 80158c8:	e002      	b.n	80158d0 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80158ca:	9b01      	ldr	r3, [sp, #4]
 80158cc:	069a      	lsls	r2, r3, #26
 80158ce:	d425      	bmi.n	801591c <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80158d0:	aa01      	add	r2, sp, #4
 80158d2:	2101      	movs	r1, #1
 80158d4:	4620      	mov	r0, r4
 80158d6:	f7f5 ff8d 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80158da:	f7f3 fd47 	bl	800936c <HAL_GetTick>
 80158de:	9b00      	ldr	r3, [sp, #0]
 80158e0:	1ac3      	subs	r3, r0, r3
 80158e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80158e6:	d9f0      	bls.n	80158ca <ethernetif_update_config+0x66>
 80158e8:	e7c9      	b.n	801587e <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 80158ea:	4816      	ldr	r0, [pc, #88]	; (8015944 <ethernetif_update_config+0xe0>)
 80158ec:	f7f6 f9b6 	bl	800bc5c <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80158f0:	4628      	mov	r0, r5
 80158f2:	f7ff ffb5 	bl	8015860 <ethernetif_notify_conn_changed>
}
 80158f6:	b003      	add	sp, #12
 80158f8:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80158fa:	f240 21e3 	movw	r1, #739	; 0x2e3
 80158fe:	4812      	ldr	r0, [pc, #72]	; (8015948 <ethernetif_update_config+0xe4>)
 8015900:	f7ef fff0 	bl	80058e4 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015904:	68e2      	ldr	r2, [r4, #12]
 8015906:	e7c2      	b.n	801588e <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8015908:	f240 21e2 	movw	r1, #738	; 0x2e2
 801590c:	480e      	ldr	r0, [pc, #56]	; (8015948 <ethernetif_update_config+0xe4>)
 801590e:	f7ef ffe9 	bl	80058e4 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8015912:	68e2      	ldr	r2, [r4, #12]
 8015914:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8015918:	d0b9      	beq.n	801588e <ethernetif_update_config+0x2a>
 801591a:	e7ee      	b.n	80158fa <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 801591c:	aa01      	add	r2, sp, #4
 801591e:	2110      	movs	r1, #16
 8015920:	4808      	ldr	r0, [pc, #32]	; (8015944 <ethernetif_update_config+0xe0>)
 8015922:	f7f5 ff67 	bl	800b7f4 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8015926:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8015928:	f013 0204 	ands.w	r2, r3, #4
 801592c:	bf18      	it	ne
 801592e:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8015932:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8015934:	bf4c      	ite	mi
 8015936:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8015938:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 801593c:	60e2      	str	r2, [r4, #12]
 801593e:	60a3      	str	r3, [r4, #8]
 8015940:	e7ae      	b.n	80158a0 <ethernetif_update_config+0x3c>
 8015942:	bf00      	nop
 8015944:	2000668c 	.word	0x2000668c
 8015948:	0802e6dc 	.word	0x0802e6dc

0801594c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801594c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015950:	b183      	cbz	r3, 8015974 <USBD_CDC_EP0_RxReady+0x28>
{
 8015952:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015954:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015958:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 801595c:	28ff      	cmp	r0, #255	; 0xff
 801595e:	d007      	beq.n	8015970 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015960:	689b      	ldr	r3, [r3, #8]
 8015962:	4621      	mov	r1, r4
 8015964:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8015968:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 801596a:	23ff      	movs	r3, #255	; 0xff
 801596c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8015970:	2000      	movs	r0, #0
 8015972:	bd10      	pop	{r4, pc}
 8015974:	2000      	movs	r0, #0
 8015976:	4770      	bx	lr

08015978 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015978:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801597a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 801597c:	4801      	ldr	r0, [pc, #4]	; (8015984 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801597e:	801a      	strh	r2, [r3, #0]
}
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	2000036c 	.word	0x2000036c

08015988 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015988:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801598a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 801598c:	4801      	ldr	r0, [pc, #4]	; (8015994 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801598e:	801a      	strh	r2, [r3, #0]
}
 8015990:	4770      	bx	lr
 8015992:	bf00      	nop
 8015994:	200003b0 	.word	0x200003b0

08015998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015998:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801599a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 801599c:	4801      	ldr	r0, [pc, #4]	; (80159a4 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801599e:	801a      	strh	r2, [r3, #0]
}
 80159a0:	4770      	bx	lr
 80159a2:	bf00      	nop
 80159a4:	20000400 	.word	0x20000400

080159a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80159a8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80159aa:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 80159ac:	4801      	ldr	r0, [pc, #4]	; (80159b4 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80159ae:	801a      	strh	r2, [r3, #0]
}
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	200003f4 	.word	0x200003f4

080159b8 <USBD_CDC_DataOut>:
{
 80159b8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80159ba:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80159be:	b17d      	cbz	r5, 80159e0 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159c0:	4604      	mov	r4, r0
 80159c2:	f00f fc65 	bl	8025290 <USBD_LL_GetRxDataSize>
 80159c6:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159c8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80159cc:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80159d0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80159d4:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159d6:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159da:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80159dc:	2000      	movs	r0, #0
}
 80159de:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80159e0:	2003      	movs	r0, #3
}
 80159e2:	bd38      	pop	{r3, r4, r5, pc}

080159e4 <USBD_CDC_DataIn>:
{
 80159e4:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 80159e6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 80159ea:	b34d      	cbz	r5, 8015a40 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80159ec:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80159f0:	4686      	mov	lr, r0
 80159f2:	460a      	mov	r2, r1
 80159f4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80159f8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80159fc:	b15b      	cbz	r3, 8015a16 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80159fe:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8015a02:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8015a06:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8015a0a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8015a0c:	fbb3 f6f4 	udiv	r6, r3, r4
 8015a10:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015a14:	b164      	cbz	r4, 8015a30 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a16:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8015a1a:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a1c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8015a20:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8015a24:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8015a26:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a2a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8015a2c:	4620      	mov	r0, r4
}
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a30:	4623      	mov	r3, r4
 8015a32:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8015a34:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a38:	f00f fc0e 	bl	8025258 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8015a3c:	4620      	mov	r0, r4
}
 8015a3e:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8015a40:	2003      	movs	r0, #3
}
 8015a42:	bd70      	pop	{r4, r5, r6, pc}

08015a44 <USBD_CDC_Setup>:
{
 8015a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a46:	f891 c000 	ldrb.w	ip, [r1]
{
 8015a4a:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8015a4c:	2300      	movs	r3, #0
{
 8015a4e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a50:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8015a54:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015a56:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8015a5a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8015a5e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a62:	d01c      	beq.n	8015a9e <USBD_CDC_Setup+0x5a>
 8015a64:	2e20      	cmp	r6, #32
 8015a66:	d112      	bne.n	8015a8e <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8015a68:	88ca      	ldrh	r2, [r1, #6]
 8015a6a:	2a00      	cmp	r2, #0
 8015a6c:	d036      	beq.n	8015adc <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8015a6e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8015a72:	d055      	beq.n	8015b20 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8015a74:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015a76:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015a7a:	4639      	mov	r1, r7
 8015a7c:	7860      	ldrb	r0, [r4, #1]
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015a82:	88e2      	ldrh	r2, [r4, #6]
 8015a84:	4639      	mov	r1, r7
 8015a86:	4628      	mov	r0, r5
 8015a88:	f000 fd2c 	bl	80164e4 <USBD_CtlSendData>
 8015a8c:	e004      	b.n	8015a98 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8015a8e:	4621      	mov	r1, r4
 8015a90:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8015a92:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8015a94:	f000 fcf0 	bl	8016478 <USBD_CtlError>
}
 8015a98:	4630      	mov	r0, r6
 8015a9a:	b003      	add	sp, #12
 8015a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8015a9e:	784b      	ldrb	r3, [r1, #1]
 8015aa0:	2b0b      	cmp	r3, #11
 8015aa2:	d8f4      	bhi.n	8015a8e <USBD_CDC_Setup+0x4a>
 8015aa4:	a201      	add	r2, pc, #4	; (adr r2, 8015aac <USBD_CDC_Setup+0x68>)
 8015aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aaa:	bf00      	nop
 8015aac:	08015aef 	.word	0x08015aef
 8015ab0:	08015a99 	.word	0x08015a99
 8015ab4:	08015a8f 	.word	0x08015a8f
 8015ab8:	08015a8f 	.word	0x08015a8f
 8015abc:	08015a8f 	.word	0x08015a8f
 8015ac0:	08015a8f 	.word	0x08015a8f
 8015ac4:	08015a8f 	.word	0x08015a8f
 8015ac8:	08015a8f 	.word	0x08015a8f
 8015acc:	08015a8f 	.word	0x08015a8f
 8015ad0:	08015a8f 	.word	0x08015a8f
 8015ad4:	08015b0d 	.word	0x08015b0d
 8015ad8:	08015b03 	.word	0x08015b03
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015adc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8015ae0:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015ae2:	7848      	ldrb	r0, [r1, #1]
 8015ae4:	689b      	ldr	r3, [r3, #8]
 8015ae6:	4798      	blx	r3
}
 8015ae8:	4630      	mov	r0, r6
 8015aea:	b003      	add	sp, #12
 8015aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aee:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015af2:	2a03      	cmp	r2, #3
 8015af4:	d01e      	beq.n	8015b34 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 8015af6:	4621      	mov	r1, r4
 8015af8:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8015afa:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8015afc:	f000 fcbc 	bl	8016478 <USBD_CtlError>
        ret = USBD_FAIL;
 8015b00:	e7ca      	b.n	8015a98 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015b06:	2b03      	cmp	r3, #3
 8015b08:	d0c6      	beq.n	8015a98 <USBD_CDC_Setup+0x54>
 8015b0a:	e7f4      	b.n	8015af6 <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015b10:	2b03      	cmp	r3, #3
 8015b12:	d1f0      	bne.n	8015af6 <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b14:	2201      	movs	r2, #1
 8015b16:	f10d 0105 	add.w	r1, sp, #5
 8015b1a:	f000 fce3 	bl	80164e4 <USBD_CtlSendData>
 8015b1e:	e7bb      	b.n	8015a98 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8015b20:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b22:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8015b24:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8015b28:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015b2c:	4639      	mov	r1, r7
 8015b2e:	f000 fcf1 	bl	8016514 <USBD_CtlPrepareRx>
 8015b32:	e7b1      	b.n	8015a98 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b34:	2202      	movs	r2, #2
 8015b36:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8015b3a:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b3c:	f000 fcd2 	bl	80164e4 <USBD_CtlSendData>
 8015b40:	e7aa      	b.n	8015a98 <USBD_CDC_Setup+0x54>
 8015b42:	bf00      	nop

08015b44 <USBD_CDC_DeInit>:
{
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015b48:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015b4a:	2181      	movs	r1, #129	; 0x81
 8015b4c:	f00f fb38 	bl	80251c0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015b50:	2101      	movs	r1, #1
 8015b52:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015b54:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015b56:	f00f fb33 	bl	80251c0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015b5a:	2182      	movs	r1, #130	; 0x82
 8015b5c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015b5e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015b62:	f00f fb2d 	bl	80251c0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8015b66:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015b6a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8015b6c:	b14b      	cbz	r3, 8015b82 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015b6e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8015b76:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8015b7a:	f00f fe05 	bl	8025788 <free>
    pdev->pClassData = NULL;
 8015b7e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8015b82:	2000      	movs	r0, #0
 8015b84:	bd38      	pop	{r3, r4, r5, pc}
 8015b86:	bf00      	nop

08015b88 <USBD_CDC_Init>:
{
 8015b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b8c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015b8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015b92:	f00f fdf1 	bl	8025778 <malloc>
  if (hcdc == NULL)
 8015b96:	4605      	mov	r5, r0
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	d04c      	beq.n	8015c36 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b9c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8015b9e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ba2:	b393      	cbz	r3, 8015c0a <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015ba4:	2340      	movs	r3, #64	; 0x40
 8015ba6:	2202      	movs	r2, #2
 8015ba8:	2181      	movs	r1, #129	; 0x81
 8015baa:	4620      	mov	r0, r4
 8015bac:	f00f faf6 	bl	802519c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015bb0:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015bb2:	2340      	movs	r3, #64	; 0x40
 8015bb4:	4631      	mov	r1, r6
 8015bb6:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015bb8:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f00f faee 	bl	802519c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015bc0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bc2:	2203      	movs	r2, #3
 8015bc4:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015bc6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bca:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015bcc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bd0:	2308      	movs	r3, #8
 8015bd2:	f00f fae3 	bl	802519c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015bd6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015bda:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8015bde:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015be0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015be8:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8015bea:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8015bee:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bf2:	b9ae      	cbnz	r6, 8015c20 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bf8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015bfc:	4641      	mov	r1, r8
 8015bfe:	4620      	mov	r0, r4
 8015c00:	f00f fb38 	bl	8025274 <USBD_LL_PrepareReceive>
}
 8015c04:	4630      	mov	r0, r6
 8015c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c0e:	2202      	movs	r2, #2
 8015c10:	2181      	movs	r1, #129	; 0x81
 8015c12:	4620      	mov	r0, r4
 8015c14:	f00f fac2 	bl	802519c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015c18:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c1e:	e7c9      	b.n	8015bb4 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8015c20:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c22:	2340      	movs	r3, #64	; 0x40
 8015c24:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015c28:	4641      	mov	r1, r8
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f00f fb22 	bl	8025274 <USBD_LL_PrepareReceive>
}
 8015c30:	4630      	mov	r0, r6
 8015c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8015c36:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8015c38:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015c3c:	e7e2      	b.n	8015c04 <USBD_CDC_Init+0x7c>
 8015c3e:	bf00      	nop

08015c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015c40:	4603      	mov	r3, r0
  if (fops == NULL)
 8015c42:	b119      	cbz	r1, 8015c4c <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8015c44:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8015c46:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8015c4a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8015c4c:	2003      	movs	r0, #3
}
 8015c4e:	4770      	bx	lr

08015c50 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c50:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8015c52:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8015c58:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015c5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop

08015c64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c64:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8015c66:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8015c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c6c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8015c70:	4770      	bx	lr
 8015c72:	bf00      	nop

08015c74 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015c74:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8015c78:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8015c7a:	b19a      	cbz	r2, 8015ca4 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c7c:	7c04      	ldrb	r4, [r0, #16]
 8015c7e:	b144      	cbz	r4, 8015c92 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c80:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c82:	2340      	movs	r3, #64	; 0x40
 8015c84:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015c88:	2101      	movs	r1, #1
 8015c8a:	f00f faf3 	bl	8025274 <USBD_LL_PrepareReceive>
}
 8015c8e:	4620      	mov	r0, r4
 8015c90:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c96:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015c9a:	2101      	movs	r1, #1
 8015c9c:	f00f faea 	bl	8025274 <USBD_LL_PrepareReceive>
}
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8015ca4:	2403      	movs	r4, #3
}
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	bd10      	pop	{r4, pc}
 8015caa:	bf00      	nop

08015cac <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015cac:	b1a0      	cbz	r0, 8015cd8 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015cae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015cb2:	b113      	cbz	r3, 8015cba <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015cba:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8015cbe:	b113      	cbz	r3, 8015cc6 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015cc6:	b109      	cbz	r1, 8015ccc <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8015cc8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ccc:	2301      	movs	r3, #1
  pdev->id = id;
 8015cce:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015cd0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015cd4:	f00f ba22 	b.w	802511c <USBD_LL_Init>

  return ret;
}
 8015cd8:	2003      	movs	r0, #3
 8015cda:	4770      	bx	lr

08015cdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015cdc:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8015cde:	2400      	movs	r4, #0
{
 8015ce0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8015ce2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8015ce6:	b159      	cbz	r1, 8015d00 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015ce8:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015cea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015cec:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8015cf0:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015cf4:	4798      	blx	r3
 8015cf6:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	b003      	add	sp, #12
 8015cfe:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8015d00:	2403      	movs	r4, #3
}
 8015d02:	4620      	mov	r0, r4
 8015d04:	b003      	add	sp, #12
 8015d06:	bd30      	pop	{r4, r5, pc}

08015d08 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015d08:	f00f ba3a 	b.w	8025180 <USBD_LL_Start>

08015d0c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8015d0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d10:	b10b      	cbz	r3, 8015d16 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	4718      	bx	r3
  }

  return ret;
}
 8015d16:	2003      	movs	r0, #3
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop

08015d1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015d1c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015d1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d22:	b10b      	cbz	r3, 8015d28 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	4798      	blx	r3
  }

  return USBD_OK;
}
 8015d28:	2000      	movs	r0, #0
 8015d2a:	bd08      	pop	{r3, pc}

08015d2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015d2c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015d2e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8015d32:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015d34:	4628      	mov	r0, r5
 8015d36:	f000 fb93 	bl	8016460 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015d3a:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8015d3c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8015d40:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8015d44:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8015d48:	f001 031f 	and.w	r3, r1, #31
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	d009      	beq.n	8015d64 <USBD_LL_SetupStage+0x38>
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	d013      	beq.n	8015d7c <USBD_LL_SetupStage+0x50>
 8015d54:	b163      	cbz	r3, 8015d70 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015d56:	4620      	mov	r0, r4
 8015d58:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8015d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015d60:	f00f ba3c 	b.w	80251dc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d64:	4629      	mov	r1, r5
 8015d66:	4620      	mov	r0, r4
}
 8015d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d6c:	f000 ba9e 	b.w	80162ac <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d70:	4629      	mov	r1, r5
 8015d72:	4620      	mov	r0, r4
}
 8015d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d78:	f000 b8fa 	b.w	8015f70 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	4620      	mov	r0, r4
}
 8015d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d84:	f000 baca 	b.w	801631c <USBD_StdEPReq>

08015d88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015d88:	b570      	push	{r4, r5, r6, lr}
 8015d8a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015d8c:	b939      	cbnz	r1, 8015d9e <USBD_LL_DataOutStage+0x16>
 8015d8e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015d90:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8015d94:	460c      	mov	r4, r1
 8015d96:	2a03      	cmp	r2, #3
 8015d98:	d00e      	beq.n	8015db8 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015d9a:	2000      	movs	r0, #0
}
 8015d9c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8015d9e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015da2:	699b      	ldr	r3, [r3, #24]
 8015da4:	b133      	cbz	r3, 8015db4 <USBD_LL_DataOutStage+0x2c>
 8015da6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015daa:	2a03      	cmp	r2, #3
 8015dac:	d102      	bne.n	8015db4 <USBD_LL_DataOutStage+0x2c>
}
 8015dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015db2:	4718      	bx	r3
    return USBD_FAIL;
 8015db4:	2003      	movs	r0, #3
}
 8015db6:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015db8:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8015dbc:	4291      	cmp	r1, r2
 8015dbe:	d80d      	bhi.n	8015ddc <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015dc0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015dc4:	691b      	ldr	r3, [r3, #16]
 8015dc6:	b123      	cbz	r3, 8015dd2 <USBD_LL_DataOutStage+0x4a>
 8015dc8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015dcc:	2a03      	cmp	r2, #3
 8015dce:	d100      	bne.n	8015dd2 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8015dd0:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	f000 fbb6 	bl	8016544 <USBD_CtlSendStatus>
  return USBD_OK;
 8015dd8:	2000      	movs	r0, #0
 8015dda:	e7df      	b.n	8015d9c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8015ddc:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015dde:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8015de0:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015de4:	bf28      	it	cs
 8015de6:	460a      	movcs	r2, r1
 8015de8:	4619      	mov	r1, r3
 8015dea:	f000 fba1 	bl	8016530 <USBD_CtlContinueRx>
  return USBD_OK;
 8015dee:	4620      	mov	r0, r4
}
 8015df0:	bd70      	pop	{r4, r5, r6, pc}
 8015df2:	bf00      	nop

08015df4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015df4:	b570      	push	{r4, r5, r6, lr}
 8015df6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015df8:	b949      	cbnz	r1, 8015e0e <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015dfa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	d012      	beq.n	8015e28 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015e02:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	d027      	beq.n	8015e5a <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015e0a:	2000      	movs	r0, #0
}
 8015e0c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e0e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015e12:	695b      	ldr	r3, [r3, #20]
 8015e14:	b133      	cbz	r3, 8015e24 <USBD_LL_DataInStage+0x30>
 8015e16:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015e1a:	2a03      	cmp	r2, #3
 8015e1c:	d102      	bne.n	8015e24 <USBD_LL_DataInStage+0x30>
}
 8015e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015e22:	4718      	bx	r3
    return USBD_FAIL;
 8015e24:	2003      	movs	r0, #3
}
 8015e26:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015e28:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8015e2c:	460d      	mov	r5, r1
 8015e2e:	42b3      	cmp	r3, r6
 8015e30:	d818      	bhi.n	8015e64 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8015e32:	d027      	beq.n	8015e84 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015e34:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015e38:	68db      	ldr	r3, [r3, #12]
 8015e3a:	b11b      	cbz	r3, 8015e44 <USBD_LL_DataInStage+0x50>
 8015e3c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8015e40:	2a03      	cmp	r2, #3
 8015e42:	d01c      	beq.n	8015e7e <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e44:	2180      	movs	r1, #128	; 0x80
 8015e46:	4620      	mov	r0, r4
 8015e48:	f00f f9c8 	bl	80251dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f000 fb85 	bl	801655c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8015e52:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d1d7      	bne.n	8015e0a <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8015e5a:	2300      	movs	r3, #0
  return USBD_OK;
 8015e5c:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8015e5e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8015e62:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8015e64:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e66:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8015e68:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	f000 fb48 	bl	8016500 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e70:	462b      	mov	r3, r5
 8015e72:	462a      	mov	r2, r5
 8015e74:	4629      	mov	r1, r5
 8015e76:	4620      	mov	r0, r4
 8015e78:	f00f f9fc 	bl	8025274 <USBD_LL_PrepareReceive>
 8015e7c:	e7c1      	b.n	8015e02 <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8015e7e:	4620      	mov	r0, r4
 8015e80:	4798      	blx	r3
 8015e82:	e7df      	b.n	8015e44 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8015e84:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d8d4      	bhi.n	8015e34 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8015e8a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d2d0      	bcs.n	8015e34 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015e92:	460a      	mov	r2, r1
 8015e94:	f000 fb34 	bl	8016500 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e98:	462b      	mov	r3, r5
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8015ea0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ea4:	f00f f9e6 	bl	8025274 <USBD_LL_PrepareReceive>
 8015ea8:	e7ab      	b.n	8015e02 <USBD_LL_DataInStage+0xe>
 8015eaa:	bf00      	nop

08015eac <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8015eac:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015eae:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8015eb0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8015eb4:	b570      	push	{r4, r5, r6, lr}
 8015eb6:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015eb8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ebc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8015ec0:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ec2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8015ec6:	b11b      	cbz	r3, 8015ed0 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015ec8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ed0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ed2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ed4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	462b      	mov	r3, r5
 8015eda:	4611      	mov	r1, r2
 8015edc:	f00f f95e 	bl	802519c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ee0:	462b      	mov	r3, r5
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	2180      	movs	r1, #128	; 0x80
 8015ee6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ee8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015eec:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ef0:	f00f f954 	bl	802519c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8015ef4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015ef6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ef8:	6225      	str	r5, [r4, #32]
}
 8015efa:	bd70      	pop	{r4, r5, r6, pc}

08015efc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015efc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8015efe:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8015f00:	7419      	strb	r1, [r3, #16]
}
 8015f02:	4770      	bx	lr

08015f04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015f04:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f06:	2104      	movs	r1, #4

  return USBD_OK;
}
 8015f08:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8015f0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f0e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8015f12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8015f16:	4770      	bx	lr

08015f18 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015f1c:	2b04      	cmp	r3, #4
 8015f1e:	d103      	bne.n	8015f28 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f20:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8015f24:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8015f28:	2000      	movs	r0, #0
 8015f2a:	4770      	bx	lr

08015f2c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f2c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015f30:	2a03      	cmp	r2, #3
 8015f32:	d001      	beq.n	8015f38 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8015f34:	2000      	movs	r0, #0
 8015f36:	4770      	bx	lr
{
 8015f38:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8015f3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015f3e:	69db      	ldr	r3, [r3, #28]
 8015f40:	b103      	cbz	r3, 8015f44 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8015f42:	4798      	blx	r3
}
 8015f44:	2000      	movs	r0, #0
 8015f46:	bd08      	pop	{r3, pc}

08015f48 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8015f48:	2000      	movs	r0, #0
 8015f4a:	4770      	bx	lr

08015f4c <USBD_LL_IsoOUTIncomplete>:
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	4770      	bx	lr

08015f50 <USBD_LL_DevConnected>:
 8015f50:	2000      	movs	r0, #0
 8015f52:	4770      	bx	lr

08015f54 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f54:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8015f56:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f5a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8015f5e:	b12a      	cbz	r2, 8015f6c <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f60:	6852      	ldr	r2, [r2, #4]
 8015f62:	7901      	ldrb	r1, [r0, #4]
{
 8015f64:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f66:	4790      	blx	r2
  }

  return USBD_OK;
}
 8015f68:	2000      	movs	r0, #0
 8015f6a:	bd08      	pop	{r3, pc}
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	4770      	bx	lr

08015f70 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f70:	b570      	push	{r4, r5, r6, lr}
 8015f72:	780c      	ldrb	r4, [r1, #0]
 8015f74:	b082      	sub	sp, #8
 8015f76:	460e      	mov	r6, r1
 8015f78:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f7a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8015f7e:	2c20      	cmp	r4, #32
 8015f80:	d00e      	beq.n	8015fa0 <USBD_StdDevReq+0x30>
 8015f82:	2c40      	cmp	r4, #64	; 0x40
 8015f84:	d00c      	beq.n	8015fa0 <USBD_StdDevReq+0x30>
 8015f86:	b1a4      	cbz	r4, 8015fb2 <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f88:	2180      	movs	r1, #128	; 0x80
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	f00f f926 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f90:	2100      	movs	r1, #0
 8015f92:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015f94:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f96:	f00f f921 	bl	80251dc <USBD_LL_StallEP>
}
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	b002      	add	sp, #8
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015fa0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8015fa4:	4631      	mov	r1, r6
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	689b      	ldr	r3, [r3, #8]
}
 8015faa:	b002      	add	sp, #8
 8015fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015fb0:	4718      	bx	r3
    switch (req->bRequest)
 8015fb2:	784b      	ldrb	r3, [r1, #1]
 8015fb4:	2b09      	cmp	r3, #9
 8015fb6:	d8e7      	bhi.n	8015f88 <USBD_StdDevReq+0x18>
 8015fb8:	a201      	add	r2, pc, #4	; (adr r2, 8015fc0 <USBD_StdDevReq+0x50>)
 8015fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fbe:	bf00      	nop
 8015fc0:	0801601f 	.word	0x0801601f
 8015fc4:	0801604d 	.word	0x0801604d
 8015fc8:	08015f89 	.word	0x08015f89
 8015fcc:	0801606b 	.word	0x0801606b
 8015fd0:	08015f89 	.word	0x08015f89
 8015fd4:	08016073 	.word	0x08016073
 8015fd8:	080160ab 	.word	0x080160ab
 8015fdc:	08015f89 	.word	0x08015f89
 8015fe0:	080160cf 	.word	0x080160cf
 8015fe4:	08015fe9 	.word	0x08015fe9
  cfgidx = (uint8_t)(req->wValue);
 8015fe8:	7889      	ldrb	r1, [r1, #2]
 8015fea:	4eaa      	ldr	r6, [pc, #680]	; (8016294 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015fec:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8015fee:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ff0:	f200 8146 	bhi.w	8016280 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8015ff4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015ff8:	2b02      	cmp	r3, #2
 8015ffa:	f000 8130 	beq.w	801625e <USBD_StdDevReq+0x2ee>
 8015ffe:	2b03      	cmp	r3, #3
 8016000:	f000 810c 	beq.w	801621c <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016004:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8016006:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016008:	f00f f8e8 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801600c:	2100      	movs	r1, #0
 801600e:	4628      	mov	r0, r5
 8016010:	f00f f8e4 	bl	80251dc <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016014:	7831      	ldrb	r1, [r6, #0]
 8016016:	4628      	mov	r0, r5
 8016018:	f7ff fe80 	bl	8015d1c <USBD_ClrClassConfig>
    break;
 801601c:	e7bd      	b.n	8015f9a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801601e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8016022:	3a01      	subs	r2, #1
 8016024:	2a02      	cmp	r2, #2
 8016026:	d868      	bhi.n	80160fa <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8016028:	88ca      	ldrh	r2, [r1, #6]
 801602a:	2a02      	cmp	r2, #2
 801602c:	d165      	bne.n	80160fa <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801602e:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8016030:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016034:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8016036:	b10a      	cbz	r2, 801603c <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016038:	2203      	movs	r2, #3
 801603a:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801603c:	2202      	movs	r2, #2
 801603e:	f105 010c 	add.w	r1, r5, #12
 8016042:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8016044:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016046:	f000 fa4d 	bl	80164e4 <USBD_CtlSendData>
    break;
 801604a:	e7a6      	b.n	8015f9a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801604c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016050:	3b01      	subs	r3, #1
 8016052:	2b02      	cmp	r3, #2
 8016054:	d851      	bhi.n	80160fa <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016056:	884b      	ldrh	r3, [r1, #2]
 8016058:	2b01      	cmp	r3, #1
 801605a:	d19e      	bne.n	8015f9a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 801605c:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 801605e:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8016060:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016064:	f000 fa6e 	bl	8016544 <USBD_CtlSendStatus>
 8016068:	e797      	b.n	8015f9a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801606a:	884b      	ldrh	r3, [r1, #2]
 801606c:	2b01      	cmp	r3, #1
 801606e:	d194      	bne.n	8015f9a <USBD_StdDevReq+0x2a>
 8016070:	e7f5      	b.n	801605e <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016072:	888b      	ldrh	r3, [r1, #4]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d140      	bne.n	80160fa <USBD_StdDevReq+0x18a>
 8016078:	88cb      	ldrh	r3, [r1, #6]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d13d      	bne.n	80160fa <USBD_StdDevReq+0x18a>
 801607e:	884e      	ldrh	r6, [r1, #2]
 8016080:	2e7f      	cmp	r6, #127	; 0x7f
 8016082:	d83a      	bhi.n	80160fa <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016084:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016088:	2b03      	cmp	r3, #3
 801608a:	d036      	beq.n	80160fa <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801608c:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 801608e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016092:	f00f f8d3 	bl	802523c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016096:	4628      	mov	r0, r5
 8016098:	f000 fa54 	bl	8016544 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 801609c:	2e00      	cmp	r6, #0
 801609e:	f040 80da 	bne.w	8016256 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80160a2:	2301      	movs	r3, #1
 80160a4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80160a8:	e777      	b.n	8015f9a <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 80160aa:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 80160ac:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80160ae:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80160b2:	0a13      	lsrs	r3, r2, #8
 80160b4:	3b01      	subs	r3, #1
 80160b6:	2b0e      	cmp	r3, #14
 80160b8:	d81f      	bhi.n	80160fa <USBD_StdDevReq+0x18a>
 80160ba:	e8df f003 	tbb	[pc, r3]
 80160be:	6b77      	.short	0x6b77
 80160c0:	4f1e1e59 	.word	0x4f1e1e59
 80160c4:	1e1e1e43 	.word	0x1e1e1e43
 80160c8:	1e1e1e1e 	.word	0x1e1e1e1e
 80160cc:	29          	.byte	0x29
 80160cd:	00          	.byte	0x00
  if (req->wLength != 1U)
 80160ce:	88ca      	ldrh	r2, [r1, #6]
 80160d0:	2a01      	cmp	r2, #1
 80160d2:	d112      	bne.n	80160fa <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 80160d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80160d8:	2b02      	cmp	r3, #2
 80160da:	f200 8098 	bhi.w	801620e <USBD_StdDevReq+0x29e>
 80160de:	2b00      	cmp	r3, #0
 80160e0:	f43f af52 	beq.w	8015f88 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80160e4:	4601      	mov	r1, r0
 80160e6:	2300      	movs	r3, #0
 80160e8:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80160ec:	f000 f9fa 	bl	80164e4 <USBD_CtlSendData>
      break;
 80160f0:	e753      	b.n	8015f9a <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80160f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80160f6:	699b      	ldr	r3, [r3, #24]
 80160f8:	b97b      	cbnz	r3, 801611a <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80160fa:	2180      	movs	r1, #128	; 0x80
 80160fc:	4628      	mov	r0, r5
 80160fe:	f00f f86d 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016102:	2100      	movs	r1, #0
 8016104:	4628      	mov	r0, r5
 8016106:	f00f f869 	bl	80251dc <USBD_LL_StallEP>
}
 801610a:	4620      	mov	r0, r4
 801610c:	b002      	add	sp, #8
 801610e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016110:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016114:	69db      	ldr	r3, [r3, #28]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d0ef      	beq.n	80160fa <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801611a:	f10d 0106 	add.w	r1, sp, #6
 801611e:	7c28      	ldrb	r0, [r5, #16]
 8016120:	4798      	blx	r3
    if (req->wLength != 0U)
 8016122:	88f2      	ldrh	r2, [r6, #6]
 8016124:	2a00      	cmp	r2, #0
 8016126:	d06e      	beq.n	8016206 <USBD_StdDevReq+0x296>
      if (len != 0U)
 8016128:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d0e4      	beq.n	80160fa <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8016130:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8016132:	4601      	mov	r1, r0
 8016134:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8016136:	bf28      	it	cs
 8016138:	461a      	movcs	r2, r3
 801613a:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801613e:	f000 f9d1 	bl	80164e4 <USBD_CtlSendData>
 8016142:	e72a      	b.n	8015f9a <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016144:	7c03      	ldrb	r3, [r0, #16]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d1d7      	bne.n	80160fa <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801614a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801614e:	f10d 0006 	add.w	r0, sp, #6
 8016152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016154:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016156:	2307      	movs	r3, #7
 8016158:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801615a:	e7e2      	b.n	8016122 <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801615c:	7c03      	ldrb	r3, [r0, #16]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d1cb      	bne.n	80160fa <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016162:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8016166:	f10d 0006 	add.w	r0, sp, #6
 801616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801616c:	4798      	blx	r3
  if (err != 0U)
 801616e:	e7d8      	b.n	8016122 <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8016170:	b2d2      	uxtb	r2, r2
 8016172:	2a05      	cmp	r2, #5
 8016174:	d8c1      	bhi.n	80160fa <USBD_StdDevReq+0x18a>
 8016176:	a301      	add	r3, pc, #4	; (adr r3, 801617c <USBD_StdDevReq+0x20c>)
 8016178:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801617c:	080161ed 	.word	0x080161ed
 8016180:	080161e1 	.word	0x080161e1
 8016184:	080161d5 	.word	0x080161d5
 8016188:	080161c9 	.word	0x080161c9
 801618c:	080161bd 	.word	0x080161bd
 8016190:	080160f3 	.word	0x080160f3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016194:	7c03      	ldrb	r3, [r0, #16]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d17e      	bne.n	8016298 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801619a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801619e:	f10d 0006 	add.w	r0, sp, #6
 80161a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161a4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80161a6:	2302      	movs	r3, #2
 80161a8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80161aa:	e7ba      	b.n	8016122 <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80161ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161b0:	f10d 0106 	add.w	r1, sp, #6
 80161b4:	7c00      	ldrb	r0, [r0, #16]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	4798      	blx	r3
  if (err != 0U)
 80161ba:	e7b2      	b.n	8016122 <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80161bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161c0:	695b      	ldr	r3, [r3, #20]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d1a9      	bne.n	801611a <USBD_StdDevReq+0x1aa>
 80161c6:	e798      	b.n	80160fa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80161c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161cc:	691b      	ldr	r3, [r3, #16]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d1a3      	bne.n	801611a <USBD_StdDevReq+0x1aa>
 80161d2:	e792      	b.n	80160fa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80161d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d19d      	bne.n	801611a <USBD_StdDevReq+0x1aa>
 80161de:	e78c      	b.n	80160fa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80161e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161e4:	689b      	ldr	r3, [r3, #8]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d197      	bne.n	801611a <USBD_StdDevReq+0x1aa>
 80161ea:	e786      	b.n	80160fa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80161ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d191      	bne.n	801611a <USBD_StdDevReq+0x1aa>
 80161f6:	e780      	b.n	80160fa <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80161f8:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 80161fa:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80161fc:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80161fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016202:	f7ff fd8b 	bl	8015d1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016206:	4628      	mov	r0, r5
 8016208:	f000 f99c 	bl	8016544 <USBD_CtlSendStatus>
 801620c:	e6c5      	b.n	8015f9a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 801620e:	2b03      	cmp	r3, #3
 8016210:	f47f aeba 	bne.w	8015f88 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016214:	1d01      	adds	r1, r0, #4
 8016216:	f000 f965 	bl	80164e4 <USBD_CtlSendData>
      break;
 801621a:	e6be      	b.n	8015f9a <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 801621c:	2900      	cmp	r1, #0
 801621e:	d0eb      	beq.n	80161f8 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8016220:	6841      	ldr	r1, [r0, #4]
 8016222:	2901      	cmp	r1, #1
 8016224:	d0ef      	beq.n	8016206 <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016226:	b2c9      	uxtb	r1, r1
 8016228:	f7ff fd78 	bl	8015d1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801622c:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801622e:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8016230:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016232:	f7ff fd6b 	bl	8015d0c <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8016236:	4606      	mov	r6, r0
 8016238:	2800      	cmp	r0, #0
 801623a:	d0e4      	beq.n	8016206 <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801623c:	2180      	movs	r1, #128	; 0x80
 801623e:	4628      	mov	r0, r5
 8016240:	f00e ffcc 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016244:	2100      	movs	r1, #0
 8016246:	4628      	mov	r0, r5
 8016248:	4634      	mov	r4, r6
 801624a:	f00e ffc7 	bl	80251dc <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801624e:	7929      	ldrb	r1, [r5, #4]
 8016250:	4628      	mov	r0, r5
 8016252:	f7ff fd63 	bl	8015d1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016256:	2302      	movs	r3, #2
 8016258:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801625c:	e69d      	b.n	8015f9a <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 801625e:	2900      	cmp	r1, #0
 8016260:	d0d1      	beq.n	8016206 <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 8016262:	2101      	movs	r1, #1
 8016264:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016266:	f7ff fd51 	bl	8015d0c <USBD_SetClassConfig>
      if (ret != USBD_OK)
 801626a:	4604      	mov	r4, r0
 801626c:	2800      	cmp	r0, #0
 801626e:	f47f af44 	bne.w	80160fa <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 8016272:	4628      	mov	r0, r5
 8016274:	f000 f966 	bl	8016544 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016278:	2303      	movs	r3, #3
 801627a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801627e:	e68c      	b.n	8015f9a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016280:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8016282:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016284:	f00e ffaa 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016288:	2100      	movs	r1, #0
 801628a:	4628      	mov	r0, r5
 801628c:	f00e ffa6 	bl	80251dc <USBD_LL_StallEP>
}
 8016290:	e683      	b.n	8015f9a <USBD_StdDevReq+0x2a>
 8016292:	bf00      	nop
 8016294:	200066d8 	.word	0x200066d8
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016298:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801629c:	f10d 0006 	add.w	r0, sp, #6
 80162a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162a2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80162a4:	2302      	movs	r3, #2
 80162a6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80162a8:	e73b      	b.n	8016122 <USBD_StdDevReq+0x1b2>
 80162aa:	bf00      	nop

080162ac <USBD_StdItfReq>:
{
 80162ac:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162ae:	780b      	ldrb	r3, [r1, #0]
{
 80162b0:	460d      	mov	r5, r1
 80162b2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80162b8:	2a40      	cmp	r2, #64	; 0x40
 80162ba:	d00b      	beq.n	80162d4 <USBD_StdItfReq+0x28>
 80162bc:	065b      	lsls	r3, r3, #25
 80162be:	d509      	bpl.n	80162d4 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80162c0:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162c2:	2180      	movs	r1, #128	; 0x80
 80162c4:	f00e ff8a 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162c8:	4620      	mov	r0, r4
 80162ca:	4629      	mov	r1, r5
 80162cc:	f00e ff86 	bl	80251dc <USBD_LL_StallEP>
}
 80162d0:	4628      	mov	r0, r5
 80162d2:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80162d4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80162d8:	3b01      	subs	r3, #1
 80162da:	2b02      	cmp	r3, #2
 80162dc:	d812      	bhi.n	8016304 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80162de:	792b      	ldrb	r3, [r5, #4]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d80f      	bhi.n	8016304 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162e4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80162e8:	4629      	mov	r1, r5
 80162ea:	4620      	mov	r0, r4
 80162ec:	689b      	ldr	r3, [r3, #8]
 80162ee:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80162f0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162f2:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d1eb      	bne.n	80162d0 <USBD_StdItfReq+0x24>
 80162f8:	2800      	cmp	r0, #0
 80162fa:	d1e9      	bne.n	80162d0 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80162fc:	4620      	mov	r0, r4
 80162fe:	f000 f921 	bl	8016544 <USBD_CtlSendStatus>
 8016302:	e7e5      	b.n	80162d0 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016304:	2180      	movs	r1, #128	; 0x80
 8016306:	4620      	mov	r0, r4
 8016308:	f00e ff68 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801630c:	2100      	movs	r1, #0
 801630e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8016310:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8016312:	f00e ff63 	bl	80251dc <USBD_LL_StallEP>
}
 8016316:	4628      	mov	r0, r5
 8016318:	bd38      	pop	{r3, r4, r5, pc}
 801631a:	bf00      	nop

0801631c <USBD_StdEPReq>:
{
 801631c:	b570      	push	{r4, r5, r6, lr}
 801631e:	780b      	ldrb	r3, [r1, #0]
 8016320:	460d      	mov	r5, r1
 8016322:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016328:	2b20      	cmp	r3, #32
 801632a:	d00c      	beq.n	8016346 <USBD_StdEPReq+0x2a>
 801632c:	2b40      	cmp	r3, #64	; 0x40
 801632e:	d00a      	beq.n	8016346 <USBD_StdEPReq+0x2a>
 8016330:	b18b      	cbz	r3, 8016356 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016332:	2180      	movs	r1, #128	; 0x80
 8016334:	4620      	mov	r0, r4
 8016336:	f00e ff51 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801633a:	2100      	movs	r1, #0
 801633c:	4620      	mov	r0, r4
 801633e:	f00e ff4d 	bl	80251dc <USBD_LL_StallEP>
}
 8016342:	2000      	movs	r0, #0
 8016344:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016346:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801634a:	4629      	mov	r1, r5
 801634c:	4620      	mov	r0, r4
 801634e:	689b      	ldr	r3, [r3, #8]
}
 8016350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016354:	4718      	bx	r3
    switch (req->bRequest)
 8016356:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8016358:	888a      	ldrh	r2, [r1, #4]
 801635a:	2b01      	cmp	r3, #1
 801635c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801635e:	d036      	beq.n	80163ce <USBD_StdEPReq+0xb2>
 8016360:	2b03      	cmp	r3, #3
 8016362:	d023      	beq.n	80163ac <USBD_StdEPReq+0x90>
 8016364:	2b00      	cmp	r3, #0
 8016366:	d1e4      	bne.n	8016332 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8016368:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801636c:	2b02      	cmp	r3, #2
 801636e:	d04c      	beq.n	801640a <USBD_StdEPReq+0xee>
 8016370:	2b03      	cmp	r3, #3
 8016372:	d1de      	bne.n	8016332 <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016374:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8016378:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801637a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801637e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8016382:	d453      	bmi.n	801642c <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016384:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8016388:	2b00      	cmp	r3, #0
 801638a:	d0d2      	beq.n	8016332 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801638c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016390:	2514      	movs	r5, #20
 8016392:	fb05 0503 	mla	r5, r5, r3, r0
 8016396:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801639a:	2b00      	cmp	r3, #0
 801639c:	d152      	bne.n	8016444 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 801639e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163a0:	2202      	movs	r2, #2
 80163a2:	4629      	mov	r1, r5
 80163a4:	4620      	mov	r0, r4
 80163a6:	f000 f89d 	bl	80164e4 <USBD_CtlSendData>
          break;
 80163aa:	e7ca      	b.n	8016342 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80163ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	d021      	beq.n	80163f8 <USBD_StdEPReq+0xdc>
 80163b4:	2b03      	cmp	r3, #3
 80163b6:	d1bc      	bne.n	8016332 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80163b8:	886b      	ldrh	r3, [r5, #2]
 80163ba:	b923      	cbnz	r3, 80163c6 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80163bc:	064a      	lsls	r2, r1, #25
 80163be:	d002      	beq.n	80163c6 <USBD_StdEPReq+0xaa>
 80163c0:	88eb      	ldrh	r3, [r5, #6]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d049      	beq.n	801645a <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 80163c6:	4620      	mov	r0, r4
 80163c8:	f000 f8bc 	bl	8016544 <USBD_CtlSendStatus>
        break;
 80163cc:	e7b9      	b.n	8016342 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80163ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80163d2:	2b02      	cmp	r3, #2
 80163d4:	d010      	beq.n	80163f8 <USBD_StdEPReq+0xdc>
 80163d6:	2b03      	cmp	r3, #3
 80163d8:	d1ab      	bne.n	8016332 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80163da:	886b      	ldrh	r3, [r5, #2]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1b0      	bne.n	8016342 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80163e0:	064e      	lsls	r6, r1, #25
 80163e2:	d135      	bne.n	8016450 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 80163e4:	4620      	mov	r0, r4
 80163e6:	f000 f8ad 	bl	8016544 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80163ea:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80163ee:	4629      	mov	r1, r5
 80163f0:	4620      	mov	r0, r4
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	4798      	blx	r3
 80163f6:	e7a4      	b.n	8016342 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80163f8:	064b      	lsls	r3, r1, #25
 80163fa:	d09a      	beq.n	8016332 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80163fc:	f00e feee 	bl	80251dc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016400:	2180      	movs	r1, #128	; 0x80
 8016402:	4620      	mov	r0, r4
 8016404:	f00e feea 	bl	80251dc <USBD_LL_StallEP>
 8016408:	e79b      	b.n	8016342 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801640a:	0648      	lsls	r0, r1, #25
 801640c:	d191      	bne.n	8016332 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801640e:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8016410:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016414:	f04f 0202 	mov.w	r2, #2
 8016418:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801641a:	bf4c      	ite	mi
 801641c:	f104 0114 	addmi.w	r1, r4, #20
 8016420:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8016424:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016426:	f000 f85d 	bl	80164e4 <USBD_CtlSendData>
        break;
 801642a:	e78a      	b.n	8016342 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801642c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801642e:	2b00      	cmp	r3, #0
 8016430:	f43f af7f 	beq.w	8016332 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016434:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016438:	1c5d      	adds	r5, r3, #1
 801643a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801643e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8016442:	e7aa      	b.n	801639a <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016444:	4620      	mov	r0, r4
 8016446:	f00e fee5 	bl	8025214 <USBD_LL_IsStallEP>
 801644a:	b120      	cbz	r0, 8016456 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 801644c:	2301      	movs	r3, #1
 801644e:	e7a6      	b.n	801639e <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016450:	f00e fed2 	bl	80251f8 <USBD_LL_ClearStallEP>
 8016454:	e7c6      	b.n	80163e4 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8016456:	6028      	str	r0, [r5, #0]
 8016458:	e7a2      	b.n	80163a0 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801645a:	f00e febf 	bl	80251dc <USBD_LL_StallEP>
 801645e:	e7b2      	b.n	80163c6 <USBD_StdEPReq+0xaa>

08016460 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8016460:	780b      	ldrb	r3, [r1, #0]
 8016462:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8016464:	784b      	ldrb	r3, [r1, #1]
 8016466:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8016468:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 801646a:	8043      	strh	r3, [r0, #2]
 801646c:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 801646e:	8083      	strh	r3, [r0, #4]
 8016470:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8016472:	80c3      	strh	r3, [r0, #6]
}
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop

08016478 <USBD_CtlError>:
{
 8016478:	b510      	push	{r4, lr}
 801647a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801647c:	2180      	movs	r1, #128	; 0x80
 801647e:	f00e fead 	bl	80251dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016482:	2100      	movs	r1, #0
 8016484:	4620      	mov	r0, r4
}
 8016486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 801648a:	f00e bea7 	b.w	80251dc <USBD_LL_StallEP>
 801648e:	bf00      	nop

08016490 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8016490:	b318      	cbz	r0, 80164da <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8016492:	7803      	ldrb	r3, [r0, #0]
{
 8016494:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8016496:	b30b      	cbz	r3, 80164dc <USBD_GetString+0x4c>
 8016498:	4604      	mov	r4, r0
 801649a:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 801649e:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80164a2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	2d00      	cmp	r5, #0
 80164aa:	d1f8      	bne.n	801649e <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80164ac:	3301      	adds	r3, #1
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	b2dc      	uxtb	r4, r3
 80164b2:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80164b4:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80164b6:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80164b8:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80164ba:	7804      	ldrb	r4, [r0, #0]
 80164bc:	b15c      	cbz	r4, 80164d6 <USBD_GetString+0x46>
  idx++;
 80164be:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80164c0:	2500      	movs	r5, #0
    idx++;
 80164c2:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80164c4:	54cc      	strb	r4, [r1, r3]
    idx++;
 80164c6:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80164c8:	b2d2      	uxtb	r2, r2
    idx++;
 80164ca:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80164cc:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80164ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80164d2:	2c00      	cmp	r4, #0
 80164d4:	d1f5      	bne.n	80164c2 <USBD_GetString+0x32>
}
 80164d6:	bc30      	pop	{r4, r5}
 80164d8:	4770      	bx	lr
 80164da:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80164dc:	2402      	movs	r4, #2
 80164de:	4623      	mov	r3, r4
 80164e0:	e7e7      	b.n	80164b2 <USBD_GetString+0x22>
 80164e2:	bf00      	nop

080164e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80164e4:	b510      	push	{r4, lr}
 80164e6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80164e8:	2402      	movs	r4, #2
{
 80164ea:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164ec:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80164ee:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80164f2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164f6:	f00e feaf 	bl	8025258 <USBD_LL_Transmit>

  return USBD_OK;
}
 80164fa:	2000      	movs	r0, #0
 80164fc:	bd10      	pop	{r4, pc}
 80164fe:	bf00      	nop

08016500 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016500:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016502:	2100      	movs	r1, #0
{
 8016504:	b508      	push	{r3, lr}
 8016506:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016508:	4662      	mov	r2, ip
 801650a:	f00e fea5 	bl	8025258 <USBD_LL_Transmit>

  return USBD_OK;
}
 801650e:	2000      	movs	r0, #0
 8016510:	bd08      	pop	{r3, pc}
 8016512:	bf00      	nop

08016514 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016514:	b510      	push	{r4, lr}
 8016516:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016518:	2403      	movs	r4, #3
{
 801651a:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801651c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801651e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8016522:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016526:	f00e fea5 	bl	8025274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801652a:	2000      	movs	r0, #0
 801652c:	bd10      	pop	{r4, pc}
 801652e:	bf00      	nop

08016530 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016530:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016532:	2100      	movs	r1, #0
{
 8016534:	b508      	push	{r3, lr}
 8016536:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016538:	4662      	mov	r2, ip
 801653a:	f00e fe9b 	bl	8025274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801653e:	2000      	movs	r0, #0
 8016540:	bd08      	pop	{r3, pc}
 8016542:	bf00      	nop

08016544 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016544:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016546:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016548:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801654a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801654e:	461a      	mov	r2, r3
 8016550:	4619      	mov	r1, r3
 8016552:	f00e fe81 	bl	8025258 <USBD_LL_Transmit>

  return USBD_OK;
}
 8016556:	2000      	movs	r0, #0
 8016558:	bd08      	pop	{r3, pc}
 801655a:	bf00      	nop

0801655c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801655c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801655e:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016560:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016562:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016566:	461a      	mov	r2, r3
 8016568:	4619      	mov	r1, r3
 801656a:	f00e fe83 	bl	8025274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801656e:	2000      	movs	r0, #0
 8016570:	bd08      	pop	{r3, pc}
 8016572:	bf00      	nop

08016574 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8016574:	4b10      	ldr	r3, [pc, #64]	; (80165b8 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016576:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8016578:	7a5c      	ldrb	r4, [r3, #9]
 801657a:	b9cc      	cbnz	r4, 80165b0 <FATFS_LinkDriver+0x3c>
 801657c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 801657e:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8016582:	7a5c      	ldrb	r4, [r3, #9]
 8016584:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8016586:	7a5c      	ldrb	r4, [r3, #9]
 8016588:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801658c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 801658e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8016590:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8016592:	441c      	add	r4, r3
 8016594:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8016596:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8016598:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801659a:	b2e4      	uxtb	r4, r4
 801659c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 801659e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80165a0:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80165a2:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80165a4:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80165a6:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80165a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80165ac:	708b      	strb	r3, [r1, #2]
}
 80165ae:	4770      	bx	lr
  uint8_t ret = 1;
 80165b0:	2001      	movs	r0, #1
}
 80165b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165b6:	4770      	bx	lr
 80165b8:	200066dc 	.word	0x200066dc

080165bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80165bc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80165be:	f001 faad 	bl	8017b1c <vTaskStartScheduler>
  
  return osOK;
}
 80165c2:	2000      	movs	r0, #0
 80165c4:	bd08      	pop	{r3, pc}
 80165c6:	bf00      	nop

080165c8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165c8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80165cc:	b10b      	cbz	r3, 80165d2 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80165ce:	f001 bb07 	b.w	8017be0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80165d2:	f001 baff 	b.w	8017bd4 <xTaskGetTickCount>
 80165d6:	bf00      	nop

080165d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80165d8:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80165da:	6944      	ldr	r4, [r0, #20]
{
 80165dc:	b086      	sub	sp, #24
 80165de:	4684      	mov	ip, r0
 80165e0:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80165e2:	b1ac      	cbz	r4, 8016610 <osThreadCreate+0x38>
 80165e4:	6986      	ldr	r6, [r0, #24]
 80165e6:	b19e      	cbz	r6, 8016610 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80165e8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80165ec:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 80165f0:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80165f4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80165f8:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 80165fa:	bf14      	ite	ne
 80165fc:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016600:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016602:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8016606:	9500      	str	r5, [sp, #0]
 8016608:	f001 f932 	bl	8017870 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 801660c:	b006      	add	sp, #24
 801660e:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016610:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8016614:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8016618:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 801661a:	bf14      	ite	ne
 801661c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801661e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016620:	e9dc 1000 	ldrd	r1, r0, [ip]
 8016624:	9400      	str	r4, [sp, #0]
 8016626:	ac05      	add	r4, sp, #20
 8016628:	9401      	str	r4, [sp, #4]
 801662a:	f001 f961 	bl	80178f0 <xTaskCreate>
 801662e:	2801      	cmp	r0, #1
  return handle;
 8016630:	bf0c      	ite	eq
 8016632:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8016634:	2000      	movne	r0, #0
}
 8016636:	b006      	add	sp, #24
 8016638:	bd70      	pop	{r4, r5, r6, pc}
 801663a:	bf00      	nop

0801663c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801663c:	2801      	cmp	r0, #1
{
 801663e:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016640:	bf38      	it	cc
 8016642:	2001      	movcc	r0, #1
 8016644:	f001 fc2c 	bl	8017ea0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016648:	2000      	movs	r0, #0
 801664a:	bd08      	pop	{r3, pc}

0801664c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 801664c:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 801664e:	6844      	ldr	r4, [r0, #4]
{
 8016650:	b082      	sub	sp, #8
 8016652:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8016654:	b16c      	cbz	r4, 8016672 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8016656:	f1a1 0201 	sub.w	r2, r1, #1
 801665a:	6800      	ldr	r0, [r0, #0]
 801665c:	2101      	movs	r1, #1
 801665e:	fab2 f282 	clz	r2, r2
 8016662:	0952      	lsrs	r2, r2, #5
 8016664:	e9cd 0400 	strd	r0, r4, [sp]
 8016668:	4808      	ldr	r0, [pc, #32]	; (801668c <osTimerCreate+0x40>)
 801666a:	f001 ffcd 	bl	8018608 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 801666e:	b002      	add	sp, #8
 8016670:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8016672:	f1a1 0201 	sub.w	r2, r1, #1
 8016676:	6804      	ldr	r4, [r0, #0]
 8016678:	2101      	movs	r1, #1
 801667a:	4804      	ldr	r0, [pc, #16]	; (801668c <osTimerCreate+0x40>)
 801667c:	fab2 f282 	clz	r2, r2
 8016680:	9400      	str	r4, [sp, #0]
 8016682:	0952      	lsrs	r2, r2, #5
 8016684:	f001 ff90 	bl	80185a8 <xTimerCreate>
}
 8016688:	b002      	add	sp, #8
 801668a:	bd10      	pop	{r4, pc}
 801668c:	0802b6a0 	.word	0x0802b6a0

08016690 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8016690:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8016692:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8016694:	b109      	cbz	r1, 801669a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8016696:	f000 bbc9 	b.w	8016e2c <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801669a:	f000 bbdf 	b.w	8016e5c <xQueueCreateMutex>
 801669e:	bf00      	nop

080166a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80166a0:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80166a2:	2400      	movs	r4, #0
{
 80166a4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80166a6:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80166a8:	b310      	cbz	r0, 80166f0 <osMutexWait+0x50>
 80166aa:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80166ae:	b933      	cbnz	r3, 80166be <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80166b0:	f000 fd88 	bl	80171c4 <xQueueSemaphoreTake>
 80166b4:	2801      	cmp	r0, #1
 80166b6:	d118      	bne.n	80166ea <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80166b8:	2000      	movs	r0, #0
}
 80166ba:	b002      	add	sp, #8
 80166bc:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80166be:	aa01      	add	r2, sp, #4
 80166c0:	4621      	mov	r1, r4
 80166c2:	f000 fe63 	bl	801738c <xQueueReceiveFromISR>
 80166c6:	2801      	cmp	r0, #1
 80166c8:	d10f      	bne.n	80166ea <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80166ca:	9b01      	ldr	r3, [sp, #4]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d0f3      	beq.n	80166b8 <osMutexWait+0x18>
 80166d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80166dc:	f3bf 8f4f 	dsb	sy
 80166e0:	f3bf 8f6f 	isb	sy
  return osOK;
 80166e4:	4620      	mov	r0, r4
}
 80166e6:	b002      	add	sp, #8
 80166e8:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80166ea:	20ff      	movs	r0, #255	; 0xff
}
 80166ec:	b002      	add	sp, #8
 80166ee:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80166f0:	2080      	movs	r0, #128	; 0x80
}
 80166f2:	b002      	add	sp, #8
 80166f4:	bd10      	pop	{r4, pc}
 80166f6:	bf00      	nop

080166f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80166f8:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80166fa:	2400      	movs	r4, #0
{
 80166fc:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80166fe:	9401      	str	r4, [sp, #4]
 8016700:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8016704:	b19b      	cbz	r3, 801672e <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016706:	a901      	add	r1, sp, #4
 8016708:	f000 fc34 	bl	8016f74 <xQueueGiveFromISR>
 801670c:	2801      	cmp	r0, #1
 801670e:	d114      	bne.n	801673a <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016710:	9b01      	ldr	r3, [sp, #4]
 8016712:	b1ab      	cbz	r3, 8016740 <osMutexRelease+0x48>
 8016714:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801671c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016720:	f3bf 8f4f 	dsb	sy
 8016724:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8016728:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 801672a:	b002      	add	sp, #8
 801672c:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801672e:	461a      	mov	r2, r3
 8016730:	4619      	mov	r1, r3
 8016732:	f000 faad 	bl	8016c90 <xQueueGenericSend>
 8016736:	2801      	cmp	r0, #1
 8016738:	d002      	beq.n	8016740 <osMutexRelease+0x48>
    result = osErrorOS;
 801673a:	20ff      	movs	r0, #255	; 0xff
}
 801673c:	b002      	add	sp, #8
 801673e:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8016740:	2000      	movs	r0, #0
}
 8016742:	b002      	add	sp, #8
 8016744:	bd10      	pop	{r4, pc}
 8016746:	bf00      	nop

08016748 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016748:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801674a:	6844      	ldr	r4, [r0, #4]
{ 
 801674c:	b083      	sub	sp, #12
 801674e:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8016750:	b184      	cbz	r4, 8016774 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8016752:	2901      	cmp	r1, #1
 8016754:	d003      	beq.n	801675e <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8016756:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8016758:	4620      	mov	r0, r4
 801675a:	b003      	add	sp, #12
 801675c:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801675e:	2200      	movs	r2, #0
 8016760:	2503      	movs	r5, #3
 8016762:	4623      	mov	r3, r4
 8016764:	4611      	mov	r1, r2
 8016766:	9500      	str	r5, [sp, #0]
 8016768:	f000 fa08 	bl	8016b7c <xQueueGenericCreateStatic>
 801676c:	4604      	mov	r4, r0
}
 801676e:	4620      	mov	r0, r4
 8016770:	b003      	add	sp, #12
 8016772:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8016774:	2901      	cmp	r1, #1
 8016776:	d1ef      	bne.n	8016758 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8016778:	4621      	mov	r1, r4
 801677a:	2203      	movs	r2, #3
 801677c:	f000 fa56 	bl	8016c2c <xQueueGenericCreate>
 8016780:	4604      	mov	r4, r0
 8016782:	2800      	cmp	r0, #0
 8016784:	d0e8      	beq.n	8016758 <osSemaphoreCreate+0x10>
 8016786:	2300      	movs	r3, #0
 8016788:	461a      	mov	r2, r3
 801678a:	4619      	mov	r1, r3
 801678c:	f000 fa80 	bl	8016c90 <xQueueGenericSend>
 8016790:	e7e2      	b.n	8016758 <osSemaphoreCreate+0x10>
 8016792:	bf00      	nop

08016794 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016794:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016796:	2400      	movs	r4, #0
{
 8016798:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801679a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 801679c:	b310      	cbz	r0, 80167e4 <osSemaphoreWait+0x50>
 801679e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80167a2:	b933      	cbnz	r3, 80167b2 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80167a4:	f000 fd0e 	bl	80171c4 <xQueueSemaphoreTake>
 80167a8:	2801      	cmp	r0, #1
 80167aa:	d118      	bne.n	80167de <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80167ac:	2000      	movs	r0, #0
}
 80167ae:	b002      	add	sp, #8
 80167b0:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80167b2:	aa01      	add	r2, sp, #4
 80167b4:	4621      	mov	r1, r4
 80167b6:	f000 fde9 	bl	801738c <xQueueReceiveFromISR>
 80167ba:	2801      	cmp	r0, #1
 80167bc:	d10f      	bne.n	80167de <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80167be:	9b01      	ldr	r3, [sp, #4]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d0f3      	beq.n	80167ac <osSemaphoreWait+0x18>
 80167c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80167c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80167d0:	f3bf 8f4f 	dsb	sy
 80167d4:	f3bf 8f6f 	isb	sy
  return osOK;
 80167d8:	4620      	mov	r0, r4
}
 80167da:	b002      	add	sp, #8
 80167dc:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80167de:	20ff      	movs	r0, #255	; 0xff
}
 80167e0:	b002      	add	sp, #8
 80167e2:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80167e4:	2080      	movs	r0, #128	; 0x80
}
 80167e6:	b002      	add	sp, #8
 80167e8:	bd10      	pop	{r4, pc}
 80167ea:	bf00      	nop

080167ec <osSemaphoreRelease>:
 80167ec:	b510      	push	{r4, lr}
 80167ee:	2400      	movs	r4, #0
 80167f0:	b082      	sub	sp, #8
 80167f2:	9401      	str	r4, [sp, #4]
 80167f4:	f3ef 8305 	mrs	r3, IPSR
 80167f8:	b19b      	cbz	r3, 8016822 <osSemaphoreRelease+0x36>
 80167fa:	a901      	add	r1, sp, #4
 80167fc:	f000 fbba 	bl	8016f74 <xQueueGiveFromISR>
 8016800:	2801      	cmp	r0, #1
 8016802:	d114      	bne.n	801682e <osSemaphoreRelease+0x42>
 8016804:	9b01      	ldr	r3, [sp, #4]
 8016806:	b1ab      	cbz	r3, 8016834 <osSemaphoreRelease+0x48>
 8016808:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801680c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016810:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016814:	f3bf 8f4f 	dsb	sy
 8016818:	f3bf 8f6f 	isb	sy
 801681c:	4620      	mov	r0, r4
 801681e:	b002      	add	sp, #8
 8016820:	bd10      	pop	{r4, pc}
 8016822:	461a      	mov	r2, r3
 8016824:	4619      	mov	r1, r3
 8016826:	f000 fa33 	bl	8016c90 <xQueueGenericSend>
 801682a:	2801      	cmp	r0, #1
 801682c:	d002      	beq.n	8016834 <osSemaphoreRelease+0x48>
 801682e:	20ff      	movs	r0, #255	; 0xff
 8016830:	b002      	add	sp, #8
 8016832:	bd10      	pop	{r4, pc}
 8016834:	2000      	movs	r0, #0
 8016836:	b002      	add	sp, #8
 8016838:	bd10      	pop	{r4, pc}
 801683a:	bf00      	nop

0801683c <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801683c:	6882      	ldr	r2, [r0, #8]
 801683e:	b15a      	cbz	r2, 8016858 <osMessageCreate+0x1c>
 8016840:	68c3      	ldr	r3, [r0, #12]
 8016842:	b14b      	cbz	r3, 8016858 <osMessageCreate+0x1c>
{
 8016844:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016846:	2400      	movs	r4, #0
{
 8016848:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801684a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801684e:	9400      	str	r4, [sp, #0]
 8016850:	f000 f994 	bl	8016b7c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016854:	b002      	add	sp, #8
 8016856:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016858:	2200      	movs	r2, #0
 801685a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801685e:	f000 b9e5 	b.w	8016c2c <xQueueGenericCreate>
 8016862:	bf00      	nop

08016864 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016864:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8016866:	2400      	movs	r4, #0
{
 8016868:	b084      	sub	sp, #16
 801686a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801686c:	9403      	str	r4, [sp, #12]
 801686e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8016872:	b15b      	cbz	r3, 801688c <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016874:	4623      	mov	r3, r4
 8016876:	aa03      	add	r2, sp, #12
 8016878:	a901      	add	r1, sp, #4
 801687a:	f000 fb09 	bl	8016e90 <xQueueGenericSendFromISR>
 801687e:	2801      	cmp	r0, #1
 8016880:	d10c      	bne.n	801689c <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016882:	9b03      	ldr	r3, [sp, #12]
 8016884:	b96b      	cbnz	r3, 80168a2 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8016886:	2000      	movs	r0, #0
}
 8016888:	b004      	add	sp, #16
 801688a:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801688c:	2a01      	cmp	r2, #1
 801688e:	a901      	add	r1, sp, #4
 8016890:	bf38      	it	cc
 8016892:	2201      	movcc	r2, #1
 8016894:	f000 f9fc 	bl	8016c90 <xQueueGenericSend>
 8016898:	2801      	cmp	r0, #1
 801689a:	d0f4      	beq.n	8016886 <osMessagePut+0x22>
      return osErrorOS;
 801689c:	20ff      	movs	r0, #255	; 0xff
}
 801689e:	b004      	add	sp, #16
 80168a0:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80168a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80168a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80168ae:	f3bf 8f4f 	dsb	sy
 80168b2:	f3bf 8f6f 	isb	sy
  return osOK;
 80168b6:	4620      	mov	r0, r4
}
 80168b8:	b004      	add	sp, #16
 80168ba:	bd10      	pop	{r4, pc}

080168bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80168bc:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80168be:	2600      	movs	r6, #0
{
 80168c0:	b084      	sub	sp, #16
 80168c2:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 80168c4:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80168c8:	b379      	cbz	r1, 801692a <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80168ca:	460b      	mov	r3, r1
 80168cc:	9600      	str	r6, [sp, #0]
 80168ce:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80168d2:	b991      	cbnz	r1, 80168fa <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80168d4:	a902      	add	r1, sp, #8
 80168d6:	4618      	mov	r0, r3
 80168d8:	4615      	mov	r5, r2
 80168da:	f000 fbab 	bl	8017034 <xQueueReceive>
 80168de:	2801      	cmp	r0, #1
 80168e0:	d02d      	beq.n	801693e <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80168e2:	2d00      	cmp	r5, #0
 80168e4:	bf18      	it	ne
 80168e6:	2540      	movne	r5, #64	; 0x40
 80168e8:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80168ea:	ab04      	add	r3, sp, #16
 80168ec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80168f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80168f4:	4620      	mov	r0, r4
 80168f6:	b004      	add	sp, #16
 80168f8:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80168fa:	466a      	mov	r2, sp
 80168fc:	4618      	mov	r0, r3
 80168fe:	a902      	add	r1, sp, #8
 8016900:	f000 fd44 	bl	801738c <xQueueReceiveFromISR>
      event.status = osOK;
 8016904:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8016906:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8016908:	bf0c      	ite	eq
 801690a:	2210      	moveq	r2, #16
 801690c:	2200      	movne	r2, #0
 801690e:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8016910:	2b00      	cmp	r3, #0
 8016912:	d0ea      	beq.n	80168ea <osMessageGet+0x2e>
 8016914:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801691c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016920:	f3bf 8f4f 	dsb	sy
 8016924:	f3bf 8f6f 	isb	sy
 8016928:	e7df      	b.n	80168ea <osMessageGet+0x2e>
    event.status = osErrorParameter;
 801692a:	2380      	movs	r3, #128	; 0x80
 801692c:	9301      	str	r3, [sp, #4]
    return event;
 801692e:	ab04      	add	r3, sp, #16
 8016930:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016938:	4620      	mov	r0, r4
 801693a:	b004      	add	sp, #16
 801693c:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801693e:	2310      	movs	r3, #16
 8016940:	9301      	str	r3, [sp, #4]
 8016942:	e7d2      	b.n	80168ea <osMessageGet+0x2e>

08016944 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016944:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016948:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801694c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801694e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016950:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016952:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016954:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016958:	4770      	bx	lr
 801695a:	bf00      	nop

0801695c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801695c:	2300      	movs	r3, #0
 801695e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop

08016964 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8016964:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8016966:	6802      	ldr	r2, [r0, #0]
{
 8016968:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801696a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 801696c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 801696e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016970:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016972:	689c      	ldr	r4, [r3, #8]
 8016974:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016976:	6099      	str	r1, [r3, #8]
}
 8016978:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 801697c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801697e:	6002      	str	r2, [r0, #0]
}
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop

08016984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016984:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016986:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016988:	1c6b      	adds	r3, r5, #1
 801698a:	d010      	beq.n	80169ae <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801698c:	f100 0308 	add.w	r3, r0, #8
 8016990:	461c      	mov	r4, r3
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	681a      	ldr	r2, [r3, #0]
 8016996:	42aa      	cmp	r2, r5
 8016998:	d9fa      	bls.n	8016990 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801699a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801699c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801699e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80169a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80169a2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80169a4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80169a6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80169a8:	6002      	str	r2, [r0, #0]
}
 80169aa:	bc30      	pop	{r4, r5}
 80169ac:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80169ae:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80169b0:	6863      	ldr	r3, [r4, #4]
 80169b2:	e7f2      	b.n	801699a <vListInsert+0x16>

080169b4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80169b4:	6903      	ldr	r3, [r0, #16]
{
 80169b6:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80169b8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169ba:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80169be:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80169c0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169c4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80169c6:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80169c8:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80169cc:	bf08      	it	eq
 80169ce:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80169d0:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80169d2:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80169d4:	3a01      	subs	r2, #1
 80169d6:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80169d8:	6818      	ldr	r0, [r3, #0]
}
 80169da:	4770      	bx	lr

080169dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80169dc:	b570      	push	{r4, r5, r6, lr}
 80169de:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80169e2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169e6:	b92a      	cbnz	r2, 80169f4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169e8:	6805      	ldr	r5, [r0, #0]
 80169ea:	b365      	cbz	r5, 8016a46 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169ec:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80169ee:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169f0:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80169f2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80169f4:	b97d      	cbnz	r5, 8016a16 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80169f6:	6840      	ldr	r0, [r0, #4]
 80169f8:	f00e fede 	bl	80257b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80169fc:	6863      	ldr	r3, [r4, #4]
 80169fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016a00:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a02:	68a2      	ldr	r2, [r4, #8]
 8016a04:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a06:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a08:	d319      	bcc.n	8016a3e <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a0a:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a0c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a0e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a10:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a12:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a16:	68c0      	ldr	r0, [r0, #12]
 8016a18:	f00e fece 	bl	80257b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016a1e:	68e3      	ldr	r3, [r4, #12]
 8016a20:	4251      	negs	r1, r2
 8016a22:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a24:	6822      	ldr	r2, [r4, #0]
 8016a26:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a28:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a2a:	d202      	bcs.n	8016a32 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a2c:	68a3      	ldr	r3, [r4, #8]
 8016a2e:	440b      	add	r3, r1
 8016a30:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8016a32:	2d02      	cmp	r5, #2
 8016a34:	d00d      	beq.n	8016a52 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a36:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a38:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a3a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a3c:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a3e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a40:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a42:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a44:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a46:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a48:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a4a:	f001 fbbf 	bl	80181cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a4e:	60a5      	str	r5, [r4, #8]
 8016a50:	e7ce      	b.n	80169f0 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a52:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a54:	f04f 0000 	mov.w	r0, #0
 8016a58:	bf38      	it	cc
 8016a5a:	2601      	movcc	r6, #1
 8016a5c:	e7c8      	b.n	80169f0 <prvCopyDataToQueue+0x14>
 8016a5e:	bf00      	nop

08016a60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016a60:	b570      	push	{r4, r5, r6, lr}
 8016a62:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016a64:	f002 f84e 	bl	8018b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016a68:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8016a6c:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a6e:	2c00      	cmp	r4, #0
 8016a70:	dd14      	ble.n	8016a9c <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a72:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8016a76:	e003      	b.n	8016a80 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016a78:	1e63      	subs	r3, r4, #1
 8016a7a:	b2da      	uxtb	r2, r3
 8016a7c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a7e:	b16a      	cbz	r2, 8016a9c <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a82:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a84:	b153      	cbz	r3, 8016a9c <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a86:	f001 fa89 	bl	8017f9c <xTaskRemoveFromEventList>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d0f4      	beq.n	8016a78 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8016a8e:	f001 fb29 	bl	80180e4 <vTaskMissedYield>
			--cTxLock;
 8016a92:	1e63      	subs	r3, r4, #1
 8016a94:	b2da      	uxtb	r2, r3
 8016a96:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	d1f1      	bne.n	8016a80 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016a9c:	23ff      	movs	r3, #255	; 0xff
 8016a9e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016aa2:	f002 f855 	bl	8018b50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016aa6:	f002 f82d 	bl	8018b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016aaa:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8016aae:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ab0:	2c00      	cmp	r4, #0
 8016ab2:	dd14      	ble.n	8016ade <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ab4:	f105 0610 	add.w	r6, r5, #16
 8016ab8:	e003      	b.n	8016ac2 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016aba:	1e63      	subs	r3, r4, #1
 8016abc:	b2da      	uxtb	r2, r3
 8016abe:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ac0:	b16a      	cbz	r2, 8016ade <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ac2:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ac4:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ac6:	b153      	cbz	r3, 8016ade <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ac8:	f001 fa68 	bl	8017f9c <xTaskRemoveFromEventList>
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d0f4      	beq.n	8016aba <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8016ad0:	f001 fb08 	bl	80180e4 <vTaskMissedYield>
				--cRxLock;
 8016ad4:	1e63      	subs	r3, r4, #1
 8016ad6:	b2da      	uxtb	r2, r3
 8016ad8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ada:	2a00      	cmp	r2, #0
 8016adc:	d1f1      	bne.n	8016ac2 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016ade:	23ff      	movs	r3, #255	; 0xff
 8016ae0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8016ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8016ae8:	f002 b832 	b.w	8018b50 <vPortExitCritical>

08016aec <xQueueGenericReset>:
{
 8016aec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8016aee:	b1e0      	cbz	r0, 8016b2a <xQueueGenericReset+0x3e>
 8016af0:	4604      	mov	r4, r0
 8016af2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8016af4:	f002 f806 	bl	8018b04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016af8:	6822      	ldr	r2, [r4, #0]
 8016afa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016afe:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b00:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b04:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b06:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b08:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b0a:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016b0c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8016b0e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b10:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016b12:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8016b14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8016b1c:	b985      	cbnz	r5, 8016b40 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b1e:	6923      	ldr	r3, [r4, #16]
 8016b20:	b9d3      	cbnz	r3, 8016b58 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 8016b22:	f002 f815 	bl	8018b50 <vPortExitCritical>
}
 8016b26:	2001      	movs	r0, #1
 8016b28:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016b2a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b2e:	b672      	cpsid	i
 8016b30:	f383 8811 	msr	BASEPRI, r3
 8016b34:	f3bf 8f6f 	isb	sy
 8016b38:	f3bf 8f4f 	dsb	sy
 8016b3c:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016b3e:	e7fe      	b.n	8016b3e <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016b40:	f104 0010 	add.w	r0, r4, #16
 8016b44:	f7ff fefe 	bl	8016944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016b48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016b4c:	f7ff fefa 	bl	8016944 <vListInitialise>
	taskEXIT_CRITICAL();
 8016b50:	f001 fffe 	bl	8018b50 <vPortExitCritical>
}
 8016b54:	2001      	movs	r0, #1
 8016b56:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b58:	f104 0010 	add.w	r0, r4, #16
 8016b5c:	f001 fa1e 	bl	8017f9c <xTaskRemoveFromEventList>
 8016b60:	2800      	cmp	r0, #0
 8016b62:	d0de      	beq.n	8016b22 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8016b64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b70:	f3bf 8f4f 	dsb	sy
 8016b74:	f3bf 8f6f 	isb	sy
 8016b78:	e7d3      	b.n	8016b22 <xQueueGenericReset+0x36>
 8016b7a:	bf00      	nop

08016b7c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b7c:	b950      	cbnz	r0, 8016b94 <xQueueGenericCreateStatic+0x18>
 8016b7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b82:	b672      	cpsid	i
 8016b84:	f383 8811 	msr	BASEPRI, r3
 8016b88:	f3bf 8f6f 	isb	sy
 8016b8c:	f3bf 8f4f 	dsb	sy
 8016b90:	b662      	cpsie	i
 8016b92:	e7fe      	b.n	8016b92 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8016b94:	b17b      	cbz	r3, 8016bb6 <xQueueGenericCreateStatic+0x3a>
	{
 8016b96:	b510      	push	{r4, lr}
 8016b98:	460c      	mov	r4, r1
 8016b9a:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016b9c:	b33a      	cbz	r2, 8016bee <xQueueGenericCreateStatic+0x72>
 8016b9e:	b9a9      	cbnz	r1, 8016bcc <xQueueGenericCreateStatic+0x50>
 8016ba0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ba4:	b672      	cpsid	i
 8016ba6:	f383 8811 	msr	BASEPRI, r3
 8016baa:	f3bf 8f6f 	isb	sy
 8016bae:	f3bf 8f4f 	dsb	sy
 8016bb2:	b662      	cpsie	i
 8016bb4:	e7fe      	b.n	8016bb4 <xQueueGenericCreateStatic+0x38>
 8016bb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bba:	b672      	cpsid	i
 8016bbc:	f383 8811 	msr	BASEPRI, r3
 8016bc0:	f3bf 8f6f 	isb	sy
 8016bc4:	f3bf 8f4f 	dsb	sy
 8016bc8:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8016bca:	e7fe      	b.n	8016bca <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016bcc:	b17a      	cbz	r2, 8016bee <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016bce:	2148      	movs	r1, #72	; 0x48
 8016bd0:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016bd2:	9903      	ldr	r1, [sp, #12]
 8016bd4:	2948      	cmp	r1, #72	; 0x48
 8016bd6:	d017      	beq.n	8016c08 <xQueueGenericCreateStatic+0x8c>
 8016bd8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bdc:	b672      	cpsid	i
 8016bde:	f383 8811 	msr	BASEPRI, r3
 8016be2:	f3bf 8f6f 	isb	sy
 8016be6:	f3bf 8f4f 	dsb	sy
 8016bea:	b662      	cpsie	i
 8016bec:	e7fe      	b.n	8016bec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016bee:	2c00      	cmp	r4, #0
 8016bf0:	d0ed      	beq.n	8016bce <xQueueGenericCreateStatic+0x52>
 8016bf2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bf6:	b672      	cpsid	i
 8016bf8:	f383 8811 	msr	BASEPRI, r3
 8016bfc:	f3bf 8f6f 	isb	sy
 8016c00:	f3bf 8f4f 	dsb	sy
 8016c04:	b662      	cpsie	i
 8016c06:	e7fe      	b.n	8016c06 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c08:	2c00      	cmp	r4, #0
 8016c0a:	bf08      	it	eq
 8016c0c:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c0e:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8016c10:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c12:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c14:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8016c18:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8016c1a:	641c      	str	r4, [r3, #64]	; 0x40
 8016c1c:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c1e:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c20:	f7ff ff64 	bl	8016aec <xQueueGenericReset>
	}
 8016c24:	9b01      	ldr	r3, [sp, #4]
 8016c26:	4618      	mov	r0, r3
 8016c28:	b004      	add	sp, #16
 8016c2a:	bd10      	pop	{r4, pc}

08016c2c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016c2c:	b950      	cbnz	r0, 8016c44 <xQueueGenericCreate+0x18>
 8016c2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c32:	b672      	cpsid	i
 8016c34:	f383 8811 	msr	BASEPRI, r3
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	b662      	cpsie	i
 8016c42:	e7fe      	b.n	8016c42 <xQueueGenericCreate+0x16>
	{
 8016c44:	b570      	push	{r4, r5, r6, lr}
 8016c46:	4605      	mov	r5, r0
 8016c48:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8016c4a:	b979      	cbnz	r1, 8016c6c <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c4c:	2048      	movs	r0, #72	; 0x48
 8016c4e:	f002 f8c3 	bl	8018dd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c52:	4604      	mov	r4, r0
 8016c54:	b1c0      	cbz	r0, 8016c88 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c56:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c5a:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c5c:	2101      	movs	r1, #1
 8016c5e:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8016c60:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c64:	f7ff ff42 	bl	8016aec <xQueueGenericReset>
	}
 8016c68:	4620      	mov	r0, r4
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c6c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c70:	3048      	adds	r0, #72	; 0x48
 8016c72:	f002 f8b1 	bl	8018dd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c76:	4604      	mov	r4, r0
 8016c78:	b130      	cbz	r0, 8016c88 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c7a:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c7c:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c80:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016c84:	6003      	str	r3, [r0, #0]
 8016c86:	e7e9      	b.n	8016c5c <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c88:	2400      	movs	r4, #0
	}
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	bd70      	pop	{r4, r5, r6, pc}
 8016c8e:	bf00      	nop

08016c90 <xQueueGenericSend>:
{
 8016c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c94:	b085      	sub	sp, #20
 8016c96:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8016c98:	2800      	cmp	r0, #0
 8016c9a:	f000 8083 	beq.w	8016da4 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c9e:	460f      	mov	r7, r1
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	461e      	mov	r6, r3
 8016ca4:	2900      	cmp	r1, #0
 8016ca6:	d06b      	beq.n	8016d80 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ca8:	2e02      	cmp	r6, #2
 8016caa:	d10d      	bne.n	8016cc8 <xQueueGenericSend+0x38>
 8016cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016cae:	2b01      	cmp	r3, #1
 8016cb0:	d00a      	beq.n	8016cc8 <xQueueGenericSend+0x38>
 8016cb2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016cb6:	b672      	cpsid	i
 8016cb8:	f383 8811 	msr	BASEPRI, r3
 8016cbc:	f3bf 8f6f 	isb	sy
 8016cc0:	f3bf 8f4f 	dsb	sy
 8016cc4:	b662      	cpsie	i
 8016cc6:	e7fe      	b.n	8016cc6 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016cc8:	f001 fa18 	bl	80180fc <xTaskGetSchedulerState>
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d074      	beq.n	8016dba <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cd0:	f1a6 0802 	sub.w	r8, r6, #2
 8016cd4:	2500      	movs	r5, #0
 8016cd6:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8016cda:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cdc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016ce0:	e007      	b.n	8016cf2 <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8016ce2:	f001 ff35 	bl	8018b50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f7ff feba 	bl	8016a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016cec:	f001 f8c6 	bl	8017e7c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cf0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8016cf2:	f001 ff07 	bl	8018b04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016cf8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016cfa:	4290      	cmp	r0, r2
 8016cfc:	d36b      	bcc.n	8016dd6 <xQueueGenericSend+0x146>
 8016cfe:	f1b8 0f00 	cmp.w	r8, #0
 8016d02:	d168      	bne.n	8016dd6 <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d04:	9b01      	ldr	r3, [sp, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d07d      	beq.n	8016e06 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8016d0a:	2d00      	cmp	r5, #0
 8016d0c:	d046      	beq.n	8016d9c <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8016d0e:	f001 ff1f 	bl	8018b50 <vPortExitCritical>
		vTaskSuspendAll();
 8016d12:	f000 ff57 	bl	8017bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d16:	f001 fef5 	bl	8018b04 <vPortEnterCritical>
 8016d1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d1e:	2bff      	cmp	r3, #255	; 0xff
 8016d20:	d101      	bne.n	8016d26 <xQueueGenericSend+0x96>
 8016d22:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8016d26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016d2a:	2bff      	cmp	r3, #255	; 0xff
 8016d2c:	d101      	bne.n	8016d32 <xQueueGenericSend+0xa2>
 8016d2e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8016d32:	f001 ff0d 	bl	8018b50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d36:	a901      	add	r1, sp, #4
 8016d38:	a802      	add	r0, sp, #8
 8016d3a:	f001 f987 	bl	801804c <xTaskCheckForTimeOut>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	d165      	bne.n	8016e0e <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8016d42:	f001 fedf 	bl	8018b04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d1c9      	bne.n	8016ce2 <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8016d4e:	f001 feff 	bl	8018b50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d52:	9901      	ldr	r1, [sp, #4]
 8016d54:	f104 0010 	add.w	r0, r4, #16
 8016d58:	f001 f8e4 	bl	8017f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	f7ff fe7f 	bl	8016a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016d62:	f001 f88b 	bl	8017e7c <xTaskResumeAll>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d1c2      	bne.n	8016cf0 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8016d6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016d76:	f3bf 8f4f 	dsb	sy
 8016d7a:	f3bf 8f6f 	isb	sy
 8016d7e:	e7b7      	b.n	8016cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d090      	beq.n	8016ca8 <xQueueGenericSend+0x18>
 8016d86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d8a:	b672      	cpsid	i
 8016d8c:	f383 8811 	msr	BASEPRI, r3
 8016d90:	f3bf 8f6f 	isb	sy
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	b662      	cpsie	i
 8016d9a:	e7fe      	b.n	8016d9a <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d9c:	a802      	add	r0, sp, #8
 8016d9e:	f001 f949 	bl	8018034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016da2:	e7b4      	b.n	8016d0e <xQueueGenericSend+0x7e>
 8016da4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016da8:	b672      	cpsid	i
 8016daa:	f383 8811 	msr	BASEPRI, r3
 8016dae:	f3bf 8f6f 	isb	sy
 8016db2:	f3bf 8f4f 	dsb	sy
 8016db6:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016db8:	e7fe      	b.n	8016db8 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016dba:	9b01      	ldr	r3, [sp, #4]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d087      	beq.n	8016cd0 <xQueueGenericSend+0x40>
 8016dc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dc4:	b672      	cpsid	i
 8016dc6:	f383 8811 	msr	BASEPRI, r3
 8016dca:	f3bf 8f6f 	isb	sy
 8016dce:	f3bf 8f4f 	dsb	sy
 8016dd2:	b662      	cpsie	i
 8016dd4:	e7fe      	b.n	8016dd4 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016dd6:	4632      	mov	r2, r6
 8016dd8:	4639      	mov	r1, r7
 8016dda:	4620      	mov	r0, r4
 8016ddc:	f7ff fdfe 	bl	80169dc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016de2:	b9db      	cbnz	r3, 8016e1c <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8016de4:	b148      	cbz	r0, 8016dfa <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8016de6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016df2:	f3bf 8f4f 	dsb	sy
 8016df6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8016dfa:	f001 fea9 	bl	8018b50 <vPortExitCritical>
				return pdPASS;
 8016dfe:	2001      	movs	r0, #1
}
 8016e00:	b005      	add	sp, #20
 8016e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8016e06:	f001 fea3 	bl	8018b50 <vPortExitCritical>
					return errQUEUE_FULL;
 8016e0a:	4640      	mov	r0, r8
 8016e0c:	e7f8      	b.n	8016e00 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7ff fe26 	bl	8016a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e14:	f001 f832 	bl	8017e7c <xTaskResumeAll>
			return errQUEUE_FULL;
 8016e18:	2000      	movs	r0, #0
 8016e1a:	e7f1      	b.n	8016e00 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016e20:	f001 f8bc 	bl	8017f9c <xTaskRemoveFromEventList>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	d0e8      	beq.n	8016dfa <xQueueGenericSend+0x16a>
 8016e28:	e7dd      	b.n	8016de6 <xQueueGenericSend+0x156>
 8016e2a:	bf00      	nop

08016e2c <xQueueCreateMutexStatic>:
	{
 8016e2c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016e2e:	2200      	movs	r2, #0
	{
 8016e30:	4604      	mov	r4, r0
 8016e32:	b082      	sub	sp, #8
 8016e34:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016e36:	2001      	movs	r0, #1
 8016e38:	4611      	mov	r1, r2
 8016e3a:	9400      	str	r4, [sp, #0]
 8016e3c:	f7ff fe9e 	bl	8016b7c <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8016e40:	4604      	mov	r4, r0
 8016e42:	b138      	cbz	r0, 8016e54 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e44:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e46:	461a      	mov	r2, r3
 8016e48:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e4a:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016e4c:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016e4e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e50:	f7ff ff1e 	bl	8016c90 <xQueueGenericSend>
	}
 8016e54:	4620      	mov	r0, r4
 8016e56:	b002      	add	sp, #8
 8016e58:	bd10      	pop	{r4, pc}
 8016e5a:	bf00      	nop

08016e5c <xQueueCreateMutex>:
	{
 8016e5c:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016e5e:	2048      	movs	r0, #72	; 0x48
 8016e60:	f001 ffba 	bl	8018dd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016e64:	4604      	mov	r4, r0
 8016e66:	b188      	cbz	r0, 8016e8c <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e68:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8016e6a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016e6c:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e6e:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8016e72:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016e76:	f7ff fe39 	bl	8016aec <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e7a:	462b      	mov	r3, r5
 8016e7c:	462a      	mov	r2, r5
 8016e7e:	4629      	mov	r1, r5
 8016e80:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e82:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016e84:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016e86:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e88:	f7ff ff02 	bl	8016c90 <xQueueGenericSend>
	}
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	bd38      	pop	{r3, r4, r5, pc}

08016e90 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8016e90:	2800      	cmp	r0, #0
 8016e92:	d053      	beq.n	8016f3c <xQueueGenericSendFromISR+0xac>
{
 8016e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e98:	460e      	mov	r6, r1
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	4617      	mov	r7, r2
 8016e9e:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ea0:	b359      	cbz	r1, 8016efa <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ea2:	2d02      	cmp	r5, #2
 8016ea4:	d10d      	bne.n	8016ec2 <xQueueGenericSendFromISR+0x32>
 8016ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ea8:	2b01      	cmp	r3, #1
 8016eaa:	d00a      	beq.n	8016ec2 <xQueueGenericSendFromISR+0x32>
 8016eac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016eb0:	b672      	cpsid	i
 8016eb2:	f383 8811 	msr	BASEPRI, r3
 8016eb6:	f3bf 8f6f 	isb	sy
 8016eba:	f3bf 8f4f 	dsb	sy
 8016ebe:	b662      	cpsie	i
 8016ec0:	e7fe      	b.n	8016ec0 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ec2:	f001 ff25 	bl	8018d10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016ec6:	f3ef 8811 	mrs	r8, BASEPRI
 8016eca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ece:	b672      	cpsid	i
 8016ed0:	f383 8811 	msr	BASEPRI, r3
 8016ed4:	f3bf 8f6f 	isb	sy
 8016ed8:	f3bf 8f4f 	dsb	sy
 8016edc:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	d317      	bcc.n	8016f16 <xQueueGenericSendFromISR+0x86>
 8016ee6:	f1a5 0002 	sub.w	r0, r5, #2
 8016eea:	fab0 f080 	clz	r0, r0
 8016eee:	0940      	lsrs	r0, r0, #5
 8016ef0:	b988      	cbnz	r0, 8016f16 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016ef2:	f388 8811 	msr	BASEPRI, r8
}
 8016ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016efa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d0d0      	beq.n	8016ea2 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8016f00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f04:	b672      	cpsid	i
 8016f06:	f383 8811 	msr	BASEPRI, r3
 8016f0a:	f3bf 8f6f 	isb	sy
 8016f0e:	f3bf 8f4f 	dsb	sy
 8016f12:	b662      	cpsie	i
 8016f14:	e7fe      	b.n	8016f14 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f16:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f1c:	4631      	mov	r1, r6
 8016f1e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f20:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f22:	f7ff fd5b 	bl	80169dc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8016f26:	1c6b      	adds	r3, r5, #1
 8016f28:	d013      	beq.n	8016f52 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f2a:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8016f2c:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f2e:	b25b      	sxtb	r3, r3
 8016f30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8016f34:	f388 8811 	msr	BASEPRI, r8
}
 8016f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8016f3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f40:	b672      	cpsid	i
 8016f42:	f383 8811 	msr	BASEPRI, r3
 8016f46:	f3bf 8f6f 	isb	sy
 8016f4a:	f3bf 8f4f 	dsb	sy
 8016f4e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016f50:	e7fe      	b.n	8016f50 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f54:	b90b      	cbnz	r3, 8016f5a <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8016f56:	2001      	movs	r0, #1
 8016f58:	e7cb      	b.n	8016ef2 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016f5e:	f001 f81d 	bl	8017f9c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d0f7      	beq.n	8016f56 <xQueueGenericSendFromISR+0xc6>
 8016f66:	2f00      	cmp	r7, #0
 8016f68:	d0f5      	beq.n	8016f56 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f6a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016f6c:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f6e:	603b      	str	r3, [r7, #0]
 8016f70:	e7bf      	b.n	8016ef2 <xQueueGenericSendFromISR+0x62>
 8016f72:	bf00      	nop

08016f74 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8016f74:	b380      	cbz	r0, 8016fd8 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f76:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8016f78:	b570      	push	{r4, r5, r6, lr}
 8016f7a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f7c:	b153      	cbz	r3, 8016f94 <xQueueGiveFromISR+0x20>
 8016f7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f82:	b672      	cpsid	i
 8016f84:	f383 8811 	msr	BASEPRI, r3
 8016f88:	f3bf 8f6f 	isb	sy
 8016f8c:	f3bf 8f4f 	dsb	sy
 8016f90:	b662      	cpsie	i
 8016f92:	e7fe      	b.n	8016f92 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016f94:	6803      	ldr	r3, [r0, #0]
 8016f96:	460d      	mov	r5, r1
 8016f98:	b34b      	cbz	r3, 8016fee <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f9a:	f001 feb9 	bl	8018d10 <vPortValidateInterruptPriority>
	__asm volatile
 8016f9e:	f3ef 8611 	mrs	r6, BASEPRI
 8016fa2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fa6:	b672      	cpsid	i
 8016fa8:	f383 8811 	msr	BASEPRI, r3
 8016fac:	f3bf 8f6f 	isb	sy
 8016fb0:	f3bf 8f4f 	dsb	sy
 8016fb4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016fb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d925      	bls.n	801700a <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fbe:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016fc2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8016fc4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016fc6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fc8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8016fca:	d022      	beq.n	8017012 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fcc:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8016fce:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fd0:	b25b      	sxtb	r3, r3
 8016fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016fd6:	e019      	b.n	801700c <xQueueGiveFromISR+0x98>
	__asm volatile
 8016fd8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fdc:	b672      	cpsid	i
 8016fde:	f383 8811 	msr	BASEPRI, r3
 8016fe2:	f3bf 8f6f 	isb	sy
 8016fe6:	f3bf 8f4f 	dsb	sy
 8016fea:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016fec:	e7fe      	b.n	8016fec <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016fee:	6883      	ldr	r3, [r0, #8]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d0d2      	beq.n	8016f9a <xQueueGiveFromISR+0x26>
 8016ff4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ff8:	b672      	cpsid	i
 8016ffa:	f383 8811 	msr	BASEPRI, r3
 8016ffe:	f3bf 8f6f 	isb	sy
 8017002:	f3bf 8f4f 	dsb	sy
 8017006:	b662      	cpsie	i
 8017008:	e7fe      	b.n	8017008 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 801700a:	2000      	movs	r0, #0
	__asm volatile
 801700c:	f386 8811 	msr	BASEPRI, r6
}
 8017010:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017014:	b90b      	cbnz	r3, 801701a <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8017016:	2001      	movs	r0, #1
 8017018:	e7f8      	b.n	801700c <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801701a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801701e:	f000 ffbd 	bl	8017f9c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8017022:	2d00      	cmp	r5, #0
 8017024:	d0f7      	beq.n	8017016 <xQueueGiveFromISR+0xa2>
 8017026:	2800      	cmp	r0, #0
 8017028:	d0f5      	beq.n	8017016 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801702a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 801702c:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 801702e:	602b      	str	r3, [r5, #0]
 8017030:	e7ec      	b.n	801700c <xQueueGiveFromISR+0x98>
 8017032:	bf00      	nop

08017034 <xQueueReceive>:
{
 8017034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017038:	b085      	sub	sp, #20
 801703a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801703c:	2800      	cmp	r0, #0
 801703e:	f000 80a4 	beq.w	801718a <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017042:	460d      	mov	r5, r1
 8017044:	4604      	mov	r4, r0
 8017046:	2900      	cmp	r1, #0
 8017048:	d047      	beq.n	80170da <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801704a:	f001 f857 	bl	80180fc <xTaskGetSchedulerState>
 801704e:	2800      	cmp	r0, #0
 8017050:	d051      	beq.n	80170f6 <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8017052:	f001 fd57 	bl	8018b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017056:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017058:	2e00      	cmp	r6, #0
 801705a:	d16b      	bne.n	8017134 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 801705c:	9b01      	ldr	r3, [sp, #4]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d035      	beq.n	80170ce <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8017062:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017064:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8017068:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 801706c:	a802      	add	r0, sp, #8
 801706e:	f000 ffe1 	bl	8018034 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8017072:	f001 fd6d 	bl	8018b50 <vPortExitCritical>
		vTaskSuspendAll();
 8017076:	f000 fda5 	bl	8017bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801707a:	f001 fd43 	bl	8018b04 <vPortEnterCritical>
 801707e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017082:	2bff      	cmp	r3, #255	; 0xff
 8017084:	d101      	bne.n	801708a <xQueueReceive+0x56>
 8017086:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 801708a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801708e:	2bff      	cmp	r3, #255	; 0xff
 8017090:	d101      	bne.n	8017096 <xQueueReceive+0x62>
 8017092:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017096:	f001 fd5b 	bl	8018b50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801709a:	a901      	add	r1, sp, #4
 801709c:	a802      	add	r0, sp, #8
 801709e:	f000 ffd5 	bl	801804c <xTaskCheckForTimeOut>
 80170a2:	2800      	cmp	r0, #0
 80170a4:	d135      	bne.n	8017112 <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 80170a6:	f001 fd2d 	bl	8018b04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80170aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d056      	beq.n	801715e <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 80170b0:	f001 fd4e 	bl	8018b50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80170b4:	4620      	mov	r0, r4
 80170b6:	f7ff fcd3 	bl	8016a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80170ba:	f000 fedf 	bl	8017e7c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80170be:	f001 fd21 	bl	8018b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170c4:	2e00      	cmp	r6, #0
 80170c6:	d135      	bne.n	8017134 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 80170c8:	9b01      	ldr	r3, [sp, #4]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d1d1      	bne.n	8017072 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 80170ce:	f001 fd3f 	bl	8018b50 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80170d2:	2000      	movs	r0, #0
}
 80170d4:	b005      	add	sp, #20
 80170d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d0b4      	beq.n	801704a <xQueueReceive+0x16>
	__asm volatile
 80170e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80170e4:	b672      	cpsid	i
 80170e6:	f383 8811 	msr	BASEPRI, r3
 80170ea:	f3bf 8f6f 	isb	sy
 80170ee:	f3bf 8f4f 	dsb	sy
 80170f2:	b662      	cpsie	i
 80170f4:	e7fe      	b.n	80170f4 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170f6:	9b01      	ldr	r3, [sp, #4]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d0aa      	beq.n	8017052 <xQueueReceive+0x1e>
 80170fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017100:	b672      	cpsid	i
 8017102:	f383 8811 	msr	BASEPRI, r3
 8017106:	f3bf 8f6f 	isb	sy
 801710a:	f3bf 8f4f 	dsb	sy
 801710e:	b662      	cpsie	i
 8017110:	e7fe      	b.n	8017110 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8017112:	4620      	mov	r0, r4
 8017114:	f7ff fca4 	bl	8016a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017118:	f000 feb0 	bl	8017e7c <xTaskResumeAll>
	taskENTER_CRITICAL();
 801711c:	f001 fcf2 	bl	8018b04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017122:	2b00      	cmp	r3, #0
 8017124:	d0d3      	beq.n	80170ce <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8017126:	f001 fd13 	bl	8018b50 <vPortExitCritical>
		taskENTER_CRITICAL();
 801712a:	f001 fceb 	bl	8018b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801712e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017130:	2e00      	cmp	r6, #0
 8017132:	d0c9      	beq.n	80170c8 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017134:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8017136:	b152      	cbz	r2, 801714e <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017138:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801713a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801713c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801713e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017140:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017142:	d301      	bcc.n	8017148 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017144:	6821      	ldr	r1, [r4, #0]
 8017146:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017148:	4628      	mov	r0, r5
 801714a:	f00e fb35 	bl	80257b8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801714e:	3e01      	subs	r6, #1
 8017150:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017152:	6923      	ldr	r3, [r4, #16]
 8017154:	bb23      	cbnz	r3, 80171a0 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8017156:	f001 fcfb 	bl	8018b50 <vPortExitCritical>
				return pdPASS;
 801715a:	2001      	movs	r0, #1
 801715c:	e7ba      	b.n	80170d4 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 801715e:	f001 fcf7 	bl	8018b50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017162:	9901      	ldr	r1, [sp, #4]
 8017164:	4640      	mov	r0, r8
 8017166:	f000 fedd 	bl	8017f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801716a:	4620      	mov	r0, r4
 801716c:	f7ff fc78 	bl	8016a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017170:	f000 fe84 	bl	8017e7c <xTaskResumeAll>
 8017174:	2800      	cmp	r0, #0
 8017176:	d1d8      	bne.n	801712a <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8017178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801717c:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8017180:	f3bf 8f4f 	dsb	sy
 8017184:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8017188:	e7cf      	b.n	801712a <xQueueReceive+0xf6>
 801718a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801718e:	b672      	cpsid	i
 8017190:	f383 8811 	msr	BASEPRI, r3
 8017194:	f3bf 8f6f 	isb	sy
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801719e:	e7fe      	b.n	801719e <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171a0:	f104 0010 	add.w	r0, r4, #16
 80171a4:	f000 fefa 	bl	8017f9c <xTaskRemoveFromEventList>
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d0d4      	beq.n	8017156 <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 80171ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80171b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80171b8:	f3bf 8f4f 	dsb	sy
 80171bc:	f3bf 8f6f 	isb	sy
 80171c0:	e7c9      	b.n	8017156 <xQueueReceive+0x122>
 80171c2:	bf00      	nop

080171c4 <xQueueSemaphoreTake>:
{
 80171c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c6:	b085      	sub	sp, #20
 80171c8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d057      	beq.n	801727e <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 80171ce:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80171d0:	4604      	mov	r4, r0
 80171d2:	b156      	cbz	r6, 80171ea <xQueueSemaphoreTake+0x26>
 80171d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171d8:	b672      	cpsid	i
 80171da:	f383 8811 	msr	BASEPRI, r3
 80171de:	f3bf 8f6f 	isb	sy
 80171e2:	f3bf 8f4f 	dsb	sy
 80171e6:	b662      	cpsie	i
 80171e8:	e7fe      	b.n	80171e8 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171ea:	f000 ff87 	bl	80180fc <xTaskGetSchedulerState>
 80171ee:	4605      	mov	r5, r0
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d04f      	beq.n	8017294 <xQueueSemaphoreTake+0xd0>
 80171f4:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 80171f6:	f001 fc85 	bl	8018b04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80171fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80171fc:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80171fe:	bb8b      	cbnz	r3, 8017264 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017200:	9b01      	ldr	r3, [sp, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	f000 809f 	beq.w	8017346 <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8017208:	2d00      	cmp	r5, #0
 801720a:	d05d      	beq.n	80172c8 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 801720c:	f001 fca0 	bl	8018b50 <vPortExitCritical>
		vTaskSuspendAll();
 8017210:	f000 fcd8 	bl	8017bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017214:	f001 fc76 	bl	8018b04 <vPortEnterCritical>
 8017218:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801721c:	2bff      	cmp	r3, #255	; 0xff
 801721e:	d101      	bne.n	8017224 <xQueueSemaphoreTake+0x60>
 8017220:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8017224:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017228:	2bff      	cmp	r3, #255	; 0xff
 801722a:	d101      	bne.n	8017230 <xQueueSemaphoreTake+0x6c>
 801722c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017230:	f001 fc8e 	bl	8018b50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017234:	a901      	add	r1, sp, #4
 8017236:	a802      	add	r0, sp, #8
 8017238:	f000 ff08 	bl	801804c <xTaskCheckForTimeOut>
 801723c:	2800      	cmp	r0, #0
 801723e:	d137      	bne.n	80172b0 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8017240:	f001 fc60 	bl	8018b04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017246:	2b00      	cmp	r3, #0
 8017248:	d042      	beq.n	80172d0 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 801724a:	f001 fc81 	bl	8018b50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801724e:	4620      	mov	r0, r4
 8017250:	f7ff fc06 	bl	8016a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017254:	f000 fe12 	bl	8017e7c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017258:	f001 fc54 	bl	8018b04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801725c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801725e:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017260:	2b00      	cmp	r3, #0
 8017262:	d0cd      	beq.n	8017200 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017264:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017266:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017268:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801726a:	2a00      	cmp	r2, #0
 801726c:	f000 8089 	beq.w	8017382 <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017270:	6923      	ldr	r3, [r4, #16]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d174      	bne.n	8017360 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8017276:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8017278:	f001 fc6a 	bl	8018b50 <vPortExitCritical>
				return pdPASS;
 801727c:	e046      	b.n	801730c <xQueueSemaphoreTake+0x148>
 801727e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017282:	b672      	cpsid	i
 8017284:	f383 8811 	msr	BASEPRI, r3
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8017292:	e7fe      	b.n	8017292 <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017294:	9b01      	ldr	r3, [sp, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d03b      	beq.n	8017312 <xQueueSemaphoreTake+0x14e>
 801729a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801729e:	b672      	cpsid	i
 80172a0:	f383 8811 	msr	BASEPRI, r3
 80172a4:	f3bf 8f6f 	isb	sy
 80172a8:	f3bf 8f4f 	dsb	sy
 80172ac:	b662      	cpsie	i
 80172ae:	e7fe      	b.n	80172ae <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 80172b0:	4620      	mov	r0, r4
 80172b2:	f7ff fbd5 	bl	8016a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80172b6:	f000 fde1 	bl	8017e7c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80172ba:	f001 fc23 	bl	8018b04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80172be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172c0:	b30b      	cbz	r3, 8017306 <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 80172c2:	f001 fc45 	bl	8018b50 <vPortExitCritical>
	return xReturn;
 80172c6:	e7c7      	b.n	8017258 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172c8:	a802      	add	r0, sp, #8
 80172ca:	f000 feb3 	bl	8018034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80172ce:	e79d      	b.n	801720c <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 80172d0:	f001 fc3e 	bl	8018b50 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80172d4:	6823      	ldr	r3, [r4, #0]
 80172d6:	b36b      	cbz	r3, 8017334 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80172d8:	9901      	ldr	r1, [sp, #4]
 80172da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80172de:	f000 fe21 	bl	8017f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80172e2:	4620      	mov	r0, r4
 80172e4:	f7ff fbbc 	bl	8016a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80172e8:	f000 fdc8 	bl	8017e7c <xTaskResumeAll>
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d1b3      	bne.n	8017258 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 80172f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80172f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80172fc:	f3bf 8f4f 	dsb	sy
 8017300:	f3bf 8f6f 	isb	sy
 8017304:	e7a8      	b.n	8017258 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8017306:	f001 fc23 	bl	8018b50 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801730a:	b926      	cbnz	r6, 8017316 <xQueueSemaphoreTake+0x152>
}
 801730c:	4630      	mov	r0, r6
 801730e:	b005      	add	sp, #20
 8017310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017312:	4606      	mov	r6, r0
 8017314:	e76f      	b.n	80171f6 <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8017316:	f001 fbf5 	bl	8018b04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801731a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801731c:	b119      	cbz	r1, 8017326 <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801731e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017320:	6819      	ldr	r1, [r3, #0]
 8017322:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017326:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8017328:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801732a:	f000 ffaf 	bl	801828c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801732e:	f001 fc0f 	bl	8018b50 <vPortExitCritical>
 8017332:	e7eb      	b.n	801730c <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8017334:	f001 fbe6 	bl	8018b04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017338:	68a0      	ldr	r0, [r4, #8]
 801733a:	f000 feef 	bl	801811c <xTaskPriorityInherit>
 801733e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8017340:	f001 fc06 	bl	8018b50 <vPortExitCritical>
 8017344:	e7c8      	b.n	80172d8 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017346:	2e00      	cmp	r6, #0
 8017348:	d0f1      	beq.n	801732e <xQueueSemaphoreTake+0x16a>
 801734a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801734e:	b672      	cpsid	i
 8017350:	f383 8811 	msr	BASEPRI, r3
 8017354:	f3bf 8f6f 	isb	sy
 8017358:	f3bf 8f4f 	dsb	sy
 801735c:	b662      	cpsie	i
 801735e:	e7fe      	b.n	801735e <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017360:	f104 0010 	add.w	r0, r4, #16
 8017364:	f000 fe1a 	bl	8017f9c <xTaskRemoveFromEventList>
 8017368:	2800      	cmp	r0, #0
 801736a:	d084      	beq.n	8017276 <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 801736c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017374:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017378:	f3bf 8f4f 	dsb	sy
 801737c:	f3bf 8f6f 	isb	sy
 8017380:	e779      	b.n	8017276 <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017382:	f000 fff1 	bl	8018368 <pvTaskIncrementMutexHeldCount>
 8017386:	60a0      	str	r0, [r4, #8]
 8017388:	e772      	b.n	8017270 <xQueueSemaphoreTake+0xac>
 801738a:	bf00      	nop

0801738c <xQueueReceiveFromISR>:
{
 801738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017390:	b330      	cbz	r0, 80173e0 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017392:	460e      	mov	r6, r1
 8017394:	4604      	mov	r4, r0
 8017396:	4617      	mov	r7, r2
 8017398:	b1a1      	cbz	r1, 80173c4 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801739a:	f001 fcb9 	bl	8018d10 <vPortValidateInterruptPriority>
	__asm volatile
 801739e:	f3ef 8911 	mrs	r9, BASEPRI
 80173a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173a6:	b672      	cpsid	i
 80173a8:	f383 8811 	msr	BASEPRI, r3
 80173ac:	f3bf 8f6f 	isb	sy
 80173b0:	f3bf 8f4f 	dsb	sy
 80173b4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80173b8:	b9ed      	cbnz	r5, 80173f6 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 80173ba:	4628      	mov	r0, r5
	__asm volatile
 80173bc:	f389 8811 	msr	BASEPRI, r9
}
 80173c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d0e7      	beq.n	801739a <xQueueReceiveFromISR+0xe>
	__asm volatile
 80173ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173ce:	b672      	cpsid	i
 80173d0:	f383 8811 	msr	BASEPRI, r3
 80173d4:	f3bf 8f6f 	isb	sy
 80173d8:	f3bf 8f4f 	dsb	sy
 80173dc:	b662      	cpsie	i
 80173de:	e7fe      	b.n	80173de <xQueueReceiveFromISR+0x52>
 80173e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173e4:	b672      	cpsid	i
 80173e6:	f383 8811 	msr	BASEPRI, r3
 80173ea:	f3bf 8f6f 	isb	sy
 80173ee:	f3bf 8f4f 	dsb	sy
 80173f2:	b662      	cpsie	i
	configASSERT( pxQueue );
 80173f4:	e7fe      	b.n	80173f4 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 80173f6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80173fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80173fc:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017400:	b142      	cbz	r2, 8017414 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017402:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017404:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017406:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017408:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801740a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801740c:	d215      	bcs.n	801743a <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801740e:	4630      	mov	r0, r6
 8017410:	f00e f9d2 	bl	80257b8 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017414:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8017416:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801741a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 801741c:	d009      	beq.n	8017432 <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801741e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8017422:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017424:	b25b      	sxtb	r3, r3
 8017426:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 801742a:	f389 8811 	msr	BASEPRI, r9
}
 801742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017432:	6923      	ldr	r3, [r4, #16]
 8017434:	b923      	cbnz	r3, 8017440 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8017436:	2001      	movs	r0, #1
 8017438:	e7c0      	b.n	80173bc <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801743a:	6821      	ldr	r1, [r4, #0]
 801743c:	60e1      	str	r1, [r4, #12]
 801743e:	e7e6      	b.n	801740e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017440:	f104 0010 	add.w	r0, r4, #16
 8017444:	f000 fdaa 	bl	8017f9c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8017448:	2f00      	cmp	r7, #0
 801744a:	d0f4      	beq.n	8017436 <xQueueReceiveFromISR+0xaa>
 801744c:	2800      	cmp	r0, #0
 801744e:	d0f2      	beq.n	8017436 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017450:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8017452:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017454:	603b      	str	r3, [r7, #0]
 8017456:	e7b1      	b.n	80173bc <xQueueReceiveFromISR+0x30>

08017458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017458:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801745a:	2300      	movs	r3, #0
 801745c:	4c08      	ldr	r4, [pc, #32]	; (8017480 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801745e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8017462:	b12a      	cbz	r2, 8017470 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017464:	3301      	adds	r3, #1
 8017466:	2b08      	cmp	r3, #8
 8017468:	d1f9      	bne.n	801745e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801746a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801746e:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017470:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017474:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8017478:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 801747c:	6050      	str	r0, [r2, #4]
	}
 801747e:	4770      	bx	lr
 8017480:	200066e8 	.word	0x200066e8

08017484 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017484:	b570      	push	{r4, r5, r6, lr}
 8017486:	4604      	mov	r4, r0
 8017488:	460e      	mov	r6, r1
 801748a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801748c:	f001 fb3a 	bl	8018b04 <vPortEnterCritical>
 8017490:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017494:	2bff      	cmp	r3, #255	; 0xff
 8017496:	d102      	bne.n	801749e <vQueueWaitForMessageRestricted+0x1a>
 8017498:	2300      	movs	r3, #0
 801749a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801749e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80174a2:	2bff      	cmp	r3, #255	; 0xff
 80174a4:	d102      	bne.n	80174ac <vQueueWaitForMessageRestricted+0x28>
 80174a6:	2300      	movs	r3, #0
 80174a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80174ac:	f001 fb50 	bl	8018b50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80174b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80174b2:	b123      	cbz	r3, 80174be <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80174b4:	4620      	mov	r0, r4
	}
 80174b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80174ba:	f7ff bad1 	b.w	8016a60 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80174be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80174c2:	462a      	mov	r2, r5
 80174c4:	4631      	mov	r1, r6
 80174c6:	f000 fd49 	bl	8017f5c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80174ca:	4620      	mov	r0, r4
	}
 80174cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80174d0:	f7ff bac6 	b.w	8016a60 <prvUnlockQueue>

080174d4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80174d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174d8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80174da:	f001 fb13 	bl	8018b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80174de:	4a35      	ldr	r2, [pc, #212]	; (80175b4 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80174e0:	4d35      	ldr	r5, [pc, #212]	; (80175b8 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80174e2:	6813      	ldr	r3, [r2, #0]
 80174e4:	3301      	adds	r3, #1
 80174e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80174e8:	682b      	ldr	r3, [r5, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d034      	beq.n	8017558 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80174ee:	4e33      	ldr	r6, [pc, #204]	; (80175bc <prvAddNewTaskToReadyList+0xe8>)
 80174f0:	6833      	ldr	r3, [r6, #0]
 80174f2:	b343      	cbz	r3, 8017546 <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80174f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80174f6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80175e0 <prvAddNewTaskToReadyList+0x10c>
 80174fa:	2201      	movs	r2, #1
		uxTaskNumber++;
 80174fc:	4f30      	ldr	r7, [pc, #192]	; (80175c0 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80174fe:	4931      	ldr	r1, [pc, #196]	; (80175c4 <prvAddNewTaskToReadyList+0xf0>)
 8017500:	409a      	lsls	r2, r3
 8017502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017506:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	3301      	adds	r3, #1
 801750e:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8017510:	680b      	ldr	r3, [r1, #0]
 8017512:	431a      	orrs	r2, r3
 8017514:	600a      	str	r2, [r1, #0]
 8017516:	1d21      	adds	r1, r4, #4
 8017518:	f7ff fa24 	bl	8016964 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801751c:	f001 fb18 	bl	8018b50 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017520:	6833      	ldr	r3, [r6, #0]
 8017522:	b173      	cbz	r3, 8017542 <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017524:	682a      	ldr	r2, [r5, #0]
 8017526:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017528:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801752a:	429a      	cmp	r2, r3
 801752c:	d209      	bcs.n	8017542 <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801752e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017536:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801753a:	f3bf 8f4f 	dsb	sy
 801753e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017546:	682a      	ldr	r2, [r5, #0]
 8017548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801754a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801754c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80175e0 <prvAddNewTaskToReadyList+0x10c>
 8017550:	429a      	cmp	r2, r3
 8017552:	d8d2      	bhi.n	80174fa <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8017554:	602c      	str	r4, [r5, #0]
 8017556:	e7d0      	b.n	80174fa <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8017558:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801755a:	6813      	ldr	r3, [r2, #0]
 801755c:	2b01      	cmp	r3, #1
 801755e:	d004      	beq.n	801756a <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8017560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017562:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80175e0 <prvAddNewTaskToReadyList+0x10c>
 8017566:	4e15      	ldr	r6, [pc, #84]	; (80175bc <prvAddNewTaskToReadyList+0xe8>)
 8017568:	e7c7      	b.n	80174fa <prvAddNewTaskToReadyList+0x26>
 801756a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80175e0 <prvAddNewTaskToReadyList+0x10c>
 801756e:	4646      	mov	r6, r8
 8017570:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017574:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017576:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017578:	f7ff f9e4 	bl	8016944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801757c:	42b7      	cmp	r7, r6
 801757e:	d1f9      	bne.n	8017574 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017580:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80175e4 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8017584:	4f10      	ldr	r7, [pc, #64]	; (80175c8 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8017586:	4648      	mov	r0, r9
 8017588:	4e0c      	ldr	r6, [pc, #48]	; (80175bc <prvAddNewTaskToReadyList+0xe8>)
 801758a:	f7ff f9db 	bl	8016944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801758e:	4638      	mov	r0, r7
 8017590:	f7ff f9d8 	bl	8016944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017594:	480d      	ldr	r0, [pc, #52]	; (80175cc <prvAddNewTaskToReadyList+0xf8>)
 8017596:	f7ff f9d5 	bl	8016944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801759a:	480d      	ldr	r0, [pc, #52]	; (80175d0 <prvAddNewTaskToReadyList+0xfc>)
 801759c:	f7ff f9d2 	bl	8016944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80175a0:	480c      	ldr	r0, [pc, #48]	; (80175d4 <prvAddNewTaskToReadyList+0x100>)
 80175a2:	f7ff f9cf 	bl	8016944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80175a6:	4b0c      	ldr	r3, [pc, #48]	; (80175d8 <prvAddNewTaskToReadyList+0x104>)
 80175a8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80175ac:	4b0b      	ldr	r3, [pc, #44]	; (80175dc <prvAddNewTaskToReadyList+0x108>)
 80175ae:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80175b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 80175b2:	e7a2      	b.n	80174fa <prvAddNewTaskToReadyList+0x26>
 80175b4:	200067c0 	.word	0x200067c0
 80175b8:	20006728 	.word	0x20006728
 80175bc:	2000681c 	.word	0x2000681c
 80175c0:	200067d0 	.word	0x200067d0
 80175c4:	200067d4 	.word	0x200067d4
 80175c8:	200067ec 	.word	0x200067ec
 80175cc:	20006808 	.word	0x20006808
 80175d0:	20006834 	.word	0x20006834
 80175d4:	20006820 	.word	0x20006820
 80175d8:	2000672c 	.word	0x2000672c
 80175dc:	20006730 	.word	0x20006730
 80175e0:	20006734 	.word	0x20006734
 80175e4:	200067d8 	.word	0x200067d8

080175e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80175e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80175ea:	4b1b      	ldr	r3, [pc, #108]	; (8017658 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80175ec:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175ee:	4e1b      	ldr	r6, [pc, #108]	; (801765c <prvAddCurrentTaskToDelayedList+0x74>)
{
 80175f0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80175f2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175f4:	6833      	ldr	r3, [r6, #0]
 80175f6:	1d18      	adds	r0, r3, #4
 80175f8:	f7ff f9dc 	bl	80169b4 <uxListRemove>
 80175fc:	b948      	cbnz	r0, 8017612 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80175fe:	6833      	ldr	r3, [r6, #0]
 8017600:	4917      	ldr	r1, [pc, #92]	; (8017660 <prvAddCurrentTaskToDelayedList+0x78>)
 8017602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017604:	2301      	movs	r3, #1
 8017606:	fa03 f202 	lsl.w	r2, r3, r2
 801760a:	680b      	ldr	r3, [r1, #0]
 801760c:	ea23 0302 	bic.w	r3, r3, r2
 8017610:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017612:	1c63      	adds	r3, r4, #1
 8017614:	d100      	bne.n	8017618 <prvAddCurrentTaskToDelayedList+0x30>
 8017616:	b9bf      	cbnz	r7, 8017648 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017618:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801761a:	6833      	ldr	r3, [r6, #0]
 801761c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801761e:	d307      	bcc.n	8017630 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017620:	4b10      	ldr	r3, [pc, #64]	; (8017664 <prvAddCurrentTaskToDelayedList+0x7c>)
 8017622:	6818      	ldr	r0, [r3, #0]
 8017624:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801762a:	3104      	adds	r1, #4
 801762c:	f7ff b9aa 	b.w	8016984 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017630:	4b0d      	ldr	r3, [pc, #52]	; (8017668 <prvAddCurrentTaskToDelayedList+0x80>)
 8017632:	6818      	ldr	r0, [r3, #0]
 8017634:	6831      	ldr	r1, [r6, #0]
 8017636:	3104      	adds	r1, #4
 8017638:	f7ff f9a4 	bl	8016984 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801763c:	4b0b      	ldr	r3, [pc, #44]	; (801766c <prvAddCurrentTaskToDelayedList+0x84>)
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	42a2      	cmp	r2, r4
 8017642:	d900      	bls.n	8017646 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8017644:	601c      	str	r4, [r3, #0]
}
 8017646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017648:	6831      	ldr	r1, [r6, #0]
 801764a:	4809      	ldr	r0, [pc, #36]	; (8017670 <prvAddCurrentTaskToDelayedList+0x88>)
 801764c:	3104      	adds	r1, #4
}
 801764e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017652:	f7ff b987 	b.w	8016964 <vListInsertEnd>
 8017656:	bf00      	nop
 8017658:	20006848 	.word	0x20006848
 801765c:	20006728 	.word	0x20006728
 8017660:	200067d4 	.word	0x200067d4
 8017664:	20006730 	.word	0x20006730
 8017668:	2000672c 	.word	0x2000672c
 801766c:	20006800 	.word	0x20006800
 8017670:	20006820 	.word	0x20006820

08017674 <prvDeleteTCB>:
	{
 8017674:	b510      	push	{r4, lr}
 8017676:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017678:	304c      	adds	r0, #76	; 0x4c
 801767a:	f00f f953 	bl	8026924 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801767e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8017682:	b173      	cbz	r3, 80176a2 <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017684:	2b01      	cmp	r3, #1
 8017686:	d015      	beq.n	80176b4 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017688:	2b02      	cmp	r3, #2
 801768a:	d012      	beq.n	80176b2 <prvDeleteTCB+0x3e>
	__asm volatile
 801768c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017690:	b672      	cpsid	i
 8017692:	f383 8811 	msr	BASEPRI, r3
 8017696:	f3bf 8f6f 	isb	sy
 801769a:	f3bf 8f4f 	dsb	sy
 801769e:	b662      	cpsie	i
 80176a0:	e7fe      	b.n	80176a0 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80176a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80176a4:	f001 fc34 	bl	8018f10 <vPortFree>
				vPortFree( pxTCB );
 80176a8:	4620      	mov	r0, r4
	}
 80176aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80176ae:	f001 bc2f 	b.w	8018f10 <vPortFree>
	}
 80176b2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80176b4:	4620      	mov	r0, r4
	}
 80176b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80176ba:	f001 bc29 	b.w	8018f10 <vPortFree>
 80176be:	bf00      	nop

080176c0 <prvIdleTask>:
{
 80176c0:	4c16      	ldr	r4, [pc, #88]	; (801771c <prvIdleTask+0x5c>)
				taskYIELD();
 80176c2:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80176c6:	4e16      	ldr	r6, [pc, #88]	; (8017720 <prvIdleTask+0x60>)
 80176c8:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80176cc:	4d15      	ldr	r5, [pc, #84]	; (8017724 <prvIdleTask+0x64>)
 80176ce:	f8df a058 	ldr.w	sl, [pc, #88]	; 8017728 <prvIdleTask+0x68>
{
 80176d2:	b580      	push	{r7, lr}
 80176d4:	e011      	b.n	80176fa <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80176d6:	f001 fa15 	bl	8018b04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80176da:	68f3      	ldr	r3, [r6, #12]
 80176dc:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80176de:	1d38      	adds	r0, r7, #4
 80176e0:	f7ff f968 	bl	80169b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80176e4:	682b      	ldr	r3, [r5, #0]
 80176e6:	3b01      	subs	r3, #1
 80176e8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	3b01      	subs	r3, #1
 80176ee:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80176f0:	f001 fa2e 	bl	8018b50 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80176f4:	4638      	mov	r0, r7
 80176f6:	f7ff ffbd 	bl	8017674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80176fa:	6823      	ldr	r3, [r4, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d1ea      	bne.n	80176d6 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017700:	f8da 3000 	ldr.w	r3, [sl]
 8017704:	2b01      	cmp	r3, #1
 8017706:	d905      	bls.n	8017714 <prvIdleTask+0x54>
				taskYIELD();
 8017708:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 801770c:	f3bf 8f4f 	dsb	sy
 8017710:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8017714:	f7e9 fdb0 	bl	8001278 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017718:	e7ef      	b.n	80176fa <prvIdleTask+0x3a>
 801771a:	bf00      	nop
 801771c:	200067c4 	.word	0x200067c4
 8017720:	20006834 	.word	0x20006834
 8017724:	200067c0 	.word	0x200067c0
 8017728:	20006734 	.word	0x20006734

0801772c <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 801772c:	4b1d      	ldr	r3, [pc, #116]	; (80177a4 <vTaskSwitchContext.part.0+0x78>)
 801772e:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 8017730:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 8017732:	4c1d      	ldr	r4, [pc, #116]	; (80177a8 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8017734:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017736:	6822      	ldr	r2, [r4, #0]
 8017738:	6823      	ldr	r3, [r4, #0]
 801773a:	6812      	ldr	r2, [r2, #0]
 801773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801773e:	429a      	cmp	r2, r3
 8017740:	d927      	bls.n	8017792 <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017742:	4b1a      	ldr	r3, [pc, #104]	; (80177ac <vTaskSwitchContext.part.0+0x80>)
 8017744:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017746:	fab3 f383 	clz	r3, r3
 801774a:	b2db      	uxtb	r3, r3
 801774c:	4a18      	ldr	r2, [pc, #96]	; (80177b0 <vTaskSwitchContext.part.0+0x84>)
 801774e:	f1c3 031f 	rsb	r3, r3, #31
 8017752:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017756:	0099      	lsls	r1, r3, #2
 8017758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801775c:	5850      	ldr	r0, [r2, r1]
 801775e:	b950      	cbnz	r0, 8017776 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 8017760:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017764:	b672      	cpsid	i
 8017766:	f383 8811 	msr	BASEPRI, r3
 801776a:	f3bf 8f6f 	isb	sy
 801776e:	f3bf 8f4f 	dsb	sy
 8017772:	b662      	cpsie	i
 8017774:	e7fe      	b.n	8017774 <vTaskSwitchContext.part.0+0x48>
 8017776:	6858      	ldr	r0, [r3, #4]
 8017778:	3108      	adds	r1, #8
 801777a:	6840      	ldr	r0, [r0, #4]
 801777c:	440a      	add	r2, r1
 801777e:	4290      	cmp	r0, r2
 8017780:	6058      	str	r0, [r3, #4]
 8017782:	d00c      	beq.n	801779e <vTaskSwitchContext.part.0+0x72>
 8017784:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017786:	4a0b      	ldr	r2, [pc, #44]	; (80177b4 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017788:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801778a:	6823      	ldr	r3, [r4, #0]
 801778c:	334c      	adds	r3, #76	; 0x4c
 801778e:	6013      	str	r3, [r2, #0]
}
 8017790:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8017792:	6820      	ldr	r0, [r4, #0]
 8017794:	6821      	ldr	r1, [r4, #0]
 8017796:	3134      	adds	r1, #52	; 0x34
 8017798:	f7e9 fd70 	bl	800127c <vApplicationStackOverflowHook>
 801779c:	e7d1      	b.n	8017742 <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801779e:	6840      	ldr	r0, [r0, #4]
 80177a0:	6058      	str	r0, [r3, #4]
 80177a2:	e7ef      	b.n	8017784 <vTaskSwitchContext.part.0+0x58>
 80177a4:	2000684c 	.word	0x2000684c
 80177a8:	20006728 	.word	0x20006728
 80177ac:	200067d4 	.word	0x200067d4
 80177b0:	20006734 	.word	0x20006734
 80177b4:	200004c4 	.word	0x200004c4

080177b8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80177be:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177c4:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177c6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80177c8:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177ca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177ce:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80177d2:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80177d6:	2900      	cmp	r1, #0
 80177d8:	d041      	beq.n	801785e <prvInitialiseNewTask.constprop.0+0xa6>
 80177da:	f101 3cff 	add.w	ip, r1, #4294967295
 80177de:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80177e2:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80177e4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 80177e8:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80177ec:	b10d      	cbz	r5, 80177f2 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80177ee:	458c      	cmp	ip, r1
 80177f0:	d1f8      	bne.n	80177e4 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80177f2:	2300      	movs	r3, #0
 80177f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80177f8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80177fa:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80177fe:	1d20      	adds	r0, r4, #4
 8017800:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8017802:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8017806:	bf28      	it	cs
 8017808:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801780a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801780c:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801780e:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017812:	f7ff f8a3 	bl	801695c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017816:	f104 0018 	add.w	r0, r4, #24
 801781a:	f7ff f89f 	bl	801695c <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801781e:	4651      	mov	r1, sl
 8017820:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8017822:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017826:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801782a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801782c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801782e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017830:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017834:	f00d ffe8 	bl	8025808 <memset>
 8017838:	4b0a      	ldr	r3, [pc, #40]	; (8017864 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801783a:	464a      	mov	r2, r9
 801783c:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801783e:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017840:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017842:	4b09      	ldr	r3, [pc, #36]	; (8017868 <prvInitialiseNewTask.constprop.0+0xb0>)
 8017844:	6563      	str	r3, [r4, #84]	; 0x54
 8017846:	4b09      	ldr	r3, [pc, #36]	; (801786c <prvInitialiseNewTask.constprop.0+0xb4>)
 8017848:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801784a:	f001 f92b 	bl	8018aa4 <pxPortInitialiseStack>
 801784e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8017850:	f1b8 0f00 	cmp.w	r8, #0
 8017854:	d001      	beq.n	801785a <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017856:	f8c8 4000 	str.w	r4, [r8]
}
 801785a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801785e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8017862:	e7c9      	b.n	80177f8 <prvInitialiseNewTask.constprop.0+0x40>
 8017864:	0804769c 	.word	0x0804769c
 8017868:	080476bc 	.word	0x080476bc
 801786c:	0804767c 	.word	0x0804767c

08017870 <xTaskCreateStatic>:
	{
 8017870:	b530      	push	{r4, r5, lr}
 8017872:	b087      	sub	sp, #28
 8017874:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8017876:	b1e4      	cbz	r4, 80178b2 <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8017878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801787a:	b17d      	cbz	r5, 801789c <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 801787c:	25b4      	movs	r5, #180	; 0xb4
 801787e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017880:	9d05      	ldr	r5, [sp, #20]
 8017882:	2db4      	cmp	r5, #180	; 0xb4
 8017884:	d020      	beq.n	80178c8 <xTaskCreateStatic+0x58>
 8017886:	f04f 0330 	mov.w	r3, #48	; 0x30
 801788a:	b672      	cpsid	i
 801788c:	f383 8811 	msr	BASEPRI, r3
 8017890:	f3bf 8f6f 	isb	sy
 8017894:	f3bf 8f4f 	dsb	sy
 8017898:	b662      	cpsie	i
 801789a:	e7fe      	b.n	801789a <xTaskCreateStatic+0x2a>
 801789c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178a0:	b672      	cpsid	i
 80178a2:	f383 8811 	msr	BASEPRI, r3
 80178a6:	f3bf 8f6f 	isb	sy
 80178aa:	f3bf 8f4f 	dsb	sy
 80178ae:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80178b0:	e7fe      	b.n	80178b0 <xTaskCreateStatic+0x40>
 80178b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178b6:	b672      	cpsid	i
 80178b8:	f383 8811 	msr	BASEPRI, r3
 80178bc:	f3bf 8f6f 	isb	sy
 80178c0:	f3bf 8f4f 	dsb	sy
 80178c4:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80178c6:	e7fe      	b.n	80178c6 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80178c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178ca:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80178cc:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178ce:	9502      	str	r5, [sp, #8]
 80178d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80178d2:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80178d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178d6:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178da:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80178dc:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178de:	9401      	str	r4, [sp, #4]
 80178e0:	f7ff ff6a 	bl	80177b8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80178e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80178e6:	f7ff fdf5 	bl	80174d4 <prvAddNewTaskToReadyList>
	}
 80178ea:	9804      	ldr	r0, [sp, #16]
 80178ec:	b007      	add	sp, #28
 80178ee:	bd30      	pop	{r4, r5, pc}

080178f0 <xTaskCreate>:
	{
 80178f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178f4:	4607      	mov	r7, r0
 80178f6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80178f8:	0090      	lsls	r0, r2, #2
	{
 80178fa:	4615      	mov	r5, r2
 80178fc:	4688      	mov	r8, r1
 80178fe:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017900:	f001 fa6a 	bl	8018dd8 <pvPortMalloc>
			if( pxStack != NULL )
 8017904:	b1d8      	cbz	r0, 801793e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017906:	4604      	mov	r4, r0
 8017908:	20b4      	movs	r0, #180	; 0xb4
 801790a:	f001 fa65 	bl	8018dd8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801790e:	4606      	mov	r6, r0
 8017910:	b1d0      	cbz	r0, 8017948 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8017912:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017914:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017916:	464b      	mov	r3, r9
 8017918:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801791a:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801791e:	4641      	mov	r1, r8
 8017920:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017922:	4638      	mov	r0, r7
 8017924:	9602      	str	r6, [sp, #8]
 8017926:	9401      	str	r4, [sp, #4]
 8017928:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801792a:	9400      	str	r4, [sp, #0]
 801792c:	f7ff ff44 	bl	80177b8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017930:	4630      	mov	r0, r6
 8017932:	f7ff fdcf 	bl	80174d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017936:	2001      	movs	r0, #1
	}
 8017938:	b005      	add	sp, #20
 801793a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801793e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8017942:	b005      	add	sp, #20
 8017944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8017948:	4620      	mov	r0, r4
 801794a:	f001 fae1 	bl	8018f10 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801794e:	f04f 30ff 	mov.w	r0, #4294967295
 8017952:	e7f1      	b.n	8017938 <xTaskCreate+0x48>

08017954 <vTaskSuspend>:
	{
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017958:	4e3c      	ldr	r6, [pc, #240]	; (8017a4c <vTaskSuspend+0xf8>)
		taskENTER_CRITICAL();
 801795a:	f001 f8d3 	bl	8018b04 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801795e:	2c00      	cmp	r4, #0
 8017960:	d04e      	beq.n	8017a00 <vTaskSuspend+0xac>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017962:	1d25      	adds	r5, r4, #4
 8017964:	4628      	mov	r0, r5
 8017966:	f7ff f825 	bl	80169b4 <uxListRemove>
 801796a:	b930      	cbnz	r0, 801797a <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801796c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801796e:	4938      	ldr	r1, [pc, #224]	; (8017a50 <vTaskSuspend+0xfc>)
 8017970:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	58cb      	ldr	r3, [r1, r3]
 8017978:	b35b      	cbz	r3, 80179d2 <vTaskSuspend+0x7e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801797a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801797c:	b11b      	cbz	r3, 8017986 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801797e:	f104 0018 	add.w	r0, r4, #24
 8017982:	f7ff f817 	bl	80169b4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8017986:	4629      	mov	r1, r5
 8017988:	4832      	ldr	r0, [pc, #200]	; (8017a54 <vTaskSuspend+0x100>)
 801798a:	f7fe ffeb 	bl	8016964 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801798e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8017992:	2b01      	cmp	r3, #1
 8017994:	d102      	bne.n	801799c <vTaskSuspend+0x48>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017996:	2300      	movs	r3, #0
 8017998:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if( xSchedulerRunning != pdFALSE )
 801799c:	4d2e      	ldr	r5, [pc, #184]	; (8017a58 <vTaskSuspend+0x104>)
		taskEXIT_CRITICAL();
 801799e:	f001 f8d7 	bl	8018b50 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80179a2:	682b      	ldr	r3, [r5, #0]
 80179a4:	b9eb      	cbnz	r3, 80179e2 <vTaskSuspend+0x8e>
		if( pxTCB == pxCurrentTCB )
 80179a6:	6833      	ldr	r3, [r6, #0]
 80179a8:	42a3      	cmp	r3, r4
 80179aa:	d000      	beq.n	80179ae <vTaskSuspend+0x5a>
	}
 80179ac:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 80179ae:	682b      	ldr	r3, [r5, #0]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d02c      	beq.n	8017a0e <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
 80179b4:	4b29      	ldr	r3, [pc, #164]	; (8017a5c <vTaskSuspend+0x108>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d030      	beq.n	8017a1e <vTaskSuspend+0xca>
 80179bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80179c0:	b672      	cpsid	i
 80179c2:	f383 8811 	msr	BASEPRI, r3
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	f3bf 8f4f 	dsb	sy
 80179ce:	b662      	cpsie	i
 80179d0:	e7fe      	b.n	80179d0 <vTaskSuspend+0x7c>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80179d2:	4923      	ldr	r1, [pc, #140]	; (8017a60 <vTaskSuspend+0x10c>)
 80179d4:	2301      	movs	r3, #1
 80179d6:	4093      	lsls	r3, r2
 80179d8:	680a      	ldr	r2, [r1, #0]
 80179da:	ea22 0203 	bic.w	r2, r2, r3
 80179de:	600a      	str	r2, [r1, #0]
 80179e0:	e7cb      	b.n	801797a <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 80179e2:	f001 f88f 	bl	8018b04 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179e6:	4b1f      	ldr	r3, [pc, #124]	; (8017a64 <vTaskSuspend+0x110>)
 80179e8:	681a      	ldr	r2, [r3, #0]
 80179ea:	6812      	ldr	r2, [r2, #0]
 80179ec:	b152      	cbz	r2, 8017a04 <vTaskSuspend+0xb0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179ee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80179f0:	4b1d      	ldr	r3, [pc, #116]	; (8017a68 <vTaskSuspend+0x114>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179f2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80179f4:	68d2      	ldr	r2, [r2, #12]
 80179f6:	6852      	ldr	r2, [r2, #4]
 80179f8:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 80179fa:	f001 f8a9 	bl	8018b50 <vPortExitCritical>
 80179fe:	e7d2      	b.n	80179a6 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017a00:	6834      	ldr	r4, [r6, #0]
 8017a02:	e7ae      	b.n	8017962 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8017a04:	4b18      	ldr	r3, [pc, #96]	; (8017a68 <vTaskSuspend+0x114>)
 8017a06:	f04f 32ff 	mov.w	r2, #4294967295
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	e7f5      	b.n	80179fa <vTaskSuspend+0xa6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017a0e:	4911      	ldr	r1, [pc, #68]	; (8017a54 <vTaskSuspend+0x100>)
 8017a10:	4a16      	ldr	r2, [pc, #88]	; (8017a6c <vTaskSuspend+0x118>)
 8017a12:	6809      	ldr	r1, [r1, #0]
 8017a14:	6812      	ldr	r2, [r2, #0]
 8017a16:	4291      	cmp	r1, r2
 8017a18:	d10c      	bne.n	8017a34 <vTaskSuspend+0xe0>
					pxCurrentTCB = NULL;
 8017a1a:	6033      	str	r3, [r6, #0]
	}
 8017a1c:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 8017a1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017a2a:	f3bf 8f4f 	dsb	sy
 8017a2e:	f3bf 8f6f 	isb	sy
	}
 8017a32:	bd70      	pop	{r4, r5, r6, pc}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a34:	4b09      	ldr	r3, [pc, #36]	; (8017a5c <vTaskSuspend+0x108>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	b11b      	cbz	r3, 8017a42 <vTaskSuspend+0xee>
		xYieldPending = pdTRUE;
 8017a3a:	4b0d      	ldr	r3, [pc, #52]	; (8017a70 <vTaskSuspend+0x11c>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	601a      	str	r2, [r3, #0]
	}
 8017a40:	bd70      	pop	{r4, r5, r6, pc}
 8017a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a46:	f7ff be71 	b.w	801772c <vTaskSwitchContext.part.0>
 8017a4a:	bf00      	nop
 8017a4c:	20006728 	.word	0x20006728
 8017a50:	20006734 	.word	0x20006734
 8017a54:	20006820 	.word	0x20006820
 8017a58:	2000681c 	.word	0x2000681c
 8017a5c:	200067cc 	.word	0x200067cc
 8017a60:	200067d4 	.word	0x200067d4
 8017a64:	2000672c 	.word	0x2000672c
 8017a68:	20006800 	.word	0x20006800
 8017a6c:	200067c0 	.word	0x200067c0
 8017a70:	2000684c 	.word	0x2000684c

08017a74 <vTaskResume>:
		configASSERT( xTaskToResume );
 8017a74:	b198      	cbz	r0, 8017a9e <vTaskResume+0x2a>
	{
 8017a76:	b570      	push	{r4, r5, r6, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a78:	4d23      	ldr	r5, [pc, #140]	; (8017b08 <vTaskResume+0x94>)
	{
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a7e:	682b      	ldr	r3, [r5, #0]
 8017a80:	4283      	cmp	r3, r0
 8017a82:	d00a      	beq.n	8017a9a <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8017a84:	f001 f83e 	bl	8018b04 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017a88:	4b20      	ldr	r3, [pc, #128]	; (8017b0c <vTaskResume+0x98>)
 8017a8a:	6962      	ldr	r2, [r4, #20]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d011      	beq.n	8017ab4 <vTaskResume+0x40>
	}
 8017a90:	b002      	add	sp, #8
 8017a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8017a96:	f001 b85b 	b.w	8018b50 <vPortExitCritical>
	}
 8017a9a:	b002      	add	sp, #8
 8017a9c:	bd70      	pop	{r4, r5, r6, pc}
 8017a9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017aa2:	b672      	cpsid	i
 8017aa4:	f383 8811 	msr	BASEPRI, r3
 8017aa8:	f3bf 8f6f 	isb	sy
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	b662      	cpsie	i
		configASSERT( xTaskToResume );
 8017ab2:	e7fe      	b.n	8017ab2 <vTaskResume+0x3e>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017ab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017ab6:	4a16      	ldr	r2, [pc, #88]	; (8017b10 <vTaskResume+0x9c>)
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d0e9      	beq.n	8017a90 <vTaskResume+0x1c>
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d1e7      	bne.n	8017a90 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017ac0:	1d21      	adds	r1, r4, #4
 8017ac2:	4608      	mov	r0, r1
 8017ac4:	9101      	str	r1, [sp, #4]
 8017ac6:	f7fe ff75 	bl	80169b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017aca:	4a12      	ldr	r2, [pc, #72]	; (8017b14 <vTaskResume+0xa0>)
 8017acc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017ace:	2301      	movs	r3, #1
 8017ad0:	6816      	ldr	r6, [r2, #0]
 8017ad2:	4083      	lsls	r3, r0
 8017ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017ad8:	9901      	ldr	r1, [sp, #4]
 8017ada:	4333      	orrs	r3, r6
 8017adc:	6013      	str	r3, [r2, #0]
 8017ade:	4b0e      	ldr	r3, [pc, #56]	; (8017b18 <vTaskResume+0xa4>)
 8017ae0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017ae4:	f7fe ff3e 	bl	8016964 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017ae8:	682b      	ldr	r3, [r5, #0]
 8017aea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d3ce      	bcc.n	8017a90 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8017af2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017afe:	f3bf 8f4f 	dsb	sy
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	e7c3      	b.n	8017a90 <vTaskResume+0x1c>
 8017b08:	20006728 	.word	0x20006728
 8017b0c:	20006820 	.word	0x20006820
 8017b10:	20006808 	.word	0x20006808
 8017b14:	200067d4 	.word	0x200067d4
 8017b18:	20006734 	.word	0x20006734

08017b1c <vTaskStartScheduler>:
{
 8017b1c:	b510      	push	{r4, lr}
 8017b1e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017b20:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017b22:	aa07      	add	r2, sp, #28
 8017b24:	a906      	add	r1, sp, #24
 8017b26:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017b28:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017b2c:	f7e9 fbaa 	bl	8001284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017b30:	4623      	mov	r3, r4
 8017b32:	9a07      	ldr	r2, [sp, #28]
 8017b34:	9400      	str	r4, [sp, #0]
 8017b36:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8017b3a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8017b3e:	491a      	ldr	r1, [pc, #104]	; (8017ba8 <vTaskStartScheduler+0x8c>)
 8017b40:	481a      	ldr	r0, [pc, #104]	; (8017bac <vTaskStartScheduler+0x90>)
 8017b42:	f7ff fe95 	bl	8017870 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8017b46:	b1f8      	cbz	r0, 8017b88 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8017b48:	f000 fcfa 	bl	8018540 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8017b4c:	2801      	cmp	r0, #1
 8017b4e:	d11d      	bne.n	8017b8c <vTaskStartScheduler+0x70>
 8017b50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b54:	b672      	cpsid	i
 8017b56:	f383 8811 	msr	BASEPRI, r3
 8017b5a:	f3bf 8f6f 	isb	sy
 8017b5e:	f3bf 8f4f 	dsb	sy
 8017b62:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b64:	4b12      	ldr	r3, [pc, #72]	; (8017bb0 <vTaskStartScheduler+0x94>)
 8017b66:	4a13      	ldr	r2, [pc, #76]	; (8017bb4 <vTaskStartScheduler+0x98>)
 8017b68:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b6a:	4913      	ldr	r1, [pc, #76]	; (8017bb8 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b6c:	334c      	adds	r3, #76	; 0x4c
 8017b6e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b70:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8017b74:	4a11      	ldr	r2, [pc, #68]	; (8017bbc <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b76:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b78:	4b11      	ldr	r3, [pc, #68]	; (8017bc0 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8017b7a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b7c:	601c      	str	r4, [r3, #0]
}
 8017b7e:	b008      	add	sp, #32
 8017b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8017b84:	f001 b85a 	b.w	8018c3c <xPortStartScheduler>
}
 8017b88:	b008      	add	sp, #32
 8017b8a:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b8c:	3001      	adds	r0, #1
 8017b8e:	d1fb      	bne.n	8017b88 <vTaskStartScheduler+0x6c>
 8017b90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b94:	b672      	cpsid	i
 8017b96:	f383 8811 	msr	BASEPRI, r3
 8017b9a:	f3bf 8f6f 	isb	sy
 8017b9e:	f3bf 8f4f 	dsb	sy
 8017ba2:	b662      	cpsie	i
 8017ba4:	e7fe      	b.n	8017ba4 <vTaskStartScheduler+0x88>
 8017ba6:	bf00      	nop
 8017ba8:	0802e708 	.word	0x0802e708
 8017bac:	080176c1 	.word	0x080176c1
 8017bb0:	20006728 	.word	0x20006728
 8017bb4:	200004c4 	.word	0x200004c4
 8017bb8:	20006800 	.word	0x20006800
 8017bbc:	2000681c 	.word	0x2000681c
 8017bc0:	20006848 	.word	0x20006848

08017bc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8017bc4:	4a02      	ldr	r2, [pc, #8]	; (8017bd0 <vTaskSuspendAll+0xc>)
 8017bc6:	6813      	ldr	r3, [r2, #0]
 8017bc8:	3301      	adds	r3, #1
 8017bca:	6013      	str	r3, [r2, #0]
}
 8017bcc:	4770      	bx	lr
 8017bce:	bf00      	nop
 8017bd0:	200067cc 	.word	0x200067cc

08017bd4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8017bd4:	4b01      	ldr	r3, [pc, #4]	; (8017bdc <xTaskGetTickCount+0x8>)
 8017bd6:	6818      	ldr	r0, [r3, #0]
}
 8017bd8:	4770      	bx	lr
 8017bda:	bf00      	nop
 8017bdc:	20006848 	.word	0x20006848

08017be0 <xTaskGetTickCountFromISR>:
{
 8017be0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017be2:	f001 f895 	bl	8018d10 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8017be6:	4b01      	ldr	r3, [pc, #4]	; (8017bec <xTaskGetTickCountFromISR+0xc>)
 8017be8:	6818      	ldr	r0, [r3, #0]
}
 8017bea:	bd08      	pop	{r3, pc}
 8017bec:	20006848 	.word	0x20006848

08017bf0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bf0:	4b52      	ldr	r3, [pc, #328]	; (8017d3c <xTaskIncrementTick+0x14c>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
{
 8017bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf8:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d14c      	bne.n	8017c98 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017bfe:	4b50      	ldr	r3, [pc, #320]	; (8017d40 <xTaskIncrementTick+0x150>)
 8017c00:	681d      	ldr	r5, [r3, #0]
 8017c02:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8017c04:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017c06:	2d00      	cmp	r5, #0
 8017c08:	d054      	beq.n	8017cb4 <xTaskIncrementTick+0xc4>
 8017c0a:	4b4e      	ldr	r3, [pc, #312]	; (8017d44 <xTaskIncrementTick+0x154>)
 8017c0c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017c0e:	9b01      	ldr	r3, [sp, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	42ab      	cmp	r3, r5
 8017c14:	d85d      	bhi.n	8017cd2 <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c16:	4e4c      	ldr	r6, [pc, #304]	; (8017d48 <xTaskIncrementTick+0x158>)
 8017c18:	6833      	ldr	r3, [r6, #0]
 8017c1a:	681c      	ldr	r4, [r3, #0]
 8017c1c:	2c00      	cmp	r4, #0
 8017c1e:	d07c      	beq.n	8017d1a <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8017c20:	2400      	movs	r4, #0
 8017c22:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8017d60 <xTaskIncrementTick+0x170>
 8017c26:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8017d64 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 8017c2a:	f04f 0a01 	mov.w	sl, #1
 8017c2e:	4f47      	ldr	r7, [pc, #284]	; (8017d4c <xTaskIncrementTick+0x15c>)
 8017c30:	e024      	b.n	8017c7c <xTaskIncrementTick+0x8c>
 8017c32:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c34:	f7fe febe 	bl	80169b4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017c38:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c3c:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017c40:	9900      	ldr	r1, [sp, #0]
 8017c42:	b112      	cbz	r2, 8017c4a <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c44:	f7fe feb6 	bl	80169b4 <uxListRemove>
 8017c48:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8017c4a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	fa0a f200 	lsl.w	r2, sl, r0
 8017c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017c58:	431a      	orrs	r2, r3
 8017c5a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017c5e:	603a      	str	r2, [r7, #0]
 8017c60:	f7fe fe80 	bl	8016964 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c64:	f8d9 3000 	ldr.w	r3, [r9]
 8017c68:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8017c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	bf28      	it	cs
 8017c72:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c74:	6833      	ldr	r3, [r6, #0]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d052      	beq.n	8017d22 <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c7c:	6833      	ldr	r3, [r6, #0]
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017c84:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c88:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8017c8c:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c8e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8017c90:	d2cf      	bcs.n	8017c32 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8017c92:	9b01      	ldr	r3, [sp, #4]
 8017c94:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017c96:	e021      	b.n	8017cdc <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8017c98:	4a2d      	ldr	r2, [pc, #180]	; (8017d50 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8017c9a:	2400      	movs	r4, #0
		++uxPendedTicks;
 8017c9c:	6813      	ldr	r3, [r2, #0]
 8017c9e:	3301      	adds	r3, #1
 8017ca0:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8017ca2:	4b2c      	ldr	r3, [pc, #176]	; (8017d54 <xTaskIncrementTick+0x164>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8017ca6:	2b00      	cmp	r3, #0
}
 8017ca8:	bf0c      	ite	eq
 8017caa:	4620      	moveq	r0, r4
 8017cac:	2001      	movne	r0, #1
 8017cae:	b003      	add	sp, #12
 8017cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8017cb4:	4b24      	ldr	r3, [pc, #144]	; (8017d48 <xTaskIncrementTick+0x158>)
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	6812      	ldr	r2, [r2, #0]
 8017cba:	b1da      	cbz	r2, 8017cf4 <xTaskIncrementTick+0x104>
 8017cbc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017cc0:	b672      	cpsid	i
 8017cc2:	f383 8811 	msr	BASEPRI, r3
 8017cc6:	f3bf 8f6f 	isb	sy
 8017cca:	f3bf 8f4f 	dsb	sy
 8017cce:	b662      	cpsie	i
 8017cd0:	e7fe      	b.n	8017cd0 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8017d60 <xTaskIncrementTick+0x170>
 8017cd8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8017d64 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017cdc:	f8d9 3000 	ldr.w	r3, [r9]
 8017ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ce2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8017cec:	2b02      	cmp	r3, #2
 8017cee:	bf28      	it	cs
 8017cf0:	2401      	movcs	r4, #1
 8017cf2:	e7d6      	b.n	8017ca2 <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8017cf4:	4a18      	ldr	r2, [pc, #96]	; (8017d58 <xTaskIncrementTick+0x168>)
 8017cf6:	6818      	ldr	r0, [r3, #0]
 8017cf8:	6811      	ldr	r1, [r2, #0]
 8017cfa:	6019      	str	r1, [r3, #0]
 8017cfc:	4917      	ldr	r1, [pc, #92]	; (8017d5c <xTaskIncrementTick+0x16c>)
 8017cfe:	6010      	str	r0, [r2, #0]
 8017d00:	680a      	ldr	r2, [r1, #0]
 8017d02:	3201      	adds	r2, #1
 8017d04:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d06:	681a      	ldr	r2, [r3, #0]
 8017d08:	6812      	ldr	r2, [r2, #0]
 8017d0a:	b97a      	cbnz	r2, 8017d2c <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8017d0c:	4b0d      	ldr	r3, [pc, #52]	; (8017d44 <xTaskIncrementTick+0x154>)
 8017d0e:	461a      	mov	r2, r3
 8017d10:	9301      	str	r3, [sp, #4]
 8017d12:	f04f 33ff 	mov.w	r3, #4294967295
 8017d16:	6013      	str	r3, [r2, #0]
 8017d18:	e779      	b.n	8017c0e <xTaskIncrementTick+0x1e>
 8017d1a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017d60 <xTaskIncrementTick+0x170>
 8017d1e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8017d64 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d22:	f04f 33ff 	mov.w	r3, #4294967295
 8017d26:	9a01      	ldr	r2, [sp, #4]
 8017d28:	6013      	str	r3, [r2, #0]
					break;
 8017d2a:	e7d7      	b.n	8017cdc <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d2c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d2e:	4a05      	ldr	r2, [pc, #20]	; (8017d44 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d32:	9201      	str	r2, [sp, #4]
 8017d34:	68db      	ldr	r3, [r3, #12]
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	6013      	str	r3, [r2, #0]
}
 8017d3a:	e768      	b.n	8017c0e <xTaskIncrementTick+0x1e>
 8017d3c:	200067cc 	.word	0x200067cc
 8017d40:	20006848 	.word	0x20006848
 8017d44:	20006800 	.word	0x20006800
 8017d48:	2000672c 	.word	0x2000672c
 8017d4c:	200067d4 	.word	0x200067d4
 8017d50:	200067c8 	.word	0x200067c8
 8017d54:	2000684c 	.word	0x2000684c
 8017d58:	20006730 	.word	0x20006730
 8017d5c:	20006804 	.word	0x20006804
 8017d60:	20006734 	.word	0x20006734
 8017d64:	20006728 	.word	0x20006728

08017d68 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8017d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d6c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8017d6e:	f000 fec9 	bl	8018b04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8017d72:	4b38      	ldr	r3, [pc, #224]	; (8017e54 <xTaskResumeAll.part.0+0xec>)
 8017d74:	681a      	ldr	r2, [r3, #0]
 8017d76:	3a01      	subs	r2, #1
 8017d78:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d159      	bne.n	8017e34 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017d80:	4b35      	ldr	r3, [pc, #212]	; (8017e58 <xTaskResumeAll.part.0+0xf0>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d055      	beq.n	8017e34 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d88:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e70 <xTaskResumeAll.part.0+0x108>
 8017d8c:	f8da 3000 	ldr.w	r3, [sl]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d05c      	beq.n	8017e4e <xTaskResumeAll.part.0+0xe6>
 8017d94:	4d31      	ldr	r5, [pc, #196]	; (8017e5c <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8017d96:	2601      	movs	r6, #1
 8017d98:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8017e74 <xTaskResumeAll.part.0+0x10c>
 8017d9c:	4f30      	ldr	r7, [pc, #192]	; (8017e60 <xTaskResumeAll.part.0+0xf8>)
 8017d9e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8017e78 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017da2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8017da6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017da8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017dac:	f104 0018 	add.w	r0, r4, #24
 8017db0:	f7fe fe00 	bl	80169b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017db4:	4658      	mov	r0, fp
 8017db6:	f7fe fdfd 	bl	80169b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017dba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017dbc:	682a      	ldr	r2, [r5, #0]
 8017dbe:	4659      	mov	r1, fp
 8017dc0:	fa06 f300 	lsl.w	r3, r6, r0
 8017dc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017dc8:	4313      	orrs	r3, r2
 8017dca:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017dce:	602b      	str	r3, [r5, #0]
 8017dd0:	f7fe fdc8 	bl	8016964 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	d301      	bcc.n	8017de2 <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8017dde:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017de2:	f8da 3000 	ldr.w	r3, [sl]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d1db      	bne.n	8017da2 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dea:	4b1e      	ldr	r3, [pc, #120]	; (8017e64 <xTaskResumeAll.part.0+0xfc>)
 8017dec:	681a      	ldr	r2, [r3, #0]
 8017dee:	6812      	ldr	r2, [r2, #0]
 8017df0:	b342      	cbz	r2, 8017e44 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017df2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017df4:	4b1c      	ldr	r3, [pc, #112]	; (8017e68 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017df6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017df8:	68d2      	ldr	r2, [r2, #12]
 8017dfa:	6852      	ldr	r2, [r2, #4]
 8017dfc:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017dfe:	4e1b      	ldr	r6, [pc, #108]	; (8017e6c <xTaskResumeAll.part.0+0x104>)
 8017e00:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017e02:	b144      	cbz	r4, 8017e16 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8017e04:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8017e06:	f7ff fef3 	bl	8017bf0 <xTaskIncrementTick>
 8017e0a:	b108      	cbz	r0, 8017e10 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8017e0c:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017e10:	3c01      	subs	r4, #1
 8017e12:	d1f8      	bne.n	8017e06 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8017e14:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8017e16:	f8d9 3000 	ldr.w	r3, [r9]
 8017e1a:	b15b      	cbz	r3, 8017e34 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8017e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8017e30:	2001      	movs	r0, #1
 8017e32:	e000      	b.n	8017e36 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8017e34:	2000      	movs	r0, #0
 8017e36:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8017e38:	f000 fe8a 	bl	8018b50 <vPortExitCritical>
}
 8017e3c:	9801      	ldr	r0, [sp, #4]
 8017e3e:	b003      	add	sp, #12
 8017e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8017e44:	4b08      	ldr	r3, [pc, #32]	; (8017e68 <xTaskResumeAll.part.0+0x100>)
 8017e46:	f04f 32ff 	mov.w	r2, #4294967295
 8017e4a:	601a      	str	r2, [r3, #0]
 8017e4c:	e7d7      	b.n	8017dfe <xTaskResumeAll.part.0+0x96>
 8017e4e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8017e78 <xTaskResumeAll.part.0+0x110>
 8017e52:	e7d4      	b.n	8017dfe <xTaskResumeAll.part.0+0x96>
 8017e54:	200067cc 	.word	0x200067cc
 8017e58:	200067c0 	.word	0x200067c0
 8017e5c:	200067d4 	.word	0x200067d4
 8017e60:	20006728 	.word	0x20006728
 8017e64:	2000672c 	.word	0x2000672c
 8017e68:	20006800 	.word	0x20006800
 8017e6c:	200067c8 	.word	0x200067c8
 8017e70:	20006808 	.word	0x20006808
 8017e74:	20006734 	.word	0x20006734
 8017e78:	2000684c 	.word	0x2000684c

08017e7c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8017e7c:	4b07      	ldr	r3, [pc, #28]	; (8017e9c <xTaskResumeAll+0x20>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	b953      	cbnz	r3, 8017e98 <xTaskResumeAll+0x1c>
 8017e82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017e86:	b672      	cpsid	i
 8017e88:	f383 8811 	msr	BASEPRI, r3
 8017e8c:	f3bf 8f6f 	isb	sy
 8017e90:	f3bf 8f4f 	dsb	sy
 8017e94:	b662      	cpsie	i
 8017e96:	e7fe      	b.n	8017e96 <xTaskResumeAll+0x1a>
 8017e98:	f7ff bf66 	b.w	8017d68 <xTaskResumeAll.part.0>
 8017e9c:	200067cc 	.word	0x200067cc

08017ea0 <vTaskDelay>:
	{
 8017ea0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017ea2:	b950      	cbnz	r0, 8017eba <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8017ea4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017eac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017eb0:	f3bf 8f4f 	dsb	sy
 8017eb4:	f3bf 8f6f 	isb	sy
	}
 8017eb8:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8017eba:	4c12      	ldr	r4, [pc, #72]	; (8017f04 <vTaskDelay+0x64>)
 8017ebc:	6821      	ldr	r1, [r4, #0]
 8017ebe:	b151      	cbz	r1, 8017ed6 <vTaskDelay+0x36>
 8017ec0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ec4:	b672      	cpsid	i
 8017ec6:	f383 8811 	msr	BASEPRI, r3
 8017eca:	f3bf 8f6f 	isb	sy
 8017ece:	f3bf 8f4f 	dsb	sy
 8017ed2:	b662      	cpsie	i
 8017ed4:	e7fe      	b.n	8017ed4 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8017ed6:	6823      	ldr	r3, [r4, #0]
 8017ed8:	3301      	adds	r3, #1
 8017eda:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017edc:	f7ff fb84 	bl	80175e8 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8017ee0:	6823      	ldr	r3, [r4, #0]
 8017ee2:	b953      	cbnz	r3, 8017efa <vTaskDelay+0x5a>
 8017ee4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ee8:	b672      	cpsid	i
 8017eea:	f383 8811 	msr	BASEPRI, r3
 8017eee:	f3bf 8f6f 	isb	sy
 8017ef2:	f3bf 8f4f 	dsb	sy
 8017ef6:	b662      	cpsie	i
 8017ef8:	e7fe      	b.n	8017ef8 <vTaskDelay+0x58>
 8017efa:	f7ff ff35 	bl	8017d68 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d0d0      	beq.n	8017ea4 <vTaskDelay+0x4>
	}
 8017f02:	bd10      	pop	{r4, pc}
 8017f04:	200067cc 	.word	0x200067cc

08017f08 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017f08:	4b04      	ldr	r3, [pc, #16]	; (8017f1c <vTaskSwitchContext+0x14>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	b11b      	cbz	r3, 8017f16 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8017f0e:	4b04      	ldr	r3, [pc, #16]	; (8017f20 <vTaskSwitchContext+0x18>)
 8017f10:	2201      	movs	r2, #1
 8017f12:	601a      	str	r2, [r3, #0]
}
 8017f14:	4770      	bx	lr
 8017f16:	f7ff bc09 	b.w	801772c <vTaskSwitchContext.part.0>
 8017f1a:	bf00      	nop
 8017f1c:	200067cc 	.word	0x200067cc
 8017f20:	2000684c 	.word	0x2000684c

08017f24 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8017f24:	b160      	cbz	r0, 8017f40 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f26:	4b0c      	ldr	r3, [pc, #48]	; (8017f58 <vTaskPlaceOnEventList+0x34>)
{
 8017f28:	b510      	push	{r4, lr}
 8017f2a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f2c:	6819      	ldr	r1, [r3, #0]
 8017f2e:	3118      	adds	r1, #24
 8017f30:	f7fe fd28 	bl	8016984 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f34:	4620      	mov	r0, r4
 8017f36:	2101      	movs	r1, #1
}
 8017f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f3c:	f7ff bb54 	b.w	80175e8 <prvAddCurrentTaskToDelayedList>
 8017f40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f44:	b672      	cpsid	i
 8017f46:	f383 8811 	msr	BASEPRI, r3
 8017f4a:	f3bf 8f6f 	isb	sy
 8017f4e:	f3bf 8f4f 	dsb	sy
 8017f52:	b662      	cpsie	i
	configASSERT( pxEventList );
 8017f54:	e7fe      	b.n	8017f54 <vTaskPlaceOnEventList+0x30>
 8017f56:	bf00      	nop
 8017f58:	20006728 	.word	0x20006728

08017f5c <vTaskPlaceOnEventListRestricted>:
	{
 8017f5c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8017f5e:	b180      	cbz	r0, 8017f82 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f60:	4b0d      	ldr	r3, [pc, #52]	; (8017f98 <vTaskPlaceOnEventListRestricted+0x3c>)
 8017f62:	460d      	mov	r5, r1
 8017f64:	4614      	mov	r4, r2
 8017f66:	6819      	ldr	r1, [r3, #0]
 8017f68:	3118      	adds	r1, #24
 8017f6a:	f7fe fcfb 	bl	8016964 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8017f6e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f70:	4621      	mov	r1, r4
 8017f72:	bf0c      	ite	eq
 8017f74:	4628      	moveq	r0, r5
 8017f76:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8017f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f7e:	f7ff bb33 	b.w	80175e8 <prvAddCurrentTaskToDelayedList>
 8017f82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f86:	b672      	cpsid	i
 8017f88:	f383 8811 	msr	BASEPRI, r3
 8017f8c:	f3bf 8f6f 	isb	sy
 8017f90:	f3bf 8f4f 	dsb	sy
 8017f94:	b662      	cpsie	i
		configASSERT( pxEventList );
 8017f96:	e7fe      	b.n	8017f96 <vTaskPlaceOnEventListRestricted+0x3a>
 8017f98:	20006728 	.word	0x20006728

08017f9c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f9c:	68c3      	ldr	r3, [r0, #12]
{
 8017f9e:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fa0:	68dc      	ldr	r4, [r3, #12]
{
 8017fa2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8017fa4:	b364      	cbz	r4, 8018000 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017fa6:	f104 0518 	add.w	r5, r4, #24
 8017faa:	4628      	mov	r0, r5
 8017fac:	f7fe fd02 	bl	80169b4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fb0:	4b1a      	ldr	r3, [pc, #104]	; (801801c <xTaskRemoveFromEventList+0x80>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	b17b      	cbz	r3, 8017fd6 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017fb6:	4629      	mov	r1, r5
 8017fb8:	4819      	ldr	r0, [pc, #100]	; (8018020 <xTaskRemoveFromEventList+0x84>)
 8017fba:	f7fe fcd3 	bl	8016964 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017fbe:	4b19      	ldr	r3, [pc, #100]	; (8018024 <xTaskRemoveFromEventList+0x88>)
 8017fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d925      	bls.n	8018016 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8017fca:	2301      	movs	r3, #1
 8017fcc:	4a16      	ldr	r2, [pc, #88]	; (8018028 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8017fce:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8017fd0:	6013      	str	r3, [r2, #0]
}
 8017fd2:	b003      	add	sp, #12
 8017fd4:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017fd6:	1d21      	adds	r1, r4, #4
 8017fd8:	4608      	mov	r0, r1
 8017fda:	9101      	str	r1, [sp, #4]
 8017fdc:	f7fe fcea 	bl	80169b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017fe0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017fe2:	4a12      	ldr	r2, [pc, #72]	; (801802c <xTaskRemoveFromEventList+0x90>)
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	9901      	ldr	r1, [sp, #4]
 8017fe8:	6815      	ldr	r5, [r2, #0]
 8017fea:	4083      	lsls	r3, r0
 8017fec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017ff0:	432b      	orrs	r3, r5
 8017ff2:	6013      	str	r3, [r2, #0]
 8017ff4:	4b0e      	ldr	r3, [pc, #56]	; (8018030 <xTaskRemoveFromEventList+0x94>)
 8017ff6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017ffa:	f7fe fcb3 	bl	8016964 <vListInsertEnd>
 8017ffe:	e7de      	b.n	8017fbe <xTaskRemoveFromEventList+0x22>
 8018000:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018004:	b672      	cpsid	i
 8018006:	f383 8811 	msr	BASEPRI, r3
 801800a:	f3bf 8f6f 	isb	sy
 801800e:	f3bf 8f4f 	dsb	sy
 8018012:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8018014:	e7fe      	b.n	8018014 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8018016:	2000      	movs	r0, #0
}
 8018018:	b003      	add	sp, #12
 801801a:	bd30      	pop	{r4, r5, pc}
 801801c:	200067cc 	.word	0x200067cc
 8018020:	20006808 	.word	0x20006808
 8018024:	20006728 	.word	0x20006728
 8018028:	2000684c 	.word	0x2000684c
 801802c:	200067d4 	.word	0x200067d4
 8018030:	20006734 	.word	0x20006734

08018034 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018034:	4a03      	ldr	r2, [pc, #12]	; (8018044 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018036:	4b04      	ldr	r3, [pc, #16]	; (8018048 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018038:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8018040:	4770      	bx	lr
 8018042:	bf00      	nop
 8018044:	20006804 	.word	0x20006804
 8018048:	20006848 	.word	0x20006848

0801804c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 801804c:	b338      	cbz	r0, 801809e <xTaskCheckForTimeOut+0x52>
{
 801804e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018050:	460d      	mov	r5, r1
 8018052:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8018054:	b1c1      	cbz	r1, 8018088 <xTaskCheckForTimeOut+0x3c>
 8018056:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018058:	f000 fd54 	bl	8018b04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 801805c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 801805e:	4a1f      	ldr	r2, [pc, #124]	; (80180dc <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8018060:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8018062:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8018064:	d034      	beq.n	80180d0 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018066:	f8df c078 	ldr.w	ip, [pc, #120]	; 80180e0 <xTaskCheckForTimeOut+0x94>
 801806a:	6826      	ldr	r6, [r4, #0]
 801806c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018070:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018072:	42be      	cmp	r6, r7
 8018074:	d01e      	beq.n	80180b4 <xTaskCheckForTimeOut+0x68>
 8018076:	4288      	cmp	r0, r1
 8018078:	d81c      	bhi.n	80180b4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 801807a:	2001      	movs	r0, #1
 801807c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 801807e:	f000 fd67 	bl	8018b50 <vPortExitCritical>
}
 8018082:	9801      	ldr	r0, [sp, #4]
 8018084:	b003      	add	sp, #12
 8018086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018088:	f04f 0330 	mov.w	r3, #48	; 0x30
 801808c:	b672      	cpsid	i
 801808e:	f383 8811 	msr	BASEPRI, r3
 8018092:	f3bf 8f6f 	isb	sy
 8018096:	f3bf 8f4f 	dsb	sy
 801809a:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 801809c:	e7fe      	b.n	801809c <xTaskCheckForTimeOut+0x50>
 801809e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80180a2:	b672      	cpsid	i
 80180a4:	f383 8811 	msr	BASEPRI, r3
 80180a8:	f3bf 8f6f 	isb	sy
 80180ac:	f3bf 8f4f 	dsb	sy
 80180b0:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80180b2:	e7fe      	b.n	80180b2 <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80180b4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80180b8:	4573      	cmp	r3, lr
 80180ba:	d90b      	bls.n	80180d4 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 80180bc:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80180be:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80180c2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80180c4:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80180c6:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80180c8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80180ca:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80180ce:	e7d5      	b.n	801807c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80180d0:	2000      	movs	r0, #0
 80180d2:	e7d3      	b.n	801807c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80180d4:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80180d6:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80180d8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80180da:	e7cf      	b.n	801807c <xTaskCheckForTimeOut+0x30>
 80180dc:	20006848 	.word	0x20006848
 80180e0:	20006804 	.word	0x20006804

080180e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80180e4:	4b01      	ldr	r3, [pc, #4]	; (80180ec <vTaskMissedYield+0x8>)
 80180e6:	2201      	movs	r2, #1
 80180e8:	601a      	str	r2, [r3, #0]
}
 80180ea:	4770      	bx	lr
 80180ec:	2000684c 	.word	0x2000684c

080180f0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80180f0:	4b01      	ldr	r3, [pc, #4]	; (80180f8 <xTaskGetCurrentTaskHandle+0x8>)
 80180f2:	6818      	ldr	r0, [r3, #0]
	}
 80180f4:	4770      	bx	lr
 80180f6:	bf00      	nop
 80180f8:	20006728 	.word	0x20006728

080180fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80180fc:	4b05      	ldr	r3, [pc, #20]	; (8018114 <xTaskGetSchedulerState+0x18>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	b133      	cbz	r3, 8018110 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018102:	4b05      	ldr	r3, [pc, #20]	; (8018118 <xTaskGetSchedulerState+0x1c>)
 8018104:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8018106:	2b00      	cmp	r3, #0
 8018108:	bf0c      	ite	eq
 801810a:	2002      	moveq	r0, #2
 801810c:	2000      	movne	r0, #0
 801810e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018110:	2001      	movs	r0, #1
	}
 8018112:	4770      	bx	lr
 8018114:	2000681c 	.word	0x2000681c
 8018118:	200067cc 	.word	0x200067cc

0801811c <xTaskPriorityInherit>:
	{
 801811c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801811e:	4604      	mov	r4, r0
	{
 8018120:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8018122:	b1c8      	cbz	r0, 8018158 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018124:	4d26      	ldr	r5, [pc, #152]	; (80181c0 <xTaskPriorityInherit+0xa4>)
 8018126:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018128:	682a      	ldr	r2, [r5, #0]
 801812a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801812c:	4293      	cmp	r3, r2
 801812e:	d215      	bcs.n	801815c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018130:	6982      	ldr	r2, [r0, #24]
 8018132:	2a00      	cmp	r2, #0
 8018134:	db04      	blt.n	8018140 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018136:	682a      	ldr	r2, [r5, #0]
 8018138:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801813a:	f1c2 0207 	rsb	r2, r2, #7
 801813e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018140:	4e20      	ldr	r6, [pc, #128]	; (80181c4 <xTaskPriorityInherit+0xa8>)
 8018142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018146:	6962      	ldr	r2, [r4, #20]
 8018148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801814c:	429a      	cmp	r2, r3
 801814e:	d00e      	beq.n	801816e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018150:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8018152:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018156:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8018158:	b002      	add	sp, #8
 801815a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801815c:	682b      	ldr	r3, [r5, #0]
 801815e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018162:	4298      	cmp	r0, r3
 8018164:	bf2c      	ite	cs
 8018166:	2000      	movcs	r0, #0
 8018168:	2001      	movcc	r0, #1
	}
 801816a:	b002      	add	sp, #8
 801816c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801816e:	1d21      	adds	r1, r4, #4
 8018170:	4608      	mov	r0, r1
 8018172:	9101      	str	r1, [sp, #4]
 8018174:	f7fe fc1e 	bl	80169b4 <uxListRemove>
 8018178:	9901      	ldr	r1, [sp, #4]
 801817a:	b970      	cbnz	r0, 801819a <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801817c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801817e:	4a12      	ldr	r2, [pc, #72]	; (80181c8 <xTaskPriorityInherit+0xac>)
 8018180:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8018184:	009b      	lsls	r3, r3, #2
 8018186:	58f3      	ldr	r3, [r6, r3]
 8018188:	b943      	cbnz	r3, 801819c <xTaskPriorityInherit+0x80>
 801818a:	2301      	movs	r3, #1
 801818c:	fa03 f000 	lsl.w	r0, r3, r0
 8018190:	6813      	ldr	r3, [r2, #0]
 8018192:	ea23 0300 	bic.w	r3, r3, r0
 8018196:	6013      	str	r3, [r2, #0]
 8018198:	e000      	b.n	801819c <xTaskPriorityInherit+0x80>
 801819a:	4a0b      	ldr	r2, [pc, #44]	; (80181c8 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801819c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801819e:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80181a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80181a4:	2401      	movs	r4, #1
 80181a6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80181aa:	fa04 f303 	lsl.w	r3, r4, r3
 80181ae:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80181b2:	432b      	orrs	r3, r5
 80181b4:	6013      	str	r3, [r2, #0]
 80181b6:	f7fe fbd5 	bl	8016964 <vListInsertEnd>
				xReturn = pdTRUE;
 80181ba:	4620      	mov	r0, r4
 80181bc:	e7cc      	b.n	8018158 <xTaskPriorityInherit+0x3c>
 80181be:	bf00      	nop
 80181c0:	20006728 	.word	0x20006728
 80181c4:	20006734 	.word	0x20006734
 80181c8:	200067d4 	.word	0x200067d4

080181cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80181cc:	b340      	cbz	r0, 8018220 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 80181ce:	4b2c      	ldr	r3, [pc, #176]	; (8018280 <xTaskPriorityDisinherit+0xb4>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	4283      	cmp	r3, r0
	{
 80181d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181d6:	4604      	mov	r4, r0
 80181d8:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80181da:	d00a      	beq.n	80181f2 <xTaskPriorityDisinherit+0x26>
 80181dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80181e0:	b672      	cpsid	i
 80181e2:	f383 8811 	msr	BASEPRI, r3
 80181e6:	f3bf 8f6f 	isb	sy
 80181ea:	f3bf 8f4f 	dsb	sy
 80181ee:	b662      	cpsie	i
 80181f0:	e7fe      	b.n	80181f0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80181f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80181f4:	b14b      	cbz	r3, 801820a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80181f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80181f8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80181fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80181fc:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80181fe:	4291      	cmp	r1, r2
 8018200:	d000      	beq.n	8018204 <xTaskPriorityDisinherit+0x38>
 8018202:	b17b      	cbz	r3, 8018224 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8018204:	2000      	movs	r0, #0
	}
 8018206:	b003      	add	sp, #12
 8018208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801820a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801820e:	b672      	cpsid	i
 8018210:	f383 8811 	msr	BASEPRI, r3
 8018214:	f3bf 8f6f 	isb	sy
 8018218:	f3bf 8f4f 	dsb	sy
 801821c:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801821e:	e7fe      	b.n	801821e <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8018220:	2000      	movs	r0, #0
	}
 8018222:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018224:	1d01      	adds	r1, r0, #4
 8018226:	4608      	mov	r0, r1
 8018228:	9101      	str	r1, [sp, #4]
 801822a:	f7fe fbc3 	bl	80169b4 <uxListRemove>
 801822e:	9901      	ldr	r1, [sp, #4]
 8018230:	b1a0      	cbz	r0, 801825c <xTaskPriorityDisinherit+0x90>
 8018232:	4814      	ldr	r0, [pc, #80]	; (8018284 <xTaskPriorityDisinherit+0xb8>)
 8018234:	4a14      	ldr	r2, [pc, #80]	; (8018288 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018236:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8018238:	2501      	movs	r5, #1
 801823a:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801823c:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018240:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018242:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8018244:	fa05 f403 	lsl.w	r4, r5, r3
 8018248:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801824c:	4334      	orrs	r4, r6
 801824e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018252:	6014      	str	r4, [r2, #0]
 8018254:	f7fe fb86 	bl	8016964 <vListInsertEnd>
					xReturn = pdTRUE;
 8018258:	4628      	mov	r0, r5
		return xReturn;
 801825a:	e7d4      	b.n	8018206 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801825c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801825e:	4809      	ldr	r0, [pc, #36]	; (8018284 <xTaskPriorityDisinherit+0xb8>)
 8018260:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8018264:	4a08      	ldr	r2, [pc, #32]	; (8018288 <xTaskPriorityDisinherit+0xbc>)
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	58c3      	ldr	r3, [r0, r3]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d1e3      	bne.n	8018236 <xTaskPriorityDisinherit+0x6a>
 801826e:	2301      	movs	r3, #1
 8018270:	fa03 f505 	lsl.w	r5, r3, r5
 8018274:	6813      	ldr	r3, [r2, #0]
 8018276:	ea23 0305 	bic.w	r3, r3, r5
 801827a:	6013      	str	r3, [r2, #0]
 801827c:	e7db      	b.n	8018236 <xTaskPriorityDisinherit+0x6a>
 801827e:	bf00      	nop
 8018280:	20006728 	.word	0x20006728
 8018284:	20006734 	.word	0x20006734
 8018288:	200067d4 	.word	0x200067d4

0801828c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801828c:	2800      	cmp	r0, #0
 801828e:	d044      	beq.n	801831a <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8018290:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8018292:	b530      	push	{r4, r5, lr}
 8018294:	4604      	mov	r4, r0
 8018296:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8018298:	b153      	cbz	r3, 80182b0 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801829a:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 801829c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801829e:	4281      	cmp	r1, r0
 80182a0:	bf38      	it	cc
 80182a2:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80182a4:	428a      	cmp	r2, r1
 80182a6:	d001      	beq.n	80182ac <vTaskPriorityDisinheritAfterTimeout+0x20>
 80182a8:	2b01      	cmp	r3, #1
 80182aa:	d00c      	beq.n	80182c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 80182ac:	b003      	add	sp, #12
 80182ae:	bd30      	pop	{r4, r5, pc}
 80182b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80182b4:	b672      	cpsid	i
 80182b6:	f383 8811 	msr	BASEPRI, r3
 80182ba:	f3bf 8f6f 	isb	sy
 80182be:	f3bf 8f4f 	dsb	sy
 80182c2:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80182c4:	e7fe      	b.n	80182c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 80182c6:	4b25      	ldr	r3, [pc, #148]	; (801835c <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	42a3      	cmp	r3, r4
 80182cc:	d026      	beq.n	801831c <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80182ce:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80182d0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	db02      	blt.n	80182dc <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182d6:	f1c1 0107 	rsb	r1, r1, #7
 80182da:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80182dc:	4d20      	ldr	r5, [pc, #128]	; (8018360 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80182de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80182e2:	6961      	ldr	r1, [r4, #20]
 80182e4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80182e8:	4299      	cmp	r1, r3
 80182ea:	d1df      	bne.n	80182ac <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182ec:	1d21      	adds	r1, r4, #4
 80182ee:	4608      	mov	r0, r1
 80182f0:	9101      	str	r1, [sp, #4]
 80182f2:	f7fe fb5f 	bl	80169b4 <uxListRemove>
 80182f6:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80182f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182fa:	b1d0      	cbz	r0, 8018332 <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80182fc:	2301      	movs	r3, #1
 80182fe:	0090      	lsls	r0, r2, #2
 8018300:	4c18      	ldr	r4, [pc, #96]	; (8018364 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8018302:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8018304:	4410      	add	r0, r2
 8018306:	6822      	ldr	r2, [r4, #0]
 8018308:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801830c:	4313      	orrs	r3, r2
 801830e:	6023      	str	r3, [r4, #0]
	}
 8018310:	b003      	add	sp, #12
 8018312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8018316:	f7fe bb25 	b.w	8016964 <vListInsertEnd>
 801831a:	4770      	bx	lr
 801831c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018320:	b672      	cpsid	i
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8018330:	e7fe      	b.n	8018330 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018332:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018336:	0090      	lsls	r0, r2, #2
 8018338:	009b      	lsls	r3, r3, #2
 801833a:	58eb      	ldr	r3, [r5, r3]
 801833c:	b11b      	cbz	r3, 8018346 <vTaskPriorityDisinheritAfterTimeout+0xba>
 801833e:	2301      	movs	r3, #1
 8018340:	4c08      	ldr	r4, [pc, #32]	; (8018364 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8018342:	4093      	lsls	r3, r2
 8018344:	e7de      	b.n	8018304 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8018346:	4c07      	ldr	r4, [pc, #28]	; (8018364 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8018348:	2301      	movs	r3, #1
 801834a:	f8d4 c000 	ldr.w	ip, [r4]
 801834e:	4093      	lsls	r3, r2
 8018350:	ea2c 0c03 	bic.w	ip, ip, r3
 8018354:	f8c4 c000 	str.w	ip, [r4]
 8018358:	e7d4      	b.n	8018304 <vTaskPriorityDisinheritAfterTimeout+0x78>
 801835a:	bf00      	nop
 801835c:	20006728 	.word	0x20006728
 8018360:	20006734 	.word	0x20006734
 8018364:	200067d4 	.word	0x200067d4

08018368 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8018368:	4b04      	ldr	r3, [pc, #16]	; (801837c <pvTaskIncrementMutexHeldCount+0x14>)
 801836a:	681a      	ldr	r2, [r3, #0]
 801836c:	b11a      	cbz	r2, 8018376 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801836e:	6819      	ldr	r1, [r3, #0]
 8018370:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8018372:	3201      	adds	r2, #1
 8018374:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8018376:	6818      	ldr	r0, [r3, #0]
	}
 8018378:	4770      	bx	lr
 801837a:	bf00      	nop
 801837c:	20006728 	.word	0x20006728

08018380 <ulTaskNotifyTake>:
	{
 8018380:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8018382:	4c1a      	ldr	r4, [pc, #104]	; (80183ec <ulTaskNotifyTake+0x6c>)
	{
 8018384:	4606      	mov	r6, r0
 8018386:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8018388:	f000 fbbc 	bl	8018b04 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801838c:	6823      	ldr	r3, [r4, #0]
 801838e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018392:	b923      	cbnz	r3, 801839e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	2101      	movs	r1, #1
 8018398:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 801839c:	b9c5      	cbnz	r5, 80183d0 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 801839e:	f000 fbd7 	bl	8018b50 <vPortExitCritical>
		taskENTER_CRITICAL();
 80183a2:	f000 fbaf 	bl	8018b04 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80183a6:	6823      	ldr	r3, [r4, #0]
 80183a8:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 80183ac:	b125      	cbz	r5, 80183b8 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80183ae:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80183b0:	b156      	cbz	r6, 80183c8 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80183b2:	2200      	movs	r2, #0
 80183b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	2200      	movs	r2, #0
 80183bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 80183c0:	f000 fbc6 	bl	8018b50 <vPortExitCritical>
	}
 80183c4:	4628      	mov	r0, r5
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80183c8:	1e6a      	subs	r2, r5, #1
 80183ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80183ce:	e7f3      	b.n	80183b8 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80183d0:	4628      	mov	r0, r5
 80183d2:	f7ff f909 	bl	80175e8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80183d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80183da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80183e2:	f3bf 8f4f 	dsb	sy
 80183e6:	f3bf 8f6f 	isb	sy
 80183ea:	e7d8      	b.n	801839e <ulTaskNotifyTake+0x1e>
 80183ec:	20006728 	.word	0x20006728

080183f0 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 80183f0:	b318      	cbz	r0, 801843a <vTaskNotifyGiveFromISR+0x4a>
	{
 80183f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183f4:	b083      	sub	sp, #12
 80183f6:	4604      	mov	r4, r0
 80183f8:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80183fa:	f000 fc89 	bl	8018d10 <vPortValidateInterruptPriority>
	__asm volatile
 80183fe:	f3ef 8611 	mrs	r6, BASEPRI
 8018402:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018406:	b672      	cpsid	i
 8018408:	f383 8811 	msr	BASEPRI, r3
 801840c:	f3bf 8f6f 	isb	sy
 8018410:	f3bf 8f4f 	dsb	sy
 8018414:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018416:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018418:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801841c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018420:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8018422:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018426:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8018428:	f103 0301 	add.w	r3, r3, #1
 801842c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018430:	d00e      	beq.n	8018450 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8018432:	f386 8811 	msr	BASEPRI, r6
	}
 8018436:	b003      	add	sp, #12
 8018438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 801843a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801843e:	b672      	cpsid	i
 8018440:	f383 8811 	msr	BASEPRI, r3
 8018444:	f3bf 8f6f 	isb	sy
 8018448:	f3bf 8f4f 	dsb	sy
 801844c:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801844e:	e7fe      	b.n	801844e <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018452:	b153      	cbz	r3, 801846a <vTaskNotifyGiveFromISR+0x7a>
 8018454:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018458:	b672      	cpsid	i
 801845a:	f383 8811 	msr	BASEPRI, r3
 801845e:	f3bf 8f6f 	isb	sy
 8018462:	f3bf 8f4f 	dsb	sy
 8018466:	b662      	cpsie	i
 8018468:	e7fe      	b.n	8018468 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801846a:	4b14      	ldr	r3, [pc, #80]	; (80184bc <vTaskNotifyGiveFromISR+0xcc>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	b18b      	cbz	r3, 8018494 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018470:	f104 0118 	add.w	r1, r4, #24
 8018474:	4812      	ldr	r0, [pc, #72]	; (80184c0 <vTaskNotifyGiveFromISR+0xd0>)
 8018476:	f7fe fa75 	bl	8016964 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801847a:	4b12      	ldr	r3, [pc, #72]	; (80184c4 <vTaskNotifyGiveFromISR+0xd4>)
 801847c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018482:	429a      	cmp	r2, r3
 8018484:	d9d5      	bls.n	8018432 <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8018486:	b10d      	cbz	r5, 801848c <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018488:	2301      	movs	r3, #1
 801848a:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 801848c:	4b0e      	ldr	r3, [pc, #56]	; (80184c8 <vTaskNotifyGiveFromISR+0xd8>)
 801848e:	2201      	movs	r2, #1
 8018490:	601a      	str	r2, [r3, #0]
 8018492:	e7ce      	b.n	8018432 <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018494:	1d21      	adds	r1, r4, #4
 8018496:	4608      	mov	r0, r1
 8018498:	9101      	str	r1, [sp, #4]
 801849a:	f7fe fa8b 	bl	80169b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801849e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184a0:	4b0a      	ldr	r3, [pc, #40]	; (80184cc <vTaskNotifyGiveFromISR+0xdc>)
 80184a2:	4087      	lsls	r7, r0
 80184a4:	4a0a      	ldr	r2, [pc, #40]	; (80184d0 <vTaskNotifyGiveFromISR+0xe0>)
 80184a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80184aa:	9901      	ldr	r1, [sp, #4]
 80184ac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	4317      	orrs	r7, r2
 80184b4:	601f      	str	r7, [r3, #0]
 80184b6:	f7fe fa55 	bl	8016964 <vListInsertEnd>
 80184ba:	e7de      	b.n	801847a <vTaskNotifyGiveFromISR+0x8a>
 80184bc:	200067cc 	.word	0x200067cc
 80184c0:	20006808 	.word	0x20006808
 80184c4:	20006728 	.word	0x20006728
 80184c8:	2000684c 	.word	0x2000684c
 80184cc:	200067d4 	.word	0x200067d4
 80184d0:	20006734 	.word	0x20006734

080184d4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80184d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80184d6:	4c12      	ldr	r4, [pc, #72]	; (8018520 <prvCheckForValidListAndQueue+0x4c>)
{
 80184d8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80184da:	f000 fb13 	bl	8018b04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80184de:	6825      	ldr	r5, [r4, #0]
 80184e0:	b125      	cbz	r5, 80184ec <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80184e2:	b003      	add	sp, #12
 80184e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80184e8:	f000 bb32 	b.w	8018b50 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80184ec:	4f0d      	ldr	r7, [pc, #52]	; (8018524 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80184ee:	4e0e      	ldr	r6, [pc, #56]	; (8018528 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80184f0:	4638      	mov	r0, r7
 80184f2:	f7fe fa27 	bl	8016944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80184f6:	4630      	mov	r0, r6
 80184f8:	f7fe fa24 	bl	8016944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80184fc:	4a0b      	ldr	r2, [pc, #44]	; (801852c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80184fe:	9500      	str	r5, [sp, #0]
 8018500:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8018502:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018504:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8018506:	4a0a      	ldr	r2, [pc, #40]	; (8018530 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018508:	4b0a      	ldr	r3, [pc, #40]	; (8018534 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 801850a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801850c:	4a0a      	ldr	r2, [pc, #40]	; (8018538 <prvCheckForValidListAndQueue+0x64>)
 801850e:	f7fe fb35 	bl	8016b7c <xQueueGenericCreateStatic>
 8018512:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8018514:	2800      	cmp	r0, #0
 8018516:	d0e4      	beq.n	80184e2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018518:	4908      	ldr	r1, [pc, #32]	; (801853c <prvCheckForValidListAndQueue+0x68>)
 801851a:	f7fe ff9d 	bl	8017458 <vQueueAddToRegistry>
 801851e:	e7e0      	b.n	80184e2 <prvCheckForValidListAndQueue+0xe>
 8018520:	2000696c 	.word	0x2000696c
 8018524:	200068f8 	.word	0x200068f8
 8018528:	2000690c 	.word	0x2000690c
 801852c:	20006850 	.word	0x20006850
 8018530:	20006854 	.word	0x20006854
 8018534:	20006924 	.word	0x20006924
 8018538:	20006858 	.word	0x20006858
 801853c:	0802e710 	.word	0x0802e710

08018540 <xTimerCreateTimerTask>:
{
 8018540:	b530      	push	{r4, r5, lr}
 8018542:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8018544:	f7ff ffc6 	bl	80184d4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8018548:	4b13      	ldr	r3, [pc, #76]	; (8018598 <xTimerCreateTimerTask+0x58>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	b1cb      	cbz	r3, 8018582 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801854e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018550:	aa07      	add	r2, sp, #28
 8018552:	a906      	add	r1, sp, #24
 8018554:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018556:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018558:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801855c:	f7e8 fea2 	bl	80012a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018560:	4623      	mov	r3, r4
 8018562:	9a07      	ldr	r2, [sp, #28]
 8018564:	9500      	str	r5, [sp, #0]
 8018566:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801856a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801856e:	490b      	ldr	r1, [pc, #44]	; (801859c <xTimerCreateTimerTask+0x5c>)
 8018570:	480b      	ldr	r0, [pc, #44]	; (80185a0 <xTimerCreateTimerTask+0x60>)
 8018572:	f7ff f97d 	bl	8017870 <xTaskCreateStatic>
 8018576:	4b0b      	ldr	r3, [pc, #44]	; (80185a4 <xTimerCreateTimerTask+0x64>)
 8018578:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801857a:	b110      	cbz	r0, 8018582 <xTimerCreateTimerTask+0x42>
}
 801857c:	2001      	movs	r0, #1
 801857e:	b009      	add	sp, #36	; 0x24
 8018580:	bd30      	pop	{r4, r5, pc}
 8018582:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018586:	b672      	cpsid	i
 8018588:	f383 8811 	msr	BASEPRI, r3
 801858c:	f3bf 8f6f 	isb	sy
 8018590:	f3bf 8f4f 	dsb	sy
 8018594:	b662      	cpsie	i
	configASSERT( xReturn );
 8018596:	e7fe      	b.n	8018596 <xTimerCreateTimerTask+0x56>
 8018598:	2000696c 	.word	0x2000696c
 801859c:	0802e718 	.word	0x0802e718
 80185a0:	080187a1 	.word	0x080187a1
 80185a4:	20006970 	.word	0x20006970

080185a8 <xTimerCreate>:
	{
 80185a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185ac:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80185ae:	2028      	movs	r0, #40	; 0x28
	{
 80185b0:	4688      	mov	r8, r1
 80185b2:	4615      	mov	r5, r2
 80185b4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80185b6:	f000 fc0f 	bl	8018dd8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80185ba:	4604      	mov	r4, r0
 80185bc:	b1b0      	cbz	r0, 80185ec <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 80185be:	2300      	movs	r3, #0
 80185c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80185c4:	f1b8 0f00 	cmp.w	r8, #0
 80185c8:	d013      	beq.n	80185f2 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 80185ca:	f7ff ff83 	bl	80184d4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80185ce:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185d0:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80185d2:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80185d4:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 80185d6:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185da:	f7fe f9bf 	bl	801695c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80185de:	b12d      	cbz	r5, 80185ec <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80185e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80185e4:	f043 0304 	orr.w	r3, r3, #4
 80185e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 80185ec:	4620      	mov	r0, r4
 80185ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80185f6:	b672      	cpsid	i
 80185f8:	f383 8811 	msr	BASEPRI, r3
 80185fc:	f3bf 8f6f 	isb	sy
 8018600:	f3bf 8f4f 	dsb	sy
 8018604:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8018606:	e7fe      	b.n	8018606 <xTimerCreate+0x5e>

08018608 <xTimerCreateStatic>:
	{
 8018608:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 801860a:	2428      	movs	r4, #40	; 0x28
	{
 801860c:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 801860e:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8018610:	9d05      	ldr	r5, [sp, #20]
 8018612:	2d28      	cmp	r5, #40	; 0x28
 8018614:	d00a      	beq.n	801862c <xTimerCreateStatic+0x24>
 8018616:	f04f 0330 	mov.w	r3, #48	; 0x30
 801861a:	b672      	cpsid	i
 801861c:	f383 8811 	msr	BASEPRI, r3
 8018620:	f3bf 8f6f 	isb	sy
 8018624:	f3bf 8f4f 	dsb	sy
 8018628:	b662      	cpsie	i
 801862a:	e7fe      	b.n	801862a <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801862c:	4604      	mov	r4, r0
 801862e:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8018630:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018632:	b318      	cbz	r0, 801867c <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018634:	2002      	movs	r0, #2
 8018636:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018638:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801863c:	b349      	cbz	r1, 8018692 <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 801863e:	9101      	str	r1, [sp, #4]
 8018640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018644:	f7ff ff46 	bl	80184d4 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801864a:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 801864c:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 801864e:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8018650:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018652:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8018654:	9b03      	ldr	r3, [sp, #12]
 8018656:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8018658:	4613      	mov	r3, r2
 801865a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801865c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801865e:	f7fe f97d 	bl	801695c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8018662:	9a02      	ldr	r2, [sp, #8]
 8018664:	b13a      	cbz	r2, 8018676 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8018666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801866a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801866e:	f043 0304 	orr.w	r3, r3, #4
 8018672:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8018676:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018678:	b007      	add	sp, #28
 801867a:	bd30      	pop	{r4, r5, pc}
 801867c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018680:	b672      	cpsid	i
 8018682:	f383 8811 	msr	BASEPRI, r3
 8018686:	f3bf 8f6f 	isb	sy
 801868a:	f3bf 8f4f 	dsb	sy
 801868e:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8018690:	e7fe      	b.n	8018690 <xTimerCreateStatic+0x88>
 8018692:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018696:	b672      	cpsid	i
 8018698:	f383 8811 	msr	BASEPRI, r3
 801869c:	f3bf 8f6f 	isb	sy
 80186a0:	f3bf 8f4f 	dsb	sy
 80186a4:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80186a6:	e7fe      	b.n	80186a6 <xTimerCreateStatic+0x9e>

080186a8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80186a8:	b1c8      	cbz	r0, 80186de <xTimerGenericCommand+0x36>
{
 80186aa:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80186ac:	4d19      	ldr	r5, [pc, #100]	; (8018714 <xTimerGenericCommand+0x6c>)
{
 80186ae:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80186b0:	682c      	ldr	r4, [r5, #0]
 80186b2:	b18c      	cbz	r4, 80186d8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80186b4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80186b6:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80186b8:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80186bc:	dc1a      	bgt.n	80186f4 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80186be:	f7ff fd1d 	bl	80180fc <xTaskGetSchedulerState>
 80186c2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80186c4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80186c8:	d01d      	beq.n	8018706 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80186ca:	4669      	mov	r1, sp
 80186cc:	461a      	mov	r2, r3
 80186ce:	6828      	ldr	r0, [r5, #0]
 80186d0:	f7fe fade 	bl	8016c90 <xQueueGenericSend>
}
 80186d4:	b005      	add	sp, #20
 80186d6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80186d8:	4620      	mov	r0, r4
}
 80186da:	b005      	add	sp, #20
 80186dc:	bd30      	pop	{r4, r5, pc}
 80186de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80186e2:	b672      	cpsid	i
 80186e4:	f383 8811 	msr	BASEPRI, r3
 80186e8:	f3bf 8f6f 	isb	sy
 80186ec:	f3bf 8f4f 	dsb	sy
 80186f0:	b662      	cpsie	i
	configASSERT( xTimer );
 80186f2:	e7fe      	b.n	80186f2 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80186f4:	469c      	mov	ip, r3
 80186f6:	4669      	mov	r1, sp
 80186f8:	2300      	movs	r3, #0
 80186fa:	4620      	mov	r0, r4
 80186fc:	4662      	mov	r2, ip
 80186fe:	f7fe fbc7 	bl	8016e90 <xQueueGenericSendFromISR>
}
 8018702:	b005      	add	sp, #20
 8018704:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018706:	9a08      	ldr	r2, [sp, #32]
 8018708:	4669      	mov	r1, sp
 801870a:	6828      	ldr	r0, [r5, #0]
 801870c:	f7fe fac0 	bl	8016c90 <xQueueGenericSend>
 8018710:	e7e3      	b.n	80186da <xTimerGenericCommand+0x32>
 8018712:	bf00      	nop
 8018714:	2000696c 	.word	0x2000696c

08018718 <prvSwitchTimerLists>:
{
 8018718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801871c:	4e1e      	ldr	r6, [pc, #120]	; (8018798 <prvSwitchTimerLists+0x80>)
 801871e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018720:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018724:	e00d      	b.n	8018742 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018726:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018728:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801872a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801872c:	1d25      	adds	r5, r4, #4
 801872e:	4628      	mov	r0, r5
 8018730:	f7fe f940 	bl	80169b4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018734:	6a23      	ldr	r3, [r4, #32]
 8018736:	4620      	mov	r0, r4
 8018738:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801873a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801873e:	075b      	lsls	r3, r3, #29
 8018740:	d40a      	bmi.n	8018758 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018742:	6833      	ldr	r3, [r6, #0]
 8018744:	681a      	ldr	r2, [r3, #0]
 8018746:	2a00      	cmp	r2, #0
 8018748:	d1ed      	bne.n	8018726 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 801874a:	4a14      	ldr	r2, [pc, #80]	; (801879c <prvSwitchTimerLists+0x84>)
 801874c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801874e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8018750:	6031      	str	r1, [r6, #0]
}
 8018752:	b002      	add	sp, #8
 8018754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018758:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801875a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801875c:	2300      	movs	r3, #0
 801875e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018760:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018762:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8018764:	42af      	cmp	r7, r5
 8018766:	d205      	bcs.n	8018774 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018768:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801876a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801876c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801876e:	f7fe f909 	bl	8016984 <vListInsert>
 8018772:	e7e6      	b.n	8018742 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018774:	4619      	mov	r1, r3
 8018776:	f8cd 8000 	str.w	r8, [sp]
 801877a:	f7ff ff95 	bl	80186a8 <xTimerGenericCommand>
				configASSERT( xResult );
 801877e:	2800      	cmp	r0, #0
 8018780:	d1df      	bne.n	8018742 <prvSwitchTimerLists+0x2a>
 8018782:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018786:	b672      	cpsid	i
 8018788:	f383 8811 	msr	BASEPRI, r3
 801878c:	f3bf 8f6f 	isb	sy
 8018790:	f3bf 8f4f 	dsb	sy
 8018794:	b662      	cpsie	i
 8018796:	e7fe      	b.n	8018796 <prvSwitchTimerLists+0x7e>
 8018798:	20006850 	.word	0x20006850
 801879c:	20006854 	.word	0x20006854

080187a0 <prvTimerTask>:
{
 80187a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a4:	4e9a      	ldr	r6, [pc, #616]	; (8018a10 <prvTimerTask+0x270>)
 80187a6:	b087      	sub	sp, #28
 80187a8:	4d9a      	ldr	r5, [pc, #616]	; (8018a14 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 80187aa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80187ae:	4c9a      	ldr	r4, [pc, #616]	; (8018a18 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80187b0:	6833      	ldr	r3, [r6, #0]
 80187b2:	681f      	ldr	r7, [r3, #0]
 80187b4:	2f00      	cmp	r7, #0
 80187b6:	f000 80ac 	beq.w	8018912 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80187be:	f7ff fa01 	bl	8017bc4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80187c2:	f7ff fa07 	bl	8017bd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80187c6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80187c8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80187ca:	4290      	cmp	r0, r2
 80187cc:	f0c0 80a9 	bcc.w	8018922 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80187d0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80187d2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80187d4:	f200 80ca 	bhi.w	801896c <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 80187d8:	f7ff fb50 	bl	8017e7c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187dc:	6832      	ldr	r2, [r6, #0]
 80187de:	68d2      	ldr	r2, [r2, #12]
 80187e0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80187e4:	f10b 0804 	add.w	r8, fp, #4
 80187e8:	4640      	mov	r0, r8
 80187ea:	f7fe f8e3 	bl	80169b4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80187ee:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 80187f2:	0743      	lsls	r3, r0, #29
 80187f4:	f100 80ca 	bmi.w	801898c <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80187f8:	f020 0001 	bic.w	r0, r0, #1
 80187fc:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018800:	f8db 3020 	ldr.w	r3, [fp, #32]
 8018804:	4658      	mov	r0, fp
 8018806:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018808:	2200      	movs	r2, #0
 801880a:	a902      	add	r1, sp, #8
 801880c:	6820      	ldr	r0, [r4, #0]
 801880e:	f7fe fc11 	bl	8017034 <xQueueReceive>
 8018812:	2800      	cmp	r0, #0
 8018814:	d0cc      	beq.n	80187b0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018816:	9b02      	ldr	r3, [sp, #8]
 8018818:	2b00      	cmp	r3, #0
 801881a:	db71      	blt.n	8018900 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801881c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	b113      	cbz	r3, 8018828 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018822:	1d38      	adds	r0, r7, #4
 8018824:	f7fe f8c6 	bl	80169b4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8018828:	f7ff f9d4 	bl	8017bd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801882c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801882e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8018830:	4298      	cmp	r0, r3
 8018832:	d37d      	bcc.n	8018930 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8018834:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8018836:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 801883a:	2b09      	cmp	r3, #9
 801883c:	d8e4      	bhi.n	8018808 <prvTimerTask+0x68>
 801883e:	e8df f003 	tbb	[pc, r3]
 8018842:	0505      	.short	0x0505
 8018844:	56394f05 	.word	0x56394f05
 8018848:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801884c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018850:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018852:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018856:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018858:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801885a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801885e:	185a      	adds	r2, r3, r1
 8018860:	bf2c      	ite	cs
 8018862:	2001      	movcs	r0, #1
 8018864:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8018866:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018868:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 801886a:	f200 8081 	bhi.w	8018970 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801886e:	eba8 0303 	sub.w	r3, r8, r3
 8018872:	4299      	cmp	r1, r3
 8018874:	f200 80b5 	bhi.w	80189e2 <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018878:	6a3b      	ldr	r3, [r7, #32]
 801887a:	4638      	mov	r0, r7
 801887c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801887e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018882:	0759      	lsls	r1, r3, #29
 8018884:	d5c0      	bpl.n	8018808 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018886:	2200      	movs	r2, #0
 8018888:	69bb      	ldr	r3, [r7, #24]
 801888a:	4638      	mov	r0, r7
 801888c:	9200      	str	r2, [sp, #0]
 801888e:	9a03      	ldr	r2, [sp, #12]
 8018890:	441a      	add	r2, r3
 8018892:	2300      	movs	r3, #0
 8018894:	4619      	mov	r1, r3
 8018896:	f7ff ff07 	bl	80186a8 <xTimerGenericCommand>
							configASSERT( xResult );
 801889a:	2800      	cmp	r0, #0
 801889c:	d1b4      	bne.n	8018808 <prvTimerTask+0x68>
 801889e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80188a2:	b672      	cpsid	i
 80188a4:	f383 8811 	msr	BASEPRI, r3
 80188a8:	f3bf 8f6f 	isb	sy
 80188ac:	f3bf 8f4f 	dsb	sy
 80188b0:	b662      	cpsie	i
 80188b2:	e7fe      	b.n	80188b2 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188b8:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188ba:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188be:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188c0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	f000 8098 	beq.w	80189fa <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80188ca:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80188cc:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188ce:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80188d0:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80188d2:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80188d4:	d856      	bhi.n	8018984 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80188d6:	4b51      	ldr	r3, [pc, #324]	; (8018a1c <prvTimerTask+0x27c>)
 80188d8:	6818      	ldr	r0, [r3, #0]
 80188da:	f7fe f853 	bl	8016984 <vListInsert>
	return xProcessTimerNow;
 80188de:	e793      	b.n	8018808 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188e4:	f023 0301 	bic.w	r3, r3, #1
 80188e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 80188ec:	e78c      	b.n	8018808 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80188ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188f2:	079a      	lsls	r2, r3, #30
 80188f4:	d56c      	bpl.n	80189d0 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188f6:	f023 0301 	bic.w	r3, r3, #1
 80188fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80188fe:	e783      	b.n	8018808 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018900:	9b03      	ldr	r3, [sp, #12]
 8018902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018906:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018908:	9b02      	ldr	r3, [sp, #8]
 801890a:	2b00      	cmp	r3, #0
 801890c:	f6ff af7c 	blt.w	8018808 <prvTimerTask+0x68>
 8018910:	e784      	b.n	801881c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8018912:	f7ff f957 	bl	8017bc4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8018916:	f7ff f95d 	bl	8017bd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801891a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801891c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801891e:	4282      	cmp	r2, r0
 8018920:	d909      	bls.n	8018936 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 8018922:	f7ff fef9 	bl	8018718 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8018926:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 801892a:	f7ff faa7 	bl	8017e7c <xTaskResumeAll>
 801892e:	e76b      	b.n	8018808 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8018930:	f7ff fef2 	bl	8018718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018934:	e77e      	b.n	8018834 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018936:	4b39      	ldr	r3, [pc, #228]	; (8018a1c <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8018938:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801893c:	681a      	ldr	r2, [r3, #0]
 801893e:	6812      	ldr	r2, [r2, #0]
 8018940:	fab2 f282 	clz	r2, r2
 8018944:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018946:	eba7 010a 	sub.w	r1, r7, sl
 801894a:	6820      	ldr	r0, [r4, #0]
 801894c:	f7fe fd9a 	bl	8017484 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018950:	f7ff fa94 	bl	8017e7c <xTaskResumeAll>
 8018954:	2800      	cmp	r0, #0
 8018956:	f47f af57 	bne.w	8018808 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 801895a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801895e:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8018962:	f3bf 8f4f 	dsb	sy
 8018966:	f3bf 8f6f 	isb	sy
 801896a:	e74d      	b.n	8018808 <prvTimerTask+0x68>
 801896c:	2200      	movs	r2, #0
 801896e:	e7ea      	b.n	8018946 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018970:	4543      	cmp	r3, r8
 8018972:	d902      	bls.n	801897a <prvTimerTask+0x1da>
 8018974:	2800      	cmp	r0, #0
 8018976:	f43f af7f 	beq.w	8018878 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801897a:	1d39      	adds	r1, r7, #4
 801897c:	6830      	ldr	r0, [r6, #0]
 801897e:	f7fe f801 	bl	8016984 <vListInsert>
	return xProcessTimerNow;
 8018982:	e741      	b.n	8018808 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018984:	6830      	ldr	r0, [r6, #0]
 8018986:	f7fd fffd 	bl	8016984 <vListInsert>
 801898a:	e73d      	b.n	8018808 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801898c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018990:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018994:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8018996:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018998:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 801899c:	d31c      	bcc.n	80189d8 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801899e:	ebaa 0307 	sub.w	r3, sl, r7
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d823      	bhi.n	80189ee <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189a6:	2300      	movs	r3, #0
 80189a8:	463a      	mov	r2, r7
 80189aa:	4658      	mov	r0, fp
 80189ac:	4619      	mov	r1, r3
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	f7ff fe7a 	bl	80186a8 <xTimerGenericCommand>
			configASSERT( xResult );
 80189b4:	2800      	cmp	r0, #0
 80189b6:	f47f af23 	bne.w	8018800 <prvTimerTask+0x60>
 80189ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80189be:	b672      	cpsid	i
 80189c0:	f383 8811 	msr	BASEPRI, r3
 80189c4:	f3bf 8f6f 	isb	sy
 80189c8:	f3bf 8f4f 	dsb	sy
 80189cc:	b662      	cpsie	i
 80189ce:	e7fe      	b.n	80189ce <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 80189d0:	4638      	mov	r0, r7
 80189d2:	f000 fa9d 	bl	8018f10 <vPortFree>
 80189d6:	e717      	b.n	8018808 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189d8:	4641      	mov	r1, r8
 80189da:	6830      	ldr	r0, [r6, #0]
 80189dc:	f7fd ffd2 	bl	8016984 <vListInsert>
	return xProcessTimerNow;
 80189e0:	e70e      	b.n	8018800 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80189e2:	4b0e      	ldr	r3, [pc, #56]	; (8018a1c <prvTimerTask+0x27c>)
 80189e4:	1d39      	adds	r1, r7, #4
 80189e6:	6818      	ldr	r0, [r3, #0]
 80189e8:	f7fd ffcc 	bl	8016984 <vListInsert>
	return xProcessTimerNow;
 80189ec:	e70c      	b.n	8018808 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80189ee:	4b0b      	ldr	r3, [pc, #44]	; (8018a1c <prvTimerTask+0x27c>)
 80189f0:	4641      	mov	r1, r8
 80189f2:	6818      	ldr	r0, [r3, #0]
 80189f4:	f7fd ffc6 	bl	8016984 <vListInsert>
	return xProcessTimerNow;
 80189f8:	e702      	b.n	8018800 <prvTimerTask+0x60>
 80189fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80189fe:	b672      	cpsid	i
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018a0e:	e7fe      	b.n	8018a0e <prvTimerTask+0x26e>
 8018a10:	20006850 	.word	0x20006850
 8018a14:	20006920 	.word	0x20006920
 8018a18:	2000696c 	.word	0x2000696c
 8018a1c:	20006854 	.word	0x20006854

08018a20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018a20:	4808      	ldr	r0, [pc, #32]	; (8018a44 <prvPortStartFirstTask+0x24>)
 8018a22:	6800      	ldr	r0, [r0, #0]
 8018a24:	6800      	ldr	r0, [r0, #0]
 8018a26:	f380 8808 	msr	MSP, r0
 8018a2a:	f04f 0000 	mov.w	r0, #0
 8018a2e:	f380 8814 	msr	CONTROL, r0
 8018a32:	b662      	cpsie	i
 8018a34:	b661      	cpsie	f
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	f3bf 8f6f 	isb	sy
 8018a3e:	df00      	svc	0
 8018a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018a42:	0000      	.short	0x0000
 8018a44:	e000ed08 	.word	0xe000ed08

08018a48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018a48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a58 <vPortEnableVFP+0x10>
 8018a4c:	6801      	ldr	r1, [r0, #0]
 8018a4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a52:	6001      	str	r1, [r0, #0]
 8018a54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a56:	0000      	.short	0x0000
 8018a58:	e000ed88 	.word	0xe000ed88

08018a5c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8018a5c:	4b10      	ldr	r3, [pc, #64]	; (8018aa0 <prvTaskExitError+0x44>)
{
 8018a5e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8018a60:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8018a62:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8018a64:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8018a66:	3301      	adds	r3, #1
 8018a68:	d00a      	beq.n	8018a80 <prvTaskExitError+0x24>
 8018a6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a6e:	b672      	cpsid	i
 8018a70:	f383 8811 	msr	BASEPRI, r3
 8018a74:	f3bf 8f6f 	isb	sy
 8018a78:	f3bf 8f4f 	dsb	sy
 8018a7c:	b662      	cpsie	i
 8018a7e:	e7fe      	b.n	8018a7e <prvTaskExitError+0x22>
 8018a80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a84:	b672      	cpsid	i
 8018a86:	f383 8811 	msr	BASEPRI, r3
 8018a8a:	f3bf 8f6f 	isb	sy
 8018a8e:	f3bf 8f4f 	dsb	sy
 8018a92:	b662      	cpsie	i
	while( ulDummy == 0 )
 8018a94:	9b01      	ldr	r3, [sp, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d0fc      	beq.n	8018a94 <prvTaskExitError+0x38>
}
 8018a9a:	b002      	add	sp, #8
 8018a9c:	4770      	bx	lr
 8018a9e:	bf00      	nop
 8018aa0:	20000444 	.word	0x20000444

08018aa4 <pxPortInitialiseStack>:
{
 8018aa4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018aa6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018aaa:	4809      	ldr	r0, [pc, #36]	; (8018ad0 <pxPortInitialiseStack+0x2c>)
{
 8018aac:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018aae:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018ab2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018ab6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8018aba:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018abe:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ac2:	f06f 0102 	mvn.w	r1, #2
}
 8018ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018aca:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8018ace:	4770      	bx	lr
 8018ad0:	08018a5d 	.word	0x08018a5d
 8018ad4:	ffffffff 	.word	0xffffffff
 8018ad8:	ffffffff 	.word	0xffffffff
 8018adc:	ffffffff 	.word	0xffffffff

08018ae0 <SVC_Handler>:
	__asm volatile (
 8018ae0:	4b07      	ldr	r3, [pc, #28]	; (8018b00 <pxCurrentTCBConst2>)
 8018ae2:	6819      	ldr	r1, [r3, #0]
 8018ae4:	6808      	ldr	r0, [r1, #0]
 8018ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aea:	f380 8809 	msr	PSP, r0
 8018aee:	f3bf 8f6f 	isb	sy
 8018af2:	f04f 0000 	mov.w	r0, #0
 8018af6:	f380 8811 	msr	BASEPRI, r0
 8018afa:	4770      	bx	lr
 8018afc:	f3af 8000 	nop.w

08018b00 <pxCurrentTCBConst2>:
 8018b00:	20006728 	.word	0x20006728

08018b04 <vPortEnterCritical>:
 8018b04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b08:	b672      	cpsid	i
 8018b0a:	f383 8811 	msr	BASEPRI, r3
 8018b0e:	f3bf 8f6f 	isb	sy
 8018b12:	f3bf 8f4f 	dsb	sy
 8018b16:	b662      	cpsie	i
	uxCriticalNesting++;
 8018b18:	4a0c      	ldr	r2, [pc, #48]	; (8018b4c <vPortEnterCritical+0x48>)
 8018b1a:	6813      	ldr	r3, [r2, #0]
 8018b1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8018b1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8018b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018b22:	d000      	beq.n	8018b26 <vPortEnterCritical+0x22>
}
 8018b24:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018b26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018b2a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8018b2e:	b2db      	uxtb	r3, r3
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d0f7      	beq.n	8018b24 <vPortEnterCritical+0x20>
 8018b34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b38:	b672      	cpsid	i
 8018b3a:	f383 8811 	msr	BASEPRI, r3
 8018b3e:	f3bf 8f6f 	isb	sy
 8018b42:	f3bf 8f4f 	dsb	sy
 8018b46:	b662      	cpsie	i
 8018b48:	e7fe      	b.n	8018b48 <vPortEnterCritical+0x44>
 8018b4a:	bf00      	nop
 8018b4c:	20000444 	.word	0x20000444

08018b50 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018b50:	4a09      	ldr	r2, [pc, #36]	; (8018b78 <vPortExitCritical+0x28>)
 8018b52:	6813      	ldr	r3, [r2, #0]
 8018b54:	b953      	cbnz	r3, 8018b6c <vPortExitCritical+0x1c>
 8018b56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b5a:	b672      	cpsid	i
 8018b5c:	f383 8811 	msr	BASEPRI, r3
 8018b60:	f3bf 8f6f 	isb	sy
 8018b64:	f3bf 8f4f 	dsb	sy
 8018b68:	b662      	cpsie	i
 8018b6a:	e7fe      	b.n	8018b6a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8018b6c:	3b01      	subs	r3, #1
 8018b6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018b70:	b90b      	cbnz	r3, 8018b76 <vPortExitCritical+0x26>
	__asm volatile
 8018b72:	f383 8811 	msr	BASEPRI, r3
}
 8018b76:	4770      	bx	lr
 8018b78:	20000444 	.word	0x20000444
 8018b7c:	ffffffff 	.word	0xffffffff

08018b80 <PendSV_Handler>:
	__asm volatile
 8018b80:	f3ef 8009 	mrs	r0, PSP
 8018b84:	f3bf 8f6f 	isb	sy
 8018b88:	4b15      	ldr	r3, [pc, #84]	; (8018be0 <pxCurrentTCBConst>)
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	f01e 0f10 	tst.w	lr, #16
 8018b90:	bf08      	it	eq
 8018b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9a:	6010      	str	r0, [r2, #0]
 8018b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018ba0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8018ba4:	b672      	cpsid	i
 8018ba6:	f380 8811 	msr	BASEPRI, r0
 8018baa:	f3bf 8f4f 	dsb	sy
 8018bae:	f3bf 8f6f 	isb	sy
 8018bb2:	b662      	cpsie	i
 8018bb4:	f7ff f9a8 	bl	8017f08 <vTaskSwitchContext>
 8018bb8:	f04f 0000 	mov.w	r0, #0
 8018bbc:	f380 8811 	msr	BASEPRI, r0
 8018bc0:	bc09      	pop	{r0, r3}
 8018bc2:	6819      	ldr	r1, [r3, #0]
 8018bc4:	6808      	ldr	r0, [r1, #0]
 8018bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bca:	f01e 0f10 	tst.w	lr, #16
 8018bce:	bf08      	it	eq
 8018bd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018bd4:	f380 8809 	msr	PSP, r0
 8018bd8:	f3bf 8f6f 	isb	sy
 8018bdc:	4770      	bx	lr
 8018bde:	bf00      	nop

08018be0 <pxCurrentTCBConst>:
 8018be0:	20006728 	.word	0x20006728

08018be4 <SysTick_Handler>:
{
 8018be4:	b508      	push	{r3, lr}
	__asm volatile
 8018be6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018bea:	b672      	cpsid	i
 8018bec:	f383 8811 	msr	BASEPRI, r3
 8018bf0:	f3bf 8f6f 	isb	sy
 8018bf4:	f3bf 8f4f 	dsb	sy
 8018bf8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8018bfa:	f7fe fff9 	bl	8017bf0 <xTaskIncrementTick>
 8018bfe:	b128      	cbz	r0, 8018c0c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018c00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	f383 8811 	msr	BASEPRI, r3
}
 8018c12:	bd08      	pop	{r3, pc}

08018c14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c14:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018c18:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c1a:	4b06      	ldr	r3, [pc, #24]	; (8018c34 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c1c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c1e:	4806      	ldr	r0, [pc, #24]	; (8018c38 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018c20:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c22:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	fba0 0303 	umull	r0, r3, r0, r3
 8018c2a:	099b      	lsrs	r3, r3, #6
 8018c2c:	3b01      	subs	r3, #1
 8018c2e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c30:	6111      	str	r1, [r2, #16]
}
 8018c32:	4770      	bx	lr
 8018c34:	200002b8 	.word	0x200002b8
 8018c38:	10624dd3 	.word	0x10624dd3

08018c3c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c3c:	4b30      	ldr	r3, [pc, #192]	; (8018d00 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c42:	4830      	ldr	r0, [pc, #192]	; (8018d04 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c44:	4930      	ldr	r1, [pc, #192]	; (8018d08 <xPortStartScheduler+0xcc>)
{
 8018c46:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c48:	781a      	ldrb	r2, [r3, #0]
{
 8018c4a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c4c:	b2d2      	uxtb	r2, r2
 8018c4e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c50:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c52:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c56:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c58:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c5a:	b2db      	uxtb	r3, r3
 8018c5c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c60:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c64:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c6c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c6e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c70:	d50f      	bpl.n	8018c92 <xPortStartScheduler+0x56>
 8018c72:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c74:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c78:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c7a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	b2db      	uxtb	r3, r3
 8018c80:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c88:	061b      	lsls	r3, r3, #24
 8018c8a:	d4f3      	bmi.n	8018c74 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c8c:	2903      	cmp	r1, #3
 8018c8e:	d00b      	beq.n	8018ca8 <xPortStartScheduler+0x6c>
 8018c90:	6001      	str	r1, [r0, #0]
	__asm volatile
 8018c92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018c96:	b672      	cpsid	i
 8018c98:	f383 8811 	msr	BASEPRI, r3
 8018c9c:	f3bf 8f6f 	isb	sy
 8018ca0:	f3bf 8f4f 	dsb	sy
 8018ca4:	b662      	cpsie	i
 8018ca6:	e7fe      	b.n	8018ca6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018ca8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018caa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cae:	4a14      	ldr	r2, [pc, #80]	; (8018d00 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018cb0:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cb4:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8018cb6:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018cb8:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018cbc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018cc4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018cc8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018ccc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018cd0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8018cd4:	f7ff ff9e 	bl	8018c14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8018cd8:	4b0c      	ldr	r3, [pc, #48]	; (8018d0c <xPortStartScheduler+0xd0>)
 8018cda:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8018cdc:	f7ff feb4 	bl	8018a48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ce0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8018ce4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018ce8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8018cec:	f7ff fe98 	bl	8018a20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018cf0:	f7ff f90a 	bl	8017f08 <vTaskSwitchContext>
}
 8018cf4:	4628      	mov	r0, r5
	prvTaskExitError();
 8018cf6:	f7ff feb1 	bl	8018a5c <prvTaskExitError>
}
 8018cfa:	b003      	add	sp, #12
 8018cfc:	bd30      	pop	{r4, r5, pc}
 8018cfe:	bf00      	nop
 8018d00:	e000e400 	.word	0xe000e400
 8018d04:	20006978 	.word	0x20006978
 8018d08:	20006974 	.word	0x20006974
 8018d0c:	20000444 	.word	0x20000444

08018d10 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018d10:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018d14:	2b0f      	cmp	r3, #15
 8018d16:	d910      	bls.n	8018d3a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d18:	4913      	ldr	r1, [pc, #76]	; (8018d68 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d1a:	4a14      	ldr	r2, [pc, #80]	; (8018d6c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d1c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d1e:	7812      	ldrb	r2, [r2, #0]
 8018d20:	429a      	cmp	r2, r3
 8018d22:	d90a      	bls.n	8018d3a <vPortValidateInterruptPriority+0x2a>
 8018d24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018d28:	b672      	cpsid	i
 8018d2a:	f383 8811 	msr	BASEPRI, r3
 8018d2e:	f3bf 8f6f 	isb	sy
 8018d32:	f3bf 8f4f 	dsb	sy
 8018d36:	b662      	cpsie	i
 8018d38:	e7fe      	b.n	8018d38 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018d3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018d3e:	4a0c      	ldr	r2, [pc, #48]	; (8018d70 <vPortValidateInterruptPriority+0x60>)
 8018d40:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8018d44:	6812      	ldr	r2, [r2, #0]
 8018d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018d4a:	4293      	cmp	r3, r2
 8018d4c:	d90a      	bls.n	8018d64 <vPortValidateInterruptPriority+0x54>
 8018d4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018d52:	b672      	cpsid	i
 8018d54:	f383 8811 	msr	BASEPRI, r3
 8018d58:	f3bf 8f6f 	isb	sy
 8018d5c:	f3bf 8f4f 	dsb	sy
 8018d60:	b662      	cpsie	i
 8018d62:	e7fe      	b.n	8018d62 <vPortValidateInterruptPriority+0x52>
	}
 8018d64:	4770      	bx	lr
 8018d66:	bf00      	nop
 8018d68:	e000e3f0 	.word	0xe000e3f0
 8018d6c:	20006974 	.word	0x20006974
 8018d70:	20006978 	.word	0x20006978

08018d74 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d74:	4b16      	ldr	r3, [pc, #88]	; (8018dd0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8018d76:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d78:	461a      	mov	r2, r3
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	4283      	cmp	r3, r0
 8018d7e:	d3fb      	bcc.n	8018d78 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018d80:	6851      	ldr	r1, [r2, #4]
 8018d82:	eb02 0c01 	add.w	ip, r2, r1
 8018d86:	4560      	cmp	r0, ip
 8018d88:	d00b      	beq.n	8018da2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018d8a:	6841      	ldr	r1, [r0, #4]
 8018d8c:	eb00 0c01 	add.w	ip, r0, r1
 8018d90:	4563      	cmp	r3, ip
 8018d92:	d00e      	beq.n	8018db2 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018d94:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018d96:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018d98:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018d9c:	bf18      	it	ne
 8018d9e:	6010      	strne	r0, [r2, #0]
}
 8018da0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018da2:	6844      	ldr	r4, [r0, #4]
 8018da4:	4610      	mov	r0, r2
 8018da6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018da8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018dac:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018dae:	4563      	cmp	r3, ip
 8018db0:	d1f0      	bne.n	8018d94 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018db2:	4c08      	ldr	r4, [pc, #32]	; (8018dd4 <prvInsertBlockIntoFreeList+0x60>)
 8018db4:	6824      	ldr	r4, [r4, #0]
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	d0ec      	beq.n	8018d94 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 8018dba:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018dbc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018dc0:	4421      	add	r1, r4
}
 8018dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018dc6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018dca:	bf18      	it	ne
 8018dcc:	6010      	strne	r0, [r2, #0]
}
 8018dce:	4770      	bx	lr
 8018dd0:	2001e98c 	.word	0x2001e98c
 8018dd4:	2000697c 	.word	0x2000697c

08018dd8 <pvPortMalloc>:
{
 8018dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ddc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8018dde:	f7fe fef1 	bl	8017bc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8018de2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8018f0c <pvPortMalloc+0x134>
 8018de6:	f8dc 3000 	ldr.w	r3, [ip]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d05d      	beq.n	8018eaa <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018dee:	4b42      	ldr	r3, [pc, #264]	; (8018ef8 <pvPortMalloc+0x120>)
 8018df0:	681d      	ldr	r5, [r3, #0]
 8018df2:	422c      	tst	r4, r5
 8018df4:	d130      	bne.n	8018e58 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8018df6:	b37c      	cbz	r4, 8018e58 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018df8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8018dfa:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018dfe:	d002      	beq.n	8018e06 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e00:	f021 0107 	bic.w	r1, r1, #7
 8018e04:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018e06:	b339      	cbz	r1, 8018e58 <pvPortMalloc+0x80>
 8018e08:	4f3c      	ldr	r7, [pc, #240]	; (8018efc <pvPortMalloc+0x124>)
 8018e0a:	683e      	ldr	r6, [r7, #0]
 8018e0c:	428e      	cmp	r6, r1
 8018e0e:	d323      	bcc.n	8018e58 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8018e10:	483b      	ldr	r0, [pc, #236]	; (8018f00 <pvPortMalloc+0x128>)
 8018e12:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e14:	e003      	b.n	8018e1e <pvPortMalloc+0x46>
 8018e16:	6823      	ldr	r3, [r4, #0]
 8018e18:	b123      	cbz	r3, 8018e24 <pvPortMalloc+0x4c>
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	461c      	mov	r4, r3
 8018e1e:	6862      	ldr	r2, [r4, #4]
 8018e20:	428a      	cmp	r2, r1
 8018e22:	d3f8      	bcc.n	8018e16 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8018e24:	f8dc 3000 	ldr.w	r3, [ip]
 8018e28:	42a3      	cmp	r3, r4
 8018e2a:	d015      	beq.n	8018e58 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018e2c:	6803      	ldr	r3, [r0, #0]
 8018e2e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018e32:	6823      	ldr	r3, [r4, #0]
 8018e34:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018e36:	1a53      	subs	r3, r2, r1
 8018e38:	2b10      	cmp	r3, #16
 8018e3a:	d91b      	bls.n	8018e74 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018e3c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e3e:	0742      	lsls	r2, r0, #29
 8018e40:	d013      	beq.n	8018e6a <pvPortMalloc+0x92>
 8018e42:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018e46:	b672      	cpsid	i
 8018e48:	f383 8811 	msr	BASEPRI, r3
 8018e4c:	f3bf 8f6f 	isb	sy
 8018e50:	f3bf 8f4f 	dsb	sy
 8018e54:	b662      	cpsie	i
 8018e56:	e7fe      	b.n	8018e56 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8018e58:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8018e5c:	f7ff f80e 	bl	8017e7c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8018e60:	f7e8 fa0e 	bl	8001280 <vApplicationMallocFailedHook>
}
 8018e64:	4640      	mov	r0, r8
 8018e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018e6a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018e6c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018e6e:	f7ff ff81 	bl	8018d74 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e72:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e74:	4b23      	ldr	r3, [pc, #140]	; (8018f04 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e76:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018e78:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e7a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e7c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e7e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018e80:	bf38      	it	cc
 8018e82:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8018e84:	2300      	movs	r3, #0
 8018e86:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8018e8a:	f7fe fff7 	bl	8017e7c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e8e:	f018 0f07 	tst.w	r8, #7
 8018e92:	d0e7      	beq.n	8018e64 <pvPortMalloc+0x8c>
 8018e94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018e98:	b672      	cpsid	i
 8018e9a:	f383 8811 	msr	BASEPRI, r3
 8018e9e:	f3bf 8f6f 	isb	sy
 8018ea2:	f3bf 8f4f 	dsb	sy
 8018ea6:	b662      	cpsie	i
 8018ea8:	e7fe      	b.n	8018ea8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8018eaa:	4b17      	ldr	r3, [pc, #92]	; (8018f08 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018eac:	075d      	lsls	r5, r3, #29
 8018eae:	d11b      	bne.n	8018ee8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018eb0:	461a      	mov	r2, r3
 8018eb2:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018eb6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8018eb8:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8018eba:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ebc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ec0:	f023 0307 	bic.w	r3, r3, #7
}
 8018ec4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ec6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8018ec8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8018ecc:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ed0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018ed4:	4b0a      	ldr	r3, [pc, #40]	; (8018f00 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8018ed6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018eda:	4b0a      	ldr	r3, [pc, #40]	; (8018f04 <pvPortMalloc+0x12c>)
 8018edc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ede:	4b07      	ldr	r3, [pc, #28]	; (8018efc <pvPortMalloc+0x124>)
 8018ee0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ee2:	4b05      	ldr	r3, [pc, #20]	; (8018ef8 <pvPortMalloc+0x120>)
 8018ee4:	601e      	str	r6, [r3, #0]
}
 8018ee6:	e784      	b.n	8018df2 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ee8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018eea:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018eee:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018ef2:	4610      	mov	r0, r2
 8018ef4:	e7e0      	b.n	8018eb8 <pvPortMalloc+0xe0>
 8018ef6:	bf00      	nop
 8018ef8:	2001e980 	.word	0x2001e980
 8018efc:	2001e984 	.word	0x2001e984
 8018f00:	2001e98c 	.word	0x2001e98c
 8018f04:	2001e988 	.word	0x2001e988
 8018f08:	20006980 	.word	0x20006980
 8018f0c:	2000697c 	.word	0x2000697c

08018f10 <vPortFree>:
	if( pv != NULL )
 8018f10:	b1f0      	cbz	r0, 8018f50 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018f12:	4a1c      	ldr	r2, [pc, #112]	; (8018f84 <vPortFree+0x74>)
 8018f14:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f18:	6812      	ldr	r2, [r2, #0]
 8018f1a:	4213      	tst	r3, r2
 8018f1c:	d00d      	beq.n	8018f3a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018f1e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8018f22:	b1b1      	cbz	r1, 8018f52 <vPortFree+0x42>
 8018f24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018f28:	b672      	cpsid	i
 8018f2a:	f383 8811 	msr	BASEPRI, r3
 8018f2e:	f3bf 8f6f 	isb	sy
 8018f32:	f3bf 8f4f 	dsb	sy
 8018f36:	b662      	cpsie	i
 8018f38:	e7fe      	b.n	8018f38 <vPortFree+0x28>
 8018f3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018f3e:	b672      	cpsid	i
 8018f40:	f383 8811 	msr	BASEPRI, r3
 8018f44:	f3bf 8f6f 	isb	sy
 8018f48:	f3bf 8f4f 	dsb	sy
 8018f4c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018f4e:	e7fe      	b.n	8018f4e <vPortFree+0x3e>
 8018f50:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018f52:	ea23 0302 	bic.w	r3, r3, r2
{
 8018f56:	b500      	push	{lr}
 8018f58:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018f5a:	f840 3c04 	str.w	r3, [r0, #-4]
 8018f5e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8018f60:	f7fe fe30 	bl	8017bc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f64:	4a08      	ldr	r2, [pc, #32]	; (8018f88 <vPortFree+0x78>)
 8018f66:	9801      	ldr	r0, [sp, #4]
 8018f68:	6811      	ldr	r1, [r2, #0]
 8018f6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f6e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f70:	440b      	add	r3, r1
 8018f72:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f74:	f7ff fefe 	bl	8018d74 <prvInsertBlockIntoFreeList>
}
 8018f78:	b003      	add	sp, #12
 8018f7a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8018f7e:	f7fe bf7d 	b.w	8017e7c <xTaskResumeAll>
 8018f82:	bf00      	nop
 8018f84:	2001e980 	.word	0x2001e980
 8018f88:	2001e984 	.word	0x2001e984

08018f8c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8018f8c:	f003 bb10 	b.w	801c5b0 <pbuf_free>

08018f90 <tcpip_thread>:
{
 8018f90:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8018f92:	4839      	ldr	r0, [pc, #228]	; (8019078 <tcpip_thread+0xe8>)
{
 8018f94:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8018f96:	f00b feff 	bl	8024d98 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018f9a:	4b38      	ldr	r3, [pc, #224]	; (801907c <tcpip_thread+0xec>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	b113      	cbz	r3, 8018fa6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8018fa0:	4a37      	ldr	r2, [pc, #220]	; (8019080 <tcpip_thread+0xf0>)
 8018fa2:	6810      	ldr	r0, [r2, #0]
 8018fa4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018fa6:	4d34      	ldr	r5, [pc, #208]	; (8019078 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018fa8:	4e36      	ldr	r6, [pc, #216]	; (8019084 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018faa:	4f37      	ldr	r7, [pc, #220]	; (8019088 <tcpip_thread+0xf8>)
 8018fac:	e010      	b.n	8018fd0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8018fae:	b168      	cbz	r0, 8018fcc <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8018fb0:	4628      	mov	r0, r5
 8018fb2:	f00b fef7 	bl	8024da4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018fb6:	4622      	mov	r2, r4
 8018fb8:	a901      	add	r1, sp, #4
 8018fba:	4630      	mov	r0, r6
 8018fbc:	f00b fea8 	bl	8024d10 <sys_arch_mbox_fetch>
 8018fc0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f00b fee8 	bl	8024d98 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018fc8:	3401      	adds	r4, #1
 8018fca:	d111      	bne.n	8018ff0 <tcpip_thread+0x60>
    sys_check_timeouts();
 8018fcc:	f008 f85c 	bl	8021088 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8018fd0:	f008 f882 	bl	80210d8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018fd4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8018fd6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018fd8:	d1e9      	bne.n	8018fae <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f00b fee2 	bl	8024da4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	a901      	add	r1, sp, #4
 8018fe4:	4630      	mov	r0, r6
 8018fe6:	f00b fe93 	bl	8024d10 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018fea:	4628      	mov	r0, r5
 8018fec:	f00b fed4 	bl	8024d98 <sys_mutex_lock>
    if (msg == NULL) {
 8018ff0:	9c01      	ldr	r4, [sp, #4]
 8018ff2:	b37c      	cbz	r4, 8019054 <tcpip_thread+0xc4>
  switch (msg->type) {
 8018ff4:	7823      	ldrb	r3, [r4, #0]
 8018ff6:	2b04      	cmp	r3, #4
 8018ff8:	d837      	bhi.n	801906a <tcpip_thread+0xda>
 8018ffa:	e8df f003 	tbb	[pc, r3]
 8018ffe:	1821      	.short	0x1821
 8019000:	070f      	.short	0x070f
 8019002:	03          	.byte	0x03
 8019003:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019004:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8019008:	4798      	blx	r3
      break;
 801900a:	e7e1      	b.n	8018fd0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801900c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8019010:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019012:	4621      	mov	r1, r4
 8019014:	2009      	movs	r0, #9
 8019016:	f002 fdb3 	bl	801bb80 <memp_free>
      break;
 801901a:	e7d9      	b.n	8018fd0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801901c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8019020:	f008 f814 	bl	802104c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019024:	4621      	mov	r1, r4
 8019026:	2009      	movs	r0, #9
 8019028:	f002 fdaa 	bl	801bb80 <memp_free>
      break;
 801902c:	e7d0      	b.n	8018fd0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801902e:	1d20      	adds	r0, r4, #4
 8019030:	c807      	ldmia	r0, {r0, r1, r2}
 8019032:	f007 ffed 	bl	8021010 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019036:	4621      	mov	r1, r4
 8019038:	2009      	movs	r0, #9
 801903a:	f002 fda1 	bl	801bb80 <memp_free>
      break;
 801903e:	e7c7      	b.n	8018fd0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8019040:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8019044:	6860      	ldr	r0, [r4, #4]
 8019046:	4798      	blx	r3
 8019048:	b958      	cbnz	r0, 8019062 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801904a:	4621      	mov	r1, r4
 801904c:	200a      	movs	r0, #10
 801904e:	f002 fd97 	bl	801bb80 <memp_free>
      break;
 8019052:	e7bd      	b.n	8018fd0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019054:	463b      	mov	r3, r7
 8019056:	2291      	movs	r2, #145	; 0x91
 8019058:	490c      	ldr	r1, [pc, #48]	; (801908c <tcpip_thread+0xfc>)
 801905a:	480d      	ldr	r0, [pc, #52]	; (8019090 <tcpip_thread+0x100>)
 801905c:	f00d fb72 	bl	8026744 <iprintf>
      continue;
 8019060:	e7b6      	b.n	8018fd0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8019062:	6860      	ldr	r0, [r4, #4]
 8019064:	f003 faa4 	bl	801c5b0 <pbuf_free>
 8019068:	e7ef      	b.n	801904a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801906a:	463b      	mov	r3, r7
 801906c:	22cf      	movs	r2, #207	; 0xcf
 801906e:	4907      	ldr	r1, [pc, #28]	; (801908c <tcpip_thread+0xfc>)
 8019070:	4807      	ldr	r0, [pc, #28]	; (8019090 <tcpip_thread+0x100>)
 8019072:	f00d fb67 	bl	8026744 <iprintf>
      break;
 8019076:	e7ab      	b.n	8018fd0 <tcpip_thread+0x40>
 8019078:	2001e994 	.word	0x2001e994
 801907c:	2001e998 	.word	0x2001e998
 8019080:	2001e99c 	.word	0x2001e99c
 8019084:	2001e9a0 	.word	0x2001e9a0
 8019088:	0802e720 	.word	0x0802e720
 801908c:	0802e750 	.word	0x0802e750
 8019090:	0802b43c 	.word	0x0802b43c

08019094 <tcpip_inpkt>:
{
 8019094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019096:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019098:	4814      	ldr	r0, [pc, #80]	; (80190ec <tcpip_inpkt+0x58>)
{
 801909a:	460e      	mov	r6, r1
 801909c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801909e:	f00b fe59 	bl	8024d54 <sys_mbox_valid>
 80190a2:	b188      	cbz	r0, 80190c8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80190a4:	22fe      	movs	r2, #254	; 0xfe
 80190a6:	4912      	ldr	r1, [pc, #72]	; (80190f0 <tcpip_inpkt+0x5c>)
 80190a8:	200a      	movs	r0, #10
 80190aa:	f002 fd33 	bl	801bb14 <memp_malloc_fn>
  if (msg == NULL) {
 80190ae:	4604      	mov	r4, r0
 80190b0:	b1c0      	cbz	r0, 80190e4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80190b2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80190b4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80190b6:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190b8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80190ba:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190bc:	480b      	ldr	r0, [pc, #44]	; (80190ec <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 80190be:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190c0:	f00b fe1c 	bl	8024cfc <sys_mbox_trypost>
 80190c4:	b938      	cbnz	r0, 80190d6 <tcpip_inpkt+0x42>
}
 80190c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190c8:	4b09      	ldr	r3, [pc, #36]	; (80190f0 <tcpip_inpkt+0x5c>)
 80190ca:	22fc      	movs	r2, #252	; 0xfc
 80190cc:	4909      	ldr	r1, [pc, #36]	; (80190f4 <tcpip_inpkt+0x60>)
 80190ce:	480a      	ldr	r0, [pc, #40]	; (80190f8 <tcpip_inpkt+0x64>)
 80190d0:	f00d fb38 	bl	8026744 <iprintf>
 80190d4:	e7e6      	b.n	80190a4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80190d6:	4621      	mov	r1, r4
 80190d8:	200a      	movs	r0, #10
 80190da:	f002 fd51 	bl	801bb80 <memp_free>
    return ERR_MEM;
 80190de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80190e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80190e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80190e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190ea:	bf00      	nop
 80190ec:	2001e9a0 	.word	0x2001e9a0
 80190f0:	0802e720 	.word	0x0802e720
 80190f4:	0802e770 	.word	0x0802e770
 80190f8:	0802b43c 	.word	0x0802b43c

080190fc <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80190fc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8019100:	f013 0f18 	tst.w	r3, #24
 8019104:	d002      	beq.n	801910c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019106:	4a03      	ldr	r2, [pc, #12]	; (8019114 <tcpip_input+0x18>)
 8019108:	f7ff bfc4 	b.w	8019094 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 801910c:	4a02      	ldr	r2, [pc, #8]	; (8019118 <tcpip_input+0x1c>)
 801910e:	f7ff bfc1 	b.w	8019094 <tcpip_inpkt>
 8019112:	bf00      	nop
 8019114:	08024bbd 	.word	0x08024bbd
 8019118:	08023e19 	.word	0x08023e19

0801911c <tcpip_try_callback>:
{
 801911c:	b570      	push	{r4, r5, r6, lr}
 801911e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019120:	4814      	ldr	r0, [pc, #80]	; (8019174 <tcpip_try_callback+0x58>)
{
 8019122:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019124:	f00b fe16 	bl	8024d54 <sys_mbox_valid>
 8019128:	b188      	cbz	r0, 801914e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801912a:	f240 125f 	movw	r2, #351	; 0x15f
 801912e:	4912      	ldr	r1, [pc, #72]	; (8019178 <tcpip_try_callback+0x5c>)
 8019130:	2009      	movs	r0, #9
 8019132:	f002 fcef 	bl	801bb14 <memp_malloc_fn>
  if (msg == NULL) {
 8019136:	4604      	mov	r4, r0
 8019138:	b1c0      	cbz	r0, 801916c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801913a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801913c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801913e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019142:	480c      	ldr	r0, [pc, #48]	; (8019174 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8019144:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019146:	f00b fdd9 	bl	8024cfc <sys_mbox_trypost>
 801914a:	b940      	cbnz	r0, 801915e <tcpip_try_callback+0x42>
}
 801914c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801914e:	4b0a      	ldr	r3, [pc, #40]	; (8019178 <tcpip_try_callback+0x5c>)
 8019150:	f240 125d 	movw	r2, #349	; 0x15d
 8019154:	4909      	ldr	r1, [pc, #36]	; (801917c <tcpip_try_callback+0x60>)
 8019156:	480a      	ldr	r0, [pc, #40]	; (8019180 <tcpip_try_callback+0x64>)
 8019158:	f00d faf4 	bl	8026744 <iprintf>
 801915c:	e7e5      	b.n	801912a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801915e:	4621      	mov	r1, r4
 8019160:	2009      	movs	r0, #9
 8019162:	f002 fd0d 	bl	801bb80 <memp_free>
    return ERR_MEM;
 8019166:	f04f 30ff 	mov.w	r0, #4294967295
}
 801916a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 801916c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019170:	bd70      	pop	{r4, r5, r6, pc}
 8019172:	bf00      	nop
 8019174:	2001e9a0 	.word	0x2001e9a0
 8019178:	0802e720 	.word	0x0802e720
 801917c:	0802e770 	.word	0x0802e770
 8019180:	0802b43c 	.word	0x0802b43c

08019184 <tcpip_init>:
{
 8019184:	b530      	push	{r4, r5, lr}
 8019186:	b083      	sub	sp, #12
 8019188:	4605      	mov	r5, r0
 801918a:	460c      	mov	r4, r1
  lwip_init();
 801918c:	f001 ffae 	bl	801b0ec <lwip_init>
  tcpip_init_done = initfunc;
 8019190:	4a15      	ldr	r2, [pc, #84]	; (80191e8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019192:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 8019194:	4b15      	ldr	r3, [pc, #84]	; (80191ec <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019196:	4816      	ldr	r0, [pc, #88]	; (80191f0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8019198:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 801919a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801919c:	f00b fd98 	bl	8024cd0 <sys_mbox_new>
 80191a0:	b968      	cbnz	r0, 80191be <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80191a2:	4814      	ldr	r0, [pc, #80]	; (80191f4 <tcpip_init+0x70>)
 80191a4:	f00b fde8 	bl	8024d78 <sys_mutex_new>
 80191a8:	b9a8      	cbnz	r0, 80191d6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80191aa:	2200      	movs	r2, #0
 80191ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80191b0:	4911      	ldr	r1, [pc, #68]	; (80191f8 <tcpip_init+0x74>)
 80191b2:	9200      	str	r2, [sp, #0]
 80191b4:	4811      	ldr	r0, [pc, #68]	; (80191fc <tcpip_init+0x78>)
 80191b6:	f00b fdf9 	bl	8024dac <sys_thread_new>
}
 80191ba:	b003      	add	sp, #12
 80191bc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80191be:	4b10      	ldr	r3, [pc, #64]	; (8019200 <tcpip_init+0x7c>)
 80191c0:	f240 2261 	movw	r2, #609	; 0x261
 80191c4:	490f      	ldr	r1, [pc, #60]	; (8019204 <tcpip_init+0x80>)
 80191c6:	4810      	ldr	r0, [pc, #64]	; (8019208 <tcpip_init+0x84>)
 80191c8:	f00d fabc 	bl	8026744 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80191cc:	4809      	ldr	r0, [pc, #36]	; (80191f4 <tcpip_init+0x70>)
 80191ce:	f00b fdd3 	bl	8024d78 <sys_mutex_new>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	d0e9      	beq.n	80191aa <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80191d6:	4b0a      	ldr	r3, [pc, #40]	; (8019200 <tcpip_init+0x7c>)
 80191d8:	f240 2265 	movw	r2, #613	; 0x265
 80191dc:	490b      	ldr	r1, [pc, #44]	; (801920c <tcpip_init+0x88>)
 80191de:	480a      	ldr	r0, [pc, #40]	; (8019208 <tcpip_init+0x84>)
 80191e0:	f00d fab0 	bl	8026744 <iprintf>
 80191e4:	e7e1      	b.n	80191aa <tcpip_init+0x26>
 80191e6:	bf00      	nop
 80191e8:	2001e998 	.word	0x2001e998
 80191ec:	2001e99c 	.word	0x2001e99c
 80191f0:	2001e9a0 	.word	0x2001e9a0
 80191f4:	2001e994 	.word	0x2001e994
 80191f8:	08018f91 	.word	0x08018f91
 80191fc:	0802e7c8 	.word	0x0802e7c8
 8019200:	0802e720 	.word	0x0802e720
 8019204:	0802e780 	.word	0x0802e780
 8019208:	0802b43c 	.word	0x0802b43c
 801920c:	0802e7a4 	.word	0x0802e7a4

08019210 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8019210:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8019212:	4801      	ldr	r0, [pc, #4]	; (8019218 <pbuf_free_callback+0x8>)
 8019214:	f7ff bf82 	b.w	801911c <tcpip_try_callback>
 8019218:	08018f8d 	.word	0x08018f8d

0801921c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801921c:	b1e8      	cbz	r0, 801925a <fs_open+0x3e>
{
 801921e:	b570      	push	{r4, r5, r6, lr}
 8019220:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8019222:	b1b9      	cbz	r1, 8019254 <fs_open+0x38>
 8019224:	4606      	mov	r6, r0
 8019226:	490e      	ldr	r1, [pc, #56]	; (8019260 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019228:	4c0e      	ldr	r4, [pc, #56]	; (8019264 <fs_open+0x48>)
 801922a:	e000      	b.n	801922e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 801922c:	6861      	ldr	r1, [r4, #4]
 801922e:	4628      	mov	r0, r5
 8019230:	f7e7 f806 	bl	8000240 <strcmp>
 8019234:	b128      	cbz	r0, 8019242 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019236:	6824      	ldr	r4, [r4, #0]
 8019238:	2c00      	cmp	r4, #0
 801923a:	d1f7      	bne.n	801922c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 801923c:	f06f 0005 	mvn.w	r0, #5
}
 8019240:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8019242:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8019246:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8019248:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 801924a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 801924e:	7c23      	ldrb	r3, [r4, #16]
 8019250:	7433      	strb	r3, [r6, #16]
}
 8019252:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8019254:	f06f 000f 	mvn.w	r0, #15
}
 8019258:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801925a:	f06f 000f 	mvn.w	r0, #15
}
 801925e:	4770      	bx	lr
 8019260:	0803965c 	.word	0x0803965c
 8019264:	080447c8 	.word	0x080447c8

08019268 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8019268:	4770      	bx	lr
 801926a:	bf00      	nop

0801926c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 801926c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8019270:	1a10      	subs	r0, r2, r0
 8019272:	4770      	bx	lr

08019274 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8019274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8019278:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801927a:	b374      	cbz	r4, 80192da <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801927c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8019280:	4617      	mov	r7, r2
 8019282:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8019286:	4605      	mov	r5, r0
 8019288:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801928c:	460e      	mov	r6, r1
 801928e:	4698      	mov	r8, r3
 8019290:	fa1f fc8c 	uxth.w	ip, ip
 8019294:	4594      	cmp	ip, r2
 8019296:	bf28      	it	cs
 8019298:	4694      	movcs	ip, r2
 801929a:	4564      	cmp	r4, ip
 801929c:	bf28      	it	cs
 801929e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80192a0:	4643      	mov	r3, r8
 80192a2:	4622      	mov	r2, r4
 80192a4:	4631      	mov	r1, r6
 80192a6:	4628      	mov	r0, r5
 80192a8:	f006 fd1a 	bl	801fce0 <tcp_write>
    if (err == ERR_MEM) {
 80192ac:	1c43      	adds	r3, r0, #1
 80192ae:	d007      	beq.n	80192c0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80192b0:	b970      	cbnz	r0, 80192d0 <http_write+0x5c>
 80192b2:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80192b4:	8b6b      	ldrh	r3, [r5, #26]
 80192b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80192ba:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 80192bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80192c0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80192c4:	b123      	cbz	r3, 80192d0 <http_write+0x5c>
 80192c6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 80192ca:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80192cc:	2b08      	cmp	r3, #8
 80192ce:	d901      	bls.n	80192d4 <http_write+0x60>
    *length = 0;
 80192d0:	2400      	movs	r4, #0
 80192d2:	e7ee      	b.n	80192b2 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 80192d4:	2c01      	cmp	r4, #1
 80192d6:	d8e3      	bhi.n	80192a0 <http_write+0x2c>
 80192d8:	e7fa      	b.n	80192d0 <http_write+0x5c>
    return ERR_OK;
 80192da:	4620      	mov	r0, r4
}
 80192dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192e0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80192e0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 80192e2:	4b0e      	ldr	r3, [pc, #56]	; (801931c <http_get_404_file+0x3c>)
{
 80192e4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 80192e6:	4604      	mov	r4, r0
 80192e8:	4619      	mov	r1, r3
  *uri = "/404.html";
 80192ea:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80192ec:	f7ff ff96 	bl	801921c <fs_open>
  if (err != ERR_OK) {
 80192f0:	b908      	cbnz	r0, 80192f6 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 80192f2:	4620      	mov	r0, r4
 80192f4:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 80192f6:	490a      	ldr	r1, [pc, #40]	; (8019320 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 80192f8:	4620      	mov	r0, r4
    *uri = "/404.htm";
 80192fa:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 80192fc:	f7ff ff8e 	bl	801921c <fs_open>
    if (err != ERR_OK) {
 8019300:	2800      	cmp	r0, #0
 8019302:	d0f6      	beq.n	80192f2 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8019304:	4907      	ldr	r1, [pc, #28]	; (8019324 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8019306:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8019308:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 801930a:	f7ff ff87 	bl	801921c <fs_open>
      if (err != ERR_OK) {
 801930e:	2800      	cmp	r0, #0
 8019310:	d0ef      	beq.n	80192f2 <http_get_404_file+0x12>
        *uri = NULL;
 8019312:	2300      	movs	r3, #0
        return NULL;
 8019314:	461c      	mov	r4, r3
        *uri = NULL;
 8019316:	602b      	str	r3, [r5, #0]
        return NULL;
 8019318:	e7eb      	b.n	80192f2 <http_get_404_file+0x12>
 801931a:	bf00      	nop
 801931c:	080447dc 	.word	0x080447dc
 8019320:	080447e8 	.word	0x080447e8
 8019324:	080447f4 	.word	0x080447f4

08019328 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8019328:	bb82      	cbnz	r2, 801938c <http_accept+0x64>
{
 801932a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801932c:	fab1 f581 	clz	r5, r1
 8019330:	460c      	mov	r4, r1
 8019332:	096d      	lsrs	r5, r5, #5
 8019334:	b339      	cbz	r1, 8019386 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8019336:	2101      	movs	r1, #1
 8019338:	4620      	mov	r0, r4
 801933a:	f003 fec3 	bl	801d0c4 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801933e:	2034      	movs	r0, #52	; 0x34
 8019340:	f002 fa46 	bl	801b7d0 <mem_malloc>
  if (ret != NULL) {
 8019344:	4606      	mov	r6, r0
 8019346:	b1d8      	cbz	r0, 8019380 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8019348:	2234      	movs	r2, #52	; 0x34
 801934a:	4629      	mov	r1, r5
 801934c:	f00c fa5c 	bl	8025808 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8019350:	4631      	mov	r1, r6
 8019352:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8019354:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8019356:	f003 feeb 	bl	801d130 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801935a:	4620      	mov	r0, r4
 801935c:	490d      	ldr	r1, [pc, #52]	; (8019394 <http_accept+0x6c>)
 801935e:	f003 feeb 	bl	801d138 <tcp_recv>
  altcp_err(pcb, http_err);
 8019362:	4620      	mov	r0, r4
 8019364:	490c      	ldr	r1, [pc, #48]	; (8019398 <http_accept+0x70>)
 8019366:	f003 ff1f 	bl	801d1a8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801936a:	2204      	movs	r2, #4
 801936c:	4620      	mov	r0, r4
 801936e:	490b      	ldr	r1, [pc, #44]	; (801939c <http_accept+0x74>)
 8019370:	f003 ff3c 	bl	801d1ec <tcp_poll>
  altcp_sent(pcb, http_sent);
 8019374:	4620      	mov	r0, r4
 8019376:	490a      	ldr	r1, [pc, #40]	; (80193a0 <http_accept+0x78>)
 8019378:	f003 fefa 	bl	801d170 <tcp_sent>

  return ERR_OK;
 801937c:	4628      	mov	r0, r5
}
 801937e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8019380:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019384:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8019386:	f06f 0005 	mvn.w	r0, #5
}
 801938a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801938c:	f06f 0005 	mvn.w	r0, #5
}
 8019390:	4770      	bx	lr
 8019392:	bf00      	nop
 8019394:	0801a001 	.word	0x0801a001
 8019398:	080198e9 	.word	0x080198e9
 801939c:	08019fa9 	.word	0x08019fa9
 80193a0:	08019f91 	.word	0x08019f91

080193a4 <http_init_file>:
{
 80193a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a8:	b087      	sub	sp, #28
 80193aa:	4604      	mov	r4, r0
  if (file != NULL) {
 80193ac:	460e      	mov	r6, r1
{
 80193ae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80193b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80193b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 80193b8:	2900      	cmp	r1, #0
 80193ba:	f000 80aa 	beq.w	8019512 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80193be:	680b      	ldr	r3, [r1, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	f000 80ac 	beq.w	801951e <http_init_file+0x17a>
    if (tag_check) {
 80193c6:	2f00      	cmp	r7, #0
 80193c8:	d16f      	bne.n	80194aa <http_init_file+0x106>
    hs->handle = file;
 80193ca:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80193cc:	2d00      	cmp	r5, #0
 80193ce:	d04f      	beq.n	8019470 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 80193d0:	782b      	ldrb	r3, [r5, #0]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	f000 80c0 	beq.w	8019558 <http_init_file+0x1b4>
 80193d8:	4b61      	ldr	r3, [pc, #388]	; (8019560 <http_init_file+0x1bc>)
 80193da:	2701      	movs	r7, #1
 80193dc:	9405      	str	r4, [sp, #20]
 80193de:	462c      	mov	r4, r5
 80193e0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8019564 <http_init_file+0x1c0>
 80193e4:	4698      	mov	r8, r3
 80193e6:	9304      	str	r3, [sp, #16]
 80193e8:	e017      	b.n	801941a <http_init_file+0x76>
 80193ea:	2d0e      	cmp	r5, #14
      *pair = '\0';
 80193ec:	f04f 0300 	mov.w	r3, #0
 80193f0:	bfcc      	ite	gt
 80193f2:	2500      	movgt	r5, #0
 80193f4:	2501      	movle	r5, #1
 80193f6:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 80193fa:	4620      	mov	r0, r4
 80193fc:	213d      	movs	r1, #61	; 0x3d
 80193fe:	f00d fc34 	bl	8026c6a <strchr>
    if (equals) {
 8019402:	b320      	cbz	r0, 801944e <http_init_file+0xaa>
      *equals = '\0';
 8019404:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019408:	f108 0804 	add.w	r8, r8, #4
 801940c:	3701      	adds	r7, #1
 801940e:	465c      	mov	r4, fp
      *equals = '\0';
 8019410:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8019414:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019418:	b30d      	cbz	r5, 801945e <http_init_file+0xba>
    pair = strchr(pair, '&');
 801941a:	4620      	mov	r0, r4
 801941c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801941e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8019422:	1e7d      	subs	r5, r7, #1
 8019424:	f00d fc21 	bl	8026c6a <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019428:	46ba      	mov	sl, r7
    if (pair) {
 801942a:	4683      	mov	fp, r0
 801942c:	2800      	cmp	r0, #0
 801942e:	d1dc      	bne.n	80193ea <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8019430:	4620      	mov	r0, r4
 8019432:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019434:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8019436:	f00d fc18 	bl	8026c6a <strchr>
      if (pair) {
 801943a:	2800      	cmp	r0, #0
 801943c:	d0dd      	beq.n	80193fa <http_init_file+0x56>
        *pair = '\0';
 801943e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8019442:	213d      	movs	r1, #61	; 0x3d
 8019444:	4620      	mov	r0, r4
 8019446:	f00d fc10 	bl	8026c6a <strchr>
    if (equals) {
 801944a:	2800      	cmp	r0, #0
 801944c:	d1da      	bne.n	8019404 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801944e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019452:	3701      	adds	r7, #1
 8019454:	f108 0804 	add.w	r8, r8, #4
 8019458:	465c      	mov	r4, fp
 801945a:	2d00      	cmp	r5, #0
 801945c:	d1dd      	bne.n	801941a <http_init_file+0x76>
 801945e:	4652      	mov	r2, sl
 8019460:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8019462:	9b04      	ldr	r3, [sp, #16]
 8019464:	4630      	mov	r0, r6
 8019466:	9903      	ldr	r1, [sp, #12]
 8019468:	9300      	str	r3, [sp, #0]
 801946a:	4b3e      	ldr	r3, [pc, #248]	; (8019564 <http_init_file+0x1c0>)
 801946c:	f7ef fb72 	bl	8008b54 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019470:	e9d6 3200 	ldrd	r3, r2, [r6]
 8019474:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8019476:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019478:	db5c      	blt.n	8019534 <http_init_file+0x190>
    hs->retries = 0;
 801947a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801947c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801947e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8019480:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8019484:	7c1b      	ldrb	r3, [r3, #16]
 8019486:	07d9      	lsls	r1, r3, #31
 8019488:	d526      	bpl.n	80194d8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801948a:	9b02      	ldr	r3, [sp, #8]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d132      	bne.n	80194f6 <http_init_file+0x152>
  if (hs->keepalive) {
 8019490:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8019494:	b12b      	cbz	r3, 80194a2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8019496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019498:	2b00      	cmp	r3, #0
 801949a:	d054      	beq.n	8019546 <http_init_file+0x1a2>
      hs->keepalive = 0;
 801949c:	2300      	movs	r3, #0
 801949e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80194a2:	2000      	movs	r0, #0
 80194a4:	b007      	add	sp, #28
 80194a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80194aa:	f44f 7090 	mov.w	r0, #288	; 0x120
 80194ae:	f002 f98f 	bl	801b7d0 <mem_malloc>
  if (ret != NULL) {
 80194b2:	4607      	mov	r7, r0
 80194b4:	2800      	cmp	r0, #0
 80194b6:	d088      	beq.n	80193ca <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80194b8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80194bc:	2100      	movs	r1, #0
 80194be:	f00c f9a3 	bl	8025808 <memset>
        ssi->parsed = file->data;
 80194c2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 80194c4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 80194c6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 80194c8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 80194cc:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 80194ce:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80194d0:	2d00      	cmp	r5, #0
 80194d2:	f47f af7d 	bne.w	80193d0 <http_init_file+0x2c>
 80194d6:	e7cb      	b.n	8019470 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 80194d8:	4b23      	ldr	r3, [pc, #140]	; (8019568 <http_init_file+0x1c4>)
 80194da:	f640 1243 	movw	r2, #2371	; 0x943
 80194de:	4923      	ldr	r1, [pc, #140]	; (801956c <http_init_file+0x1c8>)
 80194e0:	4823      	ldr	r0, [pc, #140]	; (8019570 <http_init_file+0x1cc>)
 80194e2:	f00d f92f 	bl	8026744 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80194e6:	9b02      	ldr	r3, [sp, #8]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d0d1      	beq.n	8019490 <http_init_file+0xec>
 80194ec:	6963      	ldr	r3, [r4, #20]
 80194ee:	7c1b      	ldrb	r3, [r3, #16]
 80194f0:	07db      	lsls	r3, r3, #31
 80194f2:	d5cd      	bpl.n	8019490 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80194f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80194f6:	491f      	ldr	r1, [pc, #124]	; (8019574 <http_init_file+0x1d0>)
 80194f8:	69a0      	ldr	r0, [r4, #24]
 80194fa:	f001 f823 	bl	801a544 <lwip_strnstr>
      if (file_start != NULL) {
 80194fe:	2800      	cmp	r0, #0
 8019500:	d0c6      	beq.n	8019490 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8019502:	3004      	adds	r0, #4
 8019504:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8019506:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8019508:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801950a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801950c:	1a9b      	subs	r3, r3, r2
 801950e:	6263      	str	r3, [r4, #36]	; 0x24
 8019510:	e7be      	b.n	8019490 <http_init_file+0xec>
    hs->file = NULL;
 8019512:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8019516:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8019518:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801951c:	e7b8      	b.n	8019490 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801951e:	4b12      	ldr	r3, [pc, #72]	; (8019568 <http_init_file+0x1c4>)
 8019520:	f640 120b 	movw	r2, #2315	; 0x90b
 8019524:	4914      	ldr	r1, [pc, #80]	; (8019578 <http_init_file+0x1d4>)
 8019526:	4812      	ldr	r0, [pc, #72]	; (8019570 <http_init_file+0x1cc>)
 8019528:	f00d f90c 	bl	8026744 <iprintf>
    if (tag_check) {
 801952c:	2f00      	cmp	r7, #0
 801952e:	f43f af4c 	beq.w	80193ca <http_init_file+0x26>
 8019532:	e7ba      	b.n	80194aa <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019534:	f640 1234 	movw	r2, #2356	; 0x934
 8019538:	4b0b      	ldr	r3, [pc, #44]	; (8019568 <http_init_file+0x1c4>)
 801953a:	4910      	ldr	r1, [pc, #64]	; (801957c <http_init_file+0x1d8>)
 801953c:	480c      	ldr	r0, [pc, #48]	; (8019570 <http_init_file+0x1cc>)
 801953e:	f00d f901 	bl	8026744 <iprintf>
      hs->left = (u32_t)file->len;
 8019542:	6872      	ldr	r2, [r6, #4]
 8019544:	e799      	b.n	801947a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8019546:	6963      	ldr	r3, [r4, #20]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d0aa      	beq.n	80194a2 <http_init_file+0xfe>
 801954c:	7c1b      	ldrb	r3, [r3, #16]
 801954e:	f003 0303 	and.w	r3, r3, #3
 8019552:	2b01      	cmp	r3, #1
 8019554:	d1a5      	bne.n	80194a2 <http_init_file+0xfe>
 8019556:	e7a1      	b.n	801949c <http_init_file+0xf8>
    return (0);
 8019558:	461a      	mov	r2, r3
 801955a:	4b01      	ldr	r3, [pc, #4]	; (8019560 <http_init_file+0x1bc>)
 801955c:	9304      	str	r3, [sp, #16]
 801955e:	e780      	b.n	8019462 <http_init_file+0xbe>
 8019560:	2001e9a4 	.word	0x2001e9a4
 8019564:	2001e9e4 	.word	0x2001e9e4
 8019568:	08044800 	.word	0x08044800
 801956c:	0804486c 	.word	0x0804486c
 8019570:	0802b43c 	.word	0x0802b43c
 8019574:	0802b69c 	.word	0x0802b69c
 8019578:	08044838 	.word	0x08044838
 801957c:	0804484c 	.word	0x0804484c

08019580 <http_find_file>:
{
 8019580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019584:	ed2d 8b02 	vpush	{d8}
 8019588:	b087      	sub	sp, #28
 801958a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801958c:	4608      	mov	r0, r1
 801958e:	460c      	mov	r4, r1
{
 8019590:	4690      	mov	r8, r2
 8019592:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8019594:	f7e6 fe5e 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019598:	4606      	mov	r6, r0
 801959a:	b148      	cbz	r0, 80195b0 <http_find_file+0x30>
 801959c:	f100 39ff 	add.w	r9, r0, #4294967295
 80195a0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80195a4:	2b2f      	cmp	r3, #47	; 0x2f
 80195a6:	d06a      	beq.n	801967e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 80195a8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80195aa:	f04f 0900 	mov.w	r9, #0
 80195ae:	e001      	b.n	80195b4 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 80195b0:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80195b2:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 80195b4:	213f      	movs	r1, #63	; 0x3f
 80195b6:	4620      	mov	r0, r4
 80195b8:	f00d fb57 	bl	8026c6a <strchr>
    if (params != NULL) {
 80195bc:	4606      	mov	r6, r0
 80195be:	b118      	cbz	r0, 80195c8 <http_find_file+0x48>
      *params = '\0';
 80195c0:	2300      	movs	r3, #0
 80195c2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 80195c6:	9c05      	ldr	r4, [sp, #20]
 80195c8:	4621      	mov	r1, r4
 80195ca:	4628      	mov	r0, r5
 80195cc:	f7ff fe26 	bl	801921c <fs_open>
    if (err == ERR_OK) {
 80195d0:	b9b0      	cbnz	r0, 8019600 <http_find_file+0x80>
    if (file != NULL) {
 80195d2:	b1e7      	cbz	r7, 801960e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80195d4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80195d8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80195da:	f019 0908 	ands.w	r9, r9, #8
 80195de:	d01d      	beq.n	801961c <http_find_file+0x9c>
        tag_check = 1;
 80195e0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80195e4:	4623      	mov	r3, r4
 80195e6:	4642      	mov	r2, r8
 80195e8:	4639      	mov	r1, r7
 80195ea:	4628      	mov	r0, r5
 80195ec:	9601      	str	r6, [sp, #4]
 80195ee:	f8cd 9000 	str.w	r9, [sp]
 80195f2:	f7ff fed7 	bl	80193a4 <http_init_file>
}
 80195f6:	b007      	add	sp, #28
 80195f8:	ecbd 8b02 	vpop	{d8}
 80195fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8019600:	a905      	add	r1, sp, #20
 8019602:	4628      	mov	r0, r5
 8019604:	f7ff fe6c 	bl	80192e0 <http_get_404_file>
 8019608:	4607      	mov	r7, r0
    if (file != NULL) {
 801960a:	2f00      	cmp	r7, #0
 801960c:	d1e2      	bne.n	80195d4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801960e:	a905      	add	r1, sp, #20
 8019610:	4628      	mov	r0, r5
 8019612:	f7ff fe65 	bl	80192e0 <http_get_404_file>
 8019616:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8019618:	9c05      	ldr	r4, [sp, #20]
 801961a:	e7e3      	b.n	80195e4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 801961c:	213f      	movs	r1, #63	; 0x3f
 801961e:	4620      	mov	r0, r4
 8019620:	f00d fb23 	bl	8026c6a <strchr>
    if (param != NULL) {
 8019624:	4682      	mov	sl, r0
 8019626:	b108      	cbz	r0, 801962c <http_find_file+0xac>
      *param = 0;
 8019628:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801962c:	212e      	movs	r1, #46	; 0x2e
 801962e:	4620      	mov	r0, r4
 8019630:	f00d fb1b 	bl	8026c6a <strchr>
 8019634:	4603      	mov	r3, r0
 8019636:	b138      	cbz	r0, 8019648 <http_find_file+0xc8>
 8019638:	1c58      	adds	r0, r3, #1
 801963a:	212e      	movs	r1, #46	; 0x2e
 801963c:	461c      	mov	r4, r3
 801963e:	f00d fb14 	bl	8026c6a <strchr>
 8019642:	4603      	mov	r3, r0
 8019644:	2800      	cmp	r0, #0
 8019646:	d1f7      	bne.n	8019638 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8019648:	4940      	ldr	r1, [pc, #256]	; (801974c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801964a:	4620      	mov	r0, r4
 801964c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801975c <http_find_file+0x1dc>
 8019650:	f000 ffa0 	bl	801a594 <lwip_stricmp>
 8019654:	b148      	cbz	r0, 801966a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8019656:	4b3e      	ldr	r3, [pc, #248]	; (8019750 <http_find_file+0x1d0>)
 8019658:	459b      	cmp	fp, r3
 801965a:	d008      	beq.n	801966e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801965c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8019660:	4620      	mov	r0, r4
 8019662:	f000 ff97 	bl	801a594 <lwip_stricmp>
 8019666:	2800      	cmp	r0, #0
 8019668:	d1f5      	bne.n	8019656 <http_find_file+0xd6>
        tag_check = 1;
 801966a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 801966e:	f1ba 0f00 	cmp.w	sl, #0
 8019672:	d0d1      	beq.n	8019618 <http_find_file+0x98>
      *param = '?';
 8019674:	233f      	movs	r3, #63	; 0x3f
 8019676:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801967a:	9c05      	ldr	r4, [sp, #20]
 801967c:	e7b2      	b.n	80195e4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801967e:	4b35      	ldr	r3, [pc, #212]	; (8019754 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019680:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019682:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019684:	d106      	bne.n	8019694 <http_find_file+0x114>
 8019686:	f1a0 0001 	sub.w	r0, r0, #1
 801968a:	fab0 f080 	clz	r0, r0
 801968e:	0940      	lsrs	r0, r0, #5
 8019690:	2800      	cmp	r0, #0
 8019692:	d057      	beq.n	8019744 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8019694:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8019698:	bf28      	it	cs
 801969a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 801969e:	2e01      	cmp	r6, #1
 80196a0:	d008      	beq.n	80196b4 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 80196a2:	464a      	mov	r2, r9
 80196a4:	4621      	mov	r1, r4
 80196a6:	482b      	ldr	r0, [pc, #172]	; (8019754 <http_find_file+0x1d4>)
 80196a8:	f00c f886 	bl	80257b8 <memcpy>
      http_uri_buf[copy_len] = 0;
 80196ac:	2300      	movs	r3, #0
 80196ae:	9a02      	ldr	r2, [sp, #8]
 80196b0:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 80196b4:	462f      	mov	r7, r5
 80196b6:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 80196ba:	f8df a098 	ldr.w	sl, [pc, #152]	; 8019754 <http_find_file+0x1d4>
 80196be:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 80196c2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 80196c4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 80196c6:	d012      	beq.n	80196ee <http_find_file+0x16e>
        if (len_left > 0) {
 80196c8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 80196cc:	d113      	bne.n	80196f6 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 80196ce:	4641      	mov	r1, r8
 80196d0:	4628      	mov	r0, r5
 80196d2:	f7ff fda3 	bl	801921c <fs_open>
      if (err == ERR_OK) {
 80196d6:	b338      	cbz	r0, 8019728 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80196d8:	f10b 0b01 	add.w	fp, fp, #1
 80196dc:	f1bb 0f05 	cmp.w	fp, #5
 80196e0:	d1ef      	bne.n	80196c2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 80196e2:	ee18 8a10 	vmov	r8, s16
 80196e6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 80196e8:	f04f 0900 	mov.w	r9, #0
 80196ec:	e762      	b.n	80195b4 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 80196ee:	4b1a      	ldr	r3, [pc, #104]	; (8019758 <http_find_file+0x1d8>)
 80196f0:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 80196f4:	e7eb      	b.n	80196ce <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80196f6:	4b18      	ldr	r3, [pc, #96]	; (8019758 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80196f8:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80196fa:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 80196fe:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019700:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019702:	4608      	mov	r0, r1
 8019704:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8019706:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801970a:	f7e6 fda3 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801970e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019710:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8019712:	4282      	cmp	r2, r0
 8019714:	bf28      	it	cs
 8019716:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019718:	4620      	mov	r0, r4
 801971a:	9203      	str	r2, [sp, #12]
 801971c:	f00c f84c 	bl	80257b8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8019720:	2300      	movs	r3, #0
 8019722:	9a03      	ldr	r2, [sp, #12]
 8019724:	54a3      	strb	r3, [r4, r2]
 8019726:	e7d2      	b.n	80196ce <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8019728:	4a0b      	ldr	r2, [pc, #44]	; (8019758 <http_find_file+0x1d8>)
        uri = file_name;
 801972a:	4644      	mov	r4, r8
 801972c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8019730:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8019734:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8019736:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 801973a:	2d00      	cmp	r5, #0
 801973c:	f43f af3a 	beq.w	80195b4 <http_find_file+0x34>
  char *params = NULL;
 8019740:	4606      	mov	r6, r0
 8019742:	e74f      	b.n	80195e4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8019744:	462f      	mov	r7, r5
 8019746:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8019748:	4681      	mov	r9, r0
 801974a:	e733      	b.n	80195b4 <http_find_file+0x34>
 801974c:	080448c0 	.word	0x080448c0
 8019750:	08044b0c 	.word	0x08044b0c
 8019754:	2001ea24 	.word	0x2001ea24
 8019758:	08044b1c 	.word	0x08044b1c
 801975c:	08044afc 	.word	0x08044afc

08019760 <http_post_rxpbuf>:
{
 8019760:	b538      	push	{r3, r4, r5, lr}
 8019762:	4604      	mov	r4, r0
  if (p != NULL) {
 8019764:	b1c9      	cbz	r1, 801979a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8019766:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019768:	890a      	ldrh	r2, [r1, #8]
 801976a:	4293      	cmp	r3, r2
 801976c:	d31a      	bcc.n	80197a4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801976e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8019770:	4620      	mov	r0, r4
 8019772:	6323      	str	r3, [r4, #48]	; 0x30
 8019774:	f7ef fafc 	bl	8008d70 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8019778:	b178      	cbz	r0, 801979a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801977a:	2300      	movs	r3, #0
 801977c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801977e:	490a      	ldr	r1, [pc, #40]	; (80197a8 <http_post_rxpbuf+0x48>)
 8019780:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019782:	4620      	mov	r0, r4
 8019784:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8019786:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019788:	f7ef fb02 	bl	8008d90 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801978c:	462a      	mov	r2, r5
 801978e:	4620      	mov	r0, r4
 8019790:	4905      	ldr	r1, [pc, #20]	; (80197a8 <http_post_rxpbuf+0x48>)
}
 8019792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8019796:	f7ff bef3 	b.w	8019580 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801979a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801979c:	2b00      	cmp	r3, #0
 801979e:	d0ee      	beq.n	801977e <http_post_rxpbuf+0x1e>
}
 80197a0:	2000      	movs	r0, #0
 80197a2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80197a4:	2300      	movs	r3, #0
 80197a6:	e7e3      	b.n	8019770 <http_post_rxpbuf+0x10>
 80197a8:	2001ea24 	.word	0x2001ea24

080197ac <http_find_error_file>:
  if (error_nr == 501) {
 80197ac:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 80197b0:	4a17      	ldr	r2, [pc, #92]	; (8019810 <http_find_error_file+0x64>)
 80197b2:	4299      	cmp	r1, r3
 80197b4:	4b17      	ldr	r3, [pc, #92]	; (8019814 <http_find_error_file+0x68>)
 80197b6:	4918      	ldr	r1, [pc, #96]	; (8019818 <http_find_error_file+0x6c>)
{
 80197b8:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 80197ba:	4e18      	ldr	r6, [pc, #96]	; (801981c <http_find_error_file+0x70>)
 80197bc:	bf18      	it	ne
 80197be:	461e      	movne	r6, r3
 80197c0:	4b17      	ldr	r3, [pc, #92]	; (8019820 <http_find_error_file+0x74>)
 80197c2:	bf18      	it	ne
 80197c4:	460b      	movne	r3, r1
{
 80197c6:	b084      	sub	sp, #16
 80197c8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197ca:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 80197cc:	4d15      	ldr	r5, [pc, #84]	; (8019824 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197ce:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 80197d0:	bf08      	it	eq
 80197d2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197d4:	f7ff fd22 	bl	801921c <fs_open>
 80197d8:	9b03      	ldr	r3, [sp, #12]
 80197da:	b128      	cbz	r0, 80197e8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 80197dc:	4629      	mov	r1, r5
 80197de:	4620      	mov	r0, r4
 80197e0:	f7ff fd1c 	bl	801921c <fs_open>
 80197e4:	b948      	cbnz	r0, 80197fa <http_find_error_file+0x4e>
    uri = uri2;
 80197e6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 80197e8:	2200      	movs	r2, #0
 80197ea:	4621      	mov	r1, r4
 80197ec:	4620      	mov	r0, r4
 80197ee:	e9cd 2200 	strd	r2, r2, [sp]
 80197f2:	f7ff fdd7 	bl	80193a4 <http_init_file>
}
 80197f6:	b004      	add	sp, #16
 80197f8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 80197fa:	4631      	mov	r1, r6
 80197fc:	4620      	mov	r0, r4
 80197fe:	f7ff fd0d 	bl	801921c <fs_open>
 8019802:	b908      	cbnz	r0, 8019808 <http_find_error_file+0x5c>
    uri = uri3;
 8019804:	4633      	mov	r3, r6
 8019806:	e7ef      	b.n	80197e8 <http_find_error_file+0x3c>
    return ERR_ARG;
 8019808:	f06f 000f 	mvn.w	r0, #15
 801980c:	e7f3      	b.n	80197f6 <http_find_error_file+0x4a>
 801980e:	bf00      	nop
 8019810:	080448a4 	.word	0x080448a4
 8019814:	080448bc 	.word	0x080448bc
 8019818:	080448d4 	.word	0x080448d4
 801981c:	08044898 	.word	0x08044898
 8019820:	080448b0 	.word	0x080448b0
 8019824:	080448c8 	.word	0x080448c8

08019828 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8019828:	b538      	push	{r3, r4, r5, lr}
 801982a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801982c:	460c      	mov	r4, r1
 801982e:	2900      	cmp	r1, #0
 8019830:	d041      	beq.n	80198b6 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8019832:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8019834:	bb83      	cbnz	r3, 8019898 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8019836:	2100      	movs	r1, #0
 8019838:	4628      	mov	r0, r5
 801983a:	f003 fc79 	bl	801d130 <tcp_arg>
  altcp_recv(pcb, NULL);
 801983e:	2100      	movs	r1, #0
 8019840:	4628      	mov	r0, r5
 8019842:	f003 fc79 	bl	801d138 <tcp_recv>
  altcp_err(pcb, NULL);
 8019846:	2100      	movs	r1, #0
 8019848:	4628      	mov	r0, r5
 801984a:	f003 fcad 	bl	801d1a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801984e:	2200      	movs	r2, #0
 8019850:	4628      	mov	r0, r5
 8019852:	4611      	mov	r1, r2
 8019854:	f003 fcca 	bl	801d1ec <tcp_poll>
  altcp_sent(pcb, NULL);
 8019858:	4628      	mov	r0, r5
 801985a:	2100      	movs	r1, #0
 801985c:	f003 fc88 	bl	801d170 <tcp_sent>
  if (hs->handle) {
 8019860:	6960      	ldr	r0, [r4, #20]
 8019862:	b118      	cbz	r0, 801986c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8019864:	f7ff fd00 	bl	8019268 <fs_close>
    hs->handle = NULL;
 8019868:	2300      	movs	r3, #0
 801986a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801986c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801986e:	b118      	cbz	r0, 8019878 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8019870:	f001 fdf2 	bl	801b458 <mem_free>
    hs->ssi = NULL;
 8019874:	2300      	movs	r3, #0
 8019876:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019878:	6a20      	ldr	r0, [r4, #32]
 801987a:	b118      	cbz	r0, 8019884 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801987c:	f002 fe98 	bl	801c5b0 <pbuf_free>
    hs->req = NULL;
 8019880:	2300      	movs	r3, #0
 8019882:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019884:	4620      	mov	r0, r4
 8019886:	f001 fde7 	bl	801b458 <mem_free>
  err = altcp_close(pcb);
 801988a:	4628      	mov	r0, r5
 801988c:	f004 fb0c 	bl	801dea8 <tcp_close>
  if (err != ERR_OK) {
 8019890:	4604      	mov	r4, r0
 8019892:	b948      	cbnz	r0, 80198a8 <http_close_or_abort_conn.constprop.0+0x80>
}
 8019894:	4620      	mov	r0, r4
 8019896:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8019898:	4911      	ldr	r1, [pc, #68]	; (80198e0 <http_close_or_abort_conn.constprop.0+0xb8>)
 801989a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801989c:	223f      	movs	r2, #63	; 0x3f
 801989e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 80198a0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80198a2:	f7ef fa75 	bl	8008d90 <httpd_post_finished>
 80198a6:	e7c6      	b.n	8019836 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80198a8:	4628      	mov	r0, r5
 80198aa:	2204      	movs	r2, #4
 80198ac:	490d      	ldr	r1, [pc, #52]	; (80198e4 <http_close_or_abort_conn.constprop.0+0xbc>)
 80198ae:	f003 fc9d 	bl	801d1ec <tcp_poll>
}
 80198b2:	4620      	mov	r0, r4
 80198b4:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 80198b6:	f003 fc3b 	bl	801d130 <tcp_arg>
  altcp_recv(pcb, NULL);
 80198ba:	4621      	mov	r1, r4
 80198bc:	4628      	mov	r0, r5
 80198be:	f003 fc3b 	bl	801d138 <tcp_recv>
  altcp_err(pcb, NULL);
 80198c2:	4621      	mov	r1, r4
 80198c4:	4628      	mov	r0, r5
 80198c6:	f003 fc6f 	bl	801d1a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80198ca:	4621      	mov	r1, r4
 80198cc:	4628      	mov	r0, r5
 80198ce:	4622      	mov	r2, r4
 80198d0:	f003 fc8c 	bl	801d1ec <tcp_poll>
  altcp_sent(pcb, NULL);
 80198d4:	4621      	mov	r1, r4
 80198d6:	4628      	mov	r0, r5
 80198d8:	f003 fc4a 	bl	801d170 <tcp_sent>
  if (hs != NULL) {
 80198dc:	e7d5      	b.n	801988a <http_close_or_abort_conn.constprop.0+0x62>
 80198de:	bf00      	nop
 80198e0:	2001ea24 	.word	0x2001ea24
 80198e4:	08019fa9 	.word	0x08019fa9

080198e8 <http_err>:
  if (hs != NULL) {
 80198e8:	b1c0      	cbz	r0, 801991c <http_err+0x34>
{
 80198ea:	b510      	push	{r4, lr}
 80198ec:	4604      	mov	r4, r0
  if (hs->handle) {
 80198ee:	6940      	ldr	r0, [r0, #20]
 80198f0:	b118      	cbz	r0, 80198fa <http_err+0x12>
    fs_close(hs->handle);
 80198f2:	f7ff fcb9 	bl	8019268 <fs_close>
    hs->handle = NULL;
 80198f6:	2300      	movs	r3, #0
 80198f8:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80198fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80198fc:	b118      	cbz	r0, 8019906 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 80198fe:	f001 fdab 	bl	801b458 <mem_free>
    hs->ssi = NULL;
 8019902:	2300      	movs	r3, #0
 8019904:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019906:	6a20      	ldr	r0, [r4, #32]
 8019908:	b118      	cbz	r0, 8019912 <http_err+0x2a>
    pbuf_free(hs->req);
 801990a:	f002 fe51 	bl	801c5b0 <pbuf_free>
    hs->req = NULL;
 801990e:	2300      	movs	r3, #0
 8019910:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019912:	4620      	mov	r0, r4
}
 8019914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8019918:	f001 bd9e 	b.w	801b458 <mem_free>
 801991c:	4770      	bx	lr
 801991e:	bf00      	nop

08019920 <http_eof>:
{
 8019920:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8019922:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8019926:	b1fb      	cbz	r3, 8019968 <http_eof+0x48>
 8019928:	4605      	mov	r5, r0
  if (hs->handle) {
 801992a:	6948      	ldr	r0, [r1, #20]
 801992c:	460c      	mov	r4, r1
 801992e:	b118      	cbz	r0, 8019938 <http_eof+0x18>
    fs_close(hs->handle);
 8019930:	f7ff fc9a 	bl	8019268 <fs_close>
    hs->handle = NULL;
 8019934:	2300      	movs	r3, #0
 8019936:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8019938:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801993a:	b118      	cbz	r0, 8019944 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801993c:	f001 fd8c 	bl	801b458 <mem_free>
    hs->ssi = NULL;
 8019940:	2300      	movs	r3, #0
 8019942:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019944:	6a20      	ldr	r0, [r4, #32]
 8019946:	b108      	cbz	r0, 801994c <http_eof+0x2c>
    pbuf_free(hs->req);
 8019948:	f002 fe32 	bl	801c5b0 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801994c:	2234      	movs	r2, #52	; 0x34
 801994e:	2100      	movs	r1, #0
 8019950:	4620      	mov	r0, r4
 8019952:	f00b ff59 	bl	8025808 <memset>
    hs->keepalive = 1;
 8019956:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8019958:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801995a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801995e:	8b6b      	ldrh	r3, [r5, #26]
 8019960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019964:	836b      	strh	r3, [r5, #26]
}
 8019966:	bd38      	pop	{r3, r4, r5, pc}
 8019968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801996c:	f7ff bf5c 	b.w	8019828 <http_close_or_abort_conn.constprop.0>

08019970 <http_send>:
{
 8019970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8019974:	460d      	mov	r5, r1
{
 8019976:	b087      	sub	sp, #28
  if (hs == NULL) {
 8019978:	2900      	cmp	r1, #0
 801997a:	f000 824b 	beq.w	8019e14 <http_send+0x4a4>
  if (hs->left == 0) {
 801997e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019980:	4607      	mov	r7, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	f000 818c 	beq.w	8019ca0 <http_send+0x330>
  if (hs->ssi) {
 8019988:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801998a:	2c00      	cmp	r4, #0
 801998c:	f000 819a 	beq.w	8019cc4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8019990:	6823      	ldr	r3, [r4, #0]
 8019992:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8019994:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8019998:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801999a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801999e:	f200 80c3 	bhi.w	8019b28 <http_send+0x1b8>
  u8_t data_to_send = 0;
 80199a2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 80199a6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80199a8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 80199ac:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80199b0:	2b04      	cmp	r3, #4
 80199b2:	d003      	beq.n	80199bc <http_send+0x4c>
 80199b4:	68e1      	ldr	r1, [r4, #12]
 80199b6:	2900      	cmp	r1, #0
 80199b8:	f000 8091 	beq.w	8019ade <http_send+0x16e>
 80199bc:	2e00      	cmp	r6, #0
 80199be:	f040 811b 	bne.w	8019bf8 <http_send+0x288>
    if (len == 0) {
 80199c2:	2a00      	cmp	r2, #0
 80199c4:	f000 811b 	beq.w	8019bfe <http_send+0x28e>
    switch (ssi->tag_state) {
 80199c8:	2b04      	cmp	r3, #4
 80199ca:	d8f1      	bhi.n	80199b0 <http_send+0x40>
 80199cc:	e8df f003 	tbb	[pc, r3]
 80199d0:	23407466 	.word	0x23407466
 80199d4:	03          	.byte	0x03
 80199d5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80199d6:	68a3      	ldr	r3, [r4, #8]
 80199d8:	69a9      	ldr	r1, [r5, #24]
 80199da:	428b      	cmp	r3, r1
 80199dc:	f240 80f1 	bls.w	8019bc2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80199e0:	6863      	ldr	r3, [r4, #4]
 80199e2:	4299      	cmp	r1, r3
 80199e4:	f200 81fc 	bhi.w	8019de0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80199e8:	1a5a      	subs	r2, r3, r1
 80199ea:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80199ee:	4282      	cmp	r2, r0
 80199f0:	f340 8117 	ble.w	8019c22 <http_send+0x2b2>
 80199f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80199f8:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80199fc:	2300      	movs	r3, #0
 80199fe:	f10d 0216 	add.w	r2, sp, #22
 8019a02:	4638      	mov	r0, r7
 8019a04:	f7ff fc36 	bl	8019274 <http_write>
          if (err == ERR_OK) {
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	f000 81fe 	beq.w	8019e0a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019a0e:	4606      	mov	r6, r0
    if (len == 0) {
 8019a10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a14:	e11a      	b.n	8019c4c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019a16:	6821      	ldr	r1, [r4, #0]
 8019a18:	8a20      	ldrh	r0, [r4, #16]
 8019a1a:	f891 e000 	ldrb.w	lr, [r1]
 8019a1e:	2800      	cmp	r0, #0
 8019a20:	f040 80b9 	bne.w	8019b96 <http_send+0x226>
 8019a24:	f1ae 0c09 	sub.w	ip, lr, #9
 8019a28:	fa5f fc8c 	uxtb.w	ip, ip
 8019a2c:	f1bc 0f17 	cmp.w	ip, #23
 8019a30:	f200 80b1 	bhi.w	8019b96 <http_send+0x226>
 8019a34:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8019ddc <http_send+0x46c>
 8019a38:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8019a3c:	f01c 0f01 	tst.w	ip, #1
 8019a40:	f000 80a9 	beq.w	8019b96 <http_send+0x226>
          ssi->parsed++;
 8019a44:	3101      	adds	r1, #1
 8019a46:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019a48:	68e1      	ldr	r1, [r4, #12]
 8019a4a:	3901      	subs	r1, #1
 8019a4c:	60e1      	str	r1, [r4, #12]
          break;
 8019a4e:	e7af      	b.n	80199b0 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019a50:	8a20      	ldrh	r0, [r4, #16]
 8019a52:	2800      	cmp	r0, #0
 8019a54:	f040 8083 	bne.w	8019b5e <http_send+0x1ee>
 8019a58:	6821      	ldr	r1, [r4, #0]
 8019a5a:	f891 e000 	ldrb.w	lr, [r1]
 8019a5e:	f1ae 0c09 	sub.w	ip, lr, #9
 8019a62:	fa5f fc8c 	uxtb.w	ip, ip
 8019a66:	f1bc 0f17 	cmp.w	ip, #23
 8019a6a:	f240 8110 	bls.w	8019c8e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8019a6e:	f8df c350 	ldr.w	ip, [pc, #848]	; 8019dc0 <http_send+0x450>
 8019a72:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019a76:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019a7a:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019a7e:	f89c c000 	ldrb.w	ip, [ip]
 8019a82:	45f4      	cmp	ip, lr
 8019a84:	f000 8083 	beq.w	8019b8e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8019a88:	f100 0c01 	add.w	ip, r0, #1
 8019a8c:	4420      	add	r0, r4
 8019a8e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019a92:	f891 c000 	ldrb.w	ip, [r1]
 8019a96:	f880 c016 	strb.w	ip, [r0, #22]
 8019a9a:	e7d3      	b.n	8019a44 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8019a9c:	6821      	ldr	r1, [r4, #0]
 8019a9e:	7808      	ldrb	r0, [r1, #0]
 8019aa0:	283c      	cmp	r0, #60	; 0x3c
 8019aa2:	d002      	beq.n	8019aaa <http_send+0x13a>
 8019aa4:	282f      	cmp	r0, #47	; 0x2f
 8019aa6:	d1cd      	bne.n	8019a44 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8019aa8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 8019aaa:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 8019aac:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 8019aae:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8019ab0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8019ab4:	8223      	strh	r3, [r4, #16]
            break;
 8019ab6:	e7c5      	b.n	8019a44 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8019ab8:	49c1      	ldr	r1, [pc, #772]	; (8019dc0 <http_send+0x450>)
 8019aba:	7d20      	ldrb	r0, [r4, #20]
 8019abc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019ac0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8019ac4:	f811 100c 	ldrb.w	r1, [r1, ip]
 8019ac8:	2900      	cmp	r1, #0
 8019aca:	f040 8086 	bne.w	8019bda <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 8019ace:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8019ad0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019ad2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8019ad4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019ad8:	2900      	cmp	r1, #0
 8019ada:	f47f af6f 	bne.w	80199bc <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019ade:	6823      	ldr	r3, [r4, #0]
 8019ae0:	69a9      	ldr	r1, [r5, #24]
 8019ae2:	428b      	cmp	r3, r1
 8019ae4:	f240 808b 	bls.w	8019bfe <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019ae8:	1a5b      	subs	r3, r3, r1
 8019aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019aee:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019af0:	4293      	cmp	r3, r2
 8019af2:	bfa8      	it	ge
 8019af4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019af6:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019afa:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019afe:	2300      	movs	r3, #0
 8019b00:	f7ff fbb8 	bl	8019274 <http_write>
    if (err == ERR_OK) {
 8019b04:	2800      	cmp	r0, #0
 8019b06:	d17a      	bne.n	8019bfe <http_send+0x28e>
    hs->file += len;
 8019b08:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8019b0c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8019b10:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8019b12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8019b14:	440a      	add	r2, r1
    hs->left -= len;
 8019b16:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8019b18:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8019b1a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d071      	beq.n	8019c04 <http_send+0x294>
}
 8019b20:	4640      	mov	r0, r8
 8019b22:	b007      	add	sp, #28
 8019b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b28:	1a5b      	subs	r3, r3, r1
 8019b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b2e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b30:	4293      	cmp	r3, r2
 8019b32:	bfa8      	it	ge
 8019b34:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b36:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b3a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b3e:	2300      	movs	r3, #0
 8019b40:	f7ff fb98 	bl	8019274 <http_write>
    if (err == ERR_OK) {
 8019b44:	4606      	mov	r6, r0
 8019b46:	2800      	cmp	r0, #0
 8019b48:	f000 8154 	beq.w	8019df4 <http_send+0x484>
  u8_t data_to_send = 0;
 8019b4c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8019b50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d052      	beq.n	8019bfe <http_send+0x28e>
    if (len == 0) {
 8019b58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019b5c:	e724      	b.n	80199a8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8019b5e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8019dc0 <http_send+0x450>
 8019b62:	7d21      	ldrb	r1, [r4, #20]
 8019b64:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8019b68:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8019b6c:	6821      	ldr	r1, [r4, #0]
 8019b6e:	f89e a000 	ldrb.w	sl, [lr]
 8019b72:	f891 c000 	ldrb.w	ip, [r1]
 8019b76:	45e2      	cmp	sl, ip
 8019b78:	d072      	beq.n	8019c60 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019b7a:	f1ac 0c09 	sub.w	ip, ip, #9
 8019b7e:	fa5f fc8c 	uxtb.w	ip, ip
 8019b82:	f1bc 0f17 	cmp.w	ip, #23
 8019b86:	d964      	bls.n	8019c52 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8019b88:	2807      	cmp	r0, #7
 8019b8a:	f67f af7d 	bls.w	8019a88 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8019b94:	e756      	b.n	8019a44 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8019b96:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019b9a:	f8df c224 	ldr.w	ip, [pc, #548]	; 8019dc0 <http_send+0x450>
 8019b9e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019ba2:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019ba6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 8019baa:	45f1      	cmp	r9, lr
 8019bac:	f000 80a1 	beq.w	8019cf2 <http_send+0x382>
          ssi->parse_left--;
 8019bb0:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8019bb2:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8019bb4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019bb8:	3b01      	subs	r3, #1
          ssi->parsed++;
 8019bba:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019bbc:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	e6f8      	b.n	80199b4 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8019bc2:	8a21      	ldrh	r1, [r4, #16]
 8019bc4:	8a60      	ldrh	r0, [r4, #18]
 8019bc6:	4281      	cmp	r1, r0
 8019bc8:	f0c0 80e0 	bcc.w	8019d8c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 8019bcc:	6023      	str	r3, [r4, #0]
 8019bce:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8019bd0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8019bd4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8019bd8:	e6ec      	b.n	80199b4 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8019bda:	6820      	ldr	r0, [r4, #0]
 8019bdc:	f890 e000 	ldrb.w	lr, [r0]
 8019be0:	458e      	cmp	lr, r1
 8019be2:	f000 80ce 	beq.w	8019d82 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8019be6:	2300      	movs	r3, #0
 8019be8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019bec:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8019bee:	3001      	adds	r0, #1
          ssi->parse_left--;
 8019bf0:	3901      	subs	r1, #1
          ssi->parsed++;
 8019bf2:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8019bf4:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8019bf6:	e6db      	b.n	80199b0 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019bf8:	2b04      	cmp	r3, #4
 8019bfa:	f47f af70 	bne.w	8019ade <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d18d      	bne.n	8019b20 <http_send+0x1b0>
 8019c04:	6968      	ldr	r0, [r5, #20]
 8019c06:	f7ff fb31 	bl	801926c <fs_bytes_left>
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	dc88      	bgt.n	8019b20 <http_send+0x1b0>
      return 0;
 8019c0e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8019c12:	4638      	mov	r0, r7
 8019c14:	4629      	mov	r1, r5
 8019c16:	f7ff fe83 	bl	8019920 <http_eof>
}
 8019c1a:	4640      	mov	r0, r8
 8019c1c:	b007      	add	sp, #28
 8019c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c22:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019c24:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8019c28:	2a00      	cmp	r2, #0
 8019c2a:	f47f aee7 	bne.w	80199fc <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 8019c2e:	428b      	cmp	r3, r1
 8019c30:	d805      	bhi.n	8019c3e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019c32:	68a0      	ldr	r0, [r4, #8]
 8019c34:	1ac3      	subs	r3, r0, r3
 8019c36:	441a      	add	r2, r3
 8019c38:	b292      	uxth	r2, r2
 8019c3a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 8019c3e:	4411      	add	r1, r2
 8019c40:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8019c42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8019c44:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8019c48:	1a9b      	subs	r3, r3, r2
 8019c4a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019c4c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019c50:	e6ae      	b.n	80199b0 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019c52:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019ddc <http_send+0x46c>
 8019c56:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8019c5a:	f01c 0f01 	tst.w	ip, #1
 8019c5e:	d093      	beq.n	8019b88 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8019c60:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019c62:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8019c64:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019c68:	f200 80e0 	bhi.w	8019e2c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019c6c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8019c6e:	4420      	add	r0, r4
 8019c70:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019c74:	f89e 3000 	ldrb.w	r3, [lr]
 8019c78:	780a      	ldrb	r2, [r1, #0]
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	f000 80cf 	beq.w	8019e1e <http_send+0x4ae>
              ssi->tag_index = 0;
 8019c80:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019c84:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019c88:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019c8c:	e6da      	b.n	8019a44 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019c8e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8019ddc <http_send+0x46c>
 8019c92:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8019c96:	f01c 0f01 	tst.w	ip, #1
 8019c9a:	f47f aed3 	bne.w	8019a44 <http_send+0xd4>
 8019c9e:	e6e6      	b.n	8019a6e <http_send+0xfe>
  if (hs->handle == NULL) {
 8019ca0:	6948      	ldr	r0, [r1, #20]
 8019ca2:	2800      	cmp	r0, #0
 8019ca4:	d0b3      	beq.n	8019c0e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8019ca6:	f7ff fae1 	bl	801926c <fs_bytes_left>
  if (bytes_left <= 0) {
 8019caa:	2800      	cmp	r0, #0
 8019cac:	ddaf      	ble.n	8019c0e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8019cae:	4b45      	ldr	r3, [pc, #276]	; (8019dc4 <http_send+0x454>)
 8019cb0:	f240 429d 	movw	r2, #1181	; 0x49d
 8019cb4:	4944      	ldr	r1, [pc, #272]	; (8019dc8 <http_send+0x458>)
 8019cb6:	4845      	ldr	r0, [pc, #276]	; (8019dcc <http_send+0x45c>)
 8019cb8:	f00c fd44 	bl	8026744 <iprintf>
  if (hs->ssi) {
 8019cbc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8019cbe:	2c00      	cmp	r4, #0
 8019cc0:	f47f ae66 	bne.w	8019990 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019cc4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8019cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ccc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019cce:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019cd0:	428a      	cmp	r2, r1
 8019cd2:	bf88      	it	hi
 8019cd4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019cd6:	4623      	mov	r3, r4
 8019cd8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019cda:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019cde:	f10d 0216 	add.w	r2, sp, #22
 8019ce2:	f7ff fac7 	bl	8019274 <http_write>
  if (err == ERR_OK) {
 8019ce6:	2800      	cmp	r0, #0
 8019ce8:	f43f af0e 	beq.w	8019b08 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019cec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 8019cee:	46a0      	mov	r8, r4
 8019cf0:	e714      	b.n	8019b1c <http_send+0x1ac>
          ssi->parsed++;
 8019cf2:	3101      	adds	r1, #1
          ssi->tag_index++;
 8019cf4:	3001      	adds	r0, #1
          ssi->parsed++;
 8019cf6:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8019cf8:	b280      	uxth	r0, r0
          ssi->parse_left--;
 8019cfa:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 8019cfc:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 8019cfe:	3901      	subs	r1, #1
 8019d00:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8019d02:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8019d06:	2900      	cmp	r1, #0
 8019d08:	f47f ae52 	bne.w	80199b0 <http_send+0x40>
  ssi = hs->ssi;
 8019d0c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019d10:	f1b9 0f00 	cmp.w	r9, #0
 8019d14:	f000 8115 	beq.w	8019f42 <http_send+0x5d2>
  if (httpd_ssi_handler
 8019d18:	4b2d      	ldr	r3, [pc, #180]	; (8019dd0 <http_send+0x460>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	9300      	str	r3, [sp, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	f000 8093 	beq.w	8019e4a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8019d24:	4b2b      	ldr	r3, [pc, #172]	; (8019dd4 <http_send+0x464>)
 8019d26:	681a      	ldr	r2, [r3, #0]
 8019d28:	2a00      	cmp	r2, #0
 8019d2a:	f000 808e 	beq.w	8019e4a <http_send+0x4da>
 8019d2e:	4b2a      	ldr	r3, [pc, #168]	; (8019dd8 <http_send+0x468>)
 8019d30:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d32:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8019d34:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d36:	f340 8088 	ble.w	8019e4a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019d3a:	f109 0a16 	add.w	sl, r9, #22
 8019d3e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d40:	2300      	movs	r3, #0
 8019d42:	9503      	str	r5, [sp, #12]
 8019d44:	460d      	mov	r5, r1
 8019d46:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8019d4a:	4656      	mov	r6, sl
 8019d4c:	461c      	mov	r4, r3
 8019d4e:	4692      	mov	sl, r2
 8019d50:	e003      	b.n	8019d5a <http_send+0x3ea>
 8019d52:	3401      	adds	r4, #1
 8019d54:	42a5      	cmp	r5, r4
 8019d56:	f000 8105 	beq.w	8019f64 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019d5a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8019d5e:	4630      	mov	r0, r6
 8019d60:	f7e6 fa6e 	bl	8000240 <strcmp>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d1f4      	bne.n	8019d52 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8019d68:	4623      	mov	r3, r4
 8019d6a:	22fe      	movs	r2, #254	; 0xfe
 8019d6c:	f109 011f 	add.w	r1, r9, #31
 8019d70:	9e02      	ldr	r6, [sp, #8]
 8019d72:	4618      	mov	r0, r3
 8019d74:	9b00      	ldr	r3, [sp, #0]
 8019d76:	9c01      	ldr	r4, [sp, #4]
 8019d78:	9d03      	ldr	r5, [sp, #12]
 8019d7a:	4798      	blx	r3
 8019d7c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8019d80:	e0a6      	b.n	8019ed0 <http_send+0x560>
            ssi->tag_index++;
 8019d82:	f10c 0c01 	add.w	ip, ip, #1
 8019d86:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019d8a:	e72f      	b.n	8019bec <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019d8c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019d8e:	311f      	adds	r1, #31
 8019d90:	f10d 0216 	add.w	r2, sp, #22
 8019d94:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019d96:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019d9a:	4421      	add	r1, r4
 8019d9c:	4638      	mov	r0, r7
 8019d9e:	f7ff fa69 	bl	8019274 <http_write>
              ssi->tag_index += len;
 8019da2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8019da6:	4606      	mov	r6, r0
 8019da8:	2800      	cmp	r0, #0
 8019daa:	f47f af4f 	bne.w	8019c4c <http_send+0x2dc>
              ssi->tag_index += len;
 8019dae:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8019db0:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8019db4:	4413      	add	r3, r2
 8019db6:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019db8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019dbc:	e5f8      	b.n	80199b0 <http_send+0x40>
 8019dbe:	bf00      	nop
 8019dc0:	08044b0c 	.word	0x08044b0c
 8019dc4:	08044800 	.word	0x08044800
 8019dc8:	080448e0 	.word	0x080448e0
 8019dcc:	0802b43c 	.word	0x0802b43c
 8019dd0:	2001ee68 	.word	0x2001ee68
 8019dd4:	2001ee6c 	.word	0x2001ee6c
 8019dd8:	2001ea64 	.word	0x2001ea64
 8019ddc:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8019de0:	4b63      	ldr	r3, [pc, #396]	; (8019f70 <http_send+0x600>)
 8019de2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8019de6:	4963      	ldr	r1, [pc, #396]	; (8019f74 <http_send+0x604>)
 8019de8:	4863      	ldr	r0, [pc, #396]	; (8019f78 <http_send+0x608>)
 8019dea:	f00c fcab 	bl	8026744 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019dee:	6863      	ldr	r3, [r4, #4]
 8019df0:	69a9      	ldr	r1, [r5, #24]
 8019df2:	e5f9      	b.n	80199e8 <http_send+0x78>
      hs->file += len;
 8019df4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8019df8:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8019dfc:	69ab      	ldr	r3, [r5, #24]
 8019dfe:	4413      	add	r3, r2
 8019e00:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8019e02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019e04:	1a9b      	subs	r3, r3, r2
 8019e06:	626b      	str	r3, [r5, #36]	; 0x24
 8019e08:	e6a2      	b.n	8019b50 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8019e0a:	6863      	ldr	r3, [r4, #4]
 8019e0c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019e0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e12:	e70c      	b.n	8019c2e <http_send+0x2be>
    return 0;
 8019e14:	4688      	mov	r8, r1
}
 8019e16:	4640      	mov	r0, r8
 8019e18:	b007      	add	sp, #28
 8019e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8019e1e:	2301      	movs	r3, #1
 8019e20:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019e22:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019e26:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e2a:	e60b      	b.n	8019a44 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019e2c:	4b50      	ldr	r3, [pc, #320]	; (8019f70 <http_send+0x600>)
 8019e2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8019e32:	4952      	ldr	r1, [pc, #328]	; (8019f7c <http_send+0x60c>)
 8019e34:	4850      	ldr	r0, [pc, #320]	; (8019f78 <http_send+0x608>)
 8019e36:	f00c fc85 	bl	8026744 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019e3a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019e3c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019e3e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8019e42:	6821      	ldr	r1, [r4, #0]
 8019e44:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8019e48:	e710      	b.n	8019c6c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019e4a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019e4e:	4650      	mov	r0, sl
 8019e50:	f7e6 fa00 	bl	8000254 <strlen>
 8019e54:	28e4      	cmp	r0, #228	; 0xe4
 8019e56:	d865      	bhi.n	8019f24 <http_send+0x5b4>
 8019e58:	2809      	cmp	r0, #9
 8019e5a:	bf28      	it	cs
 8019e5c:	2009      	movcs	r0, #9
 8019e5e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8019e62:	4686      	mov	lr, r0
 8019e64:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e66:	f100 0319 	add.w	r3, r0, #25
 8019e6a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e6c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8019f8c <http_send+0x61c>
 8019e70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019e74:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8019e78:	f8bc 3000 	ldrh.w	r3, [ip]
 8019e7c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e80:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e84:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e88:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e8a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e8e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e90:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e94:	f00b fc90 	bl	80257b8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e98:	4b39      	ldr	r3, [pc, #228]	; (8019f80 <http_send+0x610>)
 8019e9a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e9c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e9e:	eb09 0e02 	add.w	lr, r9, r2
 8019ea2:	6818      	ldr	r0, [r3, #0]
 8019ea4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019ea8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019eaa:	799b      	ldrb	r3, [r3, #6]
 8019eac:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8019eb0:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019eb4:	f8ae c004 	strh.w	ip, [lr, #4]
 8019eb8:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019ebc:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8019ec0:	f7e6 f9c8 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019ec4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8019ec8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019eca:	d232      	bcs.n	8019f32 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8019ecc:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8019ed0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8019ed2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8019ed4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8019ed6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8019eda:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8019edc:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8019ee0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8019ee2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8019ee4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8019ee6:	d802      	bhi.n	8019eee <http_send+0x57e>
    if (len == 0) {
 8019ee8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019eec:	e566      	b.n	80199bc <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019eee:	1a52      	subs	r2, r2, r1
 8019ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019ef4:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	bfa8      	it	ge
 8019efa:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019efc:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019efe:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019f02:	f10d 0216 	add.w	r2, sp, #22
 8019f06:	f7ff f9b5 	bl	8019274 <http_write>
              if (err == ERR_OK) {
 8019f0a:	4606      	mov	r6, r0
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	f47f ad7f 	bne.w	8019a10 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8019f12:	6861      	ldr	r1, [r4, #4]
 8019f14:	69ab      	ldr	r3, [r5, #24]
 8019f16:	4299      	cmp	r1, r3
 8019f18:	d91b      	bls.n	8019f52 <http_send+0x5e2>
                hs->file += len;
 8019f1a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019f1e:	4413      	add	r3, r2
 8019f20:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8019f22:	e68e      	b.n	8019c42 <http_send+0x2d2>
 8019f24:	233a      	movs	r3, #58	; 0x3a
 8019f26:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019f28:	f04f 0e09 	mov.w	lr, #9
 8019f2c:	e9cd 3200 	strd	r3, r2, [sp]
 8019f30:	e79c      	b.n	8019e6c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019f32:	4b0f      	ldr	r3, [pc, #60]	; (8019f70 <http_send+0x600>)
 8019f34:	f240 323f 	movw	r2, #831	; 0x33f
 8019f38:	4912      	ldr	r1, [pc, #72]	; (8019f84 <http_send+0x614>)
 8019f3a:	480f      	ldr	r0, [pc, #60]	; (8019f78 <http_send+0x608>)
 8019f3c:	f00c fc02 	bl	8026744 <iprintf>
 8019f40:	e7c4      	b.n	8019ecc <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019f42:	4b0b      	ldr	r3, [pc, #44]	; (8019f70 <http_send+0x600>)
 8019f44:	f240 3206 	movw	r2, #774	; 0x306
 8019f48:	490f      	ldr	r1, [pc, #60]	; (8019f88 <http_send+0x618>)
 8019f4a:	480b      	ldr	r0, [pc, #44]	; (8019f78 <http_send+0x608>)
 8019f4c:	f00c fbfa 	bl	8026744 <iprintf>
 8019f50:	e6e2      	b.n	8019d18 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019f52:	68a2      	ldr	r2, [r4, #8]
 8019f54:	1a52      	subs	r2, r2, r1
 8019f56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019f5a:	440a      	add	r2, r1
 8019f5c:	b292      	uxth	r2, r2
 8019f5e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019f62:	e7dc      	b.n	8019f1e <http_send+0x5ae>
 8019f64:	46b2      	mov	sl, r6
 8019f66:	9c01      	ldr	r4, [sp, #4]
 8019f68:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8019f6c:	e76f      	b.n	8019e4e <http_send+0x4de>
 8019f6e:	bf00      	nop
 8019f70:	08044800 	.word	0x08044800
 8019f74:	08044968 	.word	0x08044968
 8019f78:	0802b43c 	.word	0x0802b43c
 8019f7c:	08044918 	.word	0x08044918
 8019f80:	08044950 	.word	0x08044950
 8019f84:	08044958 	.word	0x08044958
 8019f88:	08044930 	.word	0x08044930
 8019f8c:	0804493c 	.word	0x0804493c

08019f90 <http_sent>:
{
 8019f90:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8019f92:	4603      	mov	r3, r0
 8019f94:	b130      	cbz	r0, 8019fa4 <http_sent+0x14>
  hs->retries = 0;
 8019f96:	2200      	movs	r2, #0
 8019f98:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8019f9a:	4619      	mov	r1, r3
  hs->retries = 0;
 8019f9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8019fa0:	f7ff fce6 	bl	8019970 <http_send>
}
 8019fa4:	2000      	movs	r0, #0
 8019fa6:	bd08      	pop	{r3, pc}

08019fa8 <http_poll>:
{
 8019fa8:	b510      	push	{r4, lr}
 8019faa:	460c      	mov	r4, r1
  if (hs == NULL) {
 8019fac:	b1a8      	cbz	r0, 8019fda <http_poll+0x32>
    hs->retries++;
 8019fae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019fb2:	3301      	adds	r3, #1
 8019fb4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019fb6:	2b04      	cmp	r3, #4
    hs->retries++;
 8019fb8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019fbc:	d019      	beq.n	8019ff2 <http_poll+0x4a>
    if (hs->handle) {
 8019fbe:	6943      	ldr	r3, [r0, #20]
 8019fc0:	b123      	cbz	r3, 8019fcc <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8019fc2:	4601      	mov	r1, r0
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f7ff fcd3 	bl	8019970 <http_send>
 8019fca:	b908      	cbnz	r0, 8019fd0 <http_poll+0x28>
  return ERR_OK;
 8019fcc:	2000      	movs	r0, #0
}
 8019fce:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f006 fc9f 	bl	8020914 <tcp_output>
  return ERR_OK;
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	e7f9      	b.n	8019fce <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019fda:	4601      	mov	r1, r0
 8019fdc:	4620      	mov	r0, r4
 8019fde:	f7ff fc23 	bl	8019828 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8019fe2:	3001      	adds	r0, #1
 8019fe4:	d1f2      	bne.n	8019fcc <http_poll+0x24>
      altcp_abort(pcb);
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	f003 fd66 	bl	801dab8 <tcp_abort>
      return ERR_ABRT;
 8019fec:	f06f 000c 	mvn.w	r0, #12
}
 8019ff0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8019ff2:	4601      	mov	r1, r0
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f7ff fc17 	bl	8019828 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8019ffa:	2000      	movs	r0, #0
}
 8019ffc:	bd10      	pop	{r4, pc}
 8019ffe:	bf00      	nop

0801a000 <http_recv>:
{
 801a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a004:	4605      	mov	r5, r0
 801a006:	b08d      	sub	sp, #52	; 0x34
 801a008:	460e      	mov	r6, r1
 801a00a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801a00c:	b9ab      	cbnz	r3, 801a03a <http_recv+0x3a>
 801a00e:	fab2 f782 	clz	r7, r2
 801a012:	097f      	lsrs	r7, r7, #5
 801a014:	b1ca      	cbz	r2, 801a04a <http_recv+0x4a>
 801a016:	b188      	cbz	r0, 801a03c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 801a018:	8911      	ldrh	r1, [r2, #8]
 801a01a:	4630      	mov	r0, r6
 801a01c:	f002 ff48 	bl	801ceb0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 801a020:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a022:	2b00      	cmp	r3, #0
 801a024:	f040 813c 	bne.w	801a2a0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 801a028:	696b      	ldr	r3, [r5, #20]
 801a02a:	b1b3      	cbz	r3, 801a05a <http_recv+0x5a>
      pbuf_free(p);
 801a02c:	4620      	mov	r0, r4
 801a02e:	f002 fabf 	bl	801c5b0 <pbuf_free>
}
 801a032:	2000      	movs	r0, #0
 801a034:	b00d      	add	sp, #52	; 0x34
 801a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 801a03a:	b132      	cbz	r2, 801a04a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 801a03c:	4630      	mov	r0, r6
 801a03e:	8921      	ldrh	r1, [r4, #8]
 801a040:	f002 ff36 	bl	801ceb0 <tcp_recved>
      pbuf_free(p);
 801a044:	4620      	mov	r0, r4
 801a046:	f002 fab3 	bl	801c5b0 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 801a04a:	4629      	mov	r1, r5
 801a04c:	4630      	mov	r0, r6
 801a04e:	f7ff fbeb 	bl	8019828 <http_close_or_abort_conn.constprop.0>
}
 801a052:	2000      	movs	r0, #0
 801a054:	b00d      	add	sp, #52	; 0x34
 801a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801a05a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 801a05c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801a05e:	2b00      	cmp	r3, #0
 801a060:	f040 8173 	bne.w	801a34a <http_recv+0x34a>
  if (hs->req == NULL) {
 801a064:	2800      	cmp	r0, #0
 801a066:	f000 8136 	beq.w	801a2d6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 801a06a:	4621      	mov	r1, r4
 801a06c:	f002 fad2 	bl	801c614 <pbuf_cat>
  pbuf_ref(p);
 801a070:	4620      	mov	r0, r4
 801a072:	f002 fabb 	bl	801c5ec <pbuf_ref>
  if (hs->req->next != NULL) {
 801a076:	6a28      	ldr	r0, [r5, #32]
 801a078:	6803      	ldr	r3, [r0, #0]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	f000 812d 	beq.w	801a2da <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a080:	8907      	ldrh	r7, [r0, #8]
 801a082:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a086:	49bc      	ldr	r1, [pc, #752]	; (801a378 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a088:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 801a08a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a08c:	bf28      	it	cs
 801a08e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a090:	2300      	movs	r3, #0
 801a092:	463a      	mov	r2, r7
 801a094:	f002 fb30 	bl	801c6f8 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 801a098:	2f06      	cmp	r7, #6
 801a09a:	f240 80ef 	bls.w	801a27c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801a09e:	463a      	mov	r2, r7
 801a0a0:	49b6      	ldr	r1, [pc, #728]	; (801a37c <http_recv+0x37c>)
 801a0a2:	4640      	mov	r0, r8
 801a0a4:	f000 fa4e 	bl	801a544 <lwip_strnstr>
    if (crlf != NULL) {
 801a0a8:	2800      	cmp	r0, #0
 801a0aa:	f000 80e7 	beq.w	801a27c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 801a0ae:	2204      	movs	r2, #4
 801a0b0:	49b3      	ldr	r1, [pc, #716]	; (801a380 <http_recv+0x380>)
 801a0b2:	4640      	mov	r0, r8
 801a0b4:	f00d fb28 	bl	8027708 <strncmp>
 801a0b8:	4682      	mov	sl, r0
 801a0ba:	2800      	cmp	r0, #0
 801a0bc:	f040 8118 	bne.w	801a2f0 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a0c0:	1f3a      	subs	r2, r7, #4
 801a0c2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 801a0c6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a0ca:	49ae      	ldr	r1, [pc, #696]	; (801a384 <http_recv+0x384>)
 801a0cc:	b292      	uxth	r2, r2
 801a0ce:	4658      	mov	r0, fp
 801a0d0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 801a0d4:	f000 fa36 	bl	801a544 <lwip_strnstr>
      if (sp2 == NULL) {
 801a0d8:	9a05      	ldr	r2, [sp, #20]
 801a0da:	4681      	mov	r9, r0
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	f000 8123 	beq.w	801a328 <http_recv+0x328>
      int is_09 = 0;
 801a0e2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 801a0e4:	9305      	str	r3, [sp, #20]
 801a0e6:	f1b9 0f00 	cmp.w	r9, #0
 801a0ea:	f000 80c7 	beq.w	801a27c <http_recv+0x27c>
 801a0ee:	9b04      	ldr	r3, [sp, #16]
 801a0f0:	4599      	cmp	r9, r3
 801a0f2:	f240 80c3 	bls.w	801a27c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 801a0f6:	463a      	mov	r2, r7
 801a0f8:	49a3      	ldr	r1, [pc, #652]	; (801a388 <http_recv+0x388>)
 801a0fa:	4640      	mov	r0, r8
 801a0fc:	f000 fa22 	bl	801a544 <lwip_strnstr>
 801a100:	2800      	cmp	r0, #0
 801a102:	f000 80bb 	beq.w	801a27c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a106:	9b05      	ldr	r3, [sp, #20]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	f000 812b 	beq.w	801a364 <http_recv+0x364>
            hs->keepalive = 0;
 801a10e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801a110:	eba9 020b 	sub.w	r2, r9, fp
 801a114:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 801a118:	2100      	movs	r1, #0
 801a11a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801a11c:	b292      	uxth	r2, r2
          *sp1 = 0;
 801a11e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 801a120:	f80b 1002 	strb.w	r1, [fp, r2]
 801a124:	445a      	add	r2, fp
 801a126:	9206      	str	r2, [sp, #24]
          if (is_post) {
 801a128:	f1ba 0f00 	cmp.w	sl, #0
 801a12c:	f000 8113 	beq.w	801a356 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a130:	f109 0301 	add.w	r3, r9, #1
 801a134:	4994      	ldr	r1, [pc, #592]	; (801a388 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 801a136:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a13a:	eba3 0208 	sub.w	r2, r3, r8
 801a13e:	4618      	mov	r0, r3
 801a140:	9305      	str	r3, [sp, #20]
 801a142:	1aba      	subs	r2, r7, r2
 801a144:	f000 f9fe 	bl	801a544 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 801a148:	9008      	str	r0, [sp, #32]
 801a14a:	2800      	cmp	r0, #0
 801a14c:	f000 8168 	beq.w	801a420 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 801a150:	9b05      	ldr	r3, [sp, #20]
 801a152:	498e      	ldr	r1, [pc, #568]	; (801a38c <http_recv+0x38c>)
 801a154:	1ac2      	subs	r2, r0, r3
 801a156:	4618      	mov	r0, r3
 801a158:	f000 f9f4 	bl	801a544 <lwip_strnstr>
    if (scontent_len != NULL) {
 801a15c:	4603      	mov	r3, r0
 801a15e:	9009      	str	r0, [sp, #36]	; 0x24
 801a160:	2800      	cmp	r0, #0
 801a162:	f000 812f 	beq.w	801a3c4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 801a166:	3310      	adds	r3, #16
 801a168:	220a      	movs	r2, #10
 801a16a:	4984      	ldr	r1, [pc, #528]	; (801a37c <http_recv+0x37c>)
 801a16c:	4618      	mov	r0, r3
 801a16e:	9307      	str	r3, [sp, #28]
 801a170:	f000 f9e8 	bl	801a544 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 801a174:	2800      	cmp	r0, #0
 801a176:	f000 8125 	beq.w	801a3c4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 801a17a:	9b07      	ldr	r3, [sp, #28]
 801a17c:	4618      	mov	r0, r3
 801a17e:	f00b f8bd 	bl	80252fc <atoi>
        if (content_len == 0) {
 801a182:	1e02      	subs	r2, r0, #0
 801a184:	9207      	str	r2, [sp, #28]
 801a186:	f040 811b 	bne.w	801a3c0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 801a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a18c:	7c1b      	ldrb	r3, [r3, #16]
 801a18e:	2b30      	cmp	r3, #48	; 0x30
 801a190:	f040 8118 	bne.w	801a3c4 <http_recv+0x3c4>
 801a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a196:	7c5b      	ldrb	r3, [r3, #17]
 801a198:	2b0d      	cmp	r3, #13
 801a19a:	f040 8113 	bne.w	801a3c4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a19e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 801a1a0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1a2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1a4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1a6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 801a1a8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 801a3a4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 801a1ac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1b0:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1b4:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 801a1b6:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1b8:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1ba:	9a05      	ldr	r2, [sp, #20]
 801a1bc:	bfb4      	ite	lt
 801a1be:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1c0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1c4:	429f      	cmp	r7, r3
 801a1c6:	bfa8      	it	ge
 801a1c8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1ca:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 801a1cc:	2700      	movs	r7, #0
 801a1ce:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 801a1d2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1d4:	9807      	ldr	r0, [sp, #28]
 801a1d6:	f8cd b004 	str.w	fp, [sp, #4]
 801a1da:	9000      	str	r0, [sp, #0]
 801a1dc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 801a1e0:	9003      	str	r0, [sp, #12]
 801a1e2:	203f      	movs	r0, #63	; 0x3f
 801a1e4:	9002      	str	r0, [sp, #8]
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f7ee fdca 	bl	8008d80 <httpd_post_begin>
          if (err == ERR_OK) {
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	f040 80f7 	bne.w	801a3e0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 801a1f2:	9807      	ldr	r0, [sp, #28]
 801a1f4:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801a1f6:	f1ba 0f00 	cmp.w	sl, #0
 801a1fa:	f000 80d5 	beq.w	801a3a8 <http_recv+0x3a8>
 801a1fe:	4652      	mov	r2, sl
 801a200:	e005      	b.n	801a20e <http_recv+0x20e>
              q = q->next;
 801a202:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 801a204:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a208:	2a00      	cmp	r2, #0
 801a20a:	f000 80cd 	beq.w	801a3a8 <http_recv+0x3a8>
 801a20e:	8953      	ldrh	r3, [r2, #10]
 801a210:	4543      	cmp	r3, r8
              start_offset -= q->len;
 801a212:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a216:	d9f4      	bls.n	801a202 <http_recv+0x202>
 801a218:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 801a21a:	4641      	mov	r1, r8
 801a21c:	4610      	mov	r0, r2
 801a21e:	f002 f93b 	bl	801c498 <pbuf_remove_header>
              pbuf_ref(q);
 801a222:	4650      	mov	r0, sl
 801a224:	f002 f9e2 	bl	801c5ec <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 801a228:	4651      	mov	r1, sl
 801a22a:	4628      	mov	r0, r5
 801a22c:	f7ff fa98 	bl	8019760 <http_post_rxpbuf>
 801a230:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 801a232:	2f00      	cmp	r7, #0
 801a234:	f000 80ba 	beq.w	801a3ac <http_recv+0x3ac>
              *sp1 = ' ';
 801a238:	2320      	movs	r3, #32
 801a23a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 801a23c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 801a240:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a242:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a244:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a248:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a24a:	d022      	beq.n	801a292 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a24c:	2f00      	cmp	r7, #0
 801a24e:	d048      	beq.n	801a2e2 <http_recv+0x2e2>
 801a250:	1d7a      	adds	r2, r7, #5
 801a252:	f43f aeeb 	beq.w	801a02c <http_recv+0x2c>
 801a256:	f027 0308 	bic.w	r3, r7, #8
 801a25a:	b25b      	sxtb	r3, r3
 801a25c:	3310      	adds	r3, #16
 801a25e:	d12e      	bne.n	801a2be <http_recv+0x2be>
        if (hs->req != NULL) {
 801a260:	6a28      	ldr	r0, [r5, #32]
 801a262:	b3a0      	cbz	r0, 801a2ce <http_recv+0x2ce>
          pbuf_free(hs->req);
 801a264:	f002 f9a4 	bl	801c5b0 <pbuf_free>
          hs->req = NULL;
 801a268:	2300      	movs	r3, #0
 801a26a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a26c:	4620      	mov	r0, r4
 801a26e:	f002 f99f 	bl	801c5b0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a272:	b1df      	cbz	r7, 801a2ac <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 801a274:	3710      	adds	r7, #16
 801a276:	f43f aee8 	beq.w	801a04a <http_recv+0x4a>
 801a27a:	e6ea      	b.n	801a052 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 801a27c:	6a28      	ldr	r0, [r5, #32]
 801a27e:	f002 f9ab 	bl	801c5d8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 801a282:	6a2b      	ldr	r3, [r5, #32]
 801a284:	891b      	ldrh	r3, [r3, #8]
 801a286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a28a:	d202      	bcs.n	801a292 <http_recv+0x292>
 801a28c:	2805      	cmp	r0, #5
 801a28e:	f67f aecd 	bls.w	801a02c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 801a292:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a296:	4628      	mov	r0, r5
 801a298:	f7ff fa88 	bl	80197ac <http_find_error_file>
 801a29c:	4607      	mov	r7, r0
 801a29e:	e7d5      	b.n	801a24c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 801a2a0:	4621      	mov	r1, r4
 801a2a2:	4628      	mov	r0, r5
    hs->retries = 0;
 801a2a4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801a2a8:	f7ff fa5a 	bl	8019760 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 801a2ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f47f aecf 	bne.w	801a052 <http_recv+0x52>
      http_send(pcb, hs);
 801a2b4:	4629      	mov	r1, r5
 801a2b6:	4630      	mov	r0, r6
 801a2b8:	f7ff fb5a 	bl	8019970 <http_send>
 801a2bc:	e6c9      	b.n	801a052 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a2be:	4b34      	ldr	r3, [pc, #208]	; (801a390 <http_recv+0x390>)
 801a2c0:	f640 2204 	movw	r2, #2564	; 0xa04
 801a2c4:	4933      	ldr	r1, [pc, #204]	; (801a394 <http_recv+0x394>)
 801a2c6:	4834      	ldr	r0, [pc, #208]	; (801a398 <http_recv+0x398>)
 801a2c8:	f00c fa3c 	bl	8026744 <iprintf>
 801a2cc:	e7c8      	b.n	801a260 <http_recv+0x260>
      pbuf_free(p);
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f002 f96e 	bl	801c5b0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a2d4:	e7ce      	b.n	801a274 <http_recv+0x274>
    hs->req = p;
 801a2d6:	622c      	str	r4, [r5, #32]
 801a2d8:	e6ca      	b.n	801a070 <http_recv+0x70>
    data = (char *)p->payload;
 801a2da:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 801a2de:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 801a2e0:	e6da      	b.n	801a098 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 801a2e2:	1d7b      	adds	r3, r7, #5
 801a2e4:	f43f aea2 	beq.w	801a02c <http_recv+0x2c>
        if (hs->req != NULL) {
 801a2e8:	6a28      	ldr	r0, [r5, #32]
 801a2ea:	2800      	cmp	r0, #0
 801a2ec:	d0be      	beq.n	801a26c <http_recv+0x26c>
 801a2ee:	e7b9      	b.n	801a264 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 801a2f0:	2205      	movs	r2, #5
 801a2f2:	492a      	ldr	r1, [pc, #168]	; (801a39c <http_recv+0x39c>)
 801a2f4:	4640      	mov	r0, r8
 801a2f6:	f00d fa07 	bl	8027708 <strncmp>
 801a2fa:	9005      	str	r0, [sp, #20]
 801a2fc:	b9d8      	cbnz	r0, 801a336 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a2fe:	f1a7 0a05 	sub.w	sl, r7, #5
 801a302:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 801a306:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a30a:	491e      	ldr	r1, [pc, #120]	; (801a384 <http_recv+0x384>)
 801a30c:	fa1f fa8a 	uxth.w	sl, sl
 801a310:	4658      	mov	r0, fp
        sp1 = data + 4;
 801a312:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a314:	4652      	mov	r2, sl
 801a316:	f000 f915 	bl	801a544 <lwip_strnstr>
      if (sp2 == NULL) {
 801a31a:	4681      	mov	r9, r0
 801a31c:	2800      	cmp	r0, #0
 801a31e:	d059      	beq.n	801a3d4 <http_recv+0x3d4>
        is_post = 1;
 801a320:	f04f 0a01 	mov.w	sl, #1
 801a324:	9b05      	ldr	r3, [sp, #20]
 801a326:	e6dd      	b.n	801a0e4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a328:	4914      	ldr	r1, [pc, #80]	; (801a37c <http_recv+0x37c>)
 801a32a:	4658      	mov	r0, fp
 801a32c:	f000 f90a 	bl	801a544 <lwip_strnstr>
        is_09 = 1;
 801a330:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a332:	4681      	mov	r9, r0
        if (is_post) {
 801a334:	e6d6      	b.n	801a0e4 <http_recv+0xe4>
        data[4] = 0;
 801a336:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 801a338:	f240 11f5 	movw	r1, #501	; 0x1f5
 801a33c:	4628      	mov	r0, r5
        data[4] = 0;
 801a33e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 801a342:	f7ff fa33 	bl	80197ac <http_find_error_file>
 801a346:	4607      	mov	r7, r0
 801a348:	e780      	b.n	801a24c <http_recv+0x24c>
        if (hs->req != NULL) {
 801a34a:	2800      	cmp	r0, #0
 801a34c:	f43f ae6e 	beq.w	801a02c <http_recv+0x2c>
 801a350:	f06f 0707 	mvn.w	r7, #7
 801a354:	e786      	b.n	801a264 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 801a356:	461a      	mov	r2, r3
 801a358:	4659      	mov	r1, fp
 801a35a:	4628      	mov	r0, r5
 801a35c:	f7ff f910 	bl	8019580 <http_find_file>
 801a360:	4607      	mov	r7, r0
 801a362:	e773      	b.n	801a24c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a364:	463a      	mov	r2, r7
 801a366:	490e      	ldr	r1, [pc, #56]	; (801a3a0 <http_recv+0x3a0>)
 801a368:	4640      	mov	r0, r8
 801a36a:	f000 f8eb 	bl	801a544 <lwip_strnstr>
 801a36e:	9b05      	ldr	r3, [sp, #20]
 801a370:	2800      	cmp	r0, #0
 801a372:	d047      	beq.n	801a404 <http_recv+0x404>
            hs->keepalive = 1;
 801a374:	2001      	movs	r0, #1
 801a376:	e6cb      	b.n	801a110 <http_recv+0x110>
 801a378:	2001ea68 	.word	0x2001ea68
 801a37c:	0802b560 	.word	0x0802b560
 801a380:	08044980 	.word	0x08044980
 801a384:	0802de98 	.word	0x0802de98
 801a388:	0802b69c 	.word	0x0802b69c
 801a38c:	0802b6a4 	.word	0x0802b6a4
 801a390:	08044800 	.word	0x08044800
 801a394:	080449c0 	.word	0x080449c0
 801a398:	0802b43c 	.word	0x0802b43c
 801a39c:	08044988 	.word	0x08044988
 801a3a0:	08044990 	.word	0x08044990
 801a3a4:	2001ea24 	.word	0x2001ea24
            } else if (hs->post_content_len_left == 0) {
 801a3a8:	9b07      	ldr	r3, [sp, #28]
 801a3aa:	b303      	cbz	r3, 801a3ee <http_recv+0x3ee>
        if (hs->req != NULL) {
 801a3ac:	6a28      	ldr	r0, [r5, #32]
 801a3ae:	b398      	cbz	r0, 801a418 <http_recv+0x418>
          pbuf_free(hs->req);
 801a3b0:	f002 f8fe 	bl	801c5b0 <pbuf_free>
          hs->req = NULL;
 801a3b4:	2300      	movs	r3, #0
      pbuf_free(p);
 801a3b6:	4620      	mov	r0, r4
          hs->req = NULL;
 801a3b8:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a3ba:	f002 f8f9 	bl	801c5b0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a3be:	e775      	b.n	801a2ac <http_recv+0x2ac>
        if (content_len >= 0) {
 801a3c0:	f6bf aeed 	bge.w	801a19e <http_recv+0x19e>
              *sp1 = ' ';
 801a3c4:	2320      	movs	r3, #32
 801a3c6:	9a04      	ldr	r2, [sp, #16]
 801a3c8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a3ca:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a3cc:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a3d0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a3d2:	e75e      	b.n	801a292 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a3d4:	4652      	mov	r2, sl
 801a3d6:	4658      	mov	r0, fp
 801a3d8:	4915      	ldr	r1, [pc, #84]	; (801a430 <http_recv+0x430>)
 801a3da:	f000 f8b3 	bl	801a544 <lwip_strnstr>
        if (is_post) {
 801a3de:	e758      	b.n	801a292 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 801a3e0:	463a      	mov	r2, r7
 801a3e2:	4659      	mov	r1, fp
 801a3e4:	4628      	mov	r0, r5
 801a3e6:	f7ff f8cb 	bl	8019580 <http_find_file>
 801a3ea:	4607      	mov	r7, r0
 801a3ec:	e721      	b.n	801a232 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801a3ee:	9907      	ldr	r1, [sp, #28]
 801a3f0:	2241      	movs	r2, #65	; 0x41
 801a3f2:	4608      	mov	r0, r1
 801a3f4:	f001 ff0a 	bl	801c20c <pbuf_alloc>
 801a3f8:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	f7ff f9b0 	bl	8019760 <http_post_rxpbuf>
 801a400:	4607      	mov	r7, r0
 801a402:	e716      	b.n	801a232 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801a404:	463a      	mov	r2, r7
 801a406:	490b      	ldr	r1, [pc, #44]	; (801a434 <http_recv+0x434>)
 801a408:	4640      	mov	r0, r8
 801a40a:	f000 f89b 	bl	801a544 <lwip_strnstr>
            hs->keepalive = 1;
 801a40e:	3800      	subs	r0, #0
 801a410:	9b05      	ldr	r3, [sp, #20]
 801a412:	bf18      	it	ne
 801a414:	2001      	movne	r0, #1
 801a416:	e67b      	b.n	801a110 <http_recv+0x110>
      pbuf_free(p);
 801a418:	4620      	mov	r0, r4
 801a41a:	f002 f8c9 	bl	801c5b0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a41e:	e745      	b.n	801a2ac <http_recv+0x2ac>
              *sp1 = ' ';
 801a420:	2320      	movs	r3, #32
 801a422:	9a04      	ldr	r2, [sp, #16]
 801a424:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a426:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a428:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a42c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801a42e:	e5fd      	b.n	801a02c <http_recv+0x2c>
 801a430:	0802b560 	.word	0x0802b560
 801a434:	080449a8 	.word	0x080449a8

0801a438 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801a438:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801a43a:	202e      	movs	r0, #46	; 0x2e
 801a43c:	f003 fc60 	bl	801dd00 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a440:	b358      	cbz	r0, 801a49a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801a442:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801a444:	2101      	movs	r1, #1
 801a446:	f002 fe3d 	bl	801d0c4 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801a44a:	2250      	movs	r2, #80	; 0x50
 801a44c:	4917      	ldr	r1, [pc, #92]	; (801a4ac <httpd_init+0x74>)
 801a44e:	4620      	mov	r0, r4
 801a450:	f002 fc0c 	bl	801cc6c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a454:	b958      	cbnz	r0, 801a46e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801a456:	4620      	mov	r0, r4
 801a458:	21ff      	movs	r1, #255	; 0xff
 801a45a:	f002 fce9 	bl	801ce30 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a45e:	4604      	mov	r4, r0
 801a460:	b198      	cbz	r0, 801a48a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 801a462:	4620      	mov	r0, r4
 801a464:	4912      	ldr	r1, [pc, #72]	; (801a4b0 <httpd_init+0x78>)
}
 801a466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801a46a:	f002 beb9 	b.w	801d1e0 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a46e:	4b11      	ldr	r3, [pc, #68]	; (801a4b4 <httpd_init+0x7c>)
 801a470:	f640 2257 	movw	r2, #2647	; 0xa57
 801a474:	4910      	ldr	r1, [pc, #64]	; (801a4b8 <httpd_init+0x80>)
 801a476:	4811      	ldr	r0, [pc, #68]	; (801a4bc <httpd_init+0x84>)
 801a478:	f00c f964 	bl	8026744 <iprintf>
    pcb = altcp_listen(pcb);
 801a47c:	4620      	mov	r0, r4
 801a47e:	21ff      	movs	r1, #255	; 0xff
 801a480:	f002 fcd6 	bl	801ce30 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a484:	4604      	mov	r4, r0
 801a486:	2800      	cmp	r0, #0
 801a488:	d1eb      	bne.n	801a462 <httpd_init+0x2a>
 801a48a:	4b0a      	ldr	r3, [pc, #40]	; (801a4b4 <httpd_init+0x7c>)
 801a48c:	f640 2259 	movw	r2, #2649	; 0xa59
 801a490:	490b      	ldr	r1, [pc, #44]	; (801a4c0 <httpd_init+0x88>)
 801a492:	480a      	ldr	r0, [pc, #40]	; (801a4bc <httpd_init+0x84>)
 801a494:	f00c f956 	bl	8026744 <iprintf>
 801a498:	e7e3      	b.n	801a462 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a49a:	4b06      	ldr	r3, [pc, #24]	; (801a4b4 <httpd_init+0x7c>)
 801a49c:	f640 2272 	movw	r2, #2674	; 0xa72
 801a4a0:	4908      	ldr	r1, [pc, #32]	; (801a4c4 <httpd_init+0x8c>)
 801a4a2:	4806      	ldr	r0, [pc, #24]	; (801a4bc <httpd_init+0x84>)
}
 801a4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a4a8:	f00c b94c 	b.w	8026744 <iprintf>
 801a4ac:	0804731c 	.word	0x0804731c
 801a4b0:	08019329 	.word	0x08019329
 801a4b4:	08044800 	.word	0x08044800
 801a4b8:	08044a08 	.word	0x08044a08
 801a4bc:	0802b43c 	.word	0x0802b43c
 801a4c0:	08044a24 	.word	0x08044a24
 801a4c4:	080449ec 	.word	0x080449ec

0801a4c8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801a4c8:	b570      	push	{r4, r5, r6, lr}
 801a4ca:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a4cc:	4606      	mov	r6, r0
{
 801a4ce:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a4d0:	b1c8      	cbz	r0, 801a506 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 801a4d2:	4b11      	ldr	r3, [pc, #68]	; (801a518 <http_set_ssi_handler+0x50>)
 801a4d4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801a4d6:	b175      	cbz	r5, 801a4f6 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a4d8:	2c00      	cmp	r4, #0
 801a4da:	dd04      	ble.n	801a4e6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801a4dc:	4a0f      	ldr	r2, [pc, #60]	; (801a51c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801a4de:	4b10      	ldr	r3, [pc, #64]	; (801a520 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 801a4e0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 801a4e2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 801a4e4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a4e6:	4b0f      	ldr	r3, [pc, #60]	; (801a524 <http_set_ssi_handler+0x5c>)
 801a4e8:	f640 229f 	movw	r2, #2719	; 0xa9f
 801a4ec:	490e      	ldr	r1, [pc, #56]	; (801a528 <http_set_ssi_handler+0x60>)
 801a4ee:	480f      	ldr	r0, [pc, #60]	; (801a52c <http_set_ssi_handler+0x64>)
 801a4f0:	f00c f928 	bl	8026744 <iprintf>
 801a4f4:	e7f2      	b.n	801a4dc <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 801a4f6:	4b0b      	ldr	r3, [pc, #44]	; (801a524 <http_set_ssi_handler+0x5c>)
 801a4f8:	f640 229e 	movw	r2, #2718	; 0xa9e
 801a4fc:	490c      	ldr	r1, [pc, #48]	; (801a530 <http_set_ssi_handler+0x68>)
 801a4fe:	480b      	ldr	r0, [pc, #44]	; (801a52c <http_set_ssi_handler+0x64>)
 801a500:	f00c f920 	bl	8026744 <iprintf>
 801a504:	e7e8      	b.n	801a4d8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a506:	4b07      	ldr	r3, [pc, #28]	; (801a524 <http_set_ssi_handler+0x5c>)
 801a508:	f640 2297 	movw	r2, #2711	; 0xa97
 801a50c:	4909      	ldr	r1, [pc, #36]	; (801a534 <http_set_ssi_handler+0x6c>)
 801a50e:	4807      	ldr	r0, [pc, #28]	; (801a52c <http_set_ssi_handler+0x64>)
 801a510:	f00c f918 	bl	8026744 <iprintf>
 801a514:	e7dd      	b.n	801a4d2 <http_set_ssi_handler+0xa>
 801a516:	bf00      	nop
 801a518:	2001ee68 	.word	0x2001ee68
 801a51c:	2001ee6c 	.word	0x2001ee6c
 801a520:	2001ea64 	.word	0x2001ea64
 801a524:	08044800 	.word	0x08044800
 801a528:	08044a6c 	.word	0x08044a6c
 801a52c:	0802b43c 	.word	0x0802b43c
 801a530:	08044a5c 	.word	0x08044a5c
 801a534:	08044a44 	.word	0x08044a44

0801a538 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801a538:	ba40      	rev16	r0, r0
}
 801a53a:	b280      	uxth	r0, r0
 801a53c:	4770      	bx	lr
 801a53e:	bf00      	nop

0801a540 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 801a540:	ba00      	rev	r0, r0
 801a542:	4770      	bx	lr

0801a544 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a548:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801a54a:	4608      	mov	r0, r1
{
 801a54c:	4688      	mov	r8, r1
 801a54e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801a550:	f7e5 fe80 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 801a554:	b1c0      	cbz	r0, 801a588 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a556:	4605      	mov	r5, r0
 801a558:	7820      	ldrb	r0, [r4, #0]
 801a55a:	b1b0      	cbz	r0, 801a58a <lwip_strnstr+0x46>
 801a55c:	4426      	add	r6, r4
 801a55e:	1962      	adds	r2, r4, r5
 801a560:	4296      	cmp	r6, r2
 801a562:	d314      	bcc.n	801a58e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a564:	f898 7000 	ldrb.w	r7, [r8]
 801a568:	e005      	b.n	801a576 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a56a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801a56e:	1962      	adds	r2, r4, r5
 801a570:	b158      	cbz	r0, 801a58a <lwip_strnstr+0x46>
 801a572:	4296      	cmp	r6, r2
 801a574:	d30b      	bcc.n	801a58e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a576:	4287      	cmp	r7, r0
 801a578:	d1f7      	bne.n	801a56a <lwip_strnstr+0x26>
 801a57a:	4620      	mov	r0, r4
 801a57c:	462a      	mov	r2, r5
 801a57e:	4641      	mov	r1, r8
 801a580:	f00d f8c2 	bl	8027708 <strncmp>
 801a584:	2800      	cmp	r0, #0
 801a586:	d1f0      	bne.n	801a56a <lwip_strnstr+0x26>
 801a588:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801a58e:	2000      	movs	r0, #0
}
 801a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a594 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 801a594:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a598:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a59c:	4293      	cmp	r3, r2
 801a59e:	d01c      	beq.n	801a5da <lwip_stricmp+0x46>
 801a5a0:	f043 0c20 	orr.w	ip, r3, #32
{
 801a5a4:	b500      	push	{lr}
 801a5a6:	f042 0e20 	orr.w	lr, r2, #32
 801a5aa:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a5ae:	2a19      	cmp	r2, #25
 801a5b0:	d810      	bhi.n	801a5d4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a5b2:	45f4      	cmp	ip, lr
 801a5b4:	d10e      	bne.n	801a5d4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801a5b6:	b1a3      	cbz	r3, 801a5e2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801a5b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d0f8      	beq.n	801a5b6 <lwip_stricmp+0x22>
 801a5c4:	f043 0c20 	orr.w	ip, r3, #32
 801a5c8:	f042 0e20 	orr.w	lr, r2, #32
 801a5cc:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a5d0:	2a19      	cmp	r2, #25
 801a5d2:	d9ee      	bls.n	801a5b2 <lwip_stricmp+0x1e>
        return 1;
 801a5d4:	2001      	movs	r0, #1
  return 0;
}
 801a5d6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d1da      	bne.n	801a594 <lwip_stricmp>
  return 0;
 801a5de:	4618      	mov	r0, r3
}
 801a5e0:	4770      	bx	lr
  return 0;
 801a5e2:	4618      	mov	r0, r3
}
 801a5e4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a5e8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801a5e8:	4684      	mov	ip, r0
 801a5ea:	b570      	push	{r4, r5, r6, lr}
 801a5ec:	e004      	b.n	801a5f8 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a5ee:	42b4      	cmp	r4, r6
 801a5f0:	d113      	bne.n	801a61a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 801a5f2:	42e8      	cmn	r0, r5
 801a5f4:	d013      	beq.n	801a61e <lwip_strnicmp+0x36>
 801a5f6:	b193      	cbz	r3, 801a61e <lwip_strnicmp+0x36>
    c1 = *str1++;
 801a5f8:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801a5fc:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 801a600:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a604:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 801a608:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801a60a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a60e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 801a612:	d0ee      	beq.n	801a5f2 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a614:	f1be 0f19 	cmp.w	lr, #25
 801a618:	d9e9      	bls.n	801a5ee <lwip_strnicmp+0x6>
        return 1;
 801a61a:	2001      	movs	r0, #1
  return 0;
}
 801a61c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801a61e:	2000      	movs	r0, #0
}
 801a620:	bd70      	pop	{r4, r5, r6, pc}
 801a622:	bf00      	nop

0801a624 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801a624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a628:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a62a:	4f24      	ldr	r7, [pc, #144]	; (801a6bc <dns_call_found+0x98>)
 801a62c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a630:	4c23      	ldr	r4, [pc, #140]	; (801a6c0 <dns_call_found+0x9c>)
{
 801a632:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a634:	012e      	lsls	r6, r5, #4
 801a636:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 801a63a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 801a63e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a642:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801a646:	6823      	ldr	r3, [r4, #0]
 801a648:	b143      	cbz	r3, 801a65c <dns_call_found+0x38>
 801a64a:	7a22      	ldrb	r2, [r4, #8]
 801a64c:	42aa      	cmp	r2, r5
 801a64e:	d105      	bne.n	801a65c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a650:	6862      	ldr	r2, [r4, #4]
 801a652:	4651      	mov	r1, sl
 801a654:	4640      	mov	r0, r8
 801a656:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801a658:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a65c:	340c      	adds	r4, #12
 801a65e:	454c      	cmp	r4, r9
 801a660:	d1f1      	bne.n	801a646 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a662:	1973      	adds	r3, r6, r5
 801a664:	2400      	movs	r4, #0
 801a666:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801a66a:	4f14      	ldr	r7, [pc, #80]	; (801a6bc <dns_call_found+0x98>)
 801a66c:	7bd9      	ldrb	r1, [r3, #15]
 801a66e:	463a      	mov	r2, r7
    if (i == idx) {
 801a670:	b2e3      	uxtb	r3, r4
 801a672:	3401      	adds	r4, #1
 801a674:	429d      	cmp	r5, r3
 801a676:	d002      	beq.n	801a67e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801a678:	7a93      	ldrb	r3, [r2, #10]
 801a67a:	2b02      	cmp	r3, #2
 801a67c:	d015      	beq.n	801a6aa <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a67e:	2c04      	cmp	r4, #4
 801a680:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801a684:	d1f4      	bne.n	801a670 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a686:	2903      	cmp	r1, #3
 801a688:	d80d      	bhi.n	801a6a6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a68a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a68c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801a6c4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a690:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a694:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801a698:	f007 f860 	bl	802175c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a69c:	2200      	movs	r2, #0
 801a69e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a6a0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a6a2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801a6a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a6aa:	7bd3      	ldrb	r3, [r2, #15]
 801a6ac:	428b      	cmp	r3, r1
 801a6ae:	d1e6      	bne.n	801a67e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a6b0:	4435      	add	r5, r6
 801a6b2:	2304      	movs	r3, #4
 801a6b4:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801a6b8:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a6ba:	e7f4      	b.n	801a6a6 <dns_call_found+0x82>
 801a6bc:	2001eec0 	.word	0x2001eec0
 801a6c0:	2001ee84 	.word	0x2001ee84
 801a6c4:	2001ee74 	.word	0x2001ee74

0801a6c8 <dns_send.isra.0>:
dns_send(u8_t idx)
 801a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6cc:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801a6ce:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6d0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 801a6d4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6d6:	9301      	str	r3, [sp, #4]
 801a6d8:	4b56      	ldr	r3, [pc, #344]	; (801a834 <dns_send.isra.0+0x16c>)
 801a6da:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801a6de:	7ae3      	ldrb	r3, [r4, #11]
 801a6e0:	2b01      	cmp	r3, #1
 801a6e2:	d907      	bls.n	801a6f4 <dns_send.isra.0+0x2c>
 801a6e4:	4b54      	ldr	r3, [pc, #336]	; (801a838 <dns_send.isra.0+0x170>)
 801a6e6:	f240 22fa 	movw	r2, #762	; 0x2fa
 801a6ea:	4954      	ldr	r1, [pc, #336]	; (801a83c <dns_send.isra.0+0x174>)
 801a6ec:	4854      	ldr	r0, [pc, #336]	; (801a840 <dns_send.isra.0+0x178>)
 801a6ee:	f00c f829 	bl	8026744 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801a6f2:	7ae3      	ldrb	r3, [r4, #11]
 801a6f4:	4a53      	ldr	r2, [pc, #332]	; (801a844 <dns_send.isra.0+0x17c>)
 801a6f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a6fa:	2c00      	cmp	r4, #0
 801a6fc:	f000 808b 	beq.w	801a816 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801a700:	9b01      	ldr	r3, [sp, #4]
 801a702:	4e4c      	ldr	r6, [pc, #304]	; (801a834 <dns_send.isra.0+0x16c>)
 801a704:	eb03 0409 	add.w	r4, r3, r9
 801a708:	0124      	lsls	r4, r4, #4
 801a70a:	f104 0510 	add.w	r5, r4, #16
 801a70e:	4435      	add	r5, r6
 801a710:	4628      	mov	r0, r5
 801a712:	f7e5 fd9f 	bl	8000254 <strlen>
 801a716:	3012      	adds	r0, #18
 801a718:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a71c:	b281      	uxth	r1, r0
 801a71e:	2036      	movs	r0, #54	; 0x36
 801a720:	f001 fd74 	bl	801c20c <pbuf_alloc>
  if (p != NULL) {
 801a724:	4680      	mov	r8, r0
 801a726:	2800      	cmp	r0, #0
 801a728:	d06d      	beq.n	801a806 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801a72a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a72c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801a72e:	260c      	movs	r6, #12
    --hostname;
 801a730:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 801a732:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 801a734:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a738:	9305      	str	r3, [sp, #20]
 801a73a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801a73e:	f7ff fefb 	bl	801a538 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 801a742:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 801a744:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a748:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801a74a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801a74e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a752:	4632      	mov	r2, r6
 801a754:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 801a756:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a75a:	f002 f81d 	bl	801c798 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a75e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801a760:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a762:	2b2e      	cmp	r3, #46	; 0x2e
 801a764:	d052      	beq.n	801a80c <dns_send.isra.0+0x144>
 801a766:	2b00      	cmp	r3, #0
 801a768:	d050      	beq.n	801a80c <dns_send.isra.0+0x144>
      ++hostname;
 801a76a:	463d      	mov	r5, r7
 801a76c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801a770:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a772:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801a776:	2b2e      	cmp	r3, #46	; 0x2e
 801a778:	b2e4      	uxtb	r4, r4
 801a77a:	d001      	beq.n	801a780 <dns_send.isra.0+0xb8>
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d1f7      	bne.n	801a770 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 801a780:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 801a784:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 801a786:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801a78a:	4433      	add	r3, r6
 801a78c:	4553      	cmp	r3, sl
 801a78e:	dc37      	bgt.n	801a800 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 801a790:	4622      	mov	r2, r4
 801a792:	4631      	mov	r1, r6
 801a794:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a796:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 801a798:	f002 f8e4 	bl	801c964 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a79c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801a79e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a7a0:	465a      	mov	r2, fp
 801a7a2:	4639      	mov	r1, r7
 801a7a4:	b29b      	uxth	r3, r3
 801a7a6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a7a8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a7aa:	f002 f85b 	bl	801c864 <pbuf_take_at>
    } while (*hostname != 0);
 801a7ae:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801a7b0:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801a7b2:	2a00      	cmp	r2, #0
 801a7b4:	d1d3      	bne.n	801a75e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 801a7b6:	4631      	mov	r1, r6
 801a7b8:	4640      	mov	r0, r8
 801a7ba:	f002 f8d3 	bl	801c964 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a7be:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 801a7c2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7c4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a7c6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7ca:	4640      	mov	r0, r8
 801a7cc:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801a7ce:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7d2:	2204      	movs	r2, #4
 801a7d4:	f002 f846 	bl	801c864 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 801a7d8:	9b01      	ldr	r3, [sp, #4]
 801a7da:	4a16      	ldr	r2, [pc, #88]	; (801a834 <dns_send.isra.0+0x16c>)
 801a7dc:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7de:	4919      	ldr	r1, [pc, #100]	; (801a844 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 801a7e0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7e2:	4b19      	ldr	r3, [pc, #100]	; (801a848 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 801a7e4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 801a7e8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7ec:	f89b 000f 	ldrb.w	r0, [fp, #15]
 801a7f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a7f4:	4641      	mov	r1, r8
 801a7f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a7fa:	2335      	movs	r3, #53	; 0x35
 801a7fc:	f006 ff0c 	bl	8021618 <udp_sendto>
    pbuf_free(p);
 801a800:	4640      	mov	r0, r8
 801a802:	f001 fed5 	bl	801c5b0 <pbuf_free>
}
 801a806:	b007      	add	sp, #28
 801a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a80c:	2300      	movs	r3, #0
      ++hostname;
 801a80e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a810:	469b      	mov	fp, r3
 801a812:	461c      	mov	r4, r3
 801a814:	e7b9      	b.n	801a78a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 801a816:	4648      	mov	r0, r9
 801a818:	4621      	mov	r1, r4
 801a81a:	f7ff ff03 	bl	801a624 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801a81e:	9b01      	ldr	r3, [sp, #4]
 801a820:	444b      	add	r3, r9
 801a822:	4699      	mov	r9, r3
 801a824:	4b03      	ldr	r3, [pc, #12]	; (801a834 <dns_send.isra.0+0x16c>)
 801a826:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801a82a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801a82e:	b007      	add	sp, #28
 801a830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a834:	2001eec0 	.word	0x2001eec0
 801a838:	08044b44 	.word	0x08044b44
 801a83c:	08044b74 	.word	0x08044b74
 801a840:	0802b43c 	.word	0x0802b43c
 801a844:	2001eeb8 	.word	0x2001eeb8
 801a848:	2001ee74 	.word	0x2001ee74

0801a84c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a84c:	2803      	cmp	r0, #3
{
 801a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a852:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a854:	d846      	bhi.n	801a8e4 <dns_check_entry+0x98>

  switch (entry->state) {
 801a856:	4e3a      	ldr	r6, [pc, #232]	; (801a940 <dns_check_entry+0xf4>)
 801a858:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801a85c:	0125      	lsls	r5, r4, #4
 801a85e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801a862:	7a9b      	ldrb	r3, [r3, #10]
 801a864:	2b03      	cmp	r3, #3
 801a866:	d861      	bhi.n	801a92c <dns_check_entry+0xe0>
 801a868:	e8df f003 	tbb	[pc, r3]
 801a86c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a870:	192b      	adds	r3, r5, r4
 801a872:	011b      	lsls	r3, r3, #4
 801a874:	58f2      	ldr	r2, [r6, r3]
 801a876:	2a00      	cmp	r2, #0
 801a878:	d140      	bne.n	801a8fc <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801a87a:	442c      	add	r4, r5
 801a87c:	2300      	movs	r3, #0
 801a87e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a882:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a888:	4f2e      	ldr	r7, [pc, #184]	; (801a944 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801a88a:	f00b ffff 	bl	802688c <rand>
 801a88e:	4b2c      	ldr	r3, [pc, #176]	; (801a940 <dns_check_entry+0xf4>)
 801a890:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a892:	7a9a      	ldrb	r2, [r3, #10]
 801a894:	2a02      	cmp	r2, #2
 801a896:	d02d      	beq.n	801a8f4 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a898:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a89c:	429f      	cmp	r7, r3
 801a89e:	d1f8      	bne.n	801a892 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 801a8a0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 801a8a2:	2202      	movs	r2, #2
      entry->tmr = 1;
 801a8a4:	2301      	movs	r3, #1
      err = dns_send(i);
 801a8a6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 801a8a8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801a8ac:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801a8ae:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 801a8b0:	81b3      	strh	r3, [r6, #12]
}
 801a8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 801a8b6:	f7ff bf07 	b.w	801a6c8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801a8ba:	192a      	adds	r2, r5, r4
 801a8bc:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 801a8c0:	7b13      	ldrb	r3, [r2, #12]
 801a8c2:	3b01      	subs	r3, #1
 801a8c4:	b2db      	uxtb	r3, r3
 801a8c6:	7313      	strb	r3, [r2, #12]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d1db      	bne.n	801a884 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801a8cc:	7b53      	ldrb	r3, [r2, #13]
 801a8ce:	3301      	adds	r3, #1
 801a8d0:	b2db      	uxtb	r3, r3
 801a8d2:	2b04      	cmp	r3, #4
 801a8d4:	7353      	strb	r3, [r2, #13]
 801a8d6:	d016      	beq.n	801a906 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 801a8d8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801a8da:	4620      	mov	r0, r4
}
 801a8dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 801a8e0:	f7ff bef2 	b.w	801a6c8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a8e4:	4b18      	ldr	r3, [pc, #96]	; (801a948 <dns_check_entry+0xfc>)
 801a8e6:	f240 421c 	movw	r2, #1052	; 0x41c
 801a8ea:	4918      	ldr	r1, [pc, #96]	; (801a94c <dns_check_entry+0x100>)
 801a8ec:	4818      	ldr	r0, [pc, #96]	; (801a950 <dns_check_entry+0x104>)
 801a8ee:	f00b ff29 	bl	8026744 <iprintf>
 801a8f2:	e7b0      	b.n	801a856 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a8f4:	891a      	ldrh	r2, [r3, #8]
 801a8f6:	428a      	cmp	r2, r1
 801a8f8:	d1ce      	bne.n	801a898 <dns_check_entry+0x4c>
 801a8fa:	e7c6      	b.n	801a88a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a8fc:	3a01      	subs	r2, #1
 801a8fe:	50f2      	str	r2, [r6, r3]
 801a900:	2a00      	cmp	r2, #0
 801a902:	d0ba      	beq.n	801a87a <dns_check_entry+0x2e>
 801a904:	e7be      	b.n	801a884 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801a906:	7ad3      	ldrb	r3, [r2, #11]
 801a908:	b913      	cbnz	r3, 801a910 <dns_check_entry+0xc4>
 801a90a:	4b12      	ldr	r3, [pc, #72]	; (801a954 <dns_check_entry+0x108>)
 801a90c:	685b      	ldr	r3, [r3, #4]
 801a90e:	b94b      	cbnz	r3, 801a924 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 801a910:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 801a912:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 801a914:	2100      	movs	r1, #0
 801a916:	f7ff fe85 	bl	801a624 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801a91a:	2300      	movs	r3, #0
 801a91c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a920:	72b3      	strb	r3, [r6, #10]
            break;
 801a922:	e7af      	b.n	801a884 <dns_check_entry+0x38>
            entry->server_idx++;
 801a924:	2301      	movs	r3, #1
 801a926:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 801a928:	8193      	strh	r3, [r2, #12]
 801a92a:	e7d6      	b.n	801a8da <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a92c:	4b06      	ldr	r3, [pc, #24]	; (801a948 <dns_check_entry+0xfc>)
 801a92e:	f240 425b 	movw	r2, #1115	; 0x45b
 801a932:	4909      	ldr	r1, [pc, #36]	; (801a958 <dns_check_entry+0x10c>)
 801a934:	4806      	ldr	r0, [pc, #24]	; (801a950 <dns_check_entry+0x104>)
}
 801a936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a93a:	f00b bf03 	b.w	8026744 <iprintf>
 801a93e:	bf00      	nop
 801a940:	2001eec0 	.word	0x2001eec0
 801a944:	2001f300 	.word	0x2001f300
 801a948:	08044b44 	.word	0x08044b44
 801a94c:	08044b8c 	.word	0x08044b8c
 801a950:	0802b43c 	.word	0x0802b43c
 801a954:	2001eeb8 	.word	0x2001eeb8
 801a958:	08044ba8 	.word	0x08044ba8

0801a95c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a960:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a962:	8912      	ldrh	r2, [r2, #8]
{
 801a964:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a966:	2a0f      	cmp	r2, #15
 801a968:	d805      	bhi.n	801a976 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801a96a:	4620      	mov	r0, r4
 801a96c:	f001 fe20 	bl	801c5b0 <pbuf_free>
  return;
}
 801a970:	b00d      	add	sp, #52	; 0x34
 801a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 801a976:	4699      	mov	r9, r3
 801a978:	220c      	movs	r2, #12
 801a97a:	2300      	movs	r3, #0
 801a97c:	a906      	add	r1, sp, #24
 801a97e:	4620      	mov	r0, r4
 801a980:	f001 feba 	bl	801c6f8 <pbuf_copy_partial>
 801a984:	280c      	cmp	r0, #12
 801a986:	4605      	mov	r5, r0
 801a988:	d1ef      	bne.n	801a96a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801a98a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 801ac80 <dns_recv+0x324>
 801a98e:	2600      	movs	r6, #0
 801a990:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801a994:	f7ff fdd0 	bl	801a538 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a998:	4643      	mov	r3, r8
 801a99a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801a99c:	7a9a      	ldrb	r2, [r3, #10]
 801a99e:	2a02      	cmp	r2, #2
 801a9a0:	d008      	beq.n	801a9b4 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a9a2:	3601      	adds	r6, #1
 801a9a4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a9a8:	2e04      	cmp	r6, #4
 801a9aa:	d0de      	beq.n	801a96a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801a9ac:	7a9a      	ldrb	r2, [r3, #10]
 801a9ae:	b2f7      	uxtb	r7, r6
 801a9b0:	2a02      	cmp	r2, #2
 801a9b2:	d1f6      	bne.n	801a9a2 <dns_recv+0x46>
 801a9b4:	891a      	ldrh	r2, [r3, #8]
 801a9b6:	4282      	cmp	r2, r0
 801a9b8:	d1f3      	bne.n	801a9a2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801a9ba:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801a9be:	f7ff fdbb 	bl	801a538 <lwip_htons>
 801a9c2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 801a9c4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801a9c8:	f7ff fdb6 	bl	801a538 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801a9cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 801a9d0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 801a9d2:	09db      	lsrs	r3, r3, #7
 801a9d4:	d0c9      	beq.n	801a96a <dns_recv+0xe>
 801a9d6:	f1ba 0f01 	cmp.w	sl, #1
 801a9da:	d1c6      	bne.n	801a96a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801a9dc:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 801a9e0:	49a5      	ldr	r1, [pc, #660]	; (801ac78 <dns_recv+0x31c>)
 801a9e2:	f8d9 2000 	ldr.w	r2, [r9]
 801a9e6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801a9ea:	7adb      	ldrb	r3, [r3, #11]
 801a9ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a9f0:	429a      	cmp	r2, r3
 801a9f2:	d1ba      	bne.n	801a96a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801a9f4:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801a9f8:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a9fc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801ac84 <dns_recv+0x328>
 801aa00:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801aa04:	f103 0210 	add.w	r2, r3, #16
 801aa08:	9301      	str	r3, [sp, #4]
 801aa0a:	4442      	add	r2, r8
 801aa0c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801aa10:	462e      	mov	r6, r5
 801aa12:	4627      	mov	r7, r4
 801aa14:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 801aa16:	4631      	mov	r1, r6
 801aa18:	4638      	mov	r0, r7
 801aa1a:	f001 ff93 	bl	801c944 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801aa1e:	2800      	cmp	r0, #0
 801aa20:	db2d      	blt.n	801aa7e <dns_recv+0x122>
 801aa22:	455e      	cmp	r6, fp
 801aa24:	d02b      	beq.n	801aa7e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 801aa26:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801aa2a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801aa2c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801aa2e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 801aa30:	d025      	beq.n	801aa7e <dns_recv+0x122>
      while (n > 0) {
 801aa32:	b330      	cbz	r0, 801aa82 <dns_recv+0x126>
 801aa34:	46aa      	mov	sl, r5
 801aa36:	182c      	adds	r4, r5, r0
 801aa38:	e01b      	b.n	801aa72 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa3a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801aa3e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa40:	f819 2000 	ldrb.w	r2, [r9, r0]
 801aa44:	4601      	mov	r1, r0
        ++query;
 801aa46:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa48:	f002 0203 	and.w	r2, r2, #3
 801aa4c:	2a01      	cmp	r2, #1
 801aa4e:	f819 2003 	ldrb.w	r2, [r9, r3]
 801aa52:	f002 0203 	and.w	r2, r2, #3
 801aa56:	bf08      	it	eq
 801aa58:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801aa5c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa5e:	2a01      	cmp	r2, #1
 801aa60:	bf08      	it	eq
 801aa62:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 801aa64:	455e      	cmp	r6, fp
        response_offset++;
 801aa66:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 801aa68:	d009      	beq.n	801aa7e <dns_recv+0x122>
 801aa6a:	4299      	cmp	r1, r3
 801aa6c:	d107      	bne.n	801aa7e <dns_recv+0x122>
      while (n > 0) {
 801aa6e:	4554      	cmp	r4, sl
 801aa70:	d007      	beq.n	801aa82 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 801aa72:	4631      	mov	r1, r6
 801aa74:	4638      	mov	r0, r7
 801aa76:	f001 ff65 	bl	801c944 <pbuf_try_get_at>
        if (c < 0) {
 801aa7a:	1e03      	subs	r3, r0, #0
 801aa7c:	dadd      	bge.n	801aa3a <dns_recv+0xde>
 801aa7e:	463c      	mov	r4, r7
 801aa80:	e773      	b.n	801a96a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 801aa82:	4631      	mov	r1, r6
 801aa84:	4638      	mov	r0, r7
 801aa86:	f001 ff5d 	bl	801c944 <pbuf_try_get_at>
    if (n < 0) {
 801aa8a:	2800      	cmp	r0, #0
      ++query;
 801aa8c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 801aa90:	dbf5      	blt.n	801aa7e <dns_recv+0x122>
  } while (n != 0);
 801aa92:	d1c0      	bne.n	801aa16 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 801aa94:	4635      	mov	r5, r6
 801aa96:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801aa9a:	463c      	mov	r4, r7
 801aa9c:	9e03      	ldr	r6, [sp, #12]
 801aa9e:	454d      	cmp	r5, r9
 801aaa0:	9f02      	ldr	r7, [sp, #8]
 801aaa2:	f43f af62 	beq.w	801a96a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 801aaa6:	f105 0a01 	add.w	sl, r5, #1
 801aaaa:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801aaae:	45ca      	cmp	sl, r9
 801aab0:	f43f af5b 	beq.w	801a96a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 801aab4:	4653      	mov	r3, sl
 801aab6:	2204      	movs	r2, #4
 801aab8:	a904      	add	r1, sp, #16
 801aaba:	4620      	mov	r0, r4
 801aabc:	f001 fe1c 	bl	801c6f8 <pbuf_copy_partial>
 801aac0:	2804      	cmp	r0, #4
 801aac2:	f47f af52 	bne.w	801a96a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 801aac6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aaca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aace:	f47f af4c 	bne.w	801a96a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801aad2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 801aad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aada:	f47f af46 	bne.w	801a96a <dns_recv+0xe>
 801aade:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801aae2:	459a      	cmp	sl, r3
 801aae4:	f63f af41 	bhi.w	801a96a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801aae8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aaec:	071b      	lsls	r3, r3, #28
 801aaee:	d017      	beq.n	801ab20 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801aaf0:	f44f 7388 	mov.w	r3, #272	; 0x110
 801aaf4:	fb03 8306 	mla	r3, r3, r6, r8
 801aaf8:	7adb      	ldrb	r3, [r3, #11]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	f040 80ae 	bne.w	801ac5c <dns_recv+0x300>
 801ab00:	4b5d      	ldr	r3, [pc, #372]	; (801ac78 <dns_recv+0x31c>)
 801ab02:	685b      	ldr	r3, [r3, #4]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	f000 80a9 	beq.w	801ac5c <dns_recv+0x300>
            entry->tmr     = 1;
 801ab0a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801ab0e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 801ab10:	fb03 8606 	mla	r6, r3, r6, r8
 801ab14:	f240 3301 	movw	r3, #769	; 0x301
 801ab18:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801ab1a:	f7ff fe97 	bl	801a84c <dns_check_entry>
            goto ignore_packet;
 801ab1e:	e724      	b.n	801a96a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801ab20:	3505      	adds	r5, #5
 801ab22:	f8dd a000 	ldr.w	sl, [sp]
 801ab26:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 801ab28:	f1ba 0f00 	cmp.w	sl, #0
 801ab2c:	f000 8096 	beq.w	801ac5c <dns_recv+0x300>
 801ab30:	8923      	ldrh	r3, [r4, #8]
 801ab32:	42ab      	cmp	r3, r5
 801ab34:	d80b      	bhi.n	801ab4e <dns_recv+0x1f2>
 801ab36:	e091      	b.n	801ac5c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 801ab38:	8922      	ldrh	r2, [r4, #8]
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	f6bf af15 	bge.w	801a96a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 801ab40:	4629      	mov	r1, r5
 801ab42:	f001 feff 	bl	801c944 <pbuf_try_get_at>
    if (n < 0) {
 801ab46:	2800      	cmp	r0, #0
 801ab48:	f6ff af0f 	blt.w	801a96a <dns_recv+0xe>
  } while (n != 0);
 801ab4c:	d017      	beq.n	801ab7e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801ab4e:	4629      	mov	r1, r5
 801ab50:	4620      	mov	r0, r4
 801ab52:	f001 fef7 	bl	801c944 <pbuf_try_get_at>
 801ab56:	f105 0b01 	add.w	fp, r5, #1
 801ab5a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801ab5c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801ab5e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 801ab62:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 801ab64:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 801ab68:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801ab6a:	f6ff aefe 	blt.w	801a96a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801ab6e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 801ab70:	f1bb 0f00 	cmp.w	fp, #0
 801ab74:	f43f aef9 	beq.w	801a96a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 801ab78:	2ac0      	cmp	r2, #192	; 0xc0
 801ab7a:	d1dd      	bne.n	801ab38 <dns_recv+0x1dc>
 801ab7c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801ab7e:	454d      	cmp	r5, r9
 801ab80:	f43f aef3 	beq.w	801a96a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 801ab84:	f105 0b01 	add.w	fp, r5, #1
 801ab88:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801ab8c:	45cb      	cmp	fp, r9
 801ab8e:	f43f aeec 	beq.w	801a96a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801ab92:	465b      	mov	r3, fp
 801ab94:	220a      	movs	r2, #10
 801ab96:	a909      	add	r1, sp, #36	; 0x24
 801ab98:	4620      	mov	r0, r4
 801ab9a:	f001 fdad 	bl	801c6f8 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801ab9e:	280a      	cmp	r0, #10
 801aba0:	f47f aee3 	bne.w	801a96a <dns_recv+0xe>
 801aba4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801aba8:	459b      	cmp	fp, r3
 801abaa:	f63f aede 	bhi.w	801a96a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801abb2:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801abb8:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abba:	d013      	beq.n	801abe4 <dns_recv+0x288>
 801abbc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 801abc0:	f7ff fcba 	bl	801a538 <lwip_htons>
 801abc4:	4428      	add	r0, r5
 801abc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801abca:	f6bf aece 	bge.w	801a96a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abce:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 801abd2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abd6:	f7ff fcaf 	bl	801a538 <lwip_htons>
 801abda:	4405      	add	r5, r0
            --nanswers;
 801abdc:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abe0:	b2ad      	uxth	r5, r5
            --nanswers;
 801abe2:	e7a1      	b.n	801ab28 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801abe4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801abe8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801abec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801abf0:	d1e6      	bne.n	801abc0 <dns_recv+0x264>
 801abf2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801abf6:	d1e3      	bne.n	801abc0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801abf8:	462b      	mov	r3, r5
 801abfa:	2204      	movs	r2, #4
 801abfc:	a905      	add	r1, sp, #20
 801abfe:	4620      	mov	r0, r4
 801ac00:	f001 fd7a 	bl	801c6f8 <pbuf_copy_partial>
 801ac04:	2804      	cmp	r0, #4
 801ac06:	f47f aeb0 	bne.w	801a96a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801ac0a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801ac0e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801ac10:	fb03 f606 	mul.w	r6, r3, r6
 801ac14:	9b05      	ldr	r3, [sp, #20]
 801ac16:	eb08 0406 	add.w	r4, r8, r6
 801ac1a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801ac1c:	f001 fcc8 	bl	801c5b0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801ac20:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac22:	f7ff fc8d 	bl	801a540 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801ac26:	4a15      	ldr	r2, [pc, #84]	; (801ac7c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801ac28:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801ac2a:	9901      	ldr	r1, [sp, #4]
 801ac2c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801ac2e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801ac30:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 801ac34:	bf28      	it	cs
 801ac36:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801ac38:	4441      	add	r1, r8
  entry->ttl = ttl;
 801ac3a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801ac3e:	2303      	movs	r3, #3
 801ac40:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 801ac42:	f7ff fcef 	bl	801a624 <dns_call_found>
  if (entry->ttl == 0) {
 801ac46:	f858 3006 	ldr.w	r3, [r8, r6]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f47f ae90 	bne.w	801a970 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 801ac50:	7aa2      	ldrb	r2, [r4, #10]
 801ac52:	2a03      	cmp	r2, #3
 801ac54:	f47f ae8c 	bne.w	801a970 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 801ac58:	72a3      	strb	r3, [r4, #10]
                  return;
 801ac5a:	e689      	b.n	801a970 <dns_recv+0x14>
        pbuf_free(p);
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f001 fca7 	bl	801c5b0 <pbuf_free>
        dns_call_found(i, NULL);
 801ac62:	2100      	movs	r1, #0
 801ac64:	4638      	mov	r0, r7
 801ac66:	f7ff fcdd 	bl	801a624 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801ac6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801ac6e:	2200      	movs	r2, #0
 801ac70:	fb03 8606 	mla	r6, r3, r6, r8
 801ac74:	72b2      	strb	r2, [r6, #10]
        return;
 801ac76:	e67b      	b.n	801a970 <dns_recv+0x14>
 801ac78:	2001eeb8 	.word	0x2001eeb8
 801ac7c:	00093a80 	.word	0x00093a80
 801ac80:	2001eec0 	.word	0x2001eec0
 801ac84:	08047579 	.word	0x08047579

0801ac88 <dns_init>:
}
 801ac88:	4770      	bx	lr
 801ac8a:	bf00      	nop

0801ac8c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801ac8c:	2801      	cmp	r0, #1
 801ac8e:	d900      	bls.n	801ac92 <dns_setserver+0x6>
}
 801ac90:	4770      	bx	lr
    if (dnsserver != NULL) {
 801ac92:	b121      	cbz	r1, 801ac9e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801ac94:	4b05      	ldr	r3, [pc, #20]	; (801acac <dns_setserver+0x20>)
 801ac96:	680a      	ldr	r2, [r1, #0]
 801ac98:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801ac9c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801ac9e:	4a04      	ldr	r2, [pc, #16]	; (801acb0 <dns_setserver+0x24>)
 801aca0:	4b02      	ldr	r3, [pc, #8]	; (801acac <dns_setserver+0x20>)
 801aca2:	6812      	ldr	r2, [r2, #0]
 801aca4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 801aca8:	4770      	bx	lr
 801acaa:	bf00      	nop
 801acac:	2001eeb8 	.word	0x2001eeb8
 801acb0:	0804731c 	.word	0x0804731c

0801acb4 <dns_tmr>:
{
 801acb4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 801acb6:	2000      	movs	r0, #0
 801acb8:	f7ff fdc8 	bl	801a84c <dns_check_entry>
 801acbc:	2001      	movs	r0, #1
 801acbe:	f7ff fdc5 	bl	801a84c <dns_check_entry>
 801acc2:	2002      	movs	r0, #2
 801acc4:	f7ff fdc2 	bl	801a84c <dns_check_entry>
 801acc8:	2003      	movs	r0, #3
}
 801acca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801acce:	f7ff bdbd 	b.w	801a84c <dns_check_entry>
 801acd2:	bf00      	nop

0801acd4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 801acd4:	2900      	cmp	r1, #0
 801acd6:	f000 812e 	beq.w	801af36 <dns_gethostbyname_addrtype+0x262>
{
 801acda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801acde:	fab0 f780 	clz	r7, r0
{
 801ace2:	b083      	sub	sp, #12
 801ace4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 801ace6:	097f      	lsrs	r7, r7, #5
 801ace8:	2800      	cmp	r0, #0
 801acea:	f000 8103 	beq.w	801aef4 <dns_gethostbyname_addrtype+0x220>
 801acee:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 801acf0:	7803      	ldrb	r3, [r0, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	f000 80fe 	beq.w	801aef4 <dns_gethostbyname_addrtype+0x220>
 801acf8:	4615      	mov	r5, r2
 801acfa:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801acfc:	f7e5 faaa 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ad00:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801ad02:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ad04:	f200 80f6 	bhi.w	801aef4 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801ad08:	4641      	mov	r1, r8
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	f009 fa46 	bl	802419c <ip4addr_aton>
 801ad10:	b118      	cbz	r0, 801ad1a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801ad12:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801ad14:	b003      	add	sp, #12
 801ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad1a:	4f88      	ldr	r7, [pc, #544]	; (801af3c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801ad20:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 801ad24:	2b03      	cmp	r3, #3
 801ad26:	d03a      	beq.n	801ad9e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad28:	3401      	adds	r4, #1
 801ad2a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801ad2e:	2c04      	cmp	r4, #4
 801ad30:	d1f6      	bne.n	801ad20 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801ad32:	4b83      	ldr	r3, [pc, #524]	; (801af40 <dns_gethostbyname_addrtype+0x26c>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	f000 80f6 	beq.w	801af28 <dns_gethostbyname_addrtype+0x254>
 801ad3c:	2400      	movs	r4, #0
 801ad3e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801af4c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801ad42:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 801ad46:	fa5f f884 	uxtb.w	r8, r4
 801ad4a:	2b02      	cmp	r3, #2
 801ad4c:	d040      	beq.n	801add0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801ad4e:	3401      	adds	r4, #1
 801ad50:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801ad54:	2c04      	cmp	r4, #4
 801ad56:	d1f4      	bne.n	801ad42 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ad58:	4a7a      	ldr	r2, [pc, #488]	; (801af44 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801ad5a:	4623      	mov	r3, r4
 801ad5c:	4f7a      	ldr	r7, [pc, #488]	; (801af48 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ad5e:	2400      	movs	r4, #0
 801ad60:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 801ad62:	46a4      	mov	ip, r4
 801ad64:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 801ad66:	7a90      	ldrb	r0, [r2, #10]
 801ad68:	fa5f f884 	uxtb.w	r8, r4
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	d041      	beq.n	801adf4 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 801ad70:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad72:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 801ad76:	d023      	beq.n	801adc0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad78:	2c04      	cmp	r4, #4
 801ad7a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801ad7e:	d1f2      	bne.n	801ad66 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 801ad80:	2b04      	cmp	r3, #4
 801ad82:	d007      	beq.n	801ad94 <dns_gethostbyname_addrtype+0xc0>
 801ad84:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 801ad88:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801ad8c:	7aa2      	ldrb	r2, [r4, #10]
 801ad8e:	2a03      	cmp	r2, #3
 801ad90:	f000 80ae 	beq.w	801aef0 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 801ad94:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ad98:	b003      	add	sp, #12
 801ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801ad9e:	4651      	mov	r1, sl
 801ada0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7ff fc1f 	bl	801a5e8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801adaa:	2800      	cmp	r0, #0
 801adac:	d1bc      	bne.n	801ad28 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801adae:	4b66      	ldr	r3, [pc, #408]	; (801af48 <dns_gethostbyname_addrtype+0x274>)
 801adb0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801adb4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801adb8:	6863      	ldr	r3, [r4, #4]
 801adba:	f8c8 3000 	str.w	r3, [r8]
 801adbe:	e7a9      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801adc0:	7b90      	ldrb	r0, [r2, #14]
 801adc2:	1a08      	subs	r0, r1, r0
 801adc4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 801adc6:	4560      	cmp	r0, ip
 801adc8:	d9d6      	bls.n	801ad78 <dns_gethostbyname_addrtype+0xa4>
 801adca:	4643      	mov	r3, r8
 801adcc:	4684      	mov	ip, r0
 801adce:	e7d3      	b.n	801ad78 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801add0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801add4:	4639      	mov	r1, r7
 801add6:	4630      	mov	r0, r6
 801add8:	f7ff fc06 	bl	801a5e8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801addc:	2800      	cmp	r0, #0
 801adde:	d1b6      	bne.n	801ad4e <dns_gethostbyname_addrtype+0x7a>
 801ade0:	4b5a      	ldr	r3, [pc, #360]	; (801af4c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 801ade2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ade4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 801ade6:	2a00      	cmp	r2, #0
 801ade8:	f000 8091 	beq.w	801af0e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801adec:	3001      	adds	r0, #1
 801adee:	2804      	cmp	r0, #4
 801adf0:	d1f7      	bne.n	801ade2 <dns_gethostbyname_addrtype+0x10e>
 801adf2:	e7ac      	b.n	801ad4e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 801adf4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801adf8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801adfc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801af4c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 801ae00:	2700      	movs	r7, #0
 801ae02:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 801ae04:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ae06:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 801ae08:	b12b      	cbz	r3, 801ae16 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ae0a:	3701      	adds	r7, #1
 801ae0c:	2f04      	cmp	r7, #4
 801ae0e:	d1f9      	bne.n	801ae04 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 801ae10:	f04f 30ff 	mov.w	r0, #4294967295
 801ae14:	e7c0      	b.n	801ad98 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 801ae16:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801ae1a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801ae1c:	f104 0010 	add.w	r0, r4, #16
 801ae20:	4631      	mov	r1, r6
  req->found = found;
 801ae22:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 801ae26:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801ae2a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801ae2c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 801ae30:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 801ae34:	2201      	movs	r2, #1
 801ae36:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 801ae38:	464a      	mov	r2, r9
 801ae3a:	f00a fcbd 	bl	80257b8 <memcpy>
  entry->name[namelen] = 0;
 801ae3e:	44a1      	add	r9, r4
 801ae40:	9b01      	ldr	r3, [sp, #4]
 801ae42:	461d      	mov	r5, r3
 801ae44:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 801ae48:	007b      	lsls	r3, r7, #1
 801ae4a:	9301      	str	r3, [sp, #4]
 801ae4c:	4b40      	ldr	r3, [pc, #256]	; (801af50 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae52:	b2ee      	uxtb	r6, r5
 801ae54:	b30a      	cbz	r2, 801ae9a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801ae56:	3501      	adds	r5, #1
 801ae58:	2d04      	cmp	r5, #4
 801ae5a:	d1f8      	bne.n	801ae4e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae5c:	483d      	ldr	r0, [pc, #244]	; (801af54 <dns_gethostbyname_addrtype+0x280>)
 801ae5e:	2304      	movs	r3, #4
 801ae60:	7806      	ldrb	r6, [r0, #0]
 801ae62:	3601      	adds	r6, #1
 801ae64:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801ae66:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 801ae68:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801ae6a:	d901      	bls.n	801ae70 <dns_gethostbyname_addrtype+0x19c>
 801ae6c:	2600      	movs	r6, #0
      idx = 0;
 801ae6e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 801ae70:	4d37      	ldr	r5, [pc, #220]	; (801af50 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae72:	1c71      	adds	r1, r6, #1
 801ae74:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 801ae76:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ae7a:	2a00      	cmp	r2, #0
 801ae7c:	d13d      	bne.n	801aefa <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae7e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ae82:	b2ce      	uxtb	r6, r1
 801ae84:	d1ef      	bne.n	801ae66 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 801ae86:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 801ae88:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801ae8c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801ae8e:	443a      	add	r2, r7
 801ae90:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 801ae94:	2304      	movs	r3, #4
 801ae96:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 801ae98:	e73c      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801ae9a:	202e      	movs	r0, #46	; 0x2e
 801ae9c:	f006 fc9c 	bl	80217d8 <udp_new_ip_type>
  if (pcb == NULL) {
 801aea0:	4681      	mov	r9, r0
 801aea2:	2800      	cmp	r0, #0
 801aea4:	d043      	beq.n	801af2e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aea6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801af5c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801aeaa:	f00b fcef 	bl	802688c <rand>
 801aeae:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 801aeb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801aeb4:	d3f9      	bcc.n	801aeaa <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aeb6:	4659      	mov	r1, fp
 801aeb8:	4648      	mov	r0, r9
 801aeba:	f006 fa29 	bl	8021310 <udp_bind>
  } while (err == ERR_USE);
 801aebe:	f110 0f08 	cmn.w	r0, #8
 801aec2:	d0f2      	beq.n	801aeaa <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 801aec4:	b9d8      	cbnz	r0, 801aefe <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 801aec6:	4602      	mov	r2, r0
 801aec8:	4923      	ldr	r1, [pc, #140]	; (801af58 <dns_gethostbyname_addrtype+0x284>)
 801aeca:	4648      	mov	r0, r9
 801aecc:	f006 fc34 	bl	8021738 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 801aed0:	4b1f      	ldr	r3, [pc, #124]	; (801af50 <dns_gethostbyname_addrtype+0x27c>)
 801aed2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 801aed6:	4b1f      	ldr	r3, [pc, #124]	; (801af54 <dns_gethostbyname_addrtype+0x280>)
 801aed8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 801aeda:	4a1a      	ldr	r2, [pc, #104]	; (801af44 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 801aedc:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 801aede:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 801aee0:	7813      	ldrb	r3, [r2, #0]
 801aee2:	3301      	adds	r3, #1
 801aee4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 801aee6:	f7ff fcb1 	bl	801a84c <dns_check_entry>
  return ERR_INPROGRESS;
 801aeea:	f06f 0004 	mvn.w	r0, #4
 801aeee:	e711      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 801aef0:	4698      	mov	r8, r3
 801aef2:	e783      	b.n	801adfc <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 801aef4:	f06f 000f 	mvn.w	r0, #15
 801aef8:	e70c      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801aefa:	7006      	strb	r6, [r0, #0]
      return idx;
 801aefc:	e7ed      	b.n	801aeda <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801aefe:	4648      	mov	r0, r9
 801af00:	f006 fc2c 	bl	802175c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801af04:	2300      	movs	r3, #0
 801af06:	4a12      	ldr	r2, [pc, #72]	; (801af50 <dns_gethostbyname_addrtype+0x27c>)
 801af08:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801af0c:	e7a6      	b.n	801ae5c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801af0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af12:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 801af16:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801af1a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801af1e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 801af22:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 801af26:	e6f5      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 801af28:	f06f 0005 	mvn.w	r0, #5
 801af2c:	e6f2      	b.n	801ad14 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801af2e:	4b08      	ldr	r3, [pc, #32]	; (801af50 <dns_gethostbyname_addrtype+0x27c>)
 801af30:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801af34:	e792      	b.n	801ae5c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 801af36:	f06f 000f 	mvn.w	r0, #15
}
 801af3a:	4770      	bx	lr
 801af3c:	2001eed0 	.word	0x2001eed0
 801af40:	2001eeb8 	.word	0x2001eeb8
 801af44:	2001eeb4 	.word	0x2001eeb4
 801af48:	2001eec0 	.word	0x2001eec0
 801af4c:	2001ee84 	.word	0x2001ee84
 801af50:	2001ee74 	.word	0x2001ee74
 801af54:	2001ee70 	.word	0x2001ee70
 801af58:	0801a95d 	.word	0x0801a95d
 801af5c:	0804731c 	.word	0x0804731c

0801af60 <dns_gethostbyname>:
{
 801af60:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801af62:	2400      	movs	r4, #0
{
 801af64:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801af66:	9400      	str	r4, [sp, #0]
 801af68:	f7ff feb4 	bl	801acd4 <dns_gethostbyname_addrtype>
}
 801af6c:	b002      	add	sp, #8
 801af6e:	bd10      	pop	{r4, pc}

0801af70 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 801af70:	2300      	movs	r3, #0
{
 801af72:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801af74:	4299      	cmp	r1, r3
{
 801af76:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 801af78:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801af7c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 801af80:	dd05      	ble.n	801af8e <lwip_standard_chksum+0x1e>
 801af82:	b124      	cbz	r4, 801af8e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801af84:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 801af88:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801af8a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801af8e:	2901      	cmp	r1, #1
 801af90:	dd28      	ble.n	801afe4 <lwip_standard_chksum+0x74>
 801af92:	3902      	subs	r1, #2
  u32_t sum = 0;
 801af94:	2300      	movs	r3, #0
 801af96:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801af9a:	f10e 0c01 	add.w	ip, lr, #1
 801af9e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 801afa2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801afa6:	4584      	cmp	ip, r0
    sum += *ps++;
 801afa8:	4413      	add	r3, r2
  while (len > 1) {
 801afaa:	d1fa      	bne.n	801afa2 <lwip_standard_chksum+0x32>
    len -= 2;
 801afac:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 801afb0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801afb4:	2901      	cmp	r1, #1
 801afb6:	d103      	bne.n	801afc0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801afb8:	f89c 2000 	ldrb.w	r2, [ip]
 801afbc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 801afc0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801afc4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801afc6:	b298      	uxth	r0, r3
 801afc8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801afcc:	b298      	uxth	r0, r3
 801afce:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 801afd2:	b124      	cbz	r4, 801afde <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 801afd4:	0203      	lsls	r3, r0, #8
 801afd6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801afda:	b29b      	uxth	r3, r3
 801afdc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 801afde:	b280      	uxth	r0, r0
 801afe0:	b002      	add	sp, #8
 801afe2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 801afe4:	4684      	mov	ip, r0
  u32_t sum = 0;
 801afe6:	2300      	movs	r3, #0
 801afe8:	e7e4      	b.n	801afb4 <lwip_standard_chksum+0x44>
 801afea:	bf00      	nop

0801afec <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff0:	4688      	mov	r8, r1
 801aff2:	4617      	mov	r7, r2
 801aff4:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 801aff6:	b1f8      	cbz	r0, 801b038 <inet_cksum_pseudo_base+0x4c>
 801aff8:	4605      	mov	r5, r0
  int swapped = 0;
 801affa:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801affc:	8969      	ldrh	r1, [r5, #10]
 801affe:	6868      	ldr	r0, [r5, #4]
 801b000:	f7ff ffb6 	bl	801af70 <lwip_standard_chksum>
 801b004:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801b006:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 801b008:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801b00a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801b00e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801b012:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801b016:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801b01a:	d004      	beq.n	801b026 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	f086 0601 	eor.w	r6, r6, #1
 801b022:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801b026:	682d      	ldr	r5, [r5, #0]
 801b028:	2d00      	cmp	r5, #0
 801b02a:	d1e7      	bne.n	801affc <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801b02c:	b126      	cbz	r6, 801b038 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b02e:	0222      	lsls	r2, r4, #8
 801b030:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b034:	b292      	uxth	r2, r2
 801b036:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801b038:	4640      	mov	r0, r8
 801b03a:	f7ff fa7d 	bl	801a538 <lwip_htons>
 801b03e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 801b040:	4638      	mov	r0, r7
 801b042:	f7ff fa79 	bl	801a538 <lwip_htons>
 801b046:	4428      	add	r0, r5
 801b048:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801b04a:	b2a0      	uxth	r0, r4
 801b04c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 801b050:	b2a0      	uxth	r0, r4
 801b052:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 801b056:	43c0      	mvns	r0, r0
}
 801b058:	b280      	uxth	r0, r0
 801b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b05e:	bf00      	nop

0801b060 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 801b060:	b430      	push	{r4, r5}
 801b062:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 801b064:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 801b066:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 801b068:	0c23      	lsrs	r3, r4, #16
 801b06a:	fa13 f384 	uxtah	r3, r3, r4
 801b06e:	fa13 f385 	uxtah	r3, r3, r5
 801b072:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 801b076:	b29c      	uxth	r4, r3
 801b078:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801b07c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b07e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 801b082:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b084:	f7ff bfb2 	b.w	801afec <inet_cksum_pseudo_base>

0801b088 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801b088:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801b08a:	f7ff ff71 	bl	801af70 <lwip_standard_chksum>
 801b08e:	43c0      	mvns	r0, r0
}
 801b090:	b280      	uxth	r0, r0
 801b092:	bd08      	pop	{r3, pc}

0801b094 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 801b094:	b338      	cbz	r0, 801b0e6 <inet_chksum_pbuf+0x52>
{
 801b096:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 801b098:	2600      	movs	r6, #0
 801b09a:	4605      	mov	r5, r0
  acc = 0;
 801b09c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801b09e:	8969      	ldrh	r1, [r5, #10]
 801b0a0:	6868      	ldr	r0, [r5, #4]
 801b0a2:	f7ff ff65 	bl	801af70 <lwip_standard_chksum>
 801b0a6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801b0a8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801b0aa:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 801b0ac:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801b0b0:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801b0b4:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801b0b8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801b0bc:	d004      	beq.n	801b0c8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	f086 0601 	eor.w	r6, r6, #1
 801b0c4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801b0c8:	682d      	ldr	r5, [r5, #0]
 801b0ca:	2d00      	cmp	r5, #0
 801b0cc:	d1e7      	bne.n	801b09e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 801b0ce:	b13e      	cbz	r6, 801b0e0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b0d0:	0220      	lsls	r0, r4, #8
 801b0d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b0d6:	b280      	uxth	r0, r0
 801b0d8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 801b0da:	43c0      	mvns	r0, r0
 801b0dc:	b280      	uxth	r0, r0
}
 801b0de:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 801b0e0:	43e0      	mvns	r0, r4
 801b0e2:	b280      	uxth	r0, r0
}
 801b0e4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 801b0e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b0ea:	4770      	bx	lr

0801b0ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801b0ec:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801b0ee:	f009 fe37 	bl	8024d60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801b0f2:	f000 f975 	bl	801b3e0 <mem_init>
  memp_init();
 801b0f6:	f000 fcf9 	bl	801baec <memp_init>
  pbuf_init();
  netif_init();
 801b0fa:	f000 fdbd 	bl	801bc78 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801b0fe:	f005 fffd 	bl	80210fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801b102:	f001 fd89 	bl	801cc18 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801b106:	f7ff fdbf 	bl	801ac88 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801b10a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801b10e:	f005 bf4d 	b.w	8020fac <sys_timeouts_init>
 801b112:	bf00      	nop

0801b114 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b114:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 801b118:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801b11a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b11e:	4299      	cmp	r1, r3
 801b120:	d81b      	bhi.n	801b15a <mem_link_valid+0x46>
 801b122:	459c      	cmp	ip, r3
 801b124:	bf94      	ite	ls
 801b126:	2200      	movls	r2, #0
 801b128:	2201      	movhi	r2, #1
 801b12a:	b9b2      	cbnz	r2, 801b15a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801b12c:	4b0f      	ldr	r3, [pc, #60]	; (801b16c <mem_link_valid+0x58>)
{
 801b12e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 801b130:	681c      	ldr	r4, [r3, #0]
 801b132:	1b03      	subs	r3, r0, r4
 801b134:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b136:	4299      	cmp	r1, r3
 801b138:	d002      	beq.n	801b140 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b13a:	5a61      	ldrh	r1, [r4, r1]
 801b13c:	4299      	cmp	r1, r3
 801b13e:	d10e      	bne.n	801b15e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b140:	4a0b      	ldr	r2, [pc, #44]	; (801b170 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 801b142:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b144:	6812      	ldr	r2, [r2, #0]
 801b146:	42a2      	cmp	r2, r4
 801b148:	d00d      	beq.n	801b166 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b14a:	8860      	ldrh	r0, [r4, #2]
 801b14c:	1ac0      	subs	r0, r0, r3
 801b14e:	fab0 f080 	clz	r0, r0
 801b152:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 801b154:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b158:	4770      	bx	lr
    return 0;
 801b15a:	2000      	movs	r0, #0
}
 801b15c:	4770      	bx	lr
    return 0;
 801b15e:	4610      	mov	r0, r2
}
 801b160:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b164:	4770      	bx	lr
  return 1;
 801b166:	2001      	movs	r0, #1
 801b168:	e7f4      	b.n	801b154 <mem_link_valid+0x40>
 801b16a:	bf00      	nop
 801b16c:	2001f324 	.word	0x2001f324
 801b170:	2001f328 	.word	0x2001f328

0801b174 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 801b174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801b178:	4f5f      	ldr	r7, [pc, #380]	; (801b2f8 <mem_sanity+0x184>)
 801b17a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801b17c:	7935      	ldrb	r5, [r6, #4]
 801b17e:	2d01      	cmp	r5, #1
 801b180:	d907      	bls.n	801b192 <mem_sanity+0x1e>
 801b182:	4b5e      	ldr	r3, [pc, #376]	; (801b2fc <mem_sanity+0x188>)
 801b184:	f240 223f 	movw	r2, #575	; 0x23f
 801b188:	495d      	ldr	r1, [pc, #372]	; (801b300 <mem_sanity+0x18c>)
 801b18a:	485e      	ldr	r0, [pc, #376]	; (801b304 <mem_sanity+0x190>)
 801b18c:	f00b fada 	bl	8026744 <iprintf>
  last_used = mem->used;
 801b190:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b192:	8873      	ldrh	r3, [r6, #2]
 801b194:	2b00      	cmp	r3, #0
 801b196:	f040 80a7 	bne.w	801b2e8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b19a:	8834      	ldrh	r4, [r6, #0]
 801b19c:	f242 7310 	movw	r3, #10000	; 0x2710
 801b1a0:	429c      	cmp	r4, r3
 801b1a2:	f200 8098 	bhi.w	801b2d6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801b1aa:	429c      	cmp	r4, r3
 801b1ac:	d961      	bls.n	801b272 <mem_sanity+0xfe>
 801b1ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801b320 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b1b2:	f8df a148 	ldr.w	sl, [pc, #328]	; 801b2fc <mem_sanity+0x188>
 801b1b6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801b324 <mem_sanity+0x1b0>
 801b1ba:	4e52      	ldr	r6, [pc, #328]	; (801b304 <mem_sanity+0x190>)
 801b1bc:	e012      	b.n	801b1e4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b1be:	2b01      	cmp	r3, #1
 801b1c0:	d006      	beq.n	801b1d0 <mem_sanity+0x5c>
 801b1c2:	4653      	mov	r3, sl
 801b1c4:	f240 2251 	movw	r2, #593	; 0x251
 801b1c8:	494f      	ldr	r1, [pc, #316]	; (801b308 <mem_sanity+0x194>)
 801b1ca:	4630      	mov	r0, r6
 801b1cc:	f00b faba 	bl	8026744 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	f7ff ff9f 	bl	801b114 <mem_link_valid>
 801b1d6:	b380      	cbz	r0, 801b23a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801b1dc:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 801b1de:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 801b1e0:	42a3      	cmp	r3, r4
 801b1e2:	d246      	bcs.n	801b272 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 801b1e4:	f8d8 2000 	ldr.w	r2, [r8]
 801b1e8:	42a2      	cmp	r2, r4
 801b1ea:	d942      	bls.n	801b272 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b1ec:	1ce2      	adds	r2, r4, #3
 801b1ee:	f022 0203 	bic.w	r2, r2, #3
 801b1f2:	4294      	cmp	r4, r2
 801b1f4:	d006      	beq.n	801b204 <mem_sanity+0x90>
 801b1f6:	4653      	mov	r3, sl
 801b1f8:	f240 2249 	movw	r2, #585	; 0x249
 801b1fc:	4649      	mov	r1, r9
 801b1fe:	4630      	mov	r0, r6
 801b200:	f00b faa0 	bl	8026744 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b204:	8862      	ldrh	r2, [r4, #2]
 801b206:	f242 7310 	movw	r3, #10000	; 0x2710
 801b20a:	429a      	cmp	r2, r3
 801b20c:	d81d      	bhi.n	801b24a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b20e:	8822      	ldrh	r2, [r4, #0]
 801b210:	f242 7310 	movw	r3, #10000	; 0x2710
 801b214:	429a      	cmp	r2, r3
 801b216:	d824      	bhi.n	801b262 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b218:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801b21a:	2d00      	cmp	r5, #0
 801b21c:	d0cf      	beq.n	801b1be <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801b21e:	2b01      	cmp	r3, #1
 801b220:	d9d6      	bls.n	801b1d0 <mem_sanity+0x5c>
 801b222:	4653      	mov	r3, sl
 801b224:	f240 2253 	movw	r2, #595	; 0x253
 801b228:	4938      	ldr	r1, [pc, #224]	; (801b30c <mem_sanity+0x198>)
 801b22a:	4630      	mov	r0, r6
 801b22c:	f00b fa8a 	bl	8026744 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b230:	4620      	mov	r0, r4
 801b232:	f7ff ff6f 	bl	801b114 <mem_link_valid>
 801b236:	2800      	cmp	r0, #0
 801b238:	d1ce      	bne.n	801b1d8 <mem_sanity+0x64>
 801b23a:	4653      	mov	r3, sl
 801b23c:	f240 2256 	movw	r2, #598	; 0x256
 801b240:	4933      	ldr	r1, [pc, #204]	; (801b310 <mem_sanity+0x19c>)
 801b242:	4630      	mov	r0, r6
 801b244:	f00b fa7e 	bl	8026744 <iprintf>
 801b248:	e7c6      	b.n	801b1d8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b24a:	4653      	mov	r3, sl
 801b24c:	f240 224a 	movw	r2, #586	; 0x24a
 801b250:	4930      	ldr	r1, [pc, #192]	; (801b314 <mem_sanity+0x1a0>)
 801b252:	4630      	mov	r0, r6
 801b254:	f00b fa76 	bl	8026744 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b258:	8822      	ldrh	r2, [r4, #0]
 801b25a:	f242 7310 	movw	r3, #10000	; 0x2710
 801b25e:	429a      	cmp	r2, r3
 801b260:	d9da      	bls.n	801b218 <mem_sanity+0xa4>
 801b262:	4653      	mov	r3, sl
 801b264:	f240 224b 	movw	r2, #587	; 0x24b
 801b268:	492b      	ldr	r1, [pc, #172]	; (801b318 <mem_sanity+0x1a4>)
 801b26a:	4630      	mov	r0, r6
 801b26c:	f00b fa6a 	bl	8026744 <iprintf>
 801b270:	e7d2      	b.n	801b218 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 801b272:	f242 7210 	movw	r2, #10000	; 0x2710
 801b276:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801b278:	4294      	cmp	r4, r2
 801b27a:	d006      	beq.n	801b28a <mem_sanity+0x116>
 801b27c:	4b1f      	ldr	r3, [pc, #124]	; (801b2fc <mem_sanity+0x188>)
 801b27e:	f240 225b 	movw	r2, #603	; 0x25b
 801b282:	4926      	ldr	r1, [pc, #152]	; (801b31c <mem_sanity+0x1a8>)
 801b284:	481f      	ldr	r0, [pc, #124]	; (801b304 <mem_sanity+0x190>)
 801b286:	f00b fa5d 	bl	8026744 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801b28a:	7923      	ldrb	r3, [r4, #4]
 801b28c:	2b01      	cmp	r3, #1
 801b28e:	d006      	beq.n	801b29e <mem_sanity+0x12a>
 801b290:	4b1a      	ldr	r3, [pc, #104]	; (801b2fc <mem_sanity+0x188>)
 801b292:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801b296:	491a      	ldr	r1, [pc, #104]	; (801b300 <mem_sanity+0x18c>)
 801b298:	481a      	ldr	r0, [pc, #104]	; (801b304 <mem_sanity+0x190>)
 801b29a:	f00b fa53 	bl	8026744 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 801b29e:	8862      	ldrh	r2, [r4, #2]
 801b2a0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2a4:	429a      	cmp	r2, r3
 801b2a6:	d006      	beq.n	801b2b6 <mem_sanity+0x142>
 801b2a8:	4b14      	ldr	r3, [pc, #80]	; (801b2fc <mem_sanity+0x188>)
 801b2aa:	f240 225d 	movw	r2, #605	; 0x25d
 801b2ae:	4919      	ldr	r1, [pc, #100]	; (801b314 <mem_sanity+0x1a0>)
 801b2b0:	4814      	ldr	r0, [pc, #80]	; (801b304 <mem_sanity+0x190>)
 801b2b2:	f00b fa47 	bl	8026744 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2b6:	8822      	ldrh	r2, [r4, #0]
 801b2b8:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	d101      	bne.n	801b2c4 <mem_sanity+0x150>
}
 801b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2c4:	4b0d      	ldr	r3, [pc, #52]	; (801b2fc <mem_sanity+0x188>)
 801b2c6:	f240 225e 	movw	r2, #606	; 0x25e
 801b2ca:	4913      	ldr	r1, [pc, #76]	; (801b318 <mem_sanity+0x1a4>)
 801b2cc:	480d      	ldr	r0, [pc, #52]	; (801b304 <mem_sanity+0x190>)
}
 801b2ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2d2:	f00b ba37 	b.w	8026744 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b2d6:	4b09      	ldr	r3, [pc, #36]	; (801b2fc <mem_sanity+0x188>)
 801b2d8:	f240 2242 	movw	r2, #578	; 0x242
 801b2dc:	490e      	ldr	r1, [pc, #56]	; (801b318 <mem_sanity+0x1a4>)
 801b2de:	4809      	ldr	r0, [pc, #36]	; (801b304 <mem_sanity+0x190>)
 801b2e0:	f00b fa30 	bl	8026744 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 801b2e4:	8834      	ldrh	r4, [r6, #0]
 801b2e6:	e75e      	b.n	801b1a6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b2e8:	4b04      	ldr	r3, [pc, #16]	; (801b2fc <mem_sanity+0x188>)
 801b2ea:	f240 2241 	movw	r2, #577	; 0x241
 801b2ee:	4909      	ldr	r1, [pc, #36]	; (801b314 <mem_sanity+0x1a0>)
 801b2f0:	4804      	ldr	r0, [pc, #16]	; (801b304 <mem_sanity+0x190>)
 801b2f2:	f00b fa27 	bl	8026744 <iprintf>
 801b2f6:	e750      	b.n	801b19a <mem_sanity+0x26>
 801b2f8:	2001f324 	.word	0x2001f324
 801b2fc:	08044bc8 	.word	0x08044bc8
 801b300:	08044bf8 	.word	0x08044bf8
 801b304:	0802b43c 	.word	0x0802b43c
 801b308:	08044c60 	.word	0x08044c60
 801b30c:	08044c78 	.word	0x08044c78
 801b310:	08044c94 	.word	0x08044c94
 801b314:	08044c10 	.word	0x08044c10
 801b318:	08044c2c 	.word	0x08044c2c
 801b31c:	08044cac 	.word	0x08044cac
 801b320:	2001f328 	.word	0x2001f328
 801b324:	08044c48 	.word	0x08044c48

0801b328 <mem_overflow_check_raw>:
{
 801b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b32c:	1e4c      	subs	r4, r1, #1
 801b32e:	310f      	adds	r1, #15
 801b330:	b0a3      	sub	sp, #140	; 0x8c
 801b332:	4606      	mov	r6, r0
 801b334:	4615      	mov	r5, r2
 801b336:	4698      	mov	r8, r3
 801b338:	4404      	add	r4, r0
 801b33a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b33c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801b3b4 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 801b340:	f8df b074 	ldr.w	fp, [pc, #116]	; 801b3b8 <mem_overflow_check_raw+0x90>
 801b344:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b3bc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b348:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b34c:	464a      	mov	r2, r9
 801b34e:	2180      	movs	r1, #128	; 0x80
 801b350:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b352:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b354:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b356:	d009      	beq.n	801b36c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b358:	f8cd 8000 	str.w	r8, [sp]
 801b35c:	f00b fba8 	bl	8026ab0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b360:	465b      	mov	r3, fp
 801b362:	226d      	movs	r2, #109	; 0x6d
 801b364:	a902      	add	r1, sp, #8
 801b366:	4650      	mov	r0, sl
 801b368:	f00b f9ec 	bl	8026744 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 801b36c:	42bc      	cmp	r4, r7
 801b36e:	d1eb      	bne.n	801b348 <mem_overflow_check_raw+0x20>
 801b370:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b374:	4f0e      	ldr	r7, [pc, #56]	; (801b3b0 <mem_overflow_check_raw+0x88>)
 801b376:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801b378:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b3b8 <mem_overflow_check_raw+0x90>
 801b37c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801b3bc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b380:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b384:	463a      	mov	r2, r7
 801b386:	2180      	movs	r1, #128	; 0x80
 801b388:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b38a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b38c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b38e:	d009      	beq.n	801b3a4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b390:	f8cd 8000 	str.w	r8, [sp]
 801b394:	f00b fb8c 	bl	8026ab0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b398:	4653      	mov	r3, sl
 801b39a:	2278      	movs	r2, #120	; 0x78
 801b39c:	a902      	add	r1, sp, #8
 801b39e:	4648      	mov	r0, r9
 801b3a0:	f00b f9d0 	bl	8026744 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801b3a4:	42b4      	cmp	r4, r6
 801b3a6:	d1eb      	bne.n	801b380 <mem_overflow_check_raw+0x58>
}
 801b3a8:	b023      	add	sp, #140	; 0x8c
 801b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3ae:	bf00      	nop
 801b3b0:	08044ce0 	.word	0x08044ce0
 801b3b4:	08044cc0 	.word	0x08044cc0
 801b3b8:	08044bc8 	.word	0x08044bc8
 801b3bc:	0802b43c 	.word	0x0802b43c

0801b3c0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b3c0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b3c4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b3c6:	f840 3c10 	str.w	r3, [r0, #-16]
 801b3ca:	f840 3c0c 	str.w	r3, [r0, #-12]
 801b3ce:	f840 3c08 	str.w	r3, [r0, #-8]
 801b3d2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b3d6:	5043      	str	r3, [r0, r1]
 801b3d8:	6053      	str	r3, [r2, #4]
 801b3da:	6093      	str	r3, [r2, #8]
 801b3dc:	60d3      	str	r3, [r2, #12]
}
 801b3de:	4770      	bx	lr

0801b3e0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b3e0:	4b14      	ldr	r3, [pc, #80]	; (801b434 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801b3e2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801b3e6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b3e8:	4913      	ldr	r1, [pc, #76]	; (801b438 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b3ea:	f023 0303 	bic.w	r3, r3, #3
{
 801b3ee:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801b3f0:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b3f2:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b3f4:	4c11      	ldr	r4, [pc, #68]	; (801b43c <mem_init+0x5c>)
  mem->used = 0;
 801b3f6:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b3f8:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b3fa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801b3fe:	4910      	ldr	r1, [pc, #64]	; (801b440 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b400:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801b402:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801b404:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801b408:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801b40c:	f7ff feb2 	bl	801b174 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801b410:	6822      	ldr	r2, [r4, #0]
 801b412:	4b0c      	ldr	r3, [pc, #48]	; (801b444 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b414:	480c      	ldr	r0, [pc, #48]	; (801b448 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801b416:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b418:	f009 fcae 	bl	8024d78 <sys_mutex_new>
 801b41c:	b900      	cbnz	r0, 801b420 <mem_init+0x40>
}
 801b41e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b420:	4b0a      	ldr	r3, [pc, #40]	; (801b44c <mem_init+0x6c>)
 801b422:	f240 221f 	movw	r2, #543	; 0x21f
 801b426:	490a      	ldr	r1, [pc, #40]	; (801b450 <mem_init+0x70>)
 801b428:	480a      	ldr	r0, [pc, #40]	; (801b454 <mem_init+0x74>)
}
 801b42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b42e:	f00b b989 	b.w	8026744 <iprintf>
 801b432:	bf00      	nop
 801b434:	2001f32f 	.word	0x2001f32f
 801b438:	2001f328 	.word	0x2001f328
 801b43c:	2001f324 	.word	0x2001f324
 801b440:	27102710 	.word	0x27102710
 801b444:	2001f318 	.word	0x2001f318
 801b448:	2001f320 	.word	0x2001f320
 801b44c:	08044bc8 	.word	0x08044bc8
 801b450:	08044d00 	.word	0x08044d00
 801b454:	0802b43c 	.word	0x0802b43c

0801b458 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b458:	2800      	cmp	r0, #0
 801b45a:	d07f      	beq.n	801b55c <mem_free+0x104>
{
 801b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b460:	f010 0803 	ands.w	r8, r0, #3
 801b464:	4604      	mov	r4, r0
 801b466:	d170      	bne.n	801b54a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b468:	4e5c      	ldr	r6, [pc, #368]	; (801b5dc <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b46a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b46e:	6833      	ldr	r3, [r6, #0]
 801b470:	42ab      	cmp	r3, r5
 801b472:	d805      	bhi.n	801b480 <mem_free+0x28>
 801b474:	4f5a      	ldr	r7, [pc, #360]	; (801b5e0 <mem_free+0x188>)
 801b476:	f100 030c 	add.w	r3, r0, #12
 801b47a:	683a      	ldr	r2, [r7, #0]
 801b47c:	429a      	cmp	r2, r3
 801b47e:	d208      	bcs.n	801b492 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b480:	4b58      	ldr	r3, [pc, #352]	; (801b5e4 <mem_free+0x18c>)
 801b482:	f240 227f 	movw	r2, #639	; 0x27f
 801b486:	4958      	ldr	r1, [pc, #352]	; (801b5e8 <mem_free+0x190>)
 801b488:	4858      	ldr	r0, [pc, #352]	; (801b5ec <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b48e:	f00b b959 	b.w	8026744 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b492:	4b57      	ldr	r3, [pc, #348]	; (801b5f0 <mem_free+0x198>)
 801b494:	4a57      	ldr	r2, [pc, #348]	; (801b5f4 <mem_free+0x19c>)
 801b496:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801b49a:	f7ff ff45 	bl	801b328 <mem_overflow_check_raw>
  if (!mem->used) {
 801b49e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	f000 8082 	beq.w	801b5ac <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	f7ff fe33 	bl	801b114 <mem_link_valid>
 801b4ae:	2800      	cmp	r0, #0
 801b4b0:	f000 8085 	beq.w	801b5be <mem_free+0x166>
  mem->used = 0;
 801b4b4:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801b4b8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801b618 <mem_free+0x1c0>
 801b4bc:	f8d8 3000 	ldr.w	r3, [r8]
 801b4c0:	42ab      	cmp	r3, r5
 801b4c2:	d901      	bls.n	801b4c8 <mem_free+0x70>
    lfree = mem;
 801b4c4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b4c8:	6833      	ldr	r3, [r6, #0]
 801b4ca:	429d      	cmp	r5, r3
 801b4cc:	d351      	bcc.n	801b572 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b4ce:	683b      	ldr	r3, [r7, #0]
 801b4d0:	429d      	cmp	r5, r3
 801b4d2:	d258      	bcs.n	801b586 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b4d4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b4d8:	f242 7210 	movw	r2, #10000	; 0x2710
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d83e      	bhi.n	801b55e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801b4e0:	6832      	ldr	r2, [r6, #0]
 801b4e2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b4e4:	429d      	cmp	r5, r3
 801b4e6:	d013      	beq.n	801b510 <mem_free+0xb8>
 801b4e8:	7919      	ldrb	r1, [r3, #4]
 801b4ea:	b989      	cbnz	r1, 801b510 <mem_free+0xb8>
 801b4ec:	6839      	ldr	r1, [r7, #0]
 801b4ee:	428b      	cmp	r3, r1
 801b4f0:	d00e      	beq.n	801b510 <mem_free+0xb8>
    if (lfree == nmem) {
 801b4f2:	f8d8 1000 	ldr.w	r1, [r8]
 801b4f6:	428b      	cmp	r3, r1
 801b4f8:	d06d      	beq.n	801b5d6 <mem_free+0x17e>
    mem->next = nmem->next;
 801b4fa:	8819      	ldrh	r1, [r3, #0]
 801b4fc:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b500:	f242 7110 	movw	r1, #10000	; 0x2710
 801b504:	881b      	ldrh	r3, [r3, #0]
 801b506:	428b      	cmp	r3, r1
 801b508:	d002      	beq.n	801b510 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b50a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801b50c:	1aa9      	subs	r1, r5, r2
 801b50e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801b510:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801b514:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801b516:	429d      	cmp	r5, r3
 801b518:	d010      	beq.n	801b53c <mem_free+0xe4>
 801b51a:	7918      	ldrb	r0, [r3, #4]
 801b51c:	b970      	cbnz	r0, 801b53c <mem_free+0xe4>
    if (lfree == mem) {
 801b51e:	f8d8 0000 	ldr.w	r0, [r8]
 801b522:	4285      	cmp	r5, r0
 801b524:	d054      	beq.n	801b5d0 <mem_free+0x178>
    pmem->next = mem->next;
 801b526:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b52a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801b52e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b530:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b534:	4283      	cmp	r3, r0
 801b536:	d001      	beq.n	801b53c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b538:	441a      	add	r2, r3
 801b53a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801b53c:	f7ff fe1a 	bl	801b174 <mem_sanity>
  mem_free_count = 1;
 801b540:	4b2d      	ldr	r3, [pc, #180]	; (801b5f8 <mem_free+0x1a0>)
 801b542:	2201      	movs	r2, #1
 801b544:	701a      	strb	r2, [r3, #0]
}
 801b546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b54a:	4b26      	ldr	r3, [pc, #152]	; (801b5e4 <mem_free+0x18c>)
 801b54c:	f240 2273 	movw	r2, #627	; 0x273
 801b550:	492a      	ldr	r1, [pc, #168]	; (801b5fc <mem_free+0x1a4>)
 801b552:	4826      	ldr	r0, [pc, #152]	; (801b5ec <mem_free+0x194>)
}
 801b554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b558:	f00b b8f4 	b.w	8026744 <iprintf>
 801b55c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b55e:	4b21      	ldr	r3, [pc, #132]	; (801b5e4 <mem_free+0x18c>)
 801b560:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801b564:	4926      	ldr	r1, [pc, #152]	; (801b600 <mem_free+0x1a8>)
 801b566:	4821      	ldr	r0, [pc, #132]	; (801b5ec <mem_free+0x194>)
 801b568:	f00b f8ec 	bl	8026744 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801b56c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b570:	e7b6      	b.n	801b4e0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b572:	4b1c      	ldr	r3, [pc, #112]	; (801b5e4 <mem_free+0x18c>)
 801b574:	f240 12df 	movw	r2, #479	; 0x1df
 801b578:	4922      	ldr	r1, [pc, #136]	; (801b604 <mem_free+0x1ac>)
 801b57a:	481c      	ldr	r0, [pc, #112]	; (801b5ec <mem_free+0x194>)
 801b57c:	f00b f8e2 	bl	8026744 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	429d      	cmp	r5, r3
 801b584:	d306      	bcc.n	801b594 <mem_free+0x13c>
 801b586:	4b17      	ldr	r3, [pc, #92]	; (801b5e4 <mem_free+0x18c>)
 801b588:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b58c:	491e      	ldr	r1, [pc, #120]	; (801b608 <mem_free+0x1b0>)
 801b58e:	4817      	ldr	r0, [pc, #92]	; (801b5ec <mem_free+0x194>)
 801b590:	f00b f8d8 	bl	8026744 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b594:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d09b      	beq.n	801b4d4 <mem_free+0x7c>
 801b59c:	4b11      	ldr	r3, [pc, #68]	; (801b5e4 <mem_free+0x18c>)
 801b59e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b5a2:	491a      	ldr	r1, [pc, #104]	; (801b60c <mem_free+0x1b4>)
 801b5a4:	4811      	ldr	r0, [pc, #68]	; (801b5ec <mem_free+0x194>)
 801b5a6:	f00b f8cd 	bl	8026744 <iprintf>
 801b5aa:	e793      	b.n	801b4d4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b5ac:	4b0d      	ldr	r3, [pc, #52]	; (801b5e4 <mem_free+0x18c>)
 801b5ae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b5b2:	4917      	ldr	r1, [pc, #92]	; (801b610 <mem_free+0x1b8>)
 801b5b4:	480d      	ldr	r0, [pc, #52]	; (801b5ec <mem_free+0x194>)
}
 801b5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b5ba:	f00b b8c3 	b.w	8026744 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b5be:	4b09      	ldr	r3, [pc, #36]	; (801b5e4 <mem_free+0x18c>)
 801b5c0:	f240 2295 	movw	r2, #661	; 0x295
 801b5c4:	4913      	ldr	r1, [pc, #76]	; (801b614 <mem_free+0x1bc>)
 801b5c6:	4809      	ldr	r0, [pc, #36]	; (801b5ec <mem_free+0x194>)
}
 801b5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b5cc:	f00b b8ba 	b.w	8026744 <iprintf>
      lfree = pmem;
 801b5d0:	f8c8 3000 	str.w	r3, [r8]
 801b5d4:	e7a7      	b.n	801b526 <mem_free+0xce>
      lfree = mem;
 801b5d6:	f8c8 5000 	str.w	r5, [r8]
 801b5da:	e78e      	b.n	801b4fa <mem_free+0xa2>
 801b5dc:	2001f324 	.word	0x2001f324
 801b5e0:	2001f328 	.word	0x2001f328
 801b5e4:	08044bc8 	.word	0x08044bc8
 801b5e8:	08044d40 	.word	0x08044d40
 801b5ec:	0802b43c 	.word	0x0802b43c
 801b5f0:	0802b6a0 	.word	0x0802b6a0
 801b5f4:	08044d5c 	.word	0x08044d5c
 801b5f8:	2001f31c 	.word	0x2001f31c
 801b5fc:	08044d1c 	.word	0x08044d1c
 801b600:	08044e10 	.word	0x08044e10
 801b604:	08044dc0 	.word	0x08044dc0
 801b608:	08044dd8 	.word	0x08044dd8
 801b60c:	08044df4 	.word	0x08044df4
 801b610:	08044d64 	.word	0x08044d64
 801b614:	08044d8c 	.word	0x08044d8c
 801b618:	2001f318 	.word	0x2001f318

0801b61c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b620:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b622:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b626:	f024 0403 	bic.w	r4, r4, #3
 801b62a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801b62c:	2c0c      	cmp	r4, #12
 801b62e:	bf38      	it	cc
 801b630:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b632:	3420      	adds	r4, #32
 801b634:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b636:	429c      	cmp	r4, r3
 801b638:	d87a      	bhi.n	801b730 <mem_trim+0x114>
 801b63a:	42a1      	cmp	r1, r4
 801b63c:	460e      	mov	r6, r1
 801b63e:	d877      	bhi.n	801b730 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b640:	4f58      	ldr	r7, [pc, #352]	; (801b7a4 <mem_trim+0x188>)
 801b642:	4605      	mov	r5, r0
 801b644:	683b      	ldr	r3, [r7, #0]
 801b646:	4283      	cmp	r3, r0
 801b648:	d803      	bhi.n	801b652 <mem_trim+0x36>
 801b64a:	4b57      	ldr	r3, [pc, #348]	; (801b7a8 <mem_trim+0x18c>)
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	4283      	cmp	r3, r0
 801b650:	d810      	bhi.n	801b674 <mem_trim+0x58>
 801b652:	4b56      	ldr	r3, [pc, #344]	; (801b7ac <mem_trim+0x190>)
 801b654:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b658:	4955      	ldr	r1, [pc, #340]	; (801b7b0 <mem_trim+0x194>)
 801b65a:	4856      	ldr	r0, [pc, #344]	; (801b7b4 <mem_trim+0x198>)
 801b65c:	f00b f872 	bl	8026744 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	42ab      	cmp	r3, r5
 801b664:	d902      	bls.n	801b66c <mem_trim+0x50>
{
 801b666:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801b668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b66c:	4b4e      	ldr	r3, [pc, #312]	; (801b7a8 <mem_trim+0x18c>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	429d      	cmp	r5, r3
 801b672:	d2f8      	bcs.n	801b666 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b674:	4b50      	ldr	r3, [pc, #320]	; (801b7b8 <mem_trim+0x19c>)
 801b676:	4628      	mov	r0, r5
 801b678:	4a50      	ldr	r2, [pc, #320]	; (801b7bc <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b67a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b67e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801b682:	f7ff fe51 	bl	801b328 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801b686:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b688:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801b68c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b690:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801b694:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b698:	eba3 0308 	sub.w	r3, r3, r8
 801b69c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b69e:	429c      	cmp	r4, r3
 801b6a0:	d83d      	bhi.n	801b71e <mem_trim+0x102>
  if (newsize == size) {
 801b6a2:	d0e0      	beq.n	801b666 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801b6a4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801b6a8:	f899 0004 	ldrb.w	r0, [r9, #4]
 801b6ac:	2800      	cmp	r0, #0
 801b6ae:	d142      	bne.n	801b736 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b6b0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b6b4:	4299      	cmp	r1, r3
 801b6b6:	d061      	beq.n	801b77c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6b8:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801b6bc:	4940      	ldr	r1, [pc, #256]	; (801b7c0 <mem_trim+0x1a4>)
    next = mem2->next;
 801b6be:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6c2:	441c      	add	r4, r3
    if (lfree == mem2) {
 801b6c4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6c6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801b6c8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801b6ca:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801b6ce:	d053      	beq.n	801b778 <mem_trim+0x15c>
    mem2->used = 0;
 801b6d0:	2100      	movs	r1, #0
    mem2->next = next;
 801b6d2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801b6d4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b6d8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6da:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b6de:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6e2:	881b      	ldrh	r3, [r3, #0]
 801b6e4:	428b      	cmp	r3, r1
 801b6e6:	d001      	beq.n	801b6ec <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b6e8:	4413      	add	r3, r2
 801b6ea:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b6ec:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b6f0:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801b6f2:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b6f6:	f845 3c10 	str.w	r3, [r5, #-16]
 801b6fa:	f845 3c0c 	str.w	r3, [r5, #-12]
 801b6fe:	f845 3c08 	str.w	r3, [r5, #-8]
 801b702:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b706:	51ab      	str	r3, [r5, r6]
 801b708:	6053      	str	r3, [r2, #4]
 801b70a:	6093      	str	r3, [r2, #8]
 801b70c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801b70e:	f7ff fd31 	bl	801b174 <mem_sanity>
  mem_free_count = 1;
 801b712:	4b2c      	ldr	r3, [pc, #176]	; (801b7c4 <mem_trim+0x1a8>)
 801b714:	2201      	movs	r2, #1
  return rmem;
 801b716:	4628      	mov	r0, r5
  mem_free_count = 1;
 801b718:	701a      	strb	r2, [r3, #0]
}
 801b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b71e:	4b23      	ldr	r3, [pc, #140]	; (801b7ac <mem_trim+0x190>)
 801b720:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b724:	4928      	ldr	r1, [pc, #160]	; (801b7c8 <mem_trim+0x1ac>)
 801b726:	4823      	ldr	r0, [pc, #140]	; (801b7b4 <mem_trim+0x198>)
 801b728:	f00b f80c 	bl	8026744 <iprintf>
    return NULL;
 801b72c:	2000      	movs	r0, #0
 801b72e:	e79b      	b.n	801b668 <mem_trim+0x4c>
    return NULL;
 801b730:	2000      	movs	r0, #0
}
 801b732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b736:	f104 0014 	add.w	r0, r4, #20
 801b73a:	4298      	cmp	r0, r3
 801b73c:	d8d6      	bhi.n	801b6ec <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b73e:	f108 0308 	add.w	r3, r8, #8
 801b742:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b744:	f242 7310 	movw	r3, #10000	; 0x2710
 801b748:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b74a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b74c:	d01f      	beq.n	801b78e <mem_trim+0x172>
    if (mem2 < lfree) {
 801b74e:	481c      	ldr	r0, [pc, #112]	; (801b7c0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801b750:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801b752:	6807      	ldr	r7, [r0, #0]
 801b754:	429f      	cmp	r7, r3
 801b756:	d900      	bls.n	801b75a <mem_trim+0x13e>
      lfree = mem2;
 801b758:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801b75a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801b75c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801b75e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b762:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b764:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b768:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b76c:	881b      	ldrh	r3, [r3, #0]
 801b76e:	428b      	cmp	r3, r1
 801b770:	d0bc      	beq.n	801b6ec <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b772:	441a      	add	r2, r3
 801b774:	8054      	strh	r4, [r2, #2]
 801b776:	e7b9      	b.n	801b6ec <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801b778:	600b      	str	r3, [r1, #0]
 801b77a:	e7a9      	b.n	801b6d0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b77c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b780:	4b0a      	ldr	r3, [pc, #40]	; (801b7ac <mem_trim+0x190>)
 801b782:	4912      	ldr	r1, [pc, #72]	; (801b7cc <mem_trim+0x1b0>)
 801b784:	480b      	ldr	r0, [pc, #44]	; (801b7b4 <mem_trim+0x198>)
 801b786:	f00a ffdd 	bl	8026744 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b78a:	683a      	ldr	r2, [r7, #0]
 801b78c:	e794      	b.n	801b6b8 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b78e:	f240 3216 	movw	r2, #790	; 0x316
 801b792:	490e      	ldr	r1, [pc, #56]	; (801b7cc <mem_trim+0x1b0>)
 801b794:	4b05      	ldr	r3, [pc, #20]	; (801b7ac <mem_trim+0x190>)
 801b796:	4807      	ldr	r0, [pc, #28]	; (801b7b4 <mem_trim+0x198>)
 801b798:	f00a ffd4 	bl	8026744 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b79c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801b79e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801b7a2:	e7d4      	b.n	801b74e <mem_trim+0x132>
 801b7a4:	2001f324 	.word	0x2001f324
 801b7a8:	2001f328 	.word	0x2001f328
 801b7ac:	08044bc8 	.word	0x08044bc8
 801b7b0:	08044e3c 	.word	0x08044e3c
 801b7b4:	0802b43c 	.word	0x0802b43c
 801b7b8:	0802b6a0 	.word	0x0802b6a0
 801b7bc:	08044d5c 	.word	0x08044d5c
 801b7c0:	2001f318 	.word	0x2001f318
 801b7c4:	2001f31c 	.word	0x2001f31c
 801b7c8:	08044e54 	.word	0x08044e54
 801b7cc:	08044e74 	.word	0x08044e74

0801b7d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b7d4:	4680      	mov	r8, r0
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	f000 80b2 	beq.w	801b940 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b7dc:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b7e0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b7e4:	f02b 0b03 	bic.w	fp, fp, #3
 801b7e8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801b7ec:	f1bb 0f0c 	cmp.w	fp, #12
 801b7f0:	bf38      	it	cc
 801b7f2:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b7f6:	f10b 0720 	add.w	r7, fp, #32
 801b7fa:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b7fc:	42a7      	cmp	r7, r4
 801b7fe:	f200 809f 	bhi.w	801b940 <mem_malloc+0x170>
 801b802:	42b8      	cmp	r0, r7
 801b804:	bf94      	ite	ls
 801b806:	f04f 0a00 	movls.w	sl, #0
 801b80a:	f04f 0a01 	movhi.w	sl, #1
 801b80e:	f1ba 0f00 	cmp.w	sl, #0
 801b812:	f040 8095 	bne.w	801b940 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b816:	4866      	ldr	r0, [pc, #408]	; (801b9b0 <mem_malloc+0x1e0>)
 801b818:	f009 fabe 	bl	8024d98 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801b81c:	4b65      	ldr	r3, [pc, #404]	; (801b9b4 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b81e:	eba4 0c07 	sub.w	ip, r4, r7
 801b822:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801b9dc <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801b826:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b828:	f06f 0e07 	mvn.w	lr, #7
 801b82c:	4d62      	ldr	r5, [pc, #392]	; (801b9b8 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b82e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801b832:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b834:	b2b3      	uxth	r3, r6
 801b836:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801b838:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b83a:	d97a      	bls.n	801b932 <mem_malloc+0x162>
      mem_free_count = 0;
 801b83c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b840:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801b844:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b846:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801b848:	2900      	cmp	r1, #0
 801b84a:	d1f0      	bne.n	801b82e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801b84c:	7923      	ldrb	r3, [r4, #4]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d16b      	bne.n	801b92a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b852:	8821      	ldrh	r1, [r4, #0]
 801b854:	440a      	add	r2, r1
 801b856:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801b858:	42ba      	cmp	r2, r7
 801b85a:	d3ec      	bcc.n	801b836 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b85c:	f107 0314 	add.w	r3, r7, #20
 801b860:	429a      	cmp	r2, r3
 801b862:	d371      	bcc.n	801b948 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b864:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b868:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b86c:	44b2      	add	sl, r6
 801b86e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b872:	459a      	cmp	sl, r3
 801b874:	f000 808f 	beq.w	801b996 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801b878:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801b87c:	2200      	movs	r2, #0
 801b87e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b880:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801b884:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801b888:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801b88a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801b88c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801b890:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b892:	f830 300a 	ldrh.w	r3, [r0, sl]
 801b896:	4293      	cmp	r3, r2
 801b898:	d002      	beq.n	801b8a0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b89a:	4418      	add	r0, r3
 801b89c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b8a0:	f8d9 3000 	ldr.w	r3, [r9]
 801b8a4:	42a3      	cmp	r3, r4
 801b8a6:	f040 8081 	bne.w	801b9ac <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801b8aa:	4b42      	ldr	r3, [pc, #264]	; (801b9b4 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801b8ac:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801b8ae:	4e43      	ldr	r6, [pc, #268]	; (801b9bc <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801b8b0:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801b8b4:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801b8b6:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801b8ba:	791a      	ldrb	r2, [r3, #4]
 801b8bc:	b942      	cbnz	r2, 801b8d0 <mem_malloc+0x100>
 801b8be:	e009      	b.n	801b8d4 <mem_malloc+0x104>
            mem_free_count = 0;
 801b8c0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801b8c2:	782a      	ldrb	r2, [r5, #0]
 801b8c4:	2a00      	cmp	r2, #0
 801b8c6:	d142      	bne.n	801b94e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801b8c8:	881b      	ldrh	r3, [r3, #0]
 801b8ca:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801b8cc:	791a      	ldrb	r2, [r3, #4]
 801b8ce:	b10a      	cbz	r2, 801b8d4 <mem_malloc+0x104>
 801b8d0:	4299      	cmp	r1, r3
 801b8d2:	d1f5      	bne.n	801b8c0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801b8d4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b8d8:	f8d9 3000 	ldr.w	r3, [r9]
 801b8dc:	4299      	cmp	r1, r3
 801b8de:	d004      	beq.n	801b8ea <mem_malloc+0x11a>
 801b8e0:	f8d9 3000 	ldr.w	r3, [r9]
 801b8e4:	791b      	ldrb	r3, [r3, #4]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d14d      	bne.n	801b986 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b8ea:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801b8ec:	4830      	ldr	r0, [pc, #192]	; (801b9b0 <mem_malloc+0x1e0>)
 801b8ee:	f009 fa59 	bl	8024da4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b8f2:	6833      	ldr	r3, [r6, #0]
 801b8f4:	4427      	add	r7, r4
 801b8f6:	42bb      	cmp	r3, r7
 801b8f8:	d33d      	bcc.n	801b976 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b8fa:	07a3      	lsls	r3, r4, #30
 801b8fc:	d12c      	bne.n	801b958 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b8fe:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b902:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801b906:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801b90a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b90e:	60a3      	str	r3, [r4, #8]
 801b910:	60e3      	str	r3, [r4, #12]
 801b912:	6123      	str	r3, [r4, #16]
 801b914:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b916:	f845 3008 	str.w	r3, [r5, r8]
 801b91a:	6053      	str	r3, [r2, #4]
 801b91c:	6093      	str	r3, [r2, #8]
 801b91e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801b920:	f7ff fc28 	bl	801b174 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801b924:	4628      	mov	r0, r5
 801b926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b92a:	8826      	ldrh	r6, [r4, #0]
 801b92c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b92e:	459c      	cmp	ip, r3
 801b930:	d884      	bhi.n	801b83c <mem_malloc+0x6c>
  return NULL;
 801b932:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801b934:	481e      	ldr	r0, [pc, #120]	; (801b9b0 <mem_malloc+0x1e0>)
 801b936:	f009 fa35 	bl	8024da4 <sys_mutex_unlock>
}
 801b93a:	4628      	mov	r0, r5
 801b93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801b940:	2500      	movs	r5, #0
}
 801b942:	4628      	mov	r0, r5
 801b944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801b948:	2301      	movs	r3, #1
 801b94a:	7123      	strb	r3, [r4, #4]
 801b94c:	e7a8      	b.n	801b8a0 <mem_malloc+0xd0>
        if (mem == lfree) {
 801b94e:	f8d9 3000 	ldr.w	r3, [r9]
 801b952:	42a3      	cmp	r3, r4
 801b954:	d0af      	beq.n	801b8b6 <mem_malloc+0xe6>
 801b956:	e7c8      	b.n	801b8ea <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b958:	4b19      	ldr	r3, [pc, #100]	; (801b9c0 <mem_malloc+0x1f0>)
 801b95a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b95e:	4919      	ldr	r1, [pc, #100]	; (801b9c4 <mem_malloc+0x1f4>)
 801b960:	4819      	ldr	r0, [pc, #100]	; (801b9c8 <mem_malloc+0x1f8>)
 801b962:	f00a feef 	bl	8026744 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b966:	4b16      	ldr	r3, [pc, #88]	; (801b9c0 <mem_malloc+0x1f0>)
 801b968:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b96c:	4917      	ldr	r1, [pc, #92]	; (801b9cc <mem_malloc+0x1fc>)
 801b96e:	4816      	ldr	r0, [pc, #88]	; (801b9c8 <mem_malloc+0x1f8>)
 801b970:	f00a fee8 	bl	8026744 <iprintf>
 801b974:	e7c3      	b.n	801b8fe <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b976:	4b12      	ldr	r3, [pc, #72]	; (801b9c0 <mem_malloc+0x1f0>)
 801b978:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b97c:	4914      	ldr	r1, [pc, #80]	; (801b9d0 <mem_malloc+0x200>)
 801b97e:	4812      	ldr	r0, [pc, #72]	; (801b9c8 <mem_malloc+0x1f8>)
 801b980:	f00a fee0 	bl	8026744 <iprintf>
 801b984:	e7b9      	b.n	801b8fa <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b986:	4b0e      	ldr	r3, [pc, #56]	; (801b9c0 <mem_malloc+0x1f0>)
 801b988:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b98c:	4911      	ldr	r1, [pc, #68]	; (801b9d4 <mem_malloc+0x204>)
 801b98e:	480e      	ldr	r0, [pc, #56]	; (801b9c8 <mem_malloc+0x1f8>)
 801b990:	f00a fed8 	bl	8026744 <iprintf>
 801b994:	e7a9      	b.n	801b8ea <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b996:	4b0a      	ldr	r3, [pc, #40]	; (801b9c0 <mem_malloc+0x1f0>)
 801b998:	f240 3287 	movw	r2, #903	; 0x387
 801b99c:	490e      	ldr	r1, [pc, #56]	; (801b9d8 <mem_malloc+0x208>)
 801b99e:	480a      	ldr	r0, [pc, #40]	; (801b9c8 <mem_malloc+0x1f8>)
 801b9a0:	f00a fed0 	bl	8026744 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b9a4:	4b03      	ldr	r3, [pc, #12]	; (801b9b4 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801b9a6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b9a8:	6818      	ldr	r0, [r3, #0]
 801b9aa:	e765      	b.n	801b878 <mem_malloc+0xa8>
 801b9ac:	4e03      	ldr	r6, [pc, #12]	; (801b9bc <mem_malloc+0x1ec>)
 801b9ae:	e79c      	b.n	801b8ea <mem_malloc+0x11a>
 801b9b0:	2001f320 	.word	0x2001f320
 801b9b4:	2001f324 	.word	0x2001f324
 801b9b8:	2001f31c 	.word	0x2001f31c
 801b9bc:	2001f328 	.word	0x2001f328
 801b9c0:	08044bc8 	.word	0x08044bc8
 801b9c4:	08044ed4 	.word	0x08044ed4
 801b9c8:	0802b43c 	.word	0x0802b43c
 801b9cc:	08044f04 	.word	0x08044f04
 801b9d0:	08044ea4 	.word	0x08044ea4
 801b9d4:	08044e88 	.word	0x08044e88
 801b9d8:	08044e74 	.word	0x08044e74
 801b9dc:	2001f318 	.word	0x2001f318

0801b9e0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9e4:	4f12      	ldr	r7, [pc, #72]	; (801ba30 <memp_overflow_check_all+0x50>)
 801b9e6:	2308      	movs	r3, #8
 801b9e8:	4c12      	ldr	r4, [pc, #72]	; (801ba34 <memp_overflow_check_all+0x54>)
 801b9ea:	4d13      	ldr	r5, [pc, #76]	; (801ba38 <memp_overflow_check_all+0x58>)
 801b9ec:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801b9f0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801ba3c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801b9f4:	3403      	adds	r4, #3
 801b9f6:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b9fa:	b183      	cbz	r3, 801ba1e <memp_overflow_check_all+0x3e>
 801b9fc:	88a9      	ldrh	r1, [r5, #4]
 801b9fe:	2600      	movs	r6, #0
 801ba00:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801ba02:	f104 001c 	add.w	r0, r4, #28
 801ba06:	682b      	ldr	r3, [r5, #0]
 801ba08:	464a      	mov	r2, r9
 801ba0a:	f7ff fc8d 	bl	801b328 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba0e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba10:	88e8      	ldrh	r0, [r5, #6]
 801ba12:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba14:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba18:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba1a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba1c:	d8f0      	bhi.n	801ba00 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801ba1e:	45b8      	cmp	r8, r7
 801ba20:	d004      	beq.n	801ba2c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801ba22:	f857 5b04 	ldr.w	r5, [r7], #4
 801ba26:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba28:	88eb      	ldrh	r3, [r5, #6]
 801ba2a:	e7e3      	b.n	801b9f4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801ba2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba30:	080451b8 	.word	0x080451b8
 801ba34:	20029aa8 	.word	0x20029aa8
 801ba38:	08045124 	.word	0x08045124
 801ba3c:	08044f28 	.word	0x08044f28

0801ba40 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba40:	078b      	lsls	r3, r1, #30
{
 801ba42:	b570      	push	{r4, r5, r6, lr}
 801ba44:	460c      	mov	r4, r1
 801ba46:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba48:	d11f      	bne.n	801ba8a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801ba4a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801ba4c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801ba50:	6811      	ldr	r1, [r2, #0]
 801ba52:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801ba56:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba58:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801ba5c:	b15a      	cbz	r2, 801ba76 <do_memp_free_pool+0x36>
      if (t == h) {
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d105      	bne.n	801ba6e <do_memp_free_pool+0x2e>
 801ba62:	e009      	b.n	801ba78 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba64:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba66:	b133      	cbz	r3, 801ba76 <do_memp_free_pool+0x36>
 801ba68:	b12a      	cbz	r2, 801ba76 <do_memp_free_pool+0x36>
      if (t == h) {
 801ba6a:	4293      	cmp	r3, r2
 801ba6c:	d004      	beq.n	801ba78 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba6e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba70:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba72:	2a00      	cmp	r2, #0
 801ba74:	d1f6      	bne.n	801ba64 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801ba76:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba78:	4b08      	ldr	r3, [pc, #32]	; (801ba9c <do_memp_free_pool+0x5c>)
 801ba7a:	f240 1285 	movw	r2, #389	; 0x185
 801ba7e:	4908      	ldr	r1, [pc, #32]	; (801baa0 <do_memp_free_pool+0x60>)
 801ba80:	4808      	ldr	r0, [pc, #32]	; (801baa4 <do_memp_free_pool+0x64>)
}
 801ba82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba86:	f00a be5d 	b.w	8026744 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba8a:	4b04      	ldr	r3, [pc, #16]	; (801ba9c <do_memp_free_pool+0x5c>)
 801ba8c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801ba90:	4905      	ldr	r1, [pc, #20]	; (801baa8 <do_memp_free_pool+0x68>)
 801ba92:	4804      	ldr	r0, [pc, #16]	; (801baa4 <do_memp_free_pool+0x64>)
 801ba94:	f00a fe56 	bl	8026744 <iprintf>
 801ba98:	e7d7      	b.n	801ba4a <do_memp_free_pool+0xa>
 801ba9a:	bf00      	nop
 801ba9c:	08044f30 	.word	0x08044f30
 801baa0:	08044f80 	.word	0x08044f80
 801baa4:	0802b43c 	.word	0x0802b43c
 801baa8:	08044f60 	.word	0x08044f60

0801baac <memp_init_pool>:
{
 801baac:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801baae:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801bab0:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801bab2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801bab6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801bab8:	b1b1      	cbz	r1, 801bae8 <memp_init_pool+0x3c>
 801baba:	3403      	adds	r4, #3
 801babc:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801babe:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801bac0:	4616      	mov	r6, r2
 801bac2:	f024 0403 	bic.w	r4, r4, #3
 801bac6:	e001      	b.n	801bacc <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801bac8:	68eb      	ldr	r3, [r5, #12]
 801baca:	681a      	ldr	r2, [r3, #0]
 801bacc:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801bace:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801bad2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801bad4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801bad6:	f7ff fc73 	bl	801b3c0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801bada:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801badc:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801bade:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801bae2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801bae4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801bae6:	dcef      	bgt.n	801bac8 <memp_init_pool+0x1c>
}
 801bae8:	bd70      	pop	{r4, r5, r6, pc}
 801baea:	bf00      	nop

0801baec <memp_init>:
{
 801baec:	b538      	push	{r3, r4, r5, lr}
 801baee:	4c07      	ldr	r4, [pc, #28]	; (801bb0c <memp_init+0x20>)
 801baf0:	4807      	ldr	r0, [pc, #28]	; (801bb10 <memp_init+0x24>)
 801baf2:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801baf6:	e001      	b.n	801bafc <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801baf8:	f854 0b04 	ldr.w	r0, [r4], #4
 801bafc:	f7ff ffd6 	bl	801baac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801bb00:	42ac      	cmp	r4, r5
 801bb02:	d1f9      	bne.n	801baf8 <memp_init+0xc>
}
 801bb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801bb08:	f7ff bf6a 	b.w	801b9e0 <memp_overflow_check_all>
 801bb0c:	080451b8 	.word	0x080451b8
 801bb10:	08045124 	.word	0x08045124

0801bb14 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb14:	280f      	cmp	r0, #15
{
 801bb16:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb18:	d81d      	bhi.n	801bb56 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801bb1a:	4604      	mov	r4, r0
 801bb1c:	460e      	mov	r6, r1
 801bb1e:	4615      	mov	r5, r2
 801bb20:	f7ff ff5e 	bl	801b9e0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801bb24:	4b11      	ldr	r3, [pc, #68]	; (801bb6c <memp_malloc_fn+0x58>)
 801bb26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801bb2a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801bb2c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801bb2e:	b144      	cbz	r4, 801bb42 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801bb30:	6822      	ldr	r2, [r4, #0]
 801bb32:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801bb34:	2300      	movs	r3, #0
 801bb36:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb38:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801bb3a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb3e:	d102      	bne.n	801bb46 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801bb40:	341c      	adds	r4, #28
}
 801bb42:	4620      	mov	r0, r4
 801bb44:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb46:	4b0a      	ldr	r3, [pc, #40]	; (801bb70 <memp_malloc_fn+0x5c>)
 801bb48:	f44f 728c 	mov.w	r2, #280	; 0x118
 801bb4c:	4909      	ldr	r1, [pc, #36]	; (801bb74 <memp_malloc_fn+0x60>)
 801bb4e:	480a      	ldr	r0, [pc, #40]	; (801bb78 <memp_malloc_fn+0x64>)
 801bb50:	f00a fdf8 	bl	8026744 <iprintf>
 801bb54:	e7f4      	b.n	801bb40 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb56:	2400      	movs	r4, #0
 801bb58:	4b05      	ldr	r3, [pc, #20]	; (801bb70 <memp_malloc_fn+0x5c>)
 801bb5a:	f240 1257 	movw	r2, #343	; 0x157
 801bb5e:	4907      	ldr	r1, [pc, #28]	; (801bb7c <memp_malloc_fn+0x68>)
 801bb60:	4805      	ldr	r0, [pc, #20]	; (801bb78 <memp_malloc_fn+0x64>)
 801bb62:	f00a fdef 	bl	8026744 <iprintf>
}
 801bb66:	4620      	mov	r0, r4
 801bb68:	bd70      	pop	{r4, r5, r6, pc}
 801bb6a:	bf00      	nop
 801bb6c:	080451b4 	.word	0x080451b4
 801bb70:	08044f30 	.word	0x08044f30
 801bb74:	08044fa0 	.word	0x08044fa0
 801bb78:	0802b43c 	.word	0x0802b43c
 801bb7c:	08044fc4 	.word	0x08044fc4

0801bb80 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bb80:	280f      	cmp	r0, #15
 801bb82:	d80e      	bhi.n	801bba2 <memp_free+0x22>
{
 801bb84:	b570      	push	{r4, r5, r6, lr}
 801bb86:	460d      	mov	r5, r1

  if (mem == NULL) {
 801bb88:	b151      	cbz	r1, 801bba0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801bb8a:	4604      	mov	r4, r0
 801bb8c:	f7ff ff28 	bl	801b9e0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801bb90:	4b07      	ldr	r3, [pc, #28]	; (801bbb0 <memp_free+0x30>)
 801bb92:	4629      	mov	r1, r5
 801bb94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801bb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801bb9c:	f7ff bf50 	b.w	801ba40 <do_memp_free_pool>
}
 801bba0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bba2:	4b04      	ldr	r3, [pc, #16]	; (801bbb4 <memp_free+0x34>)
 801bba4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801bba8:	4903      	ldr	r1, [pc, #12]	; (801bbb8 <memp_free+0x38>)
 801bbaa:	4804      	ldr	r0, [pc, #16]	; (801bbbc <memp_free+0x3c>)
 801bbac:	f00a bdca 	b.w	8026744 <iprintf>
 801bbb0:	080451b4 	.word	0x080451b4
 801bbb4:	08044f30 	.word	0x08044f30
 801bbb8:	08044fe4 	.word	0x08044fe4
 801bbbc:	0802b43c 	.word	0x0802b43c

0801bbc0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801bbc0:	f06f 000b 	mvn.w	r0, #11
 801bbc4:	4770      	bx	lr
 801bbc6:	bf00      	nop

0801bbc8 <netif_issue_reports>:
{
 801bbc8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bbca:	4604      	mov	r4, r0
 801bbcc:	b150      	cbz	r0, 801bbe4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801bbce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801bbd2:	f003 0205 	and.w	r2, r3, #5
 801bbd6:	2a05      	cmp	r2, #5
 801bbd8:	d103      	bne.n	801bbe2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801bbda:	6862      	ldr	r2, [r4, #4]
 801bbdc:	b10a      	cbz	r2, 801bbe2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801bbde:	071b      	lsls	r3, r3, #28
 801bbe0:	d408      	bmi.n	801bbf4 <netif_issue_reports+0x2c>
}
 801bbe2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bbe4:	4b06      	ldr	r3, [pc, #24]	; (801bc00 <netif_issue_reports+0x38>)
 801bbe6:	f240 326d 	movw	r2, #877	; 0x36d
 801bbea:	4906      	ldr	r1, [pc, #24]	; (801bc04 <netif_issue_reports+0x3c>)
 801bbec:	4806      	ldr	r0, [pc, #24]	; (801bc08 <netif_issue_reports+0x40>)
 801bbee:	f00a fda9 	bl	8026744 <iprintf>
 801bbf2:	e7ec      	b.n	801bbce <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801bbf4:	1d21      	adds	r1, r4, #4
 801bbf6:	4620      	mov	r0, r4
}
 801bbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801bbfc:	f007 bfac 	b.w	8023b58 <etharp_request>
 801bc00:	080451f4 	.word	0x080451f4
 801bc04:	08045228 	.word	0x08045228
 801bc08:	0802b43c 	.word	0x0802b43c

0801bc0c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bc0c:	b570      	push	{r4, r5, r6, lr}
 801bc0e:	4605      	mov	r5, r0
 801bc10:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc12:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bc14:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc16:	b301      	cbz	r1, 801bc5a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801bc18:	686b      	ldr	r3, [r5, #4]
 801bc1a:	6822      	ldr	r2, [r4, #0]
 801bc1c:	429a      	cmp	r2, r3
 801bc1e:	d101      	bne.n	801bc24 <netif_do_set_ipaddr.isra.0+0x18>
}
 801bc20:	b002      	add	sp, #8
 801bc22:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801bc24:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bc26:	4630      	mov	r0, r6
 801bc28:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801bc2a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bc2c:	f002 fa5a 	bl	801e0e4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801bc30:	a901      	add	r1, sp, #4
 801bc32:	4630      	mov	r0, r6
 801bc34:	f005 fde4 	bl	8021800 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801bc38:	a901      	add	r1, sp, #4
 801bc3a:	4630      	mov	r0, r6
 801bc3c:	f000 ff6c 	bl	801cb18 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bc40:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bc42:	2101      	movs	r1, #1
 801bc44:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bc46:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bc48:	f7ff ffbe 	bl	801bbc8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801bc4c:	69eb      	ldr	r3, [r5, #28]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d0e6      	beq.n	801bc20 <netif_do_set_ipaddr.isra.0+0x14>
 801bc52:	4628      	mov	r0, r5
 801bc54:	4798      	blx	r3
}
 801bc56:	b002      	add	sp, #8
 801bc58:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc5a:	4b04      	ldr	r3, [pc, #16]	; (801bc6c <netif_do_set_ipaddr.isra.0+0x60>)
 801bc5c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801bc60:	4903      	ldr	r1, [pc, #12]	; (801bc70 <netif_do_set_ipaddr.isra.0+0x64>)
 801bc62:	4804      	ldr	r0, [pc, #16]	; (801bc74 <netif_do_set_ipaddr.isra.0+0x68>)
 801bc64:	f00a fd6e 	bl	8026744 <iprintf>
 801bc68:	e7d6      	b.n	801bc18 <netif_do_set_ipaddr.isra.0+0xc>
 801bc6a:	bf00      	nop
 801bc6c:	080451f4 	.word	0x080451f4
 801bc70:	0804524c 	.word	0x0804524c
 801bc74:	0802b43c 	.word	0x0802b43c

0801bc78 <netif_init>:
}
 801bc78:	4770      	bx	lr
 801bc7a:	bf00      	nop

0801bc7c <netif_set_addr>:
{
 801bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801bc7e:	2900      	cmp	r1, #0
{
 801bc80:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801bc82:	4b16      	ldr	r3, [pc, #88]	; (801bcdc <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801bc84:	460c      	mov	r4, r1
{
 801bc86:	b083      	sub	sp, #12
 801bc88:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801bc8a:	bf14      	ite	ne
 801bc8c:	460c      	movne	r4, r1
 801bc8e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801bc90:	b30a      	cbz	r2, 801bcd6 <netif_set_addr+0x5a>
 801bc92:	4616      	mov	r6, r2
  if (gw == NULL) {
 801bc94:	b1ef      	cbz	r7, 801bcd2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801bc96:	6823      	ldr	r3, [r4, #0]
 801bc98:	b993      	cbnz	r3, 801bcc0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bc9a:	4621      	mov	r1, r4
 801bc9c:	aa01      	add	r2, sp, #4
 801bc9e:	4628      	mov	r0, r5
 801bca0:	f7ff ffb4 	bl	801bc0c <netif_do_set_ipaddr.isra.0>
 801bca4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801bca6:	6833      	ldr	r3, [r6, #0]
 801bca8:	68aa      	ldr	r2, [r5, #8]
 801bcaa:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bcac:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801bcae:	bf18      	it	ne
 801bcb0:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801bcb6:	bf18      	it	ne
 801bcb8:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801bcba:	b119      	cbz	r1, 801bcc4 <netif_set_addr+0x48>
}
 801bcbc:	b003      	add	sp, #12
 801bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801bcc0:	2100      	movs	r1, #0
 801bcc2:	e7f0      	b.n	801bca6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bcc4:	aa01      	add	r2, sp, #4
 801bcc6:	4621      	mov	r1, r4
 801bcc8:	4628      	mov	r0, r5
 801bcca:	f7ff ff9f 	bl	801bc0c <netif_do_set_ipaddr.isra.0>
}
 801bcce:	b003      	add	sp, #12
 801bcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801bcd2:	4f02      	ldr	r7, [pc, #8]	; (801bcdc <netif_set_addr+0x60>)
 801bcd4:	e7df      	b.n	801bc96 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801bcd6:	461e      	mov	r6, r3
 801bcd8:	e7dc      	b.n	801bc94 <netif_set_addr+0x18>
 801bcda:	bf00      	nop
 801bcdc:	0804731c 	.word	0x0804731c

0801bce0 <netif_add>:
{
 801bce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bce4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bce6:	4606      	mov	r6, r0
 801bce8:	2800      	cmp	r0, #0
 801bcea:	f000 8081 	beq.w	801bdf0 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801bcee:	2d00      	cmp	r5, #0
 801bcf0:	f000 8087 	beq.w	801be02 <netif_add+0x122>
  if (ipaddr == NULL) {
 801bcf4:	2900      	cmp	r1, #0
 801bcf6:	d06f      	beq.n	801bdd8 <netif_add+0xf8>
  if (netmask == NULL) {
 801bcf8:	2a00      	cmp	r2, #0
 801bcfa:	d068      	beq.n	801bdce <netif_add+0xee>
  if (gw == NULL) {
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d069      	beq.n	801bdd4 <netif_add+0xf4>
  netif->state = state;
 801bd00:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801bd02:	2400      	movs	r4, #0
  netif->num = netif_num;
 801bd04:	f8df a128 	ldr.w	sl, [pc, #296]	; 801be30 <netif_add+0x150>
  netif->state = state;
 801bd08:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801bd0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801bd0c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801bd0e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801bd10:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801bd14:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801bd16:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801bd1a:	483e      	ldr	r0, [pc, #248]	; (801be14 <netif_add+0x134>)
  netif->flags = 0;
 801bd1c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801bd20:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bd22:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801bd24:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801bd26:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801bd2a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bd2e:	f7ff ffa5 	bl	801bc7c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801bd32:	4630      	mov	r0, r6
 801bd34:	47a8      	blx	r5
 801bd36:	2800      	cmp	r0, #0
 801bd38:	d157      	bne.n	801bdea <netif_add+0x10a>
      if (netif->num == 255) {
 801bd3a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801bd3e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801be34 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd42:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801be24 <netif_add+0x144>
 801bd46:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801be38 <netif_add+0x158>
 801bd4a:	4f33      	ldr	r7, [pc, #204]	; (801be18 <netif_add+0x138>)
      if (netif->num == 255) {
 801bd4c:	2aff      	cmp	r2, #255	; 0xff
 801bd4e:	d102      	bne.n	801bd56 <netif_add+0x76>
        netif->num = 0;
 801bd50:	2300      	movs	r3, #0
 801bd52:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bd56:	f8d8 4000 	ldr.w	r4, [r8]
 801bd5a:	2c00      	cmp	r4, #0
 801bd5c:	d042      	beq.n	801bde4 <netif_add+0x104>
      num_netifs = 0;
 801bd5e:	2500      	movs	r5, #0
 801bd60:	e007      	b.n	801bd72 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801bd62:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bd66:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	d014      	beq.n	801bd98 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bd6e:	6824      	ldr	r4, [r4, #0]
 801bd70:	b1fc      	cbz	r4, 801bdb2 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd72:	42a6      	cmp	r6, r4
        num_netifs++;
 801bd74:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd78:	d013      	beq.n	801bda2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801bd7a:	2dff      	cmp	r5, #255	; 0xff
 801bd7c:	ddf1      	ble.n	801bd62 <netif_add+0x82>
 801bd7e:	465b      	mov	r3, fp
 801bd80:	f240 128d 	movw	r2, #397	; 0x18d
 801bd84:	4925      	ldr	r1, [pc, #148]	; (801be1c <netif_add+0x13c>)
 801bd86:	4638      	mov	r0, r7
 801bd88:	f00a fcdc 	bl	8026744 <iprintf>
        if (netif2->num == netif->num) {
 801bd8c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bd90:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bd94:	429a      	cmp	r2, r3
 801bd96:	d1ea      	bne.n	801bd6e <netif_add+0x8e>
          netif->num++;
 801bd98:	3201      	adds	r2, #1
 801bd9a:	b2d2      	uxtb	r2, r2
 801bd9c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801bda0:	e7d4      	b.n	801bd4c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bda2:	465b      	mov	r3, fp
 801bda4:	f240 128b 	movw	r2, #395	; 0x18b
 801bda8:	4649      	mov	r1, r9
 801bdaa:	4638      	mov	r0, r7
 801bdac:	f00a fcca 	bl	8026744 <iprintf>
 801bdb0:	e7e3      	b.n	801bd7a <netif_add+0x9a>
  netif->next = netif_list;
 801bdb2:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801bdb6:	2bfe      	cmp	r3, #254	; 0xfe
 801bdb8:	d012      	beq.n	801bde0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801bdba:	3301      	adds	r3, #1
 801bdbc:	b2db      	uxtb	r3, r3
  return netif;
 801bdbe:	4630      	mov	r0, r6
  netif->next = netif_list;
 801bdc0:	6034      	str	r4, [r6, #0]
 801bdc2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801bdc6:	f8c8 6000 	str.w	r6, [r8]
}
 801bdca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801bdce:	4a14      	ldr	r2, [pc, #80]	; (801be20 <netif_add+0x140>)
  if (gw == NULL) {
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d195      	bne.n	801bd00 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801bdd4:	4b12      	ldr	r3, [pc, #72]	; (801be20 <netif_add+0x140>)
 801bdd6:	e793      	b.n	801bd00 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801bdd8:	4911      	ldr	r1, [pc, #68]	; (801be20 <netif_add+0x140>)
  if (netmask == NULL) {
 801bdda:	2a00      	cmp	r2, #0
 801bddc:	d18e      	bne.n	801bcfc <netif_add+0x1c>
 801bdde:	e7f6      	b.n	801bdce <netif_add+0xee>
    netif_num = 0;
 801bde0:	2300      	movs	r3, #0
 801bde2:	e7ec      	b.n	801bdbe <netif_add+0xde>
  if (netif->num == 254) {
 801bde4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bde8:	e7e5      	b.n	801bdb6 <netif_add+0xd6>
    return NULL;
 801bdea:	4620      	mov	r0, r4
}
 801bdec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bdf0:	4b0c      	ldr	r3, [pc, #48]	; (801be24 <netif_add+0x144>)
 801bdf2:	f240 1227 	movw	r2, #295	; 0x127
 801bdf6:	490c      	ldr	r1, [pc, #48]	; (801be28 <netif_add+0x148>)
 801bdf8:	4807      	ldr	r0, [pc, #28]	; (801be18 <netif_add+0x138>)
 801bdfa:	f00a fca3 	bl	8026744 <iprintf>
 801bdfe:	4630      	mov	r0, r6
 801be00:	e7e3      	b.n	801bdca <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801be02:	4b08      	ldr	r3, [pc, #32]	; (801be24 <netif_add+0x144>)
 801be04:	f44f 7294 	mov.w	r2, #296	; 0x128
 801be08:	4908      	ldr	r1, [pc, #32]	; (801be2c <netif_add+0x14c>)
 801be0a:	4803      	ldr	r0, [pc, #12]	; (801be18 <netif_add+0x138>)
 801be0c:	f00a fc9a 	bl	8026744 <iprintf>
 801be10:	4628      	mov	r0, r5
 801be12:	e7da      	b.n	801bdca <netif_add+0xea>
 801be14:	0801bbc1 	.word	0x0801bbc1
 801be18:	0802b43c 	.word	0x0802b43c
 801be1c:	080452b0 	.word	0x080452b0
 801be20:	0804731c 	.word	0x0804731c
 801be24:	080451f4 	.word	0x080451f4
 801be28:	0804525c 	.word	0x0804525c
 801be2c:	08045278 	.word	0x08045278
 801be30:	2002e494 	.word	0x2002e494
 801be34:	2002e490 	.word	0x2002e490
 801be38:	0804529c 	.word	0x0804529c

0801be3c <netif_set_default>:
  netif_default = netif;
 801be3c:	4b01      	ldr	r3, [pc, #4]	; (801be44 <netif_set_default+0x8>)
 801be3e:	6018      	str	r0, [r3, #0]
}
 801be40:	4770      	bx	lr
 801be42:	bf00      	nop
 801be44:	2002e48c 	.word	0x2002e48c

0801be48 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801be48:	b198      	cbz	r0, 801be72 <netif_set_up+0x2a>
{
 801be4a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801be4c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801be50:	4604      	mov	r4, r0
 801be52:	07da      	lsls	r2, r3, #31
 801be54:	d40c      	bmi.n	801be70 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801be56:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801be5a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801be5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801be60:	b102      	cbz	r2, 801be64 <netif_set_up+0x1c>
 801be62:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be64:	4620      	mov	r0, r4
 801be66:	2103      	movs	r1, #3
}
 801be68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be6c:	f7ff beac 	b.w	801bbc8 <netif_issue_reports>
}
 801be70:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801be72:	4b03      	ldr	r3, [pc, #12]	; (801be80 <netif_set_up+0x38>)
 801be74:	f44f 7254 	mov.w	r2, #848	; 0x350
 801be78:	4902      	ldr	r1, [pc, #8]	; (801be84 <netif_set_up+0x3c>)
 801be7a:	4803      	ldr	r0, [pc, #12]	; (801be88 <netif_set_up+0x40>)
 801be7c:	f00a bc62 	b.w	8026744 <iprintf>
 801be80:	080451f4 	.word	0x080451f4
 801be84:	080452e0 	.word	0x080452e0
 801be88:	0802b43c 	.word	0x0802b43c

0801be8c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801be8c:	b1a8      	cbz	r0, 801beba <netif_set_down+0x2e>
{
 801be8e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801be90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801be94:	4604      	mov	r4, r0
 801be96:	07da      	lsls	r2, r3, #31
 801be98:	d50b      	bpl.n	801beb2 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801be9a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801be9e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801bea0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801bea4:	d406      	bmi.n	801beb4 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801bea6:	69e3      	ldr	r3, [r4, #28]
 801bea8:	b11b      	cbz	r3, 801beb2 <netif_set_down+0x26>
 801beaa:	4620      	mov	r0, r4
}
 801beac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801beb0:	4718      	bx	r3
}
 801beb2:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801beb4:	f007 fbc8 	bl	8023648 <etharp_cleanup_netif>
 801beb8:	e7f5      	b.n	801bea6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801beba:	4b03      	ldr	r3, [pc, #12]	; (801bec8 <netif_set_down+0x3c>)
 801bebc:	f240 329b 	movw	r2, #923	; 0x39b
 801bec0:	4902      	ldr	r1, [pc, #8]	; (801becc <netif_set_down+0x40>)
 801bec2:	4803      	ldr	r0, [pc, #12]	; (801bed0 <netif_set_down+0x44>)
 801bec4:	f00a bc3e 	b.w	8026744 <iprintf>
 801bec8:	080451f4 	.word	0x080451f4
 801becc:	080452fc 	.word	0x080452fc
 801bed0:	0802b43c 	.word	0x0802b43c

0801bed4 <netif_set_status_callback>:
  if (netif) {
 801bed4:	b100      	cbz	r0, 801bed8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801bed6:	61c1      	str	r1, [r0, #28]
}
 801bed8:	4770      	bx	lr
 801beda:	bf00      	nop

0801bedc <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bedc:	b1b8      	cbz	r0, 801bf0e <netif_set_link_up+0x32>
{
 801bede:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801bee0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801bee4:	4604      	mov	r4, r0
 801bee6:	075a      	lsls	r2, r3, #29
 801bee8:	d500      	bpl.n	801beec <netif_set_link_up+0x10>
}
 801beea:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801beec:	f043 0304 	orr.w	r3, r3, #4
 801bef0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801bef4:	f006 fd96 	bl	8022a24 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bef8:	2103      	movs	r1, #3
 801befa:	4620      	mov	r0, r4
 801befc:	f7ff fe64 	bl	801bbc8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801bf00:	6a23      	ldr	r3, [r4, #32]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d0f1      	beq.n	801beea <netif_set_link_up+0xe>
 801bf06:	4620      	mov	r0, r4
}
 801bf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801bf0c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bf0e:	4b03      	ldr	r3, [pc, #12]	; (801bf1c <netif_set_link_up+0x40>)
 801bf10:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bf14:	4902      	ldr	r1, [pc, #8]	; (801bf20 <netif_set_link_up+0x44>)
 801bf16:	4803      	ldr	r0, [pc, #12]	; (801bf24 <netif_set_link_up+0x48>)
 801bf18:	f00a bc14 	b.w	8026744 <iprintf>
 801bf1c:	080451f4 	.word	0x080451f4
 801bf20:	0804531c 	.word	0x0804531c
 801bf24:	0802b43c 	.word	0x0802b43c

0801bf28 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bf28:	b158      	cbz	r0, 801bf42 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801bf2a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801bf2e:	0751      	lsls	r1, r2, #29
 801bf30:	d506      	bpl.n	801bf40 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bf32:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801bf36:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bf38:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801bf3c:	b101      	cbz	r1, 801bf40 <netif_set_link_down+0x18>
 801bf3e:	4708      	bx	r1
}
 801bf40:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bf42:	4b03      	ldr	r3, [pc, #12]	; (801bf50 <netif_set_link_down+0x28>)
 801bf44:	f240 4206 	movw	r2, #1030	; 0x406
 801bf48:	4902      	ldr	r1, [pc, #8]	; (801bf54 <netif_set_link_down+0x2c>)
 801bf4a:	4803      	ldr	r0, [pc, #12]	; (801bf58 <netif_set_link_down+0x30>)
 801bf4c:	f00a bbfa 	b.w	8026744 <iprintf>
 801bf50:	080451f4 	.word	0x080451f4
 801bf54:	08045340 	.word	0x08045340
 801bf58:	0802b43c 	.word	0x0802b43c

0801bf5c <netif_set_link_callback>:
  if (netif) {
 801bf5c:	b100      	cbz	r0, 801bf60 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801bf5e:	6201      	str	r1, [r0, #32]
}
 801bf60:	4770      	bx	lr
 801bf62:	bf00      	nop

0801bf64 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801bf64:	4602      	mov	r2, r0
 801bf66:	b158      	cbz	r0, 801bf80 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801bf68:	4b06      	ldr	r3, [pc, #24]	; (801bf84 <netif_get_by_index+0x20>)
 801bf6a:	6818      	ldr	r0, [r3, #0]
 801bf6c:	b910      	cbnz	r0, 801bf74 <netif_get_by_index+0x10>
 801bf6e:	e007      	b.n	801bf80 <netif_get_by_index+0x1c>
 801bf70:	6800      	ldr	r0, [r0, #0]
 801bf72:	b130      	cbz	r0, 801bf82 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801bf74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801bf78:	3301      	adds	r3, #1
 801bf7a:	b2db      	uxtb	r3, r3
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	d1f7      	bne.n	801bf70 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801bf80:	4770      	bx	lr
 801bf82:	4770      	bx	lr
 801bf84:	2002e490 	.word	0x2002e490

0801bf88 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf88:	4907      	ldr	r1, [pc, #28]	; (801bfa8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	4b07      	ldr	r3, [pc, #28]	; (801bfac <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf8e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bf90:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf92:	b910      	cbnz	r0, 801bf9a <pbuf_free_ooseq_callback+0x12>
 801bf94:	e006      	b.n	801bfa4 <pbuf_free_ooseq_callback+0x1c>
 801bf96:	68c0      	ldr	r0, [r0, #12]
 801bf98:	b120      	cbz	r0, 801bfa4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801bf9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d0fa      	beq.n	801bf96 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801bfa0:	f002 b8ca 	b.w	801e138 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801bfa4:	4770      	bx	lr
 801bfa6:	bf00      	nop
 801bfa8:	2002e49c 	.word	0x2002e49c
 801bfac:	2002e495 	.word	0x2002e495

0801bfb0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801bfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801bfb4:	4604      	mov	r4, r0
 801bfb6:	2800      	cmp	r0, #0
 801bfb8:	d052      	beq.n	801c060 <pbuf_free.part.0+0xb0>
  count = 0;
 801bfba:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bfbc:	4f29      	ldr	r7, [pc, #164]	; (801c064 <pbuf_free.part.0+0xb4>)
 801bfbe:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801c074 <pbuf_free.part.0+0xc4>
 801bfc2:	4e29      	ldr	r6, [pc, #164]	; (801c068 <pbuf_free.part.0+0xb8>)
 801bfc4:	e00a      	b.n	801bfdc <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bfc6:	6923      	ldr	r3, [r4, #16]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d03b      	beq.n	801c044 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801bfcc:	4620      	mov	r0, r4
 801bfce:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801bfd0:	3501      	adds	r5, #1
 801bfd2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bfd4:	f1b9 0f00 	cmp.w	r9, #0
 801bfd8:	d01b      	beq.n	801c012 <pbuf_free.part.0+0x62>
 801bfda:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bfdc:	7ba3      	ldrb	r3, [r4, #14]
 801bfde:	b1db      	cbz	r3, 801c018 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801bfe0:	3b01      	subs	r3, #1
 801bfe2:	b2db      	uxtb	r3, r3
 801bfe4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801bfe6:	b9a3      	cbnz	r3, 801c012 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bfe8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801bfea:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bfee:	079b      	lsls	r3, r3, #30
 801bff0:	d4e9      	bmi.n	801bfc6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801bff2:	7b23      	ldrb	r3, [r4, #12]
 801bff4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801bff8:	2b02      	cmp	r3, #2
 801bffa:	d01e      	beq.n	801c03a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	d02a      	beq.n	801c056 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801c000:	b99b      	cbnz	r3, 801c02a <pbuf_free.part.0+0x7a>
      count++;
 801c002:	3501      	adds	r5, #1
          mem_free(p);
 801c004:	4620      	mov	r0, r4
 801c006:	f7ff fa27 	bl	801b458 <mem_free>
      count++;
 801c00a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801c00c:	f1b9 0f00 	cmp.w	r9, #0
 801c010:	d1e3      	bne.n	801bfda <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801c012:	4628      	mov	r0, r5
 801c014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801c018:	463b      	mov	r3, r7
 801c01a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801c01e:	4641      	mov	r1, r8
 801c020:	4630      	mov	r0, r6
 801c022:	f00a fb8f 	bl	8026744 <iprintf>
    ref = --(p->ref);
 801c026:	7ba3      	ldrb	r3, [r4, #14]
 801c028:	e7da      	b.n	801bfe0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801c02a:	463b      	mov	r3, r7
 801c02c:	f240 320f 	movw	r2, #783	; 0x30f
 801c030:	490e      	ldr	r1, [pc, #56]	; (801c06c <pbuf_free.part.0+0xbc>)
 801c032:	4630      	mov	r0, r6
 801c034:	f00a fb86 	bl	8026744 <iprintf>
 801c038:	e7ca      	b.n	801bfd0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801c03a:	4621      	mov	r1, r4
 801c03c:	200f      	movs	r0, #15
 801c03e:	f7ff fd9f 	bl	801bb80 <memp_free>
 801c042:	e7c5      	b.n	801bfd0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801c044:	463b      	mov	r3, r7
 801c046:	f240 22ff 	movw	r2, #767	; 0x2ff
 801c04a:	4909      	ldr	r1, [pc, #36]	; (801c070 <pbuf_free.part.0+0xc0>)
 801c04c:	4630      	mov	r0, r6
 801c04e:	f00a fb79 	bl	8026744 <iprintf>
        pc->custom_free_function(p);
 801c052:	6923      	ldr	r3, [r4, #16]
 801c054:	e7ba      	b.n	801bfcc <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801c056:	4621      	mov	r1, r4
 801c058:	200e      	movs	r0, #14
 801c05a:	f7ff fd91 	bl	801bb80 <memp_free>
 801c05e:	e7b7      	b.n	801bfd0 <pbuf_free.part.0+0x20>
  count = 0;
 801c060:	4605      	mov	r5, r0
 801c062:	e7d6      	b.n	801c012 <pbuf_free.part.0+0x62>
 801c064:	08045364 	.word	0x08045364
 801c068:	0802b43c 	.word	0x0802b43c
 801c06c:	080453d0 	.word	0x080453d0
 801c070:	080453ac 	.word	0x080453ac
 801c074:	08045394 	.word	0x08045394

0801c078 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801c07c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c07e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801c1a4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c082:	4605      	mov	r5, r0
 801c084:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801c086:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c088:	8944      	ldrh	r4, [r0, #10]
 801c08a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c08c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801c1b8 <pbuf_copy.part.0+0x140>
 801c090:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801c1ac <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c094:	1be4      	subs	r4, r4, r7
 801c096:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c098:	6868      	ldr	r0, [r5, #4]
 801c09a:	4294      	cmp	r4, r2
 801c09c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c0a0:	4438      	add	r0, r7
 801c0a2:	bf28      	it	cs
 801c0a4:	4614      	movcs	r4, r2
 801c0a6:	4431      	add	r1, r6
 801c0a8:	4622      	mov	r2, r4
    offset_to += len;
 801c0aa:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c0ac:	f009 fb84 	bl	80257b8 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c0b0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801c0b2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c0b4:	429f      	cmp	r7, r3
 801c0b6:	d837      	bhi.n	801c128 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c0b8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c0bc:	4296      	cmp	r6, r2
 801c0be:	d829      	bhi.n	801c114 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801c0c0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801c0c2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801c0c4:	d317      	bcc.n	801c0f6 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801c0c6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801c0c8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801c0cc:	d04b      	beq.n	801c166 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c0ce:	f1b8 0f00 	cmp.w	r8, #0
 801c0d2:	d144      	bne.n	801c15e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c0d4:	892a      	ldrh	r2, [r5, #8]
 801c0d6:	896b      	ldrh	r3, [r5, #10]
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	d14c      	bne.n	801c176 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c0dc:	6828      	ldr	r0, [r5, #0]
 801c0de:	b140      	cbz	r0, 801c0f2 <pbuf_copy.part.0+0x7a>
 801c0e0:	4b30      	ldr	r3, [pc, #192]	; (801c1a4 <pbuf_copy.part.0+0x12c>)
 801c0e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801c0e6:	4930      	ldr	r1, [pc, #192]	; (801c1a8 <pbuf_copy.part.0+0x130>)
 801c0e8:	4830      	ldr	r0, [pc, #192]	; (801c1ac <pbuf_copy.part.0+0x134>)
 801c0ea:	f00a fb2b 	bl	8026744 <iprintf>
 801c0ee:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801c0f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801c0f6:	429f      	cmp	r7, r3
 801c0f8:	d040      	beq.n	801c17c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c0fa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801c0fe:	4293      	cmp	r3, r2
 801c100:	d01a      	beq.n	801c138 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c102:	896c      	ldrh	r4, [r5, #10]
 801c104:	2d00      	cmp	r5, #0
 801c106:	d0c5      	beq.n	801c094 <pbuf_copy.part.0+0x1c>
 801c108:	892b      	ldrh	r3, [r5, #8]
 801c10a:	42a3      	cmp	r3, r4
 801c10c:	d045      	beq.n	801c19a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c10e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c112:	e7bf      	b.n	801c094 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c114:	f240 32da 	movw	r2, #986	; 0x3da
 801c118:	4653      	mov	r3, sl
 801c11a:	4925      	ldr	r1, [pc, #148]	; (801c1b0 <pbuf_copy.part.0+0x138>)
 801c11c:	4648      	mov	r0, r9
 801c11e:	f00a fb11 	bl	8026744 <iprintf>
    if (offset_from >= p_from->len) {
 801c122:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c126:	e7cb      	b.n	801c0c0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c128:	4653      	mov	r3, sl
 801c12a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801c12e:	4659      	mov	r1, fp
 801c130:	4648      	mov	r0, r9
 801c132:	f00a fb07 	bl	8026744 <iprintf>
 801c136:	e7bf      	b.n	801c0b8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c138:	f8d8 3000 	ldr.w	r3, [r8]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d0e0      	beq.n	801c102 <pbuf_copy.part.0+0x8a>
 801c140:	4b18      	ldr	r3, [pc, #96]	; (801c1a4 <pbuf_copy.part.0+0x12c>)
 801c142:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801c146:	4918      	ldr	r1, [pc, #96]	; (801c1a8 <pbuf_copy.part.0+0x130>)
 801c148:	4818      	ldr	r0, [pc, #96]	; (801c1ac <pbuf_copy.part.0+0x134>)
 801c14a:	f00a fafb 	bl	8026744 <iprintf>
 801c14e:	f06f 0005 	mvn.w	r0, #5
}
 801c152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c156:	f1b8 0f00 	cmp.w	r8, #0
 801c15a:	d00a      	beq.n	801c172 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801c15c:	2700      	movs	r7, #0
 801c15e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c160:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c164:	e7c9      	b.n	801c0fa <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801c166:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c168:	2d00      	cmp	r5, #0
 801c16a:	d1f4      	bne.n	801c156 <pbuf_copy.part.0+0xde>
 801c16c:	f1b8 0f00 	cmp.w	r8, #0
 801c170:	d108      	bne.n	801c184 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c172:	2d00      	cmp	r5, #0
 801c174:	d1ae      	bne.n	801c0d4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801c176:	2000      	movs	r0, #0
}
 801c178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801c17c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c17e:	b10d      	cbz	r5, 801c184 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801c180:	2700      	movs	r7, #0
 801c182:	e7ed      	b.n	801c160 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c184:	4b07      	ldr	r3, [pc, #28]	; (801c1a4 <pbuf_copy.part.0+0x12c>)
 801c186:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801c18a:	490a      	ldr	r1, [pc, #40]	; (801c1b4 <pbuf_copy.part.0+0x13c>)
 801c18c:	4807      	ldr	r0, [pc, #28]	; (801c1ac <pbuf_copy.part.0+0x134>)
 801c18e:	f00a fad9 	bl	8026744 <iprintf>
 801c192:	f06f 000f 	mvn.w	r0, #15
}
 801c196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c19a:	682b      	ldr	r3, [r5, #0]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d0b6      	beq.n	801c10e <pbuf_copy.part.0+0x96>
 801c1a0:	e79e      	b.n	801c0e0 <pbuf_copy.part.0+0x68>
 801c1a2:	bf00      	nop
 801c1a4:	08045364 	.word	0x08045364
 801c1a8:	08045428 	.word	0x08045428
 801c1ac:	0802b43c 	.word	0x0802b43c
 801c1b0:	080453fc 	.word	0x080453fc
 801c1b4:	08045418 	.word	0x08045418
 801c1b8:	080453e4 	.word	0x080453e4

0801c1bc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1bc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801c1c0:	2b01      	cmp	r3, #1
{
 801c1c2:	b570      	push	{r4, r5, r6, lr}
 801c1c4:	4614      	mov	r4, r2
 801c1c6:	4606      	mov	r6, r0
 801c1c8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1ca:	d110      	bne.n	801c1ee <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c1cc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c1d0:	490b      	ldr	r1, [pc, #44]	; (801c200 <pbuf_alloc_reference+0x44>)
 801c1d2:	200e      	movs	r0, #14
 801c1d4:	f7ff fc9e 	bl	801bb14 <memp_malloc_fn>
  if (p == NULL) {
 801c1d8:	b140      	cbz	r0, 801c1ec <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801c1da:	2300      	movs	r3, #0
  p->ref = 1;
 801c1dc:	2201      	movs	r2, #1
  p->payload = payload;
 801c1de:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801c1e0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801c1e2:	6003      	str	r3, [r0, #0]
  p->len = len;
 801c1e4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801c1e6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801c1e8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801c1ea:	81c2      	strh	r2, [r0, #14]
}
 801c1ec:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1ee:	4b04      	ldr	r3, [pc, #16]	; (801c200 <pbuf_alloc_reference+0x44>)
 801c1f0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801c1f4:	4903      	ldr	r1, [pc, #12]	; (801c204 <pbuf_alloc_reference+0x48>)
 801c1f6:	4804      	ldr	r0, [pc, #16]	; (801c208 <pbuf_alloc_reference+0x4c>)
 801c1f8:	f00a faa4 	bl	8026744 <iprintf>
 801c1fc:	e7e6      	b.n	801c1cc <pbuf_alloc_reference+0x10>
 801c1fe:	bf00      	nop
 801c200:	08045364 	.word	0x08045364
 801c204:	08045454 	.word	0x08045454
 801c208:	0802b43c 	.word	0x0802b43c

0801c20c <pbuf_alloc>:
  switch (type) {
 801c20c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801c210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c214:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801c216:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801c21a:	d03d      	beq.n	801c298 <pbuf_alloc+0x8c>
 801c21c:	d80e      	bhi.n	801c23c <pbuf_alloc+0x30>
 801c21e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801c222:	2c01      	cmp	r4, #1
 801c224:	d033      	beq.n	801c28e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c226:	4b41      	ldr	r3, [pc, #260]	; (801c32c <pbuf_alloc+0x120>)
 801c228:	f240 1227 	movw	r2, #295	; 0x127
 801c22c:	4940      	ldr	r1, [pc, #256]	; (801c330 <pbuf_alloc+0x124>)
      return NULL;
 801c22e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c230:	4840      	ldr	r0, [pc, #256]	; (801c334 <pbuf_alloc+0x128>)
 801c232:	f00a fa87 	bl	8026744 <iprintf>
}
 801c236:	4628      	mov	r0, r5
 801c238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801c23c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801c240:	d1f1      	bne.n	801c226 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801c242:	f10a 0303 	add.w	r3, sl, #3
 801c246:	1cca      	adds	r2, r1, #3
 801c248:	4606      	mov	r6, r0
 801c24a:	f022 0203 	bic.w	r2, r2, #3
 801c24e:	f023 0303 	bic.w	r3, r3, #3
 801c252:	4413      	add	r3, r2
 801c254:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c256:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c25a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c25c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c25e:	d34d      	bcc.n	801c2fc <pbuf_alloc+0xf0>
 801c260:	4282      	cmp	r2, r0
 801c262:	d84b      	bhi.n	801c2fc <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801c264:	f7ff fab4 	bl	801b7d0 <mem_malloc>
      if (p == NULL) {
 801c268:	4605      	mov	r5, r0
 801c26a:	2800      	cmp	r0, #0
 801c26c:	d0e3      	beq.n	801c236 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c26e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801c270:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801c272:	4a31      	ldr	r2, [pc, #196]	; (801c338 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c274:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801c276:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801c27a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c27c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801c280:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801c284:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801c286:	6043      	str	r3, [r0, #4]
}
 801c288:	4628      	mov	r0, r5
 801c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801c28e:	2000      	movs	r0, #0
}
 801c290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801c294:	f7ff bf92 	b.w	801c1bc <pbuf_alloc_reference>
  switch (type) {
 801c298:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c29a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801c32c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801c29e:	4f27      	ldr	r7, [pc, #156]	; (801c33c <pbuf_alloc+0x130>)
  switch (type) {
 801c2a0:	4625      	mov	r5, r4
 801c2a2:	e009      	b.n	801c2b8 <pbuf_alloc+0xac>
          last->next = q;
 801c2a4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801c2a6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801c2aa:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801c2ae:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801c2b2:	f1b9 0f00 	cmp.w	r9, #0
 801c2b6:	d0be      	beq.n	801c236 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c2b8:	22f3      	movs	r2, #243	; 0xf3
 801c2ba:	4641      	mov	r1, r8
 801c2bc:	200f      	movs	r0, #15
 801c2be:	4626      	mov	r6, r4
 801c2c0:	f7ff fc28 	bl	801bb14 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2c4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801c2c8:	2100      	movs	r1, #0
        if (q == NULL) {
 801c2ca:	4604      	mov	r4, r0
 801c2cc:	b1d0      	cbz	r0, 801c304 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2ce:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2d2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801c2d6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2da:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2de:	3213      	adds	r2, #19
  p->next = NULL;
 801c2e0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2e2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2e4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801c2e8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2ea:	454b      	cmp	r3, r9
  p->payload = payload;
 801c2ec:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2ee:	bf28      	it	cs
 801c2f0:	464b      	movcs	r3, r9
  p->len = len;
 801c2f2:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801c2f4:	2d00      	cmp	r5, #0
 801c2f6:	d1d5      	bne.n	801c2a4 <pbuf_alloc+0x98>
 801c2f8:	4605      	mov	r5, r0
 801c2fa:	e7d4      	b.n	801c2a6 <pbuf_alloc+0x9a>
          return NULL;
 801c2fc:	2500      	movs	r5, #0
}
 801c2fe:	4628      	mov	r0, r5
 801c300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801c304:	4e0e      	ldr	r6, [pc, #56]	; (801c340 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801c306:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801c308:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801c30a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801c30c:	b133      	cbz	r3, 801c31c <pbuf_alloc+0x110>
          if (p) {
 801c30e:	2d00      	cmp	r5, #0
 801c310:	d0f4      	beq.n	801c2fc <pbuf_alloc+0xf0>
  if (p == NULL) {
 801c312:	4628      	mov	r0, r5
          return NULL;
 801c314:	2500      	movs	r5, #0
 801c316:	f7ff fe4b 	bl	801bfb0 <pbuf_free.part.0>
 801c31a:	e78c      	b.n	801c236 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c31c:	4601      	mov	r1, r0
 801c31e:	4809      	ldr	r0, [pc, #36]	; (801c344 <pbuf_alloc+0x138>)
 801c320:	f7fc fefc 	bl	801911c <tcpip_try_callback>
 801c324:	2800      	cmp	r0, #0
 801c326:	d0f2      	beq.n	801c30e <pbuf_alloc+0x102>
 801c328:	7034      	strb	r4, [r6, #0]
 801c32a:	e7f0      	b.n	801c30e <pbuf_alloc+0x102>
 801c32c:	08045364 	.word	0x08045364
 801c330:	08045468 	.word	0x08045468
 801c334:	0802b43c 	.word	0x0802b43c
 801c338:	00010080 	.word	0x00010080
 801c33c:	00010082 	.word	0x00010082
 801c340:	2002e495 	.word	0x2002e495
 801c344:	0801bf89 	.word	0x0801bf89

0801c348 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c348:	3003      	adds	r0, #3
 801c34a:	f020 0003 	bic.w	r0, r0, #3
{
 801c34e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c350:	eb01 0e00 	add.w	lr, r1, r0
{
 801c354:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801c358:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c35a:	45e6      	cmp	lr, ip
 801c35c:	d80d      	bhi.n	801c37a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801c35e:	b104      	cbz	r4, 801c362 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c360:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c362:	4618      	mov	r0, r3
  p->next = NULL;
 801c364:	2300      	movs	r3, #0
  p->payload = payload;
 801c366:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801c368:	2402      	movs	r4, #2
  p->next = NULL;
 801c36a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801c36c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801c36e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801c370:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801c372:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801c374:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801c376:	81c3      	strh	r3, [r0, #14]
}
 801c378:	bd10      	pop	{r4, pc}
    return NULL;
 801c37a:	2000      	movs	r0, #0
}
 801c37c:	bd10      	pop	{r4, pc}
 801c37e:	bf00      	nop

0801c380 <pbuf_realloc>:
{
 801c380:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c382:	4604      	mov	r4, r0
{
 801c384:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c386:	2800      	cmp	r0, #0
 801c388:	d037      	beq.n	801c3fa <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801c38a:	8922      	ldrh	r2, [r4, #8]
 801c38c:	42aa      	cmp	r2, r5
 801c38e:	d91b      	bls.n	801c3c8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801c390:	8963      	ldrh	r3, [r4, #10]
 801c392:	429d      	cmp	r5, r3
 801c394:	d90d      	bls.n	801c3b2 <pbuf_realloc+0x32>
 801c396:	1aa9      	subs	r1, r5, r2
 801c398:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c39a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801c39c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c39e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801c3a0:	b29d      	uxth	r5, r3
    q = q->next;
 801c3a2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c3a4:	2c00      	cmp	r4, #0
 801c3a6:	d030      	beq.n	801c40a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801c3a8:	8963      	ldrh	r3, [r4, #10]
 801c3aa:	42ab      	cmp	r3, r5
 801c3ac:	d201      	bcs.n	801c3b2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c3ae:	8922      	ldrh	r2, [r4, #8]
 801c3b0:	e7f3      	b.n	801c39a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c3b2:	7b22      	ldrb	r2, [r4, #12]
 801c3b4:	0712      	lsls	r2, r2, #28
 801c3b6:	d008      	beq.n	801c3ca <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801c3b8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801c3ba:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801c3bc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801c3be:	b108      	cbz	r0, 801c3c4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801c3c0:	f7ff fdf6 	bl	801bfb0 <pbuf_free.part.0>
  q->next = NULL;
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	6023      	str	r3, [r4, #0]
}
 801c3c8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c3ca:	429d      	cmp	r5, r3
 801c3cc:	d0f4      	beq.n	801c3b8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c3ce:	7b63      	ldrb	r3, [r4, #13]
 801c3d0:	079b      	lsls	r3, r3, #30
 801c3d2:	d4f1      	bmi.n	801c3b8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c3d4:	6863      	ldr	r3, [r4, #4]
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	1b1b      	subs	r3, r3, r4
 801c3da:	18e9      	adds	r1, r5, r3
 801c3dc:	b289      	uxth	r1, r1
 801c3de:	f7ff f91d 	bl	801b61c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c3e2:	4604      	mov	r4, r0
 801c3e4:	2800      	cmp	r0, #0
 801c3e6:	d1e7      	bne.n	801c3b8 <pbuf_realloc+0x38>
 801c3e8:	4b0c      	ldr	r3, [pc, #48]	; (801c41c <pbuf_realloc+0x9c>)
 801c3ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 801c3ee:	490c      	ldr	r1, [pc, #48]	; (801c420 <pbuf_realloc+0xa0>)
 801c3f0:	480c      	ldr	r0, [pc, #48]	; (801c424 <pbuf_realloc+0xa4>)
 801c3f2:	f00a f9a7 	bl	8026744 <iprintf>
  q->len = rem_len;
 801c3f6:	8164      	strh	r4, [r4, #10]
 801c3f8:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c3fa:	4b08      	ldr	r3, [pc, #32]	; (801c41c <pbuf_realloc+0x9c>)
 801c3fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c400:	4909      	ldr	r1, [pc, #36]	; (801c428 <pbuf_realloc+0xa8>)
 801c402:	4808      	ldr	r0, [pc, #32]	; (801c424 <pbuf_realloc+0xa4>)
 801c404:	f00a f99e 	bl	8026744 <iprintf>
 801c408:	e7bf      	b.n	801c38a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c40a:	4b04      	ldr	r3, [pc, #16]	; (801c41c <pbuf_realloc+0x9c>)
 801c40c:	f240 12af 	movw	r2, #431	; 0x1af
 801c410:	4906      	ldr	r1, [pc, #24]	; (801c42c <pbuf_realloc+0xac>)
 801c412:	4804      	ldr	r0, [pc, #16]	; (801c424 <pbuf_realloc+0xa4>)
 801c414:	f00a f996 	bl	8026744 <iprintf>
  while (rem_len > q->len) {
 801c418:	8963      	ldrh	r3, [r4, #10]
 801c41a:	deff      	udf	#255	; 0xff
 801c41c:	08045364 	.word	0x08045364
 801c420:	080454b4 	.word	0x080454b4
 801c424:	0802b43c 	.word	0x0802b43c
 801c428:	08045484 	.word	0x08045484
 801c42c:	0804549c 	.word	0x0804549c

0801c430 <pbuf_add_header>:
{
 801c430:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c432:	b310      	cbz	r0, 801c47a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c434:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c438:	d20c      	bcs.n	801c454 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801c43a:	b169      	cbz	r1, 801c458 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801c43c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c440:	8902      	ldrh	r2, [r0, #8]
 801c442:	4603      	mov	r3, r0
 801c444:	4462      	add	r2, ip
 801c446:	b292      	uxth	r2, r2
 801c448:	4594      	cmp	ip, r2
 801c44a:	d803      	bhi.n	801c454 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c44c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801c450:	2800      	cmp	r0, #0
 801c452:	db03      	blt.n	801c45c <pbuf_add_header+0x2c>
    return 1;
 801c454:	2001      	movs	r0, #1
}
 801c456:	bd08      	pop	{r3, pc}
    return 0;
 801c458:	4608      	mov	r0, r1
}
 801c45a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801c45c:	6858      	ldr	r0, [r3, #4]
 801c45e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c460:	f103 0010 	add.w	r0, r3, #16
 801c464:	4281      	cmp	r1, r0
 801c466:	d3f5      	bcc.n	801c454 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c468:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c46c:	2000      	movs	r0, #0
  p->payload = payload;
 801c46e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c470:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c472:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c474:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c478:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c47a:	4b04      	ldr	r3, [pc, #16]	; (801c48c <pbuf_add_header+0x5c>)
 801c47c:	f240 12df 	movw	r2, #479	; 0x1df
 801c480:	4903      	ldr	r1, [pc, #12]	; (801c490 <pbuf_add_header+0x60>)
 801c482:	4804      	ldr	r0, [pc, #16]	; (801c494 <pbuf_add_header+0x64>)
 801c484:	f00a f95e 	bl	8026744 <iprintf>
    return 1;
 801c488:	2001      	movs	r0, #1
}
 801c48a:	bd08      	pop	{r3, pc}
 801c48c:	08045364 	.word	0x08045364
 801c490:	08046d90 	.word	0x08046d90
 801c494:	0802b43c 	.word	0x0802b43c

0801c498 <pbuf_remove_header>:
{
 801c498:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c49a:	b1c8      	cbz	r0, 801c4d0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c49c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c4a0:	d21f      	bcs.n	801c4e2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801c4a2:	b199      	cbz	r1, 801c4cc <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801c4a4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c4a8:	8942      	ldrh	r2, [r0, #10]
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	4594      	cmp	ip, r2
 801c4ae:	d81a      	bhi.n	801c4e6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4b0:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801c4b2:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4b6:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4ba:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801c4bc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4be:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801c4c2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4c4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4c6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801c4ca:	bd08      	pop	{r3, pc}
    return 0;
 801c4cc:	4608      	mov	r0, r1
}
 801c4ce:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c4d0:	4b09      	ldr	r3, [pc, #36]	; (801c4f8 <pbuf_remove_header+0x60>)
 801c4d2:	f240 224b 	movw	r2, #587	; 0x24b
 801c4d6:	4909      	ldr	r1, [pc, #36]	; (801c4fc <pbuf_remove_header+0x64>)
 801c4d8:	4809      	ldr	r0, [pc, #36]	; (801c500 <pbuf_remove_header+0x68>)
 801c4da:	f00a f933 	bl	8026744 <iprintf>
    return 1;
 801c4de:	2001      	movs	r0, #1
}
 801c4e0:	bd08      	pop	{r3, pc}
    return 1;
 801c4e2:	2001      	movs	r0, #1
}
 801c4e4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c4e6:	4b04      	ldr	r3, [pc, #16]	; (801c4f8 <pbuf_remove_header+0x60>)
 801c4e8:	f240 2255 	movw	r2, #597	; 0x255
 801c4ec:	4905      	ldr	r1, [pc, #20]	; (801c504 <pbuf_remove_header+0x6c>)
 801c4ee:	4804      	ldr	r0, [pc, #16]	; (801c500 <pbuf_remove_header+0x68>)
 801c4f0:	f00a f928 	bl	8026744 <iprintf>
 801c4f4:	2001      	movs	r0, #1
}
 801c4f6:	bd08      	pop	{r3, pc}
 801c4f8:	08045364 	.word	0x08045364
 801c4fc:	08046d90 	.word	0x08046d90
 801c500:	0802b43c 	.word	0x0802b43c
 801c504:	080454d0 	.word	0x080454d0

0801c508 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801c508:	2900      	cmp	r1, #0
 801c50a:	db1a      	blt.n	801c542 <pbuf_header_force+0x3a>
{
 801c50c:	b508      	push	{r3, lr}
 801c50e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801c510:	b1d0      	cbz	r0, 801c548 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801c512:	b341      	cbz	r1, 801c566 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801c514:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c518:	891a      	ldrh	r2, [r3, #8]
 801c51a:	4462      	add	r2, ip
 801c51c:	b292      	uxth	r2, r2
 801c51e:	4594      	cmp	ip, r2
 801c520:	d81f      	bhi.n	801c562 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c522:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801c526:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801c528:	6858      	ldr	r0, [r3, #4]
 801c52a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c52e:	db14      	blt.n	801c55a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c530:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c534:	2000      	movs	r0, #0
  p->payload = payload;
 801c536:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c538:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c53a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c53c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c540:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c542:	4249      	negs	r1, r1
 801c544:	f7ff bfa8 	b.w	801c498 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c548:	4b08      	ldr	r3, [pc, #32]	; (801c56c <pbuf_header_force+0x64>)
 801c54a:	f240 12df 	movw	r2, #479	; 0x1df
 801c54e:	4908      	ldr	r1, [pc, #32]	; (801c570 <pbuf_header_force+0x68>)
 801c550:	4808      	ldr	r0, [pc, #32]	; (801c574 <pbuf_header_force+0x6c>)
 801c552:	f00a f8f7 	bl	8026744 <iprintf>
    return 1;
 801c556:	2001      	movs	r0, #1
}
 801c558:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c55a:	f103 0010 	add.w	r0, r3, #16
 801c55e:	4281      	cmp	r1, r0
 801c560:	d2e6      	bcs.n	801c530 <pbuf_header_force+0x28>
    return 1;
 801c562:	2001      	movs	r0, #1
}
 801c564:	bd08      	pop	{r3, pc}
    return 0;
 801c566:	4608      	mov	r0, r1
}
 801c568:	bd08      	pop	{r3, pc}
 801c56a:	bf00      	nop
 801c56c:	08045364 	.word	0x08045364
 801c570:	08046d90 	.word	0x08046d90
 801c574:	0802b43c 	.word	0x0802b43c

0801c578 <pbuf_free_header>:
{
 801c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801c57a:	4604      	mov	r4, r0
 801c57c:	b158      	cbz	r0, 801c596 <pbuf_free_header+0x1e>
 801c57e:	460d      	mov	r5, r1
 801c580:	b149      	cbz	r1, 801c596 <pbuf_free_header+0x1e>
      f->next = 0;
 801c582:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801c584:	8963      	ldrh	r3, [r4, #10]
 801c586:	4620      	mov	r0, r4
 801c588:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801c58a:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801c58e:	d904      	bls.n	801c59a <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801c590:	4629      	mov	r1, r5
 801c592:	f7ff ff81 	bl	801c498 <pbuf_remove_header>
}
 801c596:	4620      	mov	r0, r4
 801c598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801c59a:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801c59c:	b295      	uxth	r5, r2
      f->next = 0;
 801c59e:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801c5a0:	4634      	mov	r4, r6
 801c5a2:	f7ff fd05 	bl	801bfb0 <pbuf_free.part.0>
  while (free_left && p) {
 801c5a6:	b10d      	cbz	r5, 801c5ac <pbuf_free_header+0x34>
 801c5a8:	2e00      	cmp	r6, #0
 801c5aa:	d1eb      	bne.n	801c584 <pbuf_free_header+0xc>
      p = p->next;
 801c5ac:	4634      	mov	r4, r6
 801c5ae:	e7f2      	b.n	801c596 <pbuf_free_header+0x1e>

0801c5b0 <pbuf_free>:
  if (p == NULL) {
 801c5b0:	b108      	cbz	r0, 801c5b6 <pbuf_free+0x6>
 801c5b2:	f7ff bcfd 	b.w	801bfb0 <pbuf_free.part.0>
{
 801c5b6:	b510      	push	{r4, lr}
 801c5b8:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801c5ba:	4b04      	ldr	r3, [pc, #16]	; (801c5cc <pbuf_free+0x1c>)
 801c5bc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c5c0:	4903      	ldr	r1, [pc, #12]	; (801c5d0 <pbuf_free+0x20>)
 801c5c2:	4804      	ldr	r0, [pc, #16]	; (801c5d4 <pbuf_free+0x24>)
 801c5c4:	f00a f8be 	bl	8026744 <iprintf>
}
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	bd10      	pop	{r4, pc}
 801c5cc:	08045364 	.word	0x08045364
 801c5d0:	08046d90 	.word	0x08046d90
 801c5d4:	0802b43c 	.word	0x0802b43c

0801c5d8 <pbuf_clen>:
  while (p != NULL) {
 801c5d8:	4603      	mov	r3, r0
 801c5da:	b130      	cbz	r0, 801c5ea <pbuf_clen+0x12>
  len = 0;
 801c5dc:	2000      	movs	r0, #0
    ++len;
 801c5de:	3001      	adds	r0, #1
    p = p->next;
 801c5e0:	681b      	ldr	r3, [r3, #0]
    ++len;
 801c5e2:	b280      	uxth	r0, r0
  while (p != NULL) {
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d1fa      	bne.n	801c5de <pbuf_clen+0x6>
 801c5e8:	4770      	bx	lr
}
 801c5ea:	4770      	bx	lr

0801c5ec <pbuf_ref>:
  if (p != NULL) {
 801c5ec:	b120      	cbz	r0, 801c5f8 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c5ee:	7b83      	ldrb	r3, [r0, #14]
 801c5f0:	3301      	adds	r3, #1
 801c5f2:	b2db      	uxtb	r3, r3
 801c5f4:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c5f6:	b103      	cbz	r3, 801c5fa <pbuf_ref+0xe>
}
 801c5f8:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c5fa:	4b03      	ldr	r3, [pc, #12]	; (801c608 <pbuf_ref+0x1c>)
 801c5fc:	f240 3242 	movw	r2, #834	; 0x342
 801c600:	4902      	ldr	r1, [pc, #8]	; (801c60c <pbuf_ref+0x20>)
 801c602:	4803      	ldr	r0, [pc, #12]	; (801c610 <pbuf_ref+0x24>)
 801c604:	f00a b89e 	b.w	8026744 <iprintf>
 801c608:	08045364 	.word	0x08045364
 801c60c:	080454f0 	.word	0x080454f0
 801c610:	0802b43c 	.word	0x0802b43c

0801c614 <pbuf_cat>:
{
 801c614:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c616:	b330      	cbz	r0, 801c666 <pbuf_cat+0x52>
 801c618:	460d      	mov	r5, r1
 801c61a:	b321      	cbz	r1, 801c666 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801c61c:	6803      	ldr	r3, [r0, #0]
 801c61e:	4604      	mov	r4, r0
 801c620:	b13b      	cbz	r3, 801c632 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c622:	8922      	ldrh	r2, [r4, #8]
 801c624:	8928      	ldrh	r0, [r5, #8]
 801c626:	4402      	add	r2, r0
 801c628:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c62a:	461c      	mov	r4, r3
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d1f7      	bne.n	801c622 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c632:	8963      	ldrh	r3, [r4, #10]
 801c634:	8922      	ldrh	r2, [r4, #8]
 801c636:	429a      	cmp	r2, r3
 801c638:	d010      	beq.n	801c65c <pbuf_cat+0x48>
 801c63a:	4b0f      	ldr	r3, [pc, #60]	; (801c678 <pbuf_cat+0x64>)
 801c63c:	f240 3262 	movw	r2, #866	; 0x362
 801c640:	490e      	ldr	r1, [pc, #56]	; (801c67c <pbuf_cat+0x68>)
 801c642:	480f      	ldr	r0, [pc, #60]	; (801c680 <pbuf_cat+0x6c>)
 801c644:	f00a f87e 	bl	8026744 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c648:	6823      	ldr	r3, [r4, #0]
 801c64a:	b133      	cbz	r3, 801c65a <pbuf_cat+0x46>
 801c64c:	4b0a      	ldr	r3, [pc, #40]	; (801c678 <pbuf_cat+0x64>)
 801c64e:	f240 3263 	movw	r2, #867	; 0x363
 801c652:	490c      	ldr	r1, [pc, #48]	; (801c684 <pbuf_cat+0x70>)
 801c654:	480a      	ldr	r0, [pc, #40]	; (801c680 <pbuf_cat+0x6c>)
 801c656:	f00a f875 	bl	8026744 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c65a:	8923      	ldrh	r3, [r4, #8]
 801c65c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801c65e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c660:	4413      	add	r3, r2
 801c662:	8123      	strh	r3, [r4, #8]
}
 801c664:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c666:	4b04      	ldr	r3, [pc, #16]	; (801c678 <pbuf_cat+0x64>)
 801c668:	f240 3259 	movw	r2, #857	; 0x359
 801c66c:	4906      	ldr	r1, [pc, #24]	; (801c688 <pbuf_cat+0x74>)
 801c66e:	4804      	ldr	r0, [pc, #16]	; (801c680 <pbuf_cat+0x6c>)
}
 801c670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c674:	f00a b866 	b.w	8026744 <iprintf>
 801c678:	08045364 	.word	0x08045364
 801c67c:	0804553c 	.word	0x0804553c
 801c680:	0802b43c 	.word	0x0802b43c
 801c684:	0804556c 	.word	0x0804556c
 801c688:	08045504 	.word	0x08045504

0801c68c <pbuf_chain>:
{
 801c68c:	b510      	push	{r4, lr}
 801c68e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801c690:	f7ff ffc0 	bl	801c614 <pbuf_cat>
  if (p != NULL) {
 801c694:	b124      	cbz	r4, 801c6a0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c696:	7ba3      	ldrb	r3, [r4, #14]
 801c698:	3301      	adds	r3, #1
 801c69a:	b2db      	uxtb	r3, r3
 801c69c:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c69e:	b103      	cbz	r3, 801c6a2 <pbuf_chain+0x16>
}
 801c6a0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c6a2:	4b04      	ldr	r3, [pc, #16]	; (801c6b4 <pbuf_chain+0x28>)
 801c6a4:	f240 3242 	movw	r2, #834	; 0x342
 801c6a8:	4903      	ldr	r1, [pc, #12]	; (801c6b8 <pbuf_chain+0x2c>)
 801c6aa:	4804      	ldr	r0, [pc, #16]	; (801c6bc <pbuf_chain+0x30>)
}
 801c6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c6b0:	f00a b848 	b.w	8026744 <iprintf>
 801c6b4:	08045364 	.word	0x08045364
 801c6b8:	080454f0 	.word	0x080454f0
 801c6bc:	0802b43c 	.word	0x0802b43c

0801c6c0 <pbuf_copy>:
{
 801c6c0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c6c2:	b140      	cbz	r0, 801c6d6 <pbuf_copy+0x16>
 801c6c4:	b139      	cbz	r1, 801c6d6 <pbuf_copy+0x16>
 801c6c6:	8902      	ldrh	r2, [r0, #8]
 801c6c8:	890b      	ldrh	r3, [r1, #8]
 801c6ca:	429a      	cmp	r2, r3
 801c6cc:	d303      	bcc.n	801c6d6 <pbuf_copy+0x16>
}
 801c6ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c6d2:	f7ff bcd1 	b.w	801c078 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c6d6:	4b05      	ldr	r3, [pc, #20]	; (801c6ec <pbuf_copy+0x2c>)
 801c6d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c6dc:	4904      	ldr	r1, [pc, #16]	; (801c6f0 <pbuf_copy+0x30>)
 801c6de:	4805      	ldr	r0, [pc, #20]	; (801c6f4 <pbuf_copy+0x34>)
 801c6e0:	f00a f830 	bl	8026744 <iprintf>
}
 801c6e4:	f06f 000f 	mvn.w	r0, #15
 801c6e8:	bd08      	pop	{r3, pc}
 801c6ea:	bf00      	nop
 801c6ec:	08045364 	.word	0x08045364
 801c6f0:	0804557c 	.word	0x0804557c
 801c6f4:	0802b43c 	.word	0x0802b43c

0801c6f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801c6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c6fc:	4605      	mov	r5, r0
 801c6fe:	b370      	cbz	r0, 801c75e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c700:	460f      	mov	r7, r1
 801c702:	2900      	cmp	r1, #0
 801c704:	d036      	beq.n	801c774 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c706:	4690      	mov	r8, r2
 801c708:	b392      	cbz	r2, 801c770 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801c70a:	2600      	movs	r6, #0
 801c70c:	e005      	b.n	801c71a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801c70e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c710:	682d      	ldr	r5, [r5, #0]
 801c712:	f1b8 0f00 	cmp.w	r8, #0
 801c716:	d01f      	beq.n	801c758 <pbuf_copy_partial+0x60>
 801c718:	b1f5      	cbz	r5, 801c758 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c71a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801c71c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801c720:	b11b      	cbz	r3, 801c72a <pbuf_copy_partial+0x32>
 801c722:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801c724:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801c728:	d2f1      	bcs.n	801c70e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801c72a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c72e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801c730:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c734:	4419      	add	r1, r3
 801c736:	4544      	cmp	r4, r8
 801c738:	bf28      	it	cs
 801c73a:	4644      	movcs	r4, r8
 801c73c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c73e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801c740:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c744:	f009 f838 	bl	80257b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c748:	b2b6      	uxth	r6, r6
      offset = 0;
 801c74a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801c74c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c750:	682d      	ldr	r5, [r5, #0]
 801c752:	f1b8 0f00 	cmp.w	r8, #0
 801c756:	d1df      	bne.n	801c718 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801c758:	4630      	mov	r0, r6
 801c75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c75e:	4b0a      	ldr	r3, [pc, #40]	; (801c788 <pbuf_copy_partial+0x90>)
 801c760:	f240 420a 	movw	r2, #1034	; 0x40a
 801c764:	4909      	ldr	r1, [pc, #36]	; (801c78c <pbuf_copy_partial+0x94>)
 801c766:	462e      	mov	r6, r5
 801c768:	4809      	ldr	r0, [pc, #36]	; (801c790 <pbuf_copy_partial+0x98>)
 801c76a:	f009 ffeb 	bl	8026744 <iprintf>
 801c76e:	e7f3      	b.n	801c758 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801c770:	4616      	mov	r6, r2
 801c772:	e7f1      	b.n	801c758 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c774:	4b04      	ldr	r3, [pc, #16]	; (801c788 <pbuf_copy_partial+0x90>)
 801c776:	f240 420b 	movw	r2, #1035	; 0x40b
 801c77a:	4906      	ldr	r1, [pc, #24]	; (801c794 <pbuf_copy_partial+0x9c>)
 801c77c:	463e      	mov	r6, r7
 801c77e:	4804      	ldr	r0, [pc, #16]	; (801c790 <pbuf_copy_partial+0x98>)
 801c780:	f009 ffe0 	bl	8026744 <iprintf>
 801c784:	e7e8      	b.n	801c758 <pbuf_copy_partial+0x60>
 801c786:	bf00      	nop
 801c788:	08045364 	.word	0x08045364
 801c78c:	080455ac 	.word	0x080455ac
 801c790:	0802b43c 	.word	0x0802b43c
 801c794:	080455cc 	.word	0x080455cc

0801c798 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801c798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c79c:	2800      	cmp	r0, #0
 801c79e:	d049      	beq.n	801c834 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c7a0:	460f      	mov	r7, r1
 801c7a2:	2900      	cmp	r1, #0
 801c7a4:	d03c      	beq.n	801c820 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c7a6:	8903      	ldrh	r3, [r0, #8]
 801c7a8:	4604      	mov	r4, r0
 801c7aa:	4690      	mov	r8, r2
 801c7ac:	4293      	cmp	r3, r2
 801c7ae:	d32d      	bcc.n	801c80c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c7b0:	b34a      	cbz	r2, 801c806 <pbuf_take+0x6e>
 801c7b2:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801c7b4:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c7b6:	f8df b094 	ldr.w	fp, [pc, #148]	; 801c84c <pbuf_take+0xb4>
 801c7ba:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801c860 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801c7be:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c7c0:	19b9      	adds	r1, r7, r6
 801c7c2:	6860      	ldr	r0, [r4, #4]
 801c7c4:	42aa      	cmp	r2, r5
 801c7c6:	bf28      	it	cs
 801c7c8:	462a      	movcs	r2, r5
 801c7ca:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801c7cc:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c7ce:	f008 fff3 	bl	80257b8 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c7d2:	6824      	ldr	r4, [r4, #0]
 801c7d4:	ebb5 0509 	subs.w	r5, r5, r9
 801c7d8:	d009      	beq.n	801c7ee <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c7da:	2c00      	cmp	r4, #0
 801c7dc:	d1ef      	bne.n	801c7be <pbuf_take+0x26>
 801c7de:	465b      	mov	r3, fp
 801c7e0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801c7e4:	4651      	mov	r1, sl
 801c7e6:	4818      	ldr	r0, [pc, #96]	; (801c848 <pbuf_take+0xb0>)
 801c7e8:	f009 ffac 	bl	8026744 <iprintf>
 801c7ec:	e7e7      	b.n	801c7be <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801c7ee:	45b0      	cmp	r8, r6
 801c7f0:	d009      	beq.n	801c806 <pbuf_take+0x6e>
 801c7f2:	4b16      	ldr	r3, [pc, #88]	; (801c84c <pbuf_take+0xb4>)
 801c7f4:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801c7f8:	4915      	ldr	r1, [pc, #84]	; (801c850 <pbuf_take+0xb8>)
 801c7fa:	4813      	ldr	r0, [pc, #76]	; (801c848 <pbuf_take+0xb0>)
 801c7fc:	f009 ffa2 	bl	8026744 <iprintf>
  return ERR_OK;
 801c800:	4628      	mov	r0, r5
}
 801c802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801c806:	2000      	movs	r0, #0
}
 801c808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c80c:	4b0f      	ldr	r3, [pc, #60]	; (801c84c <pbuf_take+0xb4>)
 801c80e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801c812:	4910      	ldr	r1, [pc, #64]	; (801c854 <pbuf_take+0xbc>)
 801c814:	480c      	ldr	r0, [pc, #48]	; (801c848 <pbuf_take+0xb0>)
 801c816:	f009 ff95 	bl	8026744 <iprintf>
 801c81a:	f04f 30ff 	mov.w	r0, #4294967295
 801c81e:	e7f3      	b.n	801c808 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c820:	4b0a      	ldr	r3, [pc, #40]	; (801c84c <pbuf_take+0xb4>)
 801c822:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801c826:	490c      	ldr	r1, [pc, #48]	; (801c858 <pbuf_take+0xc0>)
 801c828:	4807      	ldr	r0, [pc, #28]	; (801c848 <pbuf_take+0xb0>)
 801c82a:	f009 ff8b 	bl	8026744 <iprintf>
 801c82e:	f06f 000f 	mvn.w	r0, #15
 801c832:	e7e9      	b.n	801c808 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c834:	4b05      	ldr	r3, [pc, #20]	; (801c84c <pbuf_take+0xb4>)
 801c836:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801c83a:	4908      	ldr	r1, [pc, #32]	; (801c85c <pbuf_take+0xc4>)
 801c83c:	4802      	ldr	r0, [pc, #8]	; (801c848 <pbuf_take+0xb0>)
 801c83e:	f009 ff81 	bl	8026744 <iprintf>
 801c842:	f06f 000f 	mvn.w	r0, #15
 801c846:	e7df      	b.n	801c808 <pbuf_take+0x70>
 801c848:	0802b43c 	.word	0x0802b43c
 801c84c:	08045364 	.word	0x08045364
 801c850:	0804565c 	.word	0x0804565c
 801c854:	08045624 	.word	0x08045624
 801c858:	08045608 	.word	0x08045608
 801c85c:	080455f0 	.word	0x080455f0
 801c860:	08045644 	.word	0x08045644

0801c864 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c864:	b390      	cbz	r0, 801c8cc <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c86a:	460f      	mov	r7, r1
 801c86c:	4604      	mov	r4, r0
 801c86e:	e002      	b.n	801c876 <pbuf_take_at+0x12>
    q = q->next;
 801c870:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c872:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801c874:	b334      	cbz	r4, 801c8c4 <pbuf_take_at+0x60>
 801c876:	8965      	ldrh	r5, [r4, #10]
 801c878:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801c87a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801c87e:	d9f7      	bls.n	801c870 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801c880:	8921      	ldrh	r1, [r4, #8]
 801c882:	189e      	adds	r6, r3, r2
 801c884:	42b1      	cmp	r1, r6
 801c886:	db1d      	blt.n	801c8c4 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801c888:	1ae9      	subs	r1, r5, r3
 801c88a:	428a      	cmp	r2, r1
 801c88c:	dc07      	bgt.n	801c89e <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c88e:	6860      	ldr	r0, [r4, #4]
 801c890:	4639      	mov	r1, r7
 801c892:	4418      	add	r0, r3
 801c894:	f008 ff90 	bl	80257b8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801c898:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801c89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c89e:	fa1f f881 	uxth.w	r8, r1
 801c8a2:	6860      	ldr	r0, [r4, #4]
 801c8a4:	4639      	mov	r1, r7
 801c8a6:	4642      	mov	r2, r8
 801c8a8:	4418      	add	r0, r3
 801c8aa:	f008 ff85 	bl	80257b8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801c8ae:	1b70      	subs	r0, r6, r5
 801c8b0:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801c8b2:	2a00      	cmp	r2, #0
 801c8b4:	d0f0      	beq.n	801c898 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c8b6:	eb07 0108 	add.w	r1, r7, r8
 801c8ba:	6820      	ldr	r0, [r4, #0]
}
 801c8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c8c0:	f7ff bf6a 	b.w	801c798 <pbuf_take>
  return ERR_MEM;
 801c8c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801c8cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c8d0:	4770      	bx	lr
 801c8d2:	bf00      	nop

0801c8d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801c8d4:	b538      	push	{r3, r4, r5, lr}
 801c8d6:	4615      	mov	r5, r2
 801c8d8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801c8da:	8929      	ldrh	r1, [r5, #8]
 801c8dc:	f7ff fc96 	bl	801c20c <pbuf_alloc>
  if (q == NULL) {
 801c8e0:	4604      	mov	r4, r0
 801c8e2:	b138      	cbz	r0, 801c8f4 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c8e4:	8902      	ldrh	r2, [r0, #8]
 801c8e6:	892b      	ldrh	r3, [r5, #8]
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d305      	bcc.n	801c8f8 <pbuf_clone+0x24>
 801c8ec:	4629      	mov	r1, r5
 801c8ee:	f7ff fbc3 	bl	801c078 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c8f2:	b940      	cbnz	r0, 801c906 <pbuf_clone+0x32>
  return q;
}
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c8f8:	4b07      	ldr	r3, [pc, #28]	; (801c918 <pbuf_clone+0x44>)
 801c8fa:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c8fe:	4907      	ldr	r1, [pc, #28]	; (801c91c <pbuf_clone+0x48>)
 801c900:	4807      	ldr	r0, [pc, #28]	; (801c920 <pbuf_clone+0x4c>)
 801c902:	f009 ff1f 	bl	8026744 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c906:	4b04      	ldr	r3, [pc, #16]	; (801c918 <pbuf_clone+0x44>)
 801c908:	f240 5224 	movw	r2, #1316	; 0x524
 801c90c:	4905      	ldr	r1, [pc, #20]	; (801c924 <pbuf_clone+0x50>)
 801c90e:	4804      	ldr	r0, [pc, #16]	; (801c920 <pbuf_clone+0x4c>)
 801c910:	f009 ff18 	bl	8026744 <iprintf>
}
 801c914:	4620      	mov	r0, r4
 801c916:	bd38      	pop	{r3, r4, r5, pc}
 801c918:	08045364 	.word	0x08045364
 801c91c:	0804557c 	.word	0x0804557c
 801c920:	0802b43c 	.word	0x0802b43c
 801c924:	08045674 	.word	0x08045674

0801c928 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c928:	b918      	cbnz	r0, 801c932 <pbuf_get_at+0xa>
 801c92a:	e00a      	b.n	801c942 <pbuf_get_at+0x1a>
    q = q->next;
 801c92c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c92e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c930:	b130      	cbz	r0, 801c940 <pbuf_get_at+0x18>
 801c932:	8943      	ldrh	r3, [r0, #10]
 801c934:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c936:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c93a:	d9f7      	bls.n	801c92c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801c93c:	6843      	ldr	r3, [r0, #4]
 801c93e:	5c58      	ldrb	r0, [r3, r1]
}
 801c940:	4770      	bx	lr
 801c942:	4770      	bx	lr

0801c944 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c944:	b140      	cbz	r0, 801c958 <pbuf_try_get_at+0x14>
 801c946:	8943      	ldrh	r3, [r0, #10]
 801c948:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c94a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c94e:	d806      	bhi.n	801c95e <pbuf_try_get_at+0x1a>
    q = q->next;
 801c950:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c952:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c954:	2800      	cmp	r0, #0
 801c956:	d1f6      	bne.n	801c946 <pbuf_try_get_at+0x2>
  }
  return -1;
 801c958:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c95c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801c95e:	6843      	ldr	r3, [r0, #4]
 801c960:	5c58      	ldrb	r0, [r3, r1]
 801c962:	4770      	bx	lr

0801c964 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c964:	b918      	cbnz	r0, 801c96e <pbuf_put_at+0xa>
 801c966:	e00a      	b.n	801c97e <pbuf_put_at+0x1a>
    q = q->next;
 801c968:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c96a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c96c:	b130      	cbz	r0, 801c97c <pbuf_put_at+0x18>
 801c96e:	8943      	ldrh	r3, [r0, #10]
 801c970:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c972:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c976:	d9f7      	bls.n	801c968 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801c978:	6843      	ldr	r3, [r0, #4]
 801c97a:	545a      	strb	r2, [r3, r1]
  }
}
 801c97c:	4770      	bx	lr
 801c97e:	4770      	bx	lr

0801c980 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801c980:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801c982:	8905      	ldrh	r5, [r0, #8]
 801c984:	18cc      	adds	r4, r1, r3
 801c986:	42a5      	cmp	r5, r4
 801c988:	db2e      	blt.n	801c9e8 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801c98a:	8944      	ldrh	r4, [r0, #10]
 801c98c:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801c98e:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c992:	d803      	bhi.n	801c99c <pbuf_memcmp+0x1c>
    q = q->next;
 801c994:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801c996:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c998:	2800      	cmp	r0, #0
 801c99a:	d1f6      	bne.n	801c98a <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801c99c:	b1f3      	cbz	r3, 801c9dc <pbuf_memcmp+0x5c>
 801c99e:	2500      	movs	r5, #0
 801c9a0:	1e56      	subs	r6, r2, #1
 801c9a2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801c9a4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	fa1f fc8c 	uxth.w	ip, ip
 801c9ae:	b920      	cbnz	r0, 801c9ba <pbuf_memcmp+0x3a>
 801c9b0:	e00b      	b.n	801c9ca <pbuf_memcmp+0x4a>
    q = q->next;
 801c9b2:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c9b4:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9b8:	b13c      	cbz	r4, 801c9ca <pbuf_memcmp+0x4a>
 801c9ba:	8962      	ldrh	r2, [r4, #10]
 801c9bc:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801c9be:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9c2:	d2f6      	bcs.n	801c9b2 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801c9c4:	6862      	ldr	r2, [r4, #4]
 801c9c6:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801c9ca:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801c9ce:	42a2      	cmp	r2, r4
 801c9d0:	d106      	bne.n	801c9e0 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801c9d2:	3501      	adds	r5, #1
 801c9d4:	fa1f fe85 	uxth.w	lr, r5
 801c9d8:	4573      	cmp	r3, lr
 801c9da:	d8e3      	bhi.n	801c9a4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801c9dc:	2000      	movs	r0, #0
}
 801c9de:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801c9e0:	f10e 0001 	add.w	r0, lr, #1
 801c9e4:	b280      	uxth	r0, r0
}
 801c9e6:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801c9e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c9ec:	bd70      	pop	{r4, r5, r6, pc}
 801c9ee:	bf00      	nop

0801c9f0 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9f2:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c9f4:	8905      	ldrh	r5, [r0, #8]
{
 801c9f6:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801c9f8:	4422      	add	r2, r4
 801c9fa:	4295      	cmp	r5, r2
 801c9fc:	db15      	blt.n	801ca2a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c9fe:	1aed      	subs	r5, r5, r3
 801ca00:	4606      	mov	r6, r0
 801ca02:	460f      	mov	r7, r1
 801ca04:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801ca06:	42a5      	cmp	r5, r4
 801ca08:	d204      	bcs.n	801ca14 <pbuf_memfind+0x24>
 801ca0a:	e00e      	b.n	801ca2a <pbuf_memfind+0x3a>
 801ca0c:	fa1f f48c 	uxth.w	r4, ip
 801ca10:	42a5      	cmp	r5, r4
 801ca12:	d30a      	bcc.n	801ca2a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801ca14:	4621      	mov	r1, r4
 801ca16:	463a      	mov	r2, r7
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f7ff ffb1 	bl	801c980 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801ca1e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d1f2      	bne.n	801ca0c <pbuf_memfind+0x1c>
 801ca26:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801ca28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801ca2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801ca2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ca30 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801ca30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca34:	4e33      	ldr	r6, [pc, #204]	; (801cb04 <raw_input+0xd4>)
{
 801ca36:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca38:	6831      	ldr	r1, [r6, #0]
 801ca3a:	6970      	ldr	r0, [r6, #20]
 801ca3c:	f007 fb90 	bl	8024160 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801ca40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ca44:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801ca46:	4b30      	ldr	r3, [pc, #192]	; (801cb08 <raw_input+0xd8>)
 801ca48:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801ca4a:	2c00      	cmp	r4, #0
 801ca4c:	d056      	beq.n	801cafc <raw_input+0xcc>
 801ca4e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801ca50:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ca52:	f106 0b10 	add.w	fp, r6, #16
 801ca56:	46ca      	mov	sl, r9
  prev = NULL;
 801ca58:	4606      	mov	r6, r0
 801ca5a:	e004      	b.n	801ca66 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801ca5c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801ca5e:	4626      	mov	r6, r4
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d037      	beq.n	801cad4 <raw_input+0xa4>
 801ca64:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ca66:	7c23      	ldrb	r3, [r4, #16]
 801ca68:	42ab      	cmp	r3, r5
 801ca6a:	d1f7      	bne.n	801ca5c <raw_input+0x2c>
 801ca6c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca6e:	b13a      	cbz	r2, 801ca80 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca70:	4b24      	ldr	r3, [pc, #144]	; (801cb04 <raw_input+0xd4>)
 801ca72:	685b      	ldr	r3, [r3, #4]
 801ca74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ca78:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca7a:	b2db      	uxtb	r3, r3
 801ca7c:	429a      	cmp	r2, r3
 801ca7e:	d1ed      	bne.n	801ca5c <raw_input+0x2c>
 801ca80:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801ca82:	f1ba 0f00 	cmp.w	sl, #0
 801ca86:	d027      	beq.n	801cad8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d1e7      	bne.n	801ca5c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ca8c:	7c63      	ldrb	r3, [r4, #17]
 801ca8e:	07db      	lsls	r3, r3, #31
 801ca90:	d504      	bpl.n	801ca9c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801ca92:	4b1c      	ldr	r3, [pc, #112]	; (801cb04 <raw_input+0xd4>)
 801ca94:	6862      	ldr	r2, [r4, #4]
 801ca96:	691b      	ldr	r3, [r3, #16]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d1df      	bne.n	801ca5c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801ca9c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801caa0:	f1b9 0f00 	cmp.w	r9, #0
 801caa4:	d0da      	beq.n	801ca5c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801caa6:	465b      	mov	r3, fp
 801caa8:	4642      	mov	r2, r8
 801caaa:	4621      	mov	r1, r4
 801caac:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801caae:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801cab2:	47c8      	blx	r9
        if (eaten != 0) {
 801cab4:	b9c8      	cbnz	r0, 801caea <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801cab6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801caba:	42bb      	cmp	r3, r7
 801cabc:	d013      	beq.n	801cae6 <raw_input+0xb6>
 801cabe:	4b13      	ldr	r3, [pc, #76]	; (801cb0c <raw_input+0xdc>)
 801cac0:	22c0      	movs	r2, #192	; 0xc0
 801cac2:	4913      	ldr	r1, [pc, #76]	; (801cb10 <raw_input+0xe0>)
 801cac4:	4626      	mov	r6, r4
 801cac6:	4813      	ldr	r0, [pc, #76]	; (801cb14 <raw_input+0xe4>)
 801cac8:	f009 fe3c 	bl	8026744 <iprintf>
    pcb = pcb->next;
 801cacc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801cace:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d1c7      	bne.n	801ca64 <raw_input+0x34>
  }
  return ret;
}
 801cad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d0d7      	beq.n	801ca8c <raw_input+0x5c>
 801cadc:	4a09      	ldr	r2, [pc, #36]	; (801cb04 <raw_input+0xd4>)
 801cade:	6952      	ldr	r2, [r2, #20]
 801cae0:	4293      	cmp	r3, r2
 801cae2:	d1bb      	bne.n	801ca5c <raw_input+0x2c>
 801cae4:	e7d2      	b.n	801ca8c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801cae6:	2002      	movs	r0, #2
 801cae8:	e7b8      	b.n	801ca5c <raw_input+0x2c>
          if (prev != NULL) {
 801caea:	b14e      	cbz	r6, 801cb00 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801caec:	4906      	ldr	r1, [pc, #24]	; (801cb08 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801caee:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801caf0:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801caf2:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801caf4:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801caf6:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801caf8:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801cafa:	e7eb      	b.n	801cad4 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801cafc:	4620      	mov	r0, r4
 801cafe:	e7e9      	b.n	801cad4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801cb00:	2001      	movs	r0, #1
 801cb02:	e7e7      	b.n	801cad4 <raw_input+0xa4>
 801cb04:	2001f300 	.word	0x2001f300
 801cb08:	2002e498 	.word	0x2002e498
 801cb0c:	08045688 	.word	0x08045688
 801cb10:	080456b8 	.word	0x080456b8
 801cb14:	0802b43c 	.word	0x0802b43c

0801cb18 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cb18:	b110      	cbz	r0, 801cb20 <raw_netif_ip_addr_changed+0x8>
 801cb1a:	6802      	ldr	r2, [r0, #0]
 801cb1c:	b101      	cbz	r1, 801cb20 <raw_netif_ip_addr_changed+0x8>
 801cb1e:	b902      	cbnz	r2, 801cb22 <raw_netif_ip_addr_changed+0xa>
 801cb20:	4770      	bx	lr
 801cb22:	680b      	ldr	r3, [r1, #0]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d0fb      	beq.n	801cb20 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cb28:	4b08      	ldr	r3, [pc, #32]	; (801cb4c <raw_netif_ip_addr_changed+0x34>)
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d0f7      	beq.n	801cb20 <raw_netif_ip_addr_changed+0x8>
{
 801cb30:	b410      	push	{r4}
 801cb32:	e000      	b.n	801cb36 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801cb34:	6802      	ldr	r2, [r0, #0]
 801cb36:	681c      	ldr	r4, [r3, #0]
 801cb38:	4294      	cmp	r4, r2
 801cb3a:	d101      	bne.n	801cb40 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801cb3c:	680a      	ldr	r2, [r1, #0]
 801cb3e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cb40:	68db      	ldr	r3, [r3, #12]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d1f6      	bne.n	801cb34 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801cb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb4a:	4770      	bx	lr
 801cb4c:	2002e498 	.word	0x2002e498

0801cb50 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801cb50:	b4f0      	push	{r4, r5, r6, r7}
 801cb52:	4f13      	ldr	r7, [pc, #76]	; (801cba0 <tcp_new_port+0x50>)
 801cb54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801cb58:	4e12      	ldr	r6, [pc, #72]	; (801cba4 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801cb5a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801cb5e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb60:	4d11      	ldr	r5, [pc, #68]	; (801cba8 <tcp_new_port+0x58>)
  tcp_port++;
 801cb62:	3001      	adds	r0, #1
 801cb64:	4c11      	ldr	r4, [pc, #68]	; (801cbac <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb66:	462b      	mov	r3, r5
  tcp_port++;
 801cb68:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb6a:	4560      	cmp	r0, ip
 801cb6c:	bf08      	it	eq
 801cb6e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	b913      	cbnz	r3, 801cb7c <tcp_new_port+0x2c>
 801cb76:	e00b      	b.n	801cb90 <tcp_new_port+0x40>
 801cb78:	68db      	ldr	r3, [r3, #12]
 801cb7a:	b14b      	cbz	r3, 801cb90 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801cb7c:	8ada      	ldrh	r2, [r3, #22]
 801cb7e:	4282      	cmp	r2, r0
 801cb80:	d1fa      	bne.n	801cb78 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801cb82:	3901      	subs	r1, #1
 801cb84:	b289      	uxth	r1, r1
 801cb86:	2900      	cmp	r1, #0
 801cb88:	d1eb      	bne.n	801cb62 <tcp_new_port+0x12>
 801cb8a:	8038      	strh	r0, [r7, #0]
          return 0;
 801cb8c:	4608      	mov	r0, r1
 801cb8e:	e005      	b.n	801cb9c <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801cb90:	42b4      	cmp	r4, r6
 801cb92:	d002      	beq.n	801cb9a <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cb94:	f854 3b04 	ldr.w	r3, [r4], #4
 801cb98:	e7eb      	b.n	801cb72 <tcp_new_port+0x22>
 801cb9a:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801cb9c:	bcf0      	pop	{r4, r5, r6, r7}
 801cb9e:	4770      	bx	lr
 801cba0:	2000044c 	.word	0x2000044c
 801cba4:	08045df8 	.word	0x08045df8
 801cba8:	2002e4a8 	.word	0x2002e4a8
 801cbac:	08045dec 	.word	0x08045dec

0801cbb0 <tcp_close_shutdown_fin>:
{
 801cbb0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cbb2:	4604      	mov	r4, r0
 801cbb4:	b310      	cbz	r0, 801cbfc <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801cbb6:	7d23      	ldrb	r3, [r4, #20]
 801cbb8:	2b04      	cmp	r3, #4
 801cbba:	d005      	beq.n	801cbc8 <tcp_close_shutdown_fin+0x18>
 801cbbc:	2b07      	cmp	r3, #7
 801cbbe:	d00e      	beq.n	801cbde <tcp_close_shutdown_fin+0x2e>
 801cbc0:	2b03      	cmp	r3, #3
 801cbc2:	d001      	beq.n	801cbc8 <tcp_close_shutdown_fin+0x18>
 801cbc4:	2000      	movs	r0, #0
}
 801cbc6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cbc8:	4620      	mov	r0, r4
 801cbca:	f003 fd33 	bl	8020634 <tcp_send_fin>
      if (err == ERR_OK) {
 801cbce:	b950      	cbnz	r0, 801cbe6 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801cbd0:	2305      	movs	r3, #5
 801cbd2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801cbd4:	4620      	mov	r0, r4
 801cbd6:	f003 fe9d 	bl	8020914 <tcp_output>
 801cbda:	2000      	movs	r0, #0
}
 801cbdc:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cbde:	4620      	mov	r0, r4
 801cbe0:	f003 fd28 	bl	8020634 <tcp_send_fin>
      if (err == ERR_OK) {
 801cbe4:	b138      	cbz	r0, 801cbf6 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801cbe6:	1c43      	adds	r3, r0, #1
 801cbe8:	d1ed      	bne.n	801cbc6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cbea:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801cbec:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cbee:	f043 0308 	orr.w	r3, r3, #8
 801cbf2:	8363      	strh	r3, [r4, #26]
}
 801cbf4:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801cbf6:	2309      	movs	r3, #9
 801cbf8:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801cbfa:	e7eb      	b.n	801cbd4 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cbfc:	4b03      	ldr	r3, [pc, #12]	; (801cc0c <tcp_close_shutdown_fin+0x5c>)
 801cbfe:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801cc02:	4903      	ldr	r1, [pc, #12]	; (801cc10 <tcp_close_shutdown_fin+0x60>)
 801cc04:	4803      	ldr	r0, [pc, #12]	; (801cc14 <tcp_close_shutdown_fin+0x64>)
 801cc06:	f009 fd9d 	bl	8026744 <iprintf>
 801cc0a:	e7d4      	b.n	801cbb6 <tcp_close_shutdown_fin+0x6>
 801cc0c:	08045704 	.word	0x08045704
 801cc10:	08045734 	.word	0x08045734
 801cc14:	0802b43c 	.word	0x0802b43c

0801cc18 <tcp_init>:
{
 801cc18:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801cc1a:	f009 fe37 	bl	802688c <rand>
 801cc1e:	4b02      	ldr	r3, [pc, #8]	; (801cc28 <tcp_init+0x10>)
 801cc20:	4a02      	ldr	r2, [pc, #8]	; (801cc2c <tcp_init+0x14>)
 801cc22:	4303      	orrs	r3, r0
 801cc24:	8013      	strh	r3, [r2, #0]
}
 801cc26:	bd08      	pop	{r3, pc}
 801cc28:	ffffc000 	.word	0xffffc000
 801cc2c:	2000044c 	.word	0x2000044c

0801cc30 <tcp_free>:
{
 801cc30:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc32:	7d03      	ldrb	r3, [r0, #20]
{
 801cc34:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc36:	2b01      	cmp	r3, #1
 801cc38:	d005      	beq.n	801cc46 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801cc3a:	4621      	mov	r1, r4
 801cc3c:	2002      	movs	r0, #2
}
 801cc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cc42:	f7fe bf9d 	b.w	801bb80 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc46:	4906      	ldr	r1, [pc, #24]	; (801cc60 <tcp_free+0x30>)
 801cc48:	22d4      	movs	r2, #212	; 0xd4
 801cc4a:	4b06      	ldr	r3, [pc, #24]	; (801cc64 <tcp_free+0x34>)
 801cc4c:	4806      	ldr	r0, [pc, #24]	; (801cc68 <tcp_free+0x38>)
 801cc4e:	f009 fd79 	bl	8026744 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801cc52:	4621      	mov	r1, r4
 801cc54:	2002      	movs	r0, #2
}
 801cc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cc5a:	f7fe bf91 	b.w	801bb80 <memp_free>
 801cc5e:	bf00      	nop
 801cc60:	08045740 	.word	0x08045740
 801cc64:	08045704 	.word	0x08045704
 801cc68:	0802b43c 	.word	0x0802b43c

0801cc6c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801cc6c:	2900      	cmp	r1, #0
{
 801cc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801cc70:	4b26      	ldr	r3, [pc, #152]	; (801cd0c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801cc72:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801cc74:	bf14      	ite	ne
 801cc76:	460e      	movne	r6, r1
 801cc78:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	d03c      	beq.n	801ccf8 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801cc7e:	7d03      	ldrb	r3, [r0, #20]
 801cc80:	4607      	mov	r7, r0
 801cc82:	bb7b      	cbnz	r3, 801cce4 <tcp_bind+0x78>
  if (port == 0) {
 801cc84:	b31a      	cbz	r2, 801ccce <tcp_bind+0x62>
 801cc86:	4922      	ldr	r1, [pc, #136]	; (801cd10 <tcp_bind+0xa4>)
 801cc88:	4b22      	ldr	r3, [pc, #136]	; (801cd14 <tcp_bind+0xa8>)
 801cc8a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	b913      	cbnz	r3, 801cc98 <tcp_bind+0x2c>
 801cc92:	e00e      	b.n	801ccb2 <tcp_bind+0x46>
 801cc94:	68db      	ldr	r3, [r3, #12]
 801cc96:	b163      	cbz	r3, 801ccb2 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801cc98:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801cc9c:	4594      	cmp	ip, r2
 801cc9e:	d1f9      	bne.n	801cc94 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801cca0:	681c      	ldr	r4, [r3, #0]
 801cca2:	b11c      	cbz	r4, 801ccac <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801cca4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801cca6:	b10d      	cbz	r5, 801ccac <tcp_bind+0x40>
 801cca8:	42ac      	cmp	r4, r5
 801ccaa:	d1f3      	bne.n	801cc94 <tcp_bind+0x28>
              return ERR_USE;
 801ccac:	f06f 0007 	mvn.w	r0, #7
}
 801ccb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801ccb2:	4281      	cmp	r1, r0
 801ccb4:	d113      	bne.n	801ccde <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801ccb6:	6833      	ldr	r3, [r6, #0]
 801ccb8:	b103      	cbz	r3, 801ccbc <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801ccba:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801ccbc:	4b16      	ldr	r3, [pc, #88]	; (801cd18 <tcp_bind+0xac>)
  pcb->local_port = port;
 801ccbe:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801ccc0:	681a      	ldr	r2, [r3, #0]
 801ccc2:	601f      	str	r7, [r3, #0]
 801ccc4:	60fa      	str	r2, [r7, #12]
 801ccc6:	f004 f951 	bl	8020f6c <tcp_timer_needed>
  return ERR_OK;
 801ccca:	2000      	movs	r0, #0
}
 801cccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801ccce:	f7ff ff3f 	bl	801cb50 <tcp_new_port>
    if (port == 0) {
 801ccd2:	4602      	mov	r2, r0
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d1ee      	bne.n	801ccb6 <tcp_bind+0x4a>
      return ERR_BUF;
 801ccd8:	f06f 0001 	mvn.w	r0, #1
}
 801ccdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801ccde:	f851 3b04 	ldr.w	r3, [r1], #4
 801cce2:	e7d4      	b.n	801cc8e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801cce4:	4b0d      	ldr	r3, [pc, #52]	; (801cd1c <tcp_bind+0xb0>)
 801cce6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ccea:	490d      	ldr	r1, [pc, #52]	; (801cd20 <tcp_bind+0xb4>)
 801ccec:	480d      	ldr	r0, [pc, #52]	; (801cd24 <tcp_bind+0xb8>)
 801ccee:	f009 fd29 	bl	8026744 <iprintf>
 801ccf2:	f06f 0005 	mvn.w	r0, #5
}
 801ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ccf8:	4b08      	ldr	r3, [pc, #32]	; (801cd1c <tcp_bind+0xb0>)
 801ccfa:	f240 22a9 	movw	r2, #681	; 0x2a9
 801ccfe:	490a      	ldr	r1, [pc, #40]	; (801cd28 <tcp_bind+0xbc>)
 801cd00:	4808      	ldr	r0, [pc, #32]	; (801cd24 <tcp_bind+0xb8>)
 801cd02:	f009 fd1f 	bl	8026744 <iprintf>
 801cd06:	f06f 000f 	mvn.w	r0, #15
}
 801cd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd0c:	0804731c 	.word	0x0804731c
 801cd10:	08045dec 	.word	0x08045dec
 801cd14:	2002e4a8 	.word	0x2002e4a8
 801cd18:	2002e4a4 	.word	0x2002e4a4
 801cd1c:	08045704 	.word	0x08045704
 801cd20:	0804576c 	.word	0x0804576c
 801cd24:	0802b43c 	.word	0x0802b43c
 801cd28:	08045754 	.word	0x08045754

0801cd2c <tcp_listen_with_backlog_and_err>:
{
 801cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd2e:	4604      	mov	r4, r0
{
 801cd30:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd32:	2800      	cmp	r0, #0
 801cd34:	d060      	beq.n	801cdf8 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cd36:	7d05      	ldrb	r5, [r0, #20]
 801cd38:	2d00      	cmp	r5, #0
 801cd3a:	d14a      	bne.n	801cdd2 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801cd3c:	f240 3272 	movw	r2, #882	; 0x372
 801cd40:	4933      	ldr	r1, [pc, #204]	; (801ce10 <tcp_listen_with_backlog_and_err+0xe4>)
 801cd42:	2003      	movs	r0, #3
 801cd44:	f7fe fee6 	bl	801bb14 <memp_malloc_fn>
  if (lpcb == NULL) {
 801cd48:	4606      	mov	r6, r0
 801cd4a:	2800      	cmp	r0, #0
 801cd4c:	d051      	beq.n	801cdf2 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801cd4e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801cd50:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801cd52:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801cd54:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801cd56:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801cd58:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801cd5a:	7d62      	ldrb	r2, [r4, #21]
 801cd5c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801cd5e:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801cd60:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801cd62:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801cd64:	7ae2      	ldrb	r2, [r4, #11]
 801cd66:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801cd68:	7aa2      	ldrb	r2, [r4, #10]
 801cd6a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801cd6c:	6822      	ldr	r2, [r4, #0]
 801cd6e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801cd70:	b99b      	cbnz	r3, 801cd9a <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cd72:	7d23      	ldrb	r3, [r4, #20]
 801cd74:	2b01      	cmp	r3, #1
 801cd76:	d020      	beq.n	801cdba <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801cd78:	4621      	mov	r1, r4
 801cd7a:	2002      	movs	r0, #2
 801cd7c:	f7fe ff00 	bl	801bb80 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd80:	4b24      	ldr	r3, [pc, #144]	; (801ce14 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801cd82:	4925      	ldr	r1, [pc, #148]	; (801ce18 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd84:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801cd86:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd88:	60f2      	str	r2, [r6, #12]
 801cd8a:	601e      	str	r6, [r3, #0]
 801cd8c:	f004 f8ee 	bl	8020f6c <tcp_timer_needed>
  res = ERR_OK;
 801cd90:	2300      	movs	r3, #0
  if (err != NULL) {
 801cd92:	b107      	cbz	r7, 801cd96 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801cd94:	703b      	strb	r3, [r7, #0]
}
 801cd96:	4630      	mov	r0, r6
 801cd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cd9a:	4a20      	ldr	r2, [pc, #128]	; (801ce1c <tcp_listen_with_backlog_and_err+0xf0>)
 801cd9c:	6813      	ldr	r3, [r2, #0]
 801cd9e:	42a3      	cmp	r3, r4
 801cda0:	d012      	beq.n	801cdc8 <tcp_listen_with_backlog_and_err+0x9c>
 801cda2:	b12b      	cbz	r3, 801cdb0 <tcp_listen_with_backlog_and_err+0x84>
 801cda4:	68d9      	ldr	r1, [r3, #12]
 801cda6:	42a1      	cmp	r1, r4
 801cda8:	d01e      	beq.n	801cde8 <tcp_listen_with_backlog_and_err+0xbc>
 801cdaa:	460b      	mov	r3, r1
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d1f9      	bne.n	801cda4 <tcp_listen_with_backlog_and_err+0x78>
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cdb4:	7d23      	ldrb	r3, [r4, #20]
 801cdb6:	2b01      	cmp	r3, #1
 801cdb8:	d1de      	bne.n	801cd78 <tcp_listen_with_backlog_and_err+0x4c>
 801cdba:	4b15      	ldr	r3, [pc, #84]	; (801ce10 <tcp_listen_with_backlog_and_err+0xe4>)
 801cdbc:	22d4      	movs	r2, #212	; 0xd4
 801cdbe:	4918      	ldr	r1, [pc, #96]	; (801ce20 <tcp_listen_with_backlog_and_err+0xf4>)
 801cdc0:	4818      	ldr	r0, [pc, #96]	; (801ce24 <tcp_listen_with_backlog_and_err+0xf8>)
 801cdc2:	f009 fcbf 	bl	8026744 <iprintf>
 801cdc6:	e7d7      	b.n	801cd78 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cdc8:	68e3      	ldr	r3, [r4, #12]
 801cdca:	6013      	str	r3, [r2, #0]
 801cdcc:	2300      	movs	r3, #0
 801cdce:	60e3      	str	r3, [r4, #12]
 801cdd0:	e7f0      	b.n	801cdb4 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cdd2:	4b0f      	ldr	r3, [pc, #60]	; (801ce10 <tcp_listen_with_backlog_and_err+0xe4>)
 801cdd4:	f240 325a 	movw	r2, #858	; 0x35a
 801cdd8:	4913      	ldr	r1, [pc, #76]	; (801ce28 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801cdda:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cddc:	4811      	ldr	r0, [pc, #68]	; (801ce24 <tcp_listen_with_backlog_and_err+0xf8>)
 801cdde:	f009 fcb1 	bl	8026744 <iprintf>
 801cde2:	f06f 030e 	mvn.w	r3, #14
 801cde6:	e7d4      	b.n	801cd92 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cde8:	68e2      	ldr	r2, [r4, #12]
 801cdea:	60da      	str	r2, [r3, #12]
 801cdec:	2300      	movs	r3, #0
 801cdee:	60e3      	str	r3, [r4, #12]
 801cdf0:	e7e0      	b.n	801cdb4 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 801cdf6:	e7cc      	b.n	801cd92 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cdf8:	4b05      	ldr	r3, [pc, #20]	; (801ce10 <tcp_listen_with_backlog_and_err+0xe4>)
 801cdfa:	f240 3259 	movw	r2, #857	; 0x359
 801cdfe:	490b      	ldr	r1, [pc, #44]	; (801ce2c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ce00:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ce02:	4808      	ldr	r0, [pc, #32]	; (801ce24 <tcp_listen_with_backlog_and_err+0xf8>)
 801ce04:	f009 fc9e 	bl	8026744 <iprintf>
 801ce08:	f06f 030f 	mvn.w	r3, #15
 801ce0c:	e7c1      	b.n	801cd92 <tcp_listen_with_backlog_and_err+0x66>
 801ce0e:	bf00      	nop
 801ce10:	08045704 	.word	0x08045704
 801ce14:	2002e4a8 	.word	0x2002e4a8
 801ce18:	0801dac1 	.word	0x0801dac1
 801ce1c:	2002e4a4 	.word	0x2002e4a4
 801ce20:	08045740 	.word	0x08045740
 801ce24:	0802b43c 	.word	0x0802b43c
 801ce28:	080457c4 	.word	0x080457c4
 801ce2c:	08045794 	.word	0x08045794

0801ce30 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801ce30:	2200      	movs	r2, #0
 801ce32:	f7ff bf7b 	b.w	801cd2c <tcp_listen_with_backlog_and_err>
 801ce36:	bf00      	nop

0801ce38 <tcp_update_rcv_ann_wnd>:
{
 801ce38:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ce3a:	4604      	mov	r4, r0
 801ce3c:	b1c0      	cbz	r0, 801ce70 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ce3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ce40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ce42:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ce46:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ce48:	1ad0      	subs	r0, r2, r3
 801ce4a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801ce4e:	4428      	add	r0, r5
 801ce50:	bf94      	ite	ls
 801ce52:	eba0 010c 	subls.w	r1, r0, ip
 801ce56:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801ce5a:	2900      	cmp	r1, #0
 801ce5c:	db01      	blt.n	801ce62 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801ce5e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801ce60:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801ce62:	1aea      	subs	r2, r5, r3
 801ce64:	2a00      	cmp	r2, #0
 801ce66:	dd0b      	ble.n	801ce80 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801ce68:	2300      	movs	r3, #0
    return 0;
 801ce6a:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801ce6c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801ce6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ce70:	4b0b      	ldr	r3, [pc, #44]	; (801cea0 <tcp_update_rcv_ann_wnd+0x68>)
 801ce72:	f240 32a6 	movw	r2, #934	; 0x3a6
 801ce76:	490b      	ldr	r1, [pc, #44]	; (801cea4 <tcp_update_rcv_ann_wnd+0x6c>)
 801ce78:	480b      	ldr	r0, [pc, #44]	; (801cea8 <tcp_update_rcv_ann_wnd+0x70>)
 801ce7a:	f009 fc63 	bl	8026744 <iprintf>
 801ce7e:	e7de      	b.n	801ce3e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801ce80:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce82:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801ce86:	d202      	bcs.n	801ce8e <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801ce88:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801ce8a:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801ce8c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce8e:	4b04      	ldr	r3, [pc, #16]	; (801cea0 <tcp_update_rcv_ann_wnd+0x68>)
 801ce90:	f240 32b6 	movw	r2, #950	; 0x3b6
 801ce94:	4905      	ldr	r1, [pc, #20]	; (801ceac <tcp_update_rcv_ann_wnd+0x74>)
 801ce96:	4804      	ldr	r0, [pc, #16]	; (801cea8 <tcp_update_rcv_ann_wnd+0x70>)
 801ce98:	f009 fc54 	bl	8026744 <iprintf>
 801ce9c:	e7f4      	b.n	801ce88 <tcp_update_rcv_ann_wnd+0x50>
 801ce9e:	bf00      	nop
 801cea0:	08045704 	.word	0x08045704
 801cea4:	080457fc 	.word	0x080457fc
 801cea8:	0802b43c 	.word	0x0802b43c
 801ceac:	08045820 	.word	0x08045820

0801ceb0 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801ceb0:	b340      	cbz	r0, 801cf04 <tcp_recved+0x54>
{
 801ceb2:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801ceb4:	7d03      	ldrb	r3, [r0, #20]
 801ceb6:	4605      	mov	r5, r0
 801ceb8:	460c      	mov	r4, r1
 801ceba:	2b01      	cmp	r3, #1
 801cebc:	d01a      	beq.n	801cef4 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801cebe:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801cec0:	1919      	adds	r1, r3, r4
 801cec2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801cec4:	428b      	cmp	r3, r1
 801cec6:	d802      	bhi.n	801cece <tcp_recved+0x1e>
 801cec8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801cecc:	d901      	bls.n	801ced2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801cece:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801ced2:	4628      	mov	r0, r5
 801ced4:	8529      	strh	r1, [r5, #40]	; 0x28
 801ced6:	f7ff ffaf 	bl	801ce38 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801ceda:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801cede:	d200      	bcs.n	801cee2 <tcp_recved+0x32>
}
 801cee0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801cee2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801cee4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801cee6:	f043 0302 	orr.w	r3, r3, #2
 801ceea:	836b      	strh	r3, [r5, #26]
}
 801ceec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801cef0:	f003 bd10 	b.w	8020914 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801cef4:	4b07      	ldr	r3, [pc, #28]	; (801cf14 <tcp_recved+0x64>)
 801cef6:	f240 32d2 	movw	r2, #978	; 0x3d2
 801cefa:	4907      	ldr	r1, [pc, #28]	; (801cf18 <tcp_recved+0x68>)
 801cefc:	4807      	ldr	r0, [pc, #28]	; (801cf1c <tcp_recved+0x6c>)
 801cefe:	f009 fc21 	bl	8026744 <iprintf>
 801cf02:	e7dc      	b.n	801cebe <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801cf04:	4b03      	ldr	r3, [pc, #12]	; (801cf14 <tcp_recved+0x64>)
 801cf06:	f240 32cf 	movw	r2, #975	; 0x3cf
 801cf0a:	4905      	ldr	r1, [pc, #20]	; (801cf20 <tcp_recved+0x70>)
 801cf0c:	4803      	ldr	r0, [pc, #12]	; (801cf1c <tcp_recved+0x6c>)
 801cf0e:	f009 bc19 	b.w	8026744 <iprintf>
 801cf12:	bf00      	nop
 801cf14:	08045704 	.word	0x08045704
 801cf18:	08045854 	.word	0x08045854
 801cf1c:	0802b43c 	.word	0x0802b43c
 801cf20:	0804583c 	.word	0x0804583c

0801cf24 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf26:	2800      	cmp	r0, #0
 801cf28:	f000 808c 	beq.w	801d044 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cf2c:	2900      	cmp	r1, #0
 801cf2e:	d07f      	beq.n	801d030 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cf30:	461e      	mov	r6, r3
 801cf32:	7d03      	ldrb	r3, [r0, #20]
 801cf34:	4604      	mov	r4, r0
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d16a      	bne.n	801d010 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cf3a:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cf3c:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801cf3e:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cf40:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cf42:	2800      	cmp	r0, #0
 801cf44:	d049      	beq.n	801cfda <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801cf46:	f7ff f80d 	bl	801bf64 <netif_get_by_index>
 801cf4a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801cf4c:	2d00      	cmp	r5, #0
 801cf4e:	d06c      	beq.n	801d02a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cf50:	6823      	ldr	r3, [r4, #0]
 801cf52:	b90b      	cbnz	r3, 801cf58 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cf54:	686b      	ldr	r3, [r5, #4]
 801cf56:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801cf58:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801cf5a:	b927      	cbnz	r7, 801cf66 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801cf5c:	f7ff fdf8 	bl	801cb50 <tcp_new_port>
 801cf60:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801cf62:	2800      	cmp	r0, #0
 801cf64:	d05e      	beq.n	801d024 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cf66:	4b3c      	ldr	r3, [pc, #240]	; (801d058 <tcp_connect+0x134>)
 801cf68:	4a3c      	ldr	r2, [pc, #240]	; (801d05c <tcp_connect+0x138>)
 801cf6a:	6811      	ldr	r1, [r2, #0]
 801cf6c:	681a      	ldr	r2, [r3, #0]
 801cf6e:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801cf70:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801cf74:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801cf76:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801cf78:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf7a:	4b39      	ldr	r3, [pc, #228]	; (801d060 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801cf7c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf7e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801cf80:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801cf82:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801cf86:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cf8e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d037      	beq.n	801d004 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cf94:	2b28      	cmp	r3, #40	; 0x28
 801cf96:	d907      	bls.n	801cfa8 <tcp_connect+0x84>
 801cf98:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cf9c:	b292      	uxth	r2, r2
 801cf9e:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801cfa2:	bf28      	it	cs
 801cfa4:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801cfa8:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cfaa:	2102      	movs	r1, #2
 801cfac:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801cfae:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801cfb0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801cfb4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cfb8:	f003 fa90 	bl	80204dc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801cfbc:	4605      	mov	r5, r0
 801cfbe:	b9f8      	cbnz	r0, 801d000 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801cfc0:	2302      	movs	r3, #2
 801cfc2:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801cfc4:	b187      	cbz	r7, 801cfe8 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cfc6:	4a27      	ldr	r2, [pc, #156]	; (801d064 <tcp_connect+0x140>)
 801cfc8:	6813      	ldr	r3, [r2, #0]
 801cfca:	42a3      	cmp	r3, r4
 801cfcc:	d01d      	beq.n	801d00a <tcp_connect+0xe6>
 801cfce:	b15b      	cbz	r3, 801cfe8 <tcp_connect+0xc4>
 801cfd0:	68da      	ldr	r2, [r3, #12]
 801cfd2:	42a2      	cmp	r2, r4
 801cfd4:	d006      	beq.n	801cfe4 <tcp_connect+0xc0>
 801cfd6:	4613      	mov	r3, r2
 801cfd8:	e7f9      	b.n	801cfce <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801cfda:	1d20      	adds	r0, r4, #4
 801cfdc:	f006 fee4 	bl	8023da8 <ip4_route>
 801cfe0:	4605      	mov	r5, r0
 801cfe2:	e7b3      	b.n	801cf4c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cfe4:	68e2      	ldr	r2, [r4, #12]
 801cfe6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801cfe8:	4b1f      	ldr	r3, [pc, #124]	; (801d068 <tcp_connect+0x144>)
 801cfea:	681a      	ldr	r2, [r3, #0]
 801cfec:	601c      	str	r4, [r3, #0]
 801cfee:	60e2      	str	r2, [r4, #12]
 801cff0:	f003 ffbc 	bl	8020f6c <tcp_timer_needed>
 801cff4:	4b1d      	ldr	r3, [pc, #116]	; (801d06c <tcp_connect+0x148>)
 801cff6:	2201      	movs	r2, #1
    tcp_output(pcb);
 801cff8:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801cffa:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801cffc:	f003 fc8a 	bl	8020914 <tcp_output>
}
 801d000:	4628      	mov	r0, r5
 801d002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d004:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d008:	e7ce      	b.n	801cfa8 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d00a:	68e3      	ldr	r3, [r4, #12]
 801d00c:	6013      	str	r3, [r2, #0]
 801d00e:	e7eb      	b.n	801cfe8 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801d010:	4b17      	ldr	r3, [pc, #92]	; (801d070 <tcp_connect+0x14c>)
 801d012:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801d016:	4917      	ldr	r1, [pc, #92]	; (801d074 <tcp_connect+0x150>)
 801d018:	f06f 0509 	mvn.w	r5, #9
 801d01c:	4816      	ldr	r0, [pc, #88]	; (801d078 <tcp_connect+0x154>)
 801d01e:	f009 fb91 	bl	8026744 <iprintf>
 801d022:	e7ed      	b.n	801d000 <tcp_connect+0xdc>
      return ERR_BUF;
 801d024:	f06f 0501 	mvn.w	r5, #1
 801d028:	e7ea      	b.n	801d000 <tcp_connect+0xdc>
    return ERR_RTE;
 801d02a:	f06f 0503 	mvn.w	r5, #3
 801d02e:	e7e7      	b.n	801d000 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d030:	4b0f      	ldr	r3, [pc, #60]	; (801d070 <tcp_connect+0x14c>)
 801d032:	f240 4236 	movw	r2, #1078	; 0x436
 801d036:	4911      	ldr	r1, [pc, #68]	; (801d07c <tcp_connect+0x158>)
 801d038:	f06f 050f 	mvn.w	r5, #15
 801d03c:	480e      	ldr	r0, [pc, #56]	; (801d078 <tcp_connect+0x154>)
 801d03e:	f009 fb81 	bl	8026744 <iprintf>
 801d042:	e7dd      	b.n	801d000 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d044:	4b0a      	ldr	r3, [pc, #40]	; (801d070 <tcp_connect+0x14c>)
 801d046:	f240 4235 	movw	r2, #1077	; 0x435
 801d04a:	490d      	ldr	r1, [pc, #52]	; (801d080 <tcp_connect+0x15c>)
 801d04c:	f06f 050f 	mvn.w	r5, #15
 801d050:	4809      	ldr	r0, [pc, #36]	; (801d078 <tcp_connect+0x154>)
 801d052:	f009 fb77 	bl	8026744 <iprintf>
 801d056:	e7d3      	b.n	801d000 <tcp_connect+0xdc>
 801d058:	20000448 	.word	0x20000448
 801d05c:	2002e4ac 	.word	0x2002e4ac
 801d060:	08600860 	.word	0x08600860
 801d064:	2002e4a4 	.word	0x2002e4a4
 801d068:	2002e49c 	.word	0x2002e49c
 801d06c:	2002e4a0 	.word	0x2002e4a0
 801d070:	08045704 	.word	0x08045704
 801d074:	080458b4 	.word	0x080458b4
 801d078:	0802b43c 	.word	0x0802b43c
 801d07c:	08045898 	.word	0x08045898
 801d080:	0804587c 	.word	0x0804587c

0801d084 <tcp_segs_free>:
  while (seg != NULL) {
 801d084:	b170      	cbz	r0, 801d0a4 <tcp_segs_free+0x20>
{
 801d086:	b538      	push	{r3, r4, r5, lr}
 801d088:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801d08a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801d08c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d08e:	6868      	ldr	r0, [r5, #4]
 801d090:	b108      	cbz	r0, 801d096 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801d092:	f7ff fa8d 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d096:	4629      	mov	r1, r5
 801d098:	2004      	movs	r0, #4
 801d09a:	f7fe fd71 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d09e:	2c00      	cmp	r4, #0
 801d0a0:	d1f3      	bne.n	801d08a <tcp_segs_free+0x6>
}
 801d0a2:	bd38      	pop	{r3, r4, r5, pc}
 801d0a4:	4770      	bx	lr
 801d0a6:	bf00      	nop

0801d0a8 <tcp_seg_free>:
  if (seg != NULL) {
 801d0a8:	b158      	cbz	r0, 801d0c2 <tcp_seg_free+0x1a>
{
 801d0aa:	b510      	push	{r4, lr}
 801d0ac:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801d0ae:	6840      	ldr	r0, [r0, #4]
 801d0b0:	b108      	cbz	r0, 801d0b6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801d0b2:	f7ff fa7d 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d0b6:	4621      	mov	r1, r4
 801d0b8:	2004      	movs	r0, #4
}
 801d0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801d0be:	f7fe bd5f 	b.w	801bb80 <memp_free>
 801d0c2:	4770      	bx	lr

0801d0c4 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d0c4:	b108      	cbz	r0, 801d0ca <tcp_setprio+0x6>
  pcb->prio = prio;
 801d0c6:	7541      	strb	r1, [r0, #21]
}
 801d0c8:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d0ca:	4b03      	ldr	r3, [pc, #12]	; (801d0d8 <tcp_setprio+0x14>)
 801d0cc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801d0d0:	4902      	ldr	r1, [pc, #8]	; (801d0dc <tcp_setprio+0x18>)
 801d0d2:	4803      	ldr	r0, [pc, #12]	; (801d0e0 <tcp_setprio+0x1c>)
 801d0d4:	f009 bb36 	b.w	8026744 <iprintf>
 801d0d8:	08045704 	.word	0x08045704
 801d0dc:	080458e4 	.word	0x080458e4
 801d0e0:	0802b43c 	.word	0x0802b43c

0801d0e4 <tcp_seg_copy>:
{
 801d0e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d0e6:	4605      	mov	r5, r0
 801d0e8:	b1a0      	cbz	r0, 801d114 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801d0ea:	f240 6284 	movw	r2, #1668	; 0x684
 801d0ee:	490d      	ldr	r1, [pc, #52]	; (801d124 <tcp_seg_copy+0x40>)
 801d0f0:	2004      	movs	r0, #4
 801d0f2:	f7fe fd0f 	bl	801bb14 <memp_malloc_fn>
  if (cseg == NULL) {
 801d0f6:	4604      	mov	r4, r0
 801d0f8:	b150      	cbz	r0, 801d110 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d0fa:	6868      	ldr	r0, [r5, #4]
 801d0fc:	6829      	ldr	r1, [r5, #0]
 801d0fe:	68aa      	ldr	r2, [r5, #8]
 801d100:	68eb      	ldr	r3, [r5, #12]
 801d102:	6060      	str	r0, [r4, #4]
 801d104:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801d106:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d108:	60a2      	str	r2, [r4, #8]
 801d10a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801d10c:	f7ff fa6e 	bl	801c5ec <pbuf_ref>
}
 801d110:	4620      	mov	r0, r4
 801d112:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d114:	4b03      	ldr	r3, [pc, #12]	; (801d124 <tcp_seg_copy+0x40>)
 801d116:	f240 6282 	movw	r2, #1666	; 0x682
 801d11a:	4903      	ldr	r1, [pc, #12]	; (801d128 <tcp_seg_copy+0x44>)
 801d11c:	4803      	ldr	r0, [pc, #12]	; (801d12c <tcp_seg_copy+0x48>)
 801d11e:	f009 fb11 	bl	8026744 <iprintf>
 801d122:	e7e2      	b.n	801d0ea <tcp_seg_copy+0x6>
 801d124:	08045704 	.word	0x08045704
 801d128:	08045900 	.word	0x08045900
 801d12c:	0802b43c 	.word	0x0802b43c

0801d130 <tcp_arg>:
  if (pcb != NULL) {
 801d130:	b100      	cbz	r0, 801d134 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801d132:	6101      	str	r1, [r0, #16]
}
 801d134:	4770      	bx	lr
 801d136:	bf00      	nop

0801d138 <tcp_recv>:
  if (pcb != NULL) {
 801d138:	b140      	cbz	r0, 801d14c <tcp_recv+0x14>
{
 801d13a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d13c:	7d03      	ldrb	r3, [r0, #20]
 801d13e:	4604      	mov	r4, r0
 801d140:	460d      	mov	r5, r1
 801d142:	2b01      	cmp	r3, #1
 801d144:	d003      	beq.n	801d14e <tcp_recv+0x16>
    pcb->recv = recv;
 801d146:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d14a:	bd38      	pop	{r3, r4, r5, pc}
 801d14c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d14e:	4b05      	ldr	r3, [pc, #20]	; (801d164 <tcp_recv+0x2c>)
 801d150:	f240 72df 	movw	r2, #2015	; 0x7df
 801d154:	4904      	ldr	r1, [pc, #16]	; (801d168 <tcp_recv+0x30>)
 801d156:	4805      	ldr	r0, [pc, #20]	; (801d16c <tcp_recv+0x34>)
 801d158:	f009 faf4 	bl	8026744 <iprintf>
    pcb->recv = recv;
 801d15c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d160:	bd38      	pop	{r3, r4, r5, pc}
 801d162:	bf00      	nop
 801d164:	08045704 	.word	0x08045704
 801d168:	0804591c 	.word	0x0804591c
 801d16c:	0802b43c 	.word	0x0802b43c

0801d170 <tcp_sent>:
  if (pcb != NULL) {
 801d170:	b140      	cbz	r0, 801d184 <tcp_sent+0x14>
{
 801d172:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d174:	7d03      	ldrb	r3, [r0, #20]
 801d176:	4604      	mov	r4, r0
 801d178:	460d      	mov	r5, r1
 801d17a:	2b01      	cmp	r3, #1
 801d17c:	d003      	beq.n	801d186 <tcp_sent+0x16>
    pcb->sent = sent;
 801d17e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d182:	bd38      	pop	{r3, r4, r5, pc}
 801d184:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d186:	4b05      	ldr	r3, [pc, #20]	; (801d19c <tcp_sent+0x2c>)
 801d188:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801d18c:	4904      	ldr	r1, [pc, #16]	; (801d1a0 <tcp_sent+0x30>)
 801d18e:	4805      	ldr	r0, [pc, #20]	; (801d1a4 <tcp_sent+0x34>)
 801d190:	f009 fad8 	bl	8026744 <iprintf>
    pcb->sent = sent;
 801d194:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d198:	bd38      	pop	{r3, r4, r5, pc}
 801d19a:	bf00      	nop
 801d19c:	08045704 	.word	0x08045704
 801d1a0:	08045944 	.word	0x08045944
 801d1a4:	0802b43c 	.word	0x0802b43c

0801d1a8 <tcp_err>:
  if (pcb != NULL) {
 801d1a8:	b140      	cbz	r0, 801d1bc <tcp_err+0x14>
{
 801d1aa:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d1ac:	7d03      	ldrb	r3, [r0, #20]
 801d1ae:	4604      	mov	r4, r0
 801d1b0:	460d      	mov	r5, r1
 801d1b2:	2b01      	cmp	r3, #1
 801d1b4:	d003      	beq.n	801d1be <tcp_err+0x16>
    pcb->errf = err;
 801d1b6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d1ba:	bd38      	pop	{r3, r4, r5, pc}
 801d1bc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d1be:	4b05      	ldr	r3, [pc, #20]	; (801d1d4 <tcp_err+0x2c>)
 801d1c0:	f640 020d 	movw	r2, #2061	; 0x80d
 801d1c4:	4904      	ldr	r1, [pc, #16]	; (801d1d8 <tcp_err+0x30>)
 801d1c6:	4805      	ldr	r0, [pc, #20]	; (801d1dc <tcp_err+0x34>)
 801d1c8:	f009 fabc 	bl	8026744 <iprintf>
    pcb->errf = err;
 801d1cc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d1d0:	bd38      	pop	{r3, r4, r5, pc}
 801d1d2:	bf00      	nop
 801d1d4:	08045704 	.word	0x08045704
 801d1d8:	0804596c 	.word	0x0804596c
 801d1dc:	0802b43c 	.word	0x0802b43c

0801d1e0 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801d1e0:	b118      	cbz	r0, 801d1ea <tcp_accept+0xa>
 801d1e2:	7d03      	ldrb	r3, [r0, #20]
 801d1e4:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801d1e6:	bf08      	it	eq
 801d1e8:	6181      	streq	r1, [r0, #24]
}
 801d1ea:	4770      	bx	lr

0801d1ec <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d1ec:	b1a8      	cbz	r0, 801d21a <tcp_poll+0x2e>
{
 801d1ee:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d1f0:	7d03      	ldrb	r3, [r0, #20]
 801d1f2:	460e      	mov	r6, r1
 801d1f4:	4604      	mov	r4, r0
 801d1f6:	4615      	mov	r5, r2
 801d1f8:	2b01      	cmp	r3, #1
 801d1fa:	d003      	beq.n	801d204 <tcp_poll+0x18>
  pcb->poll = poll;
 801d1fc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d200:	7765      	strb	r5, [r4, #29]
}
 801d202:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d204:	4b08      	ldr	r3, [pc, #32]	; (801d228 <tcp_poll+0x3c>)
 801d206:	f640 023e 	movw	r2, #2110	; 0x83e
 801d20a:	4908      	ldr	r1, [pc, #32]	; (801d22c <tcp_poll+0x40>)
 801d20c:	4808      	ldr	r0, [pc, #32]	; (801d230 <tcp_poll+0x44>)
 801d20e:	f009 fa99 	bl	8026744 <iprintf>
  pcb->poll = poll;
 801d212:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d216:	7765      	strb	r5, [r4, #29]
}
 801d218:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d21a:	4b03      	ldr	r3, [pc, #12]	; (801d228 <tcp_poll+0x3c>)
 801d21c:	f640 023d 	movw	r2, #2109	; 0x83d
 801d220:	4904      	ldr	r1, [pc, #16]	; (801d234 <tcp_poll+0x48>)
 801d222:	4803      	ldr	r0, [pc, #12]	; (801d230 <tcp_poll+0x44>)
 801d224:	f009 ba8e 	b.w	8026744 <iprintf>
 801d228:	08045704 	.word	0x08045704
 801d22c:	080459ac 	.word	0x080459ac
 801d230:	0802b43c 	.word	0x0802b43c
 801d234:	08045994 	.word	0x08045994

0801d238 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d238:	2800      	cmp	r0, #0
 801d23a:	d041      	beq.n	801d2c0 <tcp_pcb_purge+0x88>
{
 801d23c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801d23e:	7d03      	ldrb	r3, [r0, #20]
 801d240:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801d242:	2b0a      	cmp	r3, #10
 801d244:	d001      	beq.n	801d24a <tcp_pcb_purge+0x12>
 801d246:	2b01      	cmp	r3, #1
 801d248:	d800      	bhi.n	801d24c <tcp_pcb_purge+0x14>
}
 801d24a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801d24c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801d24e:	b118      	cbz	r0, 801d258 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801d250:	f7ff f9ae 	bl	801c5b0 <pbuf_free>
      pcb->refused_data = NULL;
 801d254:	2300      	movs	r3, #0
 801d256:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801d258:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d25a:	b164      	cbz	r4, 801d276 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801d25c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d25e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d260:	6870      	ldr	r0, [r6, #4]
 801d262:	b108      	cbz	r0, 801d268 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801d264:	f7ff f9a4 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d268:	4631      	mov	r1, r6
 801d26a:	2004      	movs	r0, #4
 801d26c:	f7fe fc88 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d270:	2c00      	cmp	r4, #0
 801d272:	d1f3      	bne.n	801d25c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801d274:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801d276:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801d27a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801d27c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801d27e:	b15c      	cbz	r4, 801d298 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801d280:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d282:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d284:	6870      	ldr	r0, [r6, #4]
 801d286:	b108      	cbz	r0, 801d28c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801d288:	f7ff f992 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d28c:	4631      	mov	r1, r6
 801d28e:	2004      	movs	r0, #4
 801d290:	f7fe fc76 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d294:	2c00      	cmp	r4, #0
 801d296:	d1f3      	bne.n	801d280 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801d298:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801d29a:	b15c      	cbz	r4, 801d2b4 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801d29c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d29e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d2a0:	6870      	ldr	r0, [r6, #4]
 801d2a2:	b108      	cbz	r0, 801d2a8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801d2a4:	f7ff f984 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d2a8:	4631      	mov	r1, r6
 801d2aa:	2004      	movs	r0, #4
 801d2ac:	f7fe fc68 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d2b0:	2c00      	cmp	r4, #0
 801d2b2:	d1f3      	bne.n	801d29c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801d2ba:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801d2be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d2c0:	4b03      	ldr	r3, [pc, #12]	; (801d2d0 <tcp_pcb_purge+0x98>)
 801d2c2:	f640 0251 	movw	r2, #2129	; 0x851
 801d2c6:	4903      	ldr	r1, [pc, #12]	; (801d2d4 <tcp_pcb_purge+0x9c>)
 801d2c8:	4803      	ldr	r0, [pc, #12]	; (801d2d8 <tcp_pcb_purge+0xa0>)
 801d2ca:	f009 ba3b 	b.w	8026744 <iprintf>
 801d2ce:	bf00      	nop
 801d2d0:	08045704 	.word	0x08045704
 801d2d4:	080459cc 	.word	0x080459cc
 801d2d8:	0802b43c 	.word	0x0802b43c

0801d2dc <tcp_slowtmr>:
{
 801d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801d2e0:	4da9      	ldr	r5, [pc, #676]	; (801d588 <tcp_slowtmr+0x2ac>)
{
 801d2e2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801d2e4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801d5b4 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801d2e8:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d2ea:	4fa8      	ldr	r7, [pc, #672]	; (801d58c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801d2ec:	3301      	adds	r3, #1
 801d2ee:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801d2f0:	f89b 3000 	ldrb.w	r3, [fp]
 801d2f4:	3301      	adds	r3, #1
 801d2f6:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801d2fa:	4ba5      	ldr	r3, [pc, #660]	; (801d590 <tcp_slowtmr+0x2b4>)
 801d2fc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801d2fe:	2c00      	cmp	r4, #0
 801d300:	f000 808a 	beq.w	801d418 <tcp_slowtmr+0x13c>
  prev = NULL;
 801d304:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d306:	46b1      	mov	r9, r6
 801d308:	7d23      	ldrb	r3, [r4, #20]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	f000 80fc 	beq.w	801d508 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d310:	2b01      	cmp	r3, #1
 801d312:	f000 8104 	beq.w	801d51e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d316:	2b0a      	cmp	r3, #10
 801d318:	f000 810c 	beq.w	801d534 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d31c:	f89b 2000 	ldrb.w	r2, [fp]
 801d320:	7fa3      	ldrb	r3, [r4, #30]
 801d322:	4293      	cmp	r3, r2
 801d324:	f000 8113 	beq.w	801d54e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d328:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801d32a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d32c:	2b02      	cmp	r3, #2
 801d32e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801d332:	f000 8112 	beq.w	801d55a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801d336:	2a0b      	cmp	r2, #11
 801d338:	f240 80cb 	bls.w	801d4d2 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801d33c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801d340:	2b06      	cmp	r3, #6
 801d342:	f000 80b7 	beq.w	801d4b4 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801d346:	f894 a009 	ldrb.w	sl, [r4, #9]
 801d34a:	f01a 0a08 	ands.w	sl, sl, #8
 801d34e:	d01d      	beq.n	801d38c <tcp_slowtmr+0xb0>
 801d350:	2b04      	cmp	r3, #4
 801d352:	d007      	beq.n	801d364 <tcp_slowtmr+0x88>
 801d354:	f1a3 0307 	sub.w	r3, r3, #7
 801d358:	fab3 f383 	clz	r3, r3
 801d35c:	095b      	lsrs	r3, r3, #5
 801d35e:	2b00      	cmp	r3, #0
 801d360:	f000 80b4 	beq.w	801d4cc <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d364:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801d368:	4b8a      	ldr	r3, [pc, #552]	; (801d594 <tcp_slowtmr+0x2b8>)
 801d36a:	488b      	ldr	r0, [pc, #556]	; (801d598 <tcp_slowtmr+0x2bc>)
 801d36c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d36e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d370:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d374:	6a20      	ldr	r0, [r4, #32]
 801d376:	1a12      	subs	r2, r2, r0
 801d378:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801d37c:	f240 8160 	bls.w	801d640 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801d380:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801d384:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801d388:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801d38c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801d38e:	b156      	cbz	r6, 801d3a6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801d390:	682b      	ldr	r3, [r5, #0]
 801d392:	6a22      	ldr	r2, [r4, #32]
 801d394:	1a9a      	subs	r2, r3, r2
 801d396:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801d39a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801d39e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801d3a2:	f080 80e1 	bcs.w	801d568 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801d3a6:	7d23      	ldrb	r3, [r4, #20]
 801d3a8:	2b03      	cmp	r3, #3
 801d3aa:	d057      	beq.n	801d45c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801d3ac:	2b09      	cmp	r3, #9
 801d3ae:	d15a      	bne.n	801d466 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d3b0:	682b      	ldr	r3, [r5, #0]
 801d3b2:	6a22      	ldr	r2, [r4, #32]
 801d3b4:	1a9b      	subs	r3, r3, r2
 801d3b6:	2bf0      	cmp	r3, #240	; 0xf0
 801d3b8:	d955      	bls.n	801d466 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801d3ba:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801d3bc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801d3c0:	f7ff ff3a 	bl	801d238 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d3c4:	4b72      	ldr	r3, [pc, #456]	; (801d590 <tcp_slowtmr+0x2b4>)
 801d3c6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801d3c8:	f1b9 0f00 	cmp.w	r9, #0
 801d3cc:	f000 817e 	beq.w	801d6cc <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d3d0:	42a3      	cmp	r3, r4
 801d3d2:	f000 81df 	beq.w	801d794 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801d3d6:	68e3      	ldr	r3, [r4, #12]
 801d3d8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801d3dc:	f1ba 0f00 	cmp.w	sl, #0
 801d3e0:	f040 8147 	bne.w	801d672 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3e4:	7d23      	ldrb	r3, [r4, #20]
 801d3e6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d3e8:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3ec:	f000 8153 	beq.w	801d696 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801d3f0:	4621      	mov	r1, r4
 801d3f2:	2002      	movs	r0, #2
 801d3f4:	f7fe fbc4 	bl	801bb80 <memp_free>
      tcp_active_pcbs_changed = 0;
 801d3f8:	4c68      	ldr	r4, [pc, #416]	; (801d59c <tcp_slowtmr+0x2c0>)
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801d3fe:	b13e      	cbz	r6, 801d410 <tcp_slowtmr+0x134>
 801d400:	f06f 010c 	mvn.w	r1, #12
 801d404:	4650      	mov	r0, sl
 801d406:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801d408:	7823      	ldrb	r3, [r4, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	f47f af75 	bne.w	801d2fa <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801d410:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801d412:	2c00      	cmp	r4, #0
 801d414:	f47f af78 	bne.w	801d308 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801d418:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801d5b8 <tcp_slowtmr+0x2dc>
 801d41c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801d420:	b1cc      	cbz	r4, 801d456 <tcp_slowtmr+0x17a>
  prev = NULL;
 801d422:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d424:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801d58c <tcp_slowtmr+0x2b0>
 801d428:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d5bc <tcp_slowtmr+0x2e0>
 801d42c:	4f5c      	ldr	r7, [pc, #368]	; (801d5a0 <tcp_slowtmr+0x2c4>)
 801d42e:	7d23      	ldrb	r3, [r4, #20]
 801d430:	2b0a      	cmp	r3, #10
 801d432:	d006      	beq.n	801d442 <tcp_slowtmr+0x166>
 801d434:	4643      	mov	r3, r8
 801d436:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801d43a:	4651      	mov	r1, sl
 801d43c:	4638      	mov	r0, r7
 801d43e:	f009 f981 	bl	8026744 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d442:	682b      	ldr	r3, [r5, #0]
 801d444:	6a22      	ldr	r2, [r4, #32]
 801d446:	1a9b      	subs	r3, r3, r2
 801d448:	2bf0      	cmp	r3, #240	; 0xf0
 801d44a:	f200 80d4 	bhi.w	801d5f6 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801d44e:	4626      	mov	r6, r4
 801d450:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d452:	2c00      	cmp	r4, #0
 801d454:	d1eb      	bne.n	801d42e <tcp_slowtmr+0x152>
}
 801d456:	b007      	add	sp, #28
 801d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d45c:	682b      	ldr	r3, [r5, #0]
 801d45e:	6a22      	ldr	r2, [r4, #32]
 801d460:	1a9b      	subs	r3, r3, r2
 801d462:	2b28      	cmp	r3, #40	; 0x28
 801d464:	d8a9      	bhi.n	801d3ba <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801d466:	f1b8 0f00 	cmp.w	r8, #0
 801d46a:	d1a6      	bne.n	801d3ba <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801d46c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d46e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801d470:	3301      	adds	r3, #1
      pcb = pcb->next;
 801d472:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801d474:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801d476:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801d478:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d47a:	d815      	bhi.n	801d4a8 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801d47c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801d59c <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801d480:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801d484:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801d488:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	f000 80ce 	beq.w	801d62e <tcp_slowtmr+0x352>
 801d492:	4621      	mov	r1, r4
 801d494:	6920      	ldr	r0, [r4, #16]
 801d496:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801d498:	f899 3000 	ldrb.w	r3, [r9]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	f47f af2c 	bne.w	801d2fa <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801d4a2:	2800      	cmp	r0, #0
 801d4a4:	f000 80c3 	beq.w	801d62e <tcp_slowtmr+0x352>
 801d4a8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d4aa:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801d4ac:	2c00      	cmp	r4, #0
 801d4ae:	f47f af2b 	bne.w	801d308 <tcp_slowtmr+0x2c>
 801d4b2:	e7b1      	b.n	801d418 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801d4b4:	8b63      	ldrh	r3, [r4, #26]
 801d4b6:	06db      	lsls	r3, r3, #27
 801d4b8:	d508      	bpl.n	801d4cc <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d4ba:	682b      	ldr	r3, [r5, #0]
 801d4bc:	6a22      	ldr	r2, [r4, #32]
 801d4be:	1a9b      	subs	r3, r3, r2
 801d4c0:	2b28      	cmp	r3, #40	; 0x28
 801d4c2:	d903      	bls.n	801d4cc <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801d4c4:	f108 0801 	add.w	r8, r8, #1
 801d4c8:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801d4cc:	f04f 0a00 	mov.w	sl, #0
 801d4d0:	e75c      	b.n	801d38c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801d4d2:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801d4d6:	f1b8 0f00 	cmp.w	r8, #0
 801d4da:	d071      	beq.n	801d5c0 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d4dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d4de:	b133      	cbz	r3, 801d4ee <tcp_slowtmr+0x212>
 801d4e0:	463b      	mov	r3, r7
 801d4e2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801d4e6:	492f      	ldr	r1, [pc, #188]	; (801d5a4 <tcp_slowtmr+0x2c8>)
 801d4e8:	482d      	ldr	r0, [pc, #180]	; (801d5a0 <tcp_slowtmr+0x2c4>)
 801d4ea:	f009 f92b 	bl	8026744 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d4ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	f000 8171 	beq.w	801d7d8 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d4f6:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801d4fa:	2b0b      	cmp	r3, #11
 801d4fc:	f240 80d2 	bls.w	801d6a4 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801d500:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801d502:	f04f 0801 	mov.w	r8, #1
 801d506:	e71b      	b.n	801d340 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d508:	463b      	mov	r3, r7
 801d50a:	f240 42be 	movw	r2, #1214	; 0x4be
 801d50e:	4926      	ldr	r1, [pc, #152]	; (801d5a8 <tcp_slowtmr+0x2cc>)
 801d510:	4823      	ldr	r0, [pc, #140]	; (801d5a0 <tcp_slowtmr+0x2c4>)
 801d512:	f009 f917 	bl	8026744 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d516:	7d23      	ldrb	r3, [r4, #20]
 801d518:	2b01      	cmp	r3, #1
 801d51a:	f47f aefc 	bne.w	801d316 <tcp_slowtmr+0x3a>
 801d51e:	463b      	mov	r3, r7
 801d520:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801d524:	4921      	ldr	r1, [pc, #132]	; (801d5ac <tcp_slowtmr+0x2d0>)
 801d526:	481e      	ldr	r0, [pc, #120]	; (801d5a0 <tcp_slowtmr+0x2c4>)
 801d528:	f009 f90c 	bl	8026744 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d52c:	7d23      	ldrb	r3, [r4, #20]
 801d52e:	2b0a      	cmp	r3, #10
 801d530:	f47f aef4 	bne.w	801d31c <tcp_slowtmr+0x40>
 801d534:	463b      	mov	r3, r7
 801d536:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801d53a:	491d      	ldr	r1, [pc, #116]	; (801d5b0 <tcp_slowtmr+0x2d4>)
 801d53c:	4818      	ldr	r0, [pc, #96]	; (801d5a0 <tcp_slowtmr+0x2c4>)
 801d53e:	f009 f901 	bl	8026744 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d542:	f89b 2000 	ldrb.w	r2, [fp]
 801d546:	7fa3      	ldrb	r3, [r4, #30]
 801d548:	4293      	cmp	r3, r2
 801d54a:	f47f aeed 	bne.w	801d328 <tcp_slowtmr+0x4c>
      continue;
 801d54e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d550:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d552:	2c00      	cmp	r4, #0
 801d554:	f47f aed8 	bne.w	801d308 <tcp_slowtmr+0x2c>
 801d558:	e75e      	b.n	801d418 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d55a:	2a05      	cmp	r2, #5
 801d55c:	d9b9      	bls.n	801d4d2 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801d55e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801d562:	f04f 0801 	mov.w	r8, #1
 801d566:	e711      	b.n	801d38c <tcp_slowtmr+0xb0>
 801d568:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801d56a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801d56c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801d56e:	6860      	ldr	r0, [r4, #4]
 801d570:	b108      	cbz	r0, 801d576 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801d572:	f7ff f81d 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d576:	4621      	mov	r1, r4
 801d578:	2004      	movs	r0, #4
 801d57a:	f7fe fb01 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d57e:	2e00      	cmp	r6, #0
 801d580:	d1f3      	bne.n	801d56a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801d582:	9c05      	ldr	r4, [sp, #20]
 801d584:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d586:	e70e      	b.n	801d3a6 <tcp_slowtmr+0xca>
 801d588:	2002e4ac 	.word	0x2002e4ac
 801d58c:	08045704 	.word	0x08045704
 801d590:	2002e49c 	.word	0x2002e49c
 801d594:	000a4cb8 	.word	0x000a4cb8
 801d598:	10624dd3 	.word	0x10624dd3
 801d59c:	2002e4a0 	.word	0x2002e4a0
 801d5a0:	0802b43c 	.word	0x0802b43c
 801d5a4:	08045a70 	.word	0x08045a70
 801d5a8:	080459e8 	.word	0x080459e8
 801d5ac:	08045a14 	.word	0x08045a14
 801d5b0:	08045a40 	.word	0x08045a40
 801d5b4:	2002e4b1 	.word	0x2002e4b1
 801d5b8:	2002e4b4 	.word	0x2002e4b4
 801d5bc:	08045b34 	.word	0x08045b34
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d5c0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801d5c4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801d5c8:	b291      	uxth	r1, r2
 801d5ca:	4281      	cmp	r1, r0
 801d5cc:	d802      	bhi.n	801d5d4 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801d5ce:	1c4a      	adds	r2, r1, #1
 801d5d0:	b212      	sxth	r2, r2
 801d5d2:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801d5d4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801d5d8:	4291      	cmp	r1, r2
 801d5da:	f73f aeb1 	bgt.w	801d340 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d5de:	4620      	mov	r0, r4
 801d5e0:	f003 f85a 	bl	8020698 <tcp_rexmit_rto_prepare>
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	f000 80a0 	beq.w	801d72a <tcp_slowtmr+0x44e>
 801d5ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	f000 8098 	beq.w	801d722 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801d5f2:	7d23      	ldrb	r3, [r4, #20]
 801d5f4:	e6a4      	b.n	801d340 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	f7ff fe1e 	bl	801d238 <tcp_pcb_purge>
      if (prev != NULL) {
 801d5fc:	2e00      	cmp	r6, #0
 801d5fe:	f000 80d1 	beq.w	801d7a4 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d602:	f8d9 3000 	ldr.w	r3, [r9]
 801d606:	42a3      	cmp	r3, r4
 801d608:	f000 80ee 	beq.w	801d7e8 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801d60c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801d610:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d614:	7d23      	ldrb	r3, [r4, #20]
 801d616:	2b01      	cmp	r3, #1
 801d618:	f000 80d7 	beq.w	801d7ca <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801d61c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801d61e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801d620:	2002      	movs	r0, #2
 801d622:	f7fe faad 	bl	801bb80 <memp_free>
  while (pcb != NULL) {
 801d626:	2c00      	cmp	r4, #0
 801d628:	f47f af01 	bne.w	801d42e <tcp_slowtmr+0x152>
 801d62c:	e713      	b.n	801d456 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801d62e:	4620      	mov	r0, r4
 801d630:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d632:	4634      	mov	r4, r6
          tcp_output(prev);
 801d634:	f003 f96e 	bl	8020914 <tcp_output>
  while (pcb != NULL) {
 801d638:	2c00      	cmp	r4, #0
 801d63a:	f47f ae65 	bne.w	801d308 <tcp_slowtmr+0x2c>
 801d63e:	e6eb      	b.n	801d418 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801d640:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801d644:	4870      	ldr	r0, [pc, #448]	; (801d808 <tcp_slowtmr+0x52c>)
 801d646:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801d64a:	4b70      	ldr	r3, [pc, #448]	; (801d80c <tcp_slowtmr+0x530>)
 801d64c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d650:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801d654:	f67f af3a 	bls.w	801d4cc <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801d658:	4620      	mov	r0, r4
 801d65a:	f003 fb91 	bl	8020d80 <tcp_keepalive>
        if (err == ERR_OK) {
 801d65e:	2800      	cmp	r0, #0
 801d660:	f47f af34 	bne.w	801d4cc <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801d664:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801d668:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801d66a:	3301      	adds	r3, #1
 801d66c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801d670:	e68c      	b.n	801d38c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d672:	8b23      	ldrh	r3, [r4, #24]
 801d674:	4620      	mov	r0, r4
 801d676:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d678:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d67a:	9302      	str	r3, [sp, #8]
 801d67c:	8ae3      	ldrh	r3, [r4, #22]
 801d67e:	9301      	str	r3, [sp, #4]
 801d680:	1d23      	adds	r3, r4, #4
 801d682:	9300      	str	r3, [sp, #0]
 801d684:	4623      	mov	r3, r4
 801d686:	f003 f8cb 	bl	8020820 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d68a:	7d23      	ldrb	r3, [r4, #20]
 801d68c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d68e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d692:	f47f aead 	bne.w	801d3f0 <tcp_slowtmr+0x114>
 801d696:	463b      	mov	r3, r7
 801d698:	22d4      	movs	r2, #212	; 0xd4
 801d69a:	495d      	ldr	r1, [pc, #372]	; (801d810 <tcp_slowtmr+0x534>)
 801d69c:	485d      	ldr	r0, [pc, #372]	; (801d814 <tcp_slowtmr+0x538>)
 801d69e:	f009 f851 	bl	8026744 <iprintf>
 801d6a2:	e6a5      	b.n	801d3f0 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d6a4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801d6a8:	4a5b      	ldr	r2, [pc, #364]	; (801d818 <tcp_slowtmr+0x53c>)
 801d6aa:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801d6ac:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d6b0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	d216      	bcs.n	801d6e6 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801d6b8:	3301      	adds	r3, #1
 801d6ba:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801d6bc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801d6be:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801d6c2:	d210      	bcs.n	801d6e6 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801d6c4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801d6c6:	f04f 0800 	mov.w	r8, #0
 801d6ca:	e639      	b.n	801d340 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801d6cc:	42a3      	cmp	r3, r4
 801d6ce:	d006      	beq.n	801d6de <tcp_slowtmr+0x402>
 801d6d0:	463b      	mov	r3, r7
 801d6d2:	f240 5271 	movw	r2, #1393	; 0x571
 801d6d6:	4951      	ldr	r1, [pc, #324]	; (801d81c <tcp_slowtmr+0x540>)
 801d6d8:	484e      	ldr	r0, [pc, #312]	; (801d814 <tcp_slowtmr+0x538>)
 801d6da:	f009 f833 	bl	8026744 <iprintf>
        tcp_active_pcbs = pcb->next;
 801d6de:	68e3      	ldr	r3, [r4, #12]
 801d6e0:	4a4f      	ldr	r2, [pc, #316]	; (801d820 <tcp_slowtmr+0x544>)
 801d6e2:	6013      	str	r3, [r2, #0]
 801d6e4:	e67a      	b.n	801d3dc <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801d6e6:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801d6ea:	b936      	cbnz	r6, 801d6fa <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f003 fb6d 	bl	8020dcc <tcp_zero_window_probe>
 801d6f2:	b140      	cbz	r0, 801d706 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d6f4:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801d6f6:	7d23      	ldrb	r3, [r4, #20]
 801d6f8:	e622      	b.n	801d340 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d6fa:	4631      	mov	r1, r6
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	f002 fe17 	bl	8020330 <tcp_split_unsent_seg>
 801d702:	2800      	cmp	r0, #0
 801d704:	d078      	beq.n	801d7f8 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d706:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801d70a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d70e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801d710:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d714:	f63f af6d 	bhi.w	801d5f2 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801d718:	3301      	adds	r3, #1
 801d71a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801d71e:	7d23      	ldrb	r3, [r4, #20]
 801d720:	e60e      	b.n	801d340 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d722:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d724:	2b00      	cmp	r3, #0
 801d726:	f43f af64 	beq.w	801d5f2 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801d72a:	7d23      	ldrb	r3, [r4, #20]
 801d72c:	2b02      	cmp	r3, #2
 801d72e:	d014      	beq.n	801d75a <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d730:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d734:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801d738:	2a0c      	cmp	r2, #12
 801d73a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801d73e:	bf28      	it	cs
 801d740:	220c      	movcs	r2, #12
 801d742:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801d746:	4937      	ldr	r1, [pc, #220]	; (801d824 <tcp_slowtmr+0x548>)
 801d748:	5c8a      	ldrb	r2, [r1, r2]
 801d74a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d74c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d750:	4293      	cmp	r3, r2
 801d752:	bfa8      	it	ge
 801d754:	4613      	movge	r3, r2
 801d756:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d75a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801d75e:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d760:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d764:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801d766:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801d768:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d76c:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801d770:	bf28      	it	cs
 801d772:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d774:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d776:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801d77a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d77e:	bf88      	it	hi
 801d780:	4613      	movhi	r3, r2
 801d782:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801d786:	2300      	movs	r3, #0
 801d788:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801d78a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801d78e:	f003 faab 	bl	8020ce8 <tcp_rexmit_rto_commit>
 801d792:	e72e      	b.n	801d5f2 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d794:	463b      	mov	r3, r7
 801d796:	f240 526d 	movw	r2, #1389	; 0x56d
 801d79a:	4923      	ldr	r1, [pc, #140]	; (801d828 <tcp_slowtmr+0x54c>)
 801d79c:	481d      	ldr	r0, [pc, #116]	; (801d814 <tcp_slowtmr+0x538>)
 801d79e:	f008 ffd1 	bl	8026744 <iprintf>
 801d7a2:	e618      	b.n	801d3d6 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801d7a4:	f8d9 3000 	ldr.w	r3, [r9]
 801d7a8:	42a3      	cmp	r3, r4
 801d7aa:	d006      	beq.n	801d7ba <tcp_slowtmr+0x4de>
 801d7ac:	4643      	mov	r3, r8
 801d7ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801d7b2:	491e      	ldr	r1, [pc, #120]	; (801d82c <tcp_slowtmr+0x550>)
 801d7b4:	4638      	mov	r0, r7
 801d7b6:	f008 ffc5 	bl	8026744 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7ba:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801d7bc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7c0:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801d7c2:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7c6:	f47f af29 	bne.w	801d61c <tcp_slowtmr+0x340>
 801d7ca:	4643      	mov	r3, r8
 801d7cc:	22d4      	movs	r2, #212	; 0xd4
 801d7ce:	4910      	ldr	r1, [pc, #64]	; (801d810 <tcp_slowtmr+0x534>)
 801d7d0:	4638      	mov	r0, r7
 801d7d2:	f008 ffb7 	bl	8026744 <iprintf>
 801d7d6:	e721      	b.n	801d61c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d7d8:	463b      	mov	r3, r7
 801d7da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801d7de:	4914      	ldr	r1, [pc, #80]	; (801d830 <tcp_slowtmr+0x554>)
 801d7e0:	480c      	ldr	r0, [pc, #48]	; (801d814 <tcp_slowtmr+0x538>)
 801d7e2:	f008 ffaf 	bl	8026744 <iprintf>
 801d7e6:	e686      	b.n	801d4f6 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d7e8:	4643      	mov	r3, r8
 801d7ea:	f240 52af 	movw	r2, #1455	; 0x5af
 801d7ee:	4911      	ldr	r1, [pc, #68]	; (801d834 <tcp_slowtmr+0x558>)
 801d7f0:	4638      	mov	r0, r7
 801d7f2:	f008 ffa7 	bl	8026744 <iprintf>
 801d7f6:	e709      	b.n	801d60c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801d7f8:	4620      	mov	r0, r4
 801d7fa:	f003 f88b 	bl	8020914 <tcp_output>
 801d7fe:	2800      	cmp	r0, #0
 801d800:	d181      	bne.n	801d706 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d802:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801d804:	7d23      	ldrb	r3, [r4, #20]
 801d806:	e59b      	b.n	801d340 <tcp_slowtmr+0x64>
 801d808:	000124f8 	.word	0x000124f8
 801d80c:	10624dd3 	.word	0x10624dd3
 801d810:	08045740 	.word	0x08045740
 801d814:	0802b43c 	.word	0x0802b43c
 801d818:	08045df8 	.word	0x08045df8
 801d81c:	08045b08 	.word	0x08045b08
 801d820:	2002e49c 	.word	0x2002e49c
 801d824:	08045dd8 	.word	0x08045dd8
 801d828:	08045adc 	.word	0x08045adc
 801d82c:	08045b8c 	.word	0x08045b8c
 801d830:	08045aa4 	.word	0x08045aa4
 801d834:	08045b64 	.word	0x08045b64

0801d838 <tcp_pcb_remove>:
{
 801d838:	b538      	push	{r3, r4, r5, lr}
 801d83a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d83c:	460c      	mov	r4, r1
 801d83e:	2900      	cmp	r1, #0
 801d840:	d04a      	beq.n	801d8d8 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d842:	2d00      	cmp	r5, #0
 801d844:	d051      	beq.n	801d8ea <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801d846:	682b      	ldr	r3, [r5, #0]
 801d848:	42a3      	cmp	r3, r4
 801d84a:	d032      	beq.n	801d8b2 <tcp_pcb_remove+0x7a>
 801d84c:	b12b      	cbz	r3, 801d85a <tcp_pcb_remove+0x22>
 801d84e:	68da      	ldr	r2, [r3, #12]
 801d850:	42a2      	cmp	r2, r4
 801d852:	d03e      	beq.n	801d8d2 <tcp_pcb_remove+0x9a>
 801d854:	4613      	mov	r3, r2
 801d856:	2b00      	cmp	r3, #0
 801d858:	d1f9      	bne.n	801d84e <tcp_pcb_remove+0x16>
 801d85a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801d85c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801d85e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801d860:	f7ff fcea 	bl	801d238 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801d864:	7d23      	ldrb	r3, [r4, #20]
 801d866:	2b0a      	cmp	r3, #10
 801d868:	d02d      	beq.n	801d8c6 <tcp_pcb_remove+0x8e>
 801d86a:	2b01      	cmp	r3, #1
 801d86c:	d01d      	beq.n	801d8aa <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801d86e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801d870:	07da      	lsls	r2, r3, #31
 801d872:	d421      	bmi.n	801d8b8 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d874:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d876:	b133      	cbz	r3, 801d886 <tcp_pcb_remove+0x4e>
 801d878:	4b20      	ldr	r3, [pc, #128]	; (801d8fc <tcp_pcb_remove+0xc4>)
 801d87a:	f640 0293 	movw	r2, #2195	; 0x893
 801d87e:	4920      	ldr	r1, [pc, #128]	; (801d900 <tcp_pcb_remove+0xc8>)
 801d880:	4820      	ldr	r0, [pc, #128]	; (801d904 <tcp_pcb_remove+0xcc>)
 801d882:	f008 ff5f 	bl	8026744 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d886:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d888:	b133      	cbz	r3, 801d898 <tcp_pcb_remove+0x60>
 801d88a:	4b1c      	ldr	r3, [pc, #112]	; (801d8fc <tcp_pcb_remove+0xc4>)
 801d88c:	f640 0294 	movw	r2, #2196	; 0x894
 801d890:	491d      	ldr	r1, [pc, #116]	; (801d908 <tcp_pcb_remove+0xd0>)
 801d892:	481c      	ldr	r0, [pc, #112]	; (801d904 <tcp_pcb_remove+0xcc>)
 801d894:	f008 ff56 	bl	8026744 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d898:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d89a:	b133      	cbz	r3, 801d8aa <tcp_pcb_remove+0x72>
 801d89c:	4b17      	ldr	r3, [pc, #92]	; (801d8fc <tcp_pcb_remove+0xc4>)
 801d89e:	f640 0296 	movw	r2, #2198	; 0x896
 801d8a2:	491a      	ldr	r1, [pc, #104]	; (801d90c <tcp_pcb_remove+0xd4>)
 801d8a4:	4817      	ldr	r0, [pc, #92]	; (801d904 <tcp_pcb_remove+0xcc>)
 801d8a6:	f008 ff4d 	bl	8026744 <iprintf>
  pcb->state = CLOSED;
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801d8ae:	82e3      	strh	r3, [r4, #22]
}
 801d8b0:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801d8b2:	68e3      	ldr	r3, [r4, #12]
 801d8b4:	602b      	str	r3, [r5, #0]
 801d8b6:	e7d0      	b.n	801d85a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801d8b8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801d8bc:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801d8be:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801d8c0:	f003 f828 	bl	8020914 <tcp_output>
  if (pcb->state != LISTEN) {
 801d8c4:	7d23      	ldrb	r3, [r4, #20]
 801d8c6:	2b01      	cmp	r3, #1
 801d8c8:	d0ef      	beq.n	801d8aa <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d8ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d1d3      	bne.n	801d878 <tcp_pcb_remove+0x40>
 801d8d0:	e7d9      	b.n	801d886 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801d8d2:	68e2      	ldr	r2, [r4, #12]
 801d8d4:	60da      	str	r2, [r3, #12]
 801d8d6:	e7c0      	b.n	801d85a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d8d8:	4b08      	ldr	r3, [pc, #32]	; (801d8fc <tcp_pcb_remove+0xc4>)
 801d8da:	f640 0283 	movw	r2, #2179	; 0x883
 801d8de:	490c      	ldr	r1, [pc, #48]	; (801d910 <tcp_pcb_remove+0xd8>)
 801d8e0:	4808      	ldr	r0, [pc, #32]	; (801d904 <tcp_pcb_remove+0xcc>)
 801d8e2:	f008 ff2f 	bl	8026744 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d8e6:	2d00      	cmp	r5, #0
 801d8e8:	d1ad      	bne.n	801d846 <tcp_pcb_remove+0xe>
 801d8ea:	4b04      	ldr	r3, [pc, #16]	; (801d8fc <tcp_pcb_remove+0xc4>)
 801d8ec:	f640 0284 	movw	r2, #2180	; 0x884
 801d8f0:	4908      	ldr	r1, [pc, #32]	; (801d914 <tcp_pcb_remove+0xdc>)
 801d8f2:	4804      	ldr	r0, [pc, #16]	; (801d904 <tcp_pcb_remove+0xcc>)
 801d8f4:	f008 ff26 	bl	8026744 <iprintf>
 801d8f8:	e7a5      	b.n	801d846 <tcp_pcb_remove+0xe>
 801d8fa:	bf00      	nop
 801d8fc:	08045704 	.word	0x08045704
 801d900:	08045bf0 	.word	0x08045bf0
 801d904:	0802b43c 	.word	0x0802b43c
 801d908:	08045c08 	.word	0x08045c08
 801d90c:	08045c24 	.word	0x08045c24
 801d910:	08045bb4 	.word	0x08045bb4
 801d914:	08045bd0 	.word	0x08045bd0

0801d918 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d918:	2800      	cmp	r0, #0
 801d91a:	f000 80ad 	beq.w	801da78 <tcp_abandon+0x160>
{
 801d91e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d922:	7d03      	ldrb	r3, [r0, #20]
{
 801d924:	b087      	sub	sp, #28
 801d926:	4605      	mov	r5, r0
 801d928:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d92a:	2b01      	cmp	r3, #1
 801d92c:	f000 808b 	beq.w	801da46 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801d930:	2b0a      	cmp	r3, #10
 801d932:	f000 8093 	beq.w	801da5c <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801d936:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801d938:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801d93c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801d940:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801d944:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801d946:	b96b      	cbnz	r3, 801d964 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801d948:	8aef      	ldrh	r7, [r5, #22]
 801d94a:	2f00      	cmp	r7, #0
 801d94c:	d052      	beq.n	801d9f4 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d94e:	4a51      	ldr	r2, [pc, #324]	; (801da94 <tcp_abandon+0x17c>)
 801d950:	6813      	ldr	r3, [r2, #0]
 801d952:	42ab      	cmp	r3, r5
 801d954:	d074      	beq.n	801da40 <tcp_abandon+0x128>
 801d956:	2b00      	cmp	r3, #0
 801d958:	d050      	beq.n	801d9fc <tcp_abandon+0xe4>
 801d95a:	68da      	ldr	r2, [r3, #12]
 801d95c:	42aa      	cmp	r2, r5
 801d95e:	d04b      	beq.n	801d9f8 <tcp_abandon+0xe0>
 801d960:	4613      	mov	r3, r2
 801d962:	e7f8      	b.n	801d956 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d964:	4629      	mov	r1, r5
 801d966:	484c      	ldr	r0, [pc, #304]	; (801da98 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801d968:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d96a:	f7ff ff65 	bl	801d838 <tcp_pcb_remove>
 801d96e:	4b4b      	ldr	r3, [pc, #300]	; (801da9c <tcp_abandon+0x184>)
 801d970:	2201      	movs	r2, #1
 801d972:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d974:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801d976:	b164      	cbz	r4, 801d992 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801d978:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d97a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d97c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d980:	b108      	cbz	r0, 801d986 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801d982:	f7fe fe15 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d986:	4651      	mov	r1, sl
 801d988:	2004      	movs	r0, #4
 801d98a:	f7fe f8f9 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d98e:	2c00      	cmp	r4, #0
 801d990:	d1f2      	bne.n	801d978 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801d992:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801d994:	b164      	cbz	r4, 801d9b0 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801d996:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d998:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d99a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d99e:	b108      	cbz	r0, 801d9a4 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801d9a0:	f7fe fe06 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d9a4:	4651      	mov	r1, sl
 801d9a6:	2004      	movs	r0, #4
 801d9a8:	f7fe f8ea 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d9ac:	2c00      	cmp	r4, #0
 801d9ae:	d1f2      	bne.n	801d996 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801d9b0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d9b2:	b164      	cbz	r4, 801d9ce <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801d9b4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d9b6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d9b8:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d9bc:	b108      	cbz	r0, 801d9c2 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801d9be:	f7fe fdf7 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d9c2:	4651      	mov	r1, sl
 801d9c4:	2004      	movs	r0, #4
 801d9c6:	f7fe f8db 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801d9ca:	2c00      	cmp	r4, #0
 801d9cc:	d1f2      	bne.n	801d9b4 <tcp_abandon+0x9c>
    if (send_rst) {
 801d9ce:	b9ce      	cbnz	r6, 801da04 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9d0:	7d2b      	ldrb	r3, [r5, #20]
 801d9d2:	2b01      	cmp	r3, #1
 801d9d4:	d024      	beq.n	801da20 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801d9d6:	4629      	mov	r1, r5
 801d9d8:	2002      	movs	r0, #2
 801d9da:	f7fe f8d1 	bl	801bb80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d9de:	f1b8 0f00 	cmp.w	r8, #0
 801d9e2:	d02a      	beq.n	801da3a <tcp_abandon+0x122>
 801d9e4:	f06f 010c 	mvn.w	r1, #12
 801d9e8:	4648      	mov	r0, r9
 801d9ea:	4643      	mov	r3, r8
}
 801d9ec:	b007      	add	sp, #28
 801d9ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d9f2:	4718      	bx	r3
    int send_rst = 0;
 801d9f4:	461e      	mov	r6, r3
 801d9f6:	e7bd      	b.n	801d974 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d9f8:	68ea      	ldr	r2, [r5, #12]
 801d9fa:	60da      	str	r2, [r3, #12]
 801d9fc:	2700      	movs	r7, #0
    int send_rst = 0;
 801d9fe:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da00:	60ef      	str	r7, [r5, #12]
 801da02:	e7b7      	b.n	801d974 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801da04:	9701      	str	r7, [sp, #4]
 801da06:	465a      	mov	r2, fp
 801da08:	8b2b      	ldrh	r3, [r5, #24]
 801da0a:	4628      	mov	r0, r5
 801da0c:	9905      	ldr	r1, [sp, #20]
 801da0e:	9302      	str	r3, [sp, #8]
 801da10:	1d2b      	adds	r3, r5, #4
 801da12:	9300      	str	r3, [sp, #0]
 801da14:	462b      	mov	r3, r5
 801da16:	f002 ff03 	bl	8020820 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da1a:	7d2b      	ldrb	r3, [r5, #20]
 801da1c:	2b01      	cmp	r3, #1
 801da1e:	d1da      	bne.n	801d9d6 <tcp_abandon+0xbe>
 801da20:	491f      	ldr	r1, [pc, #124]	; (801daa0 <tcp_abandon+0x188>)
 801da22:	22d4      	movs	r2, #212	; 0xd4
 801da24:	4b1f      	ldr	r3, [pc, #124]	; (801daa4 <tcp_abandon+0x18c>)
 801da26:	4820      	ldr	r0, [pc, #128]	; (801daa8 <tcp_abandon+0x190>)
 801da28:	f008 fe8c 	bl	8026744 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801da2c:	4629      	mov	r1, r5
 801da2e:	2002      	movs	r0, #2
 801da30:	f7fe f8a6 	bl	801bb80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801da34:	f1b8 0f00 	cmp.w	r8, #0
 801da38:	d1d4      	bne.n	801d9e4 <tcp_abandon+0xcc>
}
 801da3a:	b007      	add	sp, #28
 801da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da40:	68eb      	ldr	r3, [r5, #12]
 801da42:	6013      	str	r3, [r2, #0]
 801da44:	e7da      	b.n	801d9fc <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801da46:	4b17      	ldr	r3, [pc, #92]	; (801daa4 <tcp_abandon+0x18c>)
 801da48:	f44f 7210 	mov.w	r2, #576	; 0x240
 801da4c:	4917      	ldr	r1, [pc, #92]	; (801daac <tcp_abandon+0x194>)
 801da4e:	4816      	ldr	r0, [pc, #88]	; (801daa8 <tcp_abandon+0x190>)
 801da50:	f008 fe78 	bl	8026744 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801da54:	7d2b      	ldrb	r3, [r5, #20]
 801da56:	2b0a      	cmp	r3, #10
 801da58:	f47f af6d 	bne.w	801d936 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801da5c:	4629      	mov	r1, r5
 801da5e:	4814      	ldr	r0, [pc, #80]	; (801dab0 <tcp_abandon+0x198>)
 801da60:	f7ff feea 	bl	801d838 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da64:	7d2b      	ldrb	r3, [r5, #20]
 801da66:	2b01      	cmp	r3, #1
 801da68:	d00d      	beq.n	801da86 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801da6a:	4629      	mov	r1, r5
 801da6c:	2002      	movs	r0, #2
}
 801da6e:	b007      	add	sp, #28
 801da70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801da74:	f7fe b884 	b.w	801bb80 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801da78:	4b0a      	ldr	r3, [pc, #40]	; (801daa4 <tcp_abandon+0x18c>)
 801da7a:	f240 223d 	movw	r2, #573	; 0x23d
 801da7e:	490d      	ldr	r1, [pc, #52]	; (801dab4 <tcp_abandon+0x19c>)
 801da80:	4809      	ldr	r0, [pc, #36]	; (801daa8 <tcp_abandon+0x190>)
 801da82:	f008 be5f 	b.w	8026744 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da86:	4b07      	ldr	r3, [pc, #28]	; (801daa4 <tcp_abandon+0x18c>)
 801da88:	22d4      	movs	r2, #212	; 0xd4
 801da8a:	4905      	ldr	r1, [pc, #20]	; (801daa0 <tcp_abandon+0x188>)
 801da8c:	4806      	ldr	r0, [pc, #24]	; (801daa8 <tcp_abandon+0x190>)
 801da8e:	f008 fe59 	bl	8026744 <iprintf>
 801da92:	e7ea      	b.n	801da6a <tcp_abandon+0x152>
 801da94:	2002e4a4 	.word	0x2002e4a4
 801da98:	2002e49c 	.word	0x2002e49c
 801da9c:	2002e4a0 	.word	0x2002e4a0
 801daa0:	08045740 	.word	0x08045740
 801daa4:	08045704 	.word	0x08045704
 801daa8:	0802b43c 	.word	0x0802b43c
 801daac:	08045c58 	.word	0x08045c58
 801dab0:	2002e4b4 	.word	0x2002e4b4
 801dab4:	08045c3c 	.word	0x08045c3c

0801dab8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801dab8:	2101      	movs	r1, #1
 801daba:	f7ff bf2d 	b.w	801d918 <tcp_abandon>
 801dabe:	bf00      	nop

0801dac0 <tcp_accept_null>:
{
 801dac0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801dac2:	460c      	mov	r4, r1
 801dac4:	b131      	cbz	r1, 801dad4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801dac6:	4620      	mov	r0, r4
 801dac8:	2101      	movs	r1, #1
 801daca:	f7ff ff25 	bl	801d918 <tcp_abandon>
}
 801dace:	f06f 000c 	mvn.w	r0, #12
 801dad2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801dad4:	4b06      	ldr	r3, [pc, #24]	; (801daf0 <tcp_accept_null+0x30>)
 801dad6:	f240 320f 	movw	r2, #783	; 0x30f
 801dada:	4906      	ldr	r1, [pc, #24]	; (801daf4 <tcp_accept_null+0x34>)
 801dadc:	4806      	ldr	r0, [pc, #24]	; (801daf8 <tcp_accept_null+0x38>)
 801dade:	f008 fe31 	bl	8026744 <iprintf>
  tcp_abandon(pcb, 1);
 801dae2:	4620      	mov	r0, r4
 801dae4:	2101      	movs	r1, #1
 801dae6:	f7ff ff17 	bl	801d918 <tcp_abandon>
}
 801daea:	f06f 000c 	mvn.w	r0, #12
 801daee:	bd10      	pop	{r4, pc}
 801daf0:	08045704 	.word	0x08045704
 801daf4:	08045c8c 	.word	0x08045c8c
 801daf8:	0802b43c 	.word	0x0802b43c

0801dafc <tcp_netif_ip_addr_changed_pcblist>:
{
 801dafc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801dafe:	4605      	mov	r5, r0
{
 801db00:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801db02:	b178      	cbz	r0, 801db24 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801db04:	b134      	cbz	r4, 801db14 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801db06:	6822      	ldr	r2, [r4, #0]
 801db08:	682b      	ldr	r3, [r5, #0]
 801db0a:	429a      	cmp	r2, r3
 801db0c:	d003      	beq.n	801db16 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801db0e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801db10:	2c00      	cmp	r4, #0
 801db12:	d1f8      	bne.n	801db06 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801db14:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801db16:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801db18:	4620      	mov	r0, r4
 801db1a:	2101      	movs	r1, #1
      pcb = next;
 801db1c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801db1e:	f7ff fefb 	bl	801d918 <tcp_abandon>
      pcb = next;
 801db22:	e7ef      	b.n	801db04 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801db24:	4b03      	ldr	r3, [pc, #12]	; (801db34 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801db26:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801db2a:	4903      	ldr	r1, [pc, #12]	; (801db38 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801db2c:	4803      	ldr	r0, [pc, #12]	; (801db3c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801db2e:	f008 fe09 	bl	8026744 <iprintf>
 801db32:	e7e7      	b.n	801db04 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801db34:	08045704 	.word	0x08045704
 801db38:	08045cac 	.word	0x08045cac
 801db3c:	0802b43c 	.word	0x0802b43c

0801db40 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db40:	4b0f      	ldr	r3, [pc, #60]	; (801db80 <tcp_kill_state+0x40>)
 801db42:	6819      	ldr	r1, [r3, #0]
 801db44:	b1d1      	cbz	r1, 801db7c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db46:	4b0f      	ldr	r3, [pc, #60]	; (801db84 <tcp_kill_state+0x44>)
  inactivity = 0;
 801db48:	2200      	movs	r2, #0
{
 801db4a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db4c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801db4e:	4614      	mov	r4, r2
 801db50:	e001      	b.n	801db56 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db52:	68c9      	ldr	r1, [r1, #12]
 801db54:	b159      	cbz	r1, 801db6e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801db56:	7d0b      	ldrb	r3, [r1, #20]
 801db58:	4283      	cmp	r3, r0
 801db5a:	d1fa      	bne.n	801db52 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db5c:	6a0b      	ldr	r3, [r1, #32]
 801db5e:	1aeb      	subs	r3, r5, r3
 801db60:	4293      	cmp	r3, r2
 801db62:	d3f6      	bcc.n	801db52 <tcp_kill_state+0x12>
 801db64:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db66:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db68:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db6a:	2900      	cmp	r1, #0
 801db6c:	d1f3      	bne.n	801db56 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801db6e:	b11c      	cbz	r4, 801db78 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801db70:	4620      	mov	r0, r4
}
 801db72:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801db74:	f7ff bed0 	b.w	801d918 <tcp_abandon>
}
 801db78:	bc30      	pop	{r4, r5}
 801db7a:	4770      	bx	lr
 801db7c:	4770      	bx	lr
 801db7e:	bf00      	nop
 801db80:	2002e49c 	.word	0x2002e49c
 801db84:	2002e4ac 	.word	0x2002e4ac

0801db88 <tcp_alloc>:
{
 801db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801db8a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801db8e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801db90:	494f      	ldr	r1, [pc, #316]	; (801dcd0 <tcp_alloc+0x148>)
 801db92:	2002      	movs	r0, #2
 801db94:	f7fd ffbe 	bl	801bb14 <memp_malloc_fn>
  if (pcb == NULL) {
 801db98:	4603      	mov	r3, r0
 801db9a:	b320      	cbz	r0, 801dbe6 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801db9c:	229c      	movs	r2, #156	; 0x9c
 801db9e:	2100      	movs	r1, #0
 801dba0:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801dba2:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801dba6:	f007 fe2f 	bl	8025808 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801dbaa:	494a      	ldr	r1, [pc, #296]	; (801dcd4 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801dbac:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801dbae:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801dbb0:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801dbb2:	4849      	ldr	r0, [pc, #292]	; (801dcd8 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801dbb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801dbb8:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801dbba:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801dbbc:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801dbbe:	4a47      	ldr	r2, [pc, #284]	; (801dcdc <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801dbc0:	4947      	ldr	r1, [pc, #284]	; (801dce0 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801dbc2:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801dbc6:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801dbc8:	4c46      	ldr	r4, [pc, #280]	; (801dce4 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801dbca:	4847      	ldr	r0, [pc, #284]	; (801dce8 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801dbcc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801dbd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801dbd4:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801dbd6:	4945      	ldr	r1, [pc, #276]	; (801dcec <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801dbd8:	6498      	str	r0, [r3, #72]	; 0x48
}
 801dbda:	4618      	mov	r0, r3
    pcb->prio = prio;
 801dbdc:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801dbde:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801dbe0:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801dbe2:	72da      	strb	r2, [r3, #11]
}
 801dbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801dbe6:	4e42      	ldr	r6, [pc, #264]	; (801dcf0 <tcp_alloc+0x168>)
 801dbe8:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801dbea:	b15c      	cbz	r4, 801dc04 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801dbec:	4620      	mov	r0, r4
 801dbee:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801dbf0:	8b43      	ldrh	r3, [r0, #26]
 801dbf2:	0719      	lsls	r1, r3, #28
 801dbf4:	d5f9      	bpl.n	801dbea <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dbf6:	f023 0308 	bic.w	r3, r3, #8
 801dbfa:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801dbfc:	f7fe ffd8 	bl	801cbb0 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801dc00:	2c00      	cmp	r4, #0
 801dc02:	d1f3      	bne.n	801dbec <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc04:	4b3b      	ldr	r3, [pc, #236]	; (801dcf4 <tcp_alloc+0x16c>)
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	b193      	cbz	r3, 801dc30 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc0a:	4a33      	ldr	r2, [pc, #204]	; (801dcd8 <tcp_alloc+0x150>)
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	6a19      	ldr	r1, [r3, #32]
 801dc10:	6814      	ldr	r4, [r2, #0]
 801dc12:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc14:	68db      	ldr	r3, [r3, #12]
 801dc16:	b143      	cbz	r3, 801dc2a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc18:	6a1a      	ldr	r2, [r3, #32]
 801dc1a:	1aa2      	subs	r2, r4, r2
 801dc1c:	428a      	cmp	r2, r1
 801dc1e:	d3f9      	bcc.n	801dc14 <tcp_alloc+0x8c>
 801dc20:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc22:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc24:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d1f6      	bne.n	801dc18 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801dc2a:	2101      	movs	r1, #1
 801dc2c:	f7ff fe74 	bl	801d918 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc30:	f240 7239 	movw	r2, #1849	; 0x739
 801dc34:	4926      	ldr	r1, [pc, #152]	; (801dcd0 <tcp_alloc+0x148>)
 801dc36:	2002      	movs	r0, #2
 801dc38:	f7fd ff6c 	bl	801bb14 <memp_malloc_fn>
    if (pcb == NULL) {
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	2800      	cmp	r0, #0
 801dc40:	d1ac      	bne.n	801db9c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801dc42:	2009      	movs	r0, #9
 801dc44:	f7ff ff7c 	bl	801db40 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc48:	f240 723f 	movw	r2, #1855	; 0x73f
 801dc4c:	4920      	ldr	r1, [pc, #128]	; (801dcd0 <tcp_alloc+0x148>)
 801dc4e:	2002      	movs	r0, #2
 801dc50:	f7fd ff60 	bl	801bb14 <memp_malloc_fn>
      if (pcb == NULL) {
 801dc54:	4603      	mov	r3, r0
 801dc56:	2800      	cmp	r0, #0
 801dc58:	d1a0      	bne.n	801db9c <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801dc5a:	2008      	movs	r0, #8
 801dc5c:	f7ff ff70 	bl	801db40 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc60:	f240 7245 	movw	r2, #1861	; 0x745
 801dc64:	491a      	ldr	r1, [pc, #104]	; (801dcd0 <tcp_alloc+0x148>)
 801dc66:	2002      	movs	r0, #2
 801dc68:	f7fd ff54 	bl	801bb14 <memp_malloc_fn>
        if (pcb == NULL) {
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	2800      	cmp	r0, #0
 801dc70:	d194      	bne.n	801db9c <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dc72:	062a      	lsls	r2, r5, #24
 801dc74:	d42a      	bmi.n	801dccc <tcp_alloc+0x144>
  if (mprio == 0) {
 801dc76:	b1ed      	cbz	r5, 801dcb4 <tcp_alloc+0x12c>
 801dc78:	462a      	mov	r2, r5
  mprio--;
 801dc7a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc7c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801dc7e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc80:	b1c2      	cbz	r2, 801dcb4 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc82:	4815      	ldr	r0, [pc, #84]	; (801dcd8 <tcp_alloc+0x150>)
  inactivity = 0;
 801dc84:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc86:	6807      	ldr	r7, [r0, #0]
 801dc88:	e005      	b.n	801dc96 <tcp_alloc+0x10e>
 801dc8a:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801dc8c:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801dc8e:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801dc90:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc92:	68d2      	ldr	r2, [r2, #12]
 801dc94:	b14a      	cbz	r2, 801dcaa <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801dc96:	7d50      	ldrb	r0, [r2, #21]
 801dc98:	4288      	cmp	r0, r1
 801dc9a:	d3f6      	bcc.n	801dc8a <tcp_alloc+0x102>
 801dc9c:	d1f9      	bne.n	801dc92 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc9e:	6a14      	ldr	r4, [r2, #32]
 801dca0:	eba7 0e04 	sub.w	lr, r7, r4
 801dca4:	45b6      	cmp	lr, r6
 801dca6:	d3f4      	bcc.n	801dc92 <tcp_alloc+0x10a>
 801dca8:	e7f0      	b.n	801dc8c <tcp_alloc+0x104>
  if (inactive != NULL) {
 801dcaa:	b11b      	cbz	r3, 801dcb4 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801dcac:	2101      	movs	r1, #1
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f7ff fe32 	bl	801d918 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dcb4:	f240 724b 	movw	r2, #1867	; 0x74b
 801dcb8:	4905      	ldr	r1, [pc, #20]	; (801dcd0 <tcp_alloc+0x148>)
 801dcba:	2002      	movs	r0, #2
 801dcbc:	f7fd ff2a 	bl	801bb14 <memp_malloc_fn>
  if (pcb != NULL) {
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	2800      	cmp	r0, #0
 801dcc4:	f47f af6a 	bne.w	801db9c <tcp_alloc+0x14>
}
 801dcc8:	4618      	mov	r0, r3
 801dcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dccc:	227f      	movs	r2, #127	; 0x7f
 801dcce:	e7d4      	b.n	801dc7a <tcp_alloc+0xf2>
 801dcd0:	08045704 	.word	0x08045704
 801dcd4:	2002e4b1 	.word	0x2002e4b1
 801dcd8:	2002e4ac 	.word	0x2002e4ac
 801dcdc:	006ddd00 	.word	0x006ddd00
 801dce0:	0801dee5 	.word	0x0801dee5
 801dce4:	0218ffff 	.word	0x0218ffff
 801dce8:	04300001 	.word	0x04300001
 801dcec:	08600860 	.word	0x08600860
 801dcf0:	2002e49c 	.word	0x2002e49c
 801dcf4:	2002e4b4 	.word	0x2002e4b4

0801dcf8 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801dcf8:	2040      	movs	r0, #64	; 0x40
 801dcfa:	f7ff bf45 	b.w	801db88 <tcp_alloc>
 801dcfe:	bf00      	nop

0801dd00 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801dd00:	2040      	movs	r0, #64	; 0x40
 801dd02:	f7ff bf41 	b.w	801db88 <tcp_alloc>
 801dd06:	bf00      	nop

0801dd08 <tcp_close_shutdown>:
{
 801dd08:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dd0a:	4604      	mov	r4, r0
{
 801dd0c:	b085      	sub	sp, #20
 801dd0e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dd10:	2800      	cmp	r0, #0
 801dd12:	d06a      	beq.n	801ddea <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801dd14:	7d23      	ldrb	r3, [r4, #20]
 801dd16:	b11d      	cbz	r5, 801dd20 <tcp_close_shutdown+0x18>
 801dd18:	2b04      	cmp	r3, #4
 801dd1a:	d00c      	beq.n	801dd36 <tcp_close_shutdown+0x2e>
 801dd1c:	2b07      	cmp	r3, #7
 801dd1e:	d00a      	beq.n	801dd36 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801dd20:	2b01      	cmp	r3, #1
 801dd22:	d06a      	beq.n	801ddfa <tcp_close_shutdown+0xf2>
 801dd24:	2b02      	cmp	r3, #2
 801dd26:	d030      	beq.n	801dd8a <tcp_close_shutdown+0x82>
 801dd28:	b333      	cbz	r3, 801dd78 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801dd2a:	4620      	mov	r0, r4
}
 801dd2c:	b005      	add	sp, #20
 801dd2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801dd32:	f7fe bf3d 	b.w	801cbb0 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801dd36:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dd38:	2a00      	cmp	r2, #0
 801dd3a:	d037      	beq.n	801ddac <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801dd3c:	8b63      	ldrh	r3, [r4, #26]
 801dd3e:	06db      	lsls	r3, r3, #27
 801dd40:	f140 8084 	bpl.w	801de4c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dd44:	8b21      	ldrh	r1, [r4, #24]
 801dd46:	1d20      	adds	r0, r4, #4
 801dd48:	8ae2      	ldrh	r2, [r4, #22]
 801dd4a:	4623      	mov	r3, r4
 801dd4c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801dd50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801dd52:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801dd54:	9000      	str	r0, [sp, #0]
 801dd56:	4620      	mov	r0, r4
 801dd58:	f002 fd62 	bl	8020820 <tcp_rst>
      tcp_pcb_purge(pcb);
 801dd5c:	4620      	mov	r0, r4
 801dd5e:	f7ff fa6b 	bl	801d238 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801dd62:	4a45      	ldr	r2, [pc, #276]	; (801de78 <tcp_close_shutdown+0x170>)
 801dd64:	6813      	ldr	r3, [r2, #0]
 801dd66:	42a3      	cmp	r3, r4
 801dd68:	d030      	beq.n	801ddcc <tcp_close_shutdown+0xc4>
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d030      	beq.n	801ddd0 <tcp_close_shutdown+0xc8>
 801dd6e:	68da      	ldr	r2, [r3, #12]
 801dd70:	42a2      	cmp	r2, r4
 801dd72:	d068      	beq.n	801de46 <tcp_close_shutdown+0x13e>
 801dd74:	4613      	mov	r3, r2
 801dd76:	e7f8      	b.n	801dd6a <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801dd78:	8ae3      	ldrh	r3, [r4, #22]
 801dd7a:	b9e3      	cbnz	r3, 801ddb6 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801dd7c:	4621      	mov	r1, r4
 801dd7e:	2002      	movs	r0, #2
 801dd80:	f7fd fefe 	bl	801bb80 <memp_free>
}
 801dd84:	2000      	movs	r0, #0
 801dd86:	b005      	add	sp, #20
 801dd88:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd8a:	4621      	mov	r1, r4
 801dd8c:	483a      	ldr	r0, [pc, #232]	; (801de78 <tcp_close_shutdown+0x170>)
 801dd8e:	f7ff fd53 	bl	801d838 <tcp_pcb_remove>
 801dd92:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd94:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd96:	4a39      	ldr	r2, [pc, #228]	; (801de7c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd98:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd9a:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd9c:	d1ee      	bne.n	801dd7c <tcp_close_shutdown+0x74>
 801dd9e:	4b38      	ldr	r3, [pc, #224]	; (801de80 <tcp_close_shutdown+0x178>)
 801dda0:	22d4      	movs	r2, #212	; 0xd4
 801dda2:	4938      	ldr	r1, [pc, #224]	; (801de84 <tcp_close_shutdown+0x17c>)
 801dda4:	4838      	ldr	r0, [pc, #224]	; (801de88 <tcp_close_shutdown+0x180>)
 801dda6:	f008 fccd 	bl	8026744 <iprintf>
 801ddaa:	e7e7      	b.n	801dd7c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ddac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ddae:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801ddb2:	d0b5      	beq.n	801dd20 <tcp_close_shutdown+0x18>
 801ddb4:	e7c2      	b.n	801dd3c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ddb6:	4a35      	ldr	r2, [pc, #212]	; (801de8c <tcp_close_shutdown+0x184>)
 801ddb8:	6813      	ldr	r3, [r2, #0]
 801ddba:	42a3      	cmp	r3, r4
 801ddbc:	d051      	beq.n	801de62 <tcp_close_shutdown+0x15a>
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d03e      	beq.n	801de40 <tcp_close_shutdown+0x138>
 801ddc2:	68da      	ldr	r2, [r3, #12]
 801ddc4:	42a2      	cmp	r2, r4
 801ddc6:	d039      	beq.n	801de3c <tcp_close_shutdown+0x134>
 801ddc8:	4613      	mov	r3, r2
 801ddca:	e7f8      	b.n	801ddbe <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801ddcc:	68e3      	ldr	r3, [r4, #12]
 801ddce:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ddd0:	4b2f      	ldr	r3, [pc, #188]	; (801de90 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801ddd2:	2000      	movs	r0, #0
 801ddd4:	4a29      	ldr	r2, [pc, #164]	; (801de7c <tcp_close_shutdown+0x174>)
 801ddd6:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801ddd8:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801ddda:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801dddc:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801ddde:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801dde0:	d03c      	beq.n	801de5c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dde2:	7d23      	ldrb	r3, [r4, #20]
 801dde4:	2b01      	cmp	r3, #1
 801dde6:	d1c9      	bne.n	801dd7c <tcp_close_shutdown+0x74>
 801dde8:	e7d9      	b.n	801dd9e <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ddea:	4b25      	ldr	r3, [pc, #148]	; (801de80 <tcp_close_shutdown+0x178>)
 801ddec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801ddf0:	4928      	ldr	r1, [pc, #160]	; (801de94 <tcp_close_shutdown+0x18c>)
 801ddf2:	4825      	ldr	r0, [pc, #148]	; (801de88 <tcp_close_shutdown+0x180>)
 801ddf4:	f008 fca6 	bl	8026744 <iprintf>
 801ddf8:	e78c      	b.n	801dd14 <tcp_close_shutdown+0xc>
 801ddfa:	4927      	ldr	r1, [pc, #156]	; (801de98 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801ddfc:	2000      	movs	r0, #0
  switch (pcb->state) {
 801ddfe:	4b23      	ldr	r3, [pc, #140]	; (801de8c <tcp_close_shutdown+0x184>)
 801de00:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801de04:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801de06:	b133      	cbz	r3, 801de16 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801de08:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801de0a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801de0c:	bf08      	it	eq
 801de0e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801de10:	68db      	ldr	r3, [r3, #12]
 801de12:	2b00      	cmp	r3, #0
 801de14:	d1f8      	bne.n	801de08 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801de16:	42a9      	cmp	r1, r5
 801de18:	d002      	beq.n	801de20 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801de1a:	f851 3b04 	ldr.w	r3, [r1], #4
 801de1e:	e7f1      	b.n	801de04 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801de20:	4621      	mov	r1, r4
 801de22:	481e      	ldr	r0, [pc, #120]	; (801de9c <tcp_close_shutdown+0x194>)
 801de24:	f7ff fd08 	bl	801d838 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801de28:	7d23      	ldrb	r3, [r4, #20]
 801de2a:	2b01      	cmp	r3, #1
 801de2c:	d01c      	beq.n	801de68 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801de2e:	4621      	mov	r1, r4
 801de30:	2003      	movs	r0, #3
 801de32:	f7fd fea5 	bl	801bb80 <memp_free>
}
 801de36:	2000      	movs	r0, #0
 801de38:	b005      	add	sp, #20
 801de3a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801de3c:	68e2      	ldr	r2, [r4, #12]
 801de3e:	60da      	str	r2, [r3, #12]
 801de40:	2300      	movs	r3, #0
 801de42:	60e3      	str	r3, [r4, #12]
 801de44:	e79a      	b.n	801dd7c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801de46:	68e2      	ldr	r2, [r4, #12]
 801de48:	60da      	str	r2, [r3, #12]
 801de4a:	e7c1      	b.n	801ddd0 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801de4c:	4b0c      	ldr	r3, [pc, #48]	; (801de80 <tcp_close_shutdown+0x178>)
 801de4e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801de52:	4913      	ldr	r1, [pc, #76]	; (801dea0 <tcp_close_shutdown+0x198>)
 801de54:	480c      	ldr	r0, [pc, #48]	; (801de88 <tcp_close_shutdown+0x180>)
 801de56:	f008 fc75 	bl	8026744 <iprintf>
 801de5a:	e773      	b.n	801dd44 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801de5c:	f001 fd9e 	bl	801f99c <tcp_trigger_input_pcb_close>
 801de60:	e790      	b.n	801dd84 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801de62:	68e3      	ldr	r3, [r4, #12]
 801de64:	6013      	str	r3, [r2, #0]
 801de66:	e7eb      	b.n	801de40 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801de68:	4b05      	ldr	r3, [pc, #20]	; (801de80 <tcp_close_shutdown+0x178>)
 801de6a:	22df      	movs	r2, #223	; 0xdf
 801de6c:	490d      	ldr	r1, [pc, #52]	; (801dea4 <tcp_close_shutdown+0x19c>)
 801de6e:	4806      	ldr	r0, [pc, #24]	; (801de88 <tcp_close_shutdown+0x180>)
 801de70:	f008 fc68 	bl	8026744 <iprintf>
 801de74:	e7db      	b.n	801de2e <tcp_close_shutdown+0x126>
 801de76:	bf00      	nop
 801de78:	2002e49c 	.word	0x2002e49c
 801de7c:	2002e4a0 	.word	0x2002e4a0
 801de80:	08045704 	.word	0x08045704
 801de84:	08045740 	.word	0x08045740
 801de88:	0802b43c 	.word	0x0802b43c
 801de8c:	2002e4a4 	.word	0x2002e4a4
 801de90:	2002e4e0 	.word	0x2002e4e0
 801de94:	08045ce0 	.word	0x08045ce0
 801de98:	08045df0 	.word	0x08045df0
 801de9c:	2002e4a8 	.word	0x2002e4a8
 801dea0:	08045d00 	.word	0x08045d00
 801dea4:	08045d1c 	.word	0x08045d1c

0801dea8 <tcp_close>:
{
 801dea8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801deaa:	b158      	cbz	r0, 801dec4 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801deac:	7d03      	ldrb	r3, [r0, #20]
 801deae:	2b01      	cmp	r3, #1
 801deb0:	d003      	beq.n	801deba <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801deb2:	8b43      	ldrh	r3, [r0, #26]
 801deb4:	f043 0310 	orr.w	r3, r3, #16
 801deb8:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801deba:	2101      	movs	r1, #1
}
 801debc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801dec0:	f7ff bf22 	b.w	801dd08 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801dec4:	4b04      	ldr	r3, [pc, #16]	; (801ded8 <tcp_close+0x30>)
 801dec6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801deca:	4904      	ldr	r1, [pc, #16]	; (801dedc <tcp_close+0x34>)
 801decc:	4804      	ldr	r0, [pc, #16]	; (801dee0 <tcp_close+0x38>)
 801dece:	f008 fc39 	bl	8026744 <iprintf>
}
 801ded2:	f06f 000f 	mvn.w	r0, #15
 801ded6:	bd08      	pop	{r3, pc}
 801ded8:	08045704 	.word	0x08045704
 801dedc:	08045d38 	.word	0x08045d38
 801dee0:	0802b43c 	.word	0x0802b43c

0801dee4 <tcp_recv_null>:
{
 801dee4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801dee6:	b1c9      	cbz	r1, 801df1c <tcp_recv_null+0x38>
  if (p != NULL) {
 801dee8:	4614      	mov	r4, r2
 801deea:	4608      	mov	r0, r1
 801deec:	b13a      	cbz	r2, 801defe <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801deee:	8911      	ldrh	r1, [r2, #8]
 801def0:	f7fe ffde 	bl	801ceb0 <tcp_recved>
    pbuf_free(p);
 801def4:	4620      	mov	r0, r4
 801def6:	f7fe fb5b 	bl	801c5b0 <pbuf_free>
  return ERR_OK;
 801defa:	2000      	movs	r0, #0
}
 801defc:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801defe:	b10b      	cbz	r3, 801df04 <tcp_recv_null+0x20>
  return ERR_OK;
 801df00:	4610      	mov	r0, r2
}
 801df02:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801df04:	7d0b      	ldrb	r3, [r1, #20]
 801df06:	2b01      	cmp	r3, #1
 801df08:	d003      	beq.n	801df12 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801df0a:	8b4b      	ldrh	r3, [r1, #26]
 801df0c:	f043 0310 	orr.w	r3, r3, #16
 801df10:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801df12:	2101      	movs	r1, #1
}
 801df14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801df18:	f7ff bef6 	b.w	801dd08 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801df1c:	4b04      	ldr	r3, [pc, #16]	; (801df30 <tcp_recv_null+0x4c>)
 801df1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801df22:	4904      	ldr	r1, [pc, #16]	; (801df34 <tcp_recv_null+0x50>)
 801df24:	4804      	ldr	r0, [pc, #16]	; (801df38 <tcp_recv_null+0x54>)
 801df26:	f008 fc0d 	bl	8026744 <iprintf>
 801df2a:	f06f 000f 	mvn.w	r0, #15
}
 801df2e:	bd10      	pop	{r4, pc}
 801df30:	08045704 	.word	0x08045704
 801df34:	08045d50 	.word	0x08045d50
 801df38:	0802b43c 	.word	0x0802b43c

0801df3c <tcp_process_refused_data>:
{
 801df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801df3e:	b378      	cbz	r0, 801dfa0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801df40:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801df42:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801df44:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801df48:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801df4a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801df4c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801df4e:	b156      	cbz	r6, 801df66 <tcp_process_refused_data+0x2a>
 801df50:	4601      	mov	r1, r0
 801df52:	462a      	mov	r2, r5
 801df54:	6900      	ldr	r0, [r0, #16]
 801df56:	47b0      	blx	r6
    if (err == ERR_OK) {
 801df58:	b158      	cbz	r0, 801df72 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801df5a:	300d      	adds	r0, #13
 801df5c:	d01d      	beq.n	801df9a <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801df5e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801df62:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801df64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801df66:	8929      	ldrh	r1, [r5, #8]
 801df68:	f7fe ffa2 	bl	801ceb0 <tcp_recved>
    pbuf_free(p);
 801df6c:	4628      	mov	r0, r5
 801df6e:	f7fe fb1f 	bl	801c5b0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801df72:	06bb      	lsls	r3, r7, #26
 801df74:	d50f      	bpl.n	801df96 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801df76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801df78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801df7c:	d001      	beq.n	801df82 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801df7e:	3301      	adds	r3, #1
 801df80:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801df82:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801df86:	b135      	cbz	r5, 801df96 <tcp_process_refused_data+0x5a>
 801df88:	2300      	movs	r3, #0
 801df8a:	4621      	mov	r1, r4
 801df8c:	6920      	ldr	r0, [r4, #16]
 801df8e:	461a      	mov	r2, r3
 801df90:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801df92:	300d      	adds	r0, #13
 801df94:	d001      	beq.n	801df9a <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801df96:	2000      	movs	r0, #0
}
 801df98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801df9a:	f06f 000c 	mvn.w	r0, #12
}
 801df9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801dfa0:	4b04      	ldr	r3, [pc, #16]	; (801dfb4 <tcp_process_refused_data+0x78>)
 801dfa2:	f240 6209 	movw	r2, #1545	; 0x609
 801dfa6:	4904      	ldr	r1, [pc, #16]	; (801dfb8 <tcp_process_refused_data+0x7c>)
 801dfa8:	4804      	ldr	r0, [pc, #16]	; (801dfbc <tcp_process_refused_data+0x80>)
 801dfaa:	f008 fbcb 	bl	8026744 <iprintf>
 801dfae:	f06f 000f 	mvn.w	r0, #15
}
 801dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfb4:	08045704 	.word	0x08045704
 801dfb8:	08045d6c 	.word	0x08045d6c
 801dfbc:	0802b43c 	.word	0x0802b43c

0801dfc0 <tcp_fasttmr>:
{
 801dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801dfc4:	4d1c      	ldr	r5, [pc, #112]	; (801e038 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801dfc6:	2700      	movs	r7, #0
 801dfc8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801e040 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801dfcc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801dfce:	4e1b      	ldr	r6, [pc, #108]	; (801e03c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801dfd0:	3301      	adds	r3, #1
 801dfd2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801dfd4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801dfd8:	b1bc      	cbz	r4, 801e00a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801dfda:	782a      	ldrb	r2, [r5, #0]
 801dfdc:	7fa3      	ldrb	r3, [r4, #30]
 801dfde:	4293      	cmp	r3, r2
 801dfe0:	d015      	beq.n	801e00e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801dfe2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801dfe4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801dfe6:	07d9      	lsls	r1, r3, #31
 801dfe8:	d41a      	bmi.n	801e020 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801dfea:	071a      	lsls	r2, r3, #28
 801dfec:	d411      	bmi.n	801e012 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801dfee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801dff0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801dff4:	b133      	cbz	r3, 801e004 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801dff6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801dff8:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801dffa:	f7ff ff9f 	bl	801df3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801dffe:	7833      	ldrb	r3, [r6, #0]
 801e000:	2b00      	cmp	r3, #0
 801e002:	d1e7      	bne.n	801dfd4 <tcp_fasttmr+0x14>
      pcb = next;
 801e004:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801e006:	2c00      	cmp	r4, #0
 801e008:	d1e7      	bne.n	801dfda <tcp_fasttmr+0x1a>
}
 801e00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801e00e:	68e4      	ldr	r4, [r4, #12]
 801e010:	e7e2      	b.n	801dfd8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e012:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801e016:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e018:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801e01a:	f7fe fdc9 	bl	801cbb0 <tcp_close_shutdown_fin>
 801e01e:	e7e6      	b.n	801dfee <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801e020:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801e024:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801e026:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801e028:	f002 fc74 	bl	8020914 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e02c:	8b63      	ldrh	r3, [r4, #26]
 801e02e:	f023 0303 	bic.w	r3, r3, #3
 801e032:	b29b      	uxth	r3, r3
 801e034:	8363      	strh	r3, [r4, #26]
 801e036:	e7d8      	b.n	801dfea <tcp_fasttmr+0x2a>
 801e038:	2002e4b1 	.word	0x2002e4b1
 801e03c:	2002e4a0 	.word	0x2002e4a0
 801e040:	2002e49c 	.word	0x2002e49c

0801e044 <tcp_tmr>:
{
 801e044:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801e046:	f7ff ffbb 	bl	801dfc0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801e04a:	4a06      	ldr	r2, [pc, #24]	; (801e064 <tcp_tmr+0x20>)
 801e04c:	7813      	ldrb	r3, [r2, #0]
 801e04e:	3301      	adds	r3, #1
 801e050:	b2db      	uxtb	r3, r3
 801e052:	7013      	strb	r3, [r2, #0]
 801e054:	07db      	lsls	r3, r3, #31
 801e056:	d400      	bmi.n	801e05a <tcp_tmr+0x16>
}
 801e058:	bd08      	pop	{r3, pc}
 801e05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801e05e:	f7ff b93d 	b.w	801d2dc <tcp_slowtmr>
 801e062:	bf00      	nop
 801e064:	2002e4b0 	.word	0x2002e4b0

0801e068 <tcp_next_iss>:
{
 801e068:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e06a:	b130      	cbz	r0, 801e07a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801e06c:	4b07      	ldr	r3, [pc, #28]	; (801e08c <tcp_next_iss+0x24>)
 801e06e:	4a08      	ldr	r2, [pc, #32]	; (801e090 <tcp_next_iss+0x28>)
 801e070:	6818      	ldr	r0, [r3, #0]
 801e072:	6812      	ldr	r2, [r2, #0]
 801e074:	4410      	add	r0, r2
 801e076:	6018      	str	r0, [r3, #0]
}
 801e078:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e07a:	4b06      	ldr	r3, [pc, #24]	; (801e094 <tcp_next_iss+0x2c>)
 801e07c:	f640 02af 	movw	r2, #2223	; 0x8af
 801e080:	4905      	ldr	r1, [pc, #20]	; (801e098 <tcp_next_iss+0x30>)
 801e082:	4806      	ldr	r0, [pc, #24]	; (801e09c <tcp_next_iss+0x34>)
 801e084:	f008 fb5e 	bl	8026744 <iprintf>
 801e088:	e7f0      	b.n	801e06c <tcp_next_iss+0x4>
 801e08a:	bf00      	nop
 801e08c:	20000448 	.word	0x20000448
 801e090:	2002e4ac 	.word	0x2002e4ac
 801e094:	08045704 	.word	0x08045704
 801e098:	08045d94 	.word	0x08045d94
 801e09c:	0802b43c 	.word	0x0802b43c

0801e0a0 <tcp_eff_send_mss_netif>:
{
 801e0a0:	b538      	push	{r3, r4, r5, lr}
 801e0a2:	4605      	mov	r5, r0
 801e0a4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e0a6:	b172      	cbz	r2, 801e0c6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801e0a8:	b144      	cbz	r4, 801e0bc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801e0aa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801e0ac:	b133      	cbz	r3, 801e0bc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801e0ae:	2b28      	cmp	r3, #40	; 0x28
 801e0b0:	d906      	bls.n	801e0c0 <tcp_eff_send_mss_netif+0x20>
 801e0b2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e0b4:	b29b      	uxth	r3, r3
 801e0b6:	429d      	cmp	r5, r3
 801e0b8:	bf28      	it	cs
 801e0ba:	461d      	movcs	r5, r3
}
 801e0bc:	4628      	mov	r0, r5
 801e0be:	bd38      	pop	{r3, r4, r5, pc}
 801e0c0:	2500      	movs	r5, #0
 801e0c2:	4628      	mov	r0, r5
 801e0c4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e0c6:	4b04      	ldr	r3, [pc, #16]	; (801e0d8 <tcp_eff_send_mss_netif+0x38>)
 801e0c8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801e0cc:	4903      	ldr	r1, [pc, #12]	; (801e0dc <tcp_eff_send_mss_netif+0x3c>)
 801e0ce:	4804      	ldr	r0, [pc, #16]	; (801e0e0 <tcp_eff_send_mss_netif+0x40>)
 801e0d0:	f008 fb38 	bl	8026744 <iprintf>
 801e0d4:	e7e8      	b.n	801e0a8 <tcp_eff_send_mss_netif+0x8>
 801e0d6:	bf00      	nop
 801e0d8:	08045704 	.word	0x08045704
 801e0dc:	08045db0 	.word	0x08045db0
 801e0e0:	0802b43c 	.word	0x0802b43c

0801e0e4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801e0e4:	b308      	cbz	r0, 801e12a <tcp_netif_ip_addr_changed+0x46>
{
 801e0e6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801e0e8:	6803      	ldr	r3, [r0, #0]
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	b903      	cbnz	r3, 801e0f0 <tcp_netif_ip_addr_changed+0xc>
}
 801e0ee:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e0f0:	4b0e      	ldr	r3, [pc, #56]	; (801e12c <tcp_netif_ip_addr_changed+0x48>)
 801e0f2:	460d      	mov	r5, r1
 801e0f4:	6819      	ldr	r1, [r3, #0]
 801e0f6:	f7ff fd01 	bl	801dafc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e0fa:	4b0d      	ldr	r3, [pc, #52]	; (801e130 <tcp_netif_ip_addr_changed+0x4c>)
 801e0fc:	4620      	mov	r0, r4
 801e0fe:	6819      	ldr	r1, [r3, #0]
 801e100:	f7ff fcfc 	bl	801dafc <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801e104:	2d00      	cmp	r5, #0
 801e106:	d0f2      	beq.n	801e0ee <tcp_netif_ip_addr_changed+0xa>
 801e108:	682b      	ldr	r3, [r5, #0]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d0ef      	beq.n	801e0ee <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e10e:	4b09      	ldr	r3, [pc, #36]	; (801e134 <tcp_netif_ip_addr_changed+0x50>)
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d0eb      	beq.n	801e0ee <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e116:	6819      	ldr	r1, [r3, #0]
 801e118:	6822      	ldr	r2, [r4, #0]
 801e11a:	4291      	cmp	r1, r2
 801e11c:	d101      	bne.n	801e122 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e11e:	682a      	ldr	r2, [r5, #0]
 801e120:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e122:	68db      	ldr	r3, [r3, #12]
 801e124:	2b00      	cmp	r3, #0
 801e126:	d1f6      	bne.n	801e116 <tcp_netif_ip_addr_changed+0x32>
}
 801e128:	bd38      	pop	{r3, r4, r5, pc}
 801e12a:	4770      	bx	lr
 801e12c:	2002e49c 	.word	0x2002e49c
 801e130:	2002e4a4 	.word	0x2002e4a4
 801e134:	2002e4a8 	.word	0x2002e4a8

0801e138 <tcp_free_ooseq>:
{
 801e138:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801e13a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801e13c:	b16c      	cbz	r4, 801e15a <tcp_free_ooseq+0x22>
 801e13e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801e140:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801e142:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801e144:	6868      	ldr	r0, [r5, #4]
 801e146:	b108      	cbz	r0, 801e14c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801e148:	f7fe fa32 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801e14c:	4629      	mov	r1, r5
 801e14e:	2004      	movs	r0, #4
 801e150:	f7fd fd16 	bl	801bb80 <memp_free>
  while (seg != NULL) {
 801e154:	2c00      	cmp	r4, #0
 801e156:	d1f3      	bne.n	801e140 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801e158:	6774      	str	r4, [r6, #116]	; 0x74
}
 801e15a:	bd70      	pop	{r4, r5, r6, pc}

0801e15c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e15e:	4605      	mov	r5, r0
{
 801e160:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e162:	2800      	cmp	r0, #0
 801e164:	d03e      	beq.n	801e1e4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e166:	68eb      	ldr	r3, [r5, #12]
 801e168:	8998      	ldrh	r0, [r3, #12]
 801e16a:	f7fc f9e5 	bl	801a538 <lwip_htons>
 801e16e:	07c2      	lsls	r2, r0, #31
 801e170:	d432      	bmi.n	801e1d8 <tcp_oos_insert_segment+0x7c>
 801e172:	4e20      	ldr	r6, [pc, #128]	; (801e1f4 <tcp_oos_insert_segment+0x98>)
 801e174:	e005      	b.n	801e182 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801e176:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801e178:	4620      	mov	r0, r4
 801e17a:	f7fe ff95 	bl	801d0a8 <tcp_seg_free>
    while (next &&
 801e17e:	463c      	mov	r4, r7
 801e180:	b1ef      	cbz	r7, 801e1be <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e182:	68e1      	ldr	r1, [r4, #12]
 801e184:	8923      	ldrh	r3, [r4, #8]
 801e186:	6837      	ldr	r7, [r6, #0]
 801e188:	892a      	ldrh	r2, [r5, #8]
 801e18a:	6848      	ldr	r0, [r1, #4]
 801e18c:	443a      	add	r2, r7
 801e18e:	4403      	add	r3, r0
 801e190:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e192:	2b00      	cmp	r3, #0
 801e194:	db15      	blt.n	801e1c2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e196:	8988      	ldrh	r0, [r1, #12]
 801e198:	f7fc f9ce 	bl	801a538 <lwip_htons>
 801e19c:	07c3      	lsls	r3, r0, #31
 801e19e:	d5ea      	bpl.n	801e176 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e1a0:	68eb      	ldr	r3, [r5, #12]
 801e1a2:	2001      	movs	r0, #1
 801e1a4:	899f      	ldrh	r7, [r3, #12]
 801e1a6:	f7fc f9c7 	bl	801a538 <lwip_htons>
 801e1aa:	68eb      	ldr	r3, [r5, #12]
 801e1ac:	4338      	orrs	r0, r7
      next = next->next;
 801e1ae:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e1b0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801e1b2:	4620      	mov	r0, r4
 801e1b4:	f7fe ff78 	bl	801d0a8 <tcp_seg_free>
    while (next &&
 801e1b8:	463c      	mov	r4, r7
 801e1ba:	2f00      	cmp	r7, #0
 801e1bc:	d1e1      	bne.n	801e182 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801e1be:	602c      	str	r4, [r5, #0]
}
 801e1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e1c2:	1a12      	subs	r2, r2, r0
    if (next &&
 801e1c4:	2a00      	cmp	r2, #0
 801e1c6:	ddfa      	ble.n	801e1be <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e1c8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801e1ca:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e1cc:	b289      	uxth	r1, r1
 801e1ce:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e1d0:	f7fe f8d6 	bl	801c380 <pbuf_realloc>
  cseg->next = next;
 801e1d4:	602c      	str	r4, [r5, #0]
}
 801e1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801e1d8:	4620      	mov	r0, r4
    next = NULL;
 801e1da:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801e1dc:	f7fe ff52 	bl	801d084 <tcp_segs_free>
  cseg->next = next;
 801e1e0:	602c      	str	r4, [r5, #0]
}
 801e1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e1e4:	4b04      	ldr	r3, [pc, #16]	; (801e1f8 <tcp_oos_insert_segment+0x9c>)
 801e1e6:	f240 421f 	movw	r2, #1055	; 0x41f
 801e1ea:	4904      	ldr	r1, [pc, #16]	; (801e1fc <tcp_oos_insert_segment+0xa0>)
 801e1ec:	4804      	ldr	r0, [pc, #16]	; (801e200 <tcp_oos_insert_segment+0xa4>)
 801e1ee:	f008 faa9 	bl	8026744 <iprintf>
 801e1f2:	e7b8      	b.n	801e166 <tcp_oos_insert_segment+0xa>
 801e1f4:	2002e4dc 	.word	0x2002e4dc
 801e1f8:	08045e00 	.word	0x08045e00
 801e1fc:	08045e34 	.word	0x08045e34
 801e200:	0802b43c 	.word	0x0802b43c

0801e204 <tcp_input_delayed_close>:
{
 801e204:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e206:	4604      	mov	r4, r0
 801e208:	b1c8      	cbz	r0, 801e23e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801e20a:	4b11      	ldr	r3, [pc, #68]	; (801e250 <tcp_input_delayed_close+0x4c>)
 801e20c:	781b      	ldrb	r3, [r3, #0]
 801e20e:	f013 0310 	ands.w	r3, r3, #16
 801e212:	d101      	bne.n	801e218 <tcp_input_delayed_close+0x14>
  return 0;
 801e214:	4618      	mov	r0, r3
}
 801e216:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801e218:	8b63      	ldrh	r3, [r4, #26]
 801e21a:	06db      	lsls	r3, r3, #27
 801e21c:	d406      	bmi.n	801e22c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801e21e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801e222:	b11b      	cbz	r3, 801e22c <tcp_input_delayed_close+0x28>
 801e224:	f06f 010e 	mvn.w	r1, #14
 801e228:	6920      	ldr	r0, [r4, #16]
 801e22a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801e22c:	4621      	mov	r1, r4
 801e22e:	4809      	ldr	r0, [pc, #36]	; (801e254 <tcp_input_delayed_close+0x50>)
 801e230:	f7ff fb02 	bl	801d838 <tcp_pcb_remove>
    tcp_free(pcb);
 801e234:	4620      	mov	r0, r4
 801e236:	f7fe fcfb 	bl	801cc30 <tcp_free>
 801e23a:	2001      	movs	r0, #1
}
 801e23c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e23e:	4b06      	ldr	r3, [pc, #24]	; (801e258 <tcp_input_delayed_close+0x54>)
 801e240:	f240 225a 	movw	r2, #602	; 0x25a
 801e244:	4905      	ldr	r1, [pc, #20]	; (801e25c <tcp_input_delayed_close+0x58>)
 801e246:	4806      	ldr	r0, [pc, #24]	; (801e260 <tcp_input_delayed_close+0x5c>)
 801e248:	f008 fa7c 	bl	8026744 <iprintf>
 801e24c:	e7dd      	b.n	801e20a <tcp_input_delayed_close+0x6>
 801e24e:	bf00      	nop
 801e250:	2002e4d8 	.word	0x2002e4d8
 801e254:	2002e49c 	.word	0x2002e49c
 801e258:	08045e00 	.word	0x08045e00
 801e25c:	08045e5c 	.word	0x08045e5c
 801e260:	0802b43c 	.word	0x0802b43c

0801e264 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e268:	b083      	sub	sp, #12
 801e26a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801e26c:	2900      	cmp	r1, #0
 801e26e:	d03d      	beq.n	801e2ec <tcp_free_acked_segments.constprop.0+0x88>
 801e270:	4607      	mov	r7, r0
 801e272:	460c      	mov	r4, r1
 801e274:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801e33c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e278:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801e330 <tcp_free_acked_segments.constprop.0+0xcc>
 801e27c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801e340 <tcp_free_acked_segments.constprop.0+0xdc>
 801e280:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801e338 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801e284:	68e3      	ldr	r3, [r4, #12]
 801e286:	6858      	ldr	r0, [r3, #4]
 801e288:	f7fc f95a 	bl	801a540 <lwip_htonl>
 801e28c:	68e3      	ldr	r3, [r4, #12]
 801e28e:	4605      	mov	r5, r0
 801e290:	8926      	ldrh	r6, [r4, #8]
 801e292:	8998      	ldrh	r0, [r3, #12]
 801e294:	f7fc f950 	bl	801a538 <lwip_htons>
 801e298:	f8d8 3000 	ldr.w	r3, [r8]
 801e29c:	f010 0003 	ands.w	r0, r0, #3
 801e2a0:	eba5 0503 	sub.w	r5, r5, r3
 801e2a4:	bf18      	it	ne
 801e2a6:	2001      	movne	r0, #1
 801e2a8:	4435      	add	r5, r6
 801e2aa:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	dc37      	bgt.n	801e320 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801e2b0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801e2b4:	f7fe f990 	bl	801c5d8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e2b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801e2bc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e2be:	4298      	cmp	r0, r3
 801e2c0:	d824      	bhi.n	801e30c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2c2:	491a      	ldr	r1, [pc, #104]	; (801e32c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e2c4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2c6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801e2c8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2ca:	880d      	ldrh	r5, [r1, #0]
 801e2cc:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e2ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2d2:	1953      	adds	r3, r2, r5
 801e2d4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801e2d6:	f7fe fee7 	bl	801d0a8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801e2da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e2de:	b11b      	cbz	r3, 801e2e8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e2e0:	9b01      	ldr	r3, [sp, #4]
 801e2e2:	ea56 0503 	orrs.w	r5, r6, r3
 801e2e6:	d006      	beq.n	801e2f6 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801e2e8:	2e00      	cmp	r6, #0
 801e2ea:	d1cb      	bne.n	801e284 <tcp_free_acked_segments.constprop.0+0x20>
 801e2ec:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801e2ee:	4628      	mov	r0, r5
 801e2f0:	b003      	add	sp, #12
 801e2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e2f6:	4b0e      	ldr	r3, [pc, #56]	; (801e330 <tcp_free_acked_segments.constprop.0+0xcc>)
 801e2f8:	f240 4261 	movw	r2, #1121	; 0x461
 801e2fc:	490d      	ldr	r1, [pc, #52]	; (801e334 <tcp_free_acked_segments.constprop.0+0xd0>)
 801e2fe:	480e      	ldr	r0, [pc, #56]	; (801e338 <tcp_free_acked_segments.constprop.0+0xd4>)
 801e300:	f008 fa20 	bl	8026744 <iprintf>
}
 801e304:	4628      	mov	r0, r5
 801e306:	b003      	add	sp, #12
 801e308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e30c:	465b      	mov	r3, fp
 801e30e:	f240 4257 	movw	r2, #1111	; 0x457
 801e312:	4651      	mov	r1, sl
 801e314:	4648      	mov	r0, r9
 801e316:	f008 fa15 	bl	8026744 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e31a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e31e:	e7d0      	b.n	801e2c2 <tcp_free_acked_segments.constprop.0+0x5e>
 801e320:	4625      	mov	r5, r4
}
 801e322:	4628      	mov	r0, r5
 801e324:	b003      	add	sp, #12
 801e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e32a:	bf00      	nop
 801e32c:	2002e4d0 	.word	0x2002e4d0
 801e330:	08045e00 	.word	0x08045e00
 801e334:	08045eac 	.word	0x08045eac
 801e338:	0802b43c 	.word	0x0802b43c
 801e33c:	2002e4b8 	.word	0x2002e4b8
 801e340:	08045e84 	.word	0x08045e84

0801e344 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801e344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e348:	4604      	mov	r4, r0
 801e34a:	2800      	cmp	r0, #0
 801e34c:	f000 8200 	beq.w	801e750 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e350:	7d23      	ldrb	r3, [r4, #20]
 801e352:	2b03      	cmp	r3, #3
 801e354:	f240 811e 	bls.w	801e594 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801e358:	4bb4      	ldr	r3, [pc, #720]	; (801e62c <tcp_receive+0x2e8>)
 801e35a:	781b      	ldrb	r3, [r3, #0]
 801e35c:	06dd      	lsls	r5, r3, #27
 801e35e:	f100 8097 	bmi.w	801e490 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e362:	4fb3      	ldr	r7, [pc, #716]	; (801e630 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e364:	4eb3      	ldr	r6, [pc, #716]	; (801e634 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e366:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e368:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e36a:	2900      	cmp	r1, #0
 801e36c:	d07f      	beq.n	801e46e <tcp_receive+0x12a>
 801e36e:	7d22      	ldrb	r2, [r4, #20]
 801e370:	2a06      	cmp	r2, #6
 801e372:	d87c      	bhi.n	801e46e <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e374:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e376:	eba2 0803 	sub.w	r8, r2, r3
 801e37a:	f1b8 0f01 	cmp.w	r8, #1
 801e37e:	d405      	bmi.n	801e38c <tcp_receive+0x48>
 801e380:	1c50      	adds	r0, r2, #1
 801e382:	1ac0      	subs	r0, r0, r3
 801e384:	1a41      	subs	r1, r0, r1
 801e386:	2900      	cmp	r1, #0
 801e388:	f340 81f3 	ble.w	801e772 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e38c:	1a99      	subs	r1, r3, r2
 801e38e:	2900      	cmp	r1, #0
 801e390:	f2c0 81ea 	blt.w	801e768 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e394:	f103 0c01 	add.w	ip, r3, #1
 801e398:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801e39a:	ebac 0102 	sub.w	r1, ip, r2
 801e39e:	1a09      	subs	r1, r1, r0
 801e3a0:	2900      	cmp	r1, #0
 801e3a2:	dc39      	bgt.n	801e418 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e3a4:	429a      	cmp	r2, r3
 801e3a6:	f000 8470 	beq.w	801ec8a <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e3aa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e3ac:	2d00      	cmp	r5, #0
 801e3ae:	f000 8378 	beq.w	801eaa2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801e3b2:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801e3b4:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e3b8:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801e3bc:	6842      	ldr	r2, [r0, #4]
 801e3be:	429a      	cmp	r2, r3
 801e3c0:	d019      	beq.n	801e3f6 <tcp_receive+0xb2>
              if (prev == NULL) {
 801e3c2:	f1b8 0f00 	cmp.w	r8, #0
 801e3c6:	f000 815b 	beq.w	801e680 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e3ca:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801e3ce:	6849      	ldr	r1, [r1, #4]
 801e3d0:	ebae 0101 	sub.w	r1, lr, r1
 801e3d4:	2900      	cmp	r1, #0
 801e3d6:	db04      	blt.n	801e3e2 <tcp_receive+0x9e>
 801e3d8:	ebac 0102 	sub.w	r1, ip, r2
 801e3dc:	2900      	cmp	r1, #0
 801e3de:	f340 8369 	ble.w	801eab4 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e3e2:	6829      	ldr	r1, [r5, #0]
 801e3e4:	46a8      	mov	r8, r5
 801e3e6:	2900      	cmp	r1, #0
 801e3e8:	f000 8159 	beq.w	801e69e <tcp_receive+0x35a>
 801e3ec:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801e3ee:	68e8      	ldr	r0, [r5, #12]
 801e3f0:	6842      	ldr	r2, [r0, #4]
 801e3f2:	429a      	cmp	r2, r3
 801e3f4:	d1e5      	bne.n	801e3c2 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801e3f6:	4890      	ldr	r0, [pc, #576]	; (801e638 <tcp_receive+0x2f4>)
 801e3f8:	892b      	ldrh	r3, [r5, #8]
 801e3fa:	8902      	ldrh	r2, [r0, #8]
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	d90b      	bls.n	801e418 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e400:	f7fe fe70 	bl	801d0e4 <tcp_seg_copy>
                if (cseg != NULL) {
 801e404:	b140      	cbz	r0, 801e418 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801e406:	f1b8 0f00 	cmp.w	r8, #0
 801e40a:	f000 8414 	beq.w	801ec36 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801e40e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801e412:	4629      	mov	r1, r5
 801e414:	f7ff fea2 	bl	801e15c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e418:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801e41a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801e41e:	f002 ba47 	b.w	80208b0 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801e422:	4f83      	ldr	r7, [pc, #524]	; (801e630 <tcp_receive+0x2ec>)
 801e424:	8839      	ldrh	r1, [r7, #0]
 801e426:	2900      	cmp	r1, #0
 801e428:	f040 8116 	bne.w	801e658 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e42c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e42e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e430:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801e434:	4470      	add	r0, lr
 801e436:	4560      	cmp	r0, ip
 801e438:	f040 810e 	bne.w	801e658 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801e43c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801e43e:	0400      	lsls	r0, r0, #16
 801e440:	f100 810a 	bmi.w	801e658 <tcp_receive+0x314>
 801e444:	4590      	cmp	r8, r2
 801e446:	f040 8107 	bne.w	801e658 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e44a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801e44e:	28ff      	cmp	r0, #255	; 0xff
 801e450:	f000 8393 	beq.w	801eb7a <tcp_receive+0x836>
                ++pcb->dupacks;
 801e454:	3001      	adds	r0, #1
 801e456:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801e458:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801e45a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801e45e:	f200 838c 	bhi.w	801eb7a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801e462:	f000 8396 	beq.w	801eb92 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e466:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e468:	2800      	cmp	r0, #0
 801e46a:	f040 80b6 	bne.w	801e5da <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e46e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e470:	1a99      	subs	r1, r3, r2
 801e472:	2900      	cmp	r1, #0
 801e474:	db06      	blt.n	801e484 <tcp_receive+0x140>
 801e476:	f1c2 0201 	rsb	r2, r2, #1
 801e47a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e47c:	1a52      	subs	r2, r2, r1
 801e47e:	4413      	add	r3, r2
 801e480:	2b00      	cmp	r3, #0
 801e482:	dd03      	ble.n	801e48c <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801e484:	8b63      	ldrh	r3, [r4, #26]
 801e486:	f043 0302 	orr.w	r3, r3, #2
 801e48a:	8363      	strh	r3, [r4, #26]
}
 801e48c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e490:	4e68      	ldr	r6, [pc, #416]	; (801e634 <tcp_receive+0x2f0>)
 801e492:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e494:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e496:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e49a:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e49c:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4a0:	2900      	cmp	r1, #0
 801e4a2:	db7f      	blt.n	801e5a4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4a4:	4d65      	ldr	r5, [pc, #404]	; (801e63c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4a6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4a8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4aa:	f000 80d9 	beq.w	801e660 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4ae:	4594      	cmp	ip, r2
 801e4b0:	f000 80df 	beq.w	801e672 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e4b4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801e4b8:	eba2 0108 	sub.w	r1, r2, r8
 801e4bc:	2900      	cmp	r1, #0
 801e4be:	ddb0      	ble.n	801e422 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e4c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e4c2:	1ad3      	subs	r3, r2, r3
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	dc7d      	bgt.n	801e5c4 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801e4c8:	8b63      	ldrh	r3, [r4, #26]
 801e4ca:	0758      	lsls	r0, r3, #29
 801e4cc:	d509      	bpl.n	801e4e2 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801e4ce:	f023 0304 	bic.w	r3, r3, #4
 801e4d2:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801e4d4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e4d8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801e4dc:	2300      	movs	r3, #0
 801e4de:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e4e2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801e4e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801e4e8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e4ea:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801e4ee:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e4f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801e4f4:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801e4f6:	f04f 0300 	mov.w	r3, #0
 801e4fa:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801e4fe:	d913      	bls.n	801e528 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801e500:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e504:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801e506:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801e50a:	429a      	cmp	r2, r3
 801e50c:	f200 81c9 	bhi.w	801e8a2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e510:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801e514:	4411      	add	r1, r2
 801e516:	b289      	uxth	r1, r1
 801e518:	428a      	cmp	r2, r1
 801e51a:	f200 82a9 	bhi.w	801ea70 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e51e:	428b      	cmp	r3, r1
 801e520:	f240 82a8 	bls.w	801ea74 <tcp_receive+0x730>
 801e524:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e528:	4620      	mov	r0, r4
 801e52a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801e52e:	f7ff fe99 	bl	801e264 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e532:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e534:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e536:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e538:	4620      	mov	r0, r4
 801e53a:	f7ff fe93 	bl	801e264 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801e53e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e540:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801e542:	fab2 f382 	clz	r3, r2
 801e546:	095b      	lsrs	r3, r3, #5
 801e548:	425b      	negs	r3, r3
 801e54a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801e54c:	2300      	movs	r3, #0
 801e54e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801e550:	2800      	cmp	r0, #0
 801e552:	f000 81a3 	beq.w	801e89c <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e556:	4b3a      	ldr	r3, [pc, #232]	; (801e640 <tcp_receive+0x2fc>)
 801e558:	8819      	ldrh	r1, [r3, #0]
 801e55a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801e55e:	440b      	add	r3, r1
 801e560:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801e564:	8b63      	ldrh	r3, [r4, #26]
 801e566:	0519      	lsls	r1, r3, #20
 801e568:	f140 80fa 	bpl.w	801e760 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801e56c:	2a00      	cmp	r2, #0
 801e56e:	f000 81af 	beq.w	801e8d0 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e572:	68d3      	ldr	r3, [r2, #12]
 801e574:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e576:	6858      	ldr	r0, [r3, #4]
 801e578:	f7fb ffe2 	bl	801a540 <lwip_htonl>
 801e57c:	1a38      	subs	r0, r7, r0
 801e57e:	2800      	cmp	r0, #0
 801e580:	f300 80ee 	bgt.w	801e760 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801e584:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e586:	4f2a      	ldr	r7, [pc, #168]	; (801e630 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801e588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e58c:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801e58e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e590:	6833      	ldr	r3, [r6, #0]
 801e592:	e01d      	b.n	801e5d0 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e594:	4b2b      	ldr	r3, [pc, #172]	; (801e644 <tcp_receive+0x300>)
 801e596:	f240 427c 	movw	r2, #1148	; 0x47c
 801e59a:	492b      	ldr	r1, [pc, #172]	; (801e648 <tcp_receive+0x304>)
 801e59c:	482b      	ldr	r0, [pc, #172]	; (801e64c <tcp_receive+0x308>)
 801e59e:	f008 f8d1 	bl	8026744 <iprintf>
 801e5a2:	e6d9      	b.n	801e358 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e5a4:	4a2a      	ldr	r2, [pc, #168]	; (801e650 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e5a6:	4d25      	ldr	r5, [pc, #148]	; (801e63c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e5a8:	6812      	ldr	r2, [r2, #0]
 801e5aa:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e5ac:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e5ae:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e5b2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e5b6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801e5b8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e5bc:	bf38      	it	cc
 801e5be:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801e5c2:	e777      	b.n	801e4b4 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e5c4:	4f1a      	ldr	r7, [pc, #104]	; (801e630 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f002 f972 	bl	80208b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e5cc:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e5ce:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e5d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e5d2:	2800      	cmp	r0, #0
 801e5d4:	f43f aec9 	beq.w	801e36a <tcp_receive+0x26>
 801e5d8:	682a      	ldr	r2, [r5, #0]
 801e5da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801e5dc:	1aaa      	subs	r2, r5, r2
 801e5de:	2a00      	cmp	r2, #0
 801e5e0:	f6bf aec3 	bge.w	801e36a <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801e5e4:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e5e8:	b280      	uxth	r0, r0
 801e5ea:	4a1a      	ldr	r2, [pc, #104]	; (801e654 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801e5ec:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e5f0:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801e5f4:	ebae 020c 	sub.w	r2, lr, ip
 801e5f8:	1a12      	subs	r2, r2, r0
 801e5fa:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801e5fc:	4415      	add	r5, r2
      if (m < 0) {
 801e5fe:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801e602:	b22d      	sxth	r5, r5
 801e604:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801e606:	d003      	beq.n	801e610 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801e608:	ebac 0c0e 	sub.w	ip, ip, lr
 801e60c:	4460      	add	r0, ip
 801e60e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801e610:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e614:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801e618:	4410      	add	r0, r2
      pcb->rttest = 0;
 801e61a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801e61c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801e61e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e620:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801e624:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e626:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801e62a:	e69e      	b.n	801e36a <tcp_receive+0x26>
 801e62c:	2002e4bc 	.word	0x2002e4bc
 801e630:	2002e4f6 	.word	0x2002e4f6
 801e634:	2002e4dc 	.word	0x2002e4dc
 801e638:	2002e4c0 	.word	0x2002e4c0
 801e63c:	2002e4b8 	.word	0x2002e4b8
 801e640:	2002e4d0 	.word	0x2002e4d0
 801e644:	08045e00 	.word	0x08045e00
 801e648:	08045ee8 	.word	0x08045ee8
 801e64c:	0802b43c 	.word	0x0802b43c
 801e650:	2002e4e8 	.word	0x2002e4e8
 801e654:	2002e4ac 	.word	0x2002e4ac
        pcb->dupacks = 0;
 801e658:	2200      	movs	r2, #0
 801e65a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e65e:	e7b7      	b.n	801e5d0 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e660:	ebac 0102 	sub.w	r1, ip, r2
 801e664:	2900      	cmp	r1, #0
 801e666:	f6bf af22 	bge.w	801e4ae <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e66a:	49ac      	ldr	r1, [pc, #688]	; (801e91c <tcp_receive+0x5d8>)
 801e66c:	6809      	ldr	r1, [r1, #0]
 801e66e:	89c9      	ldrh	r1, [r1, #14]
 801e670:	e79d      	b.n	801e5ae <tcp_receive+0x26a>
 801e672:	49aa      	ldr	r1, [pc, #680]	; (801e91c <tcp_receive+0x5d8>)
 801e674:	6809      	ldr	r1, [r1, #0]
 801e676:	89c9      	ldrh	r1, [r1, #14]
 801e678:	458e      	cmp	lr, r1
 801e67a:	f4bf af1b 	bcs.w	801e4b4 <tcp_receive+0x170>
 801e67e:	e796      	b.n	801e5ae <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e680:	1a99      	subs	r1, r3, r2
 801e682:	2900      	cmp	r1, #0
 801e684:	f6bf aead 	bge.w	801e3e2 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e688:	48a5      	ldr	r0, [pc, #660]	; (801e920 <tcp_receive+0x5dc>)
 801e68a:	f7fe fd2b 	bl	801d0e4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801e68e:	2800      	cmp	r0, #0
 801e690:	f43f aec2 	beq.w	801e418 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801e694:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801e696:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e698:	f7ff fd60 	bl	801e15c <tcp_oos_insert_segment>
 801e69c:	e6bc      	b.n	801e418 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e69e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	f77f aeb9 	ble.w	801e418 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e6a6:	8980      	ldrh	r0, [r0, #12]
 801e6a8:	f7fb ff46 	bl	801a538 <lwip_htons>
 801e6ac:	07c1      	lsls	r1, r0, #31
 801e6ae:	f53f aeb3 	bmi.w	801e418 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801e6b2:	489b      	ldr	r0, [pc, #620]	; (801e920 <tcp_receive+0x5dc>)
 801e6b4:	f7fe fd16 	bl	801d0e4 <tcp_seg_copy>
 801e6b8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801e6ba:	2800      	cmp	r0, #0
 801e6bc:	f43f aeac 	beq.w	801e418 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e6c0:	68eb      	ldr	r3, [r5, #12]
 801e6c2:	892a      	ldrh	r2, [r5, #8]
 801e6c4:	6859      	ldr	r1, [r3, #4]
 801e6c6:	6833      	ldr	r3, [r6, #0]
 801e6c8:	440a      	add	r2, r1
 801e6ca:	1ad2      	subs	r2, r2, r3
 801e6cc:	2a00      	cmp	r2, #0
 801e6ce:	dd05      	ble.n	801e6dc <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e6d0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801e6d2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e6d4:	b299      	uxth	r1, r3
 801e6d6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801e6d8:	f7fd fe52 	bl	801c380 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e6dc:	6832      	ldr	r2, [r6, #0]
 801e6de:	883b      	ldrh	r3, [r7, #0]
 801e6e0:	4413      	add	r3, r2
 801e6e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e6e4:	1a9b      	subs	r3, r3, r2
 801e6e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e6e8:	1a9b      	subs	r3, r3, r2
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	f77f ae94 	ble.w	801e418 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e6f0:	682b      	ldr	r3, [r5, #0]
 801e6f2:	68db      	ldr	r3, [r3, #12]
 801e6f4:	8998      	ldrh	r0, [r3, #12]
 801e6f6:	f7fb ff1f 	bl	801a538 <lwip_htons>
 801e6fa:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e6fc:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e6fe:	f100 82b1 	bmi.w	801ec64 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e702:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e704:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801e706:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e708:	1a89      	subs	r1, r1, r2
 801e70a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e70c:	4411      	add	r1, r2
 801e70e:	b289      	uxth	r1, r1
 801e710:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e712:	f7fd fe35 	bl	801c380 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e716:	682b      	ldr	r3, [r5, #0]
 801e718:	891d      	ldrh	r5, [r3, #8]
 801e71a:	68db      	ldr	r3, [r3, #12]
 801e71c:	8998      	ldrh	r0, [r3, #12]
 801e71e:	f7fb ff0b 	bl	801a538 <lwip_htons>
 801e722:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e726:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801e728:	bf18      	it	ne
 801e72a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e72c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801e72e:	442b      	add	r3, r5
 801e730:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e732:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801e734:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e738:	4413      	add	r3, r2
 801e73a:	4299      	cmp	r1, r3
 801e73c:	f43f ae6c 	beq.w	801e418 <tcp_receive+0xd4>
 801e740:	4b78      	ldr	r3, [pc, #480]	; (801e924 <tcp_receive+0x5e0>)
 801e742:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e746:	4978      	ldr	r1, [pc, #480]	; (801e928 <tcp_receive+0x5e4>)
 801e748:	4878      	ldr	r0, [pc, #480]	; (801e92c <tcp_receive+0x5e8>)
 801e74a:	f007 fffb 	bl	8026744 <iprintf>
 801e74e:	e663      	b.n	801e418 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e750:	4b74      	ldr	r3, [pc, #464]	; (801e924 <tcp_receive+0x5e0>)
 801e752:	f240 427b 	movw	r2, #1147	; 0x47b
 801e756:	4976      	ldr	r1, [pc, #472]	; (801e930 <tcp_receive+0x5ec>)
 801e758:	4874      	ldr	r0, [pc, #464]	; (801e92c <tcp_receive+0x5e8>)
 801e75a:	f007 fff3 	bl	8026744 <iprintf>
 801e75e:	e5f7      	b.n	801e350 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e760:	4f74      	ldr	r7, [pc, #464]	; (801e934 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e762:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e764:	8839      	ldrh	r1, [r7, #0]
 801e766:	e733      	b.n	801e5d0 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801e768:	8b63      	ldrh	r3, [r4, #26]
 801e76a:	f043 0302 	orr.w	r3, r3, #2
 801e76e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e770:	e652      	b.n	801e418 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801e772:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e920 <tcp_receive+0x5dc>
 801e776:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e77a:	2d00      	cmp	r5, #0
 801e77c:	f000 8170 	beq.w	801ea60 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e780:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e784:	4598      	cmp	r8, r3
 801e786:	f200 80c0 	bhi.w	801e90a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e78a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801e78e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e792:	891a      	ldrh	r2, [r3, #8]
 801e794:	4542      	cmp	r2, r8
 801e796:	f0c0 80ad 	bcc.w	801e8f4 <tcp_receive+0x5b0>
      inseg.len -= off;
 801e79a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e79e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801e7a2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e7a6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801e7a8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801e7ac:	896b      	ldrh	r3, [r5, #10]
 801e7ae:	4543      	cmp	r3, r8
 801e7b0:	d20a      	bcs.n	801e7c8 <tcp_receive+0x484>
        p->len = 0;
 801e7b2:	2100      	movs	r1, #0
        off -= p->len;
 801e7b4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801e7b8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801e7ba:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801e7bc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801e7be:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801e7c2:	896b      	ldrh	r3, [r5, #10]
 801e7c4:	4543      	cmp	r3, r8
 801e7c6:	d3f5      	bcc.n	801e7b4 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801e7c8:	4641      	mov	r1, r8
 801e7ca:	4628      	mov	r0, r5
 801e7cc:	f7fd fe64 	bl	801c498 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e7d2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e7d6:	6033      	str	r3, [r6, #0]
 801e7d8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e7da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	f43f ae1b 	beq.w	801e418 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801e7e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e7e6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801e7ea:	8998      	ldrh	r0, [r3, #12]
 801e7ec:	f7fb fea4 	bl	801a538 <lwip_htons>
 801e7f0:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801e7f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801e7f6:	bf18      	it	ne
 801e7f8:	2301      	movne	r3, #1
 801e7fa:	442b      	add	r3, r5
 801e7fc:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801e7fe:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801e800:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801e802:	f0c0 8181 	bcc.w	801eb08 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801e806:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e808:	2b00      	cmp	r3, #0
 801e80a:	f000 80a0 	beq.w	801e94e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e80e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e812:	8998      	ldrh	r0, [r3, #12]
 801e814:	f7fb fe90 	bl	801a538 <lwip_htons>
 801e818:	07c2      	lsls	r2, r0, #31
 801e81a:	f100 8095 	bmi.w	801e948 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801e81e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801e820:	b955      	cbnz	r5, 801e838 <tcp_receive+0x4f4>
 801e822:	e1f4      	b.n	801ec0e <tcp_receive+0x8ca>
              next = next->next;
 801e824:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801e828:	4628      	mov	r0, r5
 801e82a:	f7fe fc3d 	bl	801d0a8 <tcp_seg_free>
            while (next &&
 801e82e:	4645      	mov	r5, r8
 801e830:	f1b8 0f00 	cmp.w	r8, #0
 801e834:	f000 81eb 	beq.w	801ec0e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e838:	68e8      	ldr	r0, [r5, #12]
 801e83a:	883a      	ldrh	r2, [r7, #0]
 801e83c:	f8d6 e000 	ldr.w	lr, [r6]
 801e840:	892b      	ldrh	r3, [r5, #8]
 801e842:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801e846:	eb02 010e 	add.w	r1, r2, lr
 801e84a:	4463      	add	r3, ip
 801e84c:	1acb      	subs	r3, r1, r3
            while (next &&
 801e84e:	2b00      	cmp	r3, #0
 801e850:	f2c0 81a5 	blt.w	801eb9e <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e854:	8980      	ldrh	r0, [r0, #12]
 801e856:	f7fb fe6f 	bl	801a538 <lwip_htons>
 801e85a:	07c3      	lsls	r3, r0, #31
 801e85c:	d5e2      	bpl.n	801e824 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e85e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e862:	8998      	ldrh	r0, [r3, #12]
 801e864:	f7fb fe68 	bl	801a538 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e868:	0780      	lsls	r0, r0, #30
 801e86a:	d4db      	bmi.n	801e824 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e86c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e870:	2001      	movs	r0, #1
 801e872:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801e876:	f7fb fe5f 	bl	801a538 <lwip_htons>
 801e87a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e87e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801e882:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e886:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e888:	b280      	uxth	r0, r0
 801e88a:	f7fb fe55 	bl	801a538 <lwip_htons>
 801e88e:	f010 0003 	ands.w	r0, r0, #3
 801e892:	bf18      	it	ne
 801e894:	2001      	movne	r0, #1
 801e896:	4440      	add	r0, r8
 801e898:	8038      	strh	r0, [r7, #0]
 801e89a:	e7c3      	b.n	801e824 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801e89c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801e8a0:	e659      	b.n	801e556 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e8a2:	8b62      	ldrh	r2, [r4, #26]
 801e8a4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e8a8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e8aa:	bf14      	ite	ne
 801e8ac:	2001      	movne	r0, #1
 801e8ae:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e8b0:	fb12 f200 	smulbb	r2, r2, r0
 801e8b4:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801e8b6:	428a      	cmp	r2, r1
 801e8b8:	bf94      	ite	ls
 801e8ba:	1898      	addls	r0, r3, r2
 801e8bc:	1858      	addhi	r0, r3, r1
 801e8be:	b282      	uxth	r2, r0
 801e8c0:	4293      	cmp	r3, r2
 801e8c2:	f240 80e0 	bls.w	801ea86 <tcp_receive+0x742>
 801e8c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801e8ce:	e62b      	b.n	801e528 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801e8d0:	b148      	cbz	r0, 801e8e6 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e8d2:	68c3      	ldr	r3, [r0, #12]
 801e8d4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e8d6:	6858      	ldr	r0, [r3, #4]
 801e8d8:	f7fb fe32 	bl	801a540 <lwip_htonl>
 801e8dc:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801e8de:	2800      	cmp	r0, #0
 801e8e0:	f73f af3e 	bgt.w	801e760 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801e8e4:	8b63      	ldrh	r3, [r4, #26]
 801e8e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e8ea:	4f12      	ldr	r7, [pc, #72]	; (801e934 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801e8ec:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e8ee:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e8f0:	6833      	ldr	r3, [r6, #0]
 801e8f2:	e66d      	b.n	801e5d0 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e8f4:	4b0b      	ldr	r3, [pc, #44]	; (801e924 <tcp_receive+0x5e0>)
 801e8f6:	f240 5297 	movw	r2, #1431	; 0x597
 801e8fa:	490f      	ldr	r1, [pc, #60]	; (801e938 <tcp_receive+0x5f4>)
 801e8fc:	480b      	ldr	r0, [pc, #44]	; (801e92c <tcp_receive+0x5e8>)
 801e8fe:	f007 ff21 	bl	8026744 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e902:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e906:	891a      	ldrh	r2, [r3, #8]
 801e908:	e747      	b.n	801e79a <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e90a:	4b06      	ldr	r3, [pc, #24]	; (801e924 <tcp_receive+0x5e0>)
 801e90c:	f240 5295 	movw	r2, #1429	; 0x595
 801e910:	490a      	ldr	r1, [pc, #40]	; (801e93c <tcp_receive+0x5f8>)
 801e912:	4806      	ldr	r0, [pc, #24]	; (801e92c <tcp_receive+0x5e8>)
 801e914:	f007 ff16 	bl	8026744 <iprintf>
 801e918:	e737      	b.n	801e78a <tcp_receive+0x446>
 801e91a:	bf00      	nop
 801e91c:	2002e4e8 	.word	0x2002e4e8
 801e920:	2002e4c0 	.word	0x2002e4c0
 801e924:	08045e00 	.word	0x08045e00
 801e928:	08045f34 	.word	0x08045f34
 801e92c:	0802b43c 	.word	0x0802b43c
 801e930:	08045ecc 	.word	0x08045ecc
 801e934:	2002e4f6 	.word	0x2002e4f6
 801e938:	08045f24 	.word	0x08045f24
 801e93c:	08045f14 	.word	0x08045f14
              pcb->ooseq = pcb->ooseq->next;
 801e940:	6803      	ldr	r3, [r0, #0]
 801e942:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e944:	f7fe fbb0 	bl	801d0a8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e948:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801e94a:	2800      	cmp	r0, #0
 801e94c:	d1f8      	bne.n	801e940 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801e94e:	883a      	ldrh	r2, [r7, #0]
 801e950:	6831      	ldr	r1, [r6, #0]
 801e952:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e954:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801e956:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e958:	4293      	cmp	r3, r2
 801e95a:	f0c0 80cb 	bcc.w	801eaf4 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801e95e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801e960:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801e962:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801e964:	f7fe fa68 	bl	801ce38 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801e968:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e96c:	891a      	ldrh	r2, [r3, #8]
 801e96e:	b122      	cbz	r2, 801e97a <tcp_receive+0x636>
          recv_data = inseg.p;
 801e970:	4ab2      	ldr	r2, [pc, #712]	; (801ec3c <tcp_receive+0x8f8>)
 801e972:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801e974:	2300      	movs	r3, #0
 801e976:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e97a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e97e:	8998      	ldrh	r0, [r3, #12]
 801e980:	f7fb fdda 	bl	801a538 <lwip_htons>
 801e984:	07c2      	lsls	r2, r0, #31
 801e986:	d504      	bpl.n	801e992 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801e988:	4aad      	ldr	r2, [pc, #692]	; (801ec40 <tcp_receive+0x8fc>)
 801e98a:	7813      	ldrb	r3, [r2, #0]
 801e98c:	f043 0320 	orr.w	r3, r3, #32
 801e990:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801e992:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e994:	2d00      	cmp	r5, #0
 801e996:	d07b      	beq.n	801ea90 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e998:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801ec48 <tcp_receive+0x904>
 801e99c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801ec60 <tcp_receive+0x91c>
 801e9a0:	4fa8      	ldr	r7, [pc, #672]	; (801ec44 <tcp_receive+0x900>)
 801e9a2:	e033      	b.n	801ea0c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e9a4:	68eb      	ldr	r3, [r5, #12]
 801e9a6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e9aa:	8998      	ldrh	r0, [r3, #12]
 801e9ac:	f7fb fdc4 	bl	801a538 <lwip_htons>
 801e9b0:	f010 0003 	ands.w	r0, r0, #3
 801e9b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e9b6:	bf18      	it	ne
 801e9b8:	2001      	movne	r0, #1
 801e9ba:	4450      	add	r0, sl
 801e9bc:	1a18      	subs	r0, r3, r0
 801e9be:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	f7fe fa39 	bl	801ce38 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801e9c6:	6869      	ldr	r1, [r5, #4]
 801e9c8:	890b      	ldrh	r3, [r1, #8]
 801e9ca:	b13b      	cbz	r3, 801e9dc <tcp_receive+0x698>
            if (recv_data) {
 801e9cc:	4b9b      	ldr	r3, [pc, #620]	; (801ec3c <tcp_receive+0x8f8>)
 801e9ce:	6818      	ldr	r0, [r3, #0]
 801e9d0:	2800      	cmp	r0, #0
 801e9d2:	d05b      	beq.n	801ea8c <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801e9d4:	f7fd fe1e 	bl	801c614 <pbuf_cat>
            cseg->p = NULL;
 801e9d8:	2300      	movs	r3, #0
 801e9da:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e9dc:	68eb      	ldr	r3, [r5, #12]
 801e9de:	8998      	ldrh	r0, [r3, #12]
 801e9e0:	f7fb fdaa 	bl	801a538 <lwip_htons>
 801e9e4:	07c3      	lsls	r3, r0, #31
 801e9e6:	d509      	bpl.n	801e9fc <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801e9e8:	4a95      	ldr	r2, [pc, #596]	; (801ec40 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e9ea:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801e9ec:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e9ee:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801e9f0:	f043 0320 	orr.w	r3, r3, #32
 801e9f4:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e9f6:	d101      	bne.n	801e9fc <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801e9f8:	2307      	movs	r3, #7
 801e9fa:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801e9fc:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801e9fe:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801ea00:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801ea02:	f7fe fb51 	bl	801d0a8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ea06:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801ea08:	2d00      	cmp	r5, #0
 801ea0a:	d041      	beq.n	801ea90 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ea0c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801ea0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ea10:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801ea12:	428b      	cmp	r3, r1
 801ea14:	d13c      	bne.n	801ea90 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801ea16:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea18:	8990      	ldrh	r0, [r2, #12]
 801ea1a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801ea1e:	f7fb fd8b 	bl	801a538 <lwip_htons>
 801ea22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ea24:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea28:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea2c:	bf18      	it	ne
 801ea2e:	2001      	movne	r0, #1
 801ea30:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea32:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea34:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea36:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea3a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea3c:	8998      	ldrh	r0, [r3, #12]
 801ea3e:	f7fb fd7b 	bl	801a538 <lwip_htons>
 801ea42:	f010 0003 	ands.w	r0, r0, #3
 801ea46:	bf18      	it	ne
 801ea48:	2001      	movne	r0, #1
 801ea4a:	4458      	add	r0, fp
 801ea4c:	4582      	cmp	sl, r0
 801ea4e:	d2a9      	bcs.n	801e9a4 <tcp_receive+0x660>
 801ea50:	464b      	mov	r3, r9
 801ea52:	f240 622b 	movw	r2, #1579	; 0x62b
 801ea56:	4641      	mov	r1, r8
 801ea58:	4638      	mov	r0, r7
 801ea5a:	f007 fe73 	bl	8026744 <iprintf>
 801ea5e:	e7a1      	b.n	801e9a4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ea60:	4b79      	ldr	r3, [pc, #484]	; (801ec48 <tcp_receive+0x904>)
 801ea62:	f240 5294 	movw	r2, #1428	; 0x594
 801ea66:	4979      	ldr	r1, [pc, #484]	; (801ec4c <tcp_receive+0x908>)
 801ea68:	4876      	ldr	r0, [pc, #472]	; (801ec44 <tcp_receive+0x900>)
 801ea6a:	f007 fe6b 	bl	8026744 <iprintf>
 801ea6e:	e687      	b.n	801e780 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ea70:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea74:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea76:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea78:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea7a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea7e:	b292      	uxth	r2, r2
 801ea80:	4293      	cmp	r3, r2
 801ea82:	f63f af20 	bhi.w	801e8c6 <tcp_receive+0x582>
 801ea86:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801ea8a:	e54d      	b.n	801e528 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801ea8c:	6019      	str	r1, [r3, #0]
 801ea8e:	e7a3      	b.n	801e9d8 <tcp_receive+0x694>
        tcp_ack(pcb);
 801ea90:	8b63      	ldrh	r3, [r4, #26]
 801ea92:	07d8      	lsls	r0, r3, #31
 801ea94:	d50a      	bpl.n	801eaac <tcp_receive+0x768>
 801ea96:	f023 0301 	bic.w	r3, r3, #1
 801ea9a:	f043 0302 	orr.w	r3, r3, #2
 801ea9e:	8363      	strh	r3, [r4, #26]
 801eaa0:	e4f4      	b.n	801e48c <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801eaa2:	486b      	ldr	r0, [pc, #428]	; (801ec50 <tcp_receive+0x90c>)
 801eaa4:	f7fe fb1e 	bl	801d0e4 <tcp_seg_copy>
 801eaa8:	6760      	str	r0, [r4, #116]	; 0x74
 801eaaa:	e4b5      	b.n	801e418 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801eaac:	f043 0301 	orr.w	r3, r3, #1
 801eab0:	8363      	strh	r3, [r4, #26]
 801eab2:	e4eb      	b.n	801e48c <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801eab4:	4866      	ldr	r0, [pc, #408]	; (801ec50 <tcp_receive+0x90c>)
 801eab6:	f7fe fb15 	bl	801d0e4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801eaba:	4607      	mov	r7, r0
 801eabc:	2800      	cmp	r0, #0
 801eabe:	f43f acab 	beq.w	801e418 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801eac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eac6:	6832      	ldr	r2, [r6, #0]
 801eac8:	6859      	ldr	r1, [r3, #4]
 801eaca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801eace:	440b      	add	r3, r1
 801ead0:	1a9b      	subs	r3, r3, r2
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	dd07      	ble.n	801eae6 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ead6:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801ead8:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801eadc:	b291      	uxth	r1, r2
 801eade:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801eae2:	f7fd fc4d 	bl	801c380 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801eae6:	4629      	mov	r1, r5
 801eae8:	4638      	mov	r0, r7
                    prev->next = cseg;
 801eaea:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801eaee:	f7ff fb35 	bl	801e15c <tcp_oos_insert_segment>
 801eaf2:	e491      	b.n	801e418 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801eaf4:	4b54      	ldr	r3, [pc, #336]	; (801ec48 <tcp_receive+0x904>)
 801eaf6:	f240 6207 	movw	r2, #1543	; 0x607
 801eafa:	4956      	ldr	r1, [pc, #344]	; (801ec54 <tcp_receive+0x910>)
 801eafc:	4851      	ldr	r0, [pc, #324]	; (801ec44 <tcp_receive+0x900>)
 801eafe:	f007 fe21 	bl	8026744 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801eb02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801eb04:	883a      	ldrh	r2, [r7, #0]
 801eb06:	e72a      	b.n	801e95e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb08:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb0c:	8998      	ldrh	r0, [r3, #12]
 801eb0e:	f7fb fd13 	bl	801a538 <lwip_htons>
 801eb12:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eb14:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb18:	d47d      	bmi.n	801ec16 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb1a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801eb1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801eb1e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb22:	f7fb fd09 	bl	801a538 <lwip_htons>
 801eb26:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801eb28:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb2c:	d503      	bpl.n	801eb36 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801eb2e:	3901      	subs	r1, #1
 801eb30:	b289      	uxth	r1, r1
 801eb32:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801eb36:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801eb3a:	f7fd fc21 	bl	801c380 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801eb3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb42:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801eb46:	8998      	ldrh	r0, [r3, #12]
 801eb48:	f7fb fcf6 	bl	801a538 <lwip_htons>
 801eb4c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb50:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801eb52:	bf18      	it	ne
 801eb54:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb56:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801eb58:	442b      	add	r3, r5
 801eb5a:	b29b      	uxth	r3, r3
 801eb5c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb5e:	4413      	add	r3, r2
 801eb60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801eb62:	440a      	add	r2, r1
 801eb64:	4293      	cmp	r3, r2
 801eb66:	f43f ae4e 	beq.w	801e806 <tcp_receive+0x4c2>
 801eb6a:	4b37      	ldr	r3, [pc, #220]	; (801ec48 <tcp_receive+0x904>)
 801eb6c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801eb70:	4939      	ldr	r1, [pc, #228]	; (801ec58 <tcp_receive+0x914>)
 801eb72:	4834      	ldr	r0, [pc, #208]	; (801ec44 <tcp_receive+0x900>)
 801eb74:	f007 fde6 	bl	8026744 <iprintf>
 801eb78:	e645      	b.n	801e806 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801eb7a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801eb7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801eb82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801eb84:	4413      	add	r3, r2
 801eb86:	b29b      	uxth	r3, r3
 801eb88:	429a      	cmp	r2, r3
 801eb8a:	bf88      	it	hi
 801eb8c:	460b      	movhi	r3, r1
 801eb8e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801eb92:	4620      	mov	r0, r4
 801eb94:	f001 fe0a 	bl	80207ac <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801eb98:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801eb9a:	6833      	ldr	r3, [r6, #0]
 801eb9c:	e518      	b.n	801e5d0 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801eb9e:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	dc01      	bgt.n	801ebaa <tcp_receive+0x866>
            pcb->ooseq = next;
 801eba6:	6765      	str	r5, [r4, #116]	; 0x74
 801eba8:	e6d4      	b.n	801e954 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ebaa:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ebae:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ebb2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ebb6:	8998      	ldrh	r0, [r3, #12]
 801ebb8:	f7fb fcbe 	bl	801a538 <lwip_htons>
 801ebbc:	0781      	lsls	r1, r0, #30
 801ebbe:	d504      	bpl.n	801ebca <tcp_receive+0x886>
                inseg.len -= 1;
 801ebc0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801ebc4:	3b01      	subs	r3, #1
 801ebc6:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801ebca:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801ebce:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ebd2:	f7fd fbd5 	bl	801c380 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801ebd6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ebda:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801ebde:	8998      	ldrh	r0, [r3, #12]
 801ebe0:	f7fb fcaa 	bl	801a538 <lwip_htons>
 801ebe4:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ebe8:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801ebea:	bf18      	it	ne
 801ebec:	2001      	movne	r0, #1
 801ebee:	eb08 0200 	add.w	r2, r8, r0
 801ebf2:	b292      	uxth	r2, r2
 801ebf4:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ebf6:	6859      	ldr	r1, [r3, #4]
 801ebf8:	6833      	ldr	r3, [r6, #0]
 801ebfa:	4413      	add	r3, r2
 801ebfc:	428b      	cmp	r3, r1
 801ebfe:	d0d2      	beq.n	801eba6 <tcp_receive+0x862>
 801ec00:	4b11      	ldr	r3, [pc, #68]	; (801ec48 <tcp_receive+0x904>)
 801ec02:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ec06:	4915      	ldr	r1, [pc, #84]	; (801ec5c <tcp_receive+0x918>)
 801ec08:	480e      	ldr	r0, [pc, #56]	; (801ec44 <tcp_receive+0x900>)
 801ec0a:	f007 fd9b 	bl	8026744 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801ec0e:	883a      	ldrh	r2, [r7, #0]
 801ec10:	6831      	ldr	r1, [r6, #0]
 801ec12:	4411      	add	r1, r2
 801ec14:	e7c7      	b.n	801eba6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ec16:	899d      	ldrh	r5, [r3, #12]
 801ec18:	4628      	mov	r0, r5
 801ec1a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801ec1e:	f7fb fc8b 	bl	801a538 <lwip_htons>
 801ec22:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ec26:	f7fb fc87 	bl	801a538 <lwip_htons>
 801ec2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ec2e:	4328      	orrs	r0, r5
 801ec30:	8198      	strh	r0, [r3, #12]
 801ec32:	b280      	uxth	r0, r0
 801ec34:	e772      	b.n	801eb1c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801ec36:	6760      	str	r0, [r4, #116]	; 0x74
 801ec38:	f7ff bbeb 	b.w	801e412 <tcp_receive+0xce>
 801ec3c:	2002e4d4 	.word	0x2002e4d4
 801ec40:	2002e4d8 	.word	0x2002e4d8
 801ec44:	0802b43c 	.word	0x0802b43c
 801ec48:	08045e00 	.word	0x08045e00
 801ec4c:	08045f04 	.word	0x08045f04
 801ec50:	2002e4c0 	.word	0x2002e4c0
 801ec54:	08045fa8 	.word	0x08045fa8
 801ec58:	08045f34 	.word	0x08045f34
 801ec5c:	08045f6c 	.word	0x08045f6c
 801ec60:	08045fc8 	.word	0x08045fc8
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ec64:	68db      	ldr	r3, [r3, #12]
 801ec66:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801ec6a:	4640      	mov	r0, r8
 801ec6c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801ec70:	f7fb fc62 	bl	801a538 <lwip_htons>
 801ec74:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ec78:	f7fb fc5e 	bl	801a538 <lwip_htons>
 801ec7c:	682b      	ldr	r3, [r5, #0]
 801ec7e:	ea48 0800 	orr.w	r8, r8, r0
 801ec82:	68da      	ldr	r2, [r3, #12]
 801ec84:	f8a2 800c 	strh.w	r8, [r2, #12]
 801ec88:	e53b      	b.n	801e702 <tcp_receive+0x3be>
 801ec8a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801ec90 <tcp_receive+0x94c>
 801ec8e:	e5a8      	b.n	801e7e2 <tcp_receive+0x49e>
 801ec90:	2002e4c0 	.word	0x2002e4c0

0801ec94 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec94:	494a      	ldr	r1, [pc, #296]	; (801edc0 <tcp_parseopt.part.0+0x12c>)
 801ec96:	4b4b      	ldr	r3, [pc, #300]	; (801edc4 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec98:	4a4b      	ldr	r2, [pc, #300]	; (801edc8 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801ec9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec9e:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801eca2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eca4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801eca6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ecaa:	4b48      	ldr	r3, [pc, #288]	; (801edcc <tcp_parseopt.part.0+0x138>)
 801ecac:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801edd0 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecb0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801ecb2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ecb6:	681d      	ldr	r5, [r3, #0]
 801ecb8:	f8b9 2000 	ldrh.w	r2, [r9]
 801ecbc:	f102 0c14 	add.w	ip, r2, #20
 801ecc0:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecc2:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801ecc4:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecc8:	d96d      	bls.n	801eda6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801ecca:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eccc:	b1ac      	cbz	r4, 801ecfa <tcp_parseopt.part.0+0x66>
 801ecce:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801ecd0:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecd4:	d811      	bhi.n	801ecfa <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801ecd6:	b2c9      	uxtb	r1, r1
 801ecd8:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801ecda:	2901      	cmp	r1, #1
 801ecdc:	d011      	beq.n	801ed02 <tcp_parseopt.part.0+0x6e>
 801ecde:	2902      	cmp	r1, #2
 801ece0:	d017      	beq.n	801ed12 <tcp_parseopt.part.0+0x7e>
 801ece2:	b191      	cbz	r1, 801ed0a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ece4:	b10c      	cbz	r4, 801ecea <tcp_parseopt.part.0+0x56>
 801ece6:	4573      	cmp	r3, lr
 801ece8:	d242      	bcs.n	801ed70 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801ecea:	442b      	add	r3, r5
 801ecec:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801ecee:	2b01      	cmp	r3, #1
 801ecf0:	d961      	bls.n	801edb6 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ecf2:	441a      	add	r2, r3
 801ecf4:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ecf6:	2101      	movs	r1, #1
 801ecf8:	e7e0      	b.n	801ecbc <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801ecfa:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801ecfe:	2901      	cmp	r1, #1
 801ed00:	d1ed      	bne.n	801ecde <tcp_parseopt.part.0+0x4a>
 801ed02:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801ed06:	461a      	mov	r2, r3
 801ed08:	e7db      	b.n	801ecc2 <tcp_parseopt.part.0+0x2e>
 801ed0a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801ed0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801ed12:	1c91      	adds	r1, r2, #2
 801ed14:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed16:	b10c      	cbz	r4, 801ed1c <tcp_parseopt.part.0+0x88>
 801ed18:	4573      	cmp	r3, lr
 801ed1a:	d224      	bcs.n	801ed66 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801ed1c:	442b      	add	r3, r5
 801ed1e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ed20:	2b04      	cmp	r3, #4
 801ed22:	d145      	bne.n	801edb0 <tcp_parseopt.part.0+0x11c>
 801ed24:	1c4b      	adds	r3, r1, #1
 801ed26:	42b3      	cmp	r3, r6
 801ed28:	da42      	bge.n	801edb0 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801ed2a:	1cd3      	adds	r3, r2, #3
 801ed2c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed2e:	b384      	cbz	r4, 801ed92 <tcp_parseopt.part.0+0xfe>
 801ed30:	458e      	cmp	lr, r1
 801ed32:	d822      	bhi.n	801ed7a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed34:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801ed38:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed3a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801ed3c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801ed3e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed40:	f814 c001 	ldrb.w	ip, [r4, r1]
 801ed44:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed48:	d820      	bhi.n	801ed8c <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed4a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801ed4e:	b2c9      	uxtb	r1, r1
 801ed50:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801ed52:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ed56:	1e59      	subs	r1, r3, #1
 801ed58:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801ed5c:	bf28      	it	cs
 801ed5e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801ed62:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801ed64:	e7c7      	b.n	801ecf6 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed66:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ed6a:	b2db      	uxtb	r3, r3
 801ed6c:	5ce3      	ldrb	r3, [r4, r3]
 801ed6e:	e7d7      	b.n	801ed20 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed70:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ed74:	b2db      	uxtb	r3, r3
 801ed76:	5ce3      	ldrb	r3, [r4, r3]
 801ed78:	e7b9      	b.n	801ecee <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801ed7a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801ed7c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed7e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed80:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ed84:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed86:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed8a:	d9de      	bls.n	801ed4a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801ed8c:	442b      	add	r3, r5
 801ed8e:	7d1b      	ldrb	r3, [r3, #20]
 801ed90:	e7df      	b.n	801ed52 <tcp_parseopt.part.0+0xbe>
 801ed92:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801ed94:	3204      	adds	r2, #4
    return opts[optidx];
 801ed96:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed98:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ed9c:	b292      	uxth	r2, r2
    return opts[optidx];
 801ed9e:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801eda0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801eda4:	e7d5      	b.n	801ed52 <tcp_parseopt.part.0+0xbe>
 801eda6:	2900      	cmp	r1, #0
 801eda8:	d0b1      	beq.n	801ed0e <tcp_parseopt.part.0+0x7a>
 801edaa:	f8a9 2000 	strh.w	r2, [r9]
 801edae:	e7ae      	b.n	801ed0e <tcp_parseopt.part.0+0x7a>
 801edb0:	f8a9 1000 	strh.w	r1, [r9]
 801edb4:	e7ab      	b.n	801ed0e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801edb6:	3202      	adds	r2, #2
 801edb8:	f8a9 2000 	strh.w	r2, [r9]
 801edbc:	e7a7      	b.n	801ed0e <tcp_parseopt.part.0+0x7a>
 801edbe:	bf00      	nop
 801edc0:	2002e4ec 	.word	0x2002e4ec
 801edc4:	2002e4f0 	.word	0x2002e4f0
 801edc8:	2002e4f4 	.word	0x2002e4f4
 801edcc:	2002e4e8 	.word	0x2002e4e8
 801edd0:	2002e4e4 	.word	0x2002e4e4

0801edd4 <tcp_input>:
{
 801edd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801edd8:	4604      	mov	r4, r0
{
 801edda:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801eddc:	2800      	cmp	r0, #0
 801edde:	f000 80d2 	beq.w	801ef86 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801ede2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801ede4:	4e6b      	ldr	r6, [pc, #428]	; (801ef94 <tcp_input+0x1c0>)
 801ede6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801ede8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801edea:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801edec:	d805      	bhi.n	801edfa <tcp_input+0x26>
  pbuf_free(p);
 801edee:	4620      	mov	r0, r4
}
 801edf0:	b009      	add	sp, #36	; 0x24
 801edf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801edf6:	f7fd bbdb 	b.w	801c5b0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801edfa:	4f67      	ldr	r7, [pc, #412]	; (801ef98 <tcp_input+0x1c4>)
 801edfc:	6839      	ldr	r1, [r7, #0]
 801edfe:	6978      	ldr	r0, [r7, #20]
 801ee00:	f005 f9ae 	bl	8024160 <ip4_addr_isbroadcast_u32>
 801ee04:	2800      	cmp	r0, #0
 801ee06:	d1f2      	bne.n	801edee <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ee08:	697b      	ldr	r3, [r7, #20]
 801ee0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ee0e:	2be0      	cmp	r3, #224	; 0xe0
 801ee10:	d0ed      	beq.n	801edee <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801ee12:	f107 0314 	add.w	r3, r7, #20
 801ee16:	f107 0910 	add.w	r9, r7, #16
 801ee1a:	2106      	movs	r1, #6
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	9300      	str	r3, [sp, #0]
 801ee20:	464b      	mov	r3, r9
 801ee22:	8922      	ldrh	r2, [r4, #8]
 801ee24:	f7fc f91c 	bl	801b060 <ip_chksum_pseudo>
    if (chksum != 0) {
 801ee28:	4605      	mov	r5, r0
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	d1df      	bne.n	801edee <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ee2e:	6833      	ldr	r3, [r6, #0]
 801ee30:	8998      	ldrh	r0, [r3, #12]
 801ee32:	f7fb fb81 	bl	801a538 <lwip_htons>
 801ee36:	0a80      	lsrs	r0, r0, #10
 801ee38:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ee3c:	2913      	cmp	r1, #19
 801ee3e:	d9d6      	bls.n	801edee <tcp_input+0x1a>
 801ee40:	8923      	ldrh	r3, [r4, #8]
 801ee42:	b28a      	uxth	r2, r1
 801ee44:	428b      	cmp	r3, r1
 801ee46:	d3d2      	bcc.n	801edee <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee48:	f1a2 0314 	sub.w	r3, r2, #20
 801ee4c:	4853      	ldr	r0, [pc, #332]	; (801ef9c <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801ee4e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801efc8 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee52:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801ee54:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee58:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801ee5a:	8960      	ldrh	r0, [r4, #10]
 801ee5c:	4290      	cmp	r0, r2
 801ee5e:	f080 819f 	bcs.w	801f1a0 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ee62:	6823      	ldr	r3, [r4, #0]
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	f000 837b 	beq.w	801f560 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801ee6a:	2114      	movs	r1, #20
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f7fd fb13 	bl	801c498 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee72:	4b4a      	ldr	r3, [pc, #296]	; (801ef9c <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801ee74:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee76:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee78:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801ee7c:	4b48      	ldr	r3, [pc, #288]	; (801efa0 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee7e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee80:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801ee84:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee86:	f7fd fb07 	bl	801c498 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801ee8a:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee8c:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801ee90:	8943      	ldrh	r3, [r0, #10]
 801ee92:	455b      	cmp	r3, fp
 801ee94:	d3ab      	bcc.n	801edee <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ee96:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801ee98:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ee9a:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801ee9e:	f7fd fafb 	bl	801c498 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eea2:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eea4:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eea6:	442b      	add	r3, r5
 801eea8:	eba3 030a 	sub.w	r3, r3, sl
 801eeac:	b29b      	uxth	r3, r3
 801eeae:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eeb0:	2a00      	cmp	r2, #0
 801eeb2:	f040 835c 	bne.w	801f56e <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801eeb6:	6822      	ldr	r2, [r4, #0]
 801eeb8:	8912      	ldrh	r2, [r2, #8]
 801eeba:	429a      	cmp	r2, r3
 801eebc:	d005      	beq.n	801eeca <tcp_input+0xf6>
 801eebe:	4b39      	ldr	r3, [pc, #228]	; (801efa4 <tcp_input+0x1d0>)
 801eec0:	22e0      	movs	r2, #224	; 0xe0
 801eec2:	4939      	ldr	r1, [pc, #228]	; (801efa8 <tcp_input+0x1d4>)
 801eec4:	4839      	ldr	r0, [pc, #228]	; (801efac <tcp_input+0x1d8>)
 801eec6:	f007 fc3d 	bl	8026744 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801eeca:	6835      	ldr	r5, [r6, #0]
 801eecc:	8828      	ldrh	r0, [r5, #0]
 801eece:	f7fb fb33 	bl	801a538 <lwip_htons>
 801eed2:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801eed4:	6835      	ldr	r5, [r6, #0]
 801eed6:	8868      	ldrh	r0, [r5, #2]
 801eed8:	f7fb fb2e 	bl	801a538 <lwip_htons>
 801eedc:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eede:	6835      	ldr	r5, [r6, #0]
 801eee0:	6868      	ldr	r0, [r5, #4]
 801eee2:	f7fb fb2d 	bl	801a540 <lwip_htonl>
 801eee6:	4b32      	ldr	r3, [pc, #200]	; (801efb0 <tcp_input+0x1dc>)
 801eee8:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eeea:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eeec:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eeee:	68a8      	ldr	r0, [r5, #8]
 801eef0:	f7fb fb26 	bl	801a540 <lwip_htonl>
 801eef4:	4b2f      	ldr	r3, [pc, #188]	; (801efb4 <tcp_input+0x1e0>)
 801eef6:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801eef8:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eefa:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801eefc:	89e8      	ldrh	r0, [r5, #14]
 801eefe:	f7fb fb1b 	bl	801a538 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801ef02:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ef04:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ef06:	8998      	ldrh	r0, [r3, #12]
 801ef08:	f7fb fb16 	bl	801a538 <lwip_htons>
 801ef0c:	492a      	ldr	r1, [pc, #168]	; (801efb8 <tcp_input+0x1e4>)
 801ef0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801ef12:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801ef14:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ef16:	0782      	lsls	r2, r0, #30
 801ef18:	f040 8139 	bne.w	801f18e <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801ef1c:	4a27      	ldr	r2, [pc, #156]	; (801efbc <tcp_input+0x1e8>)
 801ef1e:	9205      	str	r2, [sp, #20]
 801ef20:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef22:	4b27      	ldr	r3, [pc, #156]	; (801efc0 <tcp_input+0x1ec>)
 801ef24:	681d      	ldr	r5, [r3, #0]
 801ef26:	2d00      	cmp	r5, #0
 801ef28:	f000 80e0 	beq.w	801f0ec <tcp_input+0x318>
  prev = NULL;
 801ef2c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ef30:	4b1c      	ldr	r3, [pc, #112]	; (801efa4 <tcp_input+0x1d0>)
 801ef32:	f8df b098 	ldr.w	fp, [pc, #152]	; 801efcc <tcp_input+0x1f8>
 801ef36:	f8df a074 	ldr.w	sl, [pc, #116]	; 801efac <tcp_input+0x1d8>
 801ef3a:	e019      	b.n	801ef70 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ef3c:	2a0a      	cmp	r2, #10
 801ef3e:	f000 80cd 	beq.w	801f0dc <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ef42:	2a01      	cmp	r2, #1
 801ef44:	f000 80c3 	beq.w	801f0ce <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef48:	7a29      	ldrb	r1, [r5, #8]
 801ef4a:	b131      	cbz	r1, 801ef5a <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ef4c:	687a      	ldr	r2, [r7, #4]
 801ef4e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801ef52:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef54:	b2d2      	uxtb	r2, r2
 801ef56:	4291      	cmp	r1, r2
 801ef58:	d104      	bne.n	801ef64 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801ef5a:	6832      	ldr	r2, [r6, #0]
 801ef5c:	8b28      	ldrh	r0, [r5, #24]
 801ef5e:	8811      	ldrh	r1, [r2, #0]
 801ef60:	4288      	cmp	r0, r1
 801ef62:	d035      	beq.n	801efd0 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef64:	68ea      	ldr	r2, [r5, #12]
 801ef66:	46a8      	mov	r8, r5
 801ef68:	2a00      	cmp	r2, #0
 801ef6a:	f000 80bf 	beq.w	801f0ec <tcp_input+0x318>
 801ef6e:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ef70:	7d2a      	ldrb	r2, [r5, #20]
 801ef72:	2a00      	cmp	r2, #0
 801ef74:	d1e2      	bne.n	801ef3c <tcp_input+0x168>
 801ef76:	22fb      	movs	r2, #251	; 0xfb
 801ef78:	4659      	mov	r1, fp
 801ef7a:	4650      	mov	r0, sl
 801ef7c:	f007 fbe2 	bl	8026744 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ef80:	7d2a      	ldrb	r2, [r5, #20]
 801ef82:	4b08      	ldr	r3, [pc, #32]	; (801efa4 <tcp_input+0x1d0>)
 801ef84:	e7da      	b.n	801ef3c <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ef86:	4b07      	ldr	r3, [pc, #28]	; (801efa4 <tcp_input+0x1d0>)
 801ef88:	2283      	movs	r2, #131	; 0x83
 801ef8a:	490e      	ldr	r1, [pc, #56]	; (801efc4 <tcp_input+0x1f0>)
 801ef8c:	4807      	ldr	r0, [pc, #28]	; (801efac <tcp_input+0x1d8>)
 801ef8e:	f007 fbd9 	bl	8026744 <iprintf>
 801ef92:	e726      	b.n	801ede2 <tcp_input+0xe>
 801ef94:	2002e4e8 	.word	0x2002e4e8
 801ef98:	2001f300 	.word	0x2001f300
 801ef9c:	2002e4f4 	.word	0x2002e4f4
 801efa0:	2002e4ec 	.word	0x2002e4ec
 801efa4:	08045e00 	.word	0x08045e00
 801efa8:	08046024 	.word	0x08046024
 801efac:	0802b43c 	.word	0x0802b43c
 801efb0:	2002e4dc 	.word	0x2002e4dc
 801efb4:	2002e4b8 	.word	0x2002e4b8
 801efb8:	2002e4bc 	.word	0x2002e4bc
 801efbc:	2002e4f6 	.word	0x2002e4f6
 801efc0:	2002e49c 	.word	0x2002e49c
 801efc4:	08045ff0 	.word	0x08045ff0
 801efc8:	2002e4f0 	.word	0x2002e4f0
 801efcc:	08046044 	.word	0x08046044
    if (pcb->remote_port == tcphdr->src &&
 801efd0:	8852      	ldrh	r2, [r2, #2]
 801efd2:	8ae9      	ldrh	r1, [r5, #22]
 801efd4:	4291      	cmp	r1, r2
 801efd6:	d1c5      	bne.n	801ef64 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801efd8:	6869      	ldr	r1, [r5, #4]
 801efda:	693a      	ldr	r2, [r7, #16]
 801efdc:	4291      	cmp	r1, r2
 801efde:	d1c1      	bne.n	801ef64 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801efe0:	6829      	ldr	r1, [r5, #0]
 801efe2:	697a      	ldr	r2, [r7, #20]
 801efe4:	4291      	cmp	r1, r2
 801efe6:	d1bd      	bne.n	801ef64 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801efe8:	68eb      	ldr	r3, [r5, #12]
 801efea:	42ab      	cmp	r3, r5
 801efec:	f000 846e 	beq.w	801f8cc <tcp_input+0xaf8>
      if (prev != NULL) {
 801eff0:	f1b8 0f00 	cmp.w	r8, #0
 801eff4:	d009      	beq.n	801f00a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801eff6:	4a75      	ldr	r2, [pc, #468]	; (801f1cc <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801eff8:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801effc:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801effe:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801f000:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f002:	68eb      	ldr	r3, [r5, #12]
 801f004:	42ab      	cmp	r3, r5
 801f006:	f000 8447 	beq.w	801f898 <tcp_input+0xac4>
    inseg.next = NULL;
 801f00a:	2300      	movs	r3, #0
 801f00c:	4f70      	ldr	r7, [pc, #448]	; (801f1d0 <tcp_input+0x3fc>)
    recv_data = NULL;
 801f00e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801f1f8 <tcp_input+0x424>
    recv_flags = 0;
 801f012:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801f1fc <tcp_input+0x428>
    recv_acked = 0;
 801f016:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801f200 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801f01a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801f01c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801f01e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801f022:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801f026:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801f02a:	4b6a      	ldr	r3, [pc, #424]	; (801f1d4 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801f02c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801f02e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801f030:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801f032:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801f034:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801f036:	071a      	lsls	r2, r3, #28
 801f038:	d503      	bpl.n	801f042 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801f03a:	7b62      	ldrb	r2, [r4, #13]
 801f03c:	f042 0201 	orr.w	r2, r2, #1
 801f040:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801f042:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801f044:	b172      	cbz	r2, 801f064 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801f046:	4628      	mov	r0, r5
 801f048:	f7fe ff78 	bl	801df3c <tcp_process_refused_data>
 801f04c:	300d      	adds	r0, #13
 801f04e:	f000 8296 	beq.w	801f57e <tcp_input+0x7aa>
 801f052:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f054:	b123      	cbz	r3, 801f060 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801f056:	9b05      	ldr	r3, [sp, #20]
 801f058:	881b      	ldrh	r3, [r3, #0]
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	f040 828f 	bne.w	801f57e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801f060:	4b5c      	ldr	r3, [pc, #368]	; (801f1d4 <tcp_input+0x400>)
 801f062:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801f064:	4c5c      	ldr	r4, [pc, #368]	; (801f1d8 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801f066:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801f068:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801f06a:	f140 8163 	bpl.w	801f334 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801f06e:	7d29      	ldrb	r1, [r5, #20]
 801f070:	2902      	cmp	r1, #2
 801f072:	f000 8350 	beq.w	801f716 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801f076:	4b59      	ldr	r3, [pc, #356]	; (801f1dc <tcp_input+0x408>)
 801f078:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	429a      	cmp	r2, r3
 801f07e:	f000 844a 	beq.w	801f916 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f082:	1a9b      	subs	r3, r3, r2
 801f084:	d404      	bmi.n	801f090 <tcp_input+0x2bc>
 801f086:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801f088:	1a9b      	subs	r3, r3, r2
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	f340 833e 	ble.w	801f70c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801f090:	f89a 3000 	ldrb.w	r3, [sl]
 801f094:	0718      	lsls	r0, r3, #28
 801f096:	f140 8278 	bpl.w	801f58a <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801f09a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801f09e:	b11b      	cbz	r3, 801f0a8 <tcp_input+0x2d4>
 801f0a0:	f06f 010d 	mvn.w	r1, #13
 801f0a4:	6928      	ldr	r0, [r5, #16]
 801f0a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f0a8:	4848      	ldr	r0, [pc, #288]	; (801f1cc <tcp_input+0x3f8>)
 801f0aa:	4629      	mov	r1, r5
 801f0ac:	f7fe fbc4 	bl	801d838 <tcp_pcb_remove>
        tcp_free(pcb);
 801f0b0:	4628      	mov	r0, r5
 801f0b2:	f7fd fdbd 	bl	801cc30 <tcp_free>
    tcp_input_pcb = NULL;
 801f0b6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801f0b8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801f0ba:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801f0bc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801f0c0:	b110      	cbz	r0, 801f0c8 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801f0c2:	f7fd fa75 	bl	801c5b0 <pbuf_free>
      inseg.p = NULL;
 801f0c6:	607d      	str	r5, [r7, #4]
}
 801f0c8:	b009      	add	sp, #36	; 0x24
 801f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f0ce:	22fd      	movs	r2, #253	; 0xfd
 801f0d0:	4943      	ldr	r1, [pc, #268]	; (801f1e0 <tcp_input+0x40c>)
 801f0d2:	4650      	mov	r0, sl
 801f0d4:	f007 fb36 	bl	8026744 <iprintf>
 801f0d8:	4b42      	ldr	r3, [pc, #264]	; (801f1e4 <tcp_input+0x410>)
 801f0da:	e735      	b.n	801ef48 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801f0dc:	22fc      	movs	r2, #252	; 0xfc
 801f0de:	4942      	ldr	r1, [pc, #264]	; (801f1e8 <tcp_input+0x414>)
 801f0e0:	4650      	mov	r0, sl
 801f0e2:	f007 fb2f 	bl	8026744 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f0e6:	7d2a      	ldrb	r2, [r5, #20]
 801f0e8:	4b3e      	ldr	r3, [pc, #248]	; (801f1e4 <tcp_input+0x410>)
 801f0ea:	e72a      	b.n	801ef42 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f0ec:	4b3f      	ldr	r3, [pc, #252]	; (801f1ec <tcp_input+0x418>)
 801f0ee:	681d      	ldr	r5, [r3, #0]
 801f0f0:	2d00      	cmp	r5, #0
 801f0f2:	d05b      	beq.n	801f1ac <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f0f4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801f1e4 <tcp_input+0x410>
 801f0f8:	f8df b108 	ldr.w	fp, [pc, #264]	; 801f204 <tcp_input+0x430>
 801f0fc:	f8df a108 	ldr.w	sl, [pc, #264]	; 801f208 <tcp_input+0x434>
 801f100:	e002      	b.n	801f108 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f102:	68ed      	ldr	r5, [r5, #12]
 801f104:	2d00      	cmp	r5, #0
 801f106:	d051      	beq.n	801f1ac <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f108:	7d2b      	ldrb	r3, [r5, #20]
 801f10a:	2b0a      	cmp	r3, #10
 801f10c:	4643      	mov	r3, r8
 801f10e:	d005      	beq.n	801f11c <tcp_input+0x348>
 801f110:	f240 121f 	movw	r2, #287	; 0x11f
 801f114:	4659      	mov	r1, fp
 801f116:	4650      	mov	r0, sl
 801f118:	f007 fb14 	bl	8026744 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f11c:	7a2a      	ldrb	r2, [r5, #8]
 801f11e:	b132      	cbz	r2, 801f12e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801f126:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f128:	b2db      	uxtb	r3, r3
 801f12a:	429a      	cmp	r2, r3
 801f12c:	d1e9      	bne.n	801f102 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801f12e:	6832      	ldr	r2, [r6, #0]
 801f130:	8b2b      	ldrh	r3, [r5, #24]
 801f132:	8811      	ldrh	r1, [r2, #0]
 801f134:	428b      	cmp	r3, r1
 801f136:	d1e4      	bne.n	801f102 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f138:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801f13a:	8ae8      	ldrh	r0, [r5, #22]
 801f13c:	4290      	cmp	r0, r2
 801f13e:	d1e0      	bne.n	801f102 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f140:	6869      	ldr	r1, [r5, #4]
 801f142:	693a      	ldr	r2, [r7, #16]
 801f144:	4291      	cmp	r1, r2
 801f146:	d1dc      	bne.n	801f102 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801f148:	6829      	ldr	r1, [r5, #0]
 801f14a:	697a      	ldr	r2, [r7, #20]
 801f14c:	4291      	cmp	r1, r2
 801f14e:	d1d8      	bne.n	801f102 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801f150:	4a20      	ldr	r2, [pc, #128]	; (801f1d4 <tcp_input+0x400>)
 801f152:	7812      	ldrb	r2, [r2, #0]
 801f154:	0757      	lsls	r7, r2, #29
 801f156:	f53f ae4a 	bmi.w	801edee <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801f15a:	0796      	lsls	r6, r2, #30
 801f15c:	f140 8395 	bpl.w	801f88a <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f160:	4a1e      	ldr	r2, [pc, #120]	; (801f1dc <tcp_input+0x408>)
 801f162:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801f164:	6812      	ldr	r2, [r2, #0]
 801f166:	1a51      	subs	r1, r2, r1
 801f168:	d404      	bmi.n	801f174 <tcp_input+0x3a0>
 801f16a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801f16c:	1b89      	subs	r1, r1, r6
 801f16e:	2900      	cmp	r1, #0
 801f170:	f340 83ba 	ble.w	801f8e8 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801f174:	9b05      	ldr	r3, [sp, #20]
 801f176:	881b      	ldrh	r3, [r3, #0]
 801f178:	2b00      	cmp	r3, #0
 801f17a:	f43f ae38 	beq.w	801edee <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801f17e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801f180:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801f182:	f043 0302 	orr.w	r3, r3, #2
 801f186:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801f188:	f001 fbc4 	bl	8020914 <tcp_output>
        pbuf_free(p);
 801f18c:	e62f      	b.n	801edee <tcp_input+0x1a>
    tcplen++;
 801f18e:	1c5a      	adds	r2, r3, #1
 801f190:	4917      	ldr	r1, [pc, #92]	; (801f1f0 <tcp_input+0x41c>)
 801f192:	b292      	uxth	r2, r2
 801f194:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801f196:	4293      	cmp	r3, r2
    tcplen++;
 801f198:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801f19a:	f67f aec2 	bls.w	801ef22 <tcp_input+0x14e>
 801f19e:	e626      	b.n	801edee <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801f1a0:	4a14      	ldr	r2, [pc, #80]	; (801f1f4 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f1a2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801f1a4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f1a6:	f7fd f977 	bl	801c498 <pbuf_remove_header>
 801f1aa:	e68e      	b.n	801eeca <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f1ac:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801f20c <tcp_input+0x438>
 801f1b0:	f8da 8000 	ldr.w	r8, [sl]
 801f1b4:	f1b8 0f00 	cmp.w	r8, #0
 801f1b8:	f000 8237 	beq.w	801f62a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f1bc:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f1c0:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801f1c2:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801f1c4:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f1c6:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801f1ca:	e027      	b.n	801f21c <tcp_input+0x448>
 801f1cc:	2002e49c 	.word	0x2002e49c
 801f1d0:	2002e4c0 	.word	0x2002e4c0
 801f1d4:	2002e4bc 	.word	0x2002e4bc
 801f1d8:	2002e4e0 	.word	0x2002e4e0
 801f1dc:	2002e4dc 	.word	0x2002e4dc
 801f1e0:	08046098 	.word	0x08046098
 801f1e4:	08045e00 	.word	0x08045e00
 801f1e8:	0804606c 	.word	0x0804606c
 801f1ec:	2002e4b4 	.word	0x2002e4b4
 801f1f0:	2002e4f6 	.word	0x2002e4f6
 801f1f4:	2002e4ec 	.word	0x2002e4ec
 801f1f8:	2002e4d4 	.word	0x2002e4d4
 801f1fc:	2002e4d8 	.word	0x2002e4d8
 801f200:	2002e4d0 	.word	0x2002e4d0
 801f204:	08046118 	.word	0x08046118
 801f208:	0802b43c 	.word	0x0802b43c
 801f20c:	2002e4a8 	.word	0x2002e4a8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f210:	68eb      	ldr	r3, [r5, #12]
 801f212:	4629      	mov	r1, r5
 801f214:	461d      	mov	r5, r3
 801f216:	2b00      	cmp	r3, #0
 801f218:	f000 8208 	beq.w	801f62c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f21c:	7a2a      	ldrb	r2, [r5, #8]
 801f21e:	b12a      	cbz	r2, 801f22c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f220:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801f224:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f226:	b2db      	uxtb	r3, r3
 801f228:	429a      	cmp	r2, r3
 801f22a:	d1f1      	bne.n	801f210 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801f22c:	8aea      	ldrh	r2, [r5, #22]
 801f22e:	8843      	ldrh	r3, [r0, #2]
 801f230:	429a      	cmp	r2, r3
 801f232:	d1ed      	bne.n	801f210 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f234:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801f236:	b10a      	cbz	r2, 801f23c <tcp_input+0x468>
 801f238:	4572      	cmp	r2, lr
 801f23a:	d1e9      	bne.n	801f210 <tcp_input+0x43c>
      if (prev != NULL) {
 801f23c:	b129      	cbz	r1, 801f24a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f23e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801f240:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f244:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801f246:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801f24a:	4a9d      	ldr	r2, [pc, #628]	; (801f4c0 <tcp_input+0x6ec>)
 801f24c:	7812      	ldrb	r2, [r2, #0]
 801f24e:	0751      	lsls	r1, r2, #29
 801f250:	f53f adcd 	bmi.w	801edee <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801f254:	f012 0810 	ands.w	r8, r2, #16
 801f258:	f040 8273 	bne.w	801f742 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801f25c:	0791      	lsls	r1, r2, #30
 801f25e:	f57f adc6 	bpl.w	801edee <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801f262:	7d68      	ldrb	r0, [r5, #21]
 801f264:	f7fe fc90 	bl	801db88 <tcp_alloc>
    if (npcb == NULL) {
 801f268:	4681      	mov	r9, r0
 801f26a:	2800      	cmp	r0, #0
 801f26c:	f000 82ce 	beq.w	801f80c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801f270:	4b94      	ldr	r3, [pc, #592]	; (801f4c4 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801f272:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801f274:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801f276:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801f278:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801f27a:	7849      	ldrb	r1, [r1, #1]
 801f27c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801f280:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801f282:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f284:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f286:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801f288:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f28a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f28c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801f28e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f290:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801f292:	2303      	movs	r3, #3
 801f294:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801f296:	f7fe fee7 	bl	801e068 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f29a:	4b8a      	ldr	r3, [pc, #552]	; (801f4c4 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801f29c:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2a0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801f2a2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2a6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801f2a8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801f2ac:	4a86      	ldr	r2, [pc, #536]	; (801f4c8 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801f2ae:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801f2b2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801f2b4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801f2b8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f2bc:	7a6b      	ldrb	r3, [r5, #9]
 801f2be:	f003 030c 	and.w	r3, r3, #12
 801f2c2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801f2c6:	7a2b      	ldrb	r3, [r5, #8]
 801f2c8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801f2cc:	6813      	ldr	r3, [r2, #0]
 801f2ce:	f8c2 9000 	str.w	r9, [r2]
 801f2d2:	f8c9 300c 	str.w	r3, [r9, #12]
 801f2d6:	f001 fe49 	bl	8020f6c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801f2da:	4b7c      	ldr	r3, [pc, #496]	; (801f4cc <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801f2dc:	4a7c      	ldr	r2, [pc, #496]	; (801f4d0 <tcp_input+0x6fc>)
 801f2de:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801f2e0:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801f2e2:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801f2e4:	b12b      	cbz	r3, 801f2f2 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f2e6:	4b7b      	ldr	r3, [pc, #492]	; (801f4d4 <tcp_input+0x700>)
 801f2e8:	4648      	mov	r0, r9
 801f2ea:	f8a3 8000 	strh.w	r8, [r3]
 801f2ee:	f7ff fcd1 	bl	801ec94 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801f2f2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f2f4:	f109 0204 	add.w	r2, r9, #4
 801f2f8:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801f2fc:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f2fe:	4610      	mov	r0, r2
 801f300:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801f302:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f306:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f30a:	f004 fd4d 	bl	8023da8 <ip4_route>
 801f30e:	9a05      	ldr	r2, [sp, #20]
 801f310:	4601      	mov	r1, r0
 801f312:	4628      	mov	r0, r5
 801f314:	f7fe fec4 	bl	801e0a0 <tcp_eff_send_mss_netif>
 801f318:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f31a:	2112      	movs	r1, #18
 801f31c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f31e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f322:	f001 f8db 	bl	80204dc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801f326:	2800      	cmp	r0, #0
 801f328:	f040 82ca 	bne.w	801f8c0 <tcp_input+0xaec>
    tcp_output(npcb);
 801f32c:	4648      	mov	r0, r9
 801f32e:	f001 faf1 	bl	8020914 <tcp_output>
 801f332:	e55c      	b.n	801edee <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f334:	f013 0102 	ands.w	r1, r3, #2
 801f338:	d004      	beq.n	801f344 <tcp_input+0x570>
 801f33a:	7d2a      	ldrb	r2, [r5, #20]
 801f33c:	3a02      	subs	r2, #2
 801f33e:	2a01      	cmp	r2, #1
 801f340:	f200 81e4 	bhi.w	801f70c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f344:	8b6a      	ldrh	r2, [r5, #26]
 801f346:	06d0      	lsls	r0, r2, #27
 801f348:	d402      	bmi.n	801f350 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801f34a:	4a63      	ldr	r2, [pc, #396]	; (801f4d8 <tcp_input+0x704>)
 801f34c:	6812      	ldr	r2, [r2, #0]
 801f34e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801f350:	4a5e      	ldr	r2, [pc, #376]	; (801f4cc <tcp_input+0x6f8>)
 801f352:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801f354:	2200      	movs	r2, #0
 801f356:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801f35a:	b140      	cbz	r0, 801f36e <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f35c:	485d      	ldr	r0, [pc, #372]	; (801f4d4 <tcp_input+0x700>)
 801f35e:	8002      	strh	r2, [r0, #0]
 801f360:	4628      	mov	r0, r5
 801f362:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801f366:	f7ff fc95 	bl	801ec94 <tcp_parseopt.part.0>
 801f36a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801f36e:	7d2a      	ldrb	r2, [r5, #20]
 801f370:	3a02      	subs	r2, #2
 801f372:	2a07      	cmp	r2, #7
 801f374:	f63f ae8c 	bhi.w	801f090 <tcp_input+0x2bc>
 801f378:	e8df f002 	tbb	[pc, r2]
 801f37c:	89041331 	.word	0x89041331
 801f380:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801f384:	4628      	mov	r0, r5
 801f386:	f7fe ffdd 	bl	801e344 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f38a:	f89a 3000 	ldrb.w	r3, [sl]
 801f38e:	069e      	lsls	r6, r3, #26
 801f390:	f57f ae7e 	bpl.w	801f090 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f394:	8b6b      	ldrh	r3, [r5, #26]
 801f396:	f043 0302 	orr.w	r3, r3, #2
 801f39a:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801f39c:	2307      	movs	r3, #7
 801f39e:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f3a0:	e676      	b.n	801f090 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801f3a2:	06da      	lsls	r2, r3, #27
 801f3a4:	f140 821c 	bpl.w	801f7e0 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f3a8:	4b4c      	ldr	r3, [pc, #304]	; (801f4dc <tcp_input+0x708>)
 801f3aa:	6819      	ldr	r1, [r3, #0]
 801f3ac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f3ae:	43db      	mvns	r3, r3
 801f3b0:	42cb      	cmn	r3, r1
 801f3b2:	d404      	bmi.n	801f3be <tcp_input+0x5ea>
 801f3b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f3b6:	1acb      	subs	r3, r1, r3
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	f340 823a 	ble.w	801f832 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3be:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3c0:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3c2:	8810      	ldrh	r0, [r2, #0]
 801f3c4:	4a3f      	ldr	r2, [pc, #252]	; (801f4c4 <tcp_input+0x6f0>)
 801f3c6:	6812      	ldr	r2, [r2, #0]
 801f3c8:	4402      	add	r2, r0
 801f3ca:	8818      	ldrh	r0, [r3, #0]
 801f3cc:	9002      	str	r0, [sp, #8]
 801f3ce:	4628      	mov	r0, r5
 801f3d0:	885b      	ldrh	r3, [r3, #2]
 801f3d2:	e9cd 9300 	strd	r9, r3, [sp]
 801f3d6:	4b42      	ldr	r3, [pc, #264]	; (801f4e0 <tcp_input+0x70c>)
 801f3d8:	f001 fa22 	bl	8020820 <tcp_rst>
    if (err != ERR_ABRT) {
 801f3dc:	e658      	b.n	801f090 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f3de:	f003 0212 	and.w	r2, r3, #18
 801f3e2:	2a12      	cmp	r2, #18
 801f3e4:	f000 813b 	beq.w	801f65e <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801f3e8:	06d9      	lsls	r1, r3, #27
 801f3ea:	f57f ae51 	bpl.w	801f090 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3ee:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3f0:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3f2:	8811      	ldrh	r1, [r2, #0]
 801f3f4:	4a33      	ldr	r2, [pc, #204]	; (801f4c4 <tcp_input+0x6f0>)
 801f3f6:	8818      	ldrh	r0, [r3, #0]
 801f3f8:	6812      	ldr	r2, [r2, #0]
 801f3fa:	440a      	add	r2, r1
 801f3fc:	4937      	ldr	r1, [pc, #220]	; (801f4dc <tcp_input+0x708>)
 801f3fe:	6809      	ldr	r1, [r1, #0]
 801f400:	9002      	str	r0, [sp, #8]
 801f402:	4628      	mov	r0, r5
 801f404:	885b      	ldrh	r3, [r3, #2]
 801f406:	e9cd 9300 	strd	r9, r3, [sp]
 801f40a:	4b35      	ldr	r3, [pc, #212]	; (801f4e0 <tcp_input+0x70c>)
 801f40c:	f001 fa08 	bl	8020820 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f410:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801f414:	2b05      	cmp	r3, #5
 801f416:	f63f ae3b 	bhi.w	801f090 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801f41a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801f41c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801f41e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801f420:	f001 fc80 	bl	8020d24 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801f424:	e634      	b.n	801f090 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f426:	4628      	mov	r0, r5
 801f428:	f7fe ff8c 	bl	801e344 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f42c:	4b24      	ldr	r3, [pc, #144]	; (801f4c0 <tcp_input+0x6ec>)
 801f42e:	781b      	ldrb	r3, [r3, #0]
 801f430:	06de      	lsls	r6, r3, #27
 801f432:	f57f ae2d 	bpl.w	801f090 <tcp_input+0x2bc>
 801f436:	4b29      	ldr	r3, [pc, #164]	; (801f4dc <tcp_input+0x708>)
 801f438:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	429a      	cmp	r2, r3
 801f43e:	f47f ae27 	bne.w	801f090 <tcp_input+0x2bc>
 801f442:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f444:	2b00      	cmp	r3, #0
 801f446:	f47f ae23 	bne.w	801f090 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801f44a:	f89a 3000 	ldrb.w	r3, [sl]
 801f44e:	f043 0310 	orr.w	r3, r3, #16
 801f452:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801f456:	e61b      	b.n	801f090 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f458:	4628      	mov	r0, r5
 801f45a:	f7fe ff73 	bl	801e344 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f45e:	f89a 3000 	ldrb.w	r3, [sl]
 801f462:	069a      	lsls	r2, r3, #26
 801f464:	f57f ae14 	bpl.w	801f090 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f468:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f46a:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801f46c:	f043 0302 	orr.w	r3, r3, #2
 801f470:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f472:	f7fd fee1 	bl	801d238 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f476:	4b14      	ldr	r3, [pc, #80]	; (801f4c8 <tcp_input+0x6f4>)
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	42ab      	cmp	r3, r5
 801f47c:	d061      	beq.n	801f542 <tcp_input+0x76e>
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d062      	beq.n	801f548 <tcp_input+0x774>
 801f482:	68da      	ldr	r2, [r3, #12]
 801f484:	42aa      	cmp	r2, r5
 801f486:	f000 8210 	beq.w	801f8aa <tcp_input+0xad6>
 801f48a:	4613      	mov	r3, r2
 801f48c:	e7f7      	b.n	801f47e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801f48e:	4628      	mov	r0, r5
 801f490:	f7fe ff58 	bl	801e344 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f494:	f89a 3000 	ldrb.w	r3, [sl]
 801f498:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f49c:	4b08      	ldr	r3, [pc, #32]	; (801f4c0 <tcp_input+0x6ec>)
 801f49e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801f4a0:	f000 818e 	beq.w	801f7c0 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f4a4:	06d8      	lsls	r0, r3, #27
 801f4a6:	d504      	bpl.n	801f4b2 <tcp_input+0x6de>
 801f4a8:	4b0c      	ldr	r3, [pc, #48]	; (801f4dc <tcp_input+0x708>)
 801f4aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	429a      	cmp	r2, r3
 801f4b0:	d038      	beq.n	801f524 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801f4b2:	8b6b      	ldrh	r3, [r5, #26]
 801f4b4:	f043 0302 	orr.w	r3, r3, #2
 801f4b8:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801f4ba:	2308      	movs	r3, #8
 801f4bc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f4be:	e5e7      	b.n	801f090 <tcp_input+0x2bc>
 801f4c0:	2002e4bc 	.word	0x2002e4bc
 801f4c4:	2002e4dc 	.word	0x2002e4dc
 801f4c8:	2002e49c 	.word	0x2002e49c
 801f4cc:	2002e4f4 	.word	0x2002e4f4
 801f4d0:	2002e4a0 	.word	0x2002e4a0
 801f4d4:	2002e4e4 	.word	0x2002e4e4
 801f4d8:	2002e4ac 	.word	0x2002e4ac
 801f4dc:	2002e4b8 	.word	0x2002e4b8
 801f4e0:	2001f314 	.word	0x2001f314
      tcp_receive(pcb);
 801f4e4:	4628      	mov	r0, r5
 801f4e6:	f7fe ff2d 	bl	801e344 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f4ea:	4ba8      	ldr	r3, [pc, #672]	; (801f78c <tcp_input+0x9b8>)
 801f4ec:	781b      	ldrb	r3, [r3, #0]
 801f4ee:	06db      	lsls	r3, r3, #27
 801f4f0:	f57f adce 	bpl.w	801f090 <tcp_input+0x2bc>
 801f4f4:	4ba6      	ldr	r3, [pc, #664]	; (801f790 <tcp_input+0x9bc>)
 801f4f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	f47f adc8 	bne.w	801f090 <tcp_input+0x2bc>
 801f500:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f502:	2b00      	cmp	r3, #0
 801f504:	f47f adc4 	bne.w	801f090 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801f508:	4628      	mov	r0, r5
 801f50a:	f7fd fe95 	bl	801d238 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f50e:	4ba1      	ldr	r3, [pc, #644]	; (801f794 <tcp_input+0x9c0>)
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	42ab      	cmp	r3, r5
 801f514:	d015      	beq.n	801f542 <tcp_input+0x76e>
 801f516:	b1bb      	cbz	r3, 801f548 <tcp_input+0x774>
 801f518:	68da      	ldr	r2, [r3, #12]
 801f51a:	42aa      	cmp	r2, r5
 801f51c:	f000 81c5 	beq.w	801f8aa <tcp_input+0xad6>
 801f520:	4613      	mov	r3, r2
 801f522:	e7f8      	b.n	801f516 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f524:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f526:	2b00      	cmp	r3, #0
 801f528:	d1c3      	bne.n	801f4b2 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801f52a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f52c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801f52e:	f043 0302 	orr.w	r3, r3, #2
 801f532:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f534:	f7fd fe80 	bl	801d238 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f538:	4b96      	ldr	r3, [pc, #600]	; (801f794 <tcp_input+0x9c0>)
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	42ab      	cmp	r3, r5
 801f53e:	f040 81b7 	bne.w	801f8b0 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801f542:	68eb      	ldr	r3, [r5, #12]
 801f544:	4a93      	ldr	r2, [pc, #588]	; (801f794 <tcp_input+0x9c0>)
 801f546:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f548:	4b93      	ldr	r3, [pc, #588]	; (801f798 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801f54a:	220a      	movs	r2, #10
 801f54c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f54e:	681a      	ldr	r2, [r3, #0]
 801f550:	601d      	str	r5, [r3, #0]
 801f552:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801f554:	2201      	movs	r2, #1
 801f556:	4b91      	ldr	r3, [pc, #580]	; (801f79c <tcp_input+0x9c8>)
 801f558:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f55a:	f001 fd07 	bl	8020f6c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801f55e:	e597      	b.n	801f090 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801f560:	4b8f      	ldr	r3, [pc, #572]	; (801f7a0 <tcp_input+0x9cc>)
 801f562:	22c2      	movs	r2, #194	; 0xc2
 801f564:	498f      	ldr	r1, [pc, #572]	; (801f7a4 <tcp_input+0x9d0>)
 801f566:	4890      	ldr	r0, [pc, #576]	; (801f7a8 <tcp_input+0x9d4>)
 801f568:	f007 f8ec 	bl	8026744 <iprintf>
 801f56c:	e47d      	b.n	801ee6a <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801f56e:	4b8c      	ldr	r3, [pc, #560]	; (801f7a0 <tcp_input+0x9cc>)
 801f570:	22df      	movs	r2, #223	; 0xdf
 801f572:	498e      	ldr	r1, [pc, #568]	; (801f7ac <tcp_input+0x9d8>)
 801f574:	488c      	ldr	r0, [pc, #560]	; (801f7a8 <tcp_input+0x9d4>)
 801f576:	f007 f8e5 	bl	8026744 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801f57a:	8923      	ldrh	r3, [r4, #8]
 801f57c:	e49b      	b.n	801eeb6 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801f57e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801f580:	2b00      	cmp	r3, #0
 801f582:	f000 80d9 	beq.w	801f738 <tcp_input+0x964>
 801f586:	4c8a      	ldr	r4, [pc, #552]	; (801f7b0 <tcp_input+0x9dc>)
 801f588:	e595      	b.n	801f0b6 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801f58a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f58e:	b15a      	cbz	r2, 801f5a8 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801f590:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801f594:	b12b      	cbz	r3, 801f5a2 <tcp_input+0x7ce>
 801f596:	4629      	mov	r1, r5
 801f598:	6928      	ldr	r0, [r5, #16]
 801f59a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801f59c:	300d      	adds	r0, #13
 801f59e:	f43f ad8a 	beq.w	801f0b6 <tcp_input+0x2e2>
          recv_acked = 0;
 801f5a2:	2300      	movs	r3, #0
 801f5a4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801f5a8:	4628      	mov	r0, r5
 801f5aa:	f7fe fe2b 	bl	801e204 <tcp_input_delayed_close>
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	f47f ad81 	bne.w	801f0b6 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801f5b4:	f8d8 3000 	ldr.w	r3, [r8]
 801f5b8:	b1fb      	cbz	r3, 801f5fa <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801f5ba:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f5bc:	b133      	cbz	r3, 801f5cc <tcp_input+0x7f8>
 801f5be:	4b78      	ldr	r3, [pc, #480]	; (801f7a0 <tcp_input+0x9cc>)
 801f5c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801f5c4:	497b      	ldr	r1, [pc, #492]	; (801f7b4 <tcp_input+0x9e0>)
 801f5c6:	4878      	ldr	r0, [pc, #480]	; (801f7a8 <tcp_input+0x9d4>)
 801f5c8:	f007 f8bc 	bl	8026744 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801f5cc:	8b6b      	ldrh	r3, [r5, #26]
 801f5ce:	f013 0310 	ands.w	r3, r3, #16
 801f5d2:	f040 8113 	bne.w	801f7fc <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f5d6:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f5da:	2e00      	cmp	r6, #0
 801f5dc:	f000 8121 	beq.w	801f822 <tcp_input+0xa4e>
 801f5e0:	f8d8 2000 	ldr.w	r2, [r8]
 801f5e4:	4629      	mov	r1, r5
 801f5e6:	6928      	ldr	r0, [r5, #16]
 801f5e8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801f5ea:	f110 0f0d 	cmn.w	r0, #13
 801f5ee:	f43f ad62 	beq.w	801f0b6 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801f5f2:	b110      	cbz	r0, 801f5fa <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801f5f4:	f8d8 3000 	ldr.w	r3, [r8]
 801f5f8:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801f5fa:	f89a 3000 	ldrb.w	r3, [sl]
 801f5fe:	0699      	lsls	r1, r3, #26
 801f600:	d507      	bpl.n	801f612 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801f602:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f604:	2b00      	cmp	r3, #0
 801f606:	f000 80ad 	beq.w	801f764 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f60a:	7b5a      	ldrb	r2, [r3, #13]
 801f60c:	f042 0220 	orr.w	r2, r2, #32
 801f610:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801f612:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801f614:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801f616:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f618:	f7fe fdf4 	bl	801e204 <tcp_input_delayed_close>
 801f61c:	2800      	cmp	r0, #0
 801f61e:	f47f ad4a 	bne.w	801f0b6 <tcp_input+0x2e2>
        tcp_output(pcb);
 801f622:	4628      	mov	r0, r5
 801f624:	f001 f976 	bl	8020914 <tcp_output>
 801f628:	e545      	b.n	801f0b6 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f62a:	6830      	ldr	r0, [r6, #0]
 801f62c:	8980      	ldrh	r0, [r0, #12]
 801f62e:	f7fa ff83 	bl	801a538 <lwip_htons>
 801f632:	f010 0004 	ands.w	r0, r0, #4
 801f636:	f47f abda 	bne.w	801edee <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f63a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f63c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f63e:	8811      	ldrh	r1, [r2, #0]
 801f640:	4a5d      	ldr	r2, [pc, #372]	; (801f7b8 <tcp_input+0x9e4>)
 801f642:	881d      	ldrh	r5, [r3, #0]
 801f644:	6812      	ldr	r2, [r2, #0]
 801f646:	440a      	add	r2, r1
 801f648:	4951      	ldr	r1, [pc, #324]	; (801f790 <tcp_input+0x9bc>)
 801f64a:	6809      	ldr	r1, [r1, #0]
 801f64c:	9502      	str	r5, [sp, #8]
 801f64e:	885b      	ldrh	r3, [r3, #2]
 801f650:	e9cd 9300 	strd	r9, r3, [sp]
 801f654:	4b59      	ldr	r3, [pc, #356]	; (801f7bc <tcp_input+0x9e8>)
 801f656:	f001 f8e3 	bl	8020820 <tcp_rst>
 801f65a:	f7ff bbc8 	b.w	801edee <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801f65e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801f660:	494b      	ldr	r1, [pc, #300]	; (801f790 <tcp_input+0x9bc>)
 801f662:	3201      	adds	r2, #1
 801f664:	6809      	ldr	r1, [r1, #0]
 801f666:	428a      	cmp	r2, r1
 801f668:	f47f aebe 	bne.w	801f3e8 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801f66c:	4b52      	ldr	r3, [pc, #328]	; (801f7b8 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801f66e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801f670:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801f672:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f674:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801f676:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f678:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f67a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801f67c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f67e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801f680:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f682:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f684:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801f686:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801f688:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801f68c:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f68e:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f692:	9205      	str	r2, [sp, #20]
 801f694:	f004 fb88 	bl	8023da8 <ip4_route>
 801f698:	9a05      	ldr	r2, [sp, #20]
 801f69a:	4601      	mov	r1, r0
 801f69c:	4630      	mov	r0, r6
 801f69e:	f7fe fcff 	bl	801e0a0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f6a2:	f241 131c 	movw	r3, #4380	; 0x111c
 801f6a6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f6a8:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f6aa:	0081      	lsls	r1, r0, #2
 801f6ac:	429a      	cmp	r2, r3
 801f6ae:	4616      	mov	r6, r2
 801f6b0:	bf38      	it	cc
 801f6b2:	461e      	movcc	r6, r3
 801f6b4:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801f6b8:	f240 814d 	bls.w	801f956 <tcp_input+0xb82>
 801f6bc:	b28b      	uxth	r3, r1
 801f6be:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f6c2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	f000 813d 	beq.w	801f946 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801f6cc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801f6d0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801f6d2:	3b01      	subs	r3, #1
 801f6d4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801f6d8:	2e00      	cmp	r6, #0
 801f6da:	f000 812f 	beq.w	801f93c <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801f6de:	6833      	ldr	r3, [r6, #0]
 801f6e0:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801f6e2:	4630      	mov	r0, r6
 801f6e4:	f7fd fce0 	bl	801d0a8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801f6e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	f000 8122 	beq.w	801f934 <tcp_input+0xb60>
          pcb->rtime = 0;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801f6f4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f6f8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801f6fc:	b133      	cbz	r3, 801f70c <tcp_input+0x938>
 801f6fe:	2200      	movs	r2, #0
 801f700:	4629      	mov	r1, r5
 801f702:	6928      	ldr	r0, [r5, #16]
 801f704:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801f706:	300d      	adds	r0, #13
 801f708:	f43f acd5 	beq.w	801f0b6 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801f70c:	8b6b      	ldrh	r3, [r5, #26]
 801f70e:	f043 0302 	orr.w	r3, r3, #2
 801f712:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f714:	e4bc      	b.n	801f090 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801f716:	4b1e      	ldr	r3, [pc, #120]	; (801f790 <tcp_input+0x9bc>)
 801f718:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	429a      	cmp	r2, r3
 801f71e:	f47f acb7 	bne.w	801f090 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801f722:	f89a 3000 	ldrb.w	r3, [sl]
 801f726:	f043 0308 	orr.w	r3, r3, #8
 801f72a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f72e:	8b6b      	ldrh	r3, [r5, #26]
 801f730:	f023 0301 	bic.w	r3, r3, #1
 801f734:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f736:	e4ab      	b.n	801f090 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801f738:	4628      	mov	r0, r5
 801f73a:	4c1d      	ldr	r4, [pc, #116]	; (801f7b0 <tcp_input+0x9dc>)
 801f73c:	f001 f8b8 	bl	80208b0 <tcp_send_empty_ack>
 801f740:	e4b9      	b.n	801f0b6 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f742:	8802      	ldrh	r2, [r0, #0]
 801f744:	e9cd 9300 	strd	r9, r3, [sp]
 801f748:	9b05      	ldr	r3, [sp, #20]
 801f74a:	9202      	str	r2, [sp, #8]
 801f74c:	881a      	ldrh	r2, [r3, #0]
 801f74e:	4b1a      	ldr	r3, [pc, #104]	; (801f7b8 <tcp_input+0x9e4>)
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	441a      	add	r2, r3
 801f754:	4b0e      	ldr	r3, [pc, #56]	; (801f790 <tcp_input+0x9bc>)
 801f756:	4628      	mov	r0, r5
 801f758:	6819      	ldr	r1, [r3, #0]
 801f75a:	4b18      	ldr	r3, [pc, #96]	; (801f7bc <tcp_input+0x9e8>)
 801f75c:	f001 f860 	bl	8020820 <tcp_rst>
 801f760:	f7ff bb45 	b.w	801edee <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f764:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801f766:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801f76a:	d001      	beq.n	801f770 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801f76c:	3301      	adds	r3, #1
 801f76e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801f770:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f774:	2e00      	cmp	r6, #0
 801f776:	f43f af4c 	beq.w	801f612 <tcp_input+0x83e>
 801f77a:	2300      	movs	r3, #0
 801f77c:	4629      	mov	r1, r5
 801f77e:	6928      	ldr	r0, [r5, #16]
 801f780:	461a      	mov	r2, r3
 801f782:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801f784:	300d      	adds	r0, #13
 801f786:	f47f af44 	bne.w	801f612 <tcp_input+0x83e>
 801f78a:	e494      	b.n	801f0b6 <tcp_input+0x2e2>
 801f78c:	2002e4bc 	.word	0x2002e4bc
 801f790:	2002e4b8 	.word	0x2002e4b8
 801f794:	2002e49c 	.word	0x2002e49c
 801f798:	2002e4b4 	.word	0x2002e4b4
 801f79c:	2002e4a0 	.word	0x2002e4a0
 801f7a0:	08045e00 	.word	0x08045e00
 801f7a4:	08046008 	.word	0x08046008
 801f7a8:	0802b43c 	.word	0x0802b43c
 801f7ac:	08046018 	.word	0x08046018
 801f7b0:	2002e4e0 	.word	0x2002e4e0
 801f7b4:	080461b4 	.word	0x080461b4
 801f7b8:	2002e4dc 	.word	0x2002e4dc
 801f7bc:	2001f314 	.word	0x2001f314
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f7c0:	06d9      	lsls	r1, r3, #27
 801f7c2:	f57f ac65 	bpl.w	801f090 <tcp_input+0x2bc>
 801f7c6:	4b6a      	ldr	r3, [pc, #424]	; (801f970 <tcp_input+0xb9c>)
 801f7c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	429a      	cmp	r2, r3
 801f7ce:	f47f ac5f 	bne.w	801f090 <tcp_input+0x2bc>
 801f7d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	f47f ac5b 	bne.w	801f090 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801f7da:	2306      	movs	r3, #6
 801f7dc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f7de:	e457      	b.n	801f090 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f7e0:	2900      	cmp	r1, #0
 801f7e2:	f43f ac55 	beq.w	801f090 <tcp_input+0x2bc>
 801f7e6:	4b63      	ldr	r3, [pc, #396]	; (801f974 <tcp_input+0xba0>)
 801f7e8:	681a      	ldr	r2, [r3, #0]
 801f7ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f7ec:	3b01      	subs	r3, #1
 801f7ee:	4293      	cmp	r3, r2
 801f7f0:	f47f ac4e 	bne.w	801f090 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801f7f4:	4628      	mov	r0, r5
 801f7f6:	f000 ff95 	bl	8020724 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801f7fa:	e449      	b.n	801f090 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801f7fc:	f8d8 0000 	ldr.w	r0, [r8]
 801f800:	f7fc fed6 	bl	801c5b0 <pbuf_free>
            tcp_abort(pcb);
 801f804:	4628      	mov	r0, r5
 801f806:	f7fe f957 	bl	801dab8 <tcp_abort>
            goto aborted;
 801f80a:	e454      	b.n	801f0b6 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f80c:	69ab      	ldr	r3, [r5, #24]
 801f80e:	2b00      	cmp	r3, #0
 801f810:	f43f aaed 	beq.w	801edee <tcp_input+0x1a>
 801f814:	4601      	mov	r1, r0
 801f816:	f04f 32ff 	mov.w	r2, #4294967295
 801f81a:	6928      	ldr	r0, [r5, #16]
 801f81c:	4798      	blx	r3
 801f81e:	f7ff bae6 	b.w	801edee <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f822:	4633      	mov	r3, r6
 801f824:	4630      	mov	r0, r6
 801f826:	f8d8 2000 	ldr.w	r2, [r8]
 801f82a:	4629      	mov	r1, r5
 801f82c:	f7fe fb5a 	bl	801dee4 <tcp_recv_null>
 801f830:	e6db      	b.n	801f5ea <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801f832:	2304      	movs	r3, #4
 801f834:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801f836:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d0e3      	beq.n	801f804 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f83c:	699b      	ldr	r3, [r3, #24]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d05d      	beq.n	801f8fe <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f842:	2200      	movs	r2, #0
 801f844:	4629      	mov	r1, r5
 801f846:	6928      	ldr	r0, [r5, #16]
 801f848:	4798      	blx	r3
          if (err != ERR_OK) {
 801f84a:	2800      	cmp	r0, #0
 801f84c:	d153      	bne.n	801f8f6 <tcp_input+0xb22>
          tcp_receive(pcb);
 801f84e:	4628      	mov	r0, r5
 801f850:	f7fe fd78 	bl	801e344 <tcp_receive>
          if (recv_acked != 0) {
 801f854:	f8bb 3000 	ldrh.w	r3, [fp]
 801f858:	b113      	cbz	r3, 801f860 <tcp_input+0xa8c>
            recv_acked--;
 801f85a:	3b01      	subs	r3, #1
 801f85c:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f860:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801f862:	f241 131c 	movw	r3, #4380	; 0x111c
 801f866:	004a      	lsls	r2, r1, #1
 801f868:	0088      	lsls	r0, r1, #2
 801f86a:	429a      	cmp	r2, r3
 801f86c:	4616      	mov	r6, r2
 801f86e:	bf38      	it	cc
 801f870:	461e      	movcc	r6, r3
 801f872:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801f876:	d959      	bls.n	801f92c <tcp_input+0xb58>
 801f878:	b283      	uxth	r3, r0
 801f87a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801f87e:	f89a 3000 	ldrb.w	r3, [sl]
 801f882:	069b      	lsls	r3, r3, #26
 801f884:	f57f ac04 	bpl.w	801f090 <tcp_input+0x2bc>
 801f888:	e584      	b.n	801f394 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801f88a:	07d0      	lsls	r0, r2, #31
 801f88c:	f57f ac72 	bpl.w	801f174 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801f890:	4b39      	ldr	r3, [pc, #228]	; (801f978 <tcp_input+0xba4>)
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	622b      	str	r3, [r5, #32]
 801f896:	e46d      	b.n	801f174 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f898:	4b38      	ldr	r3, [pc, #224]	; (801f97c <tcp_input+0xba8>)
 801f89a:	f240 1215 	movw	r2, #277	; 0x115
 801f89e:	4938      	ldr	r1, [pc, #224]	; (801f980 <tcp_input+0xbac>)
 801f8a0:	4838      	ldr	r0, [pc, #224]	; (801f984 <tcp_input+0xbb0>)
 801f8a2:	f006 ff4f 	bl	8026744 <iprintf>
 801f8a6:	f7ff bbb0 	b.w	801f00a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801f8aa:	68ea      	ldr	r2, [r5, #12]
 801f8ac:	60da      	str	r2, [r3, #12]
 801f8ae:	e64b      	b.n	801f548 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	f43f ae49 	beq.w	801f548 <tcp_input+0x774>
 801f8b6:	68da      	ldr	r2, [r3, #12]
 801f8b8:	42aa      	cmp	r2, r5
 801f8ba:	d0f6      	beq.n	801f8aa <tcp_input+0xad6>
 801f8bc:	4613      	mov	r3, r2
 801f8be:	e7f7      	b.n	801f8b0 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	4648      	mov	r0, r9
 801f8c4:	f7fe f828 	bl	801d918 <tcp_abandon>
      return;
 801f8c8:	f7ff ba91 	b.w	801edee <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801f8cc:	4b2b      	ldr	r3, [pc, #172]	; (801f97c <tcp_input+0xba8>)
 801f8ce:	f240 120d 	movw	r2, #269	; 0x10d
 801f8d2:	492d      	ldr	r1, [pc, #180]	; (801f988 <tcp_input+0xbb4>)
 801f8d4:	482b      	ldr	r0, [pc, #172]	; (801f984 <tcp_input+0xbb0>)
 801f8d6:	f006 ff35 	bl	8026744 <iprintf>
      if (prev != NULL) {
 801f8da:	f1b8 0f00 	cmp.w	r8, #0
 801f8de:	f43f ab90 	beq.w	801f002 <tcp_input+0x22e>
 801f8e2:	68eb      	ldr	r3, [r5, #12]
 801f8e4:	f7ff bb87 	b.w	801eff6 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801f8ec:	9b05      	ldr	r3, [sp, #20]
 801f8ee:	f8cd 9000 	str.w	r9, [sp]
 801f8f2:	881b      	ldrh	r3, [r3, #0]
 801f8f4:	e72d      	b.n	801f752 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801f8f6:	300d      	adds	r0, #13
 801f8f8:	f43f abdd 	beq.w	801f0b6 <tcp_input+0x2e2>
 801f8fc:	e782      	b.n	801f804 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f8fe:	4b1f      	ldr	r3, [pc, #124]	; (801f97c <tcp_input+0xba8>)
 801f900:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801f904:	4921      	ldr	r1, [pc, #132]	; (801f98c <tcp_input+0xbb8>)
 801f906:	481f      	ldr	r0, [pc, #124]	; (801f984 <tcp_input+0xbb0>)
 801f908:	f006 ff1c 	bl	8026744 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f90c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f90e:	699b      	ldr	r3, [r3, #24]
 801f910:	2b00      	cmp	r3, #0
 801f912:	d196      	bne.n	801f842 <tcp_input+0xa6e>
 801f914:	e776      	b.n	801f804 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f916:	2900      	cmp	r1, #0
 801f918:	f47f af03 	bne.w	801f722 <tcp_input+0x94e>
 801f91c:	4b17      	ldr	r3, [pc, #92]	; (801f97c <tcp_input+0xba8>)
 801f91e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801f922:	491b      	ldr	r1, [pc, #108]	; (801f990 <tcp_input+0xbbc>)
 801f924:	4817      	ldr	r0, [pc, #92]	; (801f984 <tcp_input+0xbb0>)
 801f926:	f006 ff0d 	bl	8026744 <iprintf>
 801f92a:	e6fa      	b.n	801f722 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f92c:	429a      	cmp	r2, r3
 801f92e:	bf88      	it	hi
 801f930:	b293      	uxthhi	r3, r2
 801f932:	e7a2      	b.n	801f87a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801f934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f938:	862b      	strh	r3, [r5, #48]	; 0x30
 801f93a:	e6dd      	b.n	801f6f8 <tcp_input+0x924>
          rseg = pcb->unsent;
 801f93c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f93e:	b176      	cbz	r6, 801f95e <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801f940:	6833      	ldr	r3, [r6, #0]
 801f942:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f944:	e6cd      	b.n	801f6e2 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f946:	4b0d      	ldr	r3, [pc, #52]	; (801f97c <tcp_input+0xba8>)
 801f948:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801f94c:	4911      	ldr	r1, [pc, #68]	; (801f994 <tcp_input+0xbc0>)
 801f94e:	480d      	ldr	r0, [pc, #52]	; (801f984 <tcp_input+0xbb0>)
 801f950:	f006 fef8 	bl	8026744 <iprintf>
 801f954:	e6ba      	b.n	801f6cc <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f956:	429a      	cmp	r2, r3
 801f958:	bf88      	it	hi
 801f95a:	b293      	uxthhi	r3, r2
 801f95c:	e6af      	b.n	801f6be <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f95e:	4b07      	ldr	r3, [pc, #28]	; (801f97c <tcp_input+0xba8>)
 801f960:	f44f 725d 	mov.w	r2, #884	; 0x374
 801f964:	490c      	ldr	r1, [pc, #48]	; (801f998 <tcp_input+0xbc4>)
 801f966:	4807      	ldr	r0, [pc, #28]	; (801f984 <tcp_input+0xbb0>)
 801f968:	f006 feec 	bl	8026744 <iprintf>
 801f96c:	e7e8      	b.n	801f940 <tcp_input+0xb6c>
 801f96e:	bf00      	nop
 801f970:	2002e4b8 	.word	0x2002e4b8
 801f974:	2002e4dc 	.word	0x2002e4dc
 801f978:	2002e4ac 	.word	0x2002e4ac
 801f97c:	08045e00 	.word	0x08045e00
 801f980:	080460ec 	.word	0x080460ec
 801f984:	0802b43c 	.word	0x0802b43c
 801f988:	080460c0 	.word	0x080460c0
 801f98c:	08046194 	.word	0x08046194
 801f990:	08046148 	.word	0x08046148
 801f994:	08046168 	.word	0x08046168
 801f998:	08046180 	.word	0x08046180

0801f99c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801f99c:	4a02      	ldr	r2, [pc, #8]	; (801f9a8 <tcp_trigger_input_pcb_close+0xc>)
 801f99e:	7813      	ldrb	r3, [r2, #0]
 801f9a0:	f043 0310 	orr.w	r3, r3, #16
 801f9a4:	7013      	strb	r3, [r2, #0]
}
 801f9a6:	4770      	bx	lr
 801f9a8:	2002e4d8 	.word	0x2002e4d8

0801f9ac <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9b0:	9f08      	ldr	r7, [sp, #32]
 801f9b2:	4680      	mov	r8, r0
 801f9b4:	460d      	mov	r5, r1
 801f9b6:	4614      	mov	r4, r2
 801f9b8:	461e      	mov	r6, r3
 801f9ba:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801f9be:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f9c2:	2f00      	cmp	r7, #0
 801f9c4:	d033      	beq.n	801fa2e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f9c6:	42a5      	cmp	r5, r4
 801f9c8:	d20e      	bcs.n	801f9e8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f9ca:	f019 0f02 	tst.w	r9, #2
 801f9ce:	d008      	beq.n	801f9e2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f9d0:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801f9d4:	f021 0103 	bic.w	r1, r1, #3
 801f9d8:	428c      	cmp	r4, r1
 801f9da:	bf28      	it	cs
 801f9dc:	460c      	movcs	r4, r1
 801f9de:	b2a1      	uxth	r1, r4
 801f9e0:	e003      	b.n	801f9ea <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f9e2:	8b7b      	ldrh	r3, [r7, #26]
 801f9e4:	065b      	lsls	r3, r3, #25
 801f9e6:	d518      	bpl.n	801fa1a <tcp_pbuf_prealloc+0x6e>
 801f9e8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f9ee:	4640      	mov	r0, r8
 801f9f0:	f7fc fc0c 	bl	801c20c <pbuf_alloc>
  if (p == NULL) {
 801f9f4:	4604      	mov	r4, r0
 801f9f6:	b168      	cbz	r0, 801fa14 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801f9f8:	6803      	ldr	r3, [r0, #0]
 801f9fa:	b133      	cbz	r3, 801fa0a <tcp_pbuf_prealloc+0x5e>
 801f9fc:	4b0f      	ldr	r3, [pc, #60]	; (801fa3c <tcp_pbuf_prealloc+0x90>)
 801f9fe:	f240 120b 	movw	r2, #267	; 0x10b
 801fa02:	490f      	ldr	r1, [pc, #60]	; (801fa40 <tcp_pbuf_prealloc+0x94>)
 801fa04:	480f      	ldr	r0, [pc, #60]	; (801fa44 <tcp_pbuf_prealloc+0x98>)
 801fa06:	f006 fe9d 	bl	8026744 <iprintf>
  *oversize = p->len - length;
 801fa0a:	8963      	ldrh	r3, [r4, #10]
 801fa0c:	1b5b      	subs	r3, r3, r5
 801fa0e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801fa10:	8125      	strh	r5, [r4, #8]
 801fa12:	8165      	strh	r5, [r4, #10]
  return p;
}
 801fa14:	4620      	mov	r0, r4
 801fa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801fa1a:	f1ba 0f00 	cmp.w	sl, #0
 801fa1e:	d0d7      	beq.n	801f9d0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801fa20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d1d4      	bne.n	801f9d0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801fa26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d1d1      	bne.n	801f9d0 <tcp_pbuf_prealloc+0x24>
 801fa2c:	e7dc      	b.n	801f9e8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801fa2e:	4b03      	ldr	r3, [pc, #12]	; (801fa3c <tcp_pbuf_prealloc+0x90>)
 801fa30:	22e9      	movs	r2, #233	; 0xe9
 801fa32:	4905      	ldr	r1, [pc, #20]	; (801fa48 <tcp_pbuf_prealloc+0x9c>)
 801fa34:	4803      	ldr	r0, [pc, #12]	; (801fa44 <tcp_pbuf_prealloc+0x98>)
 801fa36:	f006 fe85 	bl	8026744 <iprintf>
 801fa3a:	e7c4      	b.n	801f9c6 <tcp_pbuf_prealloc+0x1a>
 801fa3c:	080461d0 	.word	0x080461d0
 801fa40:	08046224 	.word	0x08046224
 801fa44:	0802b43c 	.word	0x0802b43c
 801fa48:	08046204 	.word	0x08046204

0801fa4c <tcp_create_segment>:
{
 801fa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa50:	460e      	mov	r6, r1
 801fa52:	f89d a020 	ldrb.w	sl, [sp, #32]
 801fa56:	4690      	mov	r8, r2
 801fa58:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fa5a:	4607      	mov	r7, r0
 801fa5c:	2800      	cmp	r0, #0
 801fa5e:	d04c      	beq.n	801fafa <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fa60:	2e00      	cmp	r6, #0
 801fa62:	d052      	beq.n	801fb0a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa64:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fa68:	22a8      	movs	r2, #168	; 0xa8
 801fa6a:	4931      	ldr	r1, [pc, #196]	; (801fb30 <tcp_create_segment+0xe4>)
 801fa6c:	2004      	movs	r0, #4
 801fa6e:	f7fc f851 	bl	801bb14 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa72:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fa76:	4604      	mov	r4, r0
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d054      	beq.n	801fb26 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801fa7c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801fa80:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa82:	8932      	ldrh	r2, [r6, #8]
 801fa84:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801fa88:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa8a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801fa8c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa8e:	d32c      	bcc.n	801faea <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801fa90:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fa94:	4630      	mov	r0, r6
 801fa96:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801fa98:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fa9a:	f7fc fcc9 	bl	801c430 <pbuf_add_header>
 801fa9e:	4606      	mov	r6, r0
 801faa0:	2800      	cmp	r0, #0
 801faa2:	d139      	bne.n	801fb18 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801faa4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801faa6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801faa8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801faaa:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801faae:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fab2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fab6:	f7fa fd3f 	bl	801a538 <lwip_htons>
 801faba:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801fabe:	8b38      	ldrh	r0, [r7, #24]
 801fac0:	68e7      	ldr	r7, [r4, #12]
 801fac2:	f7fa fd39 	bl	801a538 <lwip_htons>
 801fac6:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801fac8:	4648      	mov	r0, r9
 801faca:	68e7      	ldr	r7, [r4, #12]
 801facc:	f7fa fd38 	bl	801a540 <lwip_htonl>
 801fad0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fad2:	ea45 0008 	orr.w	r0, r5, r8
 801fad6:	68e7      	ldr	r7, [r4, #12]
 801fad8:	f7fa fd2e 	bl	801a538 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801fadc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fade:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801fae0:	749e      	strb	r6, [r3, #18]
 801fae2:	74de      	strb	r6, [r3, #19]
}
 801fae4:	4620      	mov	r0, r4
 801fae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801faea:	22b0      	movs	r2, #176	; 0xb0
 801faec:	4b10      	ldr	r3, [pc, #64]	; (801fb30 <tcp_create_segment+0xe4>)
 801faee:	4911      	ldr	r1, [pc, #68]	; (801fb34 <tcp_create_segment+0xe8>)
 801faf0:	4811      	ldr	r0, [pc, #68]	; (801fb38 <tcp_create_segment+0xec>)
 801faf2:	f006 fe27 	bl	8026744 <iprintf>
  seg->len = p->tot_len - optlen;
 801faf6:	8932      	ldrh	r2, [r6, #8]
 801faf8:	e7ca      	b.n	801fa90 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fafa:	4b0d      	ldr	r3, [pc, #52]	; (801fb30 <tcp_create_segment+0xe4>)
 801fafc:	22a3      	movs	r2, #163	; 0xa3
 801fafe:	490f      	ldr	r1, [pc, #60]	; (801fb3c <tcp_create_segment+0xf0>)
 801fb00:	480d      	ldr	r0, [pc, #52]	; (801fb38 <tcp_create_segment+0xec>)
 801fb02:	f006 fe1f 	bl	8026744 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fb06:	2e00      	cmp	r6, #0
 801fb08:	d1ac      	bne.n	801fa64 <tcp_create_segment+0x18>
 801fb0a:	4b09      	ldr	r3, [pc, #36]	; (801fb30 <tcp_create_segment+0xe4>)
 801fb0c:	22a4      	movs	r2, #164	; 0xa4
 801fb0e:	490c      	ldr	r1, [pc, #48]	; (801fb40 <tcp_create_segment+0xf4>)
 801fb10:	4809      	ldr	r0, [pc, #36]	; (801fb38 <tcp_create_segment+0xec>)
 801fb12:	f006 fe17 	bl	8026744 <iprintf>
 801fb16:	e7a5      	b.n	801fa64 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801fb18:	4620      	mov	r0, r4
    return NULL;
 801fb1a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801fb1c:	f7fd fac4 	bl	801d0a8 <tcp_seg_free>
}
 801fb20:	4620      	mov	r0, r4
 801fb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801fb26:	4630      	mov	r0, r6
 801fb28:	f7fc fd42 	bl	801c5b0 <pbuf_free>
    return NULL;
 801fb2c:	e7da      	b.n	801fae4 <tcp_create_segment+0x98>
 801fb2e:	bf00      	nop
 801fb30:	080461d0 	.word	0x080461d0
 801fb34:	0804627c 	.word	0x0804627c
 801fb38:	0802b43c 	.word	0x0802b43c
 801fb3c:	08046238 	.word	0x08046238
 801fb40:	08046258 	.word	0x08046258

0801fb44 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb44:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb4a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb4c:	4606      	mov	r6, r0
 801fb4e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb50:	2022      	movs	r0, #34	; 0x22
 801fb52:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb56:	461c      	mov	r4, r3
 801fb58:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801fb5c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801fb60:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb64:	f7fc fb52 	bl	801c20c <pbuf_alloc>
  if (p != NULL) {
 801fb68:	4605      	mov	r5, r0
 801fb6a:	b300      	cbz	r0, 801fbae <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fb6c:	8943      	ldrh	r3, [r0, #10]
 801fb6e:	2b13      	cmp	r3, #19
 801fb70:	d920      	bls.n	801fbb4 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801fb72:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801fb74:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801fb76:	f7fa fcdf 	bl	801a538 <lwip_htons>
 801fb7a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801fb7c:	4650      	mov	r0, sl
 801fb7e:	f7fa fcdb 	bl	801a538 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801fb82:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801fb84:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801fb86:	4630      	mov	r0, r6
 801fb88:	f7fa fcda 	bl	801a540 <lwip_htonl>
 801fb8c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb8e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801fb92:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb94:	f7fa fcd0 	bl	801a538 <lwip_htons>
 801fb98:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801fb9a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb9c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801fb9e:	f7fa fccb 	bl	801a538 <lwip_htons>
    tcphdr->chksum = 0;
 801fba2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801fba4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801fba6:	7423      	strb	r3, [r4, #16]
 801fba8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801fbaa:	74a3      	strb	r3, [r4, #18]
 801fbac:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801fbae:	4628      	mov	r0, r5
 801fbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fbb4:	4b03      	ldr	r3, [pc, #12]	; (801fbc4 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801fbb6:	f240 7223 	movw	r2, #1827	; 0x723
 801fbba:	4903      	ldr	r1, [pc, #12]	; (801fbc8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801fbbc:	4803      	ldr	r0, [pc, #12]	; (801fbcc <tcp_output_alloc_header_common.constprop.0+0x88>)
 801fbbe:	f006 fdc1 	bl	8026744 <iprintf>
 801fbc2:	e7d6      	b.n	801fb72 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801fbc4:	080461d0 	.word	0x080461d0
 801fbc8:	08046294 	.word	0x08046294
 801fbcc:	0802b43c 	.word	0x0802b43c

0801fbd0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fbd0:	b570      	push	{r4, r5, r6, lr}
 801fbd2:	460d      	mov	r5, r1
 801fbd4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fbd6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fbd8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fbda:	b190      	cbz	r0, 801fc02 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801fbdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801fbde:	2210      	movs	r2, #16
 801fbe0:	8b21      	ldrh	r1, [r4, #24]
 801fbe2:	9302      	str	r3, [sp, #8]
 801fbe4:	e9cd 1200 	strd	r1, r2, [sp]
 801fbe8:	4632      	mov	r2, r6
 801fbea:	4629      	mov	r1, r5
 801fbec:	8ae3      	ldrh	r3, [r4, #22]
 801fbee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fbf0:	f7ff ffa8 	bl	801fb44 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801fbf4:	b118      	cbz	r0, 801fbfe <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fbf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801fbf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fbfa:	4413      	add	r3, r2
 801fbfc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801fbfe:	b004      	add	sp, #16
 801fc00:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fc02:	4b04      	ldr	r3, [pc, #16]	; (801fc14 <tcp_output_alloc_header.constprop.0+0x44>)
 801fc04:	f240 7242 	movw	r2, #1858	; 0x742
 801fc08:	4903      	ldr	r1, [pc, #12]	; (801fc18 <tcp_output_alloc_header.constprop.0+0x48>)
 801fc0a:	4804      	ldr	r0, [pc, #16]	; (801fc1c <tcp_output_alloc_header.constprop.0+0x4c>)
 801fc0c:	f006 fd9a 	bl	8026744 <iprintf>
 801fc10:	e7e4      	b.n	801fbdc <tcp_output_alloc_header.constprop.0+0xc>
 801fc12:	bf00      	nop
 801fc14:	080461d0 	.word	0x080461d0
 801fc18:	080462c4 	.word	0x080462c4
 801fc1c:	0802b43c 	.word	0x0802b43c

0801fc20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801fc20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc24:	4605      	mov	r5, r0
 801fc26:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc28:	460c      	mov	r4, r1
{
 801fc2a:	4690      	mov	r8, r2
 801fc2c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc2e:	2900      	cmp	r1, #0
 801fc30:	d034      	beq.n	801fc9c <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fc32:	2d00      	cmp	r5, #0
 801fc34:	d03a      	beq.n	801fcac <tcp_output_control_segment+0x8c>
 801fc36:	7a28      	ldrb	r0, [r5, #8]
 801fc38:	bb10      	cbnz	r0, 801fc80 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801fc3a:	4630      	mov	r0, r6
 801fc3c:	f004 f8b4 	bl	8023da8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801fc40:	4607      	mov	r7, r0
 801fc42:	b310      	cbz	r0, 801fc8a <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc44:	9600      	str	r6, [sp, #0]
 801fc46:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fc48:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc4c:	2106      	movs	r1, #6
 801fc4e:	8922      	ldrh	r2, [r4, #8]
 801fc50:	4620      	mov	r0, r4
 801fc52:	f7fb fa05 	bl	801b060 <ip_chksum_pseudo>
 801fc56:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801fc5a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801fc5c:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801fc5e:	9500      	str	r5, [sp, #0]
 801fc60:	2506      	movs	r5, #6
 801fc62:	4632      	mov	r2, r6
 801fc64:	4641      	mov	r1, r8
 801fc66:	9501      	str	r5, [sp, #4]
 801fc68:	4620      	mov	r0, r4
 801fc6a:	9702      	str	r7, [sp, #8]
 801fc6c:	f004 fa66 	bl	802413c <ip4_output_if>
 801fc70:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801fc72:	4620      	mov	r0, r4
 801fc74:	f7fc fc9c 	bl	801c5b0 <pbuf_free>
  return err;
}
 801fc78:	4628      	mov	r0, r5
 801fc7a:	b005      	add	sp, #20
 801fc7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801fc80:	f7fc f970 	bl	801bf64 <netif_get_by_index>
  if (netif == NULL) {
 801fc84:	4607      	mov	r7, r0
 801fc86:	2800      	cmp	r0, #0
 801fc88:	d1dc      	bne.n	801fc44 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801fc8a:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801fc8e:	4620      	mov	r0, r4
 801fc90:	f7fc fc8e 	bl	801c5b0 <pbuf_free>
}
 801fc94:	4628      	mov	r0, r5
 801fc96:	b005      	add	sp, #20
 801fc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc9c:	4b0d      	ldr	r3, [pc, #52]	; (801fcd4 <tcp_output_control_segment+0xb4>)
 801fc9e:	f240 7287 	movw	r2, #1927	; 0x787
 801fca2:	490d      	ldr	r1, [pc, #52]	; (801fcd8 <tcp_output_control_segment+0xb8>)
 801fca4:	480d      	ldr	r0, [pc, #52]	; (801fcdc <tcp_output_control_segment+0xbc>)
 801fca6:	f006 fd4d 	bl	8026744 <iprintf>
 801fcaa:	e7c2      	b.n	801fc32 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801fcac:	4630      	mov	r0, r6
 801fcae:	f004 f87b 	bl	8023da8 <ip4_route>
  if (netif == NULL) {
 801fcb2:	4607      	mov	r7, r0
 801fcb4:	2800      	cmp	r0, #0
 801fcb6:	d0e8      	beq.n	801fc8a <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fcb8:	9600      	str	r6, [sp, #0]
 801fcba:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fcbc:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fcc0:	2106      	movs	r1, #6
 801fcc2:	8922      	ldrh	r2, [r4, #8]
 801fcc4:	4620      	mov	r0, r4
 801fcc6:	f7fb f9cb 	bl	801b060 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801fcca:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fccc:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801fcd0:	e7c5      	b.n	801fc5e <tcp_output_control_segment+0x3e>
 801fcd2:	bf00      	nop
 801fcd4:	080461d0 	.word	0x080461d0
 801fcd8:	080462ec 	.word	0x080462ec
 801fcdc:	0802b43c 	.word	0x0802b43c

0801fce0 <tcp_write>:
{
 801fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801fce4:	2400      	movs	r4, #0
{
 801fce6:	b091      	sub	sp, #68	; 0x44
 801fce8:	9107      	str	r1, [sp, #28]
 801fcea:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801fcec:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801fcf0:	2800      	cmp	r0, #0
 801fcf2:	f000 82fc 	beq.w	80202ee <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801fcf6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801fcfa:	4692      	mov	sl, r2
 801fcfc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801fcfe:	4681      	mov	r9, r0
 801fd00:	085b      	lsrs	r3, r3, #1
 801fd02:	4293      	cmp	r3, r2
 801fd04:	bf28      	it	cs
 801fd06:	4613      	movcs	r3, r2
 801fd08:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	bf08      	it	eq
 801fd0e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801fd10:	9b07      	ldr	r3, [sp, #28]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	f000 82df 	beq.w	80202d6 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801fd18:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801fd1a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801fd1c:	2a02      	cmp	r2, #2
 801fd1e:	d902      	bls.n	801fd26 <tcp_write+0x46>
 801fd20:	2b07      	cmp	r3, #7
 801fd22:	f040 829c 	bne.w	802025e <tcp_write+0x57e>
  } else if (len == 0) {
 801fd26:	f1ba 0f00 	cmp.w	sl, #0
 801fd2a:	f000 80ec 	beq.w	801ff06 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801fd2e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801fd32:	4553      	cmp	r3, sl
 801fd34:	f0c0 82b6 	bcc.w	80202a4 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801fd38:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801fd3c:	2e08      	cmp	r6, #8
 801fd3e:	f200 82b1 	bhi.w	80202a4 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fd42:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801fd46:	2e00      	cmp	r6, #0
 801fd48:	f000 80d3 	beq.w	801fef2 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	f040 80dc 	bne.w	801ff0a <tcp_write+0x22a>
 801fd52:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801fd56:	f1b8 0f00 	cmp.w	r8, #0
 801fd5a:	f000 8263 	beq.w	8020224 <tcp_write+0x544>
 801fd5e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801fd60:	461a      	mov	r2, r3
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d1fb      	bne.n	801fd60 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fd68:	7a94      	ldrb	r4, [r2, #10]
 801fd6a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fd6c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fd6e:	00a4      	lsls	r4, r4, #2
 801fd70:	920b      	str	r2, [sp, #44]	; 0x2c
 801fd72:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fd76:	191a      	adds	r2, r3, r4
 801fd78:	4593      	cmp	fp, r2
 801fd7a:	f2c0 81a6 	blt.w	80200ca <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd7e:	ebab 0404 	sub.w	r4, fp, r4
 801fd82:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801fd84:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd88:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801fd8a:	930a      	str	r3, [sp, #40]	; 0x28
 801fd8c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	f000 80cf 	beq.w	801ff34 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801fd96:	42a3      	cmp	r3, r4
 801fd98:	f200 818a 	bhi.w	80200b0 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801fd9c:	45a2      	cmp	sl, r4
 801fd9e:	4653      	mov	r3, sl
 801fda0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fda2:	bf28      	it	cs
 801fda4:	4623      	movcs	r3, r4
 801fda6:	4293      	cmp	r3, r2
 801fda8:	bf28      	it	cs
 801fdaa:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801fdac:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801fdae:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fdb0:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801fdb2:	b292      	uxth	r2, r2
      space -= oversize_used;
 801fdb4:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801fdb6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fdba:	2a00      	cmp	r2, #0
 801fdbc:	f000 8183 	beq.w	80200c6 <tcp_write+0x3e6>
 801fdc0:	459a      	cmp	sl, r3
 801fdc2:	f000 8180 	beq.w	80200c6 <tcp_write+0x3e6>
 801fdc6:	4bb2      	ldr	r3, [pc, #712]	; (8020090 <tcp_write+0x3b0>)
 801fdc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fdcc:	49b1      	ldr	r1, [pc, #708]	; (8020094 <tcp_write+0x3b4>)
 801fdce:	48b2      	ldr	r0, [pc, #712]	; (8020098 <tcp_write+0x3b8>)
 801fdd0:	f006 fcb8 	bl	8026744 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fdd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fdd8:	459a      	cmp	sl, r3
 801fdda:	f200 80b0 	bhi.w	801ff3e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801fdde:	2300      	movs	r3, #0
 801fde0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fde2:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801fde4:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801fde6:	45a2      	cmp	sl, r4
 801fde8:	f240 80ee 	bls.w	801ffc8 <tcp_write+0x2e8>
 801fdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdee:	f04f 0800 	mov.w	r8, #0
 801fdf2:	f003 0301 	and.w	r3, r3, #1
 801fdf6:	f8cd 8014 	str.w	r8, [sp, #20]
 801fdfa:	9308      	str	r3, [sp, #32]
 801fdfc:	4643      	mov	r3, r8
 801fdfe:	46d8      	mov	r8, fp
 801fe00:	469b      	mov	fp, r3
 801fe02:	e042      	b.n	801fe8a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fe04:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	f040 80f0 	bne.w	801ffee <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fe0e:	2201      	movs	r2, #1
 801fe10:	4629      	mov	r1, r5
 801fe12:	2036      	movs	r0, #54	; 0x36
 801fe14:	f7fc f9fa 	bl	801c20c <pbuf_alloc>
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	f000 8100 	beq.w	802001e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fe1e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fe20:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fe22:	9006      	str	r0, [sp, #24]
 801fe24:	4422      	add	r2, r4
 801fe26:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fe28:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe2c:	2036      	movs	r0, #54	; 0x36
 801fe2e:	f7fc f9ed 	bl	801c20c <pbuf_alloc>
 801fe32:	9b06      	ldr	r3, [sp, #24]
 801fe34:	4607      	mov	r7, r0
 801fe36:	2800      	cmp	r0, #0
 801fe38:	f000 8195 	beq.w	8020166 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801fe3c:	4619      	mov	r1, r3
 801fe3e:	f7fc fbe9 	bl	801c614 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801fe42:	4638      	mov	r0, r7
 801fe44:	f7fc fbc8 	bl	801c5d8 <pbuf_clen>
 801fe48:	4430      	add	r0, r6
 801fe4a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fe4c:	2e09      	cmp	r6, #9
 801fe4e:	d84a      	bhi.n	801fee6 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fe50:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801fe54:	2200      	movs	r2, #0
 801fe56:	4639      	mov	r1, r7
 801fe58:	4648      	mov	r0, r9
 801fe5a:	4423      	add	r3, r4
 801fe5c:	9200      	str	r2, [sp, #0]
 801fe5e:	f7ff fdf5 	bl	801fa4c <tcp_create_segment>
 801fe62:	4607      	mov	r7, r0
 801fe64:	2800      	cmp	r0, #0
 801fe66:	f000 80da 	beq.w	802001e <tcp_write+0x33e>
    if (queue == NULL) {
 801fe6a:	9b05      	ldr	r3, [sp, #20]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	f000 80a3 	beq.w	801ffb8 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fe72:	f1bb 0f00 	cmp.w	fp, #0
 801fe76:	f000 80c2 	beq.w	801fffe <tcp_write+0x31e>
    pos += seglen;
 801fe7a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801fe7c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801fe80:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801fe82:	45a2      	cmp	sl, r4
 801fe84:	f240 809e 	bls.w	801ffc4 <tcp_write+0x2e4>
 801fe88:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801fe8a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fe8e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801fe90:	b2ad      	uxth	r5, r5
 801fe92:	4545      	cmp	r5, r8
 801fe94:	bf28      	it	cs
 801fe96:	4645      	movcs	r5, r8
 801fe98:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d0b2      	beq.n	801fe04 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801fe9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fea0:	4642      	mov	r2, r8
 801fea2:	4629      	mov	r1, r5
 801fea4:	2036      	movs	r0, #54	; 0x36
 801fea6:	e9cd 9300 	strd	r9, r3, [sp]
 801feaa:	9b05      	ldr	r3, [sp, #20]
 801feac:	fab3 f383 	clz	r3, r3
 801feb0:	095b      	lsrs	r3, r3, #5
 801feb2:	9302      	str	r3, [sp, #8]
 801feb4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801feb8:	f7ff fd78 	bl	801f9ac <tcp_pbuf_prealloc>
 801febc:	4607      	mov	r7, r0
 801febe:	2800      	cmp	r0, #0
 801fec0:	f000 80ad 	beq.w	802001e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fec4:	8943      	ldrh	r3, [r0, #10]
 801fec6:	42ab      	cmp	r3, r5
 801fec8:	f0c0 80a1 	bcc.w	802000e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fecc:	9b07      	ldr	r3, [sp, #28]
 801fece:	462a      	mov	r2, r5
 801fed0:	6878      	ldr	r0, [r7, #4]
 801fed2:	1919      	adds	r1, r3, r4
 801fed4:	f005 fc70 	bl	80257b8 <memcpy>
    queuelen += pbuf_clen(p);
 801fed8:	4638      	mov	r0, r7
 801feda:	f7fc fb7d 	bl	801c5d8 <pbuf_clen>
 801fede:	4430      	add	r0, r6
 801fee0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fee2:	2e09      	cmp	r6, #9
 801fee4:	d9b4      	bls.n	801fe50 <tcp_write+0x170>
      pbuf_free(p);
 801fee6:	4638      	mov	r0, r7
 801fee8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801feec:	f7fc fb60 	bl	801c5b0 <pbuf_free>
      goto memerr;
 801fef0:	e097      	b.n	8020022 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	f000 80b6 	beq.w	8020064 <tcp_write+0x384>
 801fef8:	4b65      	ldr	r3, [pc, #404]	; (8020090 <tcp_write+0x3b0>)
 801fefa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801fefe:	4967      	ldr	r1, [pc, #412]	; (802009c <tcp_write+0x3bc>)
 801ff00:	4865      	ldr	r0, [pc, #404]	; (8020098 <tcp_write+0x3b8>)
 801ff02:	f006 fc1f 	bl	8026744 <iprintf>
  queuelen = pcb->snd_queuelen;
 801ff06:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801ff0a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801ff0e:	f1b8 0f00 	cmp.w	r8, #0
 801ff12:	f47f af24 	bne.w	801fd5e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ff16:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	f040 80ac 	bne.w	8020078 <tcp_write+0x398>
  while (pos < len) {
 801ff20:	f1ba 0f00 	cmp.w	sl, #0
 801ff24:	f000 81c7 	beq.w	80202b6 <tcp_write+0x5d6>
          extendlen = seglen;
 801ff28:	2400      	movs	r4, #0
 801ff2a:	940d      	str	r4, [sp, #52]	; 0x34
 801ff2c:	940c      	str	r4, [sp, #48]	; 0x30
 801ff2e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801ff32:	e75b      	b.n	801fdec <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ff34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ff36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff38:	459a      	cmp	sl, r3
 801ff3a:	f67f af50 	bls.w	801fdde <tcp_write+0xfe>
 801ff3e:	2c00      	cmp	r4, #0
 801ff40:	f43f af4d 	beq.w	801fdde <tcp_write+0xfe>
 801ff44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ff46:	8912      	ldrh	r2, [r2, #8]
 801ff48:	920d      	str	r2, [sp, #52]	; 0x34
 801ff4a:	2a00      	cmp	r2, #0
 801ff4c:	f000 809c 	beq.w	8020088 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff50:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff54:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff56:	42a7      	cmp	r7, r4
 801ff58:	bfa8      	it	ge
 801ff5a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff5c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff5e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff60:	f100 8187 	bmi.w	8020272 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ff64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff66:	685a      	ldr	r2, [r3, #4]
 801ff68:	4613      	mov	r3, r2
 801ff6a:	6812      	ldr	r2, [r2, #0]
 801ff6c:	2a00      	cmp	r2, #0
 801ff6e:	d1fb      	bne.n	801ff68 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff70:	920c      	str	r2, [sp, #48]	; 0x30
 801ff72:	7b1a      	ldrb	r2, [r3, #12]
 801ff74:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801ff78:	d106      	bne.n	801ff88 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ff7a:	895a      	ldrh	r2, [r3, #10]
 801ff7c:	685b      	ldr	r3, [r3, #4]
 801ff7e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff80:	9a07      	ldr	r2, [sp, #28]
 801ff82:	429a      	cmp	r2, r3
 801ff84:	f000 8167 	beq.w	8020256 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ff88:	2201      	movs	r2, #1
 801ff8a:	4629      	mov	r1, r5
 801ff8c:	2000      	movs	r0, #0
 801ff8e:	f7fc f93d 	bl	801c20c <pbuf_alloc>
 801ff92:	900c      	str	r0, [sp, #48]	; 0x30
 801ff94:	2800      	cmp	r0, #0
 801ff96:	f000 813e 	beq.w	8020216 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ff9a:	9b07      	ldr	r3, [sp, #28]
 801ff9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ff9e:	440b      	add	r3, r1
 801ffa0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801ffa2:	f7fc fb19 	bl	801c5d8 <pbuf_clen>
 801ffa6:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801ffa8:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801ffaa:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801ffac:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801ffae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffb0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ffb2:	18ec      	adds	r4, r5, r3
 801ffb4:	b2a4      	uxth	r4, r4
 801ffb6:	e716      	b.n	801fde6 <tcp_write+0x106>
    pos += seglen;
 801ffb8:	442c      	add	r4, r5
 801ffba:	9005      	str	r0, [sp, #20]
 801ffbc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ffbe:	45a2      	cmp	sl, r4
 801ffc0:	f63f af62 	bhi.w	801fe88 <tcp_write+0x1a8>
 801ffc4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801ffc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	f000 80db 	beq.w	8020186 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801ffd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffd2:	6854      	ldr	r4, [r2, #4]
 801ffd4:	2c00      	cmp	r4, #0
 801ffd6:	f000 8090 	beq.w	80200fa <tcp_write+0x41a>
 801ffda:	469b      	mov	fp, r3
 801ffdc:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801ffde:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801ffe0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801ffe2:	445b      	add	r3, fp
 801ffe4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801ffe6:	2a00      	cmp	r2, #0
 801ffe8:	d079      	beq.n	80200de <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801ffea:	4614      	mov	r4, r2
 801ffec:	e7f7      	b.n	801ffde <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ffee:	4b28      	ldr	r3, [pc, #160]	; (8020090 <tcp_write+0x3b0>)
 801fff0:	f240 2271 	movw	r2, #625	; 0x271
 801fff4:	492a      	ldr	r1, [pc, #168]	; (80200a0 <tcp_write+0x3c0>)
 801fff6:	4828      	ldr	r0, [pc, #160]	; (8020098 <tcp_write+0x3b8>)
 801fff8:	f006 fba4 	bl	8026744 <iprintf>
 801fffc:	e707      	b.n	801fe0e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fffe:	4b24      	ldr	r3, [pc, #144]	; (8020090 <tcp_write+0x3b0>)
 8020000:	f240 22ab 	movw	r2, #683	; 0x2ab
 8020004:	4927      	ldr	r1, [pc, #156]	; (80200a4 <tcp_write+0x3c4>)
 8020006:	4824      	ldr	r0, [pc, #144]	; (8020098 <tcp_write+0x3b8>)
 8020008:	f006 fb9c 	bl	8026744 <iprintf>
 802000c:	e735      	b.n	801fe7a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 802000e:	4b20      	ldr	r3, [pc, #128]	; (8020090 <tcp_write+0x3b0>)
 8020010:	f240 2266 	movw	r2, #614	; 0x266
 8020014:	4924      	ldr	r1, [pc, #144]	; (80200a8 <tcp_write+0x3c8>)
 8020016:	4820      	ldr	r0, [pc, #128]	; (8020098 <tcp_write+0x3b8>)
 8020018:	f006 fb94 	bl	8026744 <iprintf>
 802001c:	e756      	b.n	801fecc <tcp_write+0x1ec>
 802001e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020022:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8020026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802002a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 802002e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020030:	b113      	cbz	r3, 8020038 <tcp_write+0x358>
    pbuf_free(concat_p);
 8020032:	4618      	mov	r0, r3
 8020034:	f7fc fabc 	bl	801c5b0 <pbuf_free>
  if (queue != NULL) {
 8020038:	f1b8 0f00 	cmp.w	r8, #0
 802003c:	d002      	beq.n	8020044 <tcp_write+0x364>
    tcp_segs_free(queue);
 802003e:	4640      	mov	r0, r8
 8020040:	f7fd f820 	bl	801d084 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8020044:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 8020048:	b13b      	cbz	r3, 802005a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 802004a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 802004e:	b923      	cbnz	r3, 802005a <tcp_write+0x37a>
 8020050:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8020054:	2b00      	cmp	r3, #0
 8020056:	f000 808c 	beq.w	8020172 <tcp_write+0x492>
  return ERR_MEM;
 802005a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802005e:	b011      	add	sp, #68	; 0x44
 8020060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8020064:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8020068:	2b00      	cmp	r3, #0
 802006a:	f47f af45 	bne.w	801fef8 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 802006e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 8020072:	2b00      	cmp	r3, #0
 8020074:	f43f af58 	beq.w	801ff28 <tcp_write+0x248>
 8020078:	4b05      	ldr	r3, [pc, #20]	; (8020090 <tcp_write+0x3b0>)
 802007a:	f240 224a 	movw	r2, #586	; 0x24a
 802007e:	490b      	ldr	r1, [pc, #44]	; (80200ac <tcp_write+0x3cc>)
 8020080:	4805      	ldr	r0, [pc, #20]	; (8020098 <tcp_write+0x3b8>)
 8020082:	f006 fb5f 	bl	8026744 <iprintf>
 8020086:	e74b      	b.n	801ff20 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 8020088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802008a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802008c:	930c      	str	r3, [sp, #48]	; 0x30
 802008e:	e6ad      	b.n	801fdec <tcp_write+0x10c>
 8020090:	080461d0 	.word	0x080461d0
 8020094:	0804640c 	.word	0x0804640c
 8020098:	0802b43c 	.word	0x0802b43c
 802009c:	080463a0 	.word	0x080463a0
 80200a0:	080464c8 	.word	0x080464c8
 80200a4:	080464d8 	.word	0x080464d8
 80200a8:	08046488 	.word	0x08046488
 80200ac:	08046458 	.word	0x08046458
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80200b0:	4b94      	ldr	r3, [pc, #592]	; (8020304 <tcp_write+0x624>)
 80200b2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80200b6:	4994      	ldr	r1, [pc, #592]	; (8020308 <tcp_write+0x628>)
 80200b8:	4894      	ldr	r0, [pc, #592]	; (802030c <tcp_write+0x62c>)
 80200ba:	f006 fb43 	bl	8026744 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80200be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80200c2:	930a      	str	r3, [sp, #40]	; 0x28
 80200c4:	e66a      	b.n	801fd9c <tcp_write+0xbc>
 80200c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80200c8:	e735      	b.n	801ff36 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80200ca:	4b8e      	ldr	r3, [pc, #568]	; (8020304 <tcp_write+0x624>)
 80200cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80200d0:	498f      	ldr	r1, [pc, #572]	; (8020310 <tcp_write+0x630>)
 80200d2:	488e      	ldr	r0, [pc, #568]	; (802030c <tcp_write+0x62c>)
 80200d4:	f006 fb36 	bl	8026744 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80200d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200da:	891b      	ldrh	r3, [r3, #8]
 80200dc:	e64f      	b.n	801fd7e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80200de:	8963      	ldrh	r3, [r4, #10]
 80200e0:	465a      	mov	r2, fp
 80200e2:	6860      	ldr	r0, [r4, #4]
 80200e4:	4629      	mov	r1, r5
 80200e6:	4418      	add	r0, r3
 80200e8:	f005 fb66 	bl	80257b8 <memcpy>
        p->len += oversize_used;
 80200ec:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80200ee:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 80200f0:	445b      	add	r3, fp
 80200f2:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80200f4:	2a00      	cmp	r2, #0
 80200f6:	f47f af78 	bne.w	801ffea <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 80200fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80200fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80200fe:	8913      	ldrh	r3, [r2, #8]
 8020100:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 8020102:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 8020106:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8020108:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802010c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802010e:	2b00      	cmp	r3, #0
 8020110:	d061      	beq.n	80201d6 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 8020112:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020116:	6860      	ldr	r0, [r4, #4]
 8020118:	4629      	mov	r1, r5
 802011a:	f7fc fa7b 	bl	801c614 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802011e:	892a      	ldrh	r2, [r5, #8]
 8020120:	8923      	ldrh	r3, [r4, #8]
 8020122:	4413      	add	r3, r2
 8020124:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8020126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020128:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 802012c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 8020130:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 8020134:	4453      	add	r3, sl
 8020136:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 802013a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 802013e:	eba3 0a0a 	sub.w	sl, r3, sl
 8020142:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 8020146:	b11e      	cbz	r6, 8020150 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 8020148:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 802014c:	2b00      	cmp	r3, #0
 802014e:	d036      	beq.n	80201be <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8020150:	b12f      	cbz	r7, 802015e <tcp_write+0x47e>
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	b11b      	cbz	r3, 802015e <tcp_write+0x47e>
 8020156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020158:	f012 0502 	ands.w	r5, r2, #2
 802015c:	d025      	beq.n	80201aa <tcp_write+0x4ca>
  return ERR_OK;
 802015e:	2000      	movs	r0, #0
}
 8020160:	b011      	add	sp, #68	; 0x44
 8020162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 8020166:	4618      	mov	r0, r3
 8020168:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802016c:	f7fc fa20 	bl	801c5b0 <pbuf_free>
        goto memerr;
 8020170:	e757      	b.n	8020022 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8020172:	4b64      	ldr	r3, [pc, #400]	; (8020304 <tcp_write+0x624>)
 8020174:	f240 3227 	movw	r2, #807	; 0x327
 8020178:	4966      	ldr	r1, [pc, #408]	; (8020314 <tcp_write+0x634>)
 802017a:	4864      	ldr	r0, [pc, #400]	; (802030c <tcp_write+0x62c>)
 802017c:	f006 fae2 	bl	8026744 <iprintf>
  return ERR_MEM;
 8020180:	f04f 30ff 	mov.w	r0, #4294967295
 8020184:	e76b      	b.n	802005e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 8020186:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 802018a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802018e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020190:	2b00      	cmp	r3, #0
 8020192:	d051      	beq.n	8020238 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8020194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020196:	2b00      	cmp	r3, #0
 8020198:	d1bb      	bne.n	8020112 <tcp_write+0x432>
 802019a:	4b5a      	ldr	r3, [pc, #360]	; (8020304 <tcp_write+0x624>)
 802019c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80201a0:	495d      	ldr	r1, [pc, #372]	; (8020318 <tcp_write+0x638>)
 80201a2:	485a      	ldr	r0, [pc, #360]	; (802030c <tcp_write+0x62c>)
 80201a4:	f006 face 	bl	8026744 <iprintf>
 80201a8:	e7b3      	b.n	8020112 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80201aa:	2008      	movs	r0, #8
 80201ac:	899c      	ldrh	r4, [r3, #12]
 80201ae:	f7fa f9c3 	bl	801a538 <lwip_htons>
 80201b2:	4602      	mov	r2, r0
 80201b4:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 80201b6:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80201b8:	4314      	orrs	r4, r2
 80201ba:	819c      	strh	r4, [r3, #12]
 80201bc:	e74f      	b.n	802005e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 80201be:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d1c4      	bne.n	8020150 <tcp_write+0x470>
 80201c6:	4b4f      	ldr	r3, [pc, #316]	; (8020304 <tcp_write+0x624>)
 80201c8:	f240 3212 	movw	r2, #786	; 0x312
 80201cc:	4951      	ldr	r1, [pc, #324]	; (8020314 <tcp_write+0x634>)
 80201ce:	484f      	ldr	r0, [pc, #316]	; (802030c <tcp_write+0x62c>)
 80201d0:	f006 fab8 	bl	8026744 <iprintf>
 80201d4:	e7bc      	b.n	8020150 <tcp_write+0x470>
  } else if (extendlen > 0) {
 80201d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d0a4      	beq.n	8020126 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80201dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201de:	6859      	ldr	r1, [r3, #4]
 80201e0:	2900      	cmp	r1, #0
 80201e2:	d02e      	beq.n	8020242 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80201e4:	680a      	ldr	r2, [r1, #0]
 80201e6:	2a00      	cmp	r2, #0
 80201e8:	d07f      	beq.n	80202ea <tcp_write+0x60a>
 80201ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80201ec:	e000      	b.n	80201f0 <tcp_write+0x510>
 80201ee:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 80201f0:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80201f2:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 80201f4:	4423      	add	r3, r4
 80201f6:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80201f8:	4611      	mov	r1, r2
 80201fa:	2800      	cmp	r0, #0
 80201fc:	d1f7      	bne.n	80201ee <tcp_write+0x50e>
    p->tot_len += extendlen;
 80201fe:	8913      	ldrh	r3, [r2, #8]
 8020200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020202:	440b      	add	r3, r1
 8020204:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8020206:	8953      	ldrh	r3, [r2, #10]
 8020208:	440b      	add	r3, r1
 802020a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 802020c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802020e:	8913      	ldrh	r3, [r2, #8]
 8020210:	440b      	add	r3, r1
 8020212:	8113      	strh	r3, [r2, #8]
 8020214:	e787      	b.n	8020126 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020216:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 802021a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802021e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 8020222:	e70f      	b.n	8020044 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8020224:	4b37      	ldr	r3, [pc, #220]	; (8020304 <tcp_write+0x624>)
 8020226:	f240 1255 	movw	r2, #341	; 0x155
 802022a:	493c      	ldr	r1, [pc, #240]	; (802031c <tcp_write+0x63c>)
 802022c:	4837      	ldr	r0, [pc, #220]	; (802030c <tcp_write+0x62c>)
 802022e:	f006 fa89 	bl	8026744 <iprintf>
  queuelen = pcb->snd_queuelen;
 8020232:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 8020236:	e668      	b.n	801ff0a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 8020238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802023a:	b19b      	cbz	r3, 8020264 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802023c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802023e:	2b00      	cmp	r3, #0
 8020240:	d1cc      	bne.n	80201dc <tcp_write+0x4fc>
 8020242:	4b30      	ldr	r3, [pc, #192]	; (8020304 <tcp_write+0x624>)
 8020244:	f240 22e6 	movw	r2, #742	; 0x2e6
 8020248:	4935      	ldr	r1, [pc, #212]	; (8020320 <tcp_write+0x640>)
 802024a:	4830      	ldr	r0, [pc, #192]	; (802030c <tcp_write+0x62c>)
 802024c:	f006 fa7a 	bl	8026744 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020252:	6859      	ldr	r1, [r3, #4]
 8020254:	e7c6      	b.n	80201e4 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8020256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020258:	bba3      	cbnz	r3, 80202c4 <tcp_write+0x5e4>
          extendlen = seglen;
 802025a:	950d      	str	r5, [sp, #52]	; 0x34
 802025c:	e6a7      	b.n	801ffae <tcp_write+0x2ce>
    return ERR_CONN;
 802025e:	f06f 000a 	mvn.w	r0, #10
 8020262:	e6fc      	b.n	802005e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 8020264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020266:	2b00      	cmp	r3, #0
 8020268:	f47f af5d 	bne.w	8020126 <tcp_write+0x446>
    pcb->unsent = queue;
 802026c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 8020270:	e75c      	b.n	802012c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8020272:	e9cd 9300 	strd	r9, r3, [sp]
 8020276:	2301      	movs	r3, #1
 8020278:	4622      	mov	r2, r4
 802027a:	4629      	mov	r1, r5
 802027c:	2000      	movs	r0, #0
 802027e:	9302      	str	r3, [sp, #8]
 8020280:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8020284:	f7ff fb92 	bl	801f9ac <tcp_pbuf_prealloc>
 8020288:	4603      	mov	r3, r0
 802028a:	4604      	mov	r4, r0
 802028c:	900c      	str	r0, [sp, #48]	; 0x30
 802028e:	2800      	cmp	r0, #0
 8020290:	d0c1      	beq.n	8020216 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8020292:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020294:	462a      	mov	r2, r5
 8020296:	9907      	ldr	r1, [sp, #28]
 8020298:	4401      	add	r1, r0
 802029a:	6858      	ldr	r0, [r3, #4]
 802029c:	f005 fa8c 	bl	80257b8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80202a0:	4620      	mov	r0, r4
 80202a2:	e67e      	b.n	801ffa2 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202a4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 80202a8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202b0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 80202b4:	e6d3      	b.n	802005e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 80202b6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80202ba:	46d0      	mov	r8, sl
 80202bc:	4657      	mov	r7, sl
 80202be:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 80202c2:	e7d3      	b.n	802026c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80202c4:	4b0f      	ldr	r3, [pc, #60]	; (8020304 <tcp_write+0x624>)
 80202c6:	f240 2231 	movw	r2, #561	; 0x231
 80202ca:	4916      	ldr	r1, [pc, #88]	; (8020324 <tcp_write+0x644>)
 80202cc:	480f      	ldr	r0, [pc, #60]	; (802030c <tcp_write+0x62c>)
 80202ce:	f006 fa39 	bl	8026744 <iprintf>
          extendlen = seglen;
 80202d2:	950d      	str	r5, [sp, #52]	; 0x34
 80202d4:	e66b      	b.n	801ffae <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80202d6:	4b0b      	ldr	r3, [pc, #44]	; (8020304 <tcp_write+0x624>)
 80202d8:	f240 12ad 	movw	r2, #429	; 0x1ad
 80202dc:	4912      	ldr	r1, [pc, #72]	; (8020328 <tcp_write+0x648>)
 80202de:	480b      	ldr	r0, [pc, #44]	; (802030c <tcp_write+0x62c>)
 80202e0:	f006 fa30 	bl	8026744 <iprintf>
 80202e4:	f06f 000f 	mvn.w	r0, #15
 80202e8:	e6b9      	b.n	802005e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80202ea:	460a      	mov	r2, r1
 80202ec:	e787      	b.n	80201fe <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80202ee:	4b05      	ldr	r3, [pc, #20]	; (8020304 <tcp_write+0x624>)
 80202f0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80202f4:	490d      	ldr	r1, [pc, #52]	; (802032c <tcp_write+0x64c>)
 80202f6:	4805      	ldr	r0, [pc, #20]	; (802030c <tcp_write+0x62c>)
 80202f8:	f006 fa24 	bl	8026744 <iprintf>
 80202fc:	f06f 000f 	mvn.w	r0, #15
 8020300:	e6ad      	b.n	802005e <tcp_write+0x37e>
 8020302:	bf00      	nop
 8020304:	080461d0 	.word	0x080461d0
 8020308:	080463ec 	.word	0x080463ec
 802030c:	0802b43c 	.word	0x0802b43c
 8020310:	080463d4 	.word	0x080463d4
 8020314:	0804655c 	.word	0x0804655c
 8020318:	080464ec 	.word	0x080464ec
 802031c:	08046364 	.word	0x08046364
 8020320:	08046524 	.word	0x08046524
 8020324:	0804642c 	.word	0x0804642c
 8020328:	08046330 	.word	0x08046330
 802032c:	08046318 	.word	0x08046318

08020330 <tcp_split_unsent_seg>:
{
 8020330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8020334:	4605      	mov	r5, r0
{
 8020336:	b083      	sub	sp, #12
 8020338:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802033a:	2800      	cmp	r0, #0
 802033c:	f000 80a7 	beq.w	802048e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 8020340:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 8020342:	b376      	cbz	r6, 80203a2 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 8020344:	2c00      	cmp	r4, #0
 8020346:	f000 80b3 	beq.w	80204b0 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 802034a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 802034e:	45a1      	cmp	r9, r4
 8020350:	f240 8099 	bls.w	8020486 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8020354:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8020356:	42a3      	cmp	r3, r4
 8020358:	d328      	bcc.n	80203ac <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 802035a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 802035e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020362:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020366:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020368:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 802036c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020370:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020374:	eb08 010b 	add.w	r1, r8, fp
 8020378:	b289      	uxth	r1, r1
 802037a:	f7fb ff47 	bl	801c20c <pbuf_alloc>
  if (p == NULL) {
 802037e:	4607      	mov	r7, r0
 8020380:	b178      	cbz	r0, 80203a2 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 8020382:	6870      	ldr	r0, [r6, #4]
 8020384:	8932      	ldrh	r2, [r6, #8]
 8020386:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020388:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 802038a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 802038c:	4642      	mov	r2, r8
 802038e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 8020390:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020392:	b29b      	uxth	r3, r3
 8020394:	f7fc f9b0 	bl	801c6f8 <pbuf_copy_partial>
 8020398:	4540      	cmp	r0, r8
 802039a:	d01d      	beq.n	80203d8 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 802039c:	4638      	mov	r0, r7
 802039e:	f7fc f907 	bl	801c5b0 <pbuf_free>
  return ERR_MEM;
 80203a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80203a6:	b003      	add	sp, #12
 80203a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80203ac:	4b45      	ldr	r3, [pc, #276]	; (80204c4 <tcp_split_unsent_seg+0x194>)
 80203ae:	f240 325b 	movw	r2, #859	; 0x35b
 80203b2:	4945      	ldr	r1, [pc, #276]	; (80204c8 <tcp_split_unsent_seg+0x198>)
 80203b4:	4845      	ldr	r0, [pc, #276]	; (80204cc <tcp_split_unsent_seg+0x19c>)
 80203b6:	f006 f9c5 	bl	8026744 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80203ba:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80203be:	f1b9 0f00 	cmp.w	r9, #0
 80203c2:	d1ca      	bne.n	802035a <tcp_split_unsent_seg+0x2a>
 80203c4:	4b3f      	ldr	r3, [pc, #252]	; (80204c4 <tcp_split_unsent_seg+0x194>)
 80203c6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80203ca:	4941      	ldr	r1, [pc, #260]	; (80204d0 <tcp_split_unsent_seg+0x1a0>)
 80203cc:	483f      	ldr	r0, [pc, #252]	; (80204cc <tcp_split_unsent_seg+0x19c>)
 80203ce:	f006 f9b9 	bl	8026744 <iprintf>
  remainder = useg->len - split;
 80203d2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80203d6:	e7c0      	b.n	802035a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203d8:	68f3      	ldr	r3, [r6, #12]
 80203da:	8998      	ldrh	r0, [r3, #12]
 80203dc:	f7fa f8ac 	bl	801a538 <lwip_htons>
  if (split_flags & TCP_PSH) {
 80203e0:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203e4:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 80203e8:	d159      	bne.n	802049e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203ea:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 80203ee:	f018 0f01 	tst.w	r8, #1
 80203f2:	d003      	beq.n	80203fc <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 80203f4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 80203f8:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80203fc:	68f3      	ldr	r3, [r6, #12]
 80203fe:	6858      	ldr	r0, [r3, #4]
 8020400:	f7fa f89e 	bl	801a540 <lwip_htonl>
 8020404:	f8cd a000 	str.w	sl, [sp]
 8020408:	1823      	adds	r3, r4, r0
 802040a:	465a      	mov	r2, fp
 802040c:	4639      	mov	r1, r7
 802040e:	4628      	mov	r0, r5
 8020410:	f7ff fb1c 	bl	801fa4c <tcp_create_segment>
  if (seg == NULL) {
 8020414:	4682      	mov	sl, r0
 8020416:	2800      	cmp	r0, #0
 8020418:	d0c0      	beq.n	802039c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802041a:	6870      	ldr	r0, [r6, #4]
 802041c:	eba4 0409 	sub.w	r4, r4, r9
 8020420:	f7fc f8da 	bl	801c5d8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020424:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020426:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802042a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 802042c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802042e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020430:	4610      	mov	r0, r2
 8020432:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020434:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020438:	b289      	uxth	r1, r1
 802043a:	f7fb ffa1 	bl	801c380 <pbuf_realloc>
  useg->len -= remainder;
 802043e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020440:	4640      	mov	r0, r8
  useg->len -= remainder;
 8020442:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020444:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 8020446:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020448:	899c      	ldrh	r4, [r3, #12]
 802044a:	f7fa f875 	bl	801a538 <lwip_htons>
 802044e:	68f3      	ldr	r3, [r6, #12]
 8020450:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020452:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020454:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020456:	f7fc f8bf 	bl	801c5d8 <pbuf_clen>
 802045a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802045e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020460:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020464:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020468:	f7fc f8b6 	bl	801c5d8 <pbuf_clen>
 802046c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8020470:	4418      	add	r0, r3
  seg->next = useg->next;
 8020472:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020474:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8020478:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 802047c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 8020480:	f8da 3000 	ldr.w	r3, [sl]
 8020484:	b183      	cbz	r3, 80204a8 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 8020486:	2000      	movs	r0, #0
}
 8020488:	b003      	add	sp, #12
 802048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802048e:	4b0d      	ldr	r3, [pc, #52]	; (80204c4 <tcp_split_unsent_seg+0x194>)
 8020490:	f240 324b 	movw	r2, #843	; 0x34b
 8020494:	490f      	ldr	r1, [pc, #60]	; (80204d4 <tcp_split_unsent_seg+0x1a4>)
 8020496:	480d      	ldr	r0, [pc, #52]	; (80204cc <tcp_split_unsent_seg+0x19c>)
 8020498:	f006 f954 	bl	8026744 <iprintf>
 802049c:	e750      	b.n	8020340 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 802049e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80204a2:	f04f 0b08 	mov.w	fp, #8
 80204a6:	e7a2      	b.n	80203ee <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 80204a8:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 80204aa:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80204ae:	e77a      	b.n	80203a6 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80204b0:	4b04      	ldr	r3, [pc, #16]	; (80204c4 <tcp_split_unsent_seg+0x194>)
 80204b2:	f240 3253 	movw	r2, #851	; 0x353
 80204b6:	4908      	ldr	r1, [pc, #32]	; (80204d8 <tcp_split_unsent_seg+0x1a8>)
 80204b8:	4804      	ldr	r0, [pc, #16]	; (80204cc <tcp_split_unsent_seg+0x19c>)
 80204ba:	f006 f943 	bl	8026744 <iprintf>
    return ERR_VAL;
 80204be:	f06f 0005 	mvn.w	r0, #5
 80204c2:	e770      	b.n	80203a6 <tcp_split_unsent_seg+0x76>
 80204c4:	080461d0 	.word	0x080461d0
 80204c8:	080465c4 	.word	0x080465c4
 80204cc:	0802b43c 	.word	0x0802b43c
 80204d0:	080465d4 	.word	0x080465d4
 80204d4:	0804657c 	.word	0x0804657c
 80204d8:	080465a0 	.word	0x080465a0

080204dc <tcp_enqueue_flags>:
{
 80204dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80204e0:	f011 0703 	ands.w	r7, r1, #3
{
 80204e4:	b082      	sub	sp, #8
 80204e6:	460d      	mov	r5, r1
 80204e8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80204ea:	d05e      	beq.n	80205aa <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80204ec:	2c00      	cmp	r4, #0
 80204ee:	d065      	beq.n	80205bc <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 80204f0:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80204f4:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 80204f8:	d049      	beq.n	802058e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80204fa:	2104      	movs	r1, #4
 80204fc:	2036      	movs	r0, #54	; 0x36
 80204fe:	f7fb fe85 	bl	801c20c <pbuf_alloc>
 8020502:	4606      	mov	r6, r0
 8020504:	2800      	cmp	r0, #0
 8020506:	d049      	beq.n	802059c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020508:	8943      	ldrh	r3, [r0, #10]
 802050a:	2b03      	cmp	r3, #3
 802050c:	d872      	bhi.n	80205f4 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 802050e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020512:	4b40      	ldr	r3, [pc, #256]	; (8020614 <tcp_enqueue_flags+0x138>)
 8020514:	f240 4239 	movw	r2, #1081	; 0x439
 8020518:	493f      	ldr	r1, [pc, #252]	; (8020618 <tcp_enqueue_flags+0x13c>)
 802051a:	4840      	ldr	r0, [pc, #256]	; (802061c <tcp_enqueue_flags+0x140>)
 802051c:	f006 f912 	bl	8026744 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8020520:	4631      	mov	r1, r6
 8020522:	f8cd 8000 	str.w	r8, [sp]
 8020526:	462a      	mov	r2, r5
 8020528:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802052a:	4620      	mov	r0, r4
 802052c:	f7ff fa8e 	bl	801fa4c <tcp_create_segment>
 8020530:	4606      	mov	r6, r0
 8020532:	2800      	cmp	r0, #0
 8020534:	d032      	beq.n	802059c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020536:	68c3      	ldr	r3, [r0, #12]
 8020538:	079a      	lsls	r2, r3, #30
 802053a:	d153      	bne.n	80205e4 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802053c:	8933      	ldrh	r3, [r6, #8]
 802053e:	2b00      	cmp	r3, #0
 8020540:	d144      	bne.n	80205cc <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 8020542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8020544:	2b00      	cmp	r3, #0
 8020546:	d04b      	beq.n	80205e0 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020548:	461a      	mov	r2, r3
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	2b00      	cmp	r3, #0
 802054e:	d1fb      	bne.n	8020548 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 8020550:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8020552:	2300      	movs	r3, #0
 8020554:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020558:	b117      	cbz	r7, 8020560 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 802055a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802055c:	3301      	adds	r3, #1
 802055e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8020560:	07eb      	lsls	r3, r5, #31
 8020562:	d503      	bpl.n	802056c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 8020564:	8b63      	ldrh	r3, [r4, #26]
 8020566:	f043 0320 	orr.w	r3, r3, #32
 802056a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802056c:	6870      	ldr	r0, [r6, #4]
 802056e:	f7fc f833 	bl	801c5d8 <pbuf_clen>
 8020572:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8020576:	4418      	add	r0, r3
 8020578:	b280      	uxth	r0, r0
 802057a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 802057e:	b118      	cbz	r0, 8020588 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020580:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8020582:	2800      	cmp	r0, #0
 8020584:	d039      	beq.n	80205fa <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8020586:	2000      	movs	r0, #0
}
 8020588:	b002      	add	sp, #8
 802058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802058e:	4641      	mov	r1, r8
 8020590:	2036      	movs	r0, #54	; 0x36
 8020592:	f7fb fe3b 	bl	801c20c <pbuf_alloc>
 8020596:	4606      	mov	r6, r0
 8020598:	2800      	cmp	r0, #0
 802059a:	d1c1      	bne.n	8020520 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802059c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 802059e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80205a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205a6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 80205a8:	e7ee      	b.n	8020588 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80205aa:	4b1a      	ldr	r3, [pc, #104]	; (8020614 <tcp_enqueue_flags+0x138>)
 80205ac:	f240 4211 	movw	r2, #1041	; 0x411
 80205b0:	491b      	ldr	r1, [pc, #108]	; (8020620 <tcp_enqueue_flags+0x144>)
 80205b2:	481a      	ldr	r0, [pc, #104]	; (802061c <tcp_enqueue_flags+0x140>)
 80205b4:	f006 f8c6 	bl	8026744 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80205b8:	2c00      	cmp	r4, #0
 80205ba:	d199      	bne.n	80204f0 <tcp_enqueue_flags+0x14>
 80205bc:	4b15      	ldr	r3, [pc, #84]	; (8020614 <tcp_enqueue_flags+0x138>)
 80205be:	f240 4213 	movw	r2, #1043	; 0x413
 80205c2:	4918      	ldr	r1, [pc, #96]	; (8020624 <tcp_enqueue_flags+0x148>)
 80205c4:	4815      	ldr	r0, [pc, #84]	; (802061c <tcp_enqueue_flags+0x140>)
 80205c6:	f006 f8bd 	bl	8026744 <iprintf>
 80205ca:	e791      	b.n	80204f0 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80205cc:	4b11      	ldr	r3, [pc, #68]	; (8020614 <tcp_enqueue_flags+0x138>)
 80205ce:	f240 4243 	movw	r2, #1091	; 0x443
 80205d2:	4915      	ldr	r1, [pc, #84]	; (8020628 <tcp_enqueue_flags+0x14c>)
 80205d4:	4811      	ldr	r0, [pc, #68]	; (802061c <tcp_enqueue_flags+0x140>)
 80205d6:	f006 f8b5 	bl	8026744 <iprintf>
  if (pcb->unsent == NULL) {
 80205da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d1b3      	bne.n	8020548 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 80205e0:	66e6      	str	r6, [r4, #108]	; 0x6c
 80205e2:	e7b6      	b.n	8020552 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80205e4:	4b0b      	ldr	r3, [pc, #44]	; (8020614 <tcp_enqueue_flags+0x138>)
 80205e6:	f240 4242 	movw	r2, #1090	; 0x442
 80205ea:	4910      	ldr	r1, [pc, #64]	; (802062c <tcp_enqueue_flags+0x150>)
 80205ec:	480b      	ldr	r0, [pc, #44]	; (802061c <tcp_enqueue_flags+0x140>)
 80205ee:	f006 f8a9 	bl	8026744 <iprintf>
 80205f2:	e7a3      	b.n	802053c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 80205f4:	f04f 0801 	mov.w	r8, #1
 80205f8:	e792      	b.n	8020520 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80205fa:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 80205fc:	2c00      	cmp	r4, #0
 80205fe:	d1c3      	bne.n	8020588 <tcp_enqueue_flags+0xac>
 8020600:	4b04      	ldr	r3, [pc, #16]	; (8020614 <tcp_enqueue_flags+0x138>)
 8020602:	f240 4265 	movw	r2, #1125	; 0x465
 8020606:	490a      	ldr	r1, [pc, #40]	; (8020630 <tcp_enqueue_flags+0x154>)
 8020608:	4804      	ldr	r0, [pc, #16]	; (802061c <tcp_enqueue_flags+0x140>)
 802060a:	f006 f89b 	bl	8026744 <iprintf>
  return ERR_OK;
 802060e:	4620      	mov	r0, r4
 8020610:	e7ba      	b.n	8020588 <tcp_enqueue_flags+0xac>
 8020612:	bf00      	nop
 8020614:	080461d0 	.word	0x080461d0
 8020618:	0804665c 	.word	0x0804665c
 802061c:	0802b43c 	.word	0x0802b43c
 8020620:	080465e4 	.word	0x080465e4
 8020624:	0804663c 	.word	0x0804663c
 8020628:	080466b0 	.word	0x080466b0
 802062c:	08046698 	.word	0x08046698
 8020630:	080466dc 	.word	0x080466dc

08020634 <tcp_send_fin>:
{
 8020634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8020636:	4606      	mov	r6, r0
 8020638:	b188      	cbz	r0, 802065e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 802063a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 802063c:	b14c      	cbz	r4, 8020652 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802063e:	4625      	mov	r5, r4
 8020640:	6824      	ldr	r4, [r4, #0]
 8020642:	2c00      	cmp	r4, #0
 8020644:	d1fb      	bne.n	802063e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020646:	68eb      	ldr	r3, [r5, #12]
 8020648:	8998      	ldrh	r0, [r3, #12]
 802064a:	f7f9 ff75 	bl	801a538 <lwip_htons>
 802064e:	0743      	lsls	r3, r0, #29
 8020650:	d00d      	beq.n	802066e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020652:	4630      	mov	r0, r6
 8020654:	2101      	movs	r1, #1
}
 8020656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 802065a:	f7ff bf3f 	b.w	80204dc <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 802065e:	4b0b      	ldr	r3, [pc, #44]	; (802068c <tcp_send_fin+0x58>)
 8020660:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8020664:	490a      	ldr	r1, [pc, #40]	; (8020690 <tcp_send_fin+0x5c>)
 8020666:	480b      	ldr	r0, [pc, #44]	; (8020694 <tcp_send_fin+0x60>)
 8020668:	f006 f86c 	bl	8026744 <iprintf>
 802066c:	e7e5      	b.n	802063a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802066e:	68eb      	ldr	r3, [r5, #12]
 8020670:	2001      	movs	r0, #1
 8020672:	899f      	ldrh	r7, [r3, #12]
 8020674:	f7f9 ff60 	bl	801a538 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8020678:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802067a:	4338      	orrs	r0, r7
 802067c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 802067e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020682:	8190      	strh	r0, [r2, #12]
}
 8020684:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 8020686:	8373      	strh	r3, [r6, #26]
}
 8020688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802068a:	bf00      	nop
 802068c:	080461d0 	.word	0x080461d0
 8020690:	08046704 	.word	0x08046704
 8020694:	0802b43c 	.word	0x0802b43c

08020698 <tcp_rexmit_rto_prepare>:
{
 8020698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 802069a:	4605      	mov	r5, r0
 802069c:	2800      	cmp	r0, #0
 802069e:	d032      	beq.n	8020706 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 80206a0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80206a2:	b132      	cbz	r2, 80206b2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80206a4:	6813      	ldr	r3, [r2, #0]
 80206a6:	4614      	mov	r4, r2
 80206a8:	b15b      	cbz	r3, 80206c2 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 80206aa:	6863      	ldr	r3, [r4, #4]
 80206ac:	7b9b      	ldrb	r3, [r3, #14]
 80206ae:	2b01      	cmp	r3, #1
 80206b0:	d003      	beq.n	80206ba <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 80206b2:	f06f 0305 	mvn.w	r3, #5
}
 80206b6:	4618      	mov	r0, r3
 80206b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80206ba:	6824      	ldr	r4, [r4, #0]
 80206bc:	6823      	ldr	r3, [r4, #0]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d1f3      	bne.n	80206aa <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 80206c2:	6863      	ldr	r3, [r4, #4]
 80206c4:	7b9b      	ldrb	r3, [r3, #14]
 80206c6:	2b01      	cmp	r3, #1
 80206c8:	d1f3      	bne.n	80206b2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80206ca:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80206cc:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80206ce:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80206d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 80206d4:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80206d6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206d8:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80206da:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206de:	6858      	ldr	r0, [r3, #4]
 80206e0:	f7f9 ff2e 	bl	801a540 <lwip_htonl>
 80206e4:	68e3      	ldr	r3, [r4, #12]
 80206e6:	4606      	mov	r6, r0
 80206e8:	8924      	ldrh	r4, [r4, #8]
 80206ea:	8998      	ldrh	r0, [r3, #12]
 80206ec:	f7f9 ff24 	bl	801a538 <lwip_htons>
 80206f0:	f010 0003 	ands.w	r0, r0, #3
 80206f4:	4426      	add	r6, r4
  return ERR_OK;
 80206f6:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206f8:	bf18      	it	ne
 80206fa:	2001      	movne	r0, #1
  pcb->rttest = 0;
 80206fc:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206fe:	4430      	add	r0, r6
 8020700:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 8020702:	4618      	mov	r0, r3
 8020704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020706:	4b04      	ldr	r3, [pc, #16]	; (8020718 <tcp_rexmit_rto_prepare+0x80>)
 8020708:	f240 6263 	movw	r2, #1635	; 0x663
 802070c:	4903      	ldr	r1, [pc, #12]	; (802071c <tcp_rexmit_rto_prepare+0x84>)
 802070e:	4804      	ldr	r0, [pc, #16]	; (8020720 <tcp_rexmit_rto_prepare+0x88>)
 8020710:	f006 f818 	bl	8026744 <iprintf>
 8020714:	e7c4      	b.n	80206a0 <tcp_rexmit_rto_prepare+0x8>
 8020716:	bf00      	nop
 8020718:	080461d0 	.word	0x080461d0
 802071c:	08046720 	.word	0x08046720
 8020720:	0802b43c 	.word	0x0802b43c

08020724 <tcp_rexmit>:
{
 8020724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020726:	4607      	mov	r7, r0
 8020728:	2800      	cmp	r0, #0
 802072a:	d031      	beq.n	8020790 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 802072c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 802072e:	b34e      	cbz	r6, 8020784 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8020730:	6873      	ldr	r3, [r6, #4]
 8020732:	7b9b      	ldrb	r3, [r3, #14]
 8020734:	2b01      	cmp	r3, #1
 8020736:	d125      	bne.n	8020784 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 8020738:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 802073a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 802073e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 8020740:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 8020742:	b91b      	cbnz	r3, 802074c <tcp_rexmit+0x28>
 8020744:	e00f      	b.n	8020766 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 8020746:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8020748:	682b      	ldr	r3, [r5, #0]
 802074a:	b163      	cbz	r3, 8020766 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802074c:	68db      	ldr	r3, [r3, #12]
 802074e:	6858      	ldr	r0, [r3, #4]
 8020750:	f7f9 fef6 	bl	801a540 <lwip_htonl>
 8020754:	68f3      	ldr	r3, [r6, #12]
 8020756:	4604      	mov	r4, r0
 8020758:	6858      	ldr	r0, [r3, #4]
 802075a:	f7f9 fef1 	bl	801a540 <lwip_htonl>
 802075e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8020760:	2c00      	cmp	r4, #0
 8020762:	dbf0      	blt.n	8020746 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 8020764:	682b      	ldr	r3, [r5, #0]
 8020766:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8020768:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 802076a:	6833      	ldr	r3, [r6, #0]
 802076c:	b16b      	cbz	r3, 802078a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 802076e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8020772:	2bff      	cmp	r3, #255	; 0xff
 8020774:	d002      	beq.n	802077c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8020776:	3301      	adds	r3, #1
 8020778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 802077c:	2300      	movs	r3, #0
  return ERR_OK;
 802077e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8020780:	637b      	str	r3, [r7, #52]	; 0x34
}
 8020782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8020784:	f06f 0005 	mvn.w	r0, #5
}
 8020788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 802078a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 802078e:	e7ee      	b.n	802076e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020790:	4b03      	ldr	r3, [pc, #12]	; (80207a0 <tcp_rexmit+0x7c>)
 8020792:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8020796:	4903      	ldr	r1, [pc, #12]	; (80207a4 <tcp_rexmit+0x80>)
 8020798:	4803      	ldr	r0, [pc, #12]	; (80207a8 <tcp_rexmit+0x84>)
 802079a:	f005 ffd3 	bl	8026744 <iprintf>
 802079e:	e7c5      	b.n	802072c <tcp_rexmit+0x8>
 80207a0:	080461d0 	.word	0x080461d0
 80207a4:	08046744 	.word	0x08046744
 80207a8:	0802b43c 	.word	0x0802b43c

080207ac <tcp_rexmit_fast>:
{
 80207ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80207ae:	4604      	mov	r4, r0
 80207b0:	b340      	cbz	r0, 8020804 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80207b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80207b4:	b113      	cbz	r3, 80207bc <tcp_rexmit_fast+0x10>
 80207b6:	8b63      	ldrh	r3, [r4, #26]
 80207b8:	075b      	lsls	r3, r3, #29
 80207ba:	d500      	bpl.n	80207be <tcp_rexmit_fast+0x12>
}
 80207bc:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 80207be:	4620      	mov	r0, r4
 80207c0:	f7ff ffb0 	bl	8020724 <tcp_rexmit>
 80207c4:	2800      	cmp	r0, #0
 80207c6:	d1f9      	bne.n	80207bc <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207c8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80207cc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207d0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207d2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207d4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207d8:	bf28      	it	cs
 80207da:	4619      	movcs	r1, r3
 80207dc:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207de:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207e2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207e6:	d902      	bls.n	80207ee <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80207e8:	b283      	uxth	r3, r0
 80207ea:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80207ee:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80207f0:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 80207f2:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80207f6:	4413      	add	r3, r2
      pcb->rtime = 0;
 80207f8:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80207fa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80207fe:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 8020800:	8622      	strh	r2, [r4, #48]	; 0x30
}
 8020802:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020804:	4b03      	ldr	r3, [pc, #12]	; (8020814 <tcp_rexmit_fast+0x68>)
 8020806:	f240 62f9 	movw	r2, #1785	; 0x6f9
 802080a:	4903      	ldr	r1, [pc, #12]	; (8020818 <tcp_rexmit_fast+0x6c>)
 802080c:	4803      	ldr	r0, [pc, #12]	; (802081c <tcp_rexmit_fast+0x70>)
 802080e:	f005 ff99 	bl	8026744 <iprintf>
 8020812:	e7ce      	b.n	80207b2 <tcp_rexmit_fast+0x6>
 8020814:	080461d0 	.word	0x080461d0
 8020818:	0804675c 	.word	0x0804675c
 802081c:	0802b43c 	.word	0x0802b43c

08020820 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020824:	b084      	sub	sp, #16
 8020826:	4607      	mov	r7, r0
 8020828:	460e      	mov	r6, r1
 802082a:	4615      	mov	r5, r2
 802082c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020830:	461c      	mov	r4, r3
{
 8020832:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8020836:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802083a:	b1fb      	cbz	r3, 802087c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802083c:	f1b8 0f00 	cmp.w	r8, #0
 8020840:	d026      	beq.n	8020890 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020842:	4630      	mov	r0, r6
 8020844:	f7f9 fe7c 	bl	801a540 <lwip_htonl>
 8020848:	2114      	movs	r1, #20
 802084a:	4602      	mov	r2, r0
 802084c:	4628      	mov	r0, r5
 802084e:	f246 0508 	movw	r5, #24584	; 0x6008
 8020852:	464b      	mov	r3, r9
 8020854:	f8cd a000 	str.w	sl, [sp]
 8020858:	e9cd 1501 	strd	r1, r5, [sp, #4]
 802085c:	2100      	movs	r1, #0
 802085e:	f7ff f971 	bl	801fb44 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020862:	4601      	mov	r1, r0
 8020864:	b138      	cbz	r0, 8020876 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020866:	4643      	mov	r3, r8
 8020868:	4622      	mov	r2, r4
 802086a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 802086c:	b004      	add	sp, #16
 802086e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020872:	f7ff b9d5 	b.w	801fc20 <tcp_output_control_segment>
}
 8020876:	b004      	add	sp, #16
 8020878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802087c:	4b08      	ldr	r3, [pc, #32]	; (80208a0 <tcp_rst+0x80>)
 802087e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020882:	4908      	ldr	r1, [pc, #32]	; (80208a4 <tcp_rst+0x84>)
 8020884:	4808      	ldr	r0, [pc, #32]	; (80208a8 <tcp_rst+0x88>)
 8020886:	f005 ff5d 	bl	8026744 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802088a:	f1b8 0f00 	cmp.w	r8, #0
 802088e:	d1d8      	bne.n	8020842 <tcp_rst+0x22>
 8020890:	4b03      	ldr	r3, [pc, #12]	; (80208a0 <tcp_rst+0x80>)
 8020892:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8020896:	4905      	ldr	r1, [pc, #20]	; (80208ac <tcp_rst+0x8c>)
 8020898:	4803      	ldr	r0, [pc, #12]	; (80208a8 <tcp_rst+0x88>)
 802089a:	f005 ff53 	bl	8026744 <iprintf>
 802089e:	e7d0      	b.n	8020842 <tcp_rst+0x22>
 80208a0:	080461d0 	.word	0x080461d0
 80208a4:	0804677c 	.word	0x0804677c
 80208a8:	0802b43c 	.word	0x0802b43c
 80208ac:	08046798 	.word	0x08046798

080208b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80208b0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80208b2:	4604      	mov	r4, r0
 80208b4:	b1c0      	cbz	r0, 80208e8 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80208b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80208b8:	f7f9 fe42 	bl	801a540 <lwip_htonl>
 80208bc:	2100      	movs	r1, #0
 80208be:	4602      	mov	r2, r0
 80208c0:	4620      	mov	r0, r4
 80208c2:	f7ff f985 	bl	801fbd0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80208c6:	4601      	mov	r1, r0
 80208c8:	b1b0      	cbz	r0, 80208f8 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80208ca:	1d23      	adds	r3, r4, #4
 80208cc:	4622      	mov	r2, r4
 80208ce:	4620      	mov	r0, r4
 80208d0:	f7ff f9a6 	bl	801fc20 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208d4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80208d6:	b118      	cbz	r0, 80208e0 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208d8:	f043 0303 	orr.w	r3, r3, #3
 80208dc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80208de:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208e0:	f023 0303 	bic.w	r3, r3, #3
 80208e4:	8363      	strh	r3, [r4, #26]
}
 80208e6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80208e8:	4b07      	ldr	r3, [pc, #28]	; (8020908 <tcp_send_empty_ack+0x58>)
 80208ea:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80208ee:	4907      	ldr	r1, [pc, #28]	; (802090c <tcp_send_empty_ack+0x5c>)
 80208f0:	4807      	ldr	r0, [pc, #28]	; (8020910 <tcp_send_empty_ack+0x60>)
 80208f2:	f005 ff27 	bl	8026744 <iprintf>
 80208f6:	e7de      	b.n	80208b6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208f8:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 80208fa:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208fe:	f043 0303 	orr.w	r3, r3, #3
 8020902:	8363      	strh	r3, [r4, #26]
}
 8020904:	bd10      	pop	{r4, pc}
 8020906:	bf00      	nop
 8020908:	080461d0 	.word	0x080461d0
 802090c:	080467b4 	.word	0x080467b4
 8020910:	0802b43c 	.word	0x0802b43c

08020914 <tcp_output>:
{
 8020914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020918:	4604      	mov	r4, r0
{
 802091a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 802091c:	2800      	cmp	r0, #0
 802091e:	f000 81bc 	beq.w	8020c9a <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020922:	7d23      	ldrb	r3, [r4, #20]
 8020924:	2b01      	cmp	r3, #1
 8020926:	f000 8173 	beq.w	8020c10 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 802092a:	4bb3      	ldr	r3, [pc, #716]	; (8020bf8 <tcp_output+0x2e4>)
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	42a3      	cmp	r3, r4
 8020930:	f000 817a 	beq.w	8020c28 <tcp_output+0x314>
  seg = pcb->unsent;
 8020934:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020936:	b345      	cbz	r5, 802098a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020938:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802093a:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802093e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8020942:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020946:	2800      	cmp	r0, #0
 8020948:	f040 81af 	bne.w	8020caa <tcp_output+0x396>
    return ip_route(src, dst);
 802094c:	4648      	mov	r0, r9
 802094e:	f003 fa2b 	bl	8023da8 <ip4_route>
 8020952:	4682      	mov	sl, r0
  if (netif == NULL) {
 8020954:	f1ba 0f00 	cmp.w	sl, #0
 8020958:	f000 81b9 	beq.w	8020cce <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 802095c:	6823      	ldr	r3, [r4, #0]
 802095e:	b913      	cbnz	r3, 8020966 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8020960:	f8da 3004 	ldr.w	r3, [sl, #4]
 8020964:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020966:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020968:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802096a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802096c:	bf28      	it	cs
 802096e:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020970:	f7f9 fde6 	bl	801a540 <lwip_htonl>
 8020974:	892b      	ldrh	r3, [r5, #8]
 8020976:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020978:	1a9b      	subs	r3, r3, r2
 802097a:	4418      	add	r0, r3
 802097c:	42b8      	cmp	r0, r7
 802097e:	d90f      	bls.n	80209a0 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020980:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8020984:	42bb      	cmp	r3, r7
 8020986:	f000 8159 	beq.w	8020c3c <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 802098a:	8b62      	ldrh	r2, [r4, #26]
 802098c:	0791      	lsls	r1, r2, #30
 802098e:	f100 814f 	bmi.w	8020c30 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 8020996:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020998:	8362      	strh	r2, [r4, #26]
}
 802099a:	b005      	add	sp, #20
 802099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 80209a0:	2300      	movs	r3, #0
 80209a2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 80209a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	f000 8157 	beq.w	8020c5c <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 80209ae:	4698      	mov	r8, r3
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d1fb      	bne.n	80209ae <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 80209b6:	464e      	mov	r6, r9
 80209b8:	e0b7      	b.n	8020b2a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80209ba:	68eb      	ldr	r3, [r5, #12]
 80209bc:	2010      	movs	r0, #16
 80209be:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80209c2:	f7f9 fdb9 	bl	801a538 <lwip_htons>
 80209c6:	ea49 0000 	orr.w	r0, r9, r0
 80209ca:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80209ce:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 80209d2:	686b      	ldr	r3, [r5, #4]
 80209d4:	7b9b      	ldrb	r3, [r3, #14]
 80209d6:	2b01      	cmp	r3, #1
 80209d8:	d160      	bne.n	8020a9c <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80209da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80209dc:	f7f9 fdb0 	bl	801a540 <lwip_htonl>
 80209e0:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80209e4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80209e6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80209ea:	f7f9 fda5 	bl	801a538 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80209ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80209f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80209f2:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80209f6:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80209f8:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80209fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80209fe:	7aab      	ldrb	r3, [r5, #10]
 8020a00:	07db      	lsls	r3, r3, #31
 8020a02:	f100 80d0 	bmi.w	8020ba6 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020a06:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 8020a0a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	da01      	bge.n	8020a16 <tcp_output+0x102>
    pcb->rtime = 0;
 8020a12:	2300      	movs	r3, #0
 8020a14:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8020a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	f000 80b9 	beq.w	8020b90 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a1e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 8020a20:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a24:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 8020a26:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a28:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 8020a2c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 8020a2e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a32:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 8020a34:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 8020a36:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 8020a38:	b292      	uxth	r2, r2
  seg->p->len -= len;
 8020a3a:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 8020a3c:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 8020a3e:	f889 c010 	strb.w	ip, [r9, #16]
 8020a42:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8020a46:	7aab      	ldrb	r3, [r5, #10]
 8020a48:	009b      	lsls	r3, r3, #2
 8020a4a:	f003 0304 	and.w	r3, r3, #4
 8020a4e:	3314      	adds	r3, #20
 8020a50:	444b      	add	r3, r9
 8020a52:	459b      	cmp	fp, r3
 8020a54:	d00a      	beq.n	8020a6c <tcp_output+0x158>
 8020a56:	f240 621c 	movw	r2, #1564	; 0x61c
 8020a5a:	4b68      	ldr	r3, [pc, #416]	; (8020bfc <tcp_output+0x2e8>)
 8020a5c:	4968      	ldr	r1, [pc, #416]	; (8020c00 <tcp_output+0x2ec>)
 8020a5e:	4869      	ldr	r0, [pc, #420]	; (8020c04 <tcp_output+0x2f0>)
 8020a60:	f005 fe70 	bl	8026744 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8020a64:	6868      	ldr	r0, [r5, #4]
 8020a66:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020a6a:	8902      	ldrh	r2, [r0, #8]
 8020a6c:	4623      	mov	r3, r4
 8020a6e:	2106      	movs	r1, #6
 8020a70:	9600      	str	r6, [sp, #0]
 8020a72:	f7fa faf5 	bl	801b060 <ip_chksum_pseudo>
 8020a76:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020a7a:	6868      	ldr	r0, [r5, #4]
 8020a7c:	4632      	mov	r2, r6
 8020a7e:	f8cd a008 	str.w	sl, [sp, #8]
 8020a82:	4621      	mov	r1, r4
 8020a84:	7aa3      	ldrb	r3, [r4, #10]
 8020a86:	9300      	str	r3, [sp, #0]
 8020a88:	2306      	movs	r3, #6
 8020a8a:	9301      	str	r3, [sp, #4]
 8020a8c:	7ae3      	ldrb	r3, [r4, #11]
 8020a8e:	f003 fb55 	bl	802413c <ip4_output_if>
    if (err != ERR_OK) {
 8020a92:	2800      	cmp	r0, #0
 8020a94:	f040 8116 	bne.w	8020cc4 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a98:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 8020a9c:	682b      	ldr	r3, [r5, #0]
 8020a9e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8020aa0:	7d23      	ldrb	r3, [r4, #20]
 8020aa2:	2b02      	cmp	r3, #2
 8020aa4:	d003      	beq.n	8020aae <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020aa6:	8b63      	ldrh	r3, [r4, #26]
 8020aa8:	f023 0303 	bic.w	r3, r3, #3
 8020aac:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020aae:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020ab2:	f7f9 fd45 	bl	801a540 <lwip_htonl>
 8020ab6:	68eb      	ldr	r3, [r5, #12]
 8020ab8:	4681      	mov	r9, r0
 8020aba:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8020abe:	8998      	ldrh	r0, [r3, #12]
 8020ac0:	f7f9 fd3a 	bl	801a538 <lwip_htons>
 8020ac4:	f010 0003 	ands.w	r0, r0, #3
 8020ac8:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020aca:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020acc:	bf18      	it	ne
 8020ace:	2001      	movne	r0, #1
 8020ad0:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 8020ad2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020ad6:	1a1b      	subs	r3, r3, r0
 8020ad8:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8020ada:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8020adc:	bfb8      	it	lt
 8020ade:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8020ae0:	8998      	ldrh	r0, [r3, #12]
 8020ae2:	f7f9 fd29 	bl	801a538 <lwip_htons>
 8020ae6:	f010 0003 	ands.w	r0, r0, #3
 8020aea:	bf18      	it	ne
 8020aec:	2001      	movne	r0, #1
 8020aee:	eb10 0f09 	cmn.w	r0, r9
 8020af2:	d046      	beq.n	8020b82 <tcp_output+0x26e>
      seg->next = NULL;
 8020af4:	2300      	movs	r3, #0
 8020af6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8020af8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d045      	beq.n	8020b8a <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020afe:	68eb      	ldr	r3, [r5, #12]
 8020b00:	6858      	ldr	r0, [r3, #4]
 8020b02:	f7f9 fd1d 	bl	801a540 <lwip_htonl>
 8020b06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020b0a:	4681      	mov	r9, r0
 8020b0c:	6858      	ldr	r0, [r3, #4]
 8020b0e:	f7f9 fd17 	bl	801a540 <lwip_htonl>
 8020b12:	eba9 0000 	sub.w	r0, r9, r0
 8020b16:	2800      	cmp	r0, #0
 8020b18:	f2c0 80a2 	blt.w	8020c60 <tcp_output+0x34c>
          useg->next = seg;
 8020b1c:	f8c8 5000 	str.w	r5, [r8]
 8020b20:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 8020b22:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 8020b24:	2d00      	cmp	r5, #0
 8020b26:	f000 80c4 	beq.w	8020cb2 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8020b2a:	68eb      	ldr	r3, [r5, #12]
 8020b2c:	6858      	ldr	r0, [r3, #4]
 8020b2e:	f7f9 fd07 	bl	801a540 <lwip_htonl>
 8020b32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020b34:	1ac0      	subs	r0, r0, r3
 8020b36:	892b      	ldrh	r3, [r5, #8]
 8020b38:	4418      	add	r0, r3
  while (seg != NULL &&
 8020b3a:	42b8      	cmp	r0, r7
 8020b3c:	f200 80bb 	bhi.w	8020cb6 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 8020b40:	68eb      	ldr	r3, [r5, #12]
 8020b42:	8998      	ldrh	r0, [r3, #12]
 8020b44:	f7f9 fcf8 	bl	801a538 <lwip_htons>
 8020b48:	0742      	lsls	r2, r0, #29
 8020b4a:	d412      	bmi.n	8020b72 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020b4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020b4e:	b14b      	cbz	r3, 8020b64 <tcp_output+0x250>
 8020b50:	8b63      	ldrh	r3, [r4, #26]
 8020b52:	f013 0f44 	tst.w	r3, #68	; 0x44
 8020b56:	461a      	mov	r2, r3
 8020b58:	d104      	bne.n	8020b64 <tcp_output+0x250>
 8020b5a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8020b5c:	2900      	cmp	r1, #0
 8020b5e:	d038      	beq.n	8020bd2 <tcp_output+0x2be>
 8020b60:	6808      	ldr	r0, [r1, #0]
 8020b62:	b388      	cbz	r0, 8020bc8 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 8020b64:	7d23      	ldrb	r3, [r4, #20]
 8020b66:	2b02      	cmp	r3, #2
 8020b68:	f47f af27 	bne.w	80209ba <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020b6c:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020b70:	e72f      	b.n	80209d2 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 8020b72:	4b22      	ldr	r3, [pc, #136]	; (8020bfc <tcp_output+0x2e8>)
 8020b74:	f240 5236 	movw	r2, #1334	; 0x536
 8020b78:	4923      	ldr	r1, [pc, #140]	; (8020c08 <tcp_output+0x2f4>)
 8020b7a:	4822      	ldr	r0, [pc, #136]	; (8020c04 <tcp_output+0x2f0>)
 8020b7c:	f005 fde2 	bl	8026744 <iprintf>
 8020b80:	e7e4      	b.n	8020b4c <tcp_output+0x238>
      tcp_seg_free(seg);
 8020b82:	4628      	mov	r0, r5
 8020b84:	f7fc fa90 	bl	801d0a8 <tcp_seg_free>
 8020b88:	e7cb      	b.n	8020b22 <tcp_output+0x20e>
        pcb->unacked = seg;
 8020b8a:	46a8      	mov	r8, r5
 8020b8c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 8020b8e:	e7c8      	b.n	8020b22 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 8020b90:	4b1e      	ldr	r3, [pc, #120]	; (8020c0c <tcp_output+0x2f8>)
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020b96:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020b9a:	f7f9 fcd1 	bl	801a540 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020b9e:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020ba2:	63a0      	str	r0, [r4, #56]	; 0x38
 8020ba4:	e73b      	b.n	8020a1e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020ba6:	4632      	mov	r2, r6
 8020ba8:	4651      	mov	r1, sl
 8020baa:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 8020bae:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020bb2:	f7fd fa75 	bl	801e0a0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8020bb6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8020bba:	f7f9 fcc1 	bl	801a540 <lwip_htonl>
 8020bbe:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020bc2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020bc6:	e720      	b.n	8020a0a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020bc8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8020bcc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8020bce:	4584      	cmp	ip, r0
 8020bd0:	d2c8      	bcs.n	8020b64 <tcp_output+0x250>
 8020bd2:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 8020bd6:	2800      	cmp	r0, #0
 8020bd8:	d0c4      	beq.n	8020b64 <tcp_output+0x250>
 8020bda:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 8020bde:	2808      	cmp	r0, #8
 8020be0:	d8c0      	bhi.n	8020b64 <tcp_output+0x250>
 8020be2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8020be6:	d1bd      	bne.n	8020b64 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 8020be8:	2900      	cmp	r1, #0
 8020bea:	f47f aed2 	bne.w	8020992 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 8020bee:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020bf0:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 8020bf2:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8020bf6:	e6cc      	b.n	8020992 <tcp_output+0x7e>
 8020bf8:	2002e4e0 	.word	0x2002e4e0
 8020bfc:	080461d0 	.word	0x080461d0
 8020c00:	0804682c 	.word	0x0804682c
 8020c04:	0802b43c 	.word	0x0802b43c
 8020c08:	08046814 	.word	0x08046814
 8020c0c:	2002e4ac 	.word	0x2002e4ac
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020c10:	4b30      	ldr	r3, [pc, #192]	; (8020cd4 <tcp_output+0x3c0>)
 8020c12:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020c16:	4930      	ldr	r1, [pc, #192]	; (8020cd8 <tcp_output+0x3c4>)
 8020c18:	4830      	ldr	r0, [pc, #192]	; (8020cdc <tcp_output+0x3c8>)
 8020c1a:	f005 fd93 	bl	8026744 <iprintf>
  if (tcp_input_pcb == pcb) {
 8020c1e:	4b30      	ldr	r3, [pc, #192]	; (8020ce0 <tcp_output+0x3cc>)
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	42a3      	cmp	r3, r4
 8020c24:	f47f ae86 	bne.w	8020934 <tcp_output+0x20>
    return ERR_OK;
 8020c28:	2000      	movs	r0, #0
}
 8020c2a:	b005      	add	sp, #20
 8020c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 8020c30:	4620      	mov	r0, r4
}
 8020c32:	b005      	add	sp, #20
 8020c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8020c38:	f7ff be3a 	b.w	80208b0 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020c3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	f47f aea3 	bne.w	802098a <tcp_output+0x76>
 8020c44:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	f47f ae9e 	bne.w	802098a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 8020c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 8020c52:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 8020c56:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 8020c5a:	e696      	b.n	802098a <tcp_output+0x76>
 8020c5c:	4698      	mov	r8, r3
 8020c5e:	e6aa      	b.n	80209b6 <tcp_output+0xa2>
          while (*cur_seg &&
 8020c60:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020c62:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 8020c66:	b92b      	cbnz	r3, 8020c74 <tcp_output+0x360>
 8020c68:	e013      	b.n	8020c92 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 8020c6a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8020c6e:	f8db 3000 	ldr.w	r3, [fp]
 8020c72:	b173      	cbz	r3, 8020c92 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020c74:	68db      	ldr	r3, [r3, #12]
 8020c76:	6858      	ldr	r0, [r3, #4]
 8020c78:	f7f9 fc62 	bl	801a540 <lwip_htonl>
 8020c7c:	68eb      	ldr	r3, [r5, #12]
 8020c7e:	4681      	mov	r9, r0
 8020c80:	6858      	ldr	r0, [r3, #4]
 8020c82:	f7f9 fc5d 	bl	801a540 <lwip_htonl>
 8020c86:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 8020c8a:	2800      	cmp	r0, #0
 8020c8c:	dbed      	blt.n	8020c6a <tcp_output+0x356>
          seg->next = (*cur_seg);
 8020c8e:	f8db 3000 	ldr.w	r3, [fp]
 8020c92:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8020c94:	f8cb 5000 	str.w	r5, [fp]
 8020c98:	e743      	b.n	8020b22 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020c9a:	4b0e      	ldr	r3, [pc, #56]	; (8020cd4 <tcp_output+0x3c0>)
 8020c9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8020ca0:	4910      	ldr	r1, [pc, #64]	; (8020ce4 <tcp_output+0x3d0>)
 8020ca2:	480e      	ldr	r0, [pc, #56]	; (8020cdc <tcp_output+0x3c8>)
 8020ca4:	f005 fd4e 	bl	8026744 <iprintf>
 8020ca8:	e63b      	b.n	8020922 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 8020caa:	f7fb f95b 	bl	801bf64 <netif_get_by_index>
 8020cae:	4682      	mov	sl, r0
 8020cb0:	e650      	b.n	8020954 <tcp_output+0x40>
 8020cb2:	8b63      	ldrh	r3, [r4, #26]
 8020cb4:	e79b      	b.n	8020bee <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020cb6:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 8020cb8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020cba:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 8020cbc:	2900      	cmp	r1, #0
 8020cbe:	f47f ae68 	bne.w	8020992 <tcp_output+0x7e>
 8020cc2:	e794      	b.n	8020bee <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020cc4:	8b63      	ldrh	r3, [r4, #26]
 8020cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cca:	8363      	strh	r3, [r4, #26]
      return err;
 8020ccc:	e665      	b.n	802099a <tcp_output+0x86>
    return ERR_RTE;
 8020cce:	f06f 0003 	mvn.w	r0, #3
 8020cd2:	e662      	b.n	802099a <tcp_output+0x86>
 8020cd4:	080461d0 	.word	0x080461d0
 8020cd8:	080467ec 	.word	0x080467ec
 8020cdc:	0802b43c 	.word	0x0802b43c
 8020ce0:	2002e4e0 	.word	0x2002e4e0
 8020ce4:	080467d4 	.word	0x080467d4

08020ce8 <tcp_rexmit_rto_commit>:
{
 8020ce8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020cea:	4604      	mov	r4, r0
 8020cec:	b158      	cbz	r0, 8020d06 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8020cee:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020cf2:	2bff      	cmp	r3, #255	; 0xff
 8020cf4:	d002      	beq.n	8020cfc <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8020cf6:	3301      	adds	r3, #1
 8020cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020cfc:	4620      	mov	r0, r4
}
 8020cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020d02:	f7ff be07 	b.w	8020914 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020d06:	4b04      	ldr	r3, [pc, #16]	; (8020d18 <tcp_rexmit_rto_commit+0x30>)
 8020d08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020d0c:	4903      	ldr	r1, [pc, #12]	; (8020d1c <tcp_rexmit_rto_commit+0x34>)
 8020d0e:	4804      	ldr	r0, [pc, #16]	; (8020d20 <tcp_rexmit_rto_commit+0x38>)
 8020d10:	f005 fd18 	bl	8026744 <iprintf>
 8020d14:	e7eb      	b.n	8020cee <tcp_rexmit_rto_commit+0x6>
 8020d16:	bf00      	nop
 8020d18:	080461d0 	.word	0x080461d0
 8020d1c:	08046840 	.word	0x08046840
 8020d20:	0802b43c 	.word	0x0802b43c

08020d24 <tcp_rexmit_rto>:
{
 8020d24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020d26:	4604      	mov	r4, r0
 8020d28:	b118      	cbz	r0, 8020d32 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020d2a:	f7ff fcb5 	bl	8020698 <tcp_rexmit_rto_prepare>
 8020d2e:	b198      	cbz	r0, 8020d58 <tcp_rexmit_rto+0x34>
}
 8020d30:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020d32:	4b0f      	ldr	r3, [pc, #60]	; (8020d70 <tcp_rexmit_rto+0x4c>)
 8020d34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8020d38:	490e      	ldr	r1, [pc, #56]	; (8020d74 <tcp_rexmit_rto+0x50>)
 8020d3a:	480f      	ldr	r0, [pc, #60]	; (8020d78 <tcp_rexmit_rto+0x54>)
 8020d3c:	f005 fd02 	bl	8026744 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020d40:	4620      	mov	r0, r4
 8020d42:	f7ff fca9 	bl	8020698 <tcp_rexmit_rto_prepare>
 8020d46:	2800      	cmp	r0, #0
 8020d48:	d1f2      	bne.n	8020d30 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020d4a:	4b09      	ldr	r3, [pc, #36]	; (8020d70 <tcp_rexmit_rto+0x4c>)
 8020d4c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020d50:	490a      	ldr	r1, [pc, #40]	; (8020d7c <tcp_rexmit_rto+0x58>)
 8020d52:	4809      	ldr	r0, [pc, #36]	; (8020d78 <tcp_rexmit_rto+0x54>)
 8020d54:	f005 fcf6 	bl	8026744 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8020d58:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020d5c:	2bff      	cmp	r3, #255	; 0xff
 8020d5e:	d002      	beq.n	8020d66 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8020d60:	3301      	adds	r3, #1
 8020d62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020d66:	4620      	mov	r0, r4
}
 8020d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020d6c:	f7ff bdd2 	b.w	8020914 <tcp_output>
 8020d70:	080461d0 	.word	0x080461d0
 8020d74:	08046864 	.word	0x08046864
 8020d78:	0802b43c 	.word	0x0802b43c
 8020d7c:	08046840 	.word	0x08046840

08020d80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020d80:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020d82:	4604      	mov	r4, r0
 8020d84:	b188      	cbz	r0, 8020daa <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020d86:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8020d88:	3801      	subs	r0, #1
 8020d8a:	f7f9 fbd9 	bl	801a540 <lwip_htonl>
 8020d8e:	2100      	movs	r1, #0
 8020d90:	4602      	mov	r2, r0
 8020d92:	4620      	mov	r0, r4
 8020d94:	f7fe ff1c 	bl	801fbd0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020d98:	4601      	mov	r1, r0
 8020d9a:	b170      	cbz	r0, 8020dba <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020d9c:	1d23      	adds	r3, r4, #4
 8020d9e:	4622      	mov	r2, r4
 8020da0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020da6:	f7fe bf3b 	b.w	801fc20 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020daa:	4b05      	ldr	r3, [pc, #20]	; (8020dc0 <tcp_keepalive+0x40>)
 8020dac:	f640 0224 	movw	r2, #2084	; 0x824
 8020db0:	4904      	ldr	r1, [pc, #16]	; (8020dc4 <tcp_keepalive+0x44>)
 8020db2:	4805      	ldr	r0, [pc, #20]	; (8020dc8 <tcp_keepalive+0x48>)
 8020db4:	f005 fcc6 	bl	8026744 <iprintf>
 8020db8:	e7e5      	b.n	8020d86 <tcp_keepalive+0x6>
}
 8020dba:	f04f 30ff 	mov.w	r0, #4294967295
 8020dbe:	bd10      	pop	{r4, pc}
 8020dc0:	080461d0 	.word	0x080461d0
 8020dc4:	08046880 	.word	0x08046880
 8020dc8:	0802b43c 	.word	0x0802b43c

08020dcc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020dd0:	4604      	mov	r4, r0
 8020dd2:	2800      	cmp	r0, #0
 8020dd4:	d051      	beq.n	8020e7a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020dd6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020dd8:	2d00      	cmp	r5, #0
 8020dda:	d04b      	beq.n	8020e74 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020ddc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8020de0:	2bff      	cmp	r3, #255	; 0xff
 8020de2:	d002      	beq.n	8020dea <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8020de4:	3301      	adds	r3, #1
 8020de6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020dea:	68eb      	ldr	r3, [r5, #12]
 8020dec:	8998      	ldrh	r0, [r3, #12]
 8020dee:	f7f9 fba3 	bl	801a538 <lwip_htons>
 8020df2:	07c3      	lsls	r3, r0, #31
 8020df4:	d527      	bpl.n	8020e46 <tcp_zero_window_probe+0x7a>
 8020df6:	8929      	ldrh	r1, [r5, #8]
 8020df8:	bb29      	cbnz	r1, 8020e46 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020dfa:	68eb      	ldr	r3, [r5, #12]
 8020dfc:	4620      	mov	r0, r4
 8020dfe:	685a      	ldr	r2, [r3, #4]
 8020e00:	f7fe fee6 	bl	801fbd0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020e04:	4606      	mov	r6, r0
 8020e06:	b388      	cbz	r0, 8020e6c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020e08:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020e0c:	2011      	movs	r0, #17
 8020e0e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8020e12:	f7f9 fb91 	bl	801a538 <lwip_htons>
 8020e16:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8020e1a:	4338      	orrs	r0, r7
 8020e1c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020e20:	68eb      	ldr	r3, [r5, #12]
 8020e22:	6858      	ldr	r0, [r3, #4]
 8020e24:	f7f9 fb8c 	bl	801a540 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020e28:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020e2a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e2c:	4622      	mov	r2, r4
 8020e2e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020e30:	1a1b      	subs	r3, r3, r0
 8020e32:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e34:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8020e38:	bfb8      	it	lt
 8020e3a:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e3c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e42:	f7fe beed 	b.w	801fc20 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020e46:	68eb      	ldr	r3, [r5, #12]
 8020e48:	2101      	movs	r1, #1
 8020e4a:	4620      	mov	r0, r4
 8020e4c:	685a      	ldr	r2, [r3, #4]
 8020e4e:	f7fe febf 	bl	801fbd0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020e52:	4606      	mov	r6, r0
 8020e54:	b150      	cbz	r0, 8020e6c <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020e56:	6868      	ldr	r0, [r5, #4]
 8020e58:	892a      	ldrh	r2, [r5, #8]
 8020e5a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8020e5c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020e5e:	1a9b      	subs	r3, r3, r2
 8020e60:	2201      	movs	r2, #1
 8020e62:	3114      	adds	r1, #20
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	f7fb fc47 	bl	801c6f8 <pbuf_copy_partial>
 8020e6a:	e7d9      	b.n	8020e20 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 8020e6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 8020e74:	4628      	mov	r0, r5
}
 8020e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020e7a:	4b04      	ldr	r3, [pc, #16]	; (8020e8c <tcp_zero_window_probe+0xc0>)
 8020e7c:	f640 024f 	movw	r2, #2127	; 0x84f
 8020e80:	4903      	ldr	r1, [pc, #12]	; (8020e90 <tcp_zero_window_probe+0xc4>)
 8020e82:	4804      	ldr	r0, [pc, #16]	; (8020e94 <tcp_zero_window_probe+0xc8>)
 8020e84:	f005 fc5e 	bl	8026744 <iprintf>
 8020e88:	e7a5      	b.n	8020dd6 <tcp_zero_window_probe+0xa>
 8020e8a:	bf00      	nop
 8020e8c:	080461d0 	.word	0x080461d0
 8020e90:	0804689c 	.word	0x0804689c
 8020e94:	0802b43c 	.word	0x0802b43c

08020e98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020e98:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020e9a:	22bc      	movs	r2, #188	; 0xbc
{
 8020e9c:	b570      	push	{r4, r5, r6, lr}
 8020e9e:	460e      	mov	r6, r1
 8020ea0:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020ea2:	4910      	ldr	r1, [pc, #64]	; (8020ee4 <sys_timeout_abs+0x4c>)
 8020ea4:	200c      	movs	r0, #12
{
 8020ea6:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020ea8:	f7fa fe34 	bl	801bb14 <memp_malloc_fn>
  if (timeout == NULL) {
 8020eac:	b190      	cbz	r0, 8020ed4 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8020eae:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020eb0:	490d      	ldr	r1, [pc, #52]	; (8020ee8 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 8020eb2:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8020eb4:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8020eb6:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8020eba:	680b      	ldr	r3, [r1, #0]
 8020ebc:	b91b      	cbnz	r3, 8020ec6 <sys_timeout_abs+0x2e>
 8020ebe:	e007      	b.n	8020ed0 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020ec0:	4619      	mov	r1, r3
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	b11b      	cbz	r3, 8020ece <sys_timeout_abs+0x36>
 8020ec6:	685a      	ldr	r2, [r3, #4]
 8020ec8:	1aa2      	subs	r2, r4, r2
 8020eca:	2a00      	cmp	r2, #0
 8020ecc:	daf8      	bge.n	8020ec0 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 8020ece:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8020ed0:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8020ed2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020ed4:	4b03      	ldr	r3, [pc, #12]	; (8020ee4 <sys_timeout_abs+0x4c>)
 8020ed6:	22be      	movs	r2, #190	; 0xbe
 8020ed8:	4904      	ldr	r1, [pc, #16]	; (8020eec <sys_timeout_abs+0x54>)
 8020eda:	4805      	ldr	r0, [pc, #20]	; (8020ef0 <sys_timeout_abs+0x58>)
}
 8020edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020ee0:	f005 bc30 	b.w	8026744 <iprintf>
 8020ee4:	080468c0 	.word	0x080468c0
 8020ee8:	2002e4fc 	.word	0x2002e4fc
 8020eec:	080468f4 	.word	0x080468f4
 8020ef0:	0802b43c 	.word	0x0802b43c

08020ef4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020ef4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020ef6:	6843      	ldr	r3, [r0, #4]
{
 8020ef8:	4604      	mov	r4, r0
  cyclic->handler();
 8020efa:	4798      	blx	r3

  now = sys_now();
 8020efc:	f7f4 fc8a 	bl	8015814 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020f00:	4b09      	ldr	r3, [pc, #36]	; (8020f28 <lwip_cyclic_timer+0x34>)
 8020f02:	6825      	ldr	r5, [r4, #0]
 8020f04:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f06:	4909      	ldr	r1, [pc, #36]	; (8020f2c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020f08:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020f0a:	1a1a      	subs	r2, r3, r0
 8020f0c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f0e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020f10:	da04      	bge.n	8020f1c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f12:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f18:	f7ff bfbe 	b.w	8020e98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020f1c:	4618      	mov	r0, r3
}
 8020f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020f22:	f7ff bfb9 	b.w	8020e98 <sys_timeout_abs>
 8020f26:	bf00      	nop
 8020f28:	2002e4f8 	.word	0x2002e4f8
 8020f2c:	08020ef5 	.word	0x08020ef5

08020f30 <tcpip_tcp_timer>:
{
 8020f30:	b508      	push	{r3, lr}
  tcp_tmr();
 8020f32:	f7fd f887 	bl	801e044 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020f36:	4b09      	ldr	r3, [pc, #36]	; (8020f5c <tcpip_tcp_timer+0x2c>)
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	b143      	cbz	r3, 8020f4e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f3c:	f7f4 fc6a 	bl	8015814 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f40:	2200      	movs	r2, #0
 8020f42:	4907      	ldr	r1, [pc, #28]	; (8020f60 <tcpip_tcp_timer+0x30>)
 8020f44:	30fa      	adds	r0, #250	; 0xfa
}
 8020f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f4a:	f7ff bfa5 	b.w	8020e98 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020f4e:	4b05      	ldr	r3, [pc, #20]	; (8020f64 <tcpip_tcp_timer+0x34>)
 8020f50:	681b      	ldr	r3, [r3, #0]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d1f2      	bne.n	8020f3c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8020f56:	4a04      	ldr	r2, [pc, #16]	; (8020f68 <tcpip_tcp_timer+0x38>)
 8020f58:	6013      	str	r3, [r2, #0]
}
 8020f5a:	bd08      	pop	{r3, pc}
 8020f5c:	2002e49c 	.word	0x2002e49c
 8020f60:	08020f31 	.word	0x08020f31
 8020f64:	2002e4b4 	.word	0x2002e4b4
 8020f68:	2002e500 	.word	0x2002e500

08020f6c <tcp_timer_needed>:
{
 8020f6c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020f6e:	4b0b      	ldr	r3, [pc, #44]	; (8020f9c <tcp_timer_needed+0x30>)
 8020f70:	681a      	ldr	r2, [r3, #0]
 8020f72:	b98a      	cbnz	r2, 8020f98 <tcp_timer_needed+0x2c>
 8020f74:	4a0a      	ldr	r2, [pc, #40]	; (8020fa0 <tcp_timer_needed+0x34>)
 8020f76:	6812      	ldr	r2, [r2, #0]
 8020f78:	b152      	cbz	r2, 8020f90 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8020f7a:	2201      	movs	r2, #1
 8020f7c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f7e:	f7f4 fc49 	bl	8015814 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f82:	2200      	movs	r2, #0
 8020f84:	4907      	ldr	r1, [pc, #28]	; (8020fa4 <tcp_timer_needed+0x38>)
 8020f86:	30fa      	adds	r0, #250	; 0xfa
}
 8020f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f8c:	f7ff bf84 	b.w	8020e98 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020f90:	4a05      	ldr	r2, [pc, #20]	; (8020fa8 <tcp_timer_needed+0x3c>)
 8020f92:	6812      	ldr	r2, [r2, #0]
 8020f94:	2a00      	cmp	r2, #0
 8020f96:	d1f0      	bne.n	8020f7a <tcp_timer_needed+0xe>
}
 8020f98:	bd08      	pop	{r3, pc}
 8020f9a:	bf00      	nop
 8020f9c:	2002e500 	.word	0x2002e500
 8020fa0:	2002e49c 	.word	0x2002e49c
 8020fa4:	08020f31 	.word	0x08020f31
 8020fa8:	2002e4b4 	.word	0x2002e4b4

08020fac <sys_timeouts_init>:
{
 8020fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020fb0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8020fb4:	4c11      	ldr	r4, [pc, #68]	; (8020ffc <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fb6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8021008 <sys_timeouts_init+0x5c>
 8020fba:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020fbe:	f8df 804c 	ldr.w	r8, [pc, #76]	; 802100c <sys_timeouts_init+0x60>
 8020fc2:	f104 0620 	add.w	r6, r4, #32
 8020fc6:	4f0e      	ldr	r7, [pc, #56]	; (8021000 <sys_timeouts_init+0x54>)
 8020fc8:	d20d      	bcs.n	8020fe6 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020fca:	f7f4 fc23 	bl	8015814 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020fce:	4622      	mov	r2, r4
 8020fd0:	490c      	ldr	r1, [pc, #48]	; (8021004 <sys_timeouts_init+0x58>)
 8020fd2:	4428      	add	r0, r5
 8020fd4:	f7ff ff60 	bl	8020e98 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020fd8:	42b4      	cmp	r4, r6
 8020fda:	d00c      	beq.n	8020ff6 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020fdc:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fe0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020fe4:	d3f1      	bcc.n	8020fca <sys_timeouts_init+0x1e>
 8020fe6:	464b      	mov	r3, r9
 8020fe8:	4641      	mov	r1, r8
 8020fea:	f240 1229 	movw	r2, #297	; 0x129
 8020fee:	4638      	mov	r0, r7
 8020ff0:	f005 fba8 	bl	8026744 <iprintf>
 8020ff4:	e7e9      	b.n	8020fca <sys_timeouts_init+0x1e>
}
 8020ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ffa:	bf00      	nop
 8020ffc:	08046974 	.word	0x08046974
 8021000:	0802b43c 	.word	0x0802b43c
 8021004:	08020ef5 	.word	0x08020ef5
 8021008:	080468c0 	.word	0x080468c0
 802100c:	08046934 	.word	0x08046934

08021010 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021010:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8021014:	b570      	push	{r4, r5, r6, lr}
 8021016:	4604      	mov	r4, r0
 8021018:	460d      	mov	r5, r1
 802101a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 802101c:	d208      	bcs.n	8021030 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802101e:	f7f4 fbf9 	bl	8015814 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8021022:	4632      	mov	r2, r6
 8021024:	4629      	mov	r1, r5
 8021026:	4420      	add	r0, r4
#endif
}
 8021028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 802102c:	f7ff bf34 	b.w	8020e98 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021030:	4b03      	ldr	r3, [pc, #12]	; (8021040 <sys_timeout+0x30>)
 8021032:	f240 1229 	movw	r2, #297	; 0x129
 8021036:	4903      	ldr	r1, [pc, #12]	; (8021044 <sys_timeout+0x34>)
 8021038:	4803      	ldr	r0, [pc, #12]	; (8021048 <sys_timeout+0x38>)
 802103a:	f005 fb83 	bl	8026744 <iprintf>
 802103e:	e7ee      	b.n	802101e <sys_timeout+0xe>
 8021040:	080468c0 	.word	0x080468c0
 8021044:	08046934 	.word	0x08046934
 8021048:	0802b43c 	.word	0x0802b43c

0802104c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 802104c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802104e:	4d0d      	ldr	r5, [pc, #52]	; (8021084 <sys_untimeout+0x38>)
 8021050:	682b      	ldr	r3, [r5, #0]
 8021052:	b19b      	cbz	r3, 802107c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8021054:	2400      	movs	r4, #0
 8021056:	e003      	b.n	8021060 <sys_untimeout+0x14>
 8021058:	681a      	ldr	r2, [r3, #0]
 802105a:	461c      	mov	r4, r3
 802105c:	4613      	mov	r3, r2
 802105e:	b16a      	cbz	r2, 802107c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 8021060:	689a      	ldr	r2, [r3, #8]
 8021062:	4282      	cmp	r2, r0
 8021064:	d1f8      	bne.n	8021058 <sys_untimeout+0xc>
 8021066:	68da      	ldr	r2, [r3, #12]
 8021068:	428a      	cmp	r2, r1
 802106a:	d1f5      	bne.n	8021058 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 802106c:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 802106e:	b13c      	cbz	r4, 8021080 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 8021070:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021072:	4619      	mov	r1, r3
 8021074:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 8021076:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021078:	f7fa bd82 	b.w	801bb80 <memp_free>
}
 802107c:	bc30      	pop	{r4, r5}
 802107e:	4770      	bx	lr
        next_timeout = t->next;
 8021080:	602a      	str	r2, [r5, #0]
 8021082:	e7f6      	b.n	8021072 <sys_untimeout+0x26>
 8021084:	2002e4fc 	.word	0x2002e4fc

08021088 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802108c:	f7f4 fbc2 	bl	8015814 <sys_now>
 8021090:	4c0f      	ldr	r4, [pc, #60]	; (80210d0 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8021092:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80210d4 <sys_check_timeouts+0x4c>
  now = sys_now();
 8021096:	4607      	mov	r7, r0
 8021098:	e00f      	b.n	80210ba <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802109a:	685a      	ldr	r2, [r3, #4]
 802109c:	eba7 0c02 	sub.w	ip, r7, r2
 80210a0:	f1bc 0f00 	cmp.w	ip, #0
 80210a4:	db0e      	blt.n	80210c4 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 80210a6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 80210a8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 80210aa:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 80210ae:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 80210b2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80210b4:	f7fa fd64 	bl	801bb80 <memp_free>
    if (handler != NULL) {
 80210b8:	b935      	cbnz	r5, 80210c8 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 80210ba:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80210bc:	200c      	movs	r0, #12
 80210be:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d1ea      	bne.n	802109a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80210c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 80210c8:	4648      	mov	r0, r9
 80210ca:	47a8      	blx	r5
 80210cc:	e7f5      	b.n	80210ba <sys_check_timeouts+0x32>
 80210ce:	bf00      	nop
 80210d0:	2002e4fc 	.word	0x2002e4fc
 80210d4:	2002e4f8 	.word	0x2002e4f8

080210d8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80210d8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80210da:	4c07      	ldr	r4, [pc, #28]	; (80210f8 <sys_timeouts_sleeptime+0x20>)
 80210dc:	6823      	ldr	r3, [r4, #0]
 80210de:	b13b      	cbz	r3, 80210f0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 80210e0:	f7f4 fb98 	bl	8015814 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80210e4:	6823      	ldr	r3, [r4, #0]
 80210e6:	685b      	ldr	r3, [r3, #4]
    return 0;
 80210e8:	1a18      	subs	r0, r3, r0
 80210ea:	bf48      	it	mi
 80210ec:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 80210ee:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80210f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80210f4:	bd10      	pop	{r4, pc}
 80210f6:	bf00      	nop
 80210f8:	2002e4fc 	.word	0x2002e4fc

080210fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80210fc:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80210fe:	f005 fbc5 	bl	802688c <rand>
 8021102:	4b02      	ldr	r3, [pc, #8]	; (802110c <udp_init+0x10>)
 8021104:	4a02      	ldr	r2, [pc, #8]	; (8021110 <udp_init+0x14>)
 8021106:	4303      	orrs	r3, r0
 8021108:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 802110a:	bd08      	pop	{r3, pc}
 802110c:	ffffc000 	.word	0xffffc000
 8021110:	2000044e 	.word	0x2000044e

08021114 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021118:	4680      	mov	r8, r0
{
 802111a:	b085      	sub	sp, #20
 802111c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802111e:	2800      	cmp	r0, #0
 8021120:	f000 80af 	beq.w	8021282 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021124:	2f00      	cmp	r7, #0
 8021126:	f000 80b5 	beq.w	8021294 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802112a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 802112e:	2b07      	cmp	r3, #7
 8021130:	f240 8091 	bls.w	8021256 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8021134:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 802130c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 8021138:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802113c:	f8d9 1000 	ldr.w	r1, [r9]
 8021140:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8021144:	f003 f80c 	bl	8024160 <ip4_addr_isbroadcast_u32>
 8021148:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802114a:	8820      	ldrh	r0, [r4, #0]
 802114c:	f7f9 f9f4 	bl	801a538 <lwip_htons>
 8021150:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8021152:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8021154:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8021156:	f7f9 f9ef 	bl	801a538 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802115a:	4b64      	ldr	r3, [pc, #400]	; (80212ec <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 802115c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802115e:	681c      	ldr	r4, [r3, #0]
 8021160:	2c00      	cmp	r4, #0
 8021162:	d064      	beq.n	802122e <udp_input+0x11a>
  uncon_pcb = NULL;
 8021164:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021168:	f8df c190 	ldr.w	ip, [pc, #400]	; 80212fc <udp_input+0x1e8>
 802116c:	4960      	ldr	r1, [pc, #384]	; (80212f0 <udp_input+0x1dc>)
  prev = NULL;
 802116e:	465e      	mov	r6, fp
 8021170:	e004      	b.n	802117c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021172:	68e2      	ldr	r2, [r4, #12]
 8021174:	4626      	mov	r6, r4
 8021176:	2a00      	cmp	r2, #0
 8021178:	d056      	beq.n	8021228 <udp_input+0x114>
 802117a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802117c:	8a62      	ldrh	r2, [r4, #18]
 802117e:	42aa      	cmp	r2, r5
 8021180:	d1f7      	bne.n	8021172 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021182:	2f00      	cmp	r7, #0
 8021184:	d06d      	beq.n	8021262 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021186:	7a20      	ldrb	r0, [r4, #8]
 8021188:	b138      	cbz	r0, 802119a <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802118a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802118e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8021192:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021194:	b2d2      	uxtb	r2, r2
 8021196:	4290      	cmp	r0, r2
 8021198:	d1eb      	bne.n	8021172 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802119a:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 802119c:	f1ba 0f00 	cmp.w	sl, #0
 80211a0:	d038      	beq.n	8021214 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211a2:	b13a      	cbz	r2, 80211b4 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80211a4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211a8:	1c43      	adds	r3, r0, #1
 80211aa:	d003      	beq.n	80211b4 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80211ac:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80211ae:	68bb      	ldr	r3, [r7, #8]
 80211b0:	4218      	tst	r0, r3
 80211b2:	d1de      	bne.n	8021172 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80211b4:	7c20      	ldrb	r0, [r4, #16]
 80211b6:	0743      	lsls	r3, r0, #29
 80211b8:	d409      	bmi.n	80211ce <udp_input+0xba>
        if (uncon_pcb == NULL) {
 80211ba:	f1bb 0f00 	cmp.w	fp, #0
 80211be:	d059      	beq.n	8021274 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80211c0:	f1ba 0f00 	cmp.w	sl, #0
 80211c4:	d003      	beq.n	80211ce <udp_input+0xba>
 80211c6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80211ca:	3001      	adds	r0, #1
 80211cc:	d069      	beq.n	80212a2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80211ce:	8aa2      	ldrh	r2, [r4, #20]
 80211d0:	9803      	ldr	r0, [sp, #12]
 80211d2:	4282      	cmp	r2, r0
 80211d4:	d1cd      	bne.n	8021172 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80211d6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 80211d8:	b11a      	cbz	r2, 80211e2 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80211da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80211de:	4282      	cmp	r2, r0
 80211e0:	d1c7      	bne.n	8021172 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 80211e2:	b12e      	cbz	r6, 80211f0 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80211e4:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 80211e6:	4a41      	ldr	r2, [pc, #260]	; (80212ec <udp_input+0x1d8>)
          prev->next = pcb->next;
 80211e8:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 80211ea:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 80211ec:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 80211ee:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80211f0:	2108      	movs	r1, #8
 80211f2:	4640      	mov	r0, r8
 80211f4:	f7fb f950 	bl	801c498 <pbuf_remove_header>
 80211f8:	2800      	cmp	r0, #0
 80211fa:	d15b      	bne.n	80212b4 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80211fc:	69a5      	ldr	r5, [r4, #24]
 80211fe:	b355      	cbz	r5, 8021256 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021200:	9b03      	ldr	r3, [sp, #12]
 8021202:	4642      	mov	r2, r8
 8021204:	69e0      	ldr	r0, [r4, #28]
 8021206:	4621      	mov	r1, r4
 8021208:	9300      	str	r3, [sp, #0]
 802120a:	4b3a      	ldr	r3, [pc, #232]	; (80212f4 <udp_input+0x1e0>)
 802120c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802120e:	b005      	add	sp, #20
 8021210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8021214:	2a00      	cmp	r2, #0
 8021216:	d0cd      	beq.n	80211b4 <udp_input+0xa0>
 8021218:	f8d9 0014 	ldr.w	r0, [r9, #20]
 802121c:	4282      	cmp	r2, r0
 802121e:	d0c9      	beq.n	80211b4 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021220:	68e2      	ldr	r2, [r4, #12]
 8021222:	4626      	mov	r6, r4
 8021224:	2a00      	cmp	r2, #0
 8021226:	d1a8      	bne.n	802117a <udp_input+0x66>
  if (pcb != NULL) {
 8021228:	f1bb 0f00 	cmp.w	fp, #0
 802122c:	d15b      	bne.n	80212e6 <udp_input+0x1d2>
  if (for_us) {
 802122e:	687a      	ldr	r2, [r7, #4]
 8021230:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8021234:	429a      	cmp	r2, r3
 8021236:	d10e      	bne.n	8021256 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021238:	2108      	movs	r1, #8
 802123a:	4640      	mov	r0, r8
 802123c:	f7fb f92c 	bl	801c498 <pbuf_remove_header>
 8021240:	2800      	cmp	r0, #0
 8021242:	d137      	bne.n	80212b4 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021244:	f1ba 0f00 	cmp.w	sl, #0
 8021248:	d105      	bne.n	8021256 <udp_input+0x142>
 802124a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 802124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021252:	2be0      	cmp	r3, #224	; 0xe0
 8021254:	d13b      	bne.n	80212ce <udp_input+0x1ba>
      pbuf_free(p);
 8021256:	4640      	mov	r0, r8
}
 8021258:	b005      	add	sp, #20
 802125a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 802125e:	f7fb b9a7 	b.w	801c5b0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021262:	4663      	mov	r3, ip
 8021264:	2288      	movs	r2, #136	; 0x88
 8021266:	4824      	ldr	r0, [pc, #144]	; (80212f8 <udp_input+0x1e4>)
 8021268:	f005 fa6c 	bl	8026744 <iprintf>
 802126c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80212fc <udp_input+0x1e8>
 8021270:	491f      	ldr	r1, [pc, #124]	; (80212f0 <udp_input+0x1dc>)
 8021272:	e788      	b.n	8021186 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 8021274:	8aa2      	ldrh	r2, [r4, #20]
 8021276:	46a3      	mov	fp, r4
 8021278:	9803      	ldr	r0, [sp, #12]
 802127a:	4282      	cmp	r2, r0
 802127c:	f47f af79 	bne.w	8021172 <udp_input+0x5e>
 8021280:	e7a9      	b.n	80211d6 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021282:	4b1e      	ldr	r3, [pc, #120]	; (80212fc <udp_input+0x1e8>)
 8021284:	22cf      	movs	r2, #207	; 0xcf
 8021286:	491e      	ldr	r1, [pc, #120]	; (8021300 <udp_input+0x1ec>)
 8021288:	481b      	ldr	r0, [pc, #108]	; (80212f8 <udp_input+0x1e4>)
 802128a:	f005 fa5b 	bl	8026744 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802128e:	2f00      	cmp	r7, #0
 8021290:	f47f af4b 	bne.w	802112a <udp_input+0x16>
 8021294:	4b19      	ldr	r3, [pc, #100]	; (80212fc <udp_input+0x1e8>)
 8021296:	22d0      	movs	r2, #208	; 0xd0
 8021298:	491a      	ldr	r1, [pc, #104]	; (8021304 <udp_input+0x1f0>)
 802129a:	4817      	ldr	r0, [pc, #92]	; (80212f8 <udp_input+0x1e4>)
 802129c:	f005 fa52 	bl	8026744 <iprintf>
 80212a0:	e743      	b.n	802112a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80212a2:	6878      	ldr	r0, [r7, #4]
 80212a4:	f8db 3000 	ldr.w	r3, [fp]
 80212a8:	4283      	cmp	r3, r0
 80212aa:	d090      	beq.n	80211ce <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80212ac:	4290      	cmp	r0, r2
 80212ae:	bf08      	it	eq
 80212b0:	46a3      	moveq	fp, r4
 80212b2:	e78c      	b.n	80211ce <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80212b4:	4b11      	ldr	r3, [pc, #68]	; (80212fc <udp_input+0x1e8>)
 80212b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80212ba:	4913      	ldr	r1, [pc, #76]	; (8021308 <udp_input+0x1f4>)
 80212bc:	480e      	ldr	r0, [pc, #56]	; (80212f8 <udp_input+0x1e4>)
 80212be:	f005 fa41 	bl	8026744 <iprintf>
      pbuf_free(p);
 80212c2:	4640      	mov	r0, r8
}
 80212c4:	b005      	add	sp, #20
 80212c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80212ca:	f7fb b971 	b.w	801c5b0 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80212ce:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 80212d2:	4640      	mov	r0, r8
 80212d4:	3108      	adds	r1, #8
 80212d6:	b209      	sxth	r1, r1
 80212d8:	f7fb f916 	bl	801c508 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80212dc:	2103      	movs	r1, #3
 80212de:	4640      	mov	r0, r8
 80212e0:	f002 fd5a 	bl	8023d98 <icmp_dest_unreach>
 80212e4:	e7b7      	b.n	8021256 <udp_input+0x142>
 80212e6:	465c      	mov	r4, fp
 80212e8:	e782      	b.n	80211f0 <udp_input+0xdc>
 80212ea:	bf00      	nop
 80212ec:	2002e504 	.word	0x2002e504
 80212f0:	08046a00 	.word	0x08046a00
 80212f4:	2001f310 	.word	0x2001f310
 80212f8:	0802b43c 	.word	0x0802b43c
 80212fc:	0804699c 	.word	0x0804699c
 8021300:	080469cc 	.word	0x080469cc
 8021304:	080469e4 	.word	0x080469e4
 8021308:	08046a28 	.word	0x08046a28
 802130c:	2001f300 	.word	0x2001f300

08021310 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8021310:	4b38      	ldr	r3, [pc, #224]	; (80213f4 <udp_bind+0xe4>)
 8021312:	2900      	cmp	r1, #0
{
 8021314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8021318:	bf08      	it	eq
 802131a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802131c:	2800      	cmp	r0, #0
 802131e:	d05e      	beq.n	80213de <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021320:	4f35      	ldr	r7, [pc, #212]	; (80213f8 <udp_bind+0xe8>)
 8021322:	683e      	ldr	r6, [r7, #0]
 8021324:	b34e      	cbz	r6, 802137a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021326:	42b0      	cmp	r0, r6
 8021328:	d031      	beq.n	802138e <udp_bind+0x7e>
 802132a:	4634      	mov	r4, r6
 802132c:	e001      	b.n	8021332 <udp_bind+0x22>
 802132e:	42a0      	cmp	r0, r4
 8021330:	d02d      	beq.n	802138e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021332:	68e4      	ldr	r4, [r4, #12]
 8021334:	2c00      	cmp	r4, #0
 8021336:	d1fa      	bne.n	802132e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021338:	b362      	cbz	r2, 8021394 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802133a:	680d      	ldr	r5, [r1, #0]
 802133c:	4633      	mov	r3, r6
 802133e:	e001      	b.n	8021344 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021340:	68db      	ldr	r3, [r3, #12]
 8021342:	b19b      	cbz	r3, 802136c <udp_bind+0x5c>
      if (pcb != ipcb) {
 8021344:	4298      	cmp	r0, r3
 8021346:	d0fb      	beq.n	8021340 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 8021348:	8a59      	ldrh	r1, [r3, #18]
 802134a:	4291      	cmp	r1, r2
 802134c:	d1f8      	bne.n	8021340 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802134e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8021350:	2900      	cmp	r1, #0
 8021352:	bf18      	it	ne
 8021354:	42a9      	cmpne	r1, r5
 8021356:	d001      	beq.n	802135c <udp_bind+0x4c>
 8021358:	2d00      	cmp	r5, #0
 802135a:	d1f1      	bne.n	8021340 <udp_bind+0x30>
      return ERR_USE;
 802135c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8021360:	4618      	mov	r0, r3
 8021362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021366:	680d      	ldr	r5, [r1, #0]
 8021368:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802136c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 802136e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8021370:	b13c      	cbz	r4, 8021382 <udp_bind+0x72>
  return ERR_OK;
 8021372:	2300      	movs	r3, #0
}
 8021374:	4618      	mov	r0, r3
 8021376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 802137a:	b372      	cbz	r2, 80213da <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802137c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 802137e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021380:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 8021382:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 8021384:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8021386:	6038      	str	r0, [r7, #0]
}
 8021388:	4618      	mov	r0, r3
 802138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 802138e:	2401      	movs	r4, #1
  if (port == 0) {
 8021390:	2a00      	cmp	r2, #0
 8021392:	d1d2      	bne.n	802133a <udp_bind+0x2a>
 8021394:	f8df e070 	ldr.w	lr, [pc, #112]	; 8021408 <udp_bind+0xf8>
  rebind = 0;
 8021398:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802139c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80213a0:	f8be 2000 	ldrh.w	r2, [lr]
 80213a4:	4542      	cmp	r2, r8
 80213a6:	d015      	beq.n	80213d4 <udp_bind+0xc4>
 80213a8:	3201      	adds	r2, #1
 80213aa:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80213ac:	2e00      	cmp	r6, #0
 80213ae:	d0da      	beq.n	8021366 <udp_bind+0x56>
 80213b0:	4633      	mov	r3, r6
 80213b2:	e002      	b.n	80213ba <udp_bind+0xaa>
 80213b4:	68db      	ldr	r3, [r3, #12]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d0d5      	beq.n	8021366 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 80213ba:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80213be:	4594      	cmp	ip, r2
 80213c0:	d1f8      	bne.n	80213b4 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80213c2:	3d01      	subs	r5, #1
 80213c4:	b2ad      	uxth	r5, r5
 80213c6:	2d00      	cmp	r5, #0
 80213c8:	d1ec      	bne.n	80213a4 <udp_bind+0x94>
      return ERR_USE;
 80213ca:	f06f 0307 	mvn.w	r3, #7
 80213ce:	f8ae 2000 	strh.w	r2, [lr]
 80213d2:	e7cf      	b.n	8021374 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80213d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80213d8:	e7e8      	b.n	80213ac <udp_bind+0x9c>
  rebind = 0;
 80213da:	4634      	mov	r4, r6
 80213dc:	e7da      	b.n	8021394 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80213de:	4b07      	ldr	r3, [pc, #28]	; (80213fc <udp_bind+0xec>)
 80213e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80213e4:	4906      	ldr	r1, [pc, #24]	; (8021400 <udp_bind+0xf0>)
 80213e6:	4807      	ldr	r0, [pc, #28]	; (8021404 <udp_bind+0xf4>)
 80213e8:	f005 f9ac 	bl	8026744 <iprintf>
 80213ec:	f06f 030f 	mvn.w	r3, #15
 80213f0:	e7c0      	b.n	8021374 <udp_bind+0x64>
 80213f2:	bf00      	nop
 80213f4:	0804731c 	.word	0x0804731c
 80213f8:	2002e504 	.word	0x2002e504
 80213fc:	0804699c 	.word	0x0804699c
 8021400:	08046a44 	.word	0x08046a44
 8021404:	0802b43c 	.word	0x0802b43c
 8021408:	2000044e 	.word	0x2000044e

0802140c <udp_sendto_if_src>:
{
 802140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021410:	b085      	sub	sp, #20
 8021412:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021416:	2800      	cmp	r0, #0
 8021418:	f000 8087 	beq.w	802152a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802141c:	460d      	mov	r5, r1
 802141e:	2900      	cmp	r1, #0
 8021420:	d079      	beq.n	8021516 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021422:	4690      	mov	r8, r2
 8021424:	2a00      	cmp	r2, #0
 8021426:	d06c      	beq.n	8021502 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021428:	f1ba 0f00 	cmp.w	sl, #0
 802142c:	d05f      	beq.n	80214ee <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802142e:	f1bb 0f00 	cmp.w	fp, #0
 8021432:	f000 8084 	beq.w	802153e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 8021436:	8a42      	ldrh	r2, [r0, #18]
 8021438:	4699      	mov	r9, r3
 802143a:	4604      	mov	r4, r0
 802143c:	b39a      	cbz	r2, 80214a6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802143e:	892a      	ldrh	r2, [r5, #8]
 8021440:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8021444:	429a      	cmp	r2, r3
 8021446:	d84f      	bhi.n	80214e8 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021448:	2108      	movs	r1, #8
 802144a:	4628      	mov	r0, r5
 802144c:	f7fa fff0 	bl	801c430 <pbuf_add_header>
 8021450:	bb98      	cbnz	r0, 80214ba <udp_sendto_if_src+0xae>
 8021452:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021454:	8973      	ldrh	r3, [r6, #10]
 8021456:	2b07      	cmp	r3, #7
 8021458:	d93e      	bls.n	80214d8 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 802145a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 802145c:	8a60      	ldrh	r0, [r4, #18]
 802145e:	f7f9 f86b 	bl	801a538 <lwip_htons>
 8021462:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021464:	4648      	mov	r0, r9
 8021466:	f7f9 f867 	bl	801a538 <lwip_htons>
  udphdr->chksum = 0x0000;
 802146a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 802146c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 802146e:	71bb      	strb	r3, [r7, #6]
 8021470:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8021472:	8930      	ldrh	r0, [r6, #8]
 8021474:	f7f9 f860 	bl	801a538 <lwip_htons>
 8021478:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802147a:	f8cd b008 	str.w	fp, [sp, #8]
 802147e:	2011      	movs	r0, #17
 8021480:	7aa3      	ldrb	r3, [r4, #10]
 8021482:	4642      	mov	r2, r8
 8021484:	4651      	mov	r1, sl
 8021486:	9300      	str	r3, [sp, #0]
 8021488:	7ae3      	ldrb	r3, [r4, #11]
 802148a:	9001      	str	r0, [sp, #4]
 802148c:	4630      	mov	r0, r6
 802148e:	f002 fdb9 	bl	8024004 <ip4_output_if_src>
  if (q != p) {
 8021492:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021494:	4607      	mov	r7, r0
  if (q != p) {
 8021496:	d002      	beq.n	802149e <udp_sendto_if_src+0x92>
    pbuf_free(q);
 8021498:	4630      	mov	r0, r6
 802149a:	f7fb f889 	bl	801c5b0 <pbuf_free>
}
 802149e:	4638      	mov	r0, r7
 80214a0:	b005      	add	sp, #20
 80214a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80214a6:	4601      	mov	r1, r0
 80214a8:	f7ff ff32 	bl	8021310 <udp_bind>
    if (err != ERR_OK) {
 80214ac:	4607      	mov	r7, r0
 80214ae:	2800      	cmp	r0, #0
 80214b0:	d0c5      	beq.n	802143e <udp_sendto_if_src+0x32>
}
 80214b2:	4638      	mov	r0, r7
 80214b4:	b005      	add	sp, #20
 80214b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80214ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80214be:	2108      	movs	r1, #8
 80214c0:	2022      	movs	r0, #34	; 0x22
 80214c2:	f7fa fea3 	bl	801c20c <pbuf_alloc>
    if (q == NULL) {
 80214c6:	4606      	mov	r6, r0
 80214c8:	b170      	cbz	r0, 80214e8 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 80214ca:	892b      	ldrh	r3, [r5, #8]
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d0c1      	beq.n	8021454 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 80214d0:	4629      	mov	r1, r5
 80214d2:	f7fb f8db 	bl	801c68c <pbuf_chain>
 80214d6:	e7bd      	b.n	8021454 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80214d8:	4b1e      	ldr	r3, [pc, #120]	; (8021554 <udp_sendto_if_src+0x148>)
 80214da:	f240 320d 	movw	r2, #781	; 0x30d
 80214de:	491e      	ldr	r1, [pc, #120]	; (8021558 <udp_sendto_if_src+0x14c>)
 80214e0:	481e      	ldr	r0, [pc, #120]	; (802155c <udp_sendto_if_src+0x150>)
 80214e2:	f005 f92f 	bl	8026744 <iprintf>
 80214e6:	e7b8      	b.n	802145a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 80214e8:	f04f 37ff 	mov.w	r7, #4294967295
 80214ec:	e7d7      	b.n	802149e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80214ee:	4b19      	ldr	r3, [pc, #100]	; (8021554 <udp_sendto_if_src+0x148>)
 80214f0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80214f4:	491a      	ldr	r1, [pc, #104]	; (8021560 <udp_sendto_if_src+0x154>)
 80214f6:	f06f 070f 	mvn.w	r7, #15
 80214fa:	4818      	ldr	r0, [pc, #96]	; (802155c <udp_sendto_if_src+0x150>)
 80214fc:	f005 f922 	bl	8026744 <iprintf>
 8021500:	e7cd      	b.n	802149e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021502:	4b14      	ldr	r3, [pc, #80]	; (8021554 <udp_sendto_if_src+0x148>)
 8021504:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021508:	4916      	ldr	r1, [pc, #88]	; (8021564 <udp_sendto_if_src+0x158>)
 802150a:	f06f 070f 	mvn.w	r7, #15
 802150e:	4813      	ldr	r0, [pc, #76]	; (802155c <udp_sendto_if_src+0x150>)
 8021510:	f005 f918 	bl	8026744 <iprintf>
 8021514:	e7c3      	b.n	802149e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021516:	4b0f      	ldr	r3, [pc, #60]	; (8021554 <udp_sendto_if_src+0x148>)
 8021518:	f240 22d2 	movw	r2, #722	; 0x2d2
 802151c:	4912      	ldr	r1, [pc, #72]	; (8021568 <udp_sendto_if_src+0x15c>)
 802151e:	f06f 070f 	mvn.w	r7, #15
 8021522:	480e      	ldr	r0, [pc, #56]	; (802155c <udp_sendto_if_src+0x150>)
 8021524:	f005 f90e 	bl	8026744 <iprintf>
 8021528:	e7b9      	b.n	802149e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802152a:	4b0a      	ldr	r3, [pc, #40]	; (8021554 <udp_sendto_if_src+0x148>)
 802152c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021530:	490e      	ldr	r1, [pc, #56]	; (802156c <udp_sendto_if_src+0x160>)
 8021532:	f06f 070f 	mvn.w	r7, #15
 8021536:	4809      	ldr	r0, [pc, #36]	; (802155c <udp_sendto_if_src+0x150>)
 8021538:	f005 f904 	bl	8026744 <iprintf>
 802153c:	e7af      	b.n	802149e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802153e:	4b05      	ldr	r3, [pc, #20]	; (8021554 <udp_sendto_if_src+0x148>)
 8021540:	f240 22d5 	movw	r2, #725	; 0x2d5
 8021544:	490a      	ldr	r1, [pc, #40]	; (8021570 <udp_sendto_if_src+0x164>)
 8021546:	f06f 070f 	mvn.w	r7, #15
 802154a:	4804      	ldr	r0, [pc, #16]	; (802155c <udp_sendto_if_src+0x150>)
 802154c:	f005 f8fa 	bl	8026744 <iprintf>
 8021550:	e7a5      	b.n	802149e <udp_sendto_if_src+0x92>
 8021552:	bf00      	nop
 8021554:	0804699c 	.word	0x0804699c
 8021558:	08046b08 	.word	0x08046b08
 802155c:	0802b43c 	.word	0x0802b43c
 8021560:	08046ac0 	.word	0x08046ac0
 8021564:	08046a9c 	.word	0x08046a9c
 8021568:	08046a7c 	.word	0x08046a7c
 802156c:	08046a5c 	.word	0x08046a5c
 8021570:	08046ae4 	.word	0x08046ae4

08021574 <udp_sendto_if>:
{
 8021574:	b570      	push	{r4, r5, r6, lr}
 8021576:	b082      	sub	sp, #8
 8021578:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802157a:	2800      	cmp	r0, #0
 802157c:	d036      	beq.n	80215ec <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802157e:	b359      	cbz	r1, 80215d8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021580:	b302      	cbz	r2, 80215c4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021582:	b1ac      	cbz	r4, 80215b0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021584:	6805      	ldr	r5, [r0, #0]
 8021586:	b935      	cbnz	r5, 8021596 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 8021588:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802158a:	e9cd 4500 	strd	r4, r5, [sp]
 802158e:	f7ff ff3d 	bl	802140c <udp_sendto_if_src>
}
 8021592:	b002      	add	sp, #8
 8021594:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021596:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802159a:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 802159e:	d0f3      	beq.n	8021588 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80215a0:	6866      	ldr	r6, [r4, #4]
 80215a2:	42b5      	cmp	r5, r6
 80215a4:	d101      	bne.n	80215aa <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80215a6:	4605      	mov	r5, r0
 80215a8:	e7ef      	b.n	802158a <udp_sendto_if+0x16>
        return ERR_RTE;
 80215aa:	f06f 0003 	mvn.w	r0, #3
 80215ae:	e7f0      	b.n	8021592 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80215b0:	4b13      	ldr	r3, [pc, #76]	; (8021600 <udp_sendto_if+0x8c>)
 80215b2:	f240 2283 	movw	r2, #643	; 0x283
 80215b6:	4913      	ldr	r1, [pc, #76]	; (8021604 <udp_sendto_if+0x90>)
 80215b8:	4813      	ldr	r0, [pc, #76]	; (8021608 <udp_sendto_if+0x94>)
 80215ba:	f005 f8c3 	bl	8026744 <iprintf>
 80215be:	f06f 000f 	mvn.w	r0, #15
 80215c2:	e7e6      	b.n	8021592 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80215c4:	4b0e      	ldr	r3, [pc, #56]	; (8021600 <udp_sendto_if+0x8c>)
 80215c6:	f240 2282 	movw	r2, #642	; 0x282
 80215ca:	4910      	ldr	r1, [pc, #64]	; (802160c <udp_sendto_if+0x98>)
 80215cc:	480e      	ldr	r0, [pc, #56]	; (8021608 <udp_sendto_if+0x94>)
 80215ce:	f005 f8b9 	bl	8026744 <iprintf>
 80215d2:	f06f 000f 	mvn.w	r0, #15
 80215d6:	e7dc      	b.n	8021592 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80215d8:	4b09      	ldr	r3, [pc, #36]	; (8021600 <udp_sendto_if+0x8c>)
 80215da:	f240 2281 	movw	r2, #641	; 0x281
 80215de:	490c      	ldr	r1, [pc, #48]	; (8021610 <udp_sendto_if+0x9c>)
 80215e0:	4809      	ldr	r0, [pc, #36]	; (8021608 <udp_sendto_if+0x94>)
 80215e2:	f005 f8af 	bl	8026744 <iprintf>
 80215e6:	f06f 000f 	mvn.w	r0, #15
 80215ea:	e7d2      	b.n	8021592 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80215ec:	4b04      	ldr	r3, [pc, #16]	; (8021600 <udp_sendto_if+0x8c>)
 80215ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80215f2:	4908      	ldr	r1, [pc, #32]	; (8021614 <udp_sendto_if+0xa0>)
 80215f4:	4804      	ldr	r0, [pc, #16]	; (8021608 <udp_sendto_if+0x94>)
 80215f6:	f005 f8a5 	bl	8026744 <iprintf>
 80215fa:	f06f 000f 	mvn.w	r0, #15
 80215fe:	e7c8      	b.n	8021592 <udp_sendto_if+0x1e>
 8021600:	0804699c 	.word	0x0804699c
 8021604:	08046b90 	.word	0x08046b90
 8021608:	0802b43c 	.word	0x0802b43c
 802160c:	08046b70 	.word	0x08046b70
 8021610:	08046b54 	.word	0x08046b54
 8021614:	08046b38 	.word	0x08046b38

08021618 <udp_sendto>:
{
 8021618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802161c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802161e:	b388      	cbz	r0, 8021684 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021620:	460e      	mov	r6, r1
 8021622:	b329      	cbz	r1, 8021670 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021624:	4615      	mov	r5, r2
 8021626:	b1ca      	cbz	r2, 802165c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021628:	4604      	mov	r4, r0
 802162a:	7a00      	ldrb	r0, [r0, #8]
 802162c:	4698      	mov	r8, r3
 802162e:	b168      	cbz	r0, 802164c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 8021630:	f7fa fc98 	bl	801bf64 <netif_get_by_index>
 8021634:	4607      	mov	r7, r0
  if (netif == NULL) {
 8021636:	b177      	cbz	r7, 8021656 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021638:	4643      	mov	r3, r8
 802163a:	462a      	mov	r2, r5
 802163c:	4631      	mov	r1, r6
 802163e:	4620      	mov	r0, r4
 8021640:	9700      	str	r7, [sp, #0]
 8021642:	f7ff ff97 	bl	8021574 <udp_sendto_if>
}
 8021646:	b002      	add	sp, #8
 8021648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 802164c:	4610      	mov	r0, r2
 802164e:	f002 fbab 	bl	8023da8 <ip4_route>
 8021652:	4607      	mov	r7, r0
 8021654:	e7ef      	b.n	8021636 <udp_sendto+0x1e>
    return ERR_RTE;
 8021656:	f06f 0003 	mvn.w	r0, #3
 802165a:	e7f4      	b.n	8021646 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802165c:	4b0e      	ldr	r3, [pc, #56]	; (8021698 <udp_sendto+0x80>)
 802165e:	f240 221a 	movw	r2, #538	; 0x21a
 8021662:	490e      	ldr	r1, [pc, #56]	; (802169c <udp_sendto+0x84>)
 8021664:	480e      	ldr	r0, [pc, #56]	; (80216a0 <udp_sendto+0x88>)
 8021666:	f005 f86d 	bl	8026744 <iprintf>
 802166a:	f06f 000f 	mvn.w	r0, #15
 802166e:	e7ea      	b.n	8021646 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021670:	4b09      	ldr	r3, [pc, #36]	; (8021698 <udp_sendto+0x80>)
 8021672:	f240 2219 	movw	r2, #537	; 0x219
 8021676:	490b      	ldr	r1, [pc, #44]	; (80216a4 <udp_sendto+0x8c>)
 8021678:	4809      	ldr	r0, [pc, #36]	; (80216a0 <udp_sendto+0x88>)
 802167a:	f005 f863 	bl	8026744 <iprintf>
 802167e:	f06f 000f 	mvn.w	r0, #15
 8021682:	e7e0      	b.n	8021646 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8021684:	4b04      	ldr	r3, [pc, #16]	; (8021698 <udp_sendto+0x80>)
 8021686:	f44f 7206 	mov.w	r2, #536	; 0x218
 802168a:	4907      	ldr	r1, [pc, #28]	; (80216a8 <udp_sendto+0x90>)
 802168c:	4804      	ldr	r0, [pc, #16]	; (80216a0 <udp_sendto+0x88>)
 802168e:	f005 f859 	bl	8026744 <iprintf>
 8021692:	f06f 000f 	mvn.w	r0, #15
 8021696:	e7d6      	b.n	8021646 <udp_sendto+0x2e>
 8021698:	0804699c 	.word	0x0804699c
 802169c:	08046be4 	.word	0x08046be4
 80216a0:	0802b43c 	.word	0x0802b43c
 80216a4:	08046bc8 	.word	0x08046bc8
 80216a8:	08046bb0 	.word	0x08046bb0

080216ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80216ac:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80216ae:	b320      	cbz	r0, 80216fa <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80216b0:	460d      	mov	r5, r1
 80216b2:	b361      	cbz	r1, 802170e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 80216b4:	4616      	mov	r6, r2
 80216b6:	8a42      	ldrh	r2, [r0, #18]
 80216b8:	4604      	mov	r4, r0
 80216ba:	b1c2      	cbz	r2, 80216ee <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80216bc:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216be:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216c0:	4918      	ldr	r1, [pc, #96]	; (8021724 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216c2:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80216c6:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216c8:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 80216ca:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216cc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216ce:	b142      	cbz	r2, 80216e2 <udp_connect+0x36>
    if (pcb == ipcb) {
 80216d0:	4294      	cmp	r4, r2
 80216d2:	d00a      	beq.n	80216ea <udp_connect+0x3e>
 80216d4:	4613      	mov	r3, r2
 80216d6:	e001      	b.n	80216dc <udp_connect+0x30>
 80216d8:	429c      	cmp	r4, r3
 80216da:	d006      	beq.n	80216ea <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216dc:	68db      	ldr	r3, [r3, #12]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d1fa      	bne.n	80216d8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 80216e2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 80216e4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 80216e6:	600c      	str	r4, [r1, #0]
}
 80216e8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 80216ea:	2000      	movs	r0, #0
}
 80216ec:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80216ee:	4601      	mov	r1, r0
 80216f0:	f7ff fe0e 	bl	8021310 <udp_bind>
    if (err != ERR_OK) {
 80216f4:	2800      	cmp	r0, #0
 80216f6:	d0e1      	beq.n	80216bc <udp_connect+0x10>
}
 80216f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80216fa:	4b0b      	ldr	r3, [pc, #44]	; (8021728 <udp_connect+0x7c>)
 80216fc:	f240 4235 	movw	r2, #1077	; 0x435
 8021700:	490a      	ldr	r1, [pc, #40]	; (802172c <udp_connect+0x80>)
 8021702:	480b      	ldr	r0, [pc, #44]	; (8021730 <udp_connect+0x84>)
 8021704:	f005 f81e 	bl	8026744 <iprintf>
 8021708:	f06f 000f 	mvn.w	r0, #15
}
 802170c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802170e:	4b06      	ldr	r3, [pc, #24]	; (8021728 <udp_connect+0x7c>)
 8021710:	f240 4236 	movw	r2, #1078	; 0x436
 8021714:	4907      	ldr	r1, [pc, #28]	; (8021734 <udp_connect+0x88>)
 8021716:	4806      	ldr	r0, [pc, #24]	; (8021730 <udp_connect+0x84>)
 8021718:	f005 f814 	bl	8026744 <iprintf>
 802171c:	f06f 000f 	mvn.w	r0, #15
}
 8021720:	bd70      	pop	{r4, r5, r6, pc}
 8021722:	bf00      	nop
 8021724:	2002e504 	.word	0x2002e504
 8021728:	0804699c 	.word	0x0804699c
 802172c:	08046c00 	.word	0x08046c00
 8021730:	0802b43c 	.word	0x0802b43c
 8021734:	08046c1c 	.word	0x08046c1c

08021738 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021738:	b110      	cbz	r0, 8021740 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 802173a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 802173e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021740:	4b03      	ldr	r3, [pc, #12]	; (8021750 <udp_recv+0x18>)
 8021742:	f240 428a 	movw	r2, #1162	; 0x48a
 8021746:	4903      	ldr	r1, [pc, #12]	; (8021754 <udp_recv+0x1c>)
 8021748:	4803      	ldr	r0, [pc, #12]	; (8021758 <udp_recv+0x20>)
 802174a:	f004 bffb 	b.w	8026744 <iprintf>
 802174e:	bf00      	nop
 8021750:	0804699c 	.word	0x0804699c
 8021754:	08046c38 	.word	0x08046c38
 8021758:	0802b43c 	.word	0x0802b43c

0802175c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802175c:	4601      	mov	r1, r0
 802175e:	b1c0      	cbz	r0, 8021792 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021760:	4b0f      	ldr	r3, [pc, #60]	; (80217a0 <udp_remove+0x44>)
 8021762:	681a      	ldr	r2, [r3, #0]
 8021764:	4282      	cmp	r2, r0
 8021766:	d00a      	beq.n	802177e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021768:	b132      	cbz	r2, 8021778 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802176a:	68d3      	ldr	r3, [r2, #12]
 802176c:	428b      	cmp	r3, r1
 802176e:	d100      	bne.n	8021772 <udp_remove+0x16>
 8021770:	b953      	cbnz	r3, 8021788 <udp_remove+0x2c>
 8021772:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021774:	2a00      	cmp	r2, #0
 8021776:	d1f8      	bne.n	802176a <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021778:	2001      	movs	r0, #1
 802177a:	f7fa ba01 	b.w	801bb80 <memp_free>
    udp_pcbs = udp_pcbs->next;
 802177e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8021780:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 8021782:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8021784:	f7fa b9fc 	b.w	801bb80 <memp_free>
        pcb2->next = pcb->next;
 8021788:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802178a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 802178c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802178e:	f7fa b9f7 	b.w	801bb80 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021792:	4b04      	ldr	r3, [pc, #16]	; (80217a4 <udp_remove+0x48>)
 8021794:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021798:	4903      	ldr	r1, [pc, #12]	; (80217a8 <udp_remove+0x4c>)
 802179a:	4804      	ldr	r0, [pc, #16]	; (80217ac <udp_remove+0x50>)
 802179c:	f004 bfd2 	b.w	8026744 <iprintf>
 80217a0:	2002e504 	.word	0x2002e504
 80217a4:	0804699c 	.word	0x0804699c
 80217a8:	08046c50 	.word	0x08046c50
 80217ac:	0802b43c 	.word	0x0802b43c

080217b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80217b0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80217b2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80217b6:	4907      	ldr	r1, [pc, #28]	; (80217d4 <udp_new+0x24>)
 80217b8:	2001      	movs	r0, #1
 80217ba:	f7fa f9ab 	bl	801bb14 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80217be:	4604      	mov	r4, r0
 80217c0:	b128      	cbz	r0, 80217ce <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80217c2:	2220      	movs	r2, #32
 80217c4:	2100      	movs	r1, #0
 80217c6:	f004 f81f 	bl	8025808 <memset>
    pcb->ttl = UDP_TTL;
 80217ca:	23ff      	movs	r3, #255	; 0xff
 80217cc:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80217ce:	4620      	mov	r0, r4
 80217d0:	bd10      	pop	{r4, pc}
 80217d2:	bf00      	nop
 80217d4:	0804699c 	.word	0x0804699c

080217d8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80217d8:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80217da:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80217de:	4907      	ldr	r1, [pc, #28]	; (80217fc <udp_new_ip_type+0x24>)
 80217e0:	2001      	movs	r0, #1
 80217e2:	f7fa f997 	bl	801bb14 <memp_malloc_fn>
  if (pcb != NULL) {
 80217e6:	4604      	mov	r4, r0
 80217e8:	b128      	cbz	r0, 80217f6 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80217ea:	2220      	movs	r2, #32
 80217ec:	2100      	movs	r1, #0
 80217ee:	f004 f80b 	bl	8025808 <memset>
    pcb->ttl = UDP_TTL;
 80217f2:	23ff      	movs	r3, #255	; 0xff
 80217f4:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80217f6:	4620      	mov	r0, r4
 80217f8:	bd10      	pop	{r4, pc}
 80217fa:	bf00      	nop
 80217fc:	0804699c 	.word	0x0804699c

08021800 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021800:	b110      	cbz	r0, 8021808 <udp_netif_ip_addr_changed+0x8>
 8021802:	6802      	ldr	r2, [r0, #0]
 8021804:	b101      	cbz	r1, 8021808 <udp_netif_ip_addr_changed+0x8>
 8021806:	b902      	cbnz	r2, 802180a <udp_netif_ip_addr_changed+0xa>
 8021808:	4770      	bx	lr
 802180a:	680b      	ldr	r3, [r1, #0]
 802180c:	2b00      	cmp	r3, #0
 802180e:	d0fb      	beq.n	8021808 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021810:	4b08      	ldr	r3, [pc, #32]	; (8021834 <udp_netif_ip_addr_changed+0x34>)
 8021812:	681b      	ldr	r3, [r3, #0]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d0f7      	beq.n	8021808 <udp_netif_ip_addr_changed+0x8>
{
 8021818:	b410      	push	{r4}
 802181a:	e000      	b.n	802181e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802181c:	6802      	ldr	r2, [r0, #0]
 802181e:	681c      	ldr	r4, [r3, #0]
 8021820:	4294      	cmp	r4, r2
 8021822:	d101      	bne.n	8021828 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021824:	680a      	ldr	r2, [r1, #0]
 8021826:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021828:	68db      	ldr	r3, [r3, #12]
 802182a:	2b00      	cmp	r3, #0
 802182c:	d1f6      	bne.n	802181c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 802182e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021832:	4770      	bx	lr
 8021834:	2002e504 	.word	0x2002e504

08021838 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8021838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802183a:	1d07      	adds	r7, r0, #4
{
 802183c:	4604      	mov	r4, r0
 802183e:	460d      	mov	r5, r1
 8021840:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021842:	2f44      	cmp	r7, #68	; 0x44
 8021844:	d80e      	bhi.n	8021864 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8021846:	0e33      	lsrs	r3, r6, #24
 8021848:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802184a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 802184c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802184e:	b292      	uxth	r2, r2
 8021850:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021852:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8021854:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021856:	0a32      	lsrs	r2, r6, #8
 8021858:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 802185a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 802185c:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 802185e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8021860:	552e      	strb	r6, [r5, r4]
}
 8021862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021864:	4b03      	ldr	r3, [pc, #12]	; (8021874 <dhcp_option_long+0x3c>)
 8021866:	f240 52b7 	movw	r2, #1463	; 0x5b7
 802186a:	4903      	ldr	r1, [pc, #12]	; (8021878 <dhcp_option_long+0x40>)
 802186c:	4803      	ldr	r0, [pc, #12]	; (802187c <dhcp_option_long+0x44>)
 802186e:	f004 ff69 	bl	8026744 <iprintf>
 8021872:	e7e8      	b.n	8021846 <dhcp_option_long+0xe>
 8021874:	08046c68 	.word	0x08046c68
 8021878:	08046ca0 	.word	0x08046ca0
 802187c:	0802b43c 	.word	0x0802b43c

08021880 <dhcp_check>:
{
 8021880:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021882:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 8021884:	7963      	ldrb	r3, [r4, #5]
 8021886:	2b08      	cmp	r3, #8
 8021888:	d004      	beq.n	8021894 <dhcp_check+0x14>
    dhcp->tries = 0;
 802188a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802188c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 802188e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 8021890:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 8021892:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8021894:	2200      	movs	r2, #0
 8021896:	f104 011c 	add.w	r1, r4, #28
 802189a:	f001 ffab 	bl	80237f4 <etharp_query>
  if (dhcp->tries < 255) {
 802189e:	79a3      	ldrb	r3, [r4, #6]
 80218a0:	2bff      	cmp	r3, #255	; 0xff
 80218a2:	d001      	beq.n	80218a8 <dhcp_check+0x28>
    dhcp->tries++;
 80218a4:	3301      	adds	r3, #1
 80218a6:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80218a8:	2301      	movs	r3, #1
 80218aa:	8123      	strh	r3, [r4, #8]
}
 80218ac:	bd10      	pop	{r4, pc}
 80218ae:	bf00      	nop

080218b0 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80218b0:	2800      	cmp	r0, #0
 80218b2:	f000 808e 	beq.w	80219d2 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 80218b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80218b8:	2900      	cmp	r1, #0
 80218ba:	f000 8091 	beq.w	80219e0 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 80218c0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218c2:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 80218c6:	b500      	push	{lr}
  dhcp->lease_used = 0;
 80218c8:	824a      	strh	r2, [r1, #18]
{
 80218ca:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218cc:	d00e      	beq.n	80218ec <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218ce:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80218d0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80218d4:	d258      	bcs.n	8021988 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218d6:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 80218da:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218dc:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 80218e0:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 80218e4:	f200 8083 	bhi.w	80219ee <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 80218e8:	2301      	movs	r3, #1
 80218ea:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80218ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80218ee:	1c5a      	adds	r2, r3, #1
 80218f0:	d050      	beq.n	8021994 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218f2:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80218f4:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80218f8:	d241      	bcs.n	802197e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218fa:	4a40      	ldr	r2, [pc, #256]	; (80219fc <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 80218fc:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218fe:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8021902:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8021906:	d874      	bhi.n	80219f2 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8021908:	2301      	movs	r3, #1
 802190a:	469c      	mov	ip, r3
 802190c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802190e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8021910:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021914:	1c53      	adds	r3, r2, #1
 8021916:	d042      	beq.n	802199e <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021918:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802191a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802191e:	d24b      	bcs.n	80219b8 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021920:	4b36      	ldr	r3, [pc, #216]	; (80219fc <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8021922:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021924:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8021928:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802192c:	d864      	bhi.n	80219f8 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802192e:	2201      	movs	r2, #1
 8021930:	4613      	mov	r3, r2
 8021932:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8021934:	2201      	movs	r2, #1
 8021936:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021938:	459c      	cmp	ip, r3
 802193a:	d302      	bcc.n	8021942 <dhcp_bind+0x92>
 802193c:	b10a      	cbz	r2, 8021942 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 802193e:	2300      	movs	r3, #0
 8021940:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8021942:	79cb      	ldrb	r3, [r1, #7]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d02f      	beq.n	80219a8 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8021948:	6a0b      	ldr	r3, [r1, #32]
 802194a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802194c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802194e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8021950:	b92b      	cbnz	r3, 802195e <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8021952:	69cb      	ldr	r3, [r1, #28]
 8021954:	9a00      	ldr	r2, [sp, #0]
 8021956:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8021958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802195c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 802195e:	794b      	ldrb	r3, [r1, #5]
 8021960:	2b0a      	cmp	r3, #10
 8021962:	d004      	beq.n	802196e <dhcp_bind+0xbe>
    dhcp->tries = 0;
 8021964:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021966:	220a      	movs	r2, #10
    dhcp->tries = 0;
 8021968:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 802196a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 802196c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 802196e:	ab01      	add	r3, sp, #4
 8021970:	466a      	mov	r2, sp
 8021972:	311c      	adds	r1, #28
 8021974:	f7fa f982 	bl	801bc7c <netif_set_addr>
}
 8021978:	b003      	add	sp, #12
 802197a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802197e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021982:	469c      	mov	ip, r3
 8021984:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 8021986:	e7c2      	b.n	802190e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 8021988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802198c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802198e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8021990:	1c5a      	adds	r2, r3, #1
 8021992:	d1ae      	bne.n	80218f2 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021994:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021996:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802199a:	1c53      	adds	r3, r2, #1
 802199c:	d1bc      	bne.n	8021918 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 802199e:	898b      	ldrh	r3, [r1, #12]
 80219a0:	1e1a      	subs	r2, r3, #0
 80219a2:	bf18      	it	ne
 80219a4:	2201      	movne	r2, #1
 80219a6:	e7c7      	b.n	8021938 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 80219a8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80219ac:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	db07      	blt.n	80219c2 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80219b2:	23ff      	movs	r3, #255	; 0xff
 80219b4:	9300      	str	r3, [sp, #0]
 80219b6:	e7c9      	b.n	802194c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 80219b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80219bc:	4613      	mov	r3, r2
 80219be:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 80219c0:	e7b8      	b.n	8021934 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 80219c2:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80219c4:	bf8c      	ite	hi
 80219c6:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80219ca:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80219ce:	9300      	str	r3, [sp, #0]
 80219d0:	e7bc      	b.n	802194c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80219d2:	4b0b      	ldr	r3, [pc, #44]	; (8021a00 <dhcp_bind+0x150>)
 80219d4:	f240 4215 	movw	r2, #1045	; 0x415
 80219d8:	490a      	ldr	r1, [pc, #40]	; (8021a04 <dhcp_bind+0x154>)
 80219da:	480b      	ldr	r0, [pc, #44]	; (8021a08 <dhcp_bind+0x158>)
 80219dc:	f004 beb2 	b.w	8026744 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80219e0:	4b07      	ldr	r3, [pc, #28]	; (8021a00 <dhcp_bind+0x150>)
 80219e2:	f240 4217 	movw	r2, #1047	; 0x417
 80219e6:	4909      	ldr	r1, [pc, #36]	; (8021a0c <dhcp_bind+0x15c>)
 80219e8:	4807      	ldr	r0, [pc, #28]	; (8021a08 <dhcp_bind+0x158>)
 80219ea:	f004 beab 	b.w	8026744 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 80219ee:	828a      	strh	r2, [r1, #20]
 80219f0:	e77c      	b.n	80218ec <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 80219f2:	f8a1 c00a 	strh.w	ip, [r1, #10]
 80219f6:	e78a      	b.n	802190e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 80219f8:	818b      	strh	r3, [r1, #12]
 80219fa:	e79b      	b.n	8021934 <dhcp_bind+0x84>
 80219fc:	88888889 	.word	0x88888889
 8021a00:	08046c68 	.word	0x08046c68
 8021a04:	08046cdc 	.word	0x08046cdc
 8021a08:	0802b43c 	.word	0x0802b43c
 8021a0c:	08046cf8 	.word	0x08046cf8

08021a10 <dhcp_inc_pcb_refcount>:
{
 8021a10:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8021a12:	4c15      	ldr	r4, [pc, #84]	; (8021a68 <dhcp_inc_pcb_refcount+0x58>)
 8021a14:	7823      	ldrb	r3, [r4, #0]
 8021a16:	b9fb      	cbnz	r3, 8021a58 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8021a18:	4d14      	ldr	r5, [pc, #80]	; (8021a6c <dhcp_inc_pcb_refcount+0x5c>)
 8021a1a:	682b      	ldr	r3, [r5, #0]
 8021a1c:	b12b      	cbz	r3, 8021a2a <dhcp_inc_pcb_refcount+0x1a>
 8021a1e:	4b14      	ldr	r3, [pc, #80]	; (8021a70 <dhcp_inc_pcb_refcount+0x60>)
 8021a20:	22e5      	movs	r2, #229	; 0xe5
 8021a22:	4914      	ldr	r1, [pc, #80]	; (8021a74 <dhcp_inc_pcb_refcount+0x64>)
 8021a24:	4814      	ldr	r0, [pc, #80]	; (8021a78 <dhcp_inc_pcb_refcount+0x68>)
 8021a26:	f004 fe8d 	bl	8026744 <iprintf>
    dhcp_pcb = udp_new();
 8021a2a:	f7ff fec1 	bl	80217b0 <udp_new>
 8021a2e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8021a30:	b1b0      	cbz	r0, 8021a60 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021a32:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021a34:	4911      	ldr	r1, [pc, #68]	; (8021a7c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021a36:	f042 0220 	orr.w	r2, r2, #32
 8021a3a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021a3c:	2244      	movs	r2, #68	; 0x44
 8021a3e:	f7ff fc67 	bl	8021310 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8021a42:	2243      	movs	r2, #67	; 0x43
 8021a44:	490d      	ldr	r1, [pc, #52]	; (8021a7c <dhcp_inc_pcb_refcount+0x6c>)
 8021a46:	6828      	ldr	r0, [r5, #0]
 8021a48:	f7ff fe30 	bl	80216ac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8021a4c:	2200      	movs	r2, #0
 8021a4e:	490c      	ldr	r1, [pc, #48]	; (8021a80 <dhcp_inc_pcb_refcount+0x70>)
 8021a50:	6828      	ldr	r0, [r5, #0]
 8021a52:	f7ff fe71 	bl	8021738 <udp_recv>
  dhcp_pcb_refcount++;
 8021a56:	7823      	ldrb	r3, [r4, #0]
 8021a58:	3301      	adds	r3, #1
  return ERR_OK;
 8021a5a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8021a5c:	7023      	strb	r3, [r4, #0]
}
 8021a5e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8021a60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8021a64:	bd38      	pop	{r3, r4, r5, pc}
 8021a66:	bf00      	nop
 8021a68:	2002e50c 	.word	0x2002e50c
 8021a6c:	2002e508 	.word	0x2002e508
 8021a70:	08046c68 	.word	0x08046c68
 8021a74:	08046d10 	.word	0x08046d10
 8021a78:	0802b43c 	.word	0x0802b43c
 8021a7c:	0804731c 	.word	0x0804731c
 8021a80:	08022329 	.word	0x08022329

08021a84 <dhcp_dec_pcb_refcount>:
{
 8021a84:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021a86:	4d0b      	ldr	r5, [pc, #44]	; (8021ab4 <dhcp_dec_pcb_refcount+0x30>)
 8021a88:	782c      	ldrb	r4, [r5, #0]
 8021a8a:	b154      	cbz	r4, 8021aa2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 8021a8c:	3c01      	subs	r4, #1
 8021a8e:	b2e4      	uxtb	r4, r4
 8021a90:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8021a92:	b104      	cbz	r4, 8021a96 <dhcp_dec_pcb_refcount+0x12>
}
 8021a94:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8021a96:	4d08      	ldr	r5, [pc, #32]	; (8021ab8 <dhcp_dec_pcb_refcount+0x34>)
 8021a98:	6828      	ldr	r0, [r5, #0]
 8021a9a:	f7ff fe5f 	bl	802175c <udp_remove>
    dhcp_pcb = NULL;
 8021a9e:	602c      	str	r4, [r5, #0]
}
 8021aa0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021aa2:	4b06      	ldr	r3, [pc, #24]	; (8021abc <dhcp_dec_pcb_refcount+0x38>)
 8021aa4:	22ff      	movs	r2, #255	; 0xff
 8021aa6:	4906      	ldr	r1, [pc, #24]	; (8021ac0 <dhcp_dec_pcb_refcount+0x3c>)
 8021aa8:	4806      	ldr	r0, [pc, #24]	; (8021ac4 <dhcp_dec_pcb_refcount+0x40>)
 8021aaa:	f004 fe4b 	bl	8026744 <iprintf>
  dhcp_pcb_refcount--;
 8021aae:	782c      	ldrb	r4, [r5, #0]
 8021ab0:	e7ec      	b.n	8021a8c <dhcp_dec_pcb_refcount+0x8>
 8021ab2:	bf00      	nop
 8021ab4:	2002e50c 	.word	0x2002e50c
 8021ab8:	2002e508 	.word	0x2002e508
 8021abc:	08046c68 	.word	0x08046c68
 8021ac0:	08046d38 	.word	0x08046d38
 8021ac4:	0802b43c 	.word	0x0802b43c

08021ac8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021ac8:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021aca:	4d29      	ldr	r5, [pc, #164]	; (8021b70 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021acc:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021ace:	b083      	sub	sp, #12
 8021ad0:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021ad2:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021ad4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021ad8:	b112      	cbz	r2, 8021ae0 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8021ada:	4b26      	ldr	r3, [pc, #152]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021adc:	68db      	ldr	r3, [r3, #12]
 8021ade:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8021ae0:	792b      	ldrb	r3, [r5, #4]
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d041      	beq.n	8021b6a <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8021ae6:	4b23      	ldr	r3, [pc, #140]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021ae8:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8021aea:	796a      	ldrb	r2, [r5, #5]
 8021aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021aee:	b312      	cbz	r2, 8021b36 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8021af0:	4b20      	ldr	r3, [pc, #128]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021af2:	695b      	ldr	r3, [r3, #20]
 8021af4:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021af6:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021af8:	690a      	ldr	r2, [r1, #16]
 8021afa:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021afc:	bb2b      	cbnz	r3, 8021b4a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 8021afe:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021b00:	79eb      	ldrb	r3, [r5, #7]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d12b      	bne.n	8021b5e <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021b06:	7a2b      	ldrb	r3, [r5, #8]
 8021b08:	b19b      	cbz	r3, 8021b32 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b0a:	4c1a      	ldr	r4, [pc, #104]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021b0c:	6a20      	ldr	r0, [r4, #32]
 8021b0e:	f7f8 fd17 	bl	801a540 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8021b12:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b14:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021b16:	2000      	movs	r0, #0
 8021b18:	f7f9 f8b8 	bl	801ac8c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021b1c:	7a6b      	ldrb	r3, [r5, #9]
 8021b1e:	b143      	cbz	r3, 8021b32 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b20:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021b22:	f7f8 fd0d 	bl	801a540 <lwip_htonl>
 8021b26:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8021b28:	a901      	add	r1, sp, #4
 8021b2a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b2c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021b2e:	f7f9 f8ad 	bl	801ac8c <dns_setserver>
}
 8021b32:	b003      	add	sp, #12
 8021b34:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8021b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021b3c:	08db      	lsrs	r3, r3, #3
 8021b3e:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b40:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021b42:	690a      	ldr	r2, [r1, #16]
 8021b44:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d0d9      	beq.n	8021afe <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021b4a:	4b0a      	ldr	r3, [pc, #40]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021b4c:	6998      	ldr	r0, [r3, #24]
 8021b4e:	f7f8 fcf7 	bl	801a540 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8021b52:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021b54:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8021b56:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021b58:	79eb      	ldrb	r3, [r5, #7]
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d0d3      	beq.n	8021b06 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8021b5e:	4b05      	ldr	r3, [pc, #20]	; (8021b74 <dhcp_handle_ack.isra.0+0xac>)
 8021b60:	69d8      	ldr	r0, [r3, #28]
 8021b62:	f7f8 fced 	bl	801a540 <lwip_htonl>
 8021b66:	6260      	str	r0, [r4, #36]	; 0x24
 8021b68:	e7cd      	b.n	8021b06 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8021b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b6c:	085b      	lsrs	r3, r3, #1
 8021b6e:	e7bc      	b.n	8021aea <dhcp_handle_ack.isra.0+0x22>
 8021b70:	2002e510 	.word	0x2002e510
 8021b74:	2002e51c 	.word	0x2002e51c

08021b78 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8021b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021b7c:	4681      	mov	r9, r0
 8021b7e:	2800      	cmp	r0, #0
 8021b80:	f000 8097 	beq.w	8021cb2 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021b84:	460c      	mov	r4, r1
 8021b86:	2900      	cmp	r1, #0
 8021b88:	f000 808a 	beq.w	8021ca0 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8021b8c:	4616      	mov	r6, r2
 8021b8e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021b92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021b96:	2036      	movs	r0, #54	; 0x36
 8021b98:	461f      	mov	r7, r3
 8021b9a:	f7fa fb37 	bl	801c20c <pbuf_alloc>
  if (p_out == NULL) {
 8021b9e:	4605      	mov	r5, r0
 8021ba0:	2800      	cmp	r0, #0
 8021ba2:	d049      	beq.n	8021c38 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021ba4:	8943      	ldrh	r3, [r0, #10]
 8021ba6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8021baa:	d371      	bcc.n	8021c90 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021bac:	2e03      	cmp	r6, #3
 8021bae:	d051      	beq.n	8021c54 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8021bb0:	79a3      	ldrb	r3, [r4, #6]
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	d043      	beq.n	8021c3e <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8021bb6:	4b43      	ldr	r3, [pc, #268]	; (8021cc4 <dhcp_create_msg+0x14c>)
 8021bb8:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8021bba:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021bbe:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021bc2:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8021bc4:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021bc6:	4640      	mov	r0, r8
 8021bc8:	f003 fe1e 	bl	8025808 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8021bcc:	2301      	movs	r3, #1
 8021bce:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021bd2:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021bd6:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021bda:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021bde:	6820      	ldr	r0, [r4, #0]
 8021be0:	f7f8 fcae 	bl	801a540 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021be4:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021be6:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021bea:	d12d      	bne.n	8021c48 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8021bec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021bf0:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021bf4:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8021bf8:	f109 0434 	add.w	r4, r9, #52	; 0x34
 8021bfc:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021c00:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021c04:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021c06:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021c0a:	d1f9      	bne.n	8021c00 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c0c:	2363      	movs	r3, #99	; 0x63
 8021c0e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8021c12:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c16:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 8021c1a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 8021c1e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c20:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8021c24:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8021c26:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 8021c2a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c2c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8021c30:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8021c34:	2303      	movs	r3, #3
 8021c36:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8021c38:	4628      	mov	r0, r5
 8021c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 8021c3e:	f004 fe25 	bl	802688c <rand>
 8021c42:	4b20      	ldr	r3, [pc, #128]	; (8021cc4 <dhcp_create_msg+0x14c>)
 8021c44:	6018      	str	r0, [r3, #0]
 8021c46:	e7b8      	b.n	8021bba <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021c48:	1ff3      	subs	r3, r6, #7
 8021c4a:	2b01      	cmp	r3, #1
 8021c4c:	d9ce      	bls.n	8021bec <dhcp_create_msg+0x74>
 8021c4e:	2e03      	cmp	r6, #3
 8021c50:	d1d0      	bne.n	8021bf4 <dhcp_create_msg+0x7c>
 8021c52:	e018      	b.n	8021c86 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021c54:	7963      	ldrb	r3, [r4, #5]
 8021c56:	2b03      	cmp	r3, #3
 8021c58:	d0aa      	beq.n	8021bb0 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 8021c5a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021c5e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021c62:	2100      	movs	r1, #0
 8021c64:	4640      	mov	r0, r8
 8021c66:	f003 fdcf 	bl	8025808 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8021c6a:	2301      	movs	r3, #1
 8021c6c:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021c70:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021c74:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021c78:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021c7c:	6820      	ldr	r0, [r4, #0]
 8021c7e:	f7f8 fc5f 	bl	801a540 <lwip_htonl>
 8021c82:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8021c86:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8021c88:	3b04      	subs	r3, #4
 8021c8a:	2b01      	cmp	r3, #1
 8021c8c:	d8b2      	bhi.n	8021bf4 <dhcp_create_msg+0x7c>
 8021c8e:	e7ad      	b.n	8021bec <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021c90:	4b0d      	ldr	r3, [pc, #52]	; (8021cc8 <dhcp_create_msg+0x150>)
 8021c92:	f240 7271 	movw	r2, #1905	; 0x771
 8021c96:	490d      	ldr	r1, [pc, #52]	; (8021ccc <dhcp_create_msg+0x154>)
 8021c98:	480d      	ldr	r0, [pc, #52]	; (8021cd0 <dhcp_create_msg+0x158>)
 8021c9a:	f004 fd53 	bl	8026744 <iprintf>
 8021c9e:	e785      	b.n	8021bac <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021ca0:	4b09      	ldr	r3, [pc, #36]	; (8021cc8 <dhcp_create_msg+0x150>)
 8021ca2:	f240 726a 	movw	r2, #1898	; 0x76a
 8021ca6:	490b      	ldr	r1, [pc, #44]	; (8021cd4 <dhcp_create_msg+0x15c>)
 8021ca8:	4625      	mov	r5, r4
 8021caa:	4809      	ldr	r0, [pc, #36]	; (8021cd0 <dhcp_create_msg+0x158>)
 8021cac:	f004 fd4a 	bl	8026744 <iprintf>
 8021cb0:	e7c2      	b.n	8021c38 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021cb2:	4b05      	ldr	r3, [pc, #20]	; (8021cc8 <dhcp_create_msg+0x150>)
 8021cb4:	f240 7269 	movw	r2, #1897	; 0x769
 8021cb8:	4907      	ldr	r1, [pc, #28]	; (8021cd8 <dhcp_create_msg+0x160>)
 8021cba:	464d      	mov	r5, r9
 8021cbc:	4804      	ldr	r0, [pc, #16]	; (8021cd0 <dhcp_create_msg+0x158>)
 8021cbe:	f004 fd41 	bl	8026744 <iprintf>
 8021cc2:	e7b9      	b.n	8021c38 <dhcp_create_msg+0xc0>
 8021cc4:	2002e544 	.word	0x2002e544
 8021cc8:	08046c68 	.word	0x08046c68
 8021ccc:	08046d9c 	.word	0x08046d9c
 8021cd0:	0802b43c 	.word	0x0802b43c
 8021cd4:	08046d7c 	.word	0x08046d7c
 8021cd8:	08046d5c 	.word	0x08046d5c

08021cdc <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8021cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021ce0:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8021ce4:	b087      	sub	sp, #28
 8021ce6:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8021ce8:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8021cec:	2b03      	cmp	r3, #3
 8021cee:	d007      	beq.n	8021d00 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8021cf0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021cf2:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8021cf4:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8021cf8:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 8021cfc:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021d00:	f10d 0316 	add.w	r3, sp, #22
 8021d04:	2203      	movs	r2, #3
 8021d06:	4651      	mov	r1, sl
 8021d08:	4648      	mov	r0, r9
 8021d0a:	f7ff ff35 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 8021d0e:	4607      	mov	r7, r0
 8021d10:	2800      	cmp	r0, #0
 8021d12:	f000 808d 	beq.w	8021e30 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d16:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021d1a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d1c:	f104 0804 	add.w	r8, r4, #4
 8021d20:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d22:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d24:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021d28:	f200 80a3 	bhi.w	8021e72 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 8021d2c:	2239      	movs	r2, #57	; 0x39
 8021d2e:	1c63      	adds	r3, r4, #1
 8021d30:	fa1f fb85 	uxth.w	fp, r5
 8021d34:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021d36:	b29b      	uxth	r3, r3
 8021d38:	2202      	movs	r2, #2
 8021d3a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d3c:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d40:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d44:	2b44      	cmp	r3, #68	; 0x44
 8021d46:	f200 80ac 	bhi.w	8021ea2 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021d4a:	2202      	movs	r2, #2
 8021d4c:	1ce3      	adds	r3, r4, #3
 8021d4e:	fa1f f588 	uxth.w	r5, r8
 8021d52:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	2240      	movs	r2, #64	; 0x40
 8021d5a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d5c:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8021d5e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d62:	2b44      	cmp	r3, #68	; 0x44
 8021d64:	f200 8095 	bhi.w	8021e92 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8021d68:	1d63      	adds	r3, r4, #5
 8021d6a:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8021d6c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 8021d6e:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021d70:	b29b      	uxth	r3, r3
 8021d72:	2204      	movs	r2, #4
 8021d74:	b2a4      	uxth	r4, r4
 8021d76:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d78:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021d7c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d80:	f7f8 fbde 	bl	801a540 <lwip_htonl>
 8021d84:	4631      	mov	r1, r6
 8021d86:	4602      	mov	r2, r0
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f7ff fd55 	bl	8021838 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d8e:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d90:	4605      	mov	r5, r0
 8021d92:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d96:	2b44      	cmp	r3, #68	; 0x44
 8021d98:	9303      	str	r3, [sp, #12]
 8021d9a:	d872      	bhi.n	8021e82 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8021d9c:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 8021d9e:	2237      	movs	r2, #55	; 0x37
 8021da0:	1c6b      	adds	r3, r5, #1
 8021da2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8021ed8 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8021da6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8021da8:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021daa:	b29b      	uxth	r3, r3
 8021dac:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dae:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021db0:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8021db4:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021db6:	493f      	ldr	r1, [pc, #252]	; (8021eb4 <dhcp_reboot.isra.0+0x1d8>)
 8021db8:	4b3f      	ldr	r3, [pc, #252]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021dba:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dbe:	d80c      	bhi.n	8021dda <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 8021dc0:	1c62      	adds	r2, r4, #1
 8021dc2:	f806 b004 	strb.w	fp, [r6, r4]
 8021dc6:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021dc8:	4a3c      	ldr	r2, [pc, #240]	; (8021ebc <dhcp_reboot.isra.0+0x1e0>)
 8021dca:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021dcc:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021dd0:	d00b      	beq.n	8021dea <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dd2:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021dd4:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dd8:	d9f2      	bls.n	8021dc0 <dhcp_reboot.isra.0+0xe4>
 8021dda:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021dde:	4838      	ldr	r0, [pc, #224]	; (8021ec0 <dhcp_reboot.isra.0+0x1e4>)
 8021de0:	f004 fcb0 	bl	8026744 <iprintf>
 8021de4:	4b34      	ldr	r3, [pc, #208]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
 8021de6:	4933      	ldr	r1, [pc, #204]	; (8021eb4 <dhcp_reboot.isra.0+0x1d8>)
 8021de8:	e7ea      	b.n	8021dc0 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8021dea:	1de8      	adds	r0, r5, #7
 8021dec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021df0:	22ff      	movs	r2, #255	; 0xff
 8021df2:	b280      	uxth	r0, r0
 8021df4:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021df6:	2843      	cmp	r0, #67	; 0x43
 8021df8:	d808      	bhi.n	8021e0c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021dfa:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8021dfe:	4430      	add	r0, r6
 8021e00:	2100      	movs	r1, #0
 8021e02:	b2ad      	uxth	r5, r5
 8021e04:	1c6a      	adds	r2, r5, #1
 8021e06:	f003 fcff 	bl	8025808 <memset>
 8021e0a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021e0c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021e10:	4638      	mov	r0, r7
 8021e12:	b289      	uxth	r1, r1
 8021e14:	f7fa fab4 	bl	801c380 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021e18:	482a      	ldr	r0, [pc, #168]	; (8021ec4 <dhcp_reboot.isra.0+0x1e8>)
 8021e1a:	2343      	movs	r3, #67	; 0x43
 8021e1c:	4a2a      	ldr	r2, [pc, #168]	; (8021ec8 <dhcp_reboot.isra.0+0x1ec>)
 8021e1e:	6800      	ldr	r0, [r0, #0]
 8021e20:	4639      	mov	r1, r7
 8021e22:	f8cd 9000 	str.w	r9, [sp]
 8021e26:	f7ff fba5 	bl	8021574 <udp_sendto_if>
    pbuf_free(p_out);
 8021e2a:	4638      	mov	r0, r7
 8021e2c:	f7fa fbc0 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021e30:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8021e34:	2bff      	cmp	r3, #255	; 0xff
 8021e36:	d016      	beq.n	8021e66 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8021e38:	3301      	adds	r3, #1
 8021e3a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e3c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021e3e:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e42:	d810      	bhi.n	8021e66 <dhcp_reboot.isra.0+0x18a>
 8021e44:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e48:	4a20      	ldr	r2, [pc, #128]	; (8021ecc <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021e4e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021e54:	b29b      	uxth	r3, r3
 8021e56:	fba2 2303 	umull	r2, r3, r2, r3
 8021e5a:	095b      	lsrs	r3, r3, #5
 8021e5c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021e60:	b007      	add	sp, #28
 8021e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021e66:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e68:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021e6c:	b007      	add	sp, #28
 8021e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021e72:	4b11      	ldr	r3, [pc, #68]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
 8021e74:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e78:	4915      	ldr	r1, [pc, #84]	; (8021ed0 <dhcp_reboot.isra.0+0x1f4>)
 8021e7a:	4811      	ldr	r0, [pc, #68]	; (8021ec0 <dhcp_reboot.isra.0+0x1e4>)
 8021e7c:	f004 fc62 	bl	8026744 <iprintf>
 8021e80:	e754      	b.n	8021d2c <dhcp_reboot.isra.0+0x50>
 8021e82:	4b0d      	ldr	r3, [pc, #52]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
 8021e84:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e88:	4911      	ldr	r1, [pc, #68]	; (8021ed0 <dhcp_reboot.isra.0+0x1f4>)
 8021e8a:	480d      	ldr	r0, [pc, #52]	; (8021ec0 <dhcp_reboot.isra.0+0x1e4>)
 8021e8c:	f004 fc5a 	bl	8026744 <iprintf>
 8021e90:	e784      	b.n	8021d9c <dhcp_reboot.isra.0+0xc0>
 8021e92:	4b09      	ldr	r3, [pc, #36]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
 8021e94:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e98:	490d      	ldr	r1, [pc, #52]	; (8021ed0 <dhcp_reboot.isra.0+0x1f4>)
 8021e9a:	4809      	ldr	r0, [pc, #36]	; (8021ec0 <dhcp_reboot.isra.0+0x1e4>)
 8021e9c:	f004 fc52 	bl	8026744 <iprintf>
 8021ea0:	e762      	b.n	8021d68 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ea2:	4b05      	ldr	r3, [pc, #20]	; (8021eb8 <dhcp_reboot.isra.0+0x1dc>)
 8021ea4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021ea8:	490a      	ldr	r1, [pc, #40]	; (8021ed4 <dhcp_reboot.isra.0+0x1f8>)
 8021eaa:	4805      	ldr	r0, [pc, #20]	; (8021ec0 <dhcp_reboot.isra.0+0x1e4>)
 8021eac:	f004 fc4a 	bl	8026744 <iprintf>
 8021eb0:	e74b      	b.n	8021d4a <dhcp_reboot.isra.0+0x6e>
 8021eb2:	bf00      	nop
 8021eb4:	08046e5c 	.word	0x08046e5c
 8021eb8:	08046c68 	.word	0x08046c68
 8021ebc:	08046fe4 	.word	0x08046fe4
 8021ec0:	0802b43c 	.word	0x0802b43c
 8021ec4:	2002e508 	.word	0x2002e508
 8021ec8:	08047320 	.word	0x08047320
 8021ecc:	10624dd3 	.word	0x10624dd3
 8021ed0:	08046ddc 	.word	0x08046ddc
 8021ed4:	08046e20 	.word	0x08046e20
 8021ed8:	08046fe1 	.word	0x08046fe1

08021edc <dhcp_discover>:
{
 8021edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021ee0:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021ee2:	2300      	movs	r3, #0
{
 8021ee4:	b087      	sub	sp, #28
 8021ee6:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8021ee8:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021eea:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8021eec:	2a06      	cmp	r2, #6
 8021eee:	d003      	beq.n	8021ef8 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8021ef0:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8021ef2:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8021ef4:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8021ef6:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8021ef8:	f10d 0316 	add.w	r3, sp, #22
 8021efc:	2201      	movs	r2, #1
 8021efe:	4639      	mov	r1, r7
 8021f00:	4658      	mov	r0, fp
 8021f02:	f7ff fe39 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 8021f06:	4605      	mov	r5, r0
 8021f08:	2800      	cmp	r0, #0
 8021f0a:	f000 8081 	beq.w	8022010 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f0e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021f12:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f14:	f104 0804 	add.w	r8, r4, #4
 8021f18:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f1c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f1e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021f22:	f200 809a 	bhi.w	802205a <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8021f26:	2239      	movs	r2, #57	; 0x39
 8021f28:	1c63      	adds	r3, r4, #1
 8021f2a:	fa1f f189 	uxth.w	r1, r9
 8021f2e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021f30:	b29b      	uxth	r3, r3
 8021f32:	2202      	movs	r2, #2
 8021f34:	9103      	str	r1, [sp, #12]
 8021f36:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f38:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021f3a:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f3e:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f40:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f44:	f200 8091 	bhi.w	802206a <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021f48:	1ce3      	adds	r3, r4, #3
 8021f4a:	fa1f f988 	uxth.w	r9, r8
 8021f4e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021f52:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021f54:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021f56:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021f58:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f5c:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021f60:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f64:	2b44      	cmp	r3, #68	; 0x44
 8021f66:	d870      	bhi.n	802204a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8021f68:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021f6c:	2237      	movs	r2, #55	; 0x37
 8021f6e:	1d63      	adds	r3, r4, #5
 8021f70:	f8df a130 	ldr.w	sl, [pc, #304]	; 80220a4 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8021f74:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8021f78:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021f7c:	b29b      	uxth	r3, r3
 8021f7e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f80:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f84:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8021f88:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f8a:	493c      	ldr	r1, [pc, #240]	; (802207c <dhcp_discover+0x1a0>)
 8021f8c:	4b3c      	ldr	r3, [pc, #240]	; (8022080 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f8e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f92:	d80f      	bhi.n	8021fb4 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8021f94:	f108 0201 	add.w	r2, r8, #1
 8021f98:	f806 9008 	strb.w	r9, [r6, r8]
 8021f9c:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fa0:	4a38      	ldr	r2, [pc, #224]	; (8022084 <dhcp_discover+0x1a8>)
 8021fa2:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021fa4:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fa8:	d00c      	beq.n	8021fc4 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021faa:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021fae:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021fb2:	d9ef      	bls.n	8021f94 <dhcp_discover+0xb8>
 8021fb4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021fb8:	4833      	ldr	r0, [pc, #204]	; (8022088 <dhcp_discover+0x1ac>)
 8021fba:	f004 fbc3 	bl	8026744 <iprintf>
 8021fbe:	4b30      	ldr	r3, [pc, #192]	; (8022080 <dhcp_discover+0x1a4>)
 8021fc0:	492e      	ldr	r1, [pc, #184]	; (802207c <dhcp_discover+0x1a0>)
 8021fc2:	e7e7      	b.n	8021f94 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8021fc4:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8021fc8:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021fcc:	22ff      	movs	r2, #255	; 0xff
 8021fce:	b280      	uxth	r0, r0
 8021fd0:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021fd2:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021fd4:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021fd6:	d808      	bhi.n	8021fea <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8021fd8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8021fdc:	4430      	add	r0, r6
 8021fde:	2100      	movs	r1, #0
 8021fe0:	b2a4      	uxth	r4, r4
 8021fe2:	1c62      	adds	r2, r4, #1
 8021fe4:	f003 fc10 	bl	8025808 <memset>
 8021fe8:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021fea:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021fee:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021ff0:	4c26      	ldr	r4, [pc, #152]	; (802208c <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021ff2:	b289      	uxth	r1, r1
 8021ff4:	f7fa f9c4 	bl	801c380 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021ff8:	4825      	ldr	r0, [pc, #148]	; (8022090 <dhcp_discover+0x1b4>)
 8021ffa:	2343      	movs	r3, #67	; 0x43
 8021ffc:	4a25      	ldr	r2, [pc, #148]	; (8022094 <dhcp_discover+0x1b8>)
 8021ffe:	6800      	ldr	r0, [r0, #0]
 8022000:	4629      	mov	r1, r5
 8022002:	e9cd b400 	strd	fp, r4, [sp]
 8022006:	f7ff fa01 	bl	802140c <udp_sendto_if_src>
    pbuf_free(p_out);
 802200a:	4628      	mov	r0, r5
 802200c:	f7fa fad0 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022010:	79bb      	ldrb	r3, [r7, #6]
 8022012:	2bff      	cmp	r3, #255	; 0xff
 8022014:	d013      	beq.n	802203e <dhcp_discover+0x162>
    dhcp->tries++;
 8022016:	3301      	adds	r3, #1
 8022018:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802201a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 802201c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802201e:	d80e      	bhi.n	802203e <dhcp_discover+0x162>
 8022020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022024:	491c      	ldr	r1, [pc, #112]	; (8022098 <dhcp_discover+0x1bc>)
}
 8022026:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022028:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802202a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802202e:	b29b      	uxth	r3, r3
 8022030:	fba1 2303 	umull	r2, r3, r1, r3
 8022034:	095b      	lsrs	r3, r3, #5
 8022036:	813b      	strh	r3, [r7, #8]
}
 8022038:	b007      	add	sp, #28
 802203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 802203e:	2378      	movs	r3, #120	; 0x78
}
 8022040:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022042:	813b      	strh	r3, [r7, #8]
}
 8022044:	b007      	add	sp, #28
 8022046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802204a:	4b0d      	ldr	r3, [pc, #52]	; (8022080 <dhcp_discover+0x1a4>)
 802204c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022050:	4912      	ldr	r1, [pc, #72]	; (802209c <dhcp_discover+0x1c0>)
 8022052:	480d      	ldr	r0, [pc, #52]	; (8022088 <dhcp_discover+0x1ac>)
 8022054:	f004 fb76 	bl	8026744 <iprintf>
 8022058:	e786      	b.n	8021f68 <dhcp_discover+0x8c>
 802205a:	4b09      	ldr	r3, [pc, #36]	; (8022080 <dhcp_discover+0x1a4>)
 802205c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022060:	490e      	ldr	r1, [pc, #56]	; (802209c <dhcp_discover+0x1c0>)
 8022062:	4809      	ldr	r0, [pc, #36]	; (8022088 <dhcp_discover+0x1ac>)
 8022064:	f004 fb6e 	bl	8026744 <iprintf>
 8022068:	e75d      	b.n	8021f26 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802206a:	4b05      	ldr	r3, [pc, #20]	; (8022080 <dhcp_discover+0x1a4>)
 802206c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022070:	490b      	ldr	r1, [pc, #44]	; (80220a0 <dhcp_discover+0x1c4>)
 8022072:	4805      	ldr	r0, [pc, #20]	; (8022088 <dhcp_discover+0x1ac>)
 8022074:	f004 fb66 	bl	8026744 <iprintf>
 8022078:	e766      	b.n	8021f48 <dhcp_discover+0x6c>
 802207a:	bf00      	nop
 802207c:	08046e5c 	.word	0x08046e5c
 8022080:	08046c68 	.word	0x08046c68
 8022084:	08046fe4 	.word	0x08046fe4
 8022088:	0802b43c 	.word	0x0802b43c
 802208c:	0804731c 	.word	0x0804731c
 8022090:	2002e508 	.word	0x2002e508
 8022094:	08047320 	.word	0x08047320
 8022098:	10624dd3 	.word	0x10624dd3
 802209c:	08046ddc 	.word	0x08046ddc
 80220a0:	08046e20 	.word	0x08046e20
 80220a4:	08046fe1 	.word	0x08046fe1

080220a8 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80220a8:	2800      	cmp	r0, #0
 80220aa:	f000 8112 	beq.w	80222d2 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 80220ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 80220b2:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 80220b4:	b087      	sub	sp, #28
 80220b6:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80220b8:	2e00      	cmp	r6, #0
 80220ba:	f000 8111 	beq.w	80222e0 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 80220be:	7973      	ldrb	r3, [r6, #5]
 80220c0:	2b01      	cmp	r3, #1
 80220c2:	d004      	beq.n	80220ce <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 80220c4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80220c6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 80220c8:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 80220ca:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 80220cc:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80220ce:	f10d 0316 	add.w	r3, sp, #22
 80220d2:	2203      	movs	r2, #3
 80220d4:	4631      	mov	r1, r6
 80220d6:	4658      	mov	r0, fp
 80220d8:	f7ff fd4e 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 80220dc:	4605      	mov	r5, r0
 80220de:	2800      	cmp	r0, #0
 80220e0:	f000 80b4 	beq.w	802224c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80220e4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80220e8:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220ea:	f107 0804 	add.w	r8, r7, #4
 80220ee:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80220f2:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220f4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80220f8:	f200 80cb 	bhi.w	8022292 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 80220fc:	2239      	movs	r2, #57	; 0x39
 80220fe:	1c7b      	adds	r3, r7, #1
 8022100:	fa1f f189 	uxth.w	r1, r9
 8022104:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8022106:	b29b      	uxth	r3, r3
 8022108:	2202      	movs	r2, #2
 802210a:	9103      	str	r1, [sp, #12]
 802210c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802210e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022110:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022114:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022116:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802211a:	f200 80c2 	bhi.w	80222a2 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802211e:	1cfb      	adds	r3, r7, #3
 8022120:	fa1f f988 	uxth.w	r9, r8
 8022124:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022128:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802212a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802212c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802212e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022132:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022136:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802213a:	2b44      	cmp	r3, #68	; 0x44
 802213c:	f200 80b9 	bhi.w	80222b2 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8022140:	1d7b      	adds	r3, r7, #5
 8022142:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8022144:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8022146:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 802214a:	b29b      	uxth	r3, r3
 802214c:	2204      	movs	r2, #4
 802214e:	b2bf      	uxth	r7, r7
 8022150:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022152:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022154:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022158:	f7f8 f9f2 	bl	801a540 <lwip_htonl>
 802215c:	4621      	mov	r1, r4
 802215e:	4602      	mov	r2, r0
 8022160:	4638      	mov	r0, r7
 8022162:	f7ff fb69 	bl	8021838 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022166:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022168:	4607      	mov	r7, r0
 802216a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802216e:	2b44      	cmp	r3, #68	; 0x44
 8022170:	f200 80a7 	bhi.w	80222c2 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8022174:	2236      	movs	r2, #54	; 0x36
 8022176:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8022178:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 802217c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 802217e:	b29b      	uxth	r3, r3
 8022180:	2204      	movs	r2, #4
 8022182:	fa1f f888 	uxth.w	r8, r8
 8022186:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8022188:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 802218a:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802218e:	f7f8 f9d7 	bl	801a540 <lwip_htonl>
 8022192:	4621      	mov	r1, r4
 8022194:	4602      	mov	r2, r0
 8022196:	4640      	mov	r0, r8
 8022198:	f7ff fb4e 	bl	8021838 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802219c:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802219e:	4680      	mov	r8, r0
 80221a0:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80221a4:	2b44      	cmp	r3, #68	; 0x44
 80221a6:	9303      	str	r3, [sp, #12]
 80221a8:	d86b      	bhi.n	8022282 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 80221aa:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 80221ae:	2237      	movs	r2, #55	; 0x37
 80221b0:	f108 0301 	add.w	r3, r8, #1
 80221b4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8022324 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 80221b8:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 80221ba:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 80221be:	b29b      	uxth	r3, r3
 80221c0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221c2:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80221c4:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 80221c8:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221ca:	494a      	ldr	r1, [pc, #296]	; (80222f4 <dhcp_select.isra.0+0x24c>)
 80221cc:	4b4a      	ldr	r3, [pc, #296]	; (80222f8 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80221ce:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221d2:	d80c      	bhi.n	80221ee <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 80221d4:	1c7a      	adds	r2, r7, #1
 80221d6:	f804 a007 	strb.w	sl, [r4, r7]
 80221da:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80221dc:	4a47      	ldr	r2, [pc, #284]	; (80222fc <dhcp_select.isra.0+0x254>)
 80221de:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80221e0:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80221e4:	d00b      	beq.n	80221fe <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221e6:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80221e8:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221ec:	d9f2      	bls.n	80221d4 <dhcp_select.isra.0+0x12c>
 80221ee:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80221f2:	4843      	ldr	r0, [pc, #268]	; (8022300 <dhcp_select.isra.0+0x258>)
 80221f4:	f004 faa6 	bl	8026744 <iprintf>
 80221f8:	4b3f      	ldr	r3, [pc, #252]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80221fa:	493e      	ldr	r1, [pc, #248]	; (80222f4 <dhcp_select.isra.0+0x24c>)
 80221fc:	e7ea      	b.n	80221d4 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 80221fe:	f108 0007 	add.w	r0, r8, #7
 8022202:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8022206:	22ff      	movs	r2, #255	; 0xff
 8022208:	b280      	uxth	r0, r0
 802220a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802220c:	2843      	cmp	r0, #67	; 0x43
 802220e:	d80a      	bhi.n	8022226 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8022210:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8022214:	4420      	add	r0, r4
 8022216:	2100      	movs	r1, #0
 8022218:	fa1f f888 	uxth.w	r8, r8
 802221c:	f108 0201 	add.w	r2, r8, #1
 8022220:	f003 faf2 	bl	8025808 <memset>
 8022224:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022226:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802222a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802222c:	4c35      	ldr	r4, [pc, #212]	; (8022304 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802222e:	b289      	uxth	r1, r1
 8022230:	f7fa f8a6 	bl	801c380 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022234:	4834      	ldr	r0, [pc, #208]	; (8022308 <dhcp_select.isra.0+0x260>)
 8022236:	2343      	movs	r3, #67	; 0x43
 8022238:	4a34      	ldr	r2, [pc, #208]	; (802230c <dhcp_select.isra.0+0x264>)
 802223a:	6800      	ldr	r0, [r0, #0]
 802223c:	4629      	mov	r1, r5
 802223e:	e9cd b400 	strd	fp, r4, [sp]
 8022242:	f7ff f8e3 	bl	802140c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022246:	4628      	mov	r0, r5
 8022248:	f7fa f9b2 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 802224c:	79b3      	ldrb	r3, [r6, #6]
 802224e:	2bff      	cmp	r3, #255	; 0xff
 8022250:	d012      	beq.n	8022278 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8022252:	3301      	adds	r3, #1
 8022254:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022256:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8022258:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802225a:	d80d      	bhi.n	8022278 <dhcp_select.isra.0+0x1d0>
 802225c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022260:	492b      	ldr	r1, [pc, #172]	; (8022310 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022262:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022264:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022268:	b29b      	uxth	r3, r3
 802226a:	fba1 2303 	umull	r2, r3, r1, r3
 802226e:	095b      	lsrs	r3, r3, #5
 8022270:	8133      	strh	r3, [r6, #8]
}
 8022272:	b007      	add	sp, #28
 8022274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8022278:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802227a:	8133      	strh	r3, [r6, #8]
}
 802227c:	b007      	add	sp, #28
 802227e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022282:	4b1d      	ldr	r3, [pc, #116]	; (80222f8 <dhcp_select.isra.0+0x250>)
 8022284:	f240 529a 	movw	r2, #1434	; 0x59a
 8022288:	4922      	ldr	r1, [pc, #136]	; (8022314 <dhcp_select.isra.0+0x26c>)
 802228a:	481d      	ldr	r0, [pc, #116]	; (8022300 <dhcp_select.isra.0+0x258>)
 802228c:	f004 fa5a 	bl	8026744 <iprintf>
 8022290:	e78b      	b.n	80221aa <dhcp_select.isra.0+0x102>
 8022292:	4b19      	ldr	r3, [pc, #100]	; (80222f8 <dhcp_select.isra.0+0x250>)
 8022294:	f240 529a 	movw	r2, #1434	; 0x59a
 8022298:	491e      	ldr	r1, [pc, #120]	; (8022314 <dhcp_select.isra.0+0x26c>)
 802229a:	4819      	ldr	r0, [pc, #100]	; (8022300 <dhcp_select.isra.0+0x258>)
 802229c:	f004 fa52 	bl	8026744 <iprintf>
 80222a0:	e72c      	b.n	80220fc <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80222a2:	4b15      	ldr	r3, [pc, #84]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80222a4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80222a8:	491b      	ldr	r1, [pc, #108]	; (8022318 <dhcp_select.isra.0+0x270>)
 80222aa:	4815      	ldr	r0, [pc, #84]	; (8022300 <dhcp_select.isra.0+0x258>)
 80222ac:	f004 fa4a 	bl	8026744 <iprintf>
 80222b0:	e735      	b.n	802211e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80222b2:	4b11      	ldr	r3, [pc, #68]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80222b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80222b8:	4916      	ldr	r1, [pc, #88]	; (8022314 <dhcp_select.isra.0+0x26c>)
 80222ba:	4811      	ldr	r0, [pc, #68]	; (8022300 <dhcp_select.isra.0+0x258>)
 80222bc:	f004 fa42 	bl	8026744 <iprintf>
 80222c0:	e73e      	b.n	8022140 <dhcp_select.isra.0+0x98>
 80222c2:	4b0d      	ldr	r3, [pc, #52]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80222c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80222c8:	4912      	ldr	r1, [pc, #72]	; (8022314 <dhcp_select.isra.0+0x26c>)
 80222ca:	480d      	ldr	r0, [pc, #52]	; (8022300 <dhcp_select.isra.0+0x258>)
 80222cc:	f004 fa3a 	bl	8026744 <iprintf>
 80222d0:	e750      	b.n	8022174 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80222d2:	4b09      	ldr	r3, [pc, #36]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80222d4:	f240 1277 	movw	r2, #375	; 0x177
 80222d8:	4910      	ldr	r1, [pc, #64]	; (802231c <dhcp_select.isra.0+0x274>)
 80222da:	4809      	ldr	r0, [pc, #36]	; (8022300 <dhcp_select.isra.0+0x258>)
 80222dc:	f004 ba32 	b.w	8026744 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80222e0:	4b05      	ldr	r3, [pc, #20]	; (80222f8 <dhcp_select.isra.0+0x250>)
 80222e2:	f240 1279 	movw	r2, #377	; 0x179
 80222e6:	490e      	ldr	r1, [pc, #56]	; (8022320 <dhcp_select.isra.0+0x278>)
 80222e8:	4805      	ldr	r0, [pc, #20]	; (8022300 <dhcp_select.isra.0+0x258>)
}
 80222ea:	b007      	add	sp, #28
 80222ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80222f0:	f004 ba28 	b.w	8026744 <iprintf>
 80222f4:	08046e5c 	.word	0x08046e5c
 80222f8:	08046c68 	.word	0x08046c68
 80222fc:	08046fe4 	.word	0x08046fe4
 8022300:	0802b43c 	.word	0x0802b43c
 8022304:	0804731c 	.word	0x0804731c
 8022308:	2002e508 	.word	0x2002e508
 802230c:	08047320 	.word	0x08047320
 8022310:	10624dd3 	.word	0x10624dd3
 8022314:	08046ddc 	.word	0x08046ddc
 8022318:	08046e20 	.word	0x08046e20
 802231c:	08046e94 	.word	0x08046e94
 8022320:	08046eb0 	.word	0x08046eb0
 8022324:	08046fe1 	.word	0x08046fe1

08022328 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8022328:	4ba5      	ldr	r3, [pc, #660]	; (80225c0 <dhcp_recv+0x298>)
{
 802232a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 802232e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8022332:	b08b      	sub	sp, #44	; 0x2c
 8022334:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022336:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 802233a:	f1b9 0f00 	cmp.w	r9, #0
 802233e:	d04b      	beq.n	80223d8 <dhcp_recv+0xb0>
 8022340:	f899 3004 	ldrb.w	r3, [r9, #4]
 8022344:	2b00      	cmp	r3, #0
 8022346:	d047      	beq.n	80223d8 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8022348:	8953      	ldrh	r3, [r2, #10]
 802234a:	2b2b      	cmp	r3, #43	; 0x2b
 802234c:	d944      	bls.n	80223d8 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 802234e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8022350:	782b      	ldrb	r3, [r5, #0]
 8022352:	2b02      	cmp	r3, #2
 8022354:	d140      	bne.n	80223d8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022356:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 802235a:	b186      	cbz	r6, 802237e <dhcp_recv+0x56>
 802235c:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8022360:	f105 021c 	add.w	r2, r5, #28
 8022364:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022366:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802236a:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 802236c:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022370:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022372:	4284      	cmp	r4, r0
 8022374:	d130      	bne.n	80223d8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022376:	2b06      	cmp	r3, #6
 8022378:	d001      	beq.n	802237e <dhcp_recv+0x56>
 802237a:	42b3      	cmp	r3, r6
 802237c:	d3f3      	bcc.n	8022366 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 802237e:	6868      	ldr	r0, [r5, #4]
 8022380:	f7f8 f8de 	bl	801a540 <lwip_htonl>
 8022384:	f8d9 3000 	ldr.w	r3, [r9]
 8022388:	4298      	cmp	r0, r3
 802238a:	d125      	bne.n	80223d8 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 802238c:	4b8d      	ldr	r3, [pc, #564]	; (80225c4 <dhcp_recv+0x29c>)
 802238e:	2200      	movs	r2, #0
 8022390:	605a      	str	r2, [r3, #4]
 8022392:	811a      	strh	r2, [r3, #8]
 8022394:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8022396:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 802239a:	2b2b      	cmp	r3, #43	; 0x2b
 802239c:	d91c      	bls.n	80223d8 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 802239e:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 80223a2:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 80223a4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 80223a8:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 80223ac:	4693      	mov	fp, r2
 80223ae:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 80223b2:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 80223b6:	e000      	b.n	80223ba <dhcp_recv+0x92>
 80223b8:	896b      	ldrh	r3, [r5, #10]
 80223ba:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 80223bc:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80223c0:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 80223c4:	d80e      	bhi.n	80223e4 <dhcp_recv+0xbc>
    q = q->next;
 80223c6:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 80223c8:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80223cc:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 80223d0:	2d00      	cmp	r5, #0
 80223d2:	d1f1      	bne.n	80223b8 <dhcp_recv+0x90>
 80223d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 80223d8:	4658      	mov	r0, fp
}
 80223da:	b00b      	add	sp, #44	; 0x2c
 80223dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80223e0:	f7fa b8e6 	b.w	801c5b0 <pbuf_free>
  options = (u8_t *)q->payload;
 80223e4:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80223e6:	45d8      	cmp	r8, fp
 80223e8:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 80223ec:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80223ee:	f080 8140 	bcs.w	8022672 <dhcp_recv+0x34a>
 80223f2:	9c02      	ldr	r4, [sp, #8]
 80223f4:	9b01      	ldr	r3, [sp, #4]
 80223f6:	5d1a      	ldrb	r2, [r3, r4]
 80223f8:	2aff      	cmp	r2, #255	; 0xff
 80223fa:	f000 813a 	beq.w	8022672 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 80223fe:	1ca7      	adds	r7, r4, #2
 8022400:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8022402:	42bc      	cmp	r4, r7
 8022404:	d8e6      	bhi.n	80223d4 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8022406:	1c61      	adds	r1, r4, #1
 8022408:	896b      	ldrh	r3, [r5, #10]
 802240a:	4299      	cmp	r1, r3
 802240c:	f280 8129 	bge.w	8022662 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8022410:	9801      	ldr	r0, [sp, #4]
 8022412:	4420      	add	r0, r4
 8022414:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8022416:	2a3b      	cmp	r2, #59	; 0x3b
 8022418:	d83e      	bhi.n	8022498 <dhcp_recv+0x170>
 802241a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802241e:	0040      	.short	0x0040
 8022420:	003d0053 	.word	0x003d0053
 8022424:	003d00b4 	.word	0x003d00b4
 8022428:	009f003d 	.word	0x009f003d
 802242c:	003d003d 	.word	0x003d003d
 8022430:	003d003d 	.word	0x003d003d
 8022434:	003d003d 	.word	0x003d003d
 8022438:	003d003d 	.word	0x003d003d
 802243c:	003d003d 	.word	0x003d003d
 8022440:	003d003d 	.word	0x003d003d
 8022444:	003d003d 	.word	0x003d003d
 8022448:	003d003d 	.word	0x003d003d
 802244c:	003d003d 	.word	0x003d003d
 8022450:	003d003d 	.word	0x003d003d
 8022454:	003d003d 	.word	0x003d003d
 8022458:	003d003d 	.word	0x003d003d
 802245c:	003d003d 	.word	0x003d003d
 8022460:	003d003d 	.word	0x003d003d
 8022464:	003d003d 	.word	0x003d003d
 8022468:	003d003d 	.word	0x003d003d
 802246c:	003d003d 	.word	0x003d003d
 8022470:	003d003d 	.word	0x003d003d
 8022474:	003d003d 	.word	0x003d003d
 8022478:	003d003d 	.word	0x003d003d
 802247c:	003d003d 	.word	0x003d003d
 8022480:	003d003d 	.word	0x003d003d
 8022484:	00f80115 	.word	0x00f80115
 8022488:	00df0109 	.word	0x00df0109
 802248c:	003d003d 	.word	0x003d003d
 8022490:	00ec003d 	.word	0x00ec003d
 8022494:	00c3      	.short	0x00c3
 8022496:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8022498:	2a00      	cmp	r2, #0
 802249a:	f040 82a2 	bne.w	80229e2 <dhcp_recv+0x6ba>
      offset++;
 802249e:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 80224a0:	429c      	cmp	r4, r3
 80224a2:	f0c0 80e3 	bcc.w	802266c <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 80224a6:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80224a8:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 80224ac:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80224ae:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 80224b2:	455c      	cmp	r4, fp
 80224b4:	d28e      	bcs.n	80223d4 <dhcp_recv+0xac>
        q = q->next;
 80224b6:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80224b8:	2d00      	cmp	r5, #0
 80224ba:	f000 81e1 	beq.w	8022880 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 80224be:	686b      	ldr	r3, [r5, #4]
 80224c0:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80224c2:	e797      	b.n	80223f4 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80224c4:	2e04      	cmp	r6, #4
 80224c6:	f040 81b5 	bne.w	8022834 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 80224ca:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80224ce:	429c      	cmp	r4, r3
 80224d0:	dc80      	bgt.n	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80224d2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80224d4:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 80224d8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 80224da:	2300      	movs	r3, #0
 80224dc:	9405      	str	r4, [sp, #20]
 80224de:	9309      	str	r3, [sp, #36]	; 0x24
 80224e0:	4b38      	ldr	r3, [pc, #224]	; (80225c4 <dhcp_recv+0x29c>)
 80224e2:	eb03 0908 	add.w	r9, r3, r8
 80224e6:	4b38      	ldr	r3, [pc, #224]	; (80225c8 <dhcp_recv+0x2a0>)
 80224e8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80224ec:	e02b      	b.n	8022546 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80224ee:	f899 3000 	ldrb.w	r3, [r9]
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	f040 81a8 	bne.w	8022848 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 80224f8:	2e04      	cmp	r6, #4
 80224fa:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80224fc:	463b      	mov	r3, r7
 80224fe:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8022500:	bf28      	it	cs
 8022502:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022504:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8022506:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022508:	4622      	mov	r2, r4
 802250a:	f7fa f8f5 	bl	801c6f8 <pbuf_copy_partial>
 802250e:	4284      	cmp	r4, r0
 8022510:	f47f af60 	bne.w	80223d4 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8022514:	2e04      	cmp	r6, #4
 8022516:	f240 819a 	bls.w	802284e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802251a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 802251e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8022522:	f040 81a3 	bne.w	802286c <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8022526:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022528:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802252a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 802252c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022530:	f7f8 f806 	bl	801a540 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8022534:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8022536:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022538:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 802253c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 802253e:	429f      	cmp	r7, r3
            goto decode_next;
 8022540:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8022542:	f63f af47 	bhi.w	80223d4 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8022546:	f1b8 0f09 	cmp.w	r8, #9
 802254a:	d9d0      	bls.n	80224ee <dhcp_recv+0x1c6>
 802254c:	4b1f      	ldr	r3, [pc, #124]	; (80225cc <dhcp_recv+0x2a4>)
 802254e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8022552:	491f      	ldr	r1, [pc, #124]	; (80225d0 <dhcp_recv+0x2a8>)
 8022554:	481f      	ldr	r0, [pc, #124]	; (80225d4 <dhcp_recv+0x2ac>)
 8022556:	f004 f8f5 	bl	8026744 <iprintf>
 802255a:	e7c8      	b.n	80224ee <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802255c:	07b2      	lsls	r2, r6, #30
 802255e:	f040 81ae 	bne.w	80228be <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8022562:	2e08      	cmp	r6, #8
 8022564:	4632      	mov	r2, r6
 8022566:	bf28      	it	cs
 8022568:	2208      	movcs	r2, #8
 802256a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802256c:	42b2      	cmp	r2, r6
 802256e:	f240 8241 	bls.w	80229f4 <dhcp_recv+0x6cc>
 8022572:	4b16      	ldr	r3, [pc, #88]	; (80225cc <dhcp_recv+0x2a4>)
 8022574:	f240 623c 	movw	r2, #1596	; 0x63c
 8022578:	4917      	ldr	r1, [pc, #92]	; (80225d8 <dhcp_recv+0x2b0>)
 802257a:	4816      	ldr	r0, [pc, #88]	; (80225d4 <dhcp_recv+0x2ac>)
 802257c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022580:	f004 f8e0 	bl	8026744 <iprintf>
 8022584:	e728      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022586:	2e03      	cmp	r6, #3
 8022588:	f240 814a 	bls.w	8022820 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 802258c:	4434      	add	r4, r6
 802258e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8022592:	429c      	cmp	r4, r3
 8022594:	f73f af1e 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022598:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 802259a:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 802259e:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 80225a0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225a2:	e79a      	b.n	80224da <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225a4:	2e04      	cmp	r6, #4
 80225a6:	f040 8131 	bne.w	802280c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 80225aa:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80225ae:	429c      	cmp	r4, r3
 80225b0:	f73f af10 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225b4:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 80225b6:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 80225ba:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225bc:	e78d      	b.n	80224da <dhcp_recv+0x1b2>
 80225be:	bf00      	nop
 80225c0:	2001f300 	.word	0x2001f300
 80225c4:	2002e510 	.word	0x2002e510
 80225c8:	2002e51c 	.word	0x2002e51c
 80225cc:	08046c68 	.word	0x08046c68
 80225d0:	08046f20 	.word	0x08046f20
 80225d4:	0802b43c 	.word	0x0802b43c
 80225d8:	08046ed8 	.word	0x08046ed8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225dc:	2e04      	cmp	r6, #4
 80225de:	f040 80ed 	bne.w	80227bc <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 80225e2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80225e6:	429c      	cmp	r4, r3
 80225e8:	f73f aef4 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225ec:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80225ee:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 80225f2:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225f4:	e771      	b.n	80224da <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225f6:	2e04      	cmp	r6, #4
 80225f8:	f040 80d6 	bne.w	80227a8 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 80225fc:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022600:	429c      	cmp	r4, r3
 8022602:	f73f aee7 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022606:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8022608:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802260a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802260c:	e765      	b.n	80224da <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802260e:	2e01      	cmp	r6, #1
 8022610:	f040 80e8 	bne.w	80227e4 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8022614:	9b02      	ldr	r3, [sp, #8]
 8022616:	2bf0      	cmp	r3, #240	; 0xf0
 8022618:	f040 8147 	bne.w	80228aa <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 802261c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8022620:	4299      	cmp	r1, r3
 8022622:	f43f aed7 	beq.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022626:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8022628:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 802262c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802262e:	e754      	b.n	80224da <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022630:	2e01      	cmp	r6, #1
 8022632:	f040 80cd 	bne.w	80227d0 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8022636:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802263a:	4299      	cmp	r1, r3
 802263c:	f43f aeca 	beq.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022640:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8022642:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8022644:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022646:	e748      	b.n	80224da <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022648:	2e04      	cmp	r6, #4
 802264a:	f040 80d5 	bne.w	80227f8 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 802264e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022652:	429c      	cmp	r4, r3
 8022654:	f73f aebe 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022658:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802265a:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 802265e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022660:	e73b      	b.n	80224da <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8022662:	6828      	ldr	r0, [r5, #0]
 8022664:	b310      	cbz	r0, 80226ac <dhcp_recv+0x384>
 8022666:	6840      	ldr	r0, [r0, #4]
 8022668:	7806      	ldrb	r6, [r0, #0]
 802266a:	e6d4      	b.n	8022416 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802266c:	455c      	cmp	r4, fp
 802266e:	f4ff aec1 	bcc.w	80223f4 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8022672:	4bb7      	ldr	r3, [pc, #732]	; (8022950 <dhcp_recv+0x628>)
 8022674:	781b      	ldrb	r3, [r3, #0]
 8022676:	b163      	cbz	r3, 8022692 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022678:	2300      	movs	r3, #0
 802267a:	4ab5      	ldr	r2, [pc, #724]	; (8022950 <dhcp_recv+0x628>)
 802267c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802267e:	4bb5      	ldr	r3, [pc, #724]	; (8022954 <dhcp_recv+0x62c>)
 8022680:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8022682:	2b01      	cmp	r3, #1
 8022684:	f000 8108 	beq.w	8022898 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8022688:	2b02      	cmp	r3, #2
 802268a:	d006      	beq.n	802269a <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 802268c:	2b03      	cmp	r3, #3
 802268e:	f000 8101 	beq.w	8022894 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8022692:	9b04      	ldr	r3, [sp, #16]
 8022694:	2b00      	cmp	r3, #0
 8022696:	f000 811c 	beq.w	80228d2 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 802269a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 802269c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 80226a0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 80226a2:	232c      	movs	r3, #44	; 0x2c
 80226a4:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80226a6:	9b03      	ldr	r3, [sp, #12]
 80226a8:	895b      	ldrh	r3, [r3, #10]
 80226aa:	e682      	b.n	80223b2 <dhcp_recv+0x8a>
    switch (op) {
 80226ac:	1e50      	subs	r0, r2, #1
 80226ae:	283a      	cmp	r0, #58	; 0x3a
 80226b0:	f63f aef1 	bhi.w	8022496 <dhcp_recv+0x16e>
 80226b4:	a601      	add	r6, pc, #4	; (adr r6, 80226bc <dhcp_recv+0x394>)
 80226b6:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 80226ba:	bf00      	nop
 80226bc:	08022835 	.word	0x08022835
 80226c0:	08022497 	.word	0x08022497
 80226c4:	08022821 	.word	0x08022821
 80226c8:	08022497 	.word	0x08022497
 80226cc:	08022497 	.word	0x08022497
 80226d0:	08022497 	.word	0x08022497
 80226d4:	08022497 	.word	0x08022497
 80226d8:	08022497 	.word	0x08022497
 80226dc:	08022497 	.word	0x08022497
 80226e0:	08022497 	.word	0x08022497
 80226e4:	08022497 	.word	0x08022497
 80226e8:	08022497 	.word	0x08022497
 80226ec:	08022497 	.word	0x08022497
 80226f0:	08022497 	.word	0x08022497
 80226f4:	08022497 	.word	0x08022497
 80226f8:	08022497 	.word	0x08022497
 80226fc:	08022497 	.word	0x08022497
 8022700:	08022497 	.word	0x08022497
 8022704:	08022497 	.word	0x08022497
 8022708:	08022497 	.word	0x08022497
 802270c:	08022497 	.word	0x08022497
 8022710:	08022497 	.word	0x08022497
 8022714:	08022497 	.word	0x08022497
 8022718:	08022497 	.word	0x08022497
 802271c:	08022497 	.word	0x08022497
 8022720:	08022497 	.word	0x08022497
 8022724:	08022497 	.word	0x08022497
 8022728:	08022497 	.word	0x08022497
 802272c:	08022497 	.word	0x08022497
 8022730:	08022497 	.word	0x08022497
 8022734:	08022497 	.word	0x08022497
 8022738:	08022497 	.word	0x08022497
 802273c:	08022497 	.word	0x08022497
 8022740:	08022497 	.word	0x08022497
 8022744:	08022497 	.word	0x08022497
 8022748:	08022497 	.word	0x08022497
 802274c:	08022497 	.word	0x08022497
 8022750:	08022497 	.word	0x08022497
 8022754:	08022497 	.word	0x08022497
 8022758:	08022497 	.word	0x08022497
 802275c:	08022497 	.word	0x08022497
 8022760:	08022497 	.word	0x08022497
 8022764:	08022497 	.word	0x08022497
 8022768:	08022497 	.word	0x08022497
 802276c:	08022497 	.word	0x08022497
 8022770:	08022497 	.word	0x08022497
 8022774:	08022497 	.word	0x08022497
 8022778:	08022497 	.word	0x08022497
 802277c:	08022497 	.word	0x08022497
 8022780:	08022497 	.word	0x08022497
 8022784:	080227f9 	.word	0x080227f9
 8022788:	080227e5 	.word	0x080227e5
 802278c:	080227d1 	.word	0x080227d1
 8022790:	080227bd 	.word	0x080227bd
 8022794:	08022497 	.word	0x08022497
 8022798:	08022497 	.word	0x08022497
 802279c:	08022497 	.word	0x08022497
 80227a0:	080227a9 	.word	0x080227a9
 80227a4:	0802280d 	.word	0x0802280d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227a8:	4b6b      	ldr	r3, [pc, #428]	; (8022958 <dhcp_recv+0x630>)
 80227aa:	f240 625d 	movw	r2, #1629	; 0x65d
 80227ae:	496b      	ldr	r1, [pc, #428]	; (802295c <dhcp_recv+0x634>)
 80227b0:	486b      	ldr	r0, [pc, #428]	; (8022960 <dhcp_recv+0x638>)
 80227b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227b6:	f003 ffc5 	bl	8026744 <iprintf>
 80227ba:	e60d      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227bc:	4b66      	ldr	r3, [pc, #408]	; (8022958 <dhcp_recv+0x630>)
 80227be:	f240 6259 	movw	r2, #1625	; 0x659
 80227c2:	4966      	ldr	r1, [pc, #408]	; (802295c <dhcp_recv+0x634>)
 80227c4:	4866      	ldr	r0, [pc, #408]	; (8022960 <dhcp_recv+0x638>)
 80227c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227ca:	f003 ffbb 	bl	8026744 <iprintf>
 80227ce:	e603      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80227d0:	4b61      	ldr	r3, [pc, #388]	; (8022958 <dhcp_recv+0x630>)
 80227d2:	f240 6255 	movw	r2, #1621	; 0x655
 80227d6:	4963      	ldr	r1, [pc, #396]	; (8022964 <dhcp_recv+0x63c>)
 80227d8:	4861      	ldr	r0, [pc, #388]	; (8022960 <dhcp_recv+0x638>)
 80227da:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227de:	f003 ffb1 	bl	8026744 <iprintf>
 80227e2:	e5f9      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80227e4:	4b5c      	ldr	r3, [pc, #368]	; (8022958 <dhcp_recv+0x630>)
 80227e6:	f240 624f 	movw	r2, #1615	; 0x64f
 80227ea:	495e      	ldr	r1, [pc, #376]	; (8022964 <dhcp_recv+0x63c>)
 80227ec:	485c      	ldr	r0, [pc, #368]	; (8022960 <dhcp_recv+0x638>)
 80227ee:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227f2:	f003 ffa7 	bl	8026744 <iprintf>
 80227f6:	e5ef      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227f8:	4b57      	ldr	r3, [pc, #348]	; (8022958 <dhcp_recv+0x630>)
 80227fa:	f240 6241 	movw	r2, #1601	; 0x641
 80227fe:	4957      	ldr	r1, [pc, #348]	; (802295c <dhcp_recv+0x634>)
 8022800:	4857      	ldr	r0, [pc, #348]	; (8022960 <dhcp_recv+0x638>)
 8022802:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022806:	f003 ff9d 	bl	8026744 <iprintf>
 802280a:	e5e5      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802280c:	4b52      	ldr	r3, [pc, #328]	; (8022958 <dhcp_recv+0x630>)
 802280e:	f240 6261 	movw	r2, #1633	; 0x661
 8022812:	4952      	ldr	r1, [pc, #328]	; (802295c <dhcp_recv+0x634>)
 8022814:	4852      	ldr	r0, [pc, #328]	; (8022960 <dhcp_recv+0x638>)
 8022816:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802281a:	f003 ff93 	bl	8026744 <iprintf>
 802281e:	e5db      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022820:	4b4d      	ldr	r3, [pc, #308]	; (8022958 <dhcp_recv+0x630>)
 8022822:	f240 6233 	movw	r2, #1587	; 0x633
 8022826:	4950      	ldr	r1, [pc, #320]	; (8022968 <dhcp_recv+0x640>)
 8022828:	484d      	ldr	r0, [pc, #308]	; (8022960 <dhcp_recv+0x638>)
 802282a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802282e:	f003 ff89 	bl	8026744 <iprintf>
 8022832:	e5d1      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022834:	4b48      	ldr	r3, [pc, #288]	; (8022958 <dhcp_recv+0x630>)
 8022836:	f240 622e 	movw	r2, #1582	; 0x62e
 802283a:	4948      	ldr	r1, [pc, #288]	; (802295c <dhcp_recv+0x634>)
 802283c:	4848      	ldr	r0, [pc, #288]	; (8022960 <dhcp_recv+0x638>)
 802283e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022842:	f003 ff7f 	bl	8026744 <iprintf>
 8022846:	e5c7      	b.n	80223d8 <dhcp_recv+0xb0>
 8022848:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802284a:	896b      	ldrh	r3, [r5, #10]
 802284c:	e628      	b.n	80224a0 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 802284e:	9c05      	ldr	r4, [sp, #20]
 8022850:	d027      	beq.n	80228a2 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8022852:	2e01      	cmp	r6, #1
 8022854:	f040 80bb 	bne.w	80229ce <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8022858:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 802285c:	4b3d      	ldr	r3, [pc, #244]	; (8022954 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 802285e:	4a3c      	ldr	r2, [pc, #240]	; (8022950 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8022860:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8022864:	2301      	movs	r3, #1
 8022866:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802286a:	e7ee      	b.n	802284a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802286c:	4b3a      	ldr	r3, [pc, #232]	; (8022958 <dhcp_recv+0x630>)
 802286e:	f240 6281 	movw	r2, #1665	; 0x681
 8022872:	493e      	ldr	r1, [pc, #248]	; (802296c <dhcp_recv+0x644>)
 8022874:	483a      	ldr	r0, [pc, #232]	; (8022960 <dhcp_recv+0x638>)
 8022876:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802287a:	f003 ff63 	bl	8026744 <iprintf>
 802287e:	e5ab      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022880:	4b35      	ldr	r3, [pc, #212]	; (8022958 <dhcp_recv+0x630>)
 8022882:	f240 629d 	movw	r2, #1693	; 0x69d
 8022886:	493a      	ldr	r1, [pc, #232]	; (8022970 <dhcp_recv+0x648>)
 8022888:	4835      	ldr	r0, [pc, #212]	; (8022960 <dhcp_recv+0x638>)
 802288a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802288e:	f003 ff59 	bl	8026744 <iprintf>
 8022892:	e5a1      	b.n	80223d8 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8022894:	2301      	movs	r3, #1
 8022896:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8022898:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 802289a:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 802289e:	9302      	str	r3, [sp, #8]
 80228a0:	e701      	b.n	80226a6 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 80228a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228a4:	f7f7 fe4c 	bl	801a540 <lwip_htonl>
 80228a8:	e7d8      	b.n	802285c <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80228aa:	4b2b      	ldr	r3, [pc, #172]	; (8022958 <dhcp_recv+0x630>)
 80228ac:	f240 6251 	movw	r2, #1617	; 0x651
 80228b0:	4930      	ldr	r1, [pc, #192]	; (8022974 <dhcp_recv+0x64c>)
 80228b2:	482b      	ldr	r0, [pc, #172]	; (8022960 <dhcp_recv+0x638>)
 80228b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228b8:	f003 ff44 	bl	8026744 <iprintf>
 80228bc:	e58c      	b.n	80223d8 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80228be:	4b26      	ldr	r3, [pc, #152]	; (8022958 <dhcp_recv+0x630>)
 80228c0:	f240 6239 	movw	r2, #1593	; 0x639
 80228c4:	492c      	ldr	r1, [pc, #176]	; (8022978 <dhcp_recv+0x650>)
 80228c6:	4826      	ldr	r0, [pc, #152]	; (8022960 <dhcp_recv+0x638>)
 80228c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228cc:	f003 ff3a 	bl	8026744 <iprintf>
 80228d0:	e582      	b.n	80223d8 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80228d2:	4b1f      	ldr	r3, [pc, #124]	; (8022950 <dhcp_recv+0x628>)
 80228d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228d8:	785b      	ldrb	r3, [r3, #1]
 80228da:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 80228de:	2b00      	cmp	r3, #0
 80228e0:	f43f ad7a 	beq.w	80223d8 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80228e4:	4a1b      	ldr	r2, [pc, #108]	; (8022954 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 80228e6:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80228ea:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80228ec:	2b05      	cmp	r3, #5
 80228ee:	d01d      	beq.n	802292c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 80228f0:	2b06      	cmp	r3, #6
 80228f2:	d043      	beq.n	802297c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80228f4:	2b02      	cmp	r3, #2
 80228f6:	f47f ad6f 	bne.w	80223d8 <dhcp_recv+0xb0>
 80228fa:	f899 3005 	ldrb.w	r3, [r9, #5]
 80228fe:	2b06      	cmp	r3, #6
 8022900:	f47f ad6a 	bne.w	80223d8 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8022904:	4b12      	ldr	r3, [pc, #72]	; (8022950 <dhcp_recv+0x628>)
 8022906:	789b      	ldrb	r3, [r3, #2]
 8022908:	2b00      	cmp	r3, #0
 802290a:	f43f ad65 	beq.w	80223d8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802290e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8022912:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022914:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8022916:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022918:	f7f7 fe12 	bl	801a540 <lwip_htonl>
 802291c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802291e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022920:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8022922:	6923      	ldr	r3, [r4, #16]
 8022924:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8022926:	f7ff fbbf 	bl	80220a8 <dhcp_select.isra.0>
 802292a:	e555      	b.n	80223d8 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802292c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022930:	2b01      	cmp	r3, #1
 8022932:	d03f      	beq.n	80229b4 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022934:	3b03      	subs	r3, #3
 8022936:	2b02      	cmp	r3, #2
 8022938:	f63f ad4e 	bhi.w	80223d8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 802293c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8022940:	4621      	mov	r1, r4
 8022942:	f7ff f8c1 	bl	8021ac8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8022946:	4650      	mov	r0, sl
 8022948:	f7fe ffb2 	bl	80218b0 <dhcp_bind>
 802294c:	e544      	b.n	80223d8 <dhcp_recv+0xb0>
 802294e:	bf00      	nop
 8022950:	2002e510 	.word	0x2002e510
 8022954:	2002e51c 	.word	0x2002e51c
 8022958:	08046c68 	.word	0x08046c68
 802295c:	08046ecc 	.word	0x08046ecc
 8022960:	0802b43c 	.word	0x0802b43c
 8022964:	08046efc 	.word	0x08046efc
 8022968:	08046ed8 	.word	0x08046ed8
 802296c:	08046f34 	.word	0x08046f34
 8022970:	08046f60 	.word	0x08046f60
 8022974:	08046f08 	.word	0x08046f08
 8022978:	08046eec 	.word	0x08046eec
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802297c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022980:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022982:	2a02      	cmp	r2, #2
 8022984:	d902      	bls.n	802298c <dhcp_recv+0x664>
 8022986:	2b01      	cmp	r3, #1
 8022988:	f47f ad26 	bne.w	80223d8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802298c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 8022990:	795a      	ldrb	r2, [r3, #5]
 8022992:	2a0c      	cmp	r2, #12
 8022994:	d004      	beq.n	80229a0 <dhcp_recv+0x678>
    dhcp->tries = 0;
 8022996:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8022998:	210c      	movs	r1, #12
    dhcp->tries = 0;
 802299a:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 802299c:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 802299e:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80229a0:	4b1c      	ldr	r3, [pc, #112]	; (8022a14 <dhcp_recv+0x6ec>)
 80229a2:	4650      	mov	r0, sl
 80229a4:	461a      	mov	r2, r3
 80229a6:	4619      	mov	r1, r3
 80229a8:	f7f9 f968 	bl	801bc7c <netif_set_addr>
  dhcp_discover(netif);
 80229ac:	4650      	mov	r0, sl
 80229ae:	f7ff fa95 	bl	8021edc <dhcp_discover>
}
 80229b2:	e511      	b.n	80223d8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80229b4:	4621      	mov	r1, r4
 80229b6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80229ba:	f7ff f885 	bl	8021ac8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80229be:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 80229c2:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80229c4:	0719      	lsls	r1, r3, #28
 80229c6:	d5bf      	bpl.n	8022948 <dhcp_recv+0x620>
        dhcp_check(netif);
 80229c8:	f7fe ff5a 	bl	8021880 <dhcp_check>
 80229cc:	e504      	b.n	80223d8 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80229ce:	4b12      	ldr	r3, [pc, #72]	; (8022a18 <dhcp_recv+0x6f0>)
 80229d0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80229d4:	4911      	ldr	r1, [pc, #68]	; (8022a1c <dhcp_recv+0x6f4>)
 80229d6:	4812      	ldr	r0, [pc, #72]	; (8022a20 <dhcp_recv+0x6f8>)
 80229d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80229dc:	f003 feb2 	bl	8026744 <iprintf>
 80229e0:	e4fa      	b.n	80223d8 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 80229e2:	4434      	add	r4, r6
 80229e4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80229e8:	4294      	cmp	r4, r2
 80229ea:	f73f acf3 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80229ee:	19bc      	adds	r4, r7, r6
 80229f0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80229f2:	e555      	b.n	80224a0 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 80229f4:	4434      	add	r4, r6
 80229f6:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80229fa:	428c      	cmp	r4, r1
 80229fc:	f73f acea 	bgt.w	80223d4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022a00:	19bc      	adds	r4, r7, r6
 8022a02:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022a04:	2e00      	cmp	r6, #0
 8022a06:	f43f ad4b 	beq.w	80224a0 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8022a0a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8022a0c:	f04f 0808 	mov.w	r8, #8
 8022a10:	e563      	b.n	80224da <dhcp_recv+0x1b2>
 8022a12:	bf00      	nop
 8022a14:	0804731c 	.word	0x0804731c
 8022a18:	08046c68 	.word	0x08046c68
 8022a1c:	08046f4c 	.word	0x08046f4c
 8022a20:	0802b43c 	.word	0x0802b43c

08022a24 <dhcp_network_changed>:
{
 8022a24:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022a26:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8022a28:	b135      	cbz	r5, 8022a38 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 8022a2a:	796b      	ldrb	r3, [r5, #5]
 8022a2c:	4604      	mov	r4, r0
 8022a2e:	2b05      	cmp	r3, #5
 8022a30:	d803      	bhi.n	8022a3a <dhcp_network_changed+0x16>
 8022a32:	2b02      	cmp	r3, #2
 8022a34:	d813      	bhi.n	8022a5e <dhcp_network_changed+0x3a>
 8022a36:	b95b      	cbnz	r3, 8022a50 <dhcp_network_changed+0x2c>
}
 8022a38:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 8022a3a:	2b0a      	cmp	r3, #10
 8022a3c:	d00f      	beq.n	8022a5e <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8022a3e:	2b0c      	cmp	r3, #12
 8022a40:	d906      	bls.n	8022a50 <dhcp_network_changed+0x2c>
 8022a42:	4b0a      	ldr	r3, [pc, #40]	; (8022a6c <dhcp_network_changed+0x48>)
 8022a44:	f240 326d 	movw	r2, #877	; 0x36d
 8022a48:	4909      	ldr	r1, [pc, #36]	; (8022a70 <dhcp_network_changed+0x4c>)
 8022a4a:	480a      	ldr	r0, [pc, #40]	; (8022a74 <dhcp_network_changed+0x50>)
 8022a4c:	f003 fe7a 	bl	8026744 <iprintf>
      dhcp->tries = 0;
 8022a50:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8022a52:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022a54:	71ab      	strb	r3, [r5, #6]
}
 8022a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8022a5a:	f7ff ba3f 	b.w	8021edc <dhcp_discover>
      dhcp->tries = 0;
 8022a5e:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8022a60:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022a62:	71ab      	strb	r3, [r5, #6]
}
 8022a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8022a68:	f7ff b938 	b.w	8021cdc <dhcp_reboot.isra.0>
 8022a6c:	08046c68 	.word	0x08046c68
 8022a70:	08046fa8 	.word	0x08046fa8
 8022a74:	0802b43c 	.word	0x0802b43c

08022a78 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022a78:	2800      	cmp	r0, #0
 8022a7a:	d066      	beq.n	8022b4a <dhcp_arp_reply+0xd2>
{
 8022a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8022a80:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8022a82:	b085      	sub	sp, #20
 8022a84:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8022a86:	b115      	cbz	r5, 8022a8e <dhcp_arp_reply+0x16>
 8022a88:	796b      	ldrb	r3, [r5, #5]
 8022a8a:	2b08      	cmp	r3, #8
 8022a8c:	d002      	beq.n	8022a94 <dhcp_arp_reply+0x1c>
}
 8022a8e:	b005      	add	sp, #20
 8022a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8022a94:	680a      	ldr	r2, [r1, #0]
 8022a96:	69eb      	ldr	r3, [r5, #28]
 8022a98:	429a      	cmp	r2, r3
 8022a9a:	d1f8      	bne.n	8022a8e <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 8022a9c:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8022a9e:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022aa0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8022aa2:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8022aa4:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022aa6:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 8022aaa:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022aac:	2204      	movs	r2, #4
 8022aae:	f7ff f863 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 8022ab2:	4606      	mov	r6, r0
 8022ab4:	2800      	cmp	r0, #0
 8022ab6:	d040      	beq.n	8022b3a <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022ab8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8022abc:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022abe:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022ac2:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022ac4:	2b44      	cmp	r3, #68	; 0x44
 8022ac6:	d847      	bhi.n	8022b58 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8022ac8:	2232      	movs	r2, #50	; 0x32
 8022aca:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 8022ace:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8022ad2:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8022ad6:	b29b      	uxth	r3, r3
 8022ad8:	2204      	movs	r2, #4
 8022ada:	fa1f f888 	uxth.w	r8, r8
 8022ade:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022ae0:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022ae2:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022ae6:	f7f7 fd2b 	bl	801a540 <lwip_htonl>
 8022aea:	4639      	mov	r1, r7
 8022aec:	4602      	mov	r2, r0
 8022aee:	4640      	mov	r0, r8
 8022af0:	f7fe fea2 	bl	8021838 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022af4:	1c41      	adds	r1, r0, #1
 8022af6:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022af8:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8022afc:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022afe:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022b00:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022b02:	2943      	cmp	r1, #67	; 0x43
 8022b04:	d807      	bhi.n	8022b16 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8022b06:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022b0a:	1878      	adds	r0, r7, r1
 8022b0c:	2100      	movs	r1, #0
 8022b0e:	b292      	uxth	r2, r2
 8022b10:	f002 fe7a 	bl	8025808 <memset>
 8022b14:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022b16:	31f0      	adds	r1, #240	; 0xf0
 8022b18:	4630      	mov	r0, r6
 8022b1a:	b289      	uxth	r1, r1
 8022b1c:	f7f9 fc30 	bl	801c380 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022b20:	4911      	ldr	r1, [pc, #68]	; (8022b68 <dhcp_arp_reply+0xf0>)
 8022b22:	4a12      	ldr	r2, [pc, #72]	; (8022b6c <dhcp_arp_reply+0xf4>)
 8022b24:	2343      	movs	r3, #67	; 0x43
 8022b26:	9400      	str	r4, [sp, #0]
 8022b28:	6808      	ldr	r0, [r1, #0]
 8022b2a:	4631      	mov	r1, r6
 8022b2c:	9201      	str	r2, [sp, #4]
 8022b2e:	4a10      	ldr	r2, [pc, #64]	; (8022b70 <dhcp_arp_reply+0xf8>)
 8022b30:	f7fe fc6c 	bl	802140c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022b34:	4630      	mov	r0, r6
 8022b36:	f7f9 fd3b 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022b3a:	79ab      	ldrb	r3, [r5, #6]
 8022b3c:	2bff      	cmp	r3, #255	; 0xff
 8022b3e:	d001      	beq.n	8022b44 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8022b40:	3301      	adds	r3, #1
 8022b42:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022b44:	2314      	movs	r3, #20
 8022b46:	812b      	strh	r3, [r5, #8]
  return result;
 8022b48:	e7a1      	b.n	8022a8e <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022b4a:	4b0a      	ldr	r3, [pc, #40]	; (8022b74 <dhcp_arp_reply+0xfc>)
 8022b4c:	f240 328b 	movw	r2, #907	; 0x38b
 8022b50:	4909      	ldr	r1, [pc, #36]	; (8022b78 <dhcp_arp_reply+0x100>)
 8022b52:	480a      	ldr	r0, [pc, #40]	; (8022b7c <dhcp_arp_reply+0x104>)
 8022b54:	f003 bdf6 	b.w	8026744 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b58:	4b06      	ldr	r3, [pc, #24]	; (8022b74 <dhcp_arp_reply+0xfc>)
 8022b5a:	f240 529a 	movw	r2, #1434	; 0x59a
 8022b5e:	4908      	ldr	r1, [pc, #32]	; (8022b80 <dhcp_arp_reply+0x108>)
 8022b60:	4806      	ldr	r0, [pc, #24]	; (8022b7c <dhcp_arp_reply+0x104>)
 8022b62:	f003 fdef 	bl	8026744 <iprintf>
 8022b66:	e7af      	b.n	8022ac8 <dhcp_arp_reply+0x50>
 8022b68:	2002e508 	.word	0x2002e508
 8022b6c:	0804731c 	.word	0x0804731c
 8022b70:	08047320 	.word	0x08047320
 8022b74:	08046c68 	.word	0x08046c68
 8022b78:	0802e6f8 	.word	0x0802e6f8
 8022b7c:	0802b43c 	.word	0x0802b43c
 8022b80:	08046ddc 	.word	0x08046ddc

08022b84 <dhcp_renew>:
{
 8022b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022b88:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8022b8a:	b087      	sub	sp, #28
 8022b8c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8022b8e:	797b      	ldrb	r3, [r7, #5]
 8022b90:	2b05      	cmp	r3, #5
 8022b92:	d004      	beq.n	8022b9e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8022b94:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8022b96:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8022b98:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 8022b9a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 8022b9c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022b9e:	f10d 0316 	add.w	r3, sp, #22
 8022ba2:	2203      	movs	r2, #3
 8022ba4:	4639      	mov	r1, r7
 8022ba6:	4658      	mov	r0, fp
 8022ba8:	f7fe ffe6 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 8022bac:	4605      	mov	r5, r0
 8022bae:	2800      	cmp	r0, #0
 8022bb0:	f000 80b9 	beq.w	8022d26 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bb4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022bb8:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bba:	f104 0804 	add.w	r8, r4, #4
 8022bbe:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bc2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bc4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8022bc8:	f200 8095 	bhi.w	8022cf6 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 8022bcc:	2239      	movs	r2, #57	; 0x39
 8022bce:	1c63      	adds	r3, r4, #1
 8022bd0:	fa1f f189 	uxth.w	r1, r9
 8022bd4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8022bd6:	b29b      	uxth	r3, r3
 8022bd8:	2202      	movs	r2, #2
 8022bda:	9103      	str	r1, [sp, #12]
 8022bdc:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bde:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022be0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022be4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022be6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bea:	f200 8094 	bhi.w	8022d16 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022bee:	1ce3      	adds	r3, r4, #3
 8022bf0:	fa1f f988 	uxth.w	r9, r8
 8022bf4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022bf8:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022bfa:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022bfc:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022bfe:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c02:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022c06:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c0a:	2b44      	cmp	r3, #68	; 0x44
 8022c0c:	d87b      	bhi.n	8022d06 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 8022c0e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8022c12:	2237      	movs	r2, #55	; 0x37
 8022c14:	1d63      	adds	r3, r4, #5
 8022c16:	f8df a134 	ldr.w	sl, [pc, #308]	; 8022d4c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 8022c1a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8022c1e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8022c22:	b29b      	uxth	r3, r3
 8022c24:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c26:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c2a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8022c2e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c30:	493e      	ldr	r1, [pc, #248]	; (8022d2c <dhcp_renew+0x1a8>)
 8022c32:	4b3f      	ldr	r3, [pc, #252]	; (8022d30 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c34:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c38:	d80f      	bhi.n	8022c5a <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 8022c3a:	f108 0201 	add.w	r2, r8, #1
 8022c3e:	f806 9008 	strb.w	r9, [r6, r8]
 8022c42:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c46:	4a3b      	ldr	r2, [pc, #236]	; (8022d34 <dhcp_renew+0x1b0>)
 8022c48:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c4a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c4e:	d00c      	beq.n	8022c6a <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c50:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c54:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c58:	d9ef      	bls.n	8022c3a <dhcp_renew+0xb6>
 8022c5a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022c5e:	4836      	ldr	r0, [pc, #216]	; (8022d38 <dhcp_renew+0x1b4>)
 8022c60:	f003 fd70 	bl	8026744 <iprintf>
 8022c64:	4b32      	ldr	r3, [pc, #200]	; (8022d30 <dhcp_renew+0x1ac>)
 8022c66:	4931      	ldr	r1, [pc, #196]	; (8022d2c <dhcp_renew+0x1a8>)
 8022c68:	e7e7      	b.n	8022c3a <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 8022c6a:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8022c6e:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8022c72:	22ff      	movs	r2, #255	; 0xff
 8022c74:	b280      	uxth	r0, r0
 8022c76:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c78:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8022c7a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c7c:	d808      	bhi.n	8022c90 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 8022c7e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8022c82:	4430      	add	r0, r6
 8022c84:	2100      	movs	r1, #0
 8022c86:	b2a4      	uxth	r4, r4
 8022c88:	1c62      	adds	r2, r4, #1
 8022c8a:	f002 fdbd 	bl	8025808 <memset>
 8022c8e:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022c90:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8022c94:	4628      	mov	r0, r5
 8022c96:	b289      	uxth	r1, r1
 8022c98:	f7f9 fb72 	bl	801c380 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022c9c:	4827      	ldr	r0, [pc, #156]	; (8022d3c <dhcp_renew+0x1b8>)
 8022c9e:	2343      	movs	r3, #67	; 0x43
 8022ca0:	f107 0218 	add.w	r2, r7, #24
 8022ca4:	6800      	ldr	r0, [r0, #0]
 8022ca6:	4629      	mov	r1, r5
 8022ca8:	f8cd b000 	str.w	fp, [sp]
 8022cac:	f7fe fc62 	bl	8021574 <udp_sendto_if>
 8022cb0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8022cb2:	4628      	mov	r0, r5
 8022cb4:	f7f9 fc7c 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022cb8:	79bb      	ldrb	r3, [r7, #6]
 8022cba:	2bff      	cmp	r3, #255	; 0xff
 8022cbc:	d015      	beq.n	8022cea <dhcp_renew+0x166>
    dhcp->tries++;
 8022cbe:	3301      	adds	r3, #1
 8022cc0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cc2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8022cc4:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cc6:	d810      	bhi.n	8022cea <dhcp_renew+0x166>
 8022cc8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022ccc:	4a1c      	ldr	r2, [pc, #112]	; (8022d40 <dhcp_renew+0x1bc>)
}
 8022cce:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cd0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022cd4:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022cd6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022cda:	b29b      	uxth	r3, r3
 8022cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8022ce0:	095b      	lsrs	r3, r3, #5
 8022ce2:	813b      	strh	r3, [r7, #8]
}
 8022ce4:	b007      	add	sp, #28
 8022ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 8022cea:	2328      	movs	r3, #40	; 0x28
}
 8022cec:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022cee:	813b      	strh	r3, [r7, #8]
}
 8022cf0:	b007      	add	sp, #28
 8022cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022cf6:	4b0e      	ldr	r3, [pc, #56]	; (8022d30 <dhcp_renew+0x1ac>)
 8022cf8:	f240 529a 	movw	r2, #1434	; 0x59a
 8022cfc:	4911      	ldr	r1, [pc, #68]	; (8022d44 <dhcp_renew+0x1c0>)
 8022cfe:	480e      	ldr	r0, [pc, #56]	; (8022d38 <dhcp_renew+0x1b4>)
 8022d00:	f003 fd20 	bl	8026744 <iprintf>
 8022d04:	e762      	b.n	8022bcc <dhcp_renew+0x48>
 8022d06:	4b0a      	ldr	r3, [pc, #40]	; (8022d30 <dhcp_renew+0x1ac>)
 8022d08:	f240 529a 	movw	r2, #1434	; 0x59a
 8022d0c:	490d      	ldr	r1, [pc, #52]	; (8022d44 <dhcp_renew+0x1c0>)
 8022d0e:	480a      	ldr	r0, [pc, #40]	; (8022d38 <dhcp_renew+0x1b4>)
 8022d10:	f003 fd18 	bl	8026744 <iprintf>
 8022d14:	e77b      	b.n	8022c0e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022d16:	4b06      	ldr	r3, [pc, #24]	; (8022d30 <dhcp_renew+0x1ac>)
 8022d18:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022d1c:	490a      	ldr	r1, [pc, #40]	; (8022d48 <dhcp_renew+0x1c4>)
 8022d1e:	4806      	ldr	r0, [pc, #24]	; (8022d38 <dhcp_renew+0x1b4>)
 8022d20:	f003 fd10 	bl	8026744 <iprintf>
 8022d24:	e763      	b.n	8022bee <dhcp_renew+0x6a>
    result = ERR_MEM;
 8022d26:	f04f 34ff 	mov.w	r4, #4294967295
 8022d2a:	e7c5      	b.n	8022cb8 <dhcp_renew+0x134>
 8022d2c:	08046e5c 	.word	0x08046e5c
 8022d30:	08046c68 	.word	0x08046c68
 8022d34:	08046fe4 	.word	0x08046fe4
 8022d38:	0802b43c 	.word	0x0802b43c
 8022d3c:	2002e508 	.word	0x2002e508
 8022d40:	10624dd3 	.word	0x10624dd3
 8022d44:	08046ddc 	.word	0x08046ddc
 8022d48:	08046e20 	.word	0x08046e20
 8022d4c:	08046fe1 	.word	0x08046fe1

08022d50 <dhcp_release_and_stop>:
{
 8022d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022d54:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8022d56:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8022d58:	2c00      	cmp	r4, #0
 8022d5a:	d06c      	beq.n	8022e36 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 8022d5c:	7962      	ldrb	r2, [r4, #5]
 8022d5e:	2a00      	cmp	r2, #0
 8022d60:	d069      	beq.n	8022e36 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022d62:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022d64:	2300      	movs	r3, #0
 8022d66:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022d68:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d6a:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8022d6c:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d6e:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022d70:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d72:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8022d74:	81e3      	strh	r3, [r4, #14]
 8022d76:	6123      	str	r3, [r4, #16]
 8022d78:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022d7a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d7e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d82:	d901      	bls.n	8022d88 <dhcp_release_and_stop+0x38>
 8022d84:	2a0a      	cmp	r2, #10
 8022d86:	d148      	bne.n	8022e1a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8022d88:	f10d 030a 	add.w	r3, sp, #10
 8022d8c:	2207      	movs	r2, #7
 8022d8e:	4621      	mov	r1, r4
 8022d90:	4628      	mov	r0, r5
 8022d92:	f7fe fef1 	bl	8021b78 <dhcp_create_msg>
    if (p_out != NULL) {
 8022d96:	4606      	mov	r6, r0
 8022d98:	2800      	cmp	r0, #0
 8022d9a:	d03e      	beq.n	8022e1a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022d9c:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8022da0:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022da2:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022da6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022da8:	2b44      	cmp	r3, #68	; 0x44
 8022daa:	d84e      	bhi.n	8022e4a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8022dac:	f108 0301 	add.w	r3, r8, #1
 8022db0:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8022db2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8022db4:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8022db8:	2204      	movs	r2, #4
 8022dba:	f108 0802 	add.w	r8, r8, #2
 8022dbe:	54fa      	strb	r2, [r7, r3]
 8022dc0:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022dc4:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022dc6:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022dca:	f7f7 fbb9 	bl	801a540 <lwip_htonl>
 8022dce:	4639      	mov	r1, r7
 8022dd0:	4602      	mov	r2, r0
 8022dd2:	4640      	mov	r0, r8
 8022dd4:	f7fe fd30 	bl	8021838 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022dd8:	1c43      	adds	r3, r0, #1
 8022dda:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022ddc:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8022de0:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022de2:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022de4:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022de6:	2b43      	cmp	r3, #67	; 0x43
 8022de8:	d807      	bhi.n	8022dfa <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8022dea:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022dee:	18f8      	adds	r0, r7, r3
 8022df0:	2100      	movs	r1, #0
 8022df2:	b292      	uxth	r2, r2
 8022df4:	f002 fd08 	bl	8025808 <memset>
 8022df8:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022dfa:	33f0      	adds	r3, #240	; 0xf0
 8022dfc:	4630      	mov	r0, r6
 8022dfe:	b299      	uxth	r1, r3
 8022e00:	f7f9 fabe 	bl	801c380 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022e04:	4a15      	ldr	r2, [pc, #84]	; (8022e5c <dhcp_release_and_stop+0x10c>)
 8022e06:	9500      	str	r5, [sp, #0]
 8022e08:	2343      	movs	r3, #67	; 0x43
 8022e0a:	6810      	ldr	r0, [r2, #0]
 8022e0c:	4631      	mov	r1, r6
 8022e0e:	aa03      	add	r2, sp, #12
 8022e10:	f7fe fbb0 	bl	8021574 <udp_sendto_if>
      pbuf_free(p_out);
 8022e14:	4630      	mov	r0, r6
 8022e16:	f7f9 fbcb 	bl	801c5b0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022e1a:	4b11      	ldr	r3, [pc, #68]	; (8022e60 <dhcp_release_and_stop+0x110>)
 8022e1c:	4628      	mov	r0, r5
 8022e1e:	461a      	mov	r2, r3
 8022e20:	4619      	mov	r1, r3
 8022e22:	f7f8 ff2b 	bl	801bc7c <netif_set_addr>
  if (new_state != dhcp->state) {
 8022e26:	7963      	ldrb	r3, [r4, #5]
 8022e28:	b11b      	cbz	r3, 8022e32 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8022e2a:	2300      	movs	r3, #0
 8022e2c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8022e2e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8022e30:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8022e32:	7923      	ldrb	r3, [r4, #4]
 8022e34:	b913      	cbnz	r3, 8022e3c <dhcp_release_and_stop+0xec>
}
 8022e36:	b004      	add	sp, #16
 8022e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022e3c:	f7fe fe22 	bl	8021a84 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8022e40:	2300      	movs	r3, #0
 8022e42:	7123      	strb	r3, [r4, #4]
}
 8022e44:	b004      	add	sp, #16
 8022e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022e4a:	4b06      	ldr	r3, [pc, #24]	; (8022e64 <dhcp_release_and_stop+0x114>)
 8022e4c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022e50:	4905      	ldr	r1, [pc, #20]	; (8022e68 <dhcp_release_and_stop+0x118>)
 8022e52:	4806      	ldr	r0, [pc, #24]	; (8022e6c <dhcp_release_and_stop+0x11c>)
 8022e54:	f003 fc76 	bl	8026744 <iprintf>
 8022e58:	e7a8      	b.n	8022dac <dhcp_release_and_stop+0x5c>
 8022e5a:	bf00      	nop
 8022e5c:	2002e508 	.word	0x2002e508
 8022e60:	0804731c 	.word	0x0804731c
 8022e64:	08046c68 	.word	0x08046c68
 8022e68:	08046ddc 	.word	0x08046ddc
 8022e6c:	0802b43c 	.word	0x0802b43c

08022e70 <dhcp_start>:
{
 8022e70:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022e72:	2800      	cmp	r0, #0
 8022e74:	d046      	beq.n	8022f04 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022e76:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8022e7a:	4604      	mov	r4, r0
 8022e7c:	07da      	lsls	r2, r3, #31
 8022e7e:	d537      	bpl.n	8022ef0 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e80:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8022e82:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e84:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8022e88:	d32f      	bcc.n	8022eea <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8022e8a:	b33d      	cbz	r5, 8022edc <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8022e8c:	792b      	ldrb	r3, [r5, #4]
 8022e8e:	bb13      	cbnz	r3, 8022ed6 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8022e90:	2234      	movs	r2, #52	; 0x34
 8022e92:	2100      	movs	r1, #0
 8022e94:	4628      	mov	r0, r5
 8022e96:	f002 fcb7 	bl	8025808 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8022e9a:	f7fe fdb9 	bl	8021a10 <dhcp_inc_pcb_refcount>
 8022e9e:	4606      	mov	r6, r0
 8022ea0:	bb18      	cbnz	r0, 8022eea <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8022ea2:	2301      	movs	r3, #1
 8022ea4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8022ea6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8022eaa:	075b      	lsls	r3, r3, #29
 8022eac:	d408      	bmi.n	8022ec0 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8022eae:	796b      	ldrb	r3, [r5, #5]
 8022eb0:	2b02      	cmp	r3, #2
 8022eb2:	d003      	beq.n	8022ebc <dhcp_start+0x4c>
    dhcp->state = new_state;
 8022eb4:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8022eb6:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8022eb8:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8022eba:	716b      	strb	r3, [r5, #5]
}
 8022ebc:	4630      	mov	r0, r6
 8022ebe:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8022ec0:	4620      	mov	r0, r4
 8022ec2:	f7ff f80b 	bl	8021edc <dhcp_discover>
  if (result != ERR_OK) {
 8022ec6:	2800      	cmp	r0, #0
 8022ec8:	d0f8      	beq.n	8022ebc <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8022eca:	4620      	mov	r0, r4
    return ERR_MEM;
 8022ecc:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8022ed0:	f7ff ff3e 	bl	8022d50 <dhcp_release_and_stop>
    return ERR_MEM;
 8022ed4:	e7f2      	b.n	8022ebc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022ed6:	f7fe fdd5 	bl	8021a84 <dhcp_dec_pcb_refcount>
 8022eda:	e7d9      	b.n	8022e90 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022edc:	2034      	movs	r0, #52	; 0x34
 8022ede:	f7f8 fc77 	bl	801b7d0 <mem_malloc>
    if (dhcp == NULL) {
 8022ee2:	4605      	mov	r5, r0
 8022ee4:	b108      	cbz	r0, 8022eea <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8022ee6:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8022ee8:	e7d2      	b.n	8022e90 <dhcp_start+0x20>
    return ERR_MEM;
 8022eea:	f04f 36ff 	mov.w	r6, #4294967295
 8022eee:	e7e5      	b.n	8022ebc <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022ef0:	4b09      	ldr	r3, [pc, #36]	; (8022f18 <dhcp_start+0xa8>)
 8022ef2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8022ef6:	4909      	ldr	r1, [pc, #36]	; (8022f1c <dhcp_start+0xac>)
 8022ef8:	f06f 060f 	mvn.w	r6, #15
 8022efc:	4808      	ldr	r0, [pc, #32]	; (8022f20 <dhcp_start+0xb0>)
 8022efe:	f003 fc21 	bl	8026744 <iprintf>
 8022f02:	e7db      	b.n	8022ebc <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022f04:	4b04      	ldr	r3, [pc, #16]	; (8022f18 <dhcp_start+0xa8>)
 8022f06:	f240 22e7 	movw	r2, #743	; 0x2e7
 8022f0a:	4906      	ldr	r1, [pc, #24]	; (8022f24 <dhcp_start+0xb4>)
 8022f0c:	f06f 060f 	mvn.w	r6, #15
 8022f10:	4803      	ldr	r0, [pc, #12]	; (8022f20 <dhcp_start+0xb0>)
 8022f12:	f003 fc17 	bl	8026744 <iprintf>
 8022f16:	e7d1      	b.n	8022ebc <dhcp_start+0x4c>
 8022f18:	08046c68 	.word	0x08046c68
 8022f1c:	08046fbc 	.word	0x08046fbc
 8022f20:	0802b43c 	.word	0x0802b43c
 8022f24:	0802e6f8 	.word	0x0802e6f8

08022f28 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8022f28:	4b8a      	ldr	r3, [pc, #552]	; (8023154 <dhcp_coarse_tmr+0x22c>)
{
 8022f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8022f2e:	681d      	ldr	r5, [r3, #0]
{
 8022f30:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8022f32:	b1dd      	cbz	r5, 8022f6c <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022f34:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022f36:	b1b4      	cbz	r4, 8022f66 <dhcp_coarse_tmr+0x3e>
 8022f38:	7963      	ldrb	r3, [r4, #5]
 8022f3a:	b1a3      	cbz	r3, 8022f66 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8022f3c:	8aa1      	ldrh	r1, [r4, #20]
 8022f3e:	b129      	cbz	r1, 8022f4c <dhcp_coarse_tmr+0x24>
 8022f40:	8a62      	ldrh	r2, [r4, #18]
 8022f42:	3201      	adds	r2, #1
 8022f44:	b292      	uxth	r2, r2
 8022f46:	4291      	cmp	r1, r2
 8022f48:	8262      	strh	r2, [r4, #18]
 8022f4a:	d012      	beq.n	8022f72 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8022f4c:	8a22      	ldrh	r2, [r4, #16]
 8022f4e:	b11a      	cbz	r2, 8022f58 <dhcp_coarse_tmr+0x30>
 8022f50:	1e51      	subs	r1, r2, #1
 8022f52:	2a01      	cmp	r2, #1
 8022f54:	8221      	strh	r1, [r4, #16]
 8022f56:	d013      	beq.n	8022f80 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8022f58:	89e2      	ldrh	r2, [r4, #14]
 8022f5a:	b122      	cbz	r2, 8022f66 <dhcp_coarse_tmr+0x3e>
 8022f5c:	1e51      	subs	r1, r2, #1
 8022f5e:	2a01      	cmp	r2, #1
 8022f60:	81e1      	strh	r1, [r4, #14]
 8022f62:	f000 8087 	beq.w	8023074 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8022f66:	682d      	ldr	r5, [r5, #0]
 8022f68:	2d00      	cmp	r5, #0
 8022f6a:	d1e3      	bne.n	8022f34 <dhcp_coarse_tmr+0xc>
}
 8022f6c:	b007      	add	sp, #28
 8022f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8022f72:	4628      	mov	r0, r5
 8022f74:	f7ff feec 	bl	8022d50 <dhcp_release_and_stop>
        dhcp_start(netif);
 8022f78:	4628      	mov	r0, r5
 8022f7a:	f7ff ff79 	bl	8022e70 <dhcp_start>
 8022f7e:	e7f2      	b.n	8022f66 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022f80:	1e5a      	subs	r2, r3, #1
 8022f82:	b2d1      	uxtb	r1, r2
 8022f84:	2909      	cmp	r1, #9
 8022f86:	d8ee      	bhi.n	8022f66 <dhcp_coarse_tmr+0x3e>
 8022f88:	f240 2219 	movw	r2, #537	; 0x219
 8022f8c:	40ca      	lsrs	r2, r1
 8022f8e:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022f90:	f012 0201 	ands.w	r2, r2, #1
 8022f94:	d1e7      	bne.n	8022f66 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8022f96:	2b04      	cmp	r3, #4
 8022f98:	d003      	beq.n	8022fa2 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8022f9a:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8022f9c:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8022f9e:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8022fa0:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022fa2:	f10d 0316 	add.w	r3, sp, #22
 8022fa6:	2203      	movs	r2, #3
 8022fa8:	4621      	mov	r1, r4
 8022faa:	4628      	mov	r0, r5
 8022fac:	f7fe fde4 	bl	8021b78 <dhcp_create_msg>
  if (p_out != NULL) {
 8022fb0:	4607      	mov	r7, r0
 8022fb2:	2800      	cmp	r0, #0
 8022fb4:	f000 8096 	beq.w	80230e4 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022fb8:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8022fbc:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022fbe:	f106 0904 	add.w	r9, r6, #4
 8022fc2:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022fc6:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022fca:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8022fce:	f200 80b9 	bhi.w	8023144 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8022fd2:	2239      	movs	r2, #57	; 0x39
 8022fd4:	1c73      	adds	r3, r6, #1
 8022fd6:	fa1f fb8a 	uxth.w	fp, sl
 8022fda:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8022fde:	b29b      	uxth	r3, r3
 8022fe0:	2202      	movs	r2, #2
 8022fe2:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022fe6:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022fea:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022fec:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022fee:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022ff2:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022ff4:	f200 809e 	bhi.w	8023134 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022ff8:	9903      	ldr	r1, [sp, #12]
 8022ffa:	1cf3      	adds	r3, r6, #3
 8022ffc:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023000:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8023002:	0a0a      	lsrs	r2, r1, #8
 8023004:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023008:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802300c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023010:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023014:	2b44      	cmp	r3, #68	; 0x44
 8023016:	f200 8085 	bhi.w	8023124 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 802301a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 802301e:	2237      	movs	r2, #55	; 0x37
 8023020:	1d73      	adds	r3, r6, #5
 8023022:	f8df b158 	ldr.w	fp, [pc, #344]	; 802317c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8023026:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 802302a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 802302e:	b29b      	uxth	r3, r3
 8023030:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023032:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8023036:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 802303a:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802303e:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023042:	d80f      	bhi.n	8023064 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8023044:	f808 a009 	strb.w	sl, [r8, r9]
 8023048:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802304c:	4b42      	ldr	r3, [pc, #264]	; (8023158 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 802304e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023052:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8023054:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023058:	d01f      	beq.n	802309a <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802305a:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802305e:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023062:	d9ef      	bls.n	8023044 <dhcp_coarse_tmr+0x11c>
 8023064:	4b3d      	ldr	r3, [pc, #244]	; (802315c <dhcp_coarse_tmr+0x234>)
 8023066:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802306a:	493d      	ldr	r1, [pc, #244]	; (8023160 <dhcp_coarse_tmr+0x238>)
 802306c:	483d      	ldr	r0, [pc, #244]	; (8023164 <dhcp_coarse_tmr+0x23c>)
 802306e:	f003 fb69 	bl	8026744 <iprintf>
 8023072:	e7e7      	b.n	8023044 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8023074:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8023078:	2a01      	cmp	r2, #1
 802307a:	d002      	beq.n	8023082 <dhcp_coarse_tmr+0x15a>
 802307c:	2b0a      	cmp	r3, #10
 802307e:	f47f af72 	bne.w	8022f66 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8023082:	4628      	mov	r0, r5
 8023084:	f7ff fd7e 	bl	8022b84 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8023088:	89a3      	ldrh	r3, [r4, #12]
 802308a:	8a62      	ldrh	r2, [r4, #18]
 802308c:	1a9b      	subs	r3, r3, r2
 802308e:	2b01      	cmp	r3, #1
 8023090:	f77f af69 	ble.w	8022f66 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8023094:	105b      	asrs	r3, r3, #1
 8023096:	81e3      	strh	r3, [r4, #14]
 8023098:	e765      	b.n	8022f66 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 802309a:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 802309e:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80230a2:	22ff      	movs	r2, #255	; 0xff
 80230a4:	b280      	uxth	r0, r0
 80230a6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80230a8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80230aa:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80230ae:	d808      	bhi.n	80230c2 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 80230b0:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 80230b4:	4440      	add	r0, r8
 80230b6:	2100      	movs	r1, #0
 80230b8:	b292      	uxth	r2, r2
 80230ba:	3201      	adds	r2, #1
 80230bc:	f002 fba4 	bl	8025808 <memset>
 80230c0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80230c2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80230c6:	4638      	mov	r0, r7
 80230c8:	b289      	uxth	r1, r1
 80230ca:	f7f9 f959 	bl	801c380 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80230ce:	4b26      	ldr	r3, [pc, #152]	; (8023168 <dhcp_coarse_tmr+0x240>)
 80230d0:	9500      	str	r5, [sp, #0]
 80230d2:	4639      	mov	r1, r7
 80230d4:	6818      	ldr	r0, [r3, #0]
 80230d6:	2343      	movs	r3, #67	; 0x43
 80230d8:	4a24      	ldr	r2, [pc, #144]	; (802316c <dhcp_coarse_tmr+0x244>)
 80230da:	f7fe fa4b 	bl	8021574 <udp_sendto_if>
    pbuf_free(p_out);
 80230de:	4638      	mov	r0, r7
 80230e0:	f7f9 fa66 	bl	801c5b0 <pbuf_free>
  if (dhcp->tries < 255) {
 80230e4:	79a3      	ldrb	r3, [r4, #6]
 80230e6:	2bff      	cmp	r3, #255	; 0xff
 80230e8:	d01a      	beq.n	8023120 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 80230ea:	3301      	adds	r3, #1
 80230ec:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80230ee:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80230f0:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80230f2:	d815      	bhi.n	8023120 <dhcp_coarse_tmr+0x1f8>
 80230f4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80230f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80230fc:	4a1c      	ldr	r2, [pc, #112]	; (8023170 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80230fe:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023100:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8023104:	b29b      	uxth	r3, r3
 8023106:	fba2 2303 	umull	r2, r3, r2, r3
 802310a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802310c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802310e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8023110:	8aa3      	ldrh	r3, [r4, #20]
 8023112:	1a9b      	subs	r3, r3, r2
 8023114:	2b01      	cmp	r3, #1
 8023116:	f77f af26 	ble.w	8022f66 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802311a:	105b      	asrs	r3, r3, #1
 802311c:	8223      	strh	r3, [r4, #16]
 802311e:	e722      	b.n	8022f66 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8023120:	2314      	movs	r3, #20
 8023122:	e7f3      	b.n	802310c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023124:	4b0d      	ldr	r3, [pc, #52]	; (802315c <dhcp_coarse_tmr+0x234>)
 8023126:	f240 529a 	movw	r2, #1434	; 0x59a
 802312a:	4912      	ldr	r1, [pc, #72]	; (8023174 <dhcp_coarse_tmr+0x24c>)
 802312c:	480d      	ldr	r0, [pc, #52]	; (8023164 <dhcp_coarse_tmr+0x23c>)
 802312e:	f003 fb09 	bl	8026744 <iprintf>
 8023132:	e772      	b.n	802301a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8023134:	4b09      	ldr	r3, [pc, #36]	; (802315c <dhcp_coarse_tmr+0x234>)
 8023136:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802313a:	490f      	ldr	r1, [pc, #60]	; (8023178 <dhcp_coarse_tmr+0x250>)
 802313c:	4809      	ldr	r0, [pc, #36]	; (8023164 <dhcp_coarse_tmr+0x23c>)
 802313e:	f003 fb01 	bl	8026744 <iprintf>
 8023142:	e759      	b.n	8022ff8 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023144:	4b05      	ldr	r3, [pc, #20]	; (802315c <dhcp_coarse_tmr+0x234>)
 8023146:	f240 529a 	movw	r2, #1434	; 0x59a
 802314a:	490a      	ldr	r1, [pc, #40]	; (8023174 <dhcp_coarse_tmr+0x24c>)
 802314c:	4805      	ldr	r0, [pc, #20]	; (8023164 <dhcp_coarse_tmr+0x23c>)
 802314e:	f003 faf9 	bl	8026744 <iprintf>
 8023152:	e73e      	b.n	8022fd2 <dhcp_coarse_tmr+0xaa>
 8023154:	2002e490 	.word	0x2002e490
 8023158:	08046fe4 	.word	0x08046fe4
 802315c:	08046c68 	.word	0x08046c68
 8023160:	08046e5c 	.word	0x08046e5c
 8023164:	0802b43c 	.word	0x0802b43c
 8023168:	2002e508 	.word	0x2002e508
 802316c:	08047320 	.word	0x08047320
 8023170:	10624dd3 	.word	0x10624dd3
 8023174:	08046ddc 	.word	0x08046ddc
 8023178:	08046e20 	.word	0x08046e20
 802317c:	08046fe1 	.word	0x08046fe1

08023180 <dhcp_fine_tmr>:
{
 8023180:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8023182:	4b21      	ldr	r3, [pc, #132]	; (8023208 <dhcp_fine_tmr+0x88>)
 8023184:	681c      	ldr	r4, [r3, #0]
 8023186:	b1fc      	cbz	r4, 80231c8 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8023188:	2500      	movs	r5, #0
 802318a:	e003      	b.n	8023194 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 802318c:	3a01      	subs	r2, #1
 802318e:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8023190:	6824      	ldr	r4, [r4, #0]
 8023192:	b1cc      	cbz	r4, 80231c8 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8023194:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8023196:	2b00      	cmp	r3, #0
 8023198:	d0fa      	beq.n	8023190 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 802319a:	891a      	ldrh	r2, [r3, #8]
 802319c:	2a01      	cmp	r2, #1
 802319e:	d8f5      	bhi.n	802318c <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 80231a0:	d1f6      	bne.n	8023190 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80231a2:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 80231a4:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80231a6:	2a0c      	cmp	r2, #12
 80231a8:	d016      	beq.n	80231d8 <dhcp_fine_tmr+0x58>
 80231aa:	2a06      	cmp	r2, #6
 80231ac:	d014      	beq.n	80231d8 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80231ae:	2a01      	cmp	r2, #1
 80231b0:	d016      	beq.n	80231e0 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80231b2:	2a08      	cmp	r2, #8
 80231b4:	d009      	beq.n	80231ca <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80231b6:	2a03      	cmp	r2, #3
 80231b8:	d1ea      	bne.n	8023190 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 80231ba:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80231bc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80231be:	2b01      	cmp	r3, #1
 80231c0:	d91e      	bls.n	8023200 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 80231c2:	f7fe fe8b 	bl	8021edc <dhcp_discover>
 80231c6:	e7e3      	b.n	8023190 <dhcp_fine_tmr+0x10>
}
 80231c8:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 80231ca:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80231cc:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80231ce:	2b01      	cmp	r3, #1
 80231d0:	d913      	bls.n	80231fa <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 80231d2:	f7fe fb6d 	bl	80218b0 <dhcp_bind>
 80231d6:	e7db      	b.n	8023190 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 80231d8:	4620      	mov	r0, r4
 80231da:	f7fe fe7f 	bl	8021edc <dhcp_discover>
 80231de:	e7d7      	b.n	8023190 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 80231e0:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 80231e2:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 80231e4:	2b05      	cmp	r3, #5
 80231e6:	d802      	bhi.n	80231ee <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 80231e8:	f7fe ff5e 	bl	80220a8 <dhcp_select.isra.0>
 80231ec:	e7d0      	b.n	8023190 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 80231ee:	f7ff fdaf 	bl	8022d50 <dhcp_release_and_stop>
      dhcp_start(netif);
 80231f2:	4620      	mov	r0, r4
 80231f4:	f7ff fe3c 	bl	8022e70 <dhcp_start>
 80231f8:	e7ca      	b.n	8023190 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 80231fa:	f7fe fb41 	bl	8021880 <dhcp_check>
 80231fe:	e7c7      	b.n	8023190 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8023200:	f7fe fd6c 	bl	8021cdc <dhcp_reboot.isra.0>
 8023204:	e7c4      	b.n	8023190 <dhcp_fine_tmr+0x10>
 8023206:	bf00      	nop
 8023208:	2002e490 	.word	0x2002e490

0802320c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802320c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023210:	4f1a      	ldr	r7, [pc, #104]	; (802327c <etharp_free_entry+0x70>)
 8023212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8023216:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8023218:	ea4f 0840 	mov.w	r8, r0, lsl #1
 802321c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8023220:	b32c      	cbz	r4, 802326e <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8023222:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8023280 <etharp_free_entry+0x74>
 8023226:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8023284 <etharp_free_entry+0x78>
 802322a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8023288 <etharp_free_entry+0x7c>
 802322e:	e006      	b.n	802323e <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8023230:	f7f9 f9be 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8023234:	4629      	mov	r1, r5
 8023236:	200b      	movs	r0, #11
 8023238:	f7f8 fca2 	bl	801bb80 <memp_free>
  while (q) {
 802323c:	b19c      	cbz	r4, 8023266 <etharp_free_entry+0x5a>
    q = q->next;
 802323e:	4625      	mov	r5, r4
 8023240:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8023242:	6868      	ldr	r0, [r5, #4]
 8023244:	2800      	cmp	r0, #0
 8023246:	d1f3      	bne.n	8023230 <etharp_free_entry+0x24>
 8023248:	4651      	mov	r1, sl
 802324a:	465b      	mov	r3, fp
 802324c:	229a      	movs	r2, #154	; 0x9a
 802324e:	4648      	mov	r0, r9
 8023250:	f003 fa78 	bl	8026744 <iprintf>
    pbuf_free(r->p);
 8023254:	6868      	ldr	r0, [r5, #4]
 8023256:	f7f9 f9ab 	bl	801c5b0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 802325a:	4629      	mov	r1, r5
 802325c:	200b      	movs	r0, #11
 802325e:	f7f8 fc8f 	bl	801bb80 <memp_free>
  while (q) {
 8023262:	2c00      	cmp	r4, #0
 8023264:	d1eb      	bne.n	802323e <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8023266:	eb08 0306 	add.w	r3, r8, r6
 802326a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802326e:	4446      	add	r6, r8
 8023270:	2300      	movs	r3, #0
 8023272:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8023276:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802327c:	2002e548 	.word	0x2002e548
 8023280:	08046fe4 	.word	0x08046fe4
 8023284:	0804701c 	.word	0x0804701c
 8023288:	0802b43c 	.word	0x0802b43c

0802328c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 802328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023290:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023292:	f04f 0820 	mov.w	r8, #32
{
 8023296:	b083      	sub	sp, #12
 8023298:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802329a:	469e      	mov	lr, r3
 802329c:	469b      	mov	fp, r3
{
 802329e:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80232a0:	469a      	mov	sl, r3
 80232a2:	4948      	ldr	r1, [pc, #288]	; (80233c4 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 80232a4:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80232a6:	46c4      	mov	ip, r8
 80232a8:	4691      	mov	r9, r2
 80232aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80232ae:	e004      	b.n	80232ba <etharp_find_entry+0x2e>
 80232b0:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232b2:	3301      	adds	r3, #1
 80232b4:	3118      	adds	r1, #24
 80232b6:	2b20      	cmp	r3, #32
 80232b8:	d015      	beq.n	80232e6 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80232ba:	2c20      	cmp	r4, #32
 80232bc:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 80232be:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80232c0:	d134      	bne.n	802332c <etharp_find_entry+0xa0>
 80232c2:	2800      	cmp	r0, #0
 80232c4:	d0f4      	beq.n	80232b0 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80232c6:	b11d      	cbz	r5, 80232d0 <etharp_find_entry+0x44>
 80232c8:	682f      	ldr	r7, [r5, #0]
 80232ca:	684e      	ldr	r6, [r1, #4]
 80232cc:	42b7      	cmp	r7, r6
 80232ce:	d038      	beq.n	8023342 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80232d0:	2801      	cmp	r0, #1
 80232d2:	d02e      	beq.n	8023332 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80232d4:	8a48      	ldrh	r0, [r1, #18]
 80232d6:	4570      	cmp	r0, lr
 80232d8:	d3eb      	bcc.n	80232b2 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232da:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 80232dc:	4686      	mov	lr, r0
 80232de:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232e0:	3118      	adds	r1, #24
 80232e2:	2b20      	cmp	r3, #32
 80232e4:	d1e9      	bne.n	80232ba <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80232e6:	9b00      	ldr	r3, [sp, #0]
 80232e8:	464e      	mov	r6, r9
 80232ea:	2b01      	cmp	r3, #1
 80232ec:	d166      	bne.n	80233bc <etharp_find_entry+0x130>
 80232ee:	2c20      	cmp	r4, #32
 80232f0:	d040      	beq.n	8023374 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80232f2:	46a1      	mov	r9, r4
 80232f4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80232f8:	4a32      	ldr	r2, [pc, #200]	; (80233c4 <etharp_find_entry+0x138>)
 80232fa:	ea4f 0849 	mov.w	r8, r9, lsl #1
 80232fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023302:	7d1b      	ldrb	r3, [r3, #20]
 8023304:	bb73      	cbnz	r3, 8023364 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023306:	b135      	cbz	r5, 8023316 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023308:	eb08 0309 	add.w	r3, r8, r9
 802330c:	492d      	ldr	r1, [pc, #180]	; (80233c4 <etharp_find_entry+0x138>)
 802330e:	682a      	ldr	r2, [r5, #0]
 8023310:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8023314:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8023316:	44c8      	add	r8, r9
 8023318:	4a2a      	ldr	r2, [pc, #168]	; (80233c4 <etharp_find_entry+0x138>)
 802331a:	2300      	movs	r3, #0
 802331c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8023320:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023322:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8023324:	4620      	mov	r0, r4
 8023326:	b003      	add	sp, #12
 8023328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 802332c:	2800      	cmp	r0, #0
 802332e:	d0c0      	beq.n	80232b2 <etharp_find_entry+0x26>
 8023330:	e7c9      	b.n	80232c6 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8023332:	6808      	ldr	r0, [r1, #0]
 8023334:	b180      	cbz	r0, 8023358 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8023336:	8a48      	ldrh	r0, [r1, #18]
 8023338:	4550      	cmp	r0, sl
 802333a:	d3ba      	bcc.n	80232b2 <etharp_find_entry+0x26>
 802333c:	4682      	mov	sl, r0
 802333e:	4690      	mov	r8, r2
 8023340:	e7b7      	b.n	80232b2 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023342:	f1b9 0f00 	cmp.w	r9, #0
 8023346:	d002      	beq.n	802334e <etharp_find_entry+0xc2>
 8023348:	688e      	ldr	r6, [r1, #8]
 802334a:	454e      	cmp	r6, r9
 802334c:	d1c0      	bne.n	80232d0 <etharp_find_entry+0x44>
 802334e:	4614      	mov	r4, r2
}
 8023350:	4620      	mov	r0, r4
 8023352:	b003      	add	sp, #12
 8023354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8023358:	8a48      	ldrh	r0, [r1, #18]
 802335a:	4558      	cmp	r0, fp
 802335c:	d3a9      	bcc.n	80232b2 <etharp_find_entry+0x26>
 802335e:	4683      	mov	fp, r0
 8023360:	9201      	str	r2, [sp, #4]
 8023362:	e7a6      	b.n	80232b2 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023364:	4b18      	ldr	r3, [pc, #96]	; (80233c8 <etharp_find_entry+0x13c>)
 8023366:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802336a:	4918      	ldr	r1, [pc, #96]	; (80233cc <etharp_find_entry+0x140>)
 802336c:	4818      	ldr	r0, [pc, #96]	; (80233d0 <etharp_find_entry+0x144>)
 802336e:	f003 f9e9 	bl	8026744 <iprintf>
 8023372:	e7c8      	b.n	8023306 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8023374:	f1bc 0f20 	cmp.w	ip, #32
 8023378:	d012      	beq.n	80233a0 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802337a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 802337e:	4a11      	ldr	r2, [pc, #68]	; (80233c4 <etharp_find_entry+0x138>)
 8023380:	46e1      	mov	r9, ip
 8023382:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8023386:	b1bb      	cbz	r3, 80233b8 <etharp_find_entry+0x12c>
 8023388:	464c      	mov	r4, r9
 802338a:	4b0f      	ldr	r3, [pc, #60]	; (80233c8 <etharp_find_entry+0x13c>)
 802338c:	f240 126d 	movw	r2, #365	; 0x16d
 8023390:	4910      	ldr	r1, [pc, #64]	; (80233d4 <etharp_find_entry+0x148>)
 8023392:	480f      	ldr	r0, [pc, #60]	; (80233d0 <etharp_find_entry+0x144>)
 8023394:	f003 f9d6 	bl	8026744 <iprintf>
    etharp_free_entry(i);
 8023398:	4648      	mov	r0, r9
 802339a:	f7ff ff37 	bl	802320c <etharp_free_entry>
 802339e:	e7a9      	b.n	80232f4 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80233a0:	9b01      	ldr	r3, [sp, #4]
 80233a2:	2b20      	cmp	r3, #32
 80233a4:	d105      	bne.n	80233b2 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80233a6:	f1b8 0f20 	cmp.w	r8, #32
 80233aa:	d007      	beq.n	80233bc <etharp_find_entry+0x130>
    etharp_free_entry(i);
 80233ac:	4644      	mov	r4, r8
 80233ae:	46c1      	mov	r9, r8
 80233b0:	e7f2      	b.n	8023398 <etharp_find_entry+0x10c>
 80233b2:	461c      	mov	r4, r3
 80233b4:	4699      	mov	r9, r3
 80233b6:	e7ef      	b.n	8023398 <etharp_find_entry+0x10c>
 80233b8:	4664      	mov	r4, ip
 80233ba:	e7ed      	b.n	8023398 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 80233bc:	f04f 34ff 	mov.w	r4, #4294967295
 80233c0:	e7b0      	b.n	8023324 <etharp_find_entry+0x98>
 80233c2:	bf00      	nop
 80233c4:	2002e548 	.word	0x2002e548
 80233c8:	08046fe4 	.word	0x08046fe4
 80233cc:	08047044 	.word	0x08047044
 80233d0:	0802b43c 	.word	0x0802b43c
 80233d4:	0804702c 	.word	0x0804702c

080233d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80233d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233dc:	b082      	sub	sp, #8
 80233de:	4688      	mov	r8, r1
 80233e0:	4691      	mov	r9, r2
 80233e2:	461f      	mov	r7, r3
 80233e4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80233e8:	4606      	mov	r6, r0
{
 80233ea:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80233ee:	2800      	cmp	r0, #0
 80233f0:	d050      	beq.n	8023494 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80233f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80233f6:	211c      	movs	r1, #28
 80233f8:	200e      	movs	r0, #14
 80233fa:	f7f8 ff07 	bl	801c20c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80233fe:	4605      	mov	r5, r0
 8023400:	2800      	cmp	r0, #0
 8023402:	d04f      	beq.n	80234a4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023404:	8943      	ldrh	r3, [r0, #10]
 8023406:	2b1b      	cmp	r3, #27
 8023408:	d93c      	bls.n	8023484 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802340a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802340c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802340e:	f7f7 f893 	bl	801a538 <lwip_htons>
 8023412:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023414:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8023418:	2b06      	cmp	r3, #6
 802341a:	d006      	beq.n	802342a <etharp_raw+0x52>
 802341c:	4b23      	ldr	r3, [pc, #140]	; (80234ac <etharp_raw+0xd4>)
 802341e:	f240 4269 	movw	r2, #1129	; 0x469
 8023422:	4923      	ldr	r1, [pc, #140]	; (80234b0 <etharp_raw+0xd8>)
 8023424:	4823      	ldr	r0, [pc, #140]	; (80234b4 <etharp_raw+0xdc>)
 8023426:	f003 f98d 	bl	8026744 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802342a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802342c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802342e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023430:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023432:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023434:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023436:	88b9      	ldrh	r1, [r7, #4]
 8023438:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802343a:	f8da 1000 	ldr.w	r1, [sl]
 802343e:	f8c4 1012 	str.w	r1, [r4, #18]
 8023442:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8023446:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8023448:	990a      	ldr	r1, [sp, #40]	; 0x28
 802344a:	6809      	ldr	r1, [r1, #0]
 802344c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023450:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023452:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023454:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023456:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023458:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802345a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802345c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802345e:	2108      	movs	r1, #8
 8023460:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8023462:	2106      	movs	r1, #6
 8023464:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023466:	2104      	movs	r1, #4
 8023468:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802346a:	f640 0106 	movw	r1, #2054	; 0x806
 802346e:	9100      	str	r1, [sp, #0]
 8023470:	4629      	mov	r1, r5
 8023472:	f001 fbf5 	bl	8024c60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023476:	4628      	mov	r0, r5
 8023478:	f7f9 f89a 	bl	801c5b0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 802347c:	4630      	mov	r0, r6
}
 802347e:	b002      	add	sp, #8
 8023480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023484:	4b09      	ldr	r3, [pc, #36]	; (80234ac <etharp_raw+0xd4>)
 8023486:	f240 4262 	movw	r2, #1122	; 0x462
 802348a:	490b      	ldr	r1, [pc, #44]	; (80234b8 <etharp_raw+0xe0>)
 802348c:	4809      	ldr	r0, [pc, #36]	; (80234b4 <etharp_raw+0xdc>)
 802348e:	f003 f959 	bl	8026744 <iprintf>
 8023492:	e7ba      	b.n	802340a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023494:	4b05      	ldr	r3, [pc, #20]	; (80234ac <etharp_raw+0xd4>)
 8023496:	f240 4257 	movw	r2, #1111	; 0x457
 802349a:	4908      	ldr	r1, [pc, #32]	; (80234bc <etharp_raw+0xe4>)
 802349c:	4805      	ldr	r0, [pc, #20]	; (80234b4 <etharp_raw+0xdc>)
 802349e:	f003 f951 	bl	8026744 <iprintf>
 80234a2:	e7a6      	b.n	80233f2 <etharp_raw+0x1a>
    return ERR_MEM;
 80234a4:	f04f 30ff 	mov.w	r0, #4294967295
 80234a8:	e7e9      	b.n	802347e <etharp_raw+0xa6>
 80234aa:	bf00      	nop
 80234ac:	08046fe4 	.word	0x08046fe4
 80234b0:	080470a4 	.word	0x080470a4
 80234b4:	0802b43c 	.word	0x0802b43c
 80234b8:	08047070 	.word	0x08047070
 80234bc:	0802e6f8 	.word	0x0802e6f8

080234c0 <etharp_output_to_arp_index>:
{
 80234c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234c4:	4f37      	ldr	r7, [pc, #220]	; (80235a4 <etharp_output_to_arp_index+0xe4>)
 80234c6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 80234ca:	b085      	sub	sp, #20
 80234cc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234ce:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 80234d2:	4605      	mov	r5, r0
 80234d4:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234d6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80234da:	f899 3014 	ldrb.w	r3, [r9, #20]
 80234de:	2b01      	cmp	r3, #1
 80234e0:	d93c      	bls.n	802355c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80234e2:	2b02      	cmp	r3, #2
 80234e4:	d011      	beq.n	802350a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234e6:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80234e8:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234ec:	fb02 7404 	mla	r4, r2, r4, r7
 80234f0:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80234f2:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80234f6:	4623      	mov	r3, r4
 80234f8:	464a      	mov	r2, r9
 80234fa:	4631      	mov	r1, r6
 80234fc:	4628      	mov	r0, r5
 80234fe:	9700      	str	r7, [sp, #0]
 8023500:	f001 fbae 	bl	8024c60 <ethernet_output>
}
 8023504:	b005      	add	sp, #20
 8023506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802350a:	44a0      	add	r8, r4
 802350c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8023510:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8023514:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8023518:	d82a      	bhi.n	8023570 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802351a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802351e:	d3e2      	bcc.n	80234e6 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023520:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023524:	2301      	movs	r3, #1
 8023526:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802352a:	4628      	mov	r0, r5
 802352c:	00e4      	lsls	r4, r4, #3
 802352e:	9303      	str	r3, [sp, #12]
 8023530:	4b1d      	ldr	r3, [pc, #116]	; (80235a8 <etharp_output_to_arp_index+0xe8>)
 8023532:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023534:	f104 020c 	add.w	r2, r4, #12
 8023538:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802353c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802353e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023540:	18bc      	adds	r4, r7, r2
 8023542:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023544:	9300      	str	r3, [sp, #0]
 8023546:	464b      	mov	r3, r9
 8023548:	4622      	mov	r2, r4
 802354a:	9702      	str	r7, [sp, #8]
 802354c:	f7ff ff44 	bl	80233d8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023550:	2800      	cmp	r0, #0
 8023552:	d1ce      	bne.n	80234f2 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023554:	2303      	movs	r3, #3
 8023556:	f888 3014 	strb.w	r3, [r8, #20]
 802355a:	e7ca      	b.n	80234f2 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802355c:	4b13      	ldr	r3, [pc, #76]	; (80235ac <etharp_output_to_arp_index+0xec>)
 802355e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023562:	4913      	ldr	r1, [pc, #76]	; (80235b0 <etharp_output_to_arp_index+0xf0>)
 8023564:	4813      	ldr	r0, [pc, #76]	; (80235b4 <etharp_output_to_arp_index+0xf4>)
 8023566:	f003 f8ed 	bl	8026744 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802356a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802356e:	e7b8      	b.n	80234e2 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023570:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023574:	2301      	movs	r3, #1
 8023576:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802357a:	4a0f      	ldr	r2, [pc, #60]	; (80235b8 <etharp_output_to_arp_index+0xf8>)
 802357c:	00e4      	lsls	r4, r4, #3
 802357e:	9303      	str	r3, [sp, #12]
 8023580:	4649      	mov	r1, r9
 8023582:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023584:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023586:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023588:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802358a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802358c:	9302      	str	r3, [sp, #8]
 802358e:	4b06      	ldr	r3, [pc, #24]	; (80235a8 <etharp_output_to_arp_index+0xe8>)
 8023590:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023592:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023594:	9300      	str	r3, [sp, #0]
 8023596:	464b      	mov	r3, r9
 8023598:	f7ff ff1e 	bl	80233d8 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802359c:	2800      	cmp	r0, #0
 802359e:	d0d9      	beq.n	8023554 <etharp_output_to_arp_index+0x94>
 80235a0:	e7a7      	b.n	80234f2 <etharp_output_to_arp_index+0x32>
 80235a2:	bf00      	nop
 80235a4:	2002e548 	.word	0x2002e548
 80235a8:	0804751c 	.word	0x0804751c
 80235ac:	08046fe4 	.word	0x08046fe4
 80235b0:	080470e8 	.word	0x080470e8
 80235b4:	0802b43c 	.word	0x0802b43c
 80235b8:	08047514 	.word	0x08047514

080235bc <etharp_tmr>:
{
 80235bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235c0:	4c1e      	ldr	r4, [pc, #120]	; (802363c <etharp_tmr+0x80>)
 80235c2:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235c4:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235c6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8023644 <etharp_tmr+0x88>
 80235ca:	4f1d      	ldr	r7, [pc, #116]	; (8023640 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 80235cc:	2602      	movs	r6, #2
 80235ce:	e00d      	b.n	80235ec <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80235d0:	2a01      	cmp	r2, #1
 80235d2:	d101      	bne.n	80235d8 <etharp_tmr+0x1c>
 80235d4:	2b04      	cmp	r3, #4
 80235d6:	d813      	bhi.n	8023600 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80235d8:	2a03      	cmp	r2, #3
 80235da:	d01b      	beq.n	8023614 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80235dc:	2a04      	cmp	r2, #4
 80235de:	d01c      	beq.n	802361a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80235e0:	2a01      	cmp	r2, #1
 80235e2:	d01c      	beq.n	802361e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235e4:	3501      	adds	r5, #1
 80235e6:	3418      	adds	r4, #24
 80235e8:	2d20      	cmp	r5, #32
 80235ea:	d010      	beq.n	802360e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 80235ec:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80235ee:	2a00      	cmp	r2, #0
 80235f0:	d0f8      	beq.n	80235e4 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 80235f2:	89e3      	ldrh	r3, [r4, #14]
 80235f4:	3301      	adds	r3, #1
 80235f6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80235f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80235fc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80235fe:	d3e7      	bcc.n	80235d0 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8023600:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023602:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8023604:	f7ff fe02 	bl	802320c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023608:	3418      	adds	r4, #24
 802360a:	2d20      	cmp	r5, #32
 802360c:	d1ee      	bne.n	80235ec <etharp_tmr+0x30>
}
 802360e:	b004      	add	sp, #16
 8023610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023614:	2304      	movs	r3, #4
 8023616:	7423      	strb	r3, [r4, #16]
 8023618:	e7e4      	b.n	80235e4 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 802361a:	7426      	strb	r6, [r4, #16]
 802361c:	e7e2      	b.n	80235e4 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802361e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023620:	f8cd 8004 	str.w	r8, [sp, #4]
 8023624:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023628:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802362a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802362e:	9100      	str	r1, [sp, #0]
 8023630:	463a      	mov	r2, r7
 8023632:	4619      	mov	r1, r3
 8023634:	f7ff fed0 	bl	80233d8 <etharp_raw>
 8023638:	e7d4      	b.n	80235e4 <etharp_tmr+0x28>
 802363a:	bf00      	nop
 802363c:	2002e54c 	.word	0x2002e54c
 8023640:	08047514 	.word	0x08047514
 8023644:	0804751c 	.word	0x0804751c

08023648 <etharp_cleanup_netif>:
{
 8023648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802364a:	4c0c      	ldr	r4, [pc, #48]	; (802367c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802364c:	2500      	movs	r5, #0
{
 802364e:	4607      	mov	r7, r0
 8023650:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8023654:	e003      	b.n	802365e <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023656:	3418      	adds	r4, #24
 8023658:	3501      	adds	r5, #1
 802365a:	42b4      	cmp	r4, r6
 802365c:	d00c      	beq.n	8023678 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802365e:	7d23      	ldrb	r3, [r4, #20]
 8023660:	2b00      	cmp	r3, #0
 8023662:	d0f8      	beq.n	8023656 <etharp_cleanup_netif+0xe>
 8023664:	68a3      	ldr	r3, [r4, #8]
 8023666:	42bb      	cmp	r3, r7
 8023668:	d1f5      	bne.n	8023656 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802366a:	3418      	adds	r4, #24
      etharp_free_entry(i);
 802366c:	4628      	mov	r0, r5
 802366e:	f7ff fdcd 	bl	802320c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023672:	3501      	adds	r5, #1
 8023674:	42b4      	cmp	r4, r6
 8023676:	d1f2      	bne.n	802365e <etharp_cleanup_netif+0x16>
}
 8023678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802367a:	bf00      	nop
 802367c:	2002e548 	.word	0x2002e548

08023680 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023680:	2900      	cmp	r1, #0
 8023682:	f000 808e 	beq.w	80237a2 <etharp_input+0x122>
{
 8023686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 802368a:	6846      	ldr	r6, [r0, #4]
{
 802368c:	b087      	sub	sp, #28
 802368e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023690:	8833      	ldrh	r3, [r6, #0]
 8023692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023696:	d102      	bne.n	802369e <etharp_input+0x1e>
 8023698:	7933      	ldrb	r3, [r6, #4]
 802369a:	2b06      	cmp	r3, #6
 802369c:	d005      	beq.n	80236aa <etharp_input+0x2a>
    pbuf_free(p);
 802369e:	4620      	mov	r0, r4
}
 80236a0:	b007      	add	sp, #28
 80236a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80236a6:	f7f8 bf83 	b.w	801c5b0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80236aa:	7973      	ldrb	r3, [r6, #5]
 80236ac:	2b04      	cmp	r3, #4
 80236ae:	d1f6      	bne.n	802369e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80236b0:	8873      	ldrh	r3, [r6, #2]
 80236b2:	2b08      	cmp	r3, #8
 80236b4:	d1f3      	bne.n	802369e <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80236b6:	f8d6 000e 	ldr.w	r0, [r6, #14]
 80236ba:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80236bc:	684b      	ldr	r3, [r1, #4]
 80236be:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80236c2:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d073      	beq.n	80237b0 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80236c8:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80236cc:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80236d0:	faba fa8a 	clz	sl, sl
 80236d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80236d8:	f1ca 0702 	rsb	r7, sl, #2
 80236dc:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80236de:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80236e2:	2b06      	cmp	r3, #6
 80236e4:	d007      	beq.n	80236f6 <etharp_input+0x76>
 80236e6:	4b3e      	ldr	r3, [pc, #248]	; (80237e0 <etharp_input+0x160>)
 80236e8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80236ec:	493d      	ldr	r1, [pc, #244]	; (80237e4 <etharp_input+0x164>)
 80236ee:	483e      	ldr	r0, [pc, #248]	; (80237e8 <etharp_input+0x168>)
 80236f0:	f003 f828 	bl	8026744 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80236f4:	9805      	ldr	r0, [sp, #20]
 80236f6:	2800      	cmp	r0, #0
 80236f8:	d042      	beq.n	8023780 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80236fa:	4629      	mov	r1, r5
 80236fc:	f000 fd30 	bl	8024160 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8023700:	4681      	mov	r9, r0
 8023702:	2800      	cmp	r0, #0
 8023704:	d13c      	bne.n	8023780 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8023706:	9b05      	ldr	r3, [sp, #20]
 8023708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802370c:	2be0      	cmp	r3, #224	; 0xe0
 802370e:	d037      	beq.n	8023780 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8023710:	4639      	mov	r1, r7
 8023712:	462a      	mov	r2, r5
 8023714:	a805      	add	r0, sp, #20
 8023716:	f7ff fdb9 	bl	802328c <etharp_find_entry>
  if (i < 0) {
 802371a:	2800      	cmp	r0, #0
 802371c:	db30      	blt.n	8023780 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802371e:	4a33      	ldr	r2, [pc, #204]	; (80237ec <etharp_input+0x16c>)
 8023720:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8023724:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023726:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802372a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 802372e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023730:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8023732:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023734:	fb10 330c 	smlabb	r3, r0, ip, r3
 8023738:	f8d8 0000 	ldr.w	r0, [r8]
 802373c:	50d0      	str	r0, [r2, r3]
 802373e:	18d0      	adds	r0, r2, r3
 8023740:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8023744:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8023746:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 802374a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 802374e:	b1b9      	cbz	r1, 8023780 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023750:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8023754:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8023756:	200b      	movs	r0, #11
    p = q->p;
 8023758:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 802375c:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 802375e:	f7f8 fa0f 	bl	801bb80 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023766:	4659      	mov	r1, fp
 8023768:	464a      	mov	r2, r9
 802376a:	9300      	str	r3, [sp, #0]
 802376c:	4628      	mov	r0, r5
 802376e:	4643      	mov	r3, r8
 8023770:	f001 fa76 	bl	8024c60 <ethernet_output>
    pbuf_free(p);
 8023774:	4658      	mov	r0, fp
 8023776:	f7f8 ff1b 	bl	801c5b0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 802377a:	6839      	ldr	r1, [r7, #0]
 802377c:	2900      	cmp	r1, #0
 802377e:	d1e9      	bne.n	8023754 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8023780:	88f3      	ldrh	r3, [r6, #6]
 8023782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023786:	d018      	beq.n	80237ba <etharp_input+0x13a>
 8023788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802378c:	d103      	bne.n	8023796 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802378e:	a905      	add	r1, sp, #20
 8023790:	4628      	mov	r0, r5
 8023792:	f7ff f971 	bl	8022a78 <dhcp_arp_reply>
  pbuf_free(p);
 8023796:	4620      	mov	r0, r4
 8023798:	f7f8 ff0a 	bl	801c5b0 <pbuf_free>
}
 802379c:	b007      	add	sp, #28
 802379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80237a2:	4b0f      	ldr	r3, [pc, #60]	; (80237e0 <etharp_input+0x160>)
 80237a4:	f240 228a 	movw	r2, #650	; 0x28a
 80237a8:	4911      	ldr	r1, [pc, #68]	; (80237f0 <etharp_input+0x170>)
 80237aa:	480f      	ldr	r0, [pc, #60]	; (80237e8 <etharp_input+0x168>)
 80237ac:	f002 bfca 	b.w	8026744 <iprintf>
    for_us = 0;
 80237b0:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80237b2:	f106 0808 	add.w	r8, r6, #8
 80237b6:	2702      	movs	r7, #2
 80237b8:	e791      	b.n	80236de <etharp_input+0x5e>
      if (for_us) {
 80237ba:	f1ba 0f00 	cmp.w	sl, #0
 80237be:	d0ea      	beq.n	8023796 <etharp_input+0x116>
        etharp_raw(netif,
 80237c0:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80237c2:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 80237c6:	4642      	mov	r2, r8
 80237c8:	4628      	mov	r0, r5
 80237ca:	9103      	str	r1, [sp, #12]
 80237cc:	a905      	add	r1, sp, #20
 80237ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80237d2:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80237d4:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 80237d6:	9100      	str	r1, [sp, #0]
 80237d8:	4619      	mov	r1, r3
 80237da:	f7ff fdfd 	bl	80233d8 <etharp_raw>
 80237de:	e7da      	b.n	8023796 <etharp_input+0x116>
 80237e0:	08046fe4 	.word	0x08046fe4
 80237e4:	08047138 	.word	0x08047138
 80237e8:	0802b43c 	.word	0x0802b43c
 80237ec:	2002e548 	.word	0x2002e548
 80237f0:	0802e6f8 	.word	0x0802e6f8

080237f4 <etharp_query>:
{
 80237f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237f8:	468a      	mov	sl, r1
 80237fa:	b085      	sub	sp, #20
 80237fc:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80237fe:	4601      	mov	r1, r0
 8023800:	f8da 0000 	ldr.w	r0, [sl]
{
 8023804:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023806:	f000 fcab 	bl	8024160 <ip4_addr_isbroadcast_u32>
 802380a:	2800      	cmp	r0, #0
 802380c:	f040 80d1 	bne.w	80239b2 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8023810:	f8da 3000 	ldr.w	r3, [sl]
 8023814:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8023818:	2ae0      	cmp	r2, #224	; 0xe0
 802381a:	f000 80ca 	beq.w	80239b2 <etharp_query+0x1be>
 802381e:	2b00      	cmp	r3, #0
 8023820:	f000 80c7 	beq.w	80239b2 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023824:	462a      	mov	r2, r5
 8023826:	2101      	movs	r1, #1
 8023828:	4650      	mov	r0, sl
 802382a:	f7ff fd2f 	bl	802328c <etharp_find_entry>
  if (i_err < 0) {
 802382e:	1e07      	subs	r7, r0, #0
 8023830:	db52      	blt.n	80238d8 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023832:	2f7e      	cmp	r7, #126	; 0x7e
 8023834:	dc48      	bgt.n	80238c8 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8023836:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023838:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80239e8 <etharp_query+0x1f4>
 802383c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8023840:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8023844:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8023848:	7d1a      	ldrb	r2, [r3, #20]
 802384a:	b18a      	cbz	r2, 8023870 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802384c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8023850:	2e00      	cmp	r6, #0
 8023852:	f000 80a0 	beq.w	8023996 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023856:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 802385a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802385e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8023862:	7d13      	ldrb	r3, [r2, #20]
 8023864:	2b01      	cmp	r3, #1
 8023866:	d81e      	bhi.n	80238a6 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023868:	d03a      	beq.n	80238e0 <etharp_query+0xec>
}
 802386a:	b005      	add	sp, #20
 802386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023870:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023872:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8023876:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023878:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 802387c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802387e:	4628      	mov	r0, r5
 8023880:	4b53      	ldr	r3, [pc, #332]	; (80239d0 <etharp_query+0x1dc>)
 8023882:	4659      	mov	r1, fp
 8023884:	9203      	str	r2, [sp, #12]
 8023886:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023888:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802388a:	4a52      	ldr	r2, [pc, #328]	; (80239d4 <etharp_query+0x1e0>)
 802388c:	9300      	str	r3, [sp, #0]
 802388e:	465b      	mov	r3, fp
 8023890:	f7ff fda2 	bl	80233d8 <etharp_raw>
    if (q == NULL) {
 8023894:	2e00      	cmp	r6, #0
 8023896:	d0e8      	beq.n	802386a <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023898:	eb09 0207 	add.w	r2, r9, r7
 802389c:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80238a0:	7d13      	ldrb	r3, [r2, #20]
 80238a2:	2b01      	cmp	r3, #1
 80238a4:	d9e0      	bls.n	8023868 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238a6:	2318      	movs	r3, #24
 80238a8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80238ac:	465a      	mov	r2, fp
 80238ae:	4631      	mov	r1, r6
 80238b0:	fb03 8307 	mla	r3, r3, r7, r8
 80238b4:	4628      	mov	r0, r5
 80238b6:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 80238b8:	4c47      	ldr	r4, [pc, #284]	; (80239d8 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238ba:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 80238bc:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238be:	f001 f9cf 	bl	8024c60 <ethernet_output>
}
 80238c2:	b005      	add	sp, #20
 80238c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80238c8:	4b44      	ldr	r3, [pc, #272]	; (80239dc <etharp_query+0x1e8>)
 80238ca:	f240 32c1 	movw	r2, #961	; 0x3c1
 80238ce:	4944      	ldr	r1, [pc, #272]	; (80239e0 <etharp_query+0x1ec>)
 80238d0:	4844      	ldr	r0, [pc, #272]	; (80239e4 <etharp_query+0x1f0>)
 80238d2:	f002 ff37 	bl	8026744 <iprintf>
 80238d6:	e7ae      	b.n	8023836 <etharp_query+0x42>
    return (err_t)i_err;
 80238d8:	b278      	sxtb	r0, r7
}
 80238da:	b005      	add	sp, #20
 80238dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238e0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80238e2:	4d3e      	ldr	r5, [pc, #248]	; (80239dc <etharp_query+0x1e8>)
 80238e4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80239ec <etharp_query+0x1f8>
 80238e8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80239e4 <etharp_query+0x1f0>
 80238ec:	e005      	b.n	80238fa <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 80238ee:	7b23      	ldrb	r3, [r4, #12]
 80238f0:	065a      	lsls	r2, r3, #25
 80238f2:	d413      	bmi.n	802391c <etharp_query+0x128>
      p = p->next;
 80238f4:	6824      	ldr	r4, [r4, #0]
    while (p) {
 80238f6:	2c00      	cmp	r4, #0
 80238f8:	d038      	beq.n	802396c <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80238fa:	8962      	ldrh	r2, [r4, #10]
 80238fc:	8923      	ldrh	r3, [r4, #8]
 80238fe:	429a      	cmp	r2, r3
 8023900:	d1f5      	bne.n	80238ee <etharp_query+0xfa>
 8023902:	6822      	ldr	r2, [r4, #0]
 8023904:	462b      	mov	r3, r5
 8023906:	b132      	cbz	r2, 8023916 <etharp_query+0x122>
 8023908:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802390c:	4659      	mov	r1, fp
 802390e:	4650      	mov	r0, sl
 8023910:	f002 ff18 	bl	8026744 <iprintf>
 8023914:	e7eb      	b.n	80238ee <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8023916:	7b23      	ldrb	r3, [r4, #12]
 8023918:	065b      	lsls	r3, r3, #25
 802391a:	d527      	bpl.n	802396c <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802391c:	4632      	mov	r2, r6
 802391e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8023922:	200e      	movs	r0, #14
 8023924:	f7f8 ffd6 	bl	801c8d4 <pbuf_clone>
    if (p != NULL) {
 8023928:	4606      	mov	r6, r0
 802392a:	2800      	cmp	r0, #0
 802392c:	d047      	beq.n	80239be <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802392e:	f240 4206 	movw	r2, #1030	; 0x406
 8023932:	492a      	ldr	r1, [pc, #168]	; (80239dc <etharp_query+0x1e8>)
 8023934:	200b      	movs	r0, #11
 8023936:	f7f8 f8ed 	bl	801bb14 <memp_malloc_fn>
      if (new_entry != NULL) {
 802393a:	4602      	mov	r2, r0
 802393c:	2800      	cmp	r0, #0
 802393e:	d041      	beq.n	80239c4 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8023940:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8023944:	2100      	movs	r1, #0
        new_entry->p = p;
 8023946:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8023948:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802394a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802394c:	f858 5003 	ldr.w	r5, [r8, r3]
 8023950:	b1ed      	cbz	r5, 802398e <etharp_query+0x19a>
          while (r->next != NULL) {
 8023952:	682c      	ldr	r4, [r5, #0]
 8023954:	b384      	cbz	r4, 80239b8 <etharp_query+0x1c4>
          qlen++;
 8023956:	2301      	movs	r3, #1
            qlen++;
 8023958:	4620      	mov	r0, r4
          while (r->next != NULL) {
 802395a:	6824      	ldr	r4, [r4, #0]
            qlen++;
 802395c:	3301      	adds	r3, #1
          while (r->next != NULL) {
 802395e:	2c00      	cmp	r4, #0
 8023960:	d1fa      	bne.n	8023958 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8023962:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8023964:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8023966:	d805      	bhi.n	8023974 <etharp_query+0x180>
        result = ERR_OK;
 8023968:	4620      	mov	r0, r4
 802396a:	e77e      	b.n	802386a <etharp_query+0x76>
      pbuf_ref(p);
 802396c:	4630      	mov	r0, r6
 802396e:	f7f8 fe3d 	bl	801c5ec <pbuf_ref>
    if (p != NULL) {
 8023972:	e7dc      	b.n	802392e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8023974:	682b      	ldr	r3, [r5, #0]
 8023976:	444f      	add	r7, r9
          pbuf_free(old->p);
 8023978:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802397a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802397e:	f7f8 fe17 	bl	801c5b0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8023982:	200b      	movs	r0, #11
 8023984:	4629      	mov	r1, r5
 8023986:	f7f8 f8fb 	bl	801bb80 <memp_free>
        result = ERR_OK;
 802398a:	4620      	mov	r0, r4
 802398c:	e76d      	b.n	802386a <etharp_query+0x76>
 802398e:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8023990:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8023994:	e769      	b.n	802386a <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023996:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023998:	2301      	movs	r3, #1
 802399a:	4c0d      	ldr	r4, [pc, #52]	; (80239d0 <etharp_query+0x1dc>)
 802399c:	4659      	mov	r1, fp
 802399e:	4628      	mov	r0, r5
 80239a0:	e9cd a302 	strd	sl, r3, [sp, #8]
 80239a4:	e9cd 2400 	strd	r2, r4, [sp]
 80239a8:	465b      	mov	r3, fp
 80239aa:	4a0a      	ldr	r2, [pc, #40]	; (80239d4 <etharp_query+0x1e0>)
 80239ac:	f7ff fd14 	bl	80233d8 <etharp_raw>
    if (q == NULL) {
 80239b0:	e75b      	b.n	802386a <etharp_query+0x76>
    return ERR_ARG;
 80239b2:	f06f 000f 	mvn.w	r0, #15
 80239b6:	e758      	b.n	802386a <etharp_query+0x76>
        result = ERR_OK;
 80239b8:	4620      	mov	r0, r4
          r->next = new_entry;
 80239ba:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80239bc:	e755      	b.n	802386a <etharp_query+0x76>
      result = ERR_MEM;
 80239be:	f04f 30ff 	mov.w	r0, #4294967295
 80239c2:	e752      	b.n	802386a <etharp_query+0x76>
        pbuf_free(p);
 80239c4:	4630      	mov	r0, r6
 80239c6:	f7f8 fdf3 	bl	801c5b0 <pbuf_free>
        result = ERR_MEM;
 80239ca:	f04f 30ff 	mov.w	r0, #4294967295
 80239ce:	e74c      	b.n	802386a <etharp_query+0x76>
 80239d0:	0804751c 	.word	0x0804751c
 80239d4:	08047514 	.word	0x08047514
 80239d8:	2002e848 	.word	0x2002e848
 80239dc:	08046fe4 	.word	0x08046fe4
 80239e0:	0804715c 	.word	0x0804715c
 80239e4:	0802b43c 	.word	0x0802b43c
 80239e8:	2002e548 	.word	0x2002e548
 80239ec:	0804716c 	.word	0x0804716c

080239f0 <etharp_output>:
{
 80239f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239f4:	460f      	mov	r7, r1
 80239f6:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80239f8:	4605      	mov	r5, r0
{
 80239fa:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80239fc:	2800      	cmp	r0, #0
 80239fe:	f000 8086 	beq.w	8023b0e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023a02:	2f00      	cmp	r7, #0
 8023a04:	d072      	beq.n	8023aec <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023a06:	2e00      	cmp	r6, #0
 8023a08:	d079      	beq.n	8023afe <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8023a0a:	4629      	mov	r1, r5
 8023a0c:	6830      	ldr	r0, [r6, #0]
 8023a0e:	f000 fba7 	bl	8024160 <ip4_addr_isbroadcast_u32>
 8023a12:	2800      	cmp	r0, #0
 8023a14:	d160      	bne.n	8023ad8 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023a16:	6833      	ldr	r3, [r6, #0]
 8023a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8023a1c:	2ae0      	cmp	r2, #224	; 0xe0
 8023a1e:	d03b      	beq.n	8023a98 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a20:	686a      	ldr	r2, [r5, #4]
 8023a22:	68a9      	ldr	r1, [r5, #8]
 8023a24:	405a      	eors	r2, r3
 8023a26:	420a      	tst	r2, r1
 8023a28:	d009      	beq.n	8023a3e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 8023a2a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a2c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023a30:	4293      	cmp	r3, r2
 8023a32:	d004      	beq.n	8023a3e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023a34:	68eb      	ldr	r3, [r5, #12]
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d07b      	beq.n	8023b32 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 8023a3a:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023a3e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8023b54 <etharp_output+0x164>
 8023a42:	4b3d      	ldr	r3, [pc, #244]	; (8023b38 <etharp_output+0x148>)
 8023a44:	f898 2000 	ldrb.w	r2, [r8]
 8023a48:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8023a4c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8023a50:	7d19      	ldrb	r1, [r3, #20]
 8023a52:	2901      	cmp	r1, #1
 8023a54:	d902      	bls.n	8023a5c <etharp_output+0x6c>
 8023a56:	6899      	ldr	r1, [r3, #8]
 8023a58:	42a9      	cmp	r1, r5
 8023a5a:	d063      	beq.n	8023b24 <etharp_output+0x134>
 8023a5c:	4c36      	ldr	r4, [pc, #216]	; (8023b38 <etharp_output+0x148>)
{
 8023a5e:	2300      	movs	r3, #0
 8023a60:	e003      	b.n	8023a6a <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023a62:	2b20      	cmp	r3, #32
 8023a64:	f104 0418 	add.w	r4, r4, #24
 8023a68:	d038      	beq.n	8023adc <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023a6a:	f894 c014 	ldrb.w	ip, [r4, #20]
 8023a6e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023a70:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023a72:	f1bc 0f01 	cmp.w	ip, #1
 8023a76:	d9f4      	bls.n	8023a62 <etharp_output+0x72>
 8023a78:	68a0      	ldr	r0, [r4, #8]
 8023a7a:	42a8      	cmp	r0, r5
 8023a7c:	d1f1      	bne.n	8023a62 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8023a7e:	6860      	ldr	r0, [r4, #4]
 8023a80:	6831      	ldr	r1, [r6, #0]
 8023a82:	4281      	cmp	r1, r0
 8023a84:	d1ed      	bne.n	8023a62 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8023a86:	4639      	mov	r1, r7
 8023a88:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 8023a8a:	f888 2000 	strb.w	r2, [r8]
}
 8023a8e:	b004      	add	sp, #16
 8023a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8023a94:	f7ff bd14 	b.w	80234c0 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023a98:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023a9a:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023a9c:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023a9e:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023aa2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023aa6:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023aa8:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023aae:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023ab2:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8023ab6:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023ab8:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023abc:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023ac0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8023ac4:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8023ac8:	4639      	mov	r1, r7
 8023aca:	4628      	mov	r0, r5
 8023acc:	9400      	str	r4, [sp, #0]
 8023ace:	f001 f8c7 	bl	8024c60 <ethernet_output>
}
 8023ad2:	b004      	add	sp, #16
 8023ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8023ad8:	4b18      	ldr	r3, [pc, #96]	; (8023b3c <etharp_output+0x14c>)
 8023ada:	e7f1      	b.n	8023ac0 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8023adc:	463a      	mov	r2, r7
 8023ade:	4631      	mov	r1, r6
 8023ae0:	4628      	mov	r0, r5
}
 8023ae2:	b004      	add	sp, #16
 8023ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8023ae8:	f7ff be84 	b.w	80237f4 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023aec:	4b14      	ldr	r3, [pc, #80]	; (8023b40 <etharp_output+0x150>)
 8023aee:	f240 321f 	movw	r2, #799	; 0x31f
 8023af2:	4914      	ldr	r1, [pc, #80]	; (8023b44 <etharp_output+0x154>)
 8023af4:	4814      	ldr	r0, [pc, #80]	; (8023b48 <etharp_output+0x158>)
 8023af6:	f002 fe25 	bl	8026744 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023afa:	2e00      	cmp	r6, #0
 8023afc:	d185      	bne.n	8023a0a <etharp_output+0x1a>
 8023afe:	4b10      	ldr	r3, [pc, #64]	; (8023b40 <etharp_output+0x150>)
 8023b00:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023b04:	4911      	ldr	r1, [pc, #68]	; (8023b4c <etharp_output+0x15c>)
 8023b06:	4810      	ldr	r0, [pc, #64]	; (8023b48 <etharp_output+0x158>)
 8023b08:	f002 fe1c 	bl	8026744 <iprintf>
 8023b0c:	e77d      	b.n	8023a0a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023b0e:	4b0c      	ldr	r3, [pc, #48]	; (8023b40 <etharp_output+0x150>)
 8023b10:	f240 321e 	movw	r2, #798	; 0x31e
 8023b14:	490e      	ldr	r1, [pc, #56]	; (8023b50 <etharp_output+0x160>)
 8023b16:	480c      	ldr	r0, [pc, #48]	; (8023b48 <etharp_output+0x158>)
 8023b18:	f002 fe14 	bl	8026744 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023b1c:	2f00      	cmp	r7, #0
 8023b1e:	f47f af72 	bne.w	8023a06 <etharp_output+0x16>
 8023b22:	e7e3      	b.n	8023aec <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023b24:	685b      	ldr	r3, [r3, #4]
 8023b26:	6831      	ldr	r1, [r6, #0]
 8023b28:	4299      	cmp	r1, r3
 8023b2a:	d197      	bne.n	8023a5c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023b2c:	4639      	mov	r1, r7
 8023b2e:	4628      	mov	r0, r5
 8023b30:	e7ad      	b.n	8023a8e <etharp_output+0x9e>
            return ERR_RTE;
 8023b32:	f06f 0003 	mvn.w	r0, #3
 8023b36:	e7cc      	b.n	8023ad2 <etharp_output+0xe2>
 8023b38:	2002e548 	.word	0x2002e548
 8023b3c:	08047514 	.word	0x08047514
 8023b40:	08046fe4 	.word	0x08046fe4
 8023b44:	08047188 	.word	0x08047188
 8023b48:	0802b43c 	.word	0x0802b43c
 8023b4c:	08047118 	.word	0x08047118
 8023b50:	0802e6f8 	.word	0x0802e6f8
 8023b54:	2002e848 	.word	0x2002e848

08023b58 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023b58:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b5a:	2301      	movs	r3, #1
{
 8023b5c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b5e:	4c07      	ldr	r4, [pc, #28]	; (8023b7c <etharp_request+0x24>)
 8023b60:	4a07      	ldr	r2, [pc, #28]	; (8023b80 <etharp_request+0x28>)
 8023b62:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023b64:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b66:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023b6a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8023b6e:	9400      	str	r4, [sp, #0]
 8023b70:	4619      	mov	r1, r3
 8023b72:	f7ff fc31 	bl	80233d8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8023b76:	b004      	add	sp, #16
 8023b78:	bd10      	pop	{r4, pc}
 8023b7a:	bf00      	nop
 8023b7c:	0804751c 	.word	0x0804751c
 8023b80:	08047514 	.word	0x08047514

08023b84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b86:	460e      	mov	r6, r1
 8023b88:	b087      	sub	sp, #28
 8023b8a:	4617      	mov	r7, r2
 8023b8c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023b8e:	2124      	movs	r1, #36	; 0x24
 8023b90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023b94:	2022      	movs	r0, #34	; 0x22
 8023b96:	f7f8 fb39 	bl	801c20c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8023b9a:	b3a8      	cbz	r0, 8023c08 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023b9c:	8943      	ldrh	r3, [r0, #10]
 8023b9e:	4605      	mov	r5, r0
 8023ba0:	2b23      	cmp	r3, #35	; 0x23
 8023ba2:	d933      	bls.n	8023c0c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023ba4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8023ba6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8023ba8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8023baa:	2600      	movs	r6, #0
  icmphdr->code = code;
 8023bac:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8023bae:	7126      	strb	r6, [r4, #4]
 8023bb0:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8023bb2:	71a6      	strb	r6, [r4, #6]
 8023bb4:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023bb6:	6818      	ldr	r0, [r3, #0]
 8023bb8:	6859      	ldr	r1, [r3, #4]
 8023bba:	689a      	ldr	r2, [r3, #8]
 8023bbc:	68df      	ldr	r7, [r3, #12]
 8023bbe:	60a0      	str	r0, [r4, #8]
 8023bc0:	6167      	str	r7, [r4, #20]
 8023bc2:	60e1      	str	r1, [r4, #12]
 8023bc4:	6122      	str	r2, [r4, #16]
 8023bc6:	6918      	ldr	r0, [r3, #16]
 8023bc8:	6959      	ldr	r1, [r3, #20]
 8023bca:	699a      	ldr	r2, [r3, #24]
 8023bcc:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023bce:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023bd0:	61e1      	str	r1, [r4, #28]
 8023bd2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8023bd4:	68db      	ldr	r3, [r3, #12]
 8023bd6:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8023bd8:	f000 f8e6 	bl	8023da8 <ip4_route>
#endif
  if (netif != NULL) {
 8023bdc:	4607      	mov	r7, r0
 8023bde:	b180      	cbz	r0, 8023c02 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023be0:	8969      	ldrh	r1, [r5, #10]
 8023be2:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8023be4:	70a6      	strb	r6, [r4, #2]
 8023be6:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023be8:	f7f7 fa4e 	bl	801b088 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023bec:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023bee:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023bf0:	aa05      	add	r2, sp, #20
 8023bf2:	4631      	mov	r1, r6
 8023bf4:	4628      	mov	r0, r5
 8023bf6:	9600      	str	r6, [sp, #0]
 8023bf8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8023bfc:	23ff      	movs	r3, #255	; 0xff
 8023bfe:	f000 fa9d 	bl	802413c <ip4_output_if>
  }
  pbuf_free(q);
 8023c02:	4628      	mov	r0, r5
 8023c04:	f7f8 fcd4 	bl	801c5b0 <pbuf_free>
}
 8023c08:	b007      	add	sp, #28
 8023c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023c0c:	4b03      	ldr	r3, [pc, #12]	; (8023c1c <icmp_send_response+0x98>)
 8023c0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023c12:	4903      	ldr	r1, [pc, #12]	; (8023c20 <icmp_send_response+0x9c>)
 8023c14:	4803      	ldr	r0, [pc, #12]	; (8023c24 <icmp_send_response+0xa0>)
 8023c16:	f002 fd95 	bl	8026744 <iprintf>
 8023c1a:	e7c3      	b.n	8023ba4 <icmp_send_response+0x20>
 8023c1c:	08047194 	.word	0x08047194
 8023c20:	080471cc 	.word	0x080471cc
 8023c24:	0802b43c 	.word	0x0802b43c

08023c28 <icmp_input>:
{
 8023c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 8023c2c:	4f54      	ldr	r7, [pc, #336]	; (8023d80 <icmp_input+0x158>)
{
 8023c2e:	b086      	sub	sp, #24
 8023c30:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8023c32:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8023c36:	f898 4000 	ldrb.w	r4, [r8]
 8023c3a:	f004 040f 	and.w	r4, r4, #15
 8023c3e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8023c40:	2c13      	cmp	r4, #19
 8023c42:	d913      	bls.n	8023c6c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8023c44:	8943      	ldrh	r3, [r0, #10]
 8023c46:	2b03      	cmp	r3, #3
 8023c48:	d910      	bls.n	8023c6c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8023c4a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8023c4c:	781b      	ldrb	r3, [r3, #0]
 8023c4e:	2b08      	cmp	r3, #8
 8023c50:	d10c      	bne.n	8023c6c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023c52:	6978      	ldr	r0, [r7, #20]
 8023c54:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8023c58:	2be0      	cmp	r3, #224	; 0xe0
 8023c5a:	d007      	beq.n	8023c6c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8023c5c:	460e      	mov	r6, r1
 8023c5e:	6839      	ldr	r1, [r7, #0]
 8023c60:	f000 fa7e 	bl	8024160 <ip4_addr_isbroadcast_u32>
 8023c64:	b910      	cbnz	r0, 8023c6c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023c66:	892b      	ldrh	r3, [r5, #8]
 8023c68:	2b07      	cmp	r3, #7
 8023c6a:	d805      	bhi.n	8023c78 <icmp_input+0x50>
  pbuf_free(p);
 8023c6c:	4628      	mov	r0, r5
}
 8023c6e:	b006      	add	sp, #24
 8023c70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8023c74:	f7f8 bc9c 	b.w	801c5b0 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8023c78:	4628      	mov	r0, r5
 8023c7a:	f7f7 fa0b 	bl	801b094 <inet_chksum_pbuf>
 8023c7e:	2800      	cmp	r0, #0
 8023c80:	d1f4      	bne.n	8023c6c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c82:	f104 010e 	add.w	r1, r4, #14
 8023c86:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8023c88:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c8c:	9105      	str	r1, [sp, #20]
 8023c8e:	f7f8 fbcf 	bl	801c430 <pbuf_add_header>
 8023c92:	9905      	ldr	r1, [sp, #20]
 8023c94:	2800      	cmp	r0, #0
 8023c96:	d058      	beq.n	8023d4a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8023c98:	892b      	ldrh	r3, [r5, #8]
 8023c9a:	eb03 0109 	add.w	r1, r3, r9
 8023c9e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8023ca0:	428b      	cmp	r3, r1
 8023ca2:	d8e3      	bhi.n	8023c6c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023ca4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023ca8:	200e      	movs	r0, #14
 8023caa:	f7f8 faaf 	bl	801c20c <pbuf_alloc>
        if (r == NULL) {
 8023cae:	4682      	mov	sl, r0
 8023cb0:	2800      	cmp	r0, #0
 8023cb2:	d0db      	beq.n	8023c6c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8023cb4:	8942      	ldrh	r2, [r0, #10]
 8023cb6:	f104 0308 	add.w	r3, r4, #8
 8023cba:	429a      	cmp	r2, r3
 8023cbc:	d351      	bcc.n	8023d62 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 8023cbe:	4641      	mov	r1, r8
 8023cc0:	4622      	mov	r2, r4
 8023cc2:	6840      	ldr	r0, [r0, #4]
 8023cc4:	f001 fd78 	bl	80257b8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8023cc8:	4621      	mov	r1, r4
 8023cca:	4650      	mov	r0, sl
 8023ccc:	f7f8 fbe4 	bl	801c498 <pbuf_remove_header>
 8023cd0:	2800      	cmp	r0, #0
 8023cd2:	d14a      	bne.n	8023d6a <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8023cd4:	4629      	mov	r1, r5
 8023cd6:	4650      	mov	r0, sl
 8023cd8:	f7f8 fcf2 	bl	801c6c0 <pbuf_copy>
 8023cdc:	2800      	cmp	r0, #0
 8023cde:	d140      	bne.n	8023d62 <icmp_input+0x13a>
        pbuf_free(p);
 8023ce0:	4628      	mov	r0, r5
 8023ce2:	4655      	mov	r5, sl
 8023ce4:	f7f8 fc64 	bl	801c5b0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8023ce8:	4621      	mov	r1, r4
 8023cea:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023cec:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8023cf0:	f7f8 fb9e 	bl	801c430 <pbuf_add_header>
 8023cf4:	2800      	cmp	r0, #0
 8023cf6:	d1b9      	bne.n	8023c6c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023cf8:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023cfa:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8023cfe:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d00:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8023d02:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023d04:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8023d06:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023d08:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023d0a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023d0e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d12:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023d14:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8023d16:	bf8c      	ite	hi
 8023d18:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8023d1a:	3308      	addls	r3, #8
 8023d1c:	b29b      	uxth	r3, r3
 8023d1e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023d22:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8023d26:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023d28:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023d2c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d2e:	f7f7 f9ab 	bl	801b088 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023d32:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d34:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023d36:	4643      	mov	r3, r8
 8023d38:	4912      	ldr	r1, [pc, #72]	; (8023d84 <icmp_input+0x15c>)
 8023d3a:	4628      	mov	r0, r5
 8023d3c:	9700      	str	r7, [sp, #0]
 8023d3e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8023d42:	463a      	mov	r2, r7
 8023d44:	f000 f9fa 	bl	802413c <ip4_output_if>
  pbuf_free(p);
 8023d48:	e790      	b.n	8023c6c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023d4a:	4628      	mov	r0, r5
 8023d4c:	f7f8 fba4 	bl	801c498 <pbuf_remove_header>
 8023d50:	2800      	cmp	r0, #0
 8023d52:	d0c9      	beq.n	8023ce8 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023d54:	4b0c      	ldr	r3, [pc, #48]	; (8023d88 <icmp_input+0x160>)
 8023d56:	22c7      	movs	r2, #199	; 0xc7
 8023d58:	490c      	ldr	r1, [pc, #48]	; (8023d8c <icmp_input+0x164>)
 8023d5a:	480d      	ldr	r0, [pc, #52]	; (8023d90 <icmp_input+0x168>)
 8023d5c:	f002 fcf2 	bl	8026744 <iprintf>
          goto icmperr;
 8023d60:	e784      	b.n	8023c6c <icmp_input+0x44>
          pbuf_free(r);
 8023d62:	4650      	mov	r0, sl
 8023d64:	f7f8 fc24 	bl	801c5b0 <pbuf_free>
          goto icmperr;
 8023d68:	e780      	b.n	8023c6c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023d6a:	4b07      	ldr	r3, [pc, #28]	; (8023d88 <icmp_input+0x160>)
 8023d6c:	22b6      	movs	r2, #182	; 0xb6
 8023d6e:	4909      	ldr	r1, [pc, #36]	; (8023d94 <icmp_input+0x16c>)
 8023d70:	4807      	ldr	r0, [pc, #28]	; (8023d90 <icmp_input+0x168>)
 8023d72:	f002 fce7 	bl	8026744 <iprintf>
          pbuf_free(r);
 8023d76:	4650      	mov	r0, sl
 8023d78:	f7f8 fc1a 	bl	801c5b0 <pbuf_free>
          goto icmperr;
 8023d7c:	e776      	b.n	8023c6c <icmp_input+0x44>
 8023d7e:	bf00      	nop
 8023d80:	2001f300 	.word	0x2001f300
 8023d84:	2001f314 	.word	0x2001f314
 8023d88:	08047194 	.word	0x08047194
 8023d8c:	08047230 	.word	0x08047230
 8023d90:	0802b43c 	.word	0x0802b43c
 8023d94:	080471f8 	.word	0x080471f8

08023d98 <icmp_dest_unreach>:
{
 8023d98:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8023d9a:	2103      	movs	r1, #3
 8023d9c:	f7ff bef2 	b.w	8023b84 <icmp_send_response>

08023da0 <icmp_time_exceeded>:
{
 8023da0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8023da2:	210b      	movs	r1, #11
 8023da4:	f7ff beee 	b.w	8023b84 <icmp_send_response>

08023da8 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023da8:	4b19      	ldr	r3, [pc, #100]	; (8023e10 <ip4_route+0x68>)
{
 8023daa:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8023dac:	681b      	ldr	r3, [r3, #0]
 8023dae:	b1ab      	cbz	r3, 8023ddc <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023db0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023db4:	07d4      	lsls	r4, r2, #31
 8023db6:	d5f9      	bpl.n	8023dac <ip4_route+0x4>
 8023db8:	0751      	lsls	r1, r2, #29
 8023dba:	d5f7      	bpl.n	8023dac <ip4_route+0x4>
 8023dbc:	6859      	ldr	r1, [r3, #4]
 8023dbe:	2900      	cmp	r1, #0
 8023dc0:	d0f4      	beq.n	8023dac <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023dc2:	6804      	ldr	r4, [r0, #0]
 8023dc4:	689d      	ldr	r5, [r3, #8]
 8023dc6:	4061      	eors	r1, r4
 8023dc8:	4229      	tst	r1, r5
 8023dca:	d004      	beq.n	8023dd6 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8023dcc:	0792      	lsls	r2, r2, #30
 8023dce:	d4ed      	bmi.n	8023dac <ip4_route+0x4>
 8023dd0:	68da      	ldr	r2, [r3, #12]
 8023dd2:	4294      	cmp	r4, r2
 8023dd4:	d1ea      	bne.n	8023dac <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8023dd6:	4618      	mov	r0, r3
 8023dd8:	bc30      	pop	{r4, r5}
 8023dda:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023ddc:	4b0d      	ldr	r3, [pc, #52]	; (8023e14 <ip4_route+0x6c>)
 8023dde:	681b      	ldr	r3, [r3, #0]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d0f8      	beq.n	8023dd6 <ip4_route+0x2e>
 8023de4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023de8:	f002 0205 	and.w	r2, r2, #5
 8023dec:	2a05      	cmp	r2, #5
 8023dee:	d108      	bne.n	8023e02 <ip4_route+0x5a>
 8023df0:	685a      	ldr	r2, [r3, #4]
 8023df2:	b152      	cbz	r2, 8023e0a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023df4:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8023df6:	2a7f      	cmp	r2, #127	; 0x7f
 8023df8:	bf08      	it	eq
 8023dfa:	2300      	moveq	r3, #0
}
 8023dfc:	bc30      	pop	{r4, r5}
 8023dfe:	4618      	mov	r0, r3
 8023e00:	4770      	bx	lr
    return NULL;
 8023e02:	2300      	movs	r3, #0
}
 8023e04:	bc30      	pop	{r4, r5}
 8023e06:	4618      	mov	r0, r3
 8023e08:	4770      	bx	lr
    return NULL;
 8023e0a:	4613      	mov	r3, r2
 8023e0c:	e7e3      	b.n	8023dd6 <ip4_route+0x2e>
 8023e0e:	bf00      	nop
 8023e10:	2002e490 	.word	0x2002e490
 8023e14:	2002e48c 	.word	0x2002e48c

08023e18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023e1c:	6847      	ldr	r7, [r0, #4]
{
 8023e1e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8023e20:	783b      	ldrb	r3, [r7, #0]
 8023e22:	091a      	lsrs	r2, r3, #4
 8023e24:	2a04      	cmp	r2, #4
 8023e26:	f040 80a8 	bne.w	8023f7a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e2a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e2e:	8878      	ldrh	r0, [r7, #2]
 8023e30:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e32:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e36:	f7f6 fb7f 	bl	801a538 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023e3a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e3c:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e3e:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8023e40:	4283      	cmp	r3, r0
 8023e42:	f200 80a0 	bhi.w	8023f86 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023e46:	8963      	ldrh	r3, [r4, #10]
 8023e48:	42ab      	cmp	r3, r5
 8023e4a:	f0c0 8096 	bcc.w	8023f7a <ip4_input+0x162>
 8023e4e:	8923      	ldrh	r3, [r4, #8]
 8023e50:	4543      	cmp	r3, r8
 8023e52:	f0c0 8092 	bcc.w	8023f7a <ip4_input+0x162>
 8023e56:	2d13      	cmp	r5, #19
 8023e58:	f240 808f 	bls.w	8023f7a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023e5c:	693b      	ldr	r3, [r7, #16]
 8023e5e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8024000 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023e66:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e6a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023e6c:	68f8      	ldr	r0, [r7, #12]
 8023e6e:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e72:	d073      	beq.n	8023f5c <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023e74:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8023e78:	07d2      	lsls	r2, r2, #31
 8023e7a:	d503      	bpl.n	8023e84 <ip4_input+0x6c>
 8023e7c:	6872      	ldr	r2, [r6, #4]
 8023e7e:	2a00      	cmp	r2, #0
 8023e80:	f040 8094 	bne.w	8023fac <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023e84:	b2db      	uxtb	r3, r3
 8023e86:	2b7f      	cmp	r3, #127	; 0x7f
 8023e88:	d06c      	beq.n	8023f64 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023e8a:	4b5c      	ldr	r3, [pc, #368]	; (8023ffc <ip4_input+0x1e4>)
 8023e8c:	681d      	ldr	r5, [r3, #0]
 8023e8e:	b935      	cbnz	r5, 8023e9e <ip4_input+0x86>
 8023e90:	e068      	b.n	8023f64 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023e92:	f000 f965 	bl	8024160 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023e96:	b980      	cbnz	r0, 8023eba <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8023e98:	682d      	ldr	r5, [r5, #0]
 8023e9a:	2d00      	cmp	r5, #0
 8023e9c:	d062      	beq.n	8023f64 <ip4_input+0x14c>
          if (netif == inp) {
 8023e9e:	42ae      	cmp	r6, r5
 8023ea0:	d0fa      	beq.n	8023e98 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023ea2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8023ea6:	07db      	lsls	r3, r3, #31
 8023ea8:	d5f6      	bpl.n	8023e98 <ip4_input+0x80>
 8023eaa:	686b      	ldr	r3, [r5, #4]
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	d0f3      	beq.n	8023e98 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023eb0:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023eb4:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023eb6:	4283      	cmp	r3, r0
 8023eb8:	d1eb      	bne.n	8023e92 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023eba:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023ebe:	2800      	cmp	r0, #0
 8023ec0:	d157      	bne.n	8023f72 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023ec2:	88fb      	ldrh	r3, [r7, #6]
 8023ec4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8023ec8:	b133      	cbz	r3, 8023ed8 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023eca:	4620      	mov	r0, r4
 8023ecc:	f000 fb1c 	bl	8024508 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	2800      	cmp	r0, #0
 8023ed4:	d054      	beq.n	8023f80 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023ed6:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8023ed8:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8023edc:	4631      	mov	r1, r6
 8023ede:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8023ee0:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023ee4:	783b      	ldrb	r3, [r7, #0]
 8023ee6:	f003 030f 	and.w	r3, r3, #15
 8023eea:	009b      	lsls	r3, r3, #2
 8023eec:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8023ef0:	f7f8 fd9e 	bl	801ca30 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8023ef4:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8023ef6:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8023ef8:	d024      	beq.n	8023f44 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023efa:	4649      	mov	r1, r9
 8023efc:	4620      	mov	r0, r4
 8023efe:	f7f8 facb 	bl	801c498 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023f02:	7a7b      	ldrb	r3, [r7, #9]
 8023f04:	2b06      	cmp	r3, #6
 8023f06:	d065      	beq.n	8023fd4 <ip4_input+0x1bc>
 8023f08:	2b11      	cmp	r3, #17
 8023f0a:	d05e      	beq.n	8023fca <ip4_input+0x1b2>
 8023f0c:	2b01      	cmp	r3, #1
 8023f0e:	d057      	beq.n	8023fc0 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8023f10:	f1ba 0f02 	cmp.w	sl, #2
 8023f14:	d013      	beq.n	8023f3e <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023f16:	4629      	mov	r1, r5
 8023f18:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8023f1c:	f000 f920 	bl	8024160 <ip4_addr_isbroadcast_u32>
 8023f20:	b968      	cbnz	r0, 8023f3e <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023f22:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023f2a:	2be0      	cmp	r3, #224	; 0xe0
 8023f2c:	d007      	beq.n	8023f3e <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023f2e:	4649      	mov	r1, r9
 8023f30:	4620      	mov	r0, r4
 8023f32:	f7f8 fae9 	bl	801c508 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023f36:	2102      	movs	r1, #2
 8023f38:	4620      	mov	r0, r4
 8023f3a:	f7ff ff2d 	bl	8023d98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023f3e:	4620      	mov	r0, r4
 8023f40:	f7f8 fb36 	bl	801c5b0 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023f44:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8023f46:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8023f48:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8023f4c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023f50:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023f54:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8023f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023f5c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8023f60:	07d9      	lsls	r1, r3, #31
 8023f62:	d41e      	bmi.n	8023fa2 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8023f64:	7a7b      	ldrb	r3, [r7, #9]
 8023f66:	2b11      	cmp	r3, #17
 8023f68:	d039      	beq.n	8023fde <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023f6a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023f6e:	b120      	cbz	r0, 8023f7a <ip4_input+0x162>
 8023f70:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023f72:	4631      	mov	r1, r6
 8023f74:	f000 f8f4 	bl	8024160 <ip4_addr_isbroadcast_u32>
 8023f78:	b150      	cbz	r0, 8023f90 <ip4_input+0x178>
    pbuf_free(p);
 8023f7a:	4620      	mov	r0, r4
 8023f7c:	f7f8 fb18 	bl	801c5b0 <pbuf_free>
}
 8023f80:	2000      	movs	r0, #0
 8023f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8023f86:	4601      	mov	r1, r0
 8023f88:	4620      	mov	r0, r4
 8023f8a:	f7f8 f9f9 	bl	801c380 <pbuf_realloc>
 8023f8e:	e75a      	b.n	8023e46 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023f90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8023f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023f98:	2be0      	cmp	r3, #224	; 0xe0
 8023f9a:	d0ee      	beq.n	8023f7a <ip4_input+0x162>
  if (netif == NULL) {
 8023f9c:	2d00      	cmp	r5, #0
 8023f9e:	d190      	bne.n	8023ec2 <ip4_input+0xaa>
 8023fa0:	e7eb      	b.n	8023f7a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023fa2:	6873      	ldr	r3, [r6, #4]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d0dd      	beq.n	8023f64 <ip4_input+0x14c>
 8023fa8:	4635      	mov	r5, r6
 8023faa:	e788      	b.n	8023ebe <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023fac:	4293      	cmp	r3, r2
 8023fae:	d0fb      	beq.n	8023fa8 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023fb0:	4618      	mov	r0, r3
 8023fb2:	4631      	mov	r1, r6
 8023fb4:	f000 f8d4 	bl	8024160 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023fb8:	b9e0      	cbnz	r0, 8023ff4 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023fba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023fbe:	e761      	b.n	8023e84 <ip4_input+0x6c>
        icmp_input(p, inp);
 8023fc0:	4631      	mov	r1, r6
 8023fc2:	4620      	mov	r0, r4
 8023fc4:	f7ff fe30 	bl	8023c28 <icmp_input>
        break;
 8023fc8:	e7bc      	b.n	8023f44 <ip4_input+0x12c>
        udp_input(p, inp);
 8023fca:	4631      	mov	r1, r6
 8023fcc:	4620      	mov	r0, r4
 8023fce:	f7fd f8a1 	bl	8021114 <udp_input>
        break;
 8023fd2:	e7b7      	b.n	8023f44 <ip4_input+0x12c>
        tcp_input(p, inp);
 8023fd4:	4631      	mov	r1, r6
 8023fd6:	4620      	mov	r0, r4
 8023fd8:	f7fa fefc 	bl	801edd4 <tcp_input>
        break;
 8023fdc:	e7b2      	b.n	8023f44 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8023fde:	eb07 0309 	add.w	r3, r7, r9
 8023fe2:	885b      	ldrh	r3, [r3, #2]
 8023fe4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8023fe8:	d1bf      	bne.n	8023f6a <ip4_input+0x152>
 8023fea:	4635      	mov	r5, r6
  if (netif == NULL) {
 8023fec:	2d00      	cmp	r5, #0
 8023fee:	f47f af68 	bne.w	8023ec2 <ip4_input+0xaa>
 8023ff2:	e7c2      	b.n	8023f7a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023ff4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023ff8:	4635      	mov	r5, r6
 8023ffa:	e760      	b.n	8023ebe <ip4_input+0xa6>
 8023ffc:	2002e490 	.word	0x2002e490
 8024000:	2001f300 	.word	0x2001f300

08024004 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024008:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802400a:	7b83      	ldrb	r3, [r0, #14]
{
 802400c:	b083      	sub	sp, #12
 802400e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024010:	2b01      	cmp	r3, #1
{
 8024012:	4689      	mov	r9, r1
 8024014:	4617      	mov	r7, r2
 8024016:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802401a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 802401e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024022:	d158      	bne.n	80240d6 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8024024:	2f00      	cmp	r7, #0
 8024026:	d05f      	beq.n	80240e8 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8024028:	2114      	movs	r1, #20
 802402a:	4620      	mov	r0, r4
 802402c:	f7f8 fa00 	bl	801c430 <pbuf_add_header>
 8024030:	2800      	cmp	r0, #0
 8024032:	d174      	bne.n	802411e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024034:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8024036:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024038:	2b13      	cmp	r3, #19
 802403a:	d95d      	bls.n	80240f8 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802403c:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8024040:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8024044:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8024048:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 802404a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 802404c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 802404e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8024050:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8024052:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8024056:	fa10 f383 	uxtah	r3, r0, r3
 802405a:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 802405c:	ea4f 252a 	mov.w	r5, sl, asr #8
 8024060:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8024064:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8024068:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802406a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8024138 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802406e:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024070:	8920      	ldrh	r0, [r4, #8]
 8024072:	f7f6 fa61 	bl	801a538 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8024076:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8024078:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802407a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 802407c:	71b3      	strb	r3, [r6, #6]
 802407e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8024080:	f8ba 0000 	ldrh.w	r0, [sl]
 8024084:	f7f6 fa58 	bl	801a538 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024088:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 802408c:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802408e:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8024090:	3201      	adds	r2, #1
 8024092:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8024096:	f1b9 0f00 	cmp.w	r9, #0
 802409a:	d035      	beq.n	8024108 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802409c:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80240a0:	fa13 f382 	uxtah	r3, r3, r2
 80240a4:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80240a6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80240aa:	b29a      	uxth	r2, r3
 80240ac:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 80240b0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 80240b4:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80240b6:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80240b8:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 80240bc:	b113      	cbz	r3, 80240c4 <ip4_output_if_src+0xc0>
 80240be:	8922      	ldrh	r2, [r4, #8]
 80240c0:	429a      	cmp	r2, r3
 80240c2:	d824      	bhi.n	802410e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80240c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80240c8:	463a      	mov	r2, r7
 80240ca:	4621      	mov	r1, r4
 80240cc:	4640      	mov	r0, r8
 80240ce:	4798      	blx	r3
}
 80240d0:	b003      	add	sp, #12
 80240d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80240d6:	4b13      	ldr	r3, [pc, #76]	; (8024124 <ip4_output_if_src+0x120>)
 80240d8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80240dc:	4912      	ldr	r1, [pc, #72]	; (8024128 <ip4_output_if_src+0x124>)
 80240de:	4813      	ldr	r0, [pc, #76]	; (802412c <ip4_output_if_src+0x128>)
 80240e0:	f002 fb30 	bl	8026744 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 80240e4:	2f00      	cmp	r7, #0
 80240e6:	d19f      	bne.n	8024028 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 80240e8:	8963      	ldrh	r3, [r4, #10]
 80240ea:	2b13      	cmp	r3, #19
 80240ec:	d917      	bls.n	802411e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80240ee:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80240f0:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80240f2:	691b      	ldr	r3, [r3, #16]
 80240f4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80240f6:	e7df      	b.n	80240b8 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80240f8:	4b0a      	ldr	r3, [pc, #40]	; (8024124 <ip4_output_if_src+0x120>)
 80240fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80240fe:	490c      	ldr	r1, [pc, #48]	; (8024130 <ip4_output_if_src+0x12c>)
 8024100:	480a      	ldr	r0, [pc, #40]	; (802412c <ip4_output_if_src+0x128>)
 8024102:	f002 fb1f 	bl	8026744 <iprintf>
 8024106:	e799      	b.n	802403c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024108:	4a0a      	ldr	r2, [pc, #40]	; (8024134 <ip4_output_if_src+0x130>)
 802410a:	6812      	ldr	r2, [r2, #0]
 802410c:	e7c8      	b.n	80240a0 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 802410e:	463a      	mov	r2, r7
 8024110:	4641      	mov	r1, r8
 8024112:	4620      	mov	r0, r4
 8024114:	f000 fc36 	bl	8024984 <ip4_frag>
}
 8024118:	b003      	add	sp, #12
 802411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 802411e:	f06f 0001 	mvn.w	r0, #1
 8024122:	e7d5      	b.n	80240d0 <ip4_output_if_src+0xcc>
 8024124:	08047264 	.word	0x08047264
 8024128:	08047298 	.word	0x08047298
 802412c:	0802b43c 	.word	0x0802b43c
 8024130:	080472a4 	.word	0x080472a4
 8024134:	0804731c 	.word	0x0804731c
 8024138:	2002e84a 	.word	0x2002e84a

0802413c <ip4_output_if>:
{
 802413c:	b4f0      	push	{r4, r5, r6, r7}
 802413e:	9c06      	ldr	r4, [sp, #24]
 8024140:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8024144:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024148:	b11a      	cbz	r2, 8024152 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 802414a:	b109      	cbz	r1, 8024150 <ip4_output_if+0x14>
 802414c:	680f      	ldr	r7, [r1, #0]
 802414e:	b907      	cbnz	r7, 8024152 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8024150:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024152:	9504      	str	r5, [sp, #16]
 8024154:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8024158:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802415a:	f7ff bf53 	b.w	8024004 <ip4_output_if_src>
 802415e:	bf00      	nop

08024160 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8024160:	1e43      	subs	r3, r0, #1
 8024162:	3303      	adds	r3, #3
 8024164:	d814      	bhi.n	8024190 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8024166:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 802416a:	f013 0302 	ands.w	r3, r3, #2
 802416e:	d00d      	beq.n	802418c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8024170:	684b      	ldr	r3, [r1, #4]
 8024172:	4283      	cmp	r3, r0
 8024174:	d00f      	beq.n	8024196 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8024176:	688a      	ldr	r2, [r1, #8]
 8024178:	4043      	eors	r3, r0
 802417a:	4213      	tst	r3, r2
 802417c:	d10b      	bne.n	8024196 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802417e:	43d3      	mvns	r3, r2
 8024180:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8024184:	1ac3      	subs	r3, r0, r3
 8024186:	fab3 f383 	clz	r3, r3
 802418a:	095b      	lsrs	r3, r3, #5
  }
}
 802418c:	4618      	mov	r0, r3
 802418e:	4770      	bx	lr
    return 1;
 8024190:	2301      	movs	r3, #1
}
 8024192:	4618      	mov	r0, r3
 8024194:	4770      	bx	lr
    return 0;
 8024196:	2300      	movs	r3, #0
}
 8024198:	4618      	mov	r0, r3
 802419a:	4770      	bx	lr

0802419c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 802419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80241a0:	4e4f      	ldr	r6, [pc, #316]	; (80242e0 <ip4addr_aton+0x144>)
{
 80241a2:	b085      	sub	sp, #20
  c = *cp;
 80241a4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 80241a6:	5cf2      	ldrb	r2, [r6, r3]
 80241a8:	0754      	lsls	r4, r2, #29
 80241aa:	d538      	bpl.n	802421e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 80241ac:	46e9      	mov	r9, sp
 80241ae:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80241b0:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 80241b4:	464f      	mov	r7, r9
    if (c == '0') {
 80241b6:	2b30      	cmp	r3, #48	; 0x30
 80241b8:	d035      	beq.n	8024226 <ip4addr_aton+0x8a>
    base = 10;
 80241ba:	210a      	movs	r1, #10
 80241bc:	1c42      	adds	r2, r0, #1
 80241be:	2400      	movs	r4, #0
 80241c0:	e003      	b.n	80241ca <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 80241c2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 80241c6:	7813      	ldrb	r3, [r2, #0]
 80241c8:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 80241ca:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241ce:	f103 0e0a 	add.w	lr, r3, #10
 80241d2:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 80241d6:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 80241da:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241de:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 80241e2:	d1ee      	bne.n	80241c2 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80241e4:	2910      	cmp	r1, #16
 80241e6:	d10d      	bne.n	8024204 <ip4addr_aton+0x68>
 80241e8:	f01c 0f44 	tst.w	ip, #68	; 0x44
 80241ec:	d00a      	beq.n	8024204 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241ee:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 80241f2:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241f4:	bf0c      	ite	eq
 80241f6:	2061      	moveq	r0, #97	; 0x61
 80241f8:	2041      	movne	r0, #65	; 0x41
 80241fa:	ebae 0e00 	sub.w	lr, lr, r0
 80241fe:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8024202:	e7e1      	b.n	80241c8 <ip4addr_aton+0x2c>
    if (c == '.') {
 8024204:	2b2e      	cmp	r3, #46	; 0x2e
 8024206:	d11a      	bne.n	802423e <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8024208:	4547      	cmp	r7, r8
 802420a:	d008      	beq.n	802421e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 802420c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8024210:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8024214:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8024218:	5cf2      	ldrb	r2, [r6, r3]
 802421a:	0752      	lsls	r2, r2, #29
 802421c:	d4cb      	bmi.n	80241b6 <ip4addr_aton+0x1a>
      return 0;
 802421e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8024220:	b005      	add	sp, #20
 8024222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8024226:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8024228:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 802422c:	2a58      	cmp	r2, #88	; 0x58
 802422e:	d002      	beq.n	8024236 <ip4addr_aton+0x9a>
      c = *++cp;
 8024230:	3001      	adds	r0, #1
        base = 8;
 8024232:	2108      	movs	r1, #8
 8024234:	e7c2      	b.n	80241bc <ip4addr_aton+0x20>
        c = *++cp;
 8024236:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8024238:	2110      	movs	r1, #16
        c = *++cp;
 802423a:	3002      	adds	r0, #2
 802423c:	e7be      	b.n	80241bc <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 802423e:	b113      	cbz	r3, 8024246 <ip4addr_aton+0xaa>
 8024240:	f01c 0f08 	tst.w	ip, #8
 8024244:	d0eb      	beq.n	802421e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8024246:	eba7 0009 	sub.w	r0, r7, r9
 802424a:	1080      	asrs	r0, r0, #2
 802424c:	3001      	adds	r0, #1
 802424e:	2804      	cmp	r0, #4
 8024250:	d83e      	bhi.n	80242d0 <ip4addr_aton+0x134>
 8024252:	a301      	add	r3, pc, #4	; (adr r3, 8024258 <ip4addr_aton+0xbc>)
 8024254:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8024258:	08024221 	.word	0x08024221
 802425c:	0802427d 	.word	0x0802427d
 8024260:	0802426d 	.word	0x0802426d
 8024264:	080242b1 	.word	0x080242b1
 8024268:	0802428d 	.word	0x0802428d
      if (val > 0xffffffUL) {
 802426c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8024270:	d2d5      	bcs.n	802421e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8024272:	9b00      	ldr	r3, [sp, #0]
 8024274:	2bff      	cmp	r3, #255	; 0xff
 8024276:	d8d2      	bhi.n	802421e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8024278:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 802427c:	b335      	cbz	r5, 80242cc <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802427e:	4620      	mov	r0, r4
 8024280:	f7f6 f95e 	bl	801a540 <lwip_htonl>
 8024284:	4603      	mov	r3, r0
  return 1;
 8024286:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8024288:	602b      	str	r3, [r5, #0]
 802428a:	e7c9      	b.n	8024220 <ip4addr_aton+0x84>
      if (val > 0xff) {
 802428c:	2cff      	cmp	r4, #255	; 0xff
 802428e:	d8c6      	bhi.n	802421e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8024290:	9900      	ldr	r1, [sp, #0]
 8024292:	29ff      	cmp	r1, #255	; 0xff
 8024294:	d8c3      	bhi.n	802421e <ip4addr_aton+0x82>
 8024296:	9b01      	ldr	r3, [sp, #4]
 8024298:	2bff      	cmp	r3, #255	; 0xff
 802429a:	d8c0      	bhi.n	802421e <ip4addr_aton+0x82>
 802429c:	9a02      	ldr	r2, [sp, #8]
 802429e:	2aff      	cmp	r2, #255	; 0xff
 80242a0:	d8bd      	bhi.n	802421e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80242a2:	041b      	lsls	r3, r3, #16
 80242a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80242a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80242ac:	431c      	orrs	r4, r3
      break;
 80242ae:	e7e5      	b.n	802427c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 80242b0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80242b4:	d2b3      	bcs.n	802421e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80242b6:	9a00      	ldr	r2, [sp, #0]
 80242b8:	2aff      	cmp	r2, #255	; 0xff
 80242ba:	d8b0      	bhi.n	802421e <ip4addr_aton+0x82>
 80242bc:	9b01      	ldr	r3, [sp, #4]
 80242be:	2bff      	cmp	r3, #255	; 0xff
 80242c0:	d8ad      	bhi.n	802421e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 80242c2:	041b      	lsls	r3, r3, #16
 80242c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80242c8:	431c      	orrs	r4, r3
      break;
 80242ca:	e7d7      	b.n	802427c <ip4addr_aton+0xe0>
  return 1;
 80242cc:	2001      	movs	r0, #1
 80242ce:	e7a7      	b.n	8024220 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 80242d0:	4b04      	ldr	r3, [pc, #16]	; (80242e4 <ip4addr_aton+0x148>)
 80242d2:	22f9      	movs	r2, #249	; 0xf9
 80242d4:	4904      	ldr	r1, [pc, #16]	; (80242e8 <ip4addr_aton+0x14c>)
 80242d6:	4805      	ldr	r0, [pc, #20]	; (80242ec <ip4addr_aton+0x150>)
 80242d8:	f002 fa34 	bl	8026744 <iprintf>
      break;
 80242dc:	e7ce      	b.n	802427c <ip4addr_aton+0xe0>
 80242de:	bf00      	nop
 80242e0:	08047579 	.word	0x08047579
 80242e4:	080472d4 	.word	0x080472d4
 80242e8:	08047310 	.word	0x08047310
 80242ec:	0802b43c 	.word	0x0802b43c

080242f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80242f0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80242f2:	4604      	mov	r4, r0
 80242f4:	b148      	cbz	r0, 802430a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80242f6:	6960      	ldr	r0, [r4, #20]
 80242f8:	b108      	cbz	r0, 80242fe <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80242fa:	f7f8 f959 	bl	801c5b0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80242fe:	4621      	mov	r1, r4
 8024300:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8024302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8024306:	f7f7 bc3b 	b.w	801bb80 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802430a:	4b04      	ldr	r3, [pc, #16]	; (802431c <ipfrag_free_pbuf_custom+0x2c>)
 802430c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8024310:	4903      	ldr	r1, [pc, #12]	; (8024320 <ipfrag_free_pbuf_custom+0x30>)
 8024312:	4804      	ldr	r0, [pc, #16]	; (8024324 <ipfrag_free_pbuf_custom+0x34>)
 8024314:	f002 fa16 	bl	8026744 <iprintf>
 8024318:	e7ed      	b.n	80242f6 <ipfrag_free_pbuf_custom+0x6>
 802431a:	bf00      	nop
 802431c:	08047324 	.word	0x08047324
 8024320:	08047360 	.word	0x08047360
 8024324:	0802b43c 	.word	0x0802b43c

08024328 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024328:	4281      	cmp	r1, r0
{
 802432a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802432e:	4606      	mov	r6, r0
 8024330:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024332:	d075      	beq.n	8024420 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8024334:	b147      	cbz	r7, 8024348 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024336:	683b      	ldr	r3, [r7, #0]
 8024338:	42b3      	cmp	r3, r6
 802433a:	d005      	beq.n	8024348 <ip_reass_free_complete_datagram+0x20>
 802433c:	4b40      	ldr	r3, [pc, #256]	; (8024440 <ip_reass_free_complete_datagram+0x118>)
 802433e:	22ad      	movs	r2, #173	; 0xad
 8024340:	4940      	ldr	r1, [pc, #256]	; (8024444 <ip_reass_free_complete_datagram+0x11c>)
 8024342:	4841      	ldr	r0, [pc, #260]	; (8024448 <ip_reass_free_complete_datagram+0x120>)
 8024344:	f002 f9fe 	bl	8026744 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024348:	6875      	ldr	r5, [r6, #4]
 802434a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 802434c:	889a      	ldrh	r2, [r3, #4]
 802434e:	2a00      	cmp	r2, #0
 8024350:	d047      	beq.n	80243e2 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8024352:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024356:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8024440 <ip_reass_free_complete_datagram+0x118>
 802435a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8024460 <ip_reass_free_complete_datagram+0x138>
 802435e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8024448 <ip_reass_free_complete_datagram+0x120>
 8024362:	e005      	b.n	8024370 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8024364:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8024366:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8024368:	f7f8 f922 	bl	801c5b0 <pbuf_free>
  while (p != NULL) {
 802436c:	b1b4      	cbz	r4, 802439c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 802436e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8024370:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8024372:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8024374:	f7f8 f930 	bl	801c5d8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024378:	4458      	add	r0, fp
 802437a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802437e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024382:	dbef      	blt.n	8024364 <ip_reass_free_complete_datagram+0x3c>
 8024384:	4653      	mov	r3, sl
 8024386:	22cc      	movs	r2, #204	; 0xcc
 8024388:	4649      	mov	r1, r9
 802438a:	4640      	mov	r0, r8
 802438c:	f002 f9da 	bl	8026744 <iprintf>
    pbuf_free(pcur);
 8024390:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8024392:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8024394:	f7f8 f90c 	bl	801c5b0 <pbuf_free>
  while (p != NULL) {
 8024398:	2c00      	cmp	r4, #0
 802439a:	d1e8      	bne.n	802436e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 802439c:	4b2b      	ldr	r3, [pc, #172]	; (802444c <ip_reass_free_complete_datagram+0x124>)
 802439e:	681a      	ldr	r2, [r3, #0]
 80243a0:	4296      	cmp	r6, r2
 80243a2:	d03a      	beq.n	802441a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80243a4:	2f00      	cmp	r7, #0
 80243a6:	d042      	beq.n	802442e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 80243a8:	6833      	ldr	r3, [r6, #0]
 80243aa:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243ac:	4c28      	ldr	r4, [pc, #160]	; (8024450 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 80243ae:	4631      	mov	r1, r6
 80243b0:	2005      	movs	r0, #5
 80243b2:	f7f7 fbe5 	bl	801bb80 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243b6:	8823      	ldrh	r3, [r4, #0]
 80243b8:	455b      	cmp	r3, fp
 80243ba:	d305      	bcc.n	80243c8 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243bc:	eba3 030b 	sub.w	r3, r3, fp
}
 80243c0:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243c2:	8023      	strh	r3, [r4, #0]
}
 80243c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243c8:	4b1d      	ldr	r3, [pc, #116]	; (8024440 <ip_reass_free_complete_datagram+0x118>)
 80243ca:	22d2      	movs	r2, #210	; 0xd2
 80243cc:	4921      	ldr	r1, [pc, #132]	; (8024454 <ip_reass_free_complete_datagram+0x12c>)
 80243ce:	481e      	ldr	r0, [pc, #120]	; (8024448 <ip_reass_free_complete_datagram+0x120>)
 80243d0:	f002 f9b8 	bl	8026744 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243d4:	8823      	ldrh	r3, [r4, #0]
}
 80243d6:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243d8:	eba3 030b 	sub.w	r3, r3, fp
 80243dc:	8023      	strh	r3, [r4, #0]
}
 80243de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80243e2:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243e4:	6930      	ldr	r0, [r6, #16]
 80243e6:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80243e8:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243ea:	68f4      	ldr	r4, [r6, #12]
 80243ec:	68b2      	ldr	r2, [r6, #8]
 80243ee:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80243f0:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243f2:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80243f4:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243f6:	601a      	str	r2, [r3, #0]
 80243f8:	605c      	str	r4, [r3, #4]
 80243fa:	69b2      	ldr	r2, [r6, #24]
 80243fc:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80243fe:	f7ff fccf 	bl	8023da0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024402:	4628      	mov	r0, r5
 8024404:	f7f8 f8e8 	bl	801c5d8 <pbuf_clen>
 8024408:	4683      	mov	fp, r0
    pbuf_free(p);
 802440a:	4628      	mov	r0, r5
 802440c:	f7f8 f8d0 	bl	801c5b0 <pbuf_free>
  p = ipr->p;
 8024410:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8024412:	2d00      	cmp	r5, #0
 8024414:	d0c2      	beq.n	802439c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8024416:	686b      	ldr	r3, [r5, #4]
 8024418:	e79d      	b.n	8024356 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 802441a:	6832      	ldr	r2, [r6, #0]
 802441c:	601a      	str	r2, [r3, #0]
 802441e:	e7c5      	b.n	80243ac <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024420:	4b07      	ldr	r3, [pc, #28]	; (8024440 <ip_reass_free_complete_datagram+0x118>)
 8024422:	22ab      	movs	r2, #171	; 0xab
 8024424:	490c      	ldr	r1, [pc, #48]	; (8024458 <ip_reass_free_complete_datagram+0x130>)
 8024426:	4808      	ldr	r0, [pc, #32]	; (8024448 <ip_reass_free_complete_datagram+0x120>)
 8024428:	f002 f98c 	bl	8026744 <iprintf>
 802442c:	e782      	b.n	8024334 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802442e:	4b04      	ldr	r3, [pc, #16]	; (8024440 <ip_reass_free_complete_datagram+0x118>)
 8024430:	f240 1245 	movw	r2, #325	; 0x145
 8024434:	4909      	ldr	r1, [pc, #36]	; (802445c <ip_reass_free_complete_datagram+0x134>)
 8024436:	4804      	ldr	r0, [pc, #16]	; (8024448 <ip_reass_free_complete_datagram+0x120>)
 8024438:	f002 f984 	bl	8026744 <iprintf>
 802443c:	e7b4      	b.n	80243a8 <ip_reass_free_complete_datagram+0x80>
 802443e:	bf00      	nop
 8024440:	08047324 	.word	0x08047324
 8024444:	08047378 	.word	0x08047378
 8024448:	0802b43c 	.word	0x0802b43c
 802444c:	2002e850 	.word	0x2002e850
 8024450:	2002e84c 	.word	0x2002e84c
 8024454:	080473c8 	.word	0x080473c8
 8024458:	0804736c 	.word	0x0804736c
 802445c:	080473ac 	.word	0x080473ac
 8024460:	0804738c 	.word	0x0804738c

08024464 <ip_reass_remove_oldest_datagram>:
{
 8024464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8024468:	2700      	movs	r7, #0
 802446a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80244d4 <ip_reass_remove_oldest_datagram+0x70>
{
 802446e:	4605      	mov	r5, r0
 8024470:	460e      	mov	r6, r1
    r = reassdatagrams;
 8024472:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8024476:	b1f3      	cbz	r3, 80244b6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8024478:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802447a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802447e:	4621      	mov	r1, r4
    prev = NULL;
 8024480:	46a4      	mov	ip, r4
    oldest = NULL;
 8024482:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024484:	695a      	ldr	r2, [r3, #20]
 8024486:	4572      	cmp	r2, lr
 8024488:	d018      	beq.n	80244bc <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 802448a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 802448c:	b120      	cbz	r0, 8024498 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802448e:	f893 901f 	ldrb.w	r9, [r3, #31]
 8024492:	7fc2      	ldrb	r2, [r0, #31]
 8024494:	4591      	cmp	r9, r2
 8024496:	d801      	bhi.n	802449c <ip_reass_remove_oldest_datagram+0x38>
 8024498:	4661      	mov	r1, ip
 802449a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 802449c:	681a      	ldr	r2, [r3, #0]
 802449e:	469c      	mov	ip, r3
 80244a0:	4613      	mov	r3, r2
 80244a2:	2a00      	cmp	r2, #0
 80244a4:	d1ee      	bne.n	8024484 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80244a6:	b110      	cbz	r0, 80244ae <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80244a8:	f7ff ff3e 	bl	8024328 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80244ac:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80244ae:	42b7      	cmp	r7, r6
 80244b0:	da01      	bge.n	80244b6 <ip_reass_remove_oldest_datagram+0x52>
 80244b2:	2c01      	cmp	r4, #1
 80244b4:	dcdd      	bgt.n	8024472 <ip_reass_remove_oldest_datagram+0xe>
}
 80244b6:	4638      	mov	r0, r7
 80244b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80244bc:	699a      	ldr	r2, [r3, #24]
 80244be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80244c2:	454a      	cmp	r2, r9
 80244c4:	d1e1      	bne.n	802448a <ip_reass_remove_oldest_datagram+0x26>
 80244c6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80244ca:	88aa      	ldrh	r2, [r5, #4]
 80244cc:	4591      	cmp	r9, r2
 80244ce:	d1dc      	bne.n	802448a <ip_reass_remove_oldest_datagram+0x26>
 80244d0:	e7e4      	b.n	802449c <ip_reass_remove_oldest_datagram+0x38>
 80244d2:	bf00      	nop
 80244d4:	2002e850 	.word	0x2002e850

080244d8 <ip_reass_tmr>:
{
 80244d8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80244da:	4b0a      	ldr	r3, [pc, #40]	; (8024504 <ip_reass_tmr+0x2c>)
 80244dc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80244de:	b140      	cbz	r0, 80244f2 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80244e0:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80244e2:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80244e4:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80244e6:	b12b      	cbz	r3, 80244f4 <ip_reass_tmr+0x1c>
 80244e8:	4604      	mov	r4, r0
      r->timer--;
 80244ea:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80244ec:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80244ee:	2800      	cmp	r0, #0
 80244f0:	d1f7      	bne.n	80244e2 <ip_reass_tmr+0xa>
}
 80244f2:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80244f4:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80244f6:	4621      	mov	r1, r4
 80244f8:	f7ff ff16 	bl	8024328 <ip_reass_free_complete_datagram>
      r = r->next;
 80244fc:	4628      	mov	r0, r5
  while (r != NULL) {
 80244fe:	2800      	cmp	r0, #0
 8024500:	d1ef      	bne.n	80244e2 <ip_reass_tmr+0xa>
 8024502:	e7f6      	b.n	80244f2 <ip_reass_tmr+0x1a>
 8024504:	2002e850 	.word	0x2002e850

08024508 <ip4_reass>:
{
 8024508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802450c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8024510:	b085      	sub	sp, #20
 8024512:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024514:	f89a 3000 	ldrb.w	r3, [sl]
 8024518:	f003 030f 	and.w	r3, r3, #15
 802451c:	2b05      	cmp	r3, #5
 802451e:	f040 8089 	bne.w	8024634 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024522:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8024526:	f7f6 f807 	bl	801a538 <lwip_htons>
 802452a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802452c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8024530:	f7f6 f802 	bl	801a538 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8024534:	f89a 2000 	ldrb.w	r2, [sl]
 8024538:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 802453c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8024540:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8024544:	d376      	bcc.n	8024634 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8024546:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024548:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8024840 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 802454c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 802454e:	b29b      	uxth	r3, r3
 8024550:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8024552:	f7f8 f841 	bl	801c5d8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024556:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 802455a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802455c:	4403      	add	r3, r0
 802455e:	2b14      	cmp	r3, #20
 8024560:	f300 80e5 	bgt.w	802472e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024564:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8024844 <ip4_reass+0x33c>
 8024568:	f8d9 4000 	ldr.w	r4, [r9]
 802456c:	2c00      	cmp	r4, #0
 802456e:	f000 80ec 	beq.w	802474a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024572:	f8da 200c 	ldr.w	r2, [sl, #12]
 8024576:	e003      	b.n	8024580 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024578:	6824      	ldr	r4, [r4, #0]
 802457a:	2c00      	cmp	r4, #0
 802457c:	f000 80e5 	beq.w	802474a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024580:	6963      	ldr	r3, [r4, #20]
 8024582:	4293      	cmp	r3, r2
 8024584:	d1f8      	bne.n	8024578 <ip4_reass+0x70>
 8024586:	f8da 3010 	ldr.w	r3, [sl, #16]
 802458a:	69a1      	ldr	r1, [r4, #24]
 802458c:	4299      	cmp	r1, r3
 802458e:	d1f3      	bne.n	8024578 <ip4_reass+0x70>
 8024590:	89a1      	ldrh	r1, [r4, #12]
 8024592:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8024596:	4299      	cmp	r1, r3
 8024598:	d1ee      	bne.n	8024578 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802459a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 802459e:	f7f5 ffcb 	bl	801a538 <lwip_htons>
 80245a2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80245a6:	2800      	cmp	r0, #0
 80245a8:	f000 80a9 	beq.w	80246fe <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80245ac:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245b0:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80245b4:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245b8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80245bc:	9301      	str	r3, [sp, #4]
 80245be:	d108      	bne.n	80245d2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80245c0:	9b00      	ldr	r3, [sp, #0]
 80245c2:	18f3      	adds	r3, r6, r3
 80245c4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80245c6:	429e      	cmp	r6, r3
 80245c8:	d812      	bhi.n	80245f0 <ip4_reass+0xe8>
 80245ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80245ce:	4293      	cmp	r3, r2
 80245d0:	d80e      	bhi.n	80245f0 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80245d2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80245d6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80245da:	f7f5 ffad 	bl	801a538 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80245de:	f89a 2000 	ldrb.w	r2, [sl]
 80245e2:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80245e6:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80245ea:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80245ee:	d229      	bcs.n	8024644 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 80245f0:	6866      	ldr	r6, [r4, #4]
 80245f2:	b9fe      	cbnz	r6, 8024634 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80245f4:	f8d9 3000 	ldr.w	r3, [r9]
 80245f8:	42a3      	cmp	r3, r4
 80245fa:	d014      	beq.n	8024626 <ip4_reass+0x11e>
 80245fc:	4b8c      	ldr	r3, [pc, #560]	; (8024830 <ip4_reass+0x328>)
 80245fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024602:	498c      	ldr	r1, [pc, #560]	; (8024834 <ip4_reass+0x32c>)
 8024604:	488c      	ldr	r0, [pc, #560]	; (8024838 <ip4_reass+0x330>)
 8024606:	f002 f89d 	bl	8026744 <iprintf>
  if (reassdatagrams == ipr) {
 802460a:	f8d9 3000 	ldr.w	r3, [r9]
 802460e:	429c      	cmp	r4, r3
 8024610:	d009      	beq.n	8024626 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024612:	4b87      	ldr	r3, [pc, #540]	; (8024830 <ip4_reass+0x328>)
 8024614:	f240 1245 	movw	r2, #325	; 0x145
 8024618:	4988      	ldr	r1, [pc, #544]	; (802483c <ip4_reass+0x334>)
 802461a:	4887      	ldr	r0, [pc, #540]	; (8024838 <ip4_reass+0x330>)
 802461c:	f002 f892 	bl	8026744 <iprintf>
    prev->next = ipr->next;
 8024620:	6823      	ldr	r3, [r4, #0]
 8024622:	6033      	str	r3, [r6, #0]
 8024624:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8024626:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8024628:	4621      	mov	r1, r4
 802462a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802462c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8024630:	f7f7 faa6 	bl	801bb80 <memp_free>
  pbuf_free(p);
 8024634:	4628      	mov	r0, r5
  return NULL;
 8024636:	2600      	movs	r6, #0
  pbuf_free(p);
 8024638:	f7f7 ffba 	bl	801c5b0 <pbuf_free>
}
 802463c:	4630      	mov	r0, r6
 802463e:	b005      	add	sp, #20
 8024640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8024644:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024646:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802464a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 802464e:	f7f5 ff73 	bl	801a538 <lwip_htons>
 8024652:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8024656:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802465a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 802465c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8024660:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8024664:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8024668:	f8ab 3006 	strh.w	r3, [fp, #6]
 802466c:	b29b      	uxth	r3, r3
 802466e:	4619      	mov	r1, r3
 8024670:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8024672:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8024674:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8024676:	f88b 3000 	strb.w	r3, [fp]
 802467a:	f88b 3001 	strb.w	r3, [fp, #1]
 802467e:	f88b 3002 	strb.w	r3, [fp, #2]
 8024682:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8024686:	d8b3      	bhi.n	80245f0 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8024688:	6861      	ldr	r1, [r4, #4]
 802468a:	2900      	cmp	r1, #0
 802468c:	f000 80c4 	beq.w	8024818 <ip4_reass+0x310>
  int valid = 1;
 8024690:	f04f 0a01 	mov.w	sl, #1
 8024694:	4694      	mov	ip, r2
 8024696:	e00e      	b.n	80246b6 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8024698:	d0cc      	beq.n	8024634 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 802469a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 802469e:	45f4      	cmp	ip, lr
 80246a0:	d3c8      	bcc.n	8024634 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80246a2:	b122      	cbz	r2, 80246ae <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 80246a4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80246a6:	4282      	cmp	r2, r0
 80246a8:	bf18      	it	ne
 80246aa:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80246ae:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 80246b0:	2900      	cmp	r1, #0
 80246b2:	f000 808a 	beq.w	80247ca <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80246b6:	461a      	mov	r2, r3
 80246b8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80246ba:	8898      	ldrh	r0, [r3, #4]
 80246bc:	4584      	cmp	ip, r0
 80246be:	d2eb      	bcs.n	8024698 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 80246c0:	4613      	mov	r3, r2
 80246c2:	f8cb 1000 	str.w	r1, [fp]
 80246c6:	4662      	mov	r2, ip
 80246c8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	d066      	beq.n	802479c <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80246ce:	88db      	ldrh	r3, [r3, #6]
 80246d0:	429a      	cmp	r2, r3
 80246d2:	d3af      	bcc.n	8024634 <ip4_reass+0x12c>
 80246d4:	9903      	ldr	r1, [sp, #12]
 80246d6:	4281      	cmp	r1, r0
 80246d8:	d8ac      	bhi.n	8024634 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80246da:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80246dc:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80246e0:	d061      	beq.n	80247a6 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80246e2:	9b01      	ldr	r3, [sp, #4]
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	f000 808a 	beq.w	80247fe <ip4_reass+0x2f6>
 80246ea:	7fa3      	ldrb	r3, [r4, #30]
 80246ec:	07db      	lsls	r3, r3, #31
 80246ee:	d462      	bmi.n	80247b6 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80246f0:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 80246f4:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80246f6:	441f      	add	r7, r3
 80246f8:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80246fc:	e79e      	b.n	802463c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80246fe:	89e0      	ldrh	r0, [r4, #14]
 8024700:	f7f5 ff1a 	bl	801a538 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024704:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8024708:	2800      	cmp	r0, #0
 802470a:	f43f af4f 	beq.w	80245ac <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802470e:	f8da 3000 	ldr.w	r3, [sl]
 8024712:	f8da 0004 	ldr.w	r0, [sl, #4]
 8024716:	f8da 1008 	ldr.w	r1, [sl, #8]
 802471a:	f8da 200c 	ldr.w	r2, [sl, #12]
 802471e:	60a3      	str	r3, [r4, #8]
 8024720:	60e0      	str	r0, [r4, #12]
 8024722:	6121      	str	r1, [r4, #16]
 8024724:	6162      	str	r2, [r4, #20]
 8024726:	f8da 3010 	ldr.w	r3, [sl, #16]
 802472a:	61a3      	str	r3, [r4, #24]
 802472c:	e73e      	b.n	80245ac <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802472e:	4601      	mov	r1, r0
 8024730:	4650      	mov	r0, sl
 8024732:	f7ff fe97 	bl	8024464 <ip_reass_remove_oldest_datagram>
 8024736:	2800      	cmp	r0, #0
 8024738:	f43f af7c 	beq.w	8024634 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802473c:	f8b8 3000 	ldrh.w	r3, [r8]
 8024740:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024742:	2b14      	cmp	r3, #20
 8024744:	f77f af0e 	ble.w	8024564 <ip4_reass+0x5c>
 8024748:	e774      	b.n	8024634 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802474a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 802474e:	4938      	ldr	r1, [pc, #224]	; (8024830 <ip4_reass+0x328>)
 8024750:	2005      	movs	r0, #5
 8024752:	f7f7 f9df 	bl	801bb14 <memp_malloc_fn>
  if (ipr == NULL) {
 8024756:	4604      	mov	r4, r0
 8024758:	b178      	cbz	r0, 802477a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802475a:	2300      	movs	r3, #0
 802475c:	61e3      	str	r3, [r4, #28]
 802475e:	60a3      	str	r3, [r4, #8]
 8024760:	60e3      	str	r3, [r4, #12]
 8024762:	6123      	str	r3, [r4, #16]
 8024764:	6163      	str	r3, [r4, #20]
 8024766:	61a3      	str	r3, [r4, #24]
 8024768:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 802476a:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 802476e:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8024772:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8024774:	230f      	movs	r3, #15
 8024776:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024778:	e7c9      	b.n	802470e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802477a:	4639      	mov	r1, r7
 802477c:	4650      	mov	r0, sl
 802477e:	f7ff fe71 	bl	8024464 <ip_reass_remove_oldest_datagram>
 8024782:	4287      	cmp	r7, r0
 8024784:	f73f af56 	bgt.w	8024634 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024788:	f44f 7291 	mov.w	r2, #290	; 0x122
 802478c:	4928      	ldr	r1, [pc, #160]	; (8024830 <ip4_reass+0x328>)
 802478e:	2005      	movs	r0, #5
 8024790:	f7f7 f9c0 	bl	801bb14 <memp_malloc_fn>
    if (ipr == NULL)
 8024794:	4604      	mov	r4, r0
 8024796:	2800      	cmp	r0, #0
 8024798:	d1df      	bne.n	802475a <ip4_reass+0x252>
 802479a:	e74b      	b.n	8024634 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 802479c:	9b03      	ldr	r3, [sp, #12]
 802479e:	4283      	cmp	r3, r0
 80247a0:	f63f af48 	bhi.w	8024634 <ip4_reass+0x12c>
        ipr->p = new_p;
 80247a4:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80247a6:	9b01      	ldr	r3, [sp, #4]
 80247a8:	b19b      	cbz	r3, 80247d2 <ip4_reass+0x2ca>
 80247aa:	7fa3      	ldrb	r3, [r4, #30]
 80247ac:	07d9      	lsls	r1, r3, #31
 80247ae:	d59f      	bpl.n	80246f0 <ip4_reass+0x1e8>
    if (valid) {
 80247b0:	f1ba 0f00 	cmp.w	sl, #0
 80247b4:	d138      	bne.n	8024828 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247b6:	f8b8 3000 	ldrh.w	r3, [r8]
 80247ba:	441f      	add	r7, r3
 80247bc:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 80247c0:	2600      	movs	r6, #0
}
 80247c2:	4630      	mov	r0, r6
 80247c4:	b005      	add	sp, #20
 80247c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80247ca:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80247cc:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80247ce:	d188      	bne.n	80246e2 <ip4_reass+0x1da>
 80247d0:	e7e9      	b.n	80247a6 <ip4_reass+0x29e>
    if (valid) {
 80247d2:	f1ba 0f00 	cmp.w	sl, #0
 80247d6:	d012      	beq.n	80247fe <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80247d8:	6863      	ldr	r3, [r4, #4]
 80247da:	b183      	cbz	r3, 80247fe <ip4_reass+0x2f6>
 80247dc:	6859      	ldr	r1, [r3, #4]
 80247de:	888b      	ldrh	r3, [r1, #4]
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	d031      	beq.n	8024848 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247e4:	f8b8 3000 	ldrh.w	r3, [r8]
 80247e8:	441f      	add	r7, r3
  if (is_last) {
 80247ea:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247ec:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	d1e5      	bne.n	80247c0 <ip4_reass+0x2b8>
 80247f4:	e008      	b.n	8024808 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80247f6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80247fa:	4659      	mov	r1, fp
 80247fc:	b323      	cbz	r3, 8024848 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247fe:	f8b8 3000 	ldrh.w	r3, [r8]
 8024802:	441f      	add	r7, r3
 8024804:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024808:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802480a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802480c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8024810:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024812:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8024814:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8024816:	e7d3      	b.n	80247c0 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024818:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 802481a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802481c:	2b00      	cmp	r3, #0
 802481e:	d0ea      	beq.n	80247f6 <ip4_reass+0x2ee>
 8024820:	7fa3      	ldrb	r3, [r4, #30]
 8024822:	07da      	lsls	r2, r3, #31
 8024824:	f57f af64 	bpl.w	80246f0 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024828:	6863      	ldr	r3, [r4, #4]
 802482a:	2b00      	cmp	r3, #0
 802482c:	d0c3      	beq.n	80247b6 <ip4_reass+0x2ae>
 802482e:	e7d5      	b.n	80247dc <ip4_reass+0x2d4>
 8024830:	08047324 	.word	0x08047324
 8024834:	0804743c 	.word	0x0804743c
 8024838:	0802b43c 	.word	0x0802b43c
 802483c:	080473ac 	.word	0x080473ac
 8024840:	2002e84c 	.word	0x2002e84c
 8024844:	2002e850 	.word	0x2002e850
        q = iprh->next_pbuf;
 8024848:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 802484c:	b153      	cbz	r3, 8024864 <ip4_reass+0x35c>
 802484e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8024850:	4610      	mov	r0, r2
 8024852:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8024854:	88c0      	ldrh	r0, [r0, #6]
 8024856:	8893      	ldrh	r3, [r2, #4]
 8024858:	4298      	cmp	r0, r3
 802485a:	d1c3      	bne.n	80247e4 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 802485c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 802485e:	2b00      	cmp	r3, #0
 8024860:	d1f6      	bne.n	8024850 <ip4_reass+0x348>
 8024862:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8024864:	9b02      	ldr	r3, [sp, #8]
 8024866:	428b      	cmp	r3, r1
 8024868:	d110      	bne.n	802488c <ip4_reass+0x384>
 802486a:	4b40      	ldr	r3, [pc, #256]	; (802496c <ip4_reass+0x464>)
 802486c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8024870:	493f      	ldr	r1, [pc, #252]	; (8024970 <ip4_reass+0x468>)
 8024872:	4840      	ldr	r0, [pc, #256]	; (8024974 <ip4_reass+0x46c>)
 8024874:	f001 ff66 	bl	8026744 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024878:	9b02      	ldr	r3, [sp, #8]
 802487a:	681b      	ldr	r3, [r3, #0]
 802487c:	b133      	cbz	r3, 802488c <ip4_reass+0x384>
 802487e:	4b3b      	ldr	r3, [pc, #236]	; (802496c <ip4_reass+0x464>)
 8024880:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024884:	493c      	ldr	r1, [pc, #240]	; (8024978 <ip4_reass+0x470>)
 8024886:	483b      	ldr	r0, [pc, #236]	; (8024974 <ip4_reass+0x46c>)
 8024888:	f001 ff5c 	bl	8026744 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802488c:	f8b8 3000 	ldrh.w	r3, [r8]
 8024890:	441f      	add	r7, r3
  if (is_last) {
 8024892:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024894:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8024898:	2b00      	cmp	r3, #0
 802489a:	d15b      	bne.n	8024954 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 802489c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802489e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80248a0:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80248a2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80248a6:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80248a8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80248aa:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248ac:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80248ae:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248b0:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248b2:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248b4:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248b6:	68a3      	ldr	r3, [r4, #8]
 80248b8:	6921      	ldr	r1, [r4, #16]
 80248ba:	6962      	ldr	r2, [r4, #20]
 80248bc:	6075      	str	r5, [r6, #4]
 80248be:	60b1      	str	r1, [r6, #8]
 80248c0:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248c2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248c4:	6033      	str	r3, [r6, #0]
 80248c6:	69a3      	ldr	r3, [r4, #24]
 80248c8:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248ca:	f7f5 fe35 	bl	801a538 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80248ce:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248d0:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80248d2:	2114      	movs	r1, #20
 80248d4:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 80248d6:	71b3      	strb	r3, [r6, #6]
 80248d8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80248da:	72b3      	strb	r3, [r6, #10]
 80248dc:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80248de:	f7f6 fbd3 	bl	801b088 <inet_chksum>
 80248e2:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 80248e4:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80248e6:	b15d      	cbz	r5, 8024900 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 80248e8:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80248ea:	4628      	mov	r0, r5
 80248ec:	2114      	movs	r1, #20
 80248ee:	f7f7 fdd3 	bl	801c498 <pbuf_remove_header>
      pbuf_cat(p, r);
 80248f2:	4629      	mov	r1, r5
 80248f4:	4630      	mov	r0, r6
 80248f6:	f7f7 fe8d 	bl	801c614 <pbuf_cat>
      r = iprh->next_pbuf;
 80248fa:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80248fc:	2d00      	cmp	r5, #0
 80248fe:	d1f3      	bne.n	80248e8 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8024900:	f8d9 5000 	ldr.w	r5, [r9]
 8024904:	42a5      	cmp	r5, r4
 8024906:	d005      	beq.n	8024914 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024908:	b335      	cbz	r5, 8024958 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802490a:	682b      	ldr	r3, [r5, #0]
 802490c:	42a3      	cmp	r3, r4
 802490e:	d014      	beq.n	802493a <ip4_reass+0x432>
 8024910:	461d      	mov	r5, r3
 8024912:	e7f9      	b.n	8024908 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8024914:	6823      	ldr	r3, [r4, #0]
 8024916:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802491a:	4621      	mov	r1, r4
 802491c:	2005      	movs	r0, #5
 802491e:	f7f7 f92f 	bl	801bb80 <memp_free>
    clen = pbuf_clen(p);
 8024922:	4630      	mov	r0, r6
 8024924:	f7f7 fe58 	bl	801c5d8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024928:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802492c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802492e:	4283      	cmp	r3, r0
 8024930:	d306      	bcc.n	8024940 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024932:	1b1b      	subs	r3, r3, r4
 8024934:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8024938:	e680      	b.n	802463c <ip4_reass+0x134>
    prev->next = ipr->next;
 802493a:	6823      	ldr	r3, [r4, #0]
 802493c:	602b      	str	r3, [r5, #0]
 802493e:	e7ec      	b.n	802491a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024940:	4b0a      	ldr	r3, [pc, #40]	; (802496c <ip4_reass+0x464>)
 8024942:	f240 229b 	movw	r2, #667	; 0x29b
 8024946:	490d      	ldr	r1, [pc, #52]	; (802497c <ip4_reass+0x474>)
 8024948:	480a      	ldr	r0, [pc, #40]	; (8024974 <ip4_reass+0x46c>)
 802494a:	f001 fefb 	bl	8026744 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802494e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024952:	e7ee      	b.n	8024932 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024954:	8ba0      	ldrh	r0, [r4, #28]
 8024956:	e7a9      	b.n	80248ac <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024958:	4b04      	ldr	r3, [pc, #16]	; (802496c <ip4_reass+0x464>)
 802495a:	f240 1245 	movw	r2, #325	; 0x145
 802495e:	4908      	ldr	r1, [pc, #32]	; (8024980 <ip4_reass+0x478>)
 8024960:	4804      	ldr	r0, [pc, #16]	; (8024974 <ip4_reass+0x46c>)
 8024962:	f001 feef 	bl	8026744 <iprintf>
    prev->next = ipr->next;
 8024966:	6823      	ldr	r3, [r4, #0]
 8024968:	602b      	str	r3, [r5, #0]
 802496a:	deff      	udf	#255	; 0xff
 802496c:	08047324 	.word	0x08047324
 8024970:	080473ec 	.word	0x080473ec
 8024974:	0802b43c 	.word	0x0802b43c
 8024978:	080473fc 	.word	0x080473fc
 802497c:	08047420 	.word	0x08047420
 8024980:	080473ac 	.word	0x080473ac

08024984 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024988:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 802498a:	b08f      	sub	sp, #60	; 0x3c
 802498c:	4605      	mov	r5, r0
 802498e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024990:	f1b3 0214 	subs.w	r2, r3, #20
{
 8024994:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024996:	bf48      	it	mi
 8024998:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802499c:	6843      	ldr	r3, [r0, #4]
 802499e:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249a0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80249a4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249a6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80249a8:	f003 030f 	and.w	r3, r3, #15
 80249ac:	2b05      	cmp	r3, #5
 80249ae:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80249b2:	f040 80ea 	bne.w	8024b8a <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80249b6:	8943      	ldrh	r3, [r0, #10]
 80249b8:	2b13      	cmp	r3, #19
 80249ba:	f240 80e9 	bls.w	8024b90 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80249be:	9b04      	ldr	r3, [sp, #16]
 80249c0:	88d8      	ldrh	r0, [r3, #6]
 80249c2:	f7f5 fdb9 	bl	801a538 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80249c6:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80249c8:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80249cc:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80249ce:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80249d0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80249d4:	b29b      	uxth	r3, r3
 80249d6:	920d      	str	r2, [sp, #52]	; 0x34
 80249d8:	9305      	str	r3, [sp, #20]

  while (left) {
 80249da:	2b00      	cmp	r3, #0
 80249dc:	f000 809d 	beq.w	8024b1a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249e0:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80249e2:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249e4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024bb0 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249e8:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249ea:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8024bb8 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249ee:	b29b      	uxth	r3, r3
 80249f0:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80249f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80249f6:	2114      	movs	r1, #20
 80249f8:	200e      	movs	r0, #14
 80249fa:	f7f7 fc07 	bl	801c20c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a00:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8024a02:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024a04:	4293      	cmp	r3, r2
 8024a06:	bf28      	it	cs
 8024a08:	4613      	movcs	r3, r2
 8024a0a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8024a0c:	2800      	cmp	r0, #0
 8024a0e:	f000 80b9 	beq.w	8024b84 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024a12:	8943      	ldrh	r3, [r0, #10]
 8024a14:	2b13      	cmp	r3, #19
 8024a16:	f240 8091 	bls.w	8024b3c <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8024a1a:	9904      	ldr	r1, [sp, #16]
 8024a1c:	9b03      	ldr	r3, [sp, #12]
 8024a1e:	680a      	ldr	r2, [r1, #0]
 8024a20:	685b      	ldr	r3, [r3, #4]
 8024a22:	684f      	ldr	r7, [r1, #4]
 8024a24:	6888      	ldr	r0, [r1, #8]
 8024a26:	68c9      	ldr	r1, [r1, #12]
 8024a28:	605f      	str	r7, [r3, #4]
 8024a2a:	60d9      	str	r1, [r3, #12]
 8024a2c:	9904      	ldr	r1, [sp, #16]
 8024a2e:	601a      	str	r2, [r3, #0]
 8024a30:	6098      	str	r0, [r3, #8]
 8024a32:	690a      	ldr	r2, [r1, #16]
 8024a34:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024a36:	9b03      	ldr	r3, [sp, #12]
 8024a38:	685b      	ldr	r3, [r3, #4]
 8024a3a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8024a3c:	9b06      	ldr	r3, [sp, #24]
 8024a3e:	2b00      	cmp	r3, #0
 8024a40:	d034      	beq.n	8024aac <ip4_frag+0x128>
 8024a42:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024a44:	896b      	ldrh	r3, [r5, #10]
 8024a46:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024a48:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024a4a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024a4c:	d36e      	bcc.n	8024b2c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024a4e:	454c      	cmp	r4, r9
 8024a50:	bf28      	it	cs
 8024a52:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024a54:	2c00      	cmp	r4, #0
 8024a56:	d062      	beq.n	8024b1e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024a58:	4641      	mov	r1, r8
 8024a5a:	f240 22bd 	movw	r2, #701	; 0x2bd
 8024a5e:	2006      	movs	r0, #6
 8024a60:	f7f7 f858 	bl	801bb14 <memp_malloc_fn>
 8024a64:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a66:	2241      	movs	r2, #65	; 0x41
 8024a68:	4621      	mov	r1, r4
 8024a6a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8024a6c:	f1bb 0f00 	cmp.w	fp, #0
 8024a70:	d06f      	beq.n	8024b52 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a72:	9401      	str	r4, [sp, #4]
 8024a74:	465b      	mov	r3, fp
 8024a76:	686f      	ldr	r7, [r5, #4]
 8024a78:	4437      	add	r7, r6
 8024a7a:	9700      	str	r7, [sp, #0]
 8024a7c:	f7f7 fc64 	bl	801c348 <pbuf_alloced_custom>
 8024a80:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8024a82:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8024a84:	2f00      	cmp	r7, #0
 8024a86:	d06e      	beq.n	8024b66 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024a88:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8024a8c:	f7f7 fdae 	bl	801c5ec <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024a90:	4a44      	ldr	r2, [pc, #272]	; (8024ba4 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8024a92:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024a94:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8024a98:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8024a9a:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024a9e:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8024aa2:	f7f7 fdb7 	bl	801c614 <pbuf_cat>
      if (left_to_copy) {
 8024aa6:	f1b9 0f00 	cmp.w	r9, #0
 8024aaa:	d138      	bne.n	8024b1e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8024aae:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024ab0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8024ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8024ab4:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8024ab6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8024aba:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8024abc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8024abe:	4293      	cmp	r3, r2
 8024ac0:	dd44      	ble.n	8024b4c <ip4_frag+0x1c8>
 8024ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d141      	bne.n	8024b4c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024ac8:	f7f5 fd36 	bl	801a538 <lwip_htons>
 8024acc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024ace:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024ad0:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024ad2:	f103 0014 	add.w	r0, r3, #20
 8024ad6:	b280      	uxth	r0, r0
 8024ad8:	f7f5 fd2e 	bl	801a538 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8024adc:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024ade:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024ae0:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8024ae2:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024ae4:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8024ae6:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024ae8:	f7f6 face 	bl	801b088 <inet_chksum>
 8024aec:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024aee:	9f03      	ldr	r7, [sp, #12]
 8024af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024af4:	4639      	mov	r1, r7
 8024af6:	6943      	ldr	r3, [r0, #20]
 8024af8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024afa:	4638      	mov	r0, r7
 8024afc:	f7f7 fd58 	bl	801c5b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024b00:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8024b04:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8024b06:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8024b0a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8024b0c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8024b0e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8024b10:	b292      	uxth	r2, r2
 8024b12:	9207      	str	r2, [sp, #28]
  while (left) {
 8024b14:	2b00      	cmp	r3, #0
 8024b16:	f47f af6c 	bne.w	80249f2 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024b1a:	2000      	movs	r0, #0
 8024b1c:	e020      	b.n	8024b60 <ip4_frag+0x1dc>
        p = p->next;
 8024b1e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8024b20:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8024b22:	896b      	ldrh	r3, [r5, #10]
 8024b24:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024b26:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024b28:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024b2a:	d290      	bcs.n	8024a4e <ip4_frag+0xca>
 8024b2c:	4643      	mov	r3, r8
 8024b2e:	f240 322d 	movw	r2, #813	; 0x32d
 8024b32:	491d      	ldr	r1, [pc, #116]	; (8024ba8 <ip4_frag+0x224>)
 8024b34:	4650      	mov	r0, sl
 8024b36:	f001 fe05 	bl	8026744 <iprintf>
 8024b3a:	e788      	b.n	8024a4e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024b3c:	4643      	mov	r3, r8
 8024b3e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024b42:	491a      	ldr	r1, [pc, #104]	; (8024bac <ip4_frag+0x228>)
 8024b44:	4650      	mov	r0, sl
 8024b46:	f001 fdfd 	bl	8026744 <iprintf>
 8024b4a:	e766      	b.n	8024a1a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 8024b4c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8024b50:	e7ba      	b.n	8024ac8 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8024b52:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024b56:	4658      	mov	r0, fp
 8024b58:	f7f7 fd2a 	bl	801c5b0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024b5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024b60:	b00f      	add	sp, #60	; 0x3c
 8024b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8024b66:	46d9      	mov	r9, fp
 8024b68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024b6c:	2006      	movs	r0, #6
 8024b6e:	4649      	mov	r1, r9
 8024b70:	f7f7 f806 	bl	801bb80 <memp_free>
        pbuf_free(rambuf);
 8024b74:	4658      	mov	r0, fp
 8024b76:	f7f7 fd1b 	bl	801c5b0 <pbuf_free>
  return ERR_MEM;
 8024b7a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024b7e:	b00f      	add	sp, #60	; 0x3c
 8024b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8024b84:	f04f 30ff 	mov.w	r0, #4294967295
 8024b88:	e7ea      	b.n	8024b60 <ip4_frag+0x1dc>
    return ERR_VAL;
 8024b8a:	f06f 0005 	mvn.w	r0, #5
 8024b8e:	e7e7      	b.n	8024b60 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024b90:	4b07      	ldr	r3, [pc, #28]	; (8024bb0 <ip4_frag+0x22c>)
 8024b92:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024b96:	4907      	ldr	r1, [pc, #28]	; (8024bb4 <ip4_frag+0x230>)
 8024b98:	4807      	ldr	r0, [pc, #28]	; (8024bb8 <ip4_frag+0x234>)
 8024b9a:	f001 fdd3 	bl	8026744 <iprintf>
 8024b9e:	f06f 0005 	mvn.w	r0, #5
 8024ba2:	e7dd      	b.n	8024b60 <ip4_frag+0x1dc>
 8024ba4:	080242f1 	.word	0x080242f1
 8024ba8:	08047498 	.word	0x08047498
 8024bac:	08047478 	.word	0x08047478
 8024bb0:	08047324 	.word	0x08047324
 8024bb4:	0804745c 	.word	0x0804745c
 8024bb8:	0802b43c 	.word	0x0802b43c

08024bbc <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024bbc:	8943      	ldrh	r3, [r0, #10]
 8024bbe:	2b0e      	cmp	r3, #14
{
 8024bc0:	b570      	push	{r4, r5, r6, lr}
 8024bc2:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8024bc4:	d91b      	bls.n	8024bfe <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8024bc6:	7bc3      	ldrb	r3, [r0, #15]
 8024bc8:	460d      	mov	r5, r1
 8024bca:	b91b      	cbnz	r3, 8024bd4 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8024bcc:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8024bd0:	3301      	adds	r3, #1
 8024bd2:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024bd4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024bd6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8024bd8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8024bda:	07d9      	lsls	r1, r3, #31
 8024bdc:	d50a      	bpl.n	8024bf4 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8024bde:	2b01      	cmp	r3, #1
 8024be0:	d030      	beq.n	8024c44 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024be2:	2206      	movs	r2, #6
 8024be4:	491d      	ldr	r1, [pc, #116]	; (8024c5c <ethernet_input+0xa0>)
 8024be6:	f000 fdd7 	bl	8025798 <memcmp>
 8024bea:	b918      	cbnz	r0, 8024bf4 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024bec:	7b63      	ldrb	r3, [r4, #13]
 8024bee:	f043 0308 	orr.w	r3, r3, #8
 8024bf2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8024bf4:	2e08      	cmp	r6, #8
 8024bf6:	d016      	beq.n	8024c26 <ethernet_input+0x6a>
 8024bf8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8024bfc:	d004      	beq.n	8024c08 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8024bfe:	4620      	mov	r0, r4
 8024c00:	f7f7 fcd6 	bl	801c5b0 <pbuf_free>
  return ERR_OK;
}
 8024c04:	2000      	movs	r0, #0
 8024c06:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c08:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024c0c:	071b      	lsls	r3, r3, #28
 8024c0e:	d5f6      	bpl.n	8024bfe <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c10:	210e      	movs	r1, #14
 8024c12:	4620      	mov	r0, r4
 8024c14:	f7f7 fc40 	bl	801c498 <pbuf_remove_header>
 8024c18:	2800      	cmp	r0, #0
 8024c1a:	d1f0      	bne.n	8024bfe <ethernet_input+0x42>
        etharp_input(p, netif);
 8024c1c:	4629      	mov	r1, r5
 8024c1e:	4620      	mov	r0, r4
 8024c20:	f7fe fd2e 	bl	8023680 <etharp_input>
      break;
 8024c24:	e7ee      	b.n	8024c04 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c26:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024c2a:	071a      	lsls	r2, r3, #28
 8024c2c:	d5e7      	bpl.n	8024bfe <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c2e:	210e      	movs	r1, #14
 8024c30:	4620      	mov	r0, r4
 8024c32:	f7f7 fc31 	bl	801c498 <pbuf_remove_header>
 8024c36:	2800      	cmp	r0, #0
 8024c38:	d1e1      	bne.n	8024bfe <ethernet_input+0x42>
        ip4_input(p, netif);
 8024c3a:	4629      	mov	r1, r5
 8024c3c:	4620      	mov	r0, r4
 8024c3e:	f7ff f8eb 	bl	8023e18 <ip4_input>
      break;
 8024c42:	e7df      	b.n	8024c04 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024c44:	7843      	ldrb	r3, [r0, #1]
 8024c46:	2b00      	cmp	r3, #0
 8024c48:	d1d4      	bne.n	8024bf4 <ethernet_input+0x38>
 8024c4a:	7883      	ldrb	r3, [r0, #2]
 8024c4c:	2b5e      	cmp	r3, #94	; 0x5e
 8024c4e:	d1d1      	bne.n	8024bf4 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8024c50:	7b63      	ldrb	r3, [r4, #13]
 8024c52:	f043 0310 	orr.w	r3, r3, #16
 8024c56:	7363      	strb	r3, [r4, #13]
 8024c58:	e7cc      	b.n	8024bf4 <ethernet_input+0x38>
 8024c5a:	bf00      	nop
 8024c5c:	08047514 	.word	0x08047514

08024c60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c64:	460c      	mov	r4, r1
 8024c66:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c68:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8024c6c:	4616      	mov	r6, r2
 8024c6e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c70:	f7f5 fc62 	bl	801a538 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c74:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c76:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c78:	4620      	mov	r0, r4
 8024c7a:	f7f7 fbd9 	bl	801c430 <pbuf_add_header>
 8024c7e:	b9e0      	cbnz	r0, 8024cba <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024c80:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8024c82:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024c86:	683b      	ldr	r3, [r7, #0]
 8024c88:	600b      	str	r3, [r1, #0]
 8024c8a:	88bb      	ldrh	r3, [r7, #4]
 8024c8c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024c8e:	6833      	ldr	r3, [r6, #0]
 8024c90:	f8c1 3006 	str.w	r3, [r1, #6]
 8024c94:	88b3      	ldrh	r3, [r6, #4]
 8024c96:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8024c98:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8024c9c:	2b06      	cmp	r3, #6
 8024c9e:	d006      	beq.n	8024cae <ethernet_output+0x4e>
 8024ca0:	4b08      	ldr	r3, [pc, #32]	; (8024cc4 <ethernet_output+0x64>)
 8024ca2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8024ca6:	4908      	ldr	r1, [pc, #32]	; (8024cc8 <ethernet_output+0x68>)
 8024ca8:	4808      	ldr	r0, [pc, #32]	; (8024ccc <ethernet_output+0x6c>)
 8024caa:	f001 fd4b 	bl	8026744 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024cae:	69ab      	ldr	r3, [r5, #24]
 8024cb0:	4621      	mov	r1, r4
 8024cb2:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8024cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8024cb8:	4718      	bx	r3
}
 8024cba:	f06f 0001 	mvn.w	r0, #1
 8024cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024cc2:	bf00      	nop
 8024cc4:	080474a8 	.word	0x080474a8
 8024cc8:	080474e0 	.word	0x080474e0
 8024ccc:	0802b43c 	.word	0x0802b43c

08024cd0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024cd0:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8024cd2:	2300      	movs	r3, #0
{
 8024cd4:	b085      	sub	sp, #20
 8024cd6:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8024cd8:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cda:	4619      	mov	r1, r3
{
 8024cdc:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cde:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8024ce0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024ce4:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024ce8:	f7f1 fda8 	bl	801683c <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024cec:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cf0:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8024cf2:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8024cf4:	4258      	negs	r0, r3
 8024cf6:	b005      	add	sp, #20
 8024cf8:	bd30      	pop	{r4, r5, pc}
 8024cfa:	bf00      	nop

08024cfc <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024cfc:	2200      	movs	r2, #0
 8024cfe:	6800      	ldr	r0, [r0, #0]
{
 8024d00:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024d02:	f7f1 fdaf 	bl	8016864 <osMessagePut>
 8024d06:	3800      	subs	r0, #0
 8024d08:	bf18      	it	ne
 8024d0a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8024d0c:	4240      	negs	r0, r0
 8024d0e:	bd08      	pop	{r3, pc}

08024d10 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d12:	4614      	mov	r4, r2
 8024d14:	b085      	sub	sp, #20
 8024d16:	4605      	mov	r5, r0
 8024d18:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024d1a:	f7f1 fc55 	bl	80165c8 <osKernelSysTick>
 8024d1e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024d20:	b15c      	cbz	r4, 8024d3a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024d22:	4622      	mov	r2, r4
 8024d24:	6829      	ldr	r1, [r5, #0]
 8024d26:	a801      	add	r0, sp, #4
 8024d28:	f7f1 fdc8 	bl	80168bc <osMessageGet>

    if(event.status == osEventMessage)
 8024d2c:	9b01      	ldr	r3, [sp, #4]
 8024d2e:	2b10      	cmp	r3, #16
 8024d30:	d009      	beq.n	8024d46 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024d32:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024d36:	b005      	add	sp, #20
 8024d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8024d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8024d3e:	6829      	ldr	r1, [r5, #0]
 8024d40:	a801      	add	r0, sp, #4
 8024d42:	f7f1 fdbb 	bl	80168bc <osMessageGet>
    *msg = (void *)event.value.v;
 8024d46:	9b02      	ldr	r3, [sp, #8]
 8024d48:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8024d4a:	f7f1 fc3d 	bl	80165c8 <osKernelSysTick>
 8024d4e:	1b80      	subs	r0, r0, r6
}
 8024d50:	b005      	add	sp, #20
 8024d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024d54 <sys_mbox_valid>:
 8024d54:	6800      	ldr	r0, [r0, #0]
 8024d56:	3800      	subs	r0, #0
 8024d58:	bf18      	it	ne
 8024d5a:	2001      	movne	r0, #1
 8024d5c:	4770      	bx	lr
 8024d5e:	bf00      	nop

08024d60 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024d60:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024d62:	4803      	ldr	r0, [pc, #12]	; (8024d70 <sys_init+0x10>)
 8024d64:	f7f1 fc94 	bl	8016690 <osMutexCreate>
 8024d68:	4b02      	ldr	r3, [pc, #8]	; (8024d74 <sys_init+0x14>)
 8024d6a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024d6c:	bd08      	pop	{r3, pc}
 8024d6e:	bf00      	nop
 8024d70:	08047524 	.word	0x08047524
 8024d74:	2002e854 	.word	0x2002e854

08024d78 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d78:	b510      	push	{r4, lr}
 8024d7a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8024d7c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d7e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d80:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8024d82:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d86:	f7f1 fc83 	bl	8016690 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024d8a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d8e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8024d90:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8024d92:	4258      	negs	r0, r3
 8024d94:	b002      	add	sp, #8
 8024d96:	bd10      	pop	{r4, pc}

08024d98 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8024d98:	f04f 31ff 	mov.w	r1, #4294967295
 8024d9c:	6800      	ldr	r0, [r0, #0]
 8024d9e:	f7f1 bc7f 	b.w	80166a0 <osMutexWait>
 8024da2:	bf00      	nop

08024da4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8024da4:	6800      	ldr	r0, [r0, #0]
 8024da6:	f7f1 bca7 	b.w	80166f8 <osMutexRelease>
 8024daa:	bf00      	nop

08024dac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024dac:	b510      	push	{r4, lr}
 8024dae:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024db0:	2400      	movs	r4, #0
 8024db2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8024db6:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8024db8:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8024dbc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024dbe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024dc2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8024dc6:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8024dca:	f7f1 fc05 	bl	80165d8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024dce:	b008      	add	sp, #32
 8024dd0:	bd10      	pop	{r4, pc}
 8024dd2:	bf00      	nop

08024dd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8024dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8024dd6:	2200      	movs	r2, #0
 8024dd8:	4917      	ldr	r1, [pc, #92]	; (8024e38 <MX_USB_DEVICE_Init+0x64>)
 8024dda:	4818      	ldr	r0, [pc, #96]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024ddc:	f7f0 ff66 	bl	8015cac <USBD_Init>
 8024de0:	b970      	cbnz	r0, 8024e00 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024de2:	4917      	ldr	r1, [pc, #92]	; (8024e40 <MX_USB_DEVICE_Init+0x6c>)
 8024de4:	4815      	ldr	r0, [pc, #84]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024de6:	f7f0 ff79 	bl	8015cdc <USBD_RegisterClass>
 8024dea:	b988      	cbnz	r0, 8024e10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024dec:	4915      	ldr	r1, [pc, #84]	; (8024e44 <MX_USB_DEVICE_Init+0x70>)
 8024dee:	4813      	ldr	r0, [pc, #76]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024df0:	f7f0 ff26 	bl	8015c40 <USBD_CDC_RegisterInterface>
 8024df4:	b9a0      	cbnz	r0, 8024e20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024df6:	4811      	ldr	r0, [pc, #68]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024df8:	f7f0 ff86 	bl	8015d08 <USBD_Start>
 8024dfc:	b9b8      	cbnz	r0, 8024e2e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024dfe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8024e00:	f7df fce0 	bl	80047c4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024e04:	490e      	ldr	r1, [pc, #56]	; (8024e40 <MX_USB_DEVICE_Init+0x6c>)
 8024e06:	480d      	ldr	r0, [pc, #52]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024e08:	f7f0 ff68 	bl	8015cdc <USBD_RegisterClass>
 8024e0c:	2800      	cmp	r0, #0
 8024e0e:	d0ed      	beq.n	8024dec <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8024e10:	f7df fcd8 	bl	80047c4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024e14:	490b      	ldr	r1, [pc, #44]	; (8024e44 <MX_USB_DEVICE_Init+0x70>)
 8024e16:	4809      	ldr	r0, [pc, #36]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024e18:	f7f0 ff12 	bl	8015c40 <USBD_CDC_RegisterInterface>
 8024e1c:	2800      	cmp	r0, #0
 8024e1e:	d0ea      	beq.n	8024df6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8024e20:	f7df fcd0 	bl	80047c4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024e24:	4805      	ldr	r0, [pc, #20]	; (8024e3c <MX_USB_DEVICE_Init+0x68>)
 8024e26:	f7f0 ff6f 	bl	8015d08 <USBD_Start>
 8024e2a:	2800      	cmp	r0, #0
 8024e2c:	d0e7      	beq.n	8024dfe <MX_USB_DEVICE_Init+0x2a>
}
 8024e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8024e32:	f7df bcc7 	b.w	80047c4 <Error_Handler>
 8024e36:	bf00      	nop
 8024e38:	20000464 	.word	0x20000464
 8024e3c:	2002e858 	.word	0x2002e858
 8024e40:	20000334 	.word	0x20000334
 8024e44:	20000450 	.word	0x20000450

08024e48 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8024e48:	2000      	movs	r0, #0
 8024e4a:	4770      	bx	lr

08024e4c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8024e4c:	2000      	movs	r0, #0
 8024e4e:	4770      	bx	lr

08024e50 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8024e50:	2000      	movs	r0, #0
 8024e52:	4770      	bx	lr

08024e54 <CDC_Receive_FS>:
{
 8024e54:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024e56:	4c05      	ldr	r4, [pc, #20]	; (8024e6c <CDC_Receive_FS+0x18>)
{
 8024e58:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024e5a:	4620      	mov	r0, r4
 8024e5c:	f7f0 ff02 	bl	8015c64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8024e60:	4620      	mov	r0, r4
 8024e62:	f7f0 ff07 	bl	8015c74 <USBD_CDC_ReceivePacket>
}
 8024e66:	2000      	movs	r0, #0
 8024e68:	bd10      	pop	{r4, pc}
 8024e6a:	bf00      	nop
 8024e6c:	2002e858 	.word	0x2002e858

08024e70 <CDC_Init_FS>:
{
 8024e70:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8024e72:	4c06      	ldr	r4, [pc, #24]	; (8024e8c <CDC_Init_FS+0x1c>)
 8024e74:	2200      	movs	r2, #0
 8024e76:	4906      	ldr	r1, [pc, #24]	; (8024e90 <CDC_Init_FS+0x20>)
 8024e78:	4620      	mov	r0, r4
 8024e7a:	f7f0 fee9 	bl	8015c50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8024e7e:	4905      	ldr	r1, [pc, #20]	; (8024e94 <CDC_Init_FS+0x24>)
 8024e80:	4620      	mov	r0, r4
 8024e82:	f7f0 feef 	bl	8015c64 <USBD_CDC_SetRxBuffer>
}
 8024e86:	2000      	movs	r0, #0
 8024e88:	bd10      	pop	{r4, pc}
 8024e8a:	bf00      	nop
 8024e8c:	2002e858 	.word	0x2002e858
 8024e90:	2002f328 	.word	0x2002f328
 8024e94:	2002eb28 	.word	0x2002eb28

08024e98 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8024e98:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8024e9a:	4801      	ldr	r0, [pc, #4]	; (8024ea0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8024e9c:	800b      	strh	r3, [r1, #0]
}
 8024e9e:	4770      	bx	lr
 8024ea0:	20000490 	.word	0x20000490

08024ea4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8024ea4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8024ea6:	4801      	ldr	r0, [pc, #4]	; (8024eac <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8024ea8:	800b      	strh	r3, [r1, #0]
}
 8024eaa:	4770      	bx	lr
 8024eac:	200004a4 	.word	0x200004a4

08024eb0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8024eb0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8024eb2:	4801      	ldr	r0, [pc, #4]	; (8024eb8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8024eb4:	800b      	strh	r3, [r1, #0]
}
 8024eb6:	4770      	bx	lr
 8024eb8:	20000484 	.word	0x20000484

08024ebc <USBD_FS_ManufacturerStrDescriptor>:
{
 8024ebc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ebe:	4c04      	ldr	r4, [pc, #16]	; (8024ed0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8024ec0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ec2:	4804      	ldr	r0, [pc, #16]	; (8024ed4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8024ec4:	4621      	mov	r1, r4
 8024ec6:	f7f1 fae3 	bl	8016490 <USBD_GetString>
}
 8024eca:	4620      	mov	r0, r4
 8024ecc:	bd10      	pop	{r4, pc}
 8024ece:	bf00      	nop
 8024ed0:	2002fb28 	.word	0x2002fb28
 8024ed4:	0804752c 	.word	0x0804752c

08024ed8 <USBD_FS_ProductStrDescriptor>:
{
 8024ed8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024eda:	4c04      	ldr	r4, [pc, #16]	; (8024eec <USBD_FS_ProductStrDescriptor+0x14>)
{
 8024edc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024ede:	4804      	ldr	r0, [pc, #16]	; (8024ef0 <USBD_FS_ProductStrDescriptor+0x18>)
 8024ee0:	4621      	mov	r1, r4
 8024ee2:	f7f1 fad5 	bl	8016490 <USBD_GetString>
}
 8024ee6:	4620      	mov	r0, r4
 8024ee8:	bd10      	pop	{r4, pc}
 8024eea:	bf00      	nop
 8024eec:	2002fb28 	.word	0x2002fb28
 8024ef0:	08047540 	.word	0x08047540

08024ef4 <USBD_FS_ConfigStrDescriptor>:
{
 8024ef4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024ef6:	4c04      	ldr	r4, [pc, #16]	; (8024f08 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8024ef8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024efa:	4804      	ldr	r0, [pc, #16]	; (8024f0c <USBD_FS_ConfigStrDescriptor+0x18>)
 8024efc:	4621      	mov	r1, r4
 8024efe:	f7f1 fac7 	bl	8016490 <USBD_GetString>
}
 8024f02:	4620      	mov	r0, r4
 8024f04:	bd10      	pop	{r4, pc}
 8024f06:	bf00      	nop
 8024f08:	2002fb28 	.word	0x2002fb28
 8024f0c:	08047558 	.word	0x08047558

08024f10 <USBD_FS_InterfaceStrDescriptor>:
{
 8024f10:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024f12:	4c04      	ldr	r4, [pc, #16]	; (8024f24 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8024f14:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024f16:	4804      	ldr	r0, [pc, #16]	; (8024f28 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8024f18:	4621      	mov	r1, r4
 8024f1a:	f7f1 fab9 	bl	8016490 <USBD_GetString>
}
 8024f1e:	4620      	mov	r0, r4
 8024f20:	bd10      	pop	{r4, pc}
 8024f22:	bf00      	nop
 8024f24:	2002fb28 	.word	0x2002fb28
 8024f28:	08047564 	.word	0x08047564

08024f2c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8024f2c:	4b21      	ldr	r3, [pc, #132]	; (8024fb4 <USBD_FS_SerialStrDescriptor+0x88>)
 8024f2e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8024f32:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8024f36:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8024f38:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8024f3a:	f04f 041a 	mov.w	r4, #26
 8024f3e:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8024f40:	d101      	bne.n	8024f46 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8024f42:	481d      	ldr	r0, [pc, #116]	; (8024fb8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024f44:	bd30      	pop	{r4, r5, pc}
 8024f46:	491c      	ldr	r1, [pc, #112]	; (8024fb8 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8024f48:	f04f 0e00 	mov.w	lr, #0
 8024f4c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8024f50:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8024f52:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8024f54:	0f13      	lsrs	r3, r2, #28
 8024f56:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024f5a:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8024f5e:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f62:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f66:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024f6a:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8024f6e:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f72:	bf34      	ite	cc
 8024f74:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f78:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8024f7c:	f1be 0f10 	cmp.w	lr, #16
 8024f80:	d1e8      	bne.n	8024f54 <USBD_FS_SerialStrDescriptor+0x28>
 8024f82:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8024f84:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8024f86:	0f03      	lsrs	r3, r0, #28
 8024f88:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024f8c:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8024f90:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f92:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f96:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024f9a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8024f9e:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024fa2:	bf34      	ite	cc
 8024fa4:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024fa8:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8024faa:	2a08      	cmp	r2, #8
 8024fac:	d1eb      	bne.n	8024f86 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8024fae:	4802      	ldr	r0, [pc, #8]	; (8024fb8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024fb0:	bd30      	pop	{r4, r5, pc}
 8024fb2:	bf00      	nop
 8024fb4:	1ff0f000 	.word	0x1ff0f000
 8024fb8:	200004a8 	.word	0x200004a8

08024fbc <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fbc:	6803      	ldr	r3, [r0, #0]
{
 8024fbe:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8024fc4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024fc6:	f04f 0400 	mov.w	r4, #0
 8024fca:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024fce:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8024fd2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fd4:	d001      	beq.n	8024fda <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8024fd6:	b009      	add	sp, #36	; 0x24
 8024fd8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024fda:	4d1e      	ldr	r5, [pc, #120]	; (8025054 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8024fdc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024fe0:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024fe2:	481d      	ldr	r0, [pc, #116]	; (8025058 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024fe4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024fe6:	f043 0301 	orr.w	r3, r3, #1
 8024fea:	632b      	str	r3, [r5, #48]	; 0x30
 8024fec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024fee:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024ff2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024ff6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024ff8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024ffa:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024ffc:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024ffe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025000:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025004:	f7e7 fc88 	bl	800c918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8025008:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 802500c:	a903      	add	r1, sp, #12
 802500e:	4812      	ldr	r0, [pc, #72]	; (8025058 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025010:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8025012:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8025016:	f7e7 fc7f 	bl	800c918 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802501a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 802501c:	4622      	mov	r2, r4
 802501e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8025024:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025026:	636b      	str	r3, [r5, #52]	; 0x34
 8025028:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802502e:	9301      	str	r3, [sp, #4]
 8025030:	9b01      	ldr	r3, [sp, #4]
 8025032:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8025034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025038:	646b      	str	r3, [r5, #68]	; 0x44
 802503a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025040:	9302      	str	r3, [sp, #8]
 8025042:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8025044:	f7e4 fdea 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025048:	2043      	movs	r0, #67	; 0x43
 802504a:	f7e4 fe31 	bl	8009cb0 <HAL_NVIC_EnableIRQ>
}
 802504e:	b009      	add	sp, #36	; 0x24
 8025050:	bd30      	pop	{r4, r5, pc}
 8025052:	bf00      	nop
 8025054:	40023800 	.word	0x40023800
 8025058:	40020000 	.word	0x40020000

0802505c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802505c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8025060:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025064:	f7f0 be62 	b.w	8015d2c <USBD_LL_SetupStage>

08025068 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8025068:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802506c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025070:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025074:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8025078:	f7f0 be86 	b.w	8015d88 <USBD_LL_DataOutStage>

0802507c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802507c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8025080:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025084:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802508a:	f7f0 beb3 	b.w	8015df4 <USBD_LL_DataInStage>
 802508e:	bf00      	nop

08025090 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025090:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025094:	f7f0 bf4a 	b.w	8015f2c <USBD_LL_SOF>

08025098 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025098:	68c1      	ldr	r1, [r0, #12]
{
 802509a:	b510      	push	{r4, lr}
 802509c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802509e:	b111      	cbz	r1, 80250a6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80250a0:	2902      	cmp	r1, #2
 80250a2:	d10a      	bne.n	80250ba <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80250a4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80250a6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 80250aa:	f7f0 ff27 	bl	8015efc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80250ae:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 80250b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80250b6:	f7f0 bef9 	b.w	8015eac <USBD_LL_Reset>
    Error_Handler();
 80250ba:	f7df fb83 	bl	80047c4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80250be:	2101      	movs	r1, #1
 80250c0:	e7f1      	b.n	80250a6 <HAL_PCD_ResetCallback+0xe>
 80250c2:	bf00      	nop

080250c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80250c4:	b510      	push	{r4, lr}
 80250c6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80250c8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250cc:	f7f0 ff1a 	bl	8015f04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80250d0:	6822      	ldr	r2, [r4, #0]
 80250d2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80250d6:	f043 0301 	orr.w	r3, r3, #1
 80250da:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80250de:	6a23      	ldr	r3, [r4, #32]
 80250e0:	b123      	cbz	r3, 80250ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80250e2:	4a03      	ldr	r2, [pc, #12]	; (80250f0 <HAL_PCD_SuspendCallback+0x2c>)
 80250e4:	6913      	ldr	r3, [r2, #16]
 80250e6:	f043 0306 	orr.w	r3, r3, #6
 80250ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80250ec:	bd10      	pop	{r4, pc}
 80250ee:	bf00      	nop
 80250f0:	e000ed00 	.word	0xe000ed00

080250f4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80250f4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250f8:	f7f0 bf0e 	b.w	8015f18 <USBD_LL_Resume>

080250fc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80250fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025100:	f7f0 bf24 	b.w	8015f4c <USBD_LL_IsoOUTIncomplete>

08025104 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025104:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025108:	f7f0 bf1e 	b.w	8015f48 <USBD_LL_IsoINIncomplete>

0802510c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802510c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025110:	f7f0 bf1e 	b.w	8015f50 <USBD_LL_DevConnected>

08025114 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8025114:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025118:	f7f0 bf1c 	b.w	8015f54 <USBD_LL_DevDisconnected>

0802511c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802511c:	7802      	ldrb	r2, [r0, #0]
 802511e:	b10a      	cbz	r2, 8025124 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8025120:	2000      	movs	r0, #0
 8025122:	4770      	bx	lr
{
 8025124:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8025126:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8025128:	4b14      	ldr	r3, [pc, #80]	; (802517c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802512a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802512c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025130:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8025132:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8025134:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8025138:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802513c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802513e:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8025140:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8025142:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8025144:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8025148:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802514c:	2206      	movs	r2, #6
 802514e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8025150:	f7e8 fd1a 	bl	800db88 <HAL_PCD_Init>
 8025154:	b978      	cbnz	r0, 8025176 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8025156:	2180      	movs	r1, #128	; 0x80
 8025158:	4808      	ldr	r0, [pc, #32]	; (802517c <USBD_LL_Init+0x60>)
 802515a:	f7e9 fa7f 	bl	800e65c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802515e:	2240      	movs	r2, #64	; 0x40
 8025160:	2100      	movs	r1, #0
 8025162:	4806      	ldr	r0, [pc, #24]	; (802517c <USBD_LL_Init+0x60>)
 8025164:	f7e9 fa50 	bl	800e608 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8025168:	2280      	movs	r2, #128	; 0x80
 802516a:	2101      	movs	r1, #1
 802516c:	4803      	ldr	r0, [pc, #12]	; (802517c <USBD_LL_Init+0x60>)
 802516e:	f7e9 fa4b 	bl	800e608 <HAL_PCDEx_SetTxFiFo>
}
 8025172:	2000      	movs	r0, #0
 8025174:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8025176:	f7df fb25 	bl	80047c4 <Error_Handler>
 802517a:	e7ec      	b.n	8025156 <USBD_LL_Init+0x3a>
 802517c:	2002fd28 	.word	0x2002fd28

08025180 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8025180:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025184:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8025186:	f7e8 fdad 	bl	800dce4 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802518a:	2803      	cmp	r0, #3
 802518c:	d802      	bhi.n	8025194 <USBD_LL_Start+0x14>
 802518e:	4b02      	ldr	r3, [pc, #8]	; (8025198 <USBD_LL_Start+0x18>)
 8025190:	5c18      	ldrb	r0, [r3, r0]
}
 8025192:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8025194:	2003      	movs	r0, #3
}
 8025196:	bd08      	pop	{r3, pc}
 8025198:	08047574 	.word	0x08047574

0802519c <USBD_LL_OpenEP>:
{
 802519c:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802519e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251a2:	461a      	mov	r2, r3
 80251a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80251a6:	4663      	mov	r3, ip
 80251a8:	f7e9 f8e0 	bl	800e36c <HAL_PCD_EP_Open>
  switch (hal_status)
 80251ac:	2803      	cmp	r0, #3
 80251ae:	d802      	bhi.n	80251b6 <USBD_LL_OpenEP+0x1a>
 80251b0:	4b02      	ldr	r3, [pc, #8]	; (80251bc <USBD_LL_OpenEP+0x20>)
 80251b2:	5c18      	ldrb	r0, [r3, r0]
}
 80251b4:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80251b6:	2003      	movs	r0, #3
}
 80251b8:	bd08      	pop	{r3, pc}
 80251ba:	bf00      	nop
 80251bc:	08047574 	.word	0x08047574

080251c0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251c0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251c6:	f7e9 f90f 	bl	800e3e8 <HAL_PCD_EP_Close>
  switch (hal_status)
 80251ca:	2803      	cmp	r0, #3
 80251cc:	d802      	bhi.n	80251d4 <USBD_LL_CloseEP+0x14>
 80251ce:	4b02      	ldr	r3, [pc, #8]	; (80251d8 <USBD_LL_CloseEP+0x18>)
 80251d0:	5c18      	ldrb	r0, [r3, r0]
}
 80251d2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251d4:	2003      	movs	r0, #3
}
 80251d6:	bd08      	pop	{r3, pc}
 80251d8:	08047574 	.word	0x08047574

080251dc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80251dc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80251e2:	f7e9 f991 	bl	800e508 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80251e6:	2803      	cmp	r0, #3
 80251e8:	d802      	bhi.n	80251f0 <USBD_LL_StallEP+0x14>
 80251ea:	4b02      	ldr	r3, [pc, #8]	; (80251f4 <USBD_LL_StallEP+0x18>)
 80251ec:	5c18      	ldrb	r0, [r3, r0]
}
 80251ee:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80251f0:	2003      	movs	r0, #3
}
 80251f2:	bd08      	pop	{r3, pc}
 80251f4:	08047574 	.word	0x08047574

080251f8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80251f8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80251fe:	f7e9 f9c7 	bl	800e590 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8025202:	2803      	cmp	r0, #3
 8025204:	d802      	bhi.n	802520c <USBD_LL_ClearStallEP+0x14>
 8025206:	4b02      	ldr	r3, [pc, #8]	; (8025210 <USBD_LL_ClearStallEP+0x18>)
 8025208:	5c18      	ldrb	r0, [r3, r0]
}
 802520a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802520c:	2003      	movs	r0, #3
}
 802520e:	bd08      	pop	{r3, pc}
 8025210:	08047574 	.word	0x08047574

08025214 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8025214:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8025216:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 802521a:	d406      	bmi.n	802522a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802521c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8025220:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8025224:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8025228:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802522a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802522e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8025232:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8025236:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 802523a:	4770      	bx	lr

0802523c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802523c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025240:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8025242:	f7e9 f87d 	bl	800e340 <HAL_PCD_SetAddress>
  switch (hal_status)
 8025246:	2803      	cmp	r0, #3
 8025248:	d802      	bhi.n	8025250 <USBD_LL_SetUSBAddress+0x14>
 802524a:	4b02      	ldr	r3, [pc, #8]	; (8025254 <USBD_LL_SetUSBAddress+0x18>)
 802524c:	5c18      	ldrb	r0, [r3, r0]
}
 802524e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8025250:	2003      	movs	r0, #3
}
 8025252:	bd08      	pop	{r3, pc}
 8025254:	08047574 	.word	0x08047574

08025258 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8025258:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802525c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802525e:	f7e9 f92b 	bl	800e4b8 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8025262:	2803      	cmp	r0, #3
 8025264:	d802      	bhi.n	802526c <USBD_LL_Transmit+0x14>
 8025266:	4b02      	ldr	r3, [pc, #8]	; (8025270 <USBD_LL_Transmit+0x18>)
 8025268:	5c18      	ldrb	r0, [r3, r0]
}
 802526a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802526c:	2003      	movs	r0, #3
}
 802526e:	bd08      	pop	{r3, pc}
 8025270:	08047574 	.word	0x08047574

08025274 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025274:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025278:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802527a:	f7e9 f8eb 	bl	800e454 <HAL_PCD_EP_Receive>
  switch (hal_status)
 802527e:	2803      	cmp	r0, #3
 8025280:	d802      	bhi.n	8025288 <USBD_LL_PrepareReceive+0x14>
 8025282:	4b02      	ldr	r3, [pc, #8]	; (802528c <USBD_LL_PrepareReceive+0x18>)
 8025284:	5c18      	ldrb	r0, [r3, r0]
}
 8025286:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025288:	2003      	movs	r0, #3
}
 802528a:	bd08      	pop	{r3, pc}
 802528c:	08047574 	.word	0x08047574

08025290 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8025290:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8025294:	f7e9 b906 	b.w	800e4a4 <HAL_PCD_EP_GetRxCount>

08025298 <HAL_PCDEx_LPM_Callback>:
{
 8025298:	b510      	push	{r4, lr}
 802529a:	4604      	mov	r4, r0
  switch (msg)
 802529c:	b1a1      	cbz	r1, 80252c8 <HAL_PCDEx_LPM_Callback+0x30>
 802529e:	2901      	cmp	r1, #1
 80252a0:	d111      	bne.n	80252c6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80252a2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80252a4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80252a8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80252ac:	f043 0301 	orr.w	r3, r3, #1
 80252b0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80252b4:	f7f0 fe26 	bl	8015f04 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80252b8:	6a23      	ldr	r3, [r4, #32]
 80252ba:	b123      	cbz	r3, 80252c6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80252bc:	4a0e      	ldr	r2, [pc, #56]	; (80252f8 <HAL_PCDEx_LPM_Callback+0x60>)
 80252be:	6913      	ldr	r3, [r2, #16]
 80252c0:	f043 0306 	orr.w	r3, r3, #6
 80252c4:	6113      	str	r3, [r2, #16]
}
 80252c6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80252c8:	6a03      	ldr	r3, [r0, #32]
 80252ca:	b963      	cbnz	r3, 80252e6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252cc:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80252ce:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252d2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80252d6:	f023 0301 	bic.w	r3, r3, #1
}
 80252da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252de:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80252e2:	f7f0 be19 	b.w	8015f18 <USBD_LL_Resume>
  SystemClock_Config();
 80252e6:	f7df fa75 	bl	80047d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80252ea:	4a03      	ldr	r2, [pc, #12]	; (80252f8 <HAL_PCDEx_LPM_Callback+0x60>)
 80252ec:	6913      	ldr	r3, [r2, #16]
 80252ee:	f023 0306 	bic.w	r3, r3, #6
 80252f2:	6113      	str	r3, [r2, #16]
 80252f4:	e7ea      	b.n	80252cc <HAL_PCDEx_LPM_Callback+0x34>
 80252f6:	bf00      	nop
 80252f8:	e000ed00 	.word	0xe000ed00

080252fc <atoi>:
 80252fc:	220a      	movs	r2, #10
 80252fe:	2100      	movs	r1, #0
 8025300:	f002 ba9a 	b.w	8027838 <strtol>

08025304 <ctime>:
 8025304:	b508      	push	{r3, lr}
 8025306:	f000 f91f 	bl	8025548 <localtime>
 802530a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802530e:	f002 be2d 	b.w	8027f6c <asctime>
 8025312:	Address 0x0000000008025312 is out of bounds.


08025314 <std>:
 8025314:	2300      	movs	r3, #0
 8025316:	b510      	push	{r4, lr}
 8025318:	4604      	mov	r4, r0
 802531a:	e9c0 3300 	strd	r3, r3, [r0]
 802531e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025322:	6083      	str	r3, [r0, #8]
 8025324:	8181      	strh	r1, [r0, #12]
 8025326:	6643      	str	r3, [r0, #100]	; 0x64
 8025328:	81c2      	strh	r2, [r0, #14]
 802532a:	6183      	str	r3, [r0, #24]
 802532c:	4619      	mov	r1, r3
 802532e:	2208      	movs	r2, #8
 8025330:	305c      	adds	r0, #92	; 0x5c
 8025332:	f000 fa69 	bl	8025808 <memset>
 8025336:	4b05      	ldr	r3, [pc, #20]	; (802534c <std+0x38>)
 8025338:	6263      	str	r3, [r4, #36]	; 0x24
 802533a:	4b05      	ldr	r3, [pc, #20]	; (8025350 <std+0x3c>)
 802533c:	62a3      	str	r3, [r4, #40]	; 0x28
 802533e:	4b05      	ldr	r3, [pc, #20]	; (8025354 <std+0x40>)
 8025340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025342:	4b05      	ldr	r3, [pc, #20]	; (8025358 <std+0x44>)
 8025344:	6224      	str	r4, [r4, #32]
 8025346:	6323      	str	r3, [r4, #48]	; 0x30
 8025348:	bd10      	pop	{r4, pc}
 802534a:	bf00      	nop
 802534c:	08026bb1 	.word	0x08026bb1
 8025350:	08026bd7 	.word	0x08026bd7
 8025354:	08026c0f 	.word	0x08026c0f
 8025358:	08026c33 	.word	0x08026c33

0802535c <_cleanup_r>:
 802535c:	4901      	ldr	r1, [pc, #4]	; (8025364 <_cleanup_r+0x8>)
 802535e:	f000 b8af 	b.w	80254c0 <_fwalk_reent>
 8025362:	bf00      	nop
 8025364:	08028d8d 	.word	0x08028d8d

08025368 <__sfmoreglue>:
 8025368:	b570      	push	{r4, r5, r6, lr}
 802536a:	2268      	movs	r2, #104	; 0x68
 802536c:	1e4d      	subs	r5, r1, #1
 802536e:	4355      	muls	r5, r2
 8025370:	460e      	mov	r6, r1
 8025372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025376:	f000 fd2d 	bl	8025dd4 <_malloc_r>
 802537a:	4604      	mov	r4, r0
 802537c:	b140      	cbz	r0, 8025390 <__sfmoreglue+0x28>
 802537e:	2100      	movs	r1, #0
 8025380:	e9c0 1600 	strd	r1, r6, [r0]
 8025384:	300c      	adds	r0, #12
 8025386:	60a0      	str	r0, [r4, #8]
 8025388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802538c:	f000 fa3c 	bl	8025808 <memset>
 8025390:	4620      	mov	r0, r4
 8025392:	bd70      	pop	{r4, r5, r6, pc}

08025394 <__sfp_lock_acquire>:
 8025394:	4801      	ldr	r0, [pc, #4]	; (802539c <__sfp_lock_acquire+0x8>)
 8025396:	f000 b9eb 	b.w	8025770 <__retarget_lock_acquire_recursive>
 802539a:	bf00      	nop
 802539c:	2003012e 	.word	0x2003012e

080253a0 <__sfp_lock_release>:
 80253a0:	4801      	ldr	r0, [pc, #4]	; (80253a8 <__sfp_lock_release+0x8>)
 80253a2:	f000 b9e7 	b.w	8025774 <__retarget_lock_release_recursive>
 80253a6:	bf00      	nop
 80253a8:	2003012e 	.word	0x2003012e

080253ac <__sinit_lock_acquire>:
 80253ac:	4801      	ldr	r0, [pc, #4]	; (80253b4 <__sinit_lock_acquire+0x8>)
 80253ae:	f000 b9df 	b.w	8025770 <__retarget_lock_acquire_recursive>
 80253b2:	bf00      	nop
 80253b4:	2003012f 	.word	0x2003012f

080253b8 <__sinit_lock_release>:
 80253b8:	4801      	ldr	r0, [pc, #4]	; (80253c0 <__sinit_lock_release+0x8>)
 80253ba:	f000 b9db 	b.w	8025774 <__retarget_lock_release_recursive>
 80253be:	bf00      	nop
 80253c0:	2003012f 	.word	0x2003012f

080253c4 <__sinit>:
 80253c4:	b510      	push	{r4, lr}
 80253c6:	4604      	mov	r4, r0
 80253c8:	f7ff fff0 	bl	80253ac <__sinit_lock_acquire>
 80253cc:	69a3      	ldr	r3, [r4, #24]
 80253ce:	b11b      	cbz	r3, 80253d8 <__sinit+0x14>
 80253d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253d4:	f7ff bff0 	b.w	80253b8 <__sinit_lock_release>
 80253d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80253dc:	6523      	str	r3, [r4, #80]	; 0x50
 80253de:	4b13      	ldr	r3, [pc, #76]	; (802542c <__sinit+0x68>)
 80253e0:	4a13      	ldr	r2, [pc, #76]	; (8025430 <__sinit+0x6c>)
 80253e2:	681b      	ldr	r3, [r3, #0]
 80253e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80253e6:	42a3      	cmp	r3, r4
 80253e8:	bf04      	itt	eq
 80253ea:	2301      	moveq	r3, #1
 80253ec:	61a3      	streq	r3, [r4, #24]
 80253ee:	4620      	mov	r0, r4
 80253f0:	f000 f820 	bl	8025434 <__sfp>
 80253f4:	6060      	str	r0, [r4, #4]
 80253f6:	4620      	mov	r0, r4
 80253f8:	f000 f81c 	bl	8025434 <__sfp>
 80253fc:	60a0      	str	r0, [r4, #8]
 80253fe:	4620      	mov	r0, r4
 8025400:	f000 f818 	bl	8025434 <__sfp>
 8025404:	2200      	movs	r2, #0
 8025406:	60e0      	str	r0, [r4, #12]
 8025408:	2104      	movs	r1, #4
 802540a:	6860      	ldr	r0, [r4, #4]
 802540c:	f7ff ff82 	bl	8025314 <std>
 8025410:	68a0      	ldr	r0, [r4, #8]
 8025412:	2201      	movs	r2, #1
 8025414:	2109      	movs	r1, #9
 8025416:	f7ff ff7d 	bl	8025314 <std>
 802541a:	68e0      	ldr	r0, [r4, #12]
 802541c:	2202      	movs	r2, #2
 802541e:	2112      	movs	r1, #18
 8025420:	f7ff ff78 	bl	8025314 <std>
 8025424:	2301      	movs	r3, #1
 8025426:	61a3      	str	r3, [r4, #24]
 8025428:	e7d2      	b.n	80253d0 <__sinit+0xc>
 802542a:	bf00      	nop
 802542c:	080476dc 	.word	0x080476dc
 8025430:	0802535d 	.word	0x0802535d

08025434 <__sfp>:
 8025434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025436:	4607      	mov	r7, r0
 8025438:	f7ff ffac 	bl	8025394 <__sfp_lock_acquire>
 802543c:	4b1e      	ldr	r3, [pc, #120]	; (80254b8 <__sfp+0x84>)
 802543e:	681e      	ldr	r6, [r3, #0]
 8025440:	69b3      	ldr	r3, [r6, #24]
 8025442:	b913      	cbnz	r3, 802544a <__sfp+0x16>
 8025444:	4630      	mov	r0, r6
 8025446:	f7ff ffbd 	bl	80253c4 <__sinit>
 802544a:	3648      	adds	r6, #72	; 0x48
 802544c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025450:	3b01      	subs	r3, #1
 8025452:	d503      	bpl.n	802545c <__sfp+0x28>
 8025454:	6833      	ldr	r3, [r6, #0]
 8025456:	b30b      	cbz	r3, 802549c <__sfp+0x68>
 8025458:	6836      	ldr	r6, [r6, #0]
 802545a:	e7f7      	b.n	802544c <__sfp+0x18>
 802545c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025460:	b9d5      	cbnz	r5, 8025498 <__sfp+0x64>
 8025462:	4b16      	ldr	r3, [pc, #88]	; (80254bc <__sfp+0x88>)
 8025464:	60e3      	str	r3, [r4, #12]
 8025466:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802546a:	6665      	str	r5, [r4, #100]	; 0x64
 802546c:	f000 f97e 	bl	802576c <__retarget_lock_init_recursive>
 8025470:	f7ff ff96 	bl	80253a0 <__sfp_lock_release>
 8025474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802547c:	6025      	str	r5, [r4, #0]
 802547e:	61a5      	str	r5, [r4, #24]
 8025480:	2208      	movs	r2, #8
 8025482:	4629      	mov	r1, r5
 8025484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025488:	f000 f9be 	bl	8025808 <memset>
 802548c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025494:	4620      	mov	r0, r4
 8025496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025498:	3468      	adds	r4, #104	; 0x68
 802549a:	e7d9      	b.n	8025450 <__sfp+0x1c>
 802549c:	2104      	movs	r1, #4
 802549e:	4638      	mov	r0, r7
 80254a0:	f7ff ff62 	bl	8025368 <__sfmoreglue>
 80254a4:	4604      	mov	r4, r0
 80254a6:	6030      	str	r0, [r6, #0]
 80254a8:	2800      	cmp	r0, #0
 80254aa:	d1d5      	bne.n	8025458 <__sfp+0x24>
 80254ac:	f7ff ff78 	bl	80253a0 <__sfp_lock_release>
 80254b0:	230c      	movs	r3, #12
 80254b2:	603b      	str	r3, [r7, #0]
 80254b4:	e7ee      	b.n	8025494 <__sfp+0x60>
 80254b6:	bf00      	nop
 80254b8:	080476dc 	.word	0x080476dc
 80254bc:	ffff0001 	.word	0xffff0001

080254c0 <_fwalk_reent>:
 80254c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254c4:	4606      	mov	r6, r0
 80254c6:	4688      	mov	r8, r1
 80254c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80254cc:	2700      	movs	r7, #0
 80254ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80254d2:	f1b9 0901 	subs.w	r9, r9, #1
 80254d6:	d505      	bpl.n	80254e4 <_fwalk_reent+0x24>
 80254d8:	6824      	ldr	r4, [r4, #0]
 80254da:	2c00      	cmp	r4, #0
 80254dc:	d1f7      	bne.n	80254ce <_fwalk_reent+0xe>
 80254de:	4638      	mov	r0, r7
 80254e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80254e4:	89ab      	ldrh	r3, [r5, #12]
 80254e6:	2b01      	cmp	r3, #1
 80254e8:	d907      	bls.n	80254fa <_fwalk_reent+0x3a>
 80254ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80254ee:	3301      	adds	r3, #1
 80254f0:	d003      	beq.n	80254fa <_fwalk_reent+0x3a>
 80254f2:	4629      	mov	r1, r5
 80254f4:	4630      	mov	r0, r6
 80254f6:	47c0      	blx	r8
 80254f8:	4307      	orrs	r7, r0
 80254fa:	3568      	adds	r5, #104	; 0x68
 80254fc:	e7e9      	b.n	80254d2 <_fwalk_reent+0x12>
 80254fe:	Address 0x00000000080254fe is out of bounds.


08025500 <__libc_init_array>:
 8025500:	b570      	push	{r4, r5, r6, lr}
 8025502:	4d0d      	ldr	r5, [pc, #52]	; (8025538 <__libc_init_array+0x38>)
 8025504:	4c0d      	ldr	r4, [pc, #52]	; (802553c <__libc_init_array+0x3c>)
 8025506:	1b64      	subs	r4, r4, r5
 8025508:	10a4      	asrs	r4, r4, #2
 802550a:	2600      	movs	r6, #0
 802550c:	42a6      	cmp	r6, r4
 802550e:	d109      	bne.n	8025524 <__libc_init_array+0x24>
 8025510:	4d0b      	ldr	r5, [pc, #44]	; (8025540 <__libc_init_array+0x40>)
 8025512:	4c0c      	ldr	r4, [pc, #48]	; (8025544 <__libc_init_array+0x44>)
 8025514:	f005 f944 	bl	802a7a0 <_init>
 8025518:	1b64      	subs	r4, r4, r5
 802551a:	10a4      	asrs	r4, r4, #2
 802551c:	2600      	movs	r6, #0
 802551e:	42a6      	cmp	r6, r4
 8025520:	d105      	bne.n	802552e <__libc_init_array+0x2e>
 8025522:	bd70      	pop	{r4, r5, r6, pc}
 8025524:	f855 3b04 	ldr.w	r3, [r5], #4
 8025528:	4798      	blx	r3
 802552a:	3601      	adds	r6, #1
 802552c:	e7ee      	b.n	802550c <__libc_init_array+0xc>
 802552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025532:	4798      	blx	r3
 8025534:	3601      	adds	r6, #1
 8025536:	e7f2      	b.n	802551e <__libc_init_array+0x1e>
 8025538:	08047e64 	.word	0x08047e64
 802553c:	08047e64 	.word	0x08047e64
 8025540:	08047e64 	.word	0x08047e64
 8025544:	08047e68 	.word	0x08047e68

08025548 <localtime>:
 8025548:	b538      	push	{r3, r4, r5, lr}
 802554a:	4b0b      	ldr	r3, [pc, #44]	; (8025578 <localtime+0x30>)
 802554c:	681d      	ldr	r5, [r3, #0]
 802554e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8025550:	4604      	mov	r4, r0
 8025552:	b953      	cbnz	r3, 802556a <localtime+0x22>
 8025554:	2024      	movs	r0, #36	; 0x24
 8025556:	f000 f90f 	bl	8025778 <malloc>
 802555a:	4602      	mov	r2, r0
 802555c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802555e:	b920      	cbnz	r0, 802556a <localtime+0x22>
 8025560:	4b06      	ldr	r3, [pc, #24]	; (802557c <localtime+0x34>)
 8025562:	4807      	ldr	r0, [pc, #28]	; (8025580 <localtime+0x38>)
 8025564:	2132      	movs	r1, #50	; 0x32
 8025566:	f002 fd49 	bl	8027ffc <__assert_func>
 802556a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802556c:	4620      	mov	r0, r4
 802556e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025572:	f000 b807 	b.w	8025584 <localtime_r>
 8025576:	bf00      	nop
 8025578:	200004c4 	.word	0x200004c4
 802557c:	080476e0 	.word	0x080476e0
 8025580:	080476f7 	.word	0x080476f7

08025584 <localtime_r>:
 8025584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025588:	4680      	mov	r8, r0
 802558a:	9101      	str	r1, [sp, #4]
 802558c:	f003 fc90 	bl	8028eb0 <__gettzinfo>
 8025590:	9901      	ldr	r1, [sp, #4]
 8025592:	4605      	mov	r5, r0
 8025594:	4640      	mov	r0, r8
 8025596:	f003 fc8f 	bl	8028eb8 <gmtime_r>
 802559a:	6943      	ldr	r3, [r0, #20]
 802559c:	0799      	lsls	r1, r3, #30
 802559e:	4604      	mov	r4, r0
 80255a0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80255a4:	d105      	bne.n	80255b2 <localtime_r+0x2e>
 80255a6:	2264      	movs	r2, #100	; 0x64
 80255a8:	fb97 f3f2 	sdiv	r3, r7, r2
 80255ac:	fb02 7313 	mls	r3, r2, r3, r7
 80255b0:	bb73      	cbnz	r3, 8025610 <localtime_r+0x8c>
 80255b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80255b6:	fb97 f6f3 	sdiv	r6, r7, r3
 80255ba:	fb03 7616 	mls	r6, r3, r6, r7
 80255be:	fab6 f386 	clz	r3, r6
 80255c2:	095b      	lsrs	r3, r3, #5
 80255c4:	4e67      	ldr	r6, [pc, #412]	; (8025764 <localtime_r+0x1e0>)
 80255c6:	2230      	movs	r2, #48	; 0x30
 80255c8:	fb02 6603 	mla	r6, r2, r3, r6
 80255cc:	f002 fa66 	bl	8027a9c <__tz_lock>
 80255d0:	f002 fa70 	bl	8027ab4 <_tzset_unlocked>
 80255d4:	4b64      	ldr	r3, [pc, #400]	; (8025768 <localtime_r+0x1e4>)
 80255d6:	681b      	ldr	r3, [r3, #0]
 80255d8:	b34b      	cbz	r3, 802562e <localtime_r+0xaa>
 80255da:	686b      	ldr	r3, [r5, #4]
 80255dc:	42bb      	cmp	r3, r7
 80255de:	d119      	bne.n	8025614 <localtime_r+0x90>
 80255e0:	682f      	ldr	r7, [r5, #0]
 80255e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80255e6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80255ea:	b9df      	cbnz	r7, 8025624 <localtime_r+0xa0>
 80255ec:	4282      	cmp	r2, r0
 80255ee:	eb73 0101 	sbcs.w	r1, r3, r1
 80255f2:	da23      	bge.n	802563c <localtime_r+0xb8>
 80255f4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80255f8:	4282      	cmp	r2, r0
 80255fa:	eb73 0701 	sbcs.w	r7, r3, r1
 80255fe:	bfb4      	ite	lt
 8025600:	2701      	movlt	r7, #1
 8025602:	2700      	movge	r7, #0
 8025604:	4282      	cmp	r2, r0
 8025606:	418b      	sbcs	r3, r1
 8025608:	6227      	str	r7, [r4, #32]
 802560a:	db19      	blt.n	8025640 <localtime_r+0xbc>
 802560c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802560e:	e018      	b.n	8025642 <localtime_r+0xbe>
 8025610:	2301      	movs	r3, #1
 8025612:	e7d7      	b.n	80255c4 <localtime_r+0x40>
 8025614:	4638      	mov	r0, r7
 8025616:	f002 f997 	bl	8027948 <__tzcalc_limits>
 802561a:	2800      	cmp	r0, #0
 802561c:	d1e0      	bne.n	80255e0 <localtime_r+0x5c>
 802561e:	f04f 33ff 	mov.w	r3, #4294967295
 8025622:	e004      	b.n	802562e <localtime_r+0xaa>
 8025624:	4282      	cmp	r2, r0
 8025626:	eb73 0101 	sbcs.w	r1, r3, r1
 802562a:	da02      	bge.n	8025632 <localtime_r+0xae>
 802562c:	2300      	movs	r3, #0
 802562e:	6223      	str	r3, [r4, #32]
 8025630:	e7ec      	b.n	802560c <localtime_r+0x88>
 8025632:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025636:	4282      	cmp	r2, r0
 8025638:	418b      	sbcs	r3, r1
 802563a:	daf7      	bge.n	802562c <localtime_r+0xa8>
 802563c:	2301      	movs	r3, #1
 802563e:	6223      	str	r3, [r4, #32]
 8025640:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8025642:	6861      	ldr	r1, [r4, #4]
 8025644:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8025648:	203c      	movs	r0, #60	; 0x3c
 802564a:	fb93 f5f2 	sdiv	r5, r3, r2
 802564e:	fb02 3315 	mls	r3, r2, r5, r3
 8025652:	fb93 f2f0 	sdiv	r2, r3, r0
 8025656:	fb00 3012 	mls	r0, r0, r2, r3
 802565a:	6823      	ldr	r3, [r4, #0]
 802565c:	1a89      	subs	r1, r1, r2
 802565e:	68a2      	ldr	r2, [r4, #8]
 8025660:	6061      	str	r1, [r4, #4]
 8025662:	1a1b      	subs	r3, r3, r0
 8025664:	1b52      	subs	r2, r2, r5
 8025666:	2b3b      	cmp	r3, #59	; 0x3b
 8025668:	6023      	str	r3, [r4, #0]
 802566a:	60a2      	str	r2, [r4, #8]
 802566c:	dd35      	ble.n	80256da <localtime_r+0x156>
 802566e:	3101      	adds	r1, #1
 8025670:	6061      	str	r1, [r4, #4]
 8025672:	3b3c      	subs	r3, #60	; 0x3c
 8025674:	6023      	str	r3, [r4, #0]
 8025676:	6863      	ldr	r3, [r4, #4]
 8025678:	2b3b      	cmp	r3, #59	; 0x3b
 802567a:	dd34      	ble.n	80256e6 <localtime_r+0x162>
 802567c:	3201      	adds	r2, #1
 802567e:	60a2      	str	r2, [r4, #8]
 8025680:	3b3c      	subs	r3, #60	; 0x3c
 8025682:	6063      	str	r3, [r4, #4]
 8025684:	68a3      	ldr	r3, [r4, #8]
 8025686:	2b17      	cmp	r3, #23
 8025688:	dd33      	ble.n	80256f2 <localtime_r+0x16e>
 802568a:	69e2      	ldr	r2, [r4, #28]
 802568c:	3201      	adds	r2, #1
 802568e:	61e2      	str	r2, [r4, #28]
 8025690:	69a2      	ldr	r2, [r4, #24]
 8025692:	3201      	adds	r2, #1
 8025694:	2a06      	cmp	r2, #6
 8025696:	bfc8      	it	gt
 8025698:	2200      	movgt	r2, #0
 802569a:	61a2      	str	r2, [r4, #24]
 802569c:	68e2      	ldr	r2, [r4, #12]
 802569e:	3b18      	subs	r3, #24
 80256a0:	3201      	adds	r2, #1
 80256a2:	60a3      	str	r3, [r4, #8]
 80256a4:	6923      	ldr	r3, [r4, #16]
 80256a6:	60e2      	str	r2, [r4, #12]
 80256a8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80256ac:	428a      	cmp	r2, r1
 80256ae:	dd0e      	ble.n	80256ce <localtime_r+0x14a>
 80256b0:	2b0b      	cmp	r3, #11
 80256b2:	eba2 0201 	sub.w	r2, r2, r1
 80256b6:	60e2      	str	r2, [r4, #12]
 80256b8:	f103 0201 	add.w	r2, r3, #1
 80256bc:	bf09      	itett	eq
 80256be:	6963      	ldreq	r3, [r4, #20]
 80256c0:	6122      	strne	r2, [r4, #16]
 80256c2:	2200      	moveq	r2, #0
 80256c4:	3301      	addeq	r3, #1
 80256c6:	bf02      	ittt	eq
 80256c8:	6122      	streq	r2, [r4, #16]
 80256ca:	6163      	streq	r3, [r4, #20]
 80256cc:	61e2      	streq	r2, [r4, #28]
 80256ce:	f002 f9eb 	bl	8027aa8 <__tz_unlock>
 80256d2:	4620      	mov	r0, r4
 80256d4:	b002      	add	sp, #8
 80256d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256da:	2b00      	cmp	r3, #0
 80256dc:	dacb      	bge.n	8025676 <localtime_r+0xf2>
 80256de:	3901      	subs	r1, #1
 80256e0:	6061      	str	r1, [r4, #4]
 80256e2:	333c      	adds	r3, #60	; 0x3c
 80256e4:	e7c6      	b.n	8025674 <localtime_r+0xf0>
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	dacc      	bge.n	8025684 <localtime_r+0x100>
 80256ea:	3a01      	subs	r2, #1
 80256ec:	60a2      	str	r2, [r4, #8]
 80256ee:	333c      	adds	r3, #60	; 0x3c
 80256f0:	e7c7      	b.n	8025682 <localtime_r+0xfe>
 80256f2:	2b00      	cmp	r3, #0
 80256f4:	daeb      	bge.n	80256ce <localtime_r+0x14a>
 80256f6:	69e2      	ldr	r2, [r4, #28]
 80256f8:	3a01      	subs	r2, #1
 80256fa:	61e2      	str	r2, [r4, #28]
 80256fc:	69a2      	ldr	r2, [r4, #24]
 80256fe:	3a01      	subs	r2, #1
 8025700:	bf48      	it	mi
 8025702:	2206      	movmi	r2, #6
 8025704:	61a2      	str	r2, [r4, #24]
 8025706:	68e2      	ldr	r2, [r4, #12]
 8025708:	3318      	adds	r3, #24
 802570a:	3a01      	subs	r2, #1
 802570c:	60e2      	str	r2, [r4, #12]
 802570e:	60a3      	str	r3, [r4, #8]
 8025710:	2a00      	cmp	r2, #0
 8025712:	d1dc      	bne.n	80256ce <localtime_r+0x14a>
 8025714:	6923      	ldr	r3, [r4, #16]
 8025716:	3b01      	subs	r3, #1
 8025718:	d405      	bmi.n	8025726 <localtime_r+0x1a2>
 802571a:	6123      	str	r3, [r4, #16]
 802571c:	6923      	ldr	r3, [r4, #16]
 802571e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025722:	60e3      	str	r3, [r4, #12]
 8025724:	e7d3      	b.n	80256ce <localtime_r+0x14a>
 8025726:	230b      	movs	r3, #11
 8025728:	6123      	str	r3, [r4, #16]
 802572a:	6963      	ldr	r3, [r4, #20]
 802572c:	1e5a      	subs	r2, r3, #1
 802572e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8025732:	6162      	str	r2, [r4, #20]
 8025734:	079a      	lsls	r2, r3, #30
 8025736:	d105      	bne.n	8025744 <localtime_r+0x1c0>
 8025738:	2164      	movs	r1, #100	; 0x64
 802573a:	fb93 f2f1 	sdiv	r2, r3, r1
 802573e:	fb01 3212 	mls	r2, r1, r2, r3
 8025742:	b962      	cbnz	r2, 802575e <localtime_r+0x1da>
 8025744:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025748:	fb93 f1f2 	sdiv	r1, r3, r2
 802574c:	fb02 3311 	mls	r3, r2, r1, r3
 8025750:	fab3 f383 	clz	r3, r3
 8025754:	095b      	lsrs	r3, r3, #5
 8025756:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802575a:	61e3      	str	r3, [r4, #28]
 802575c:	e7de      	b.n	802571c <localtime_r+0x198>
 802575e:	2301      	movs	r3, #1
 8025760:	e7f9      	b.n	8025756 <localtime_r+0x1d2>
 8025762:	bf00      	nop
 8025764:	080477b4 	.word	0x080477b4
 8025768:	2003015c 	.word	0x2003015c

0802576c <__retarget_lock_init_recursive>:
 802576c:	4770      	bx	lr

0802576e <__retarget_lock_acquire>:
 802576e:	4770      	bx	lr

08025770 <__retarget_lock_acquire_recursive>:
 8025770:	4770      	bx	lr

08025772 <__retarget_lock_release>:
 8025772:	4770      	bx	lr

08025774 <__retarget_lock_release_recursive>:
 8025774:	4770      	bx	lr
 8025776:	Address 0x0000000008025776 is out of bounds.


08025778 <malloc>:
 8025778:	4b02      	ldr	r3, [pc, #8]	; (8025784 <malloc+0xc>)
 802577a:	4601      	mov	r1, r0
 802577c:	6818      	ldr	r0, [r3, #0]
 802577e:	f000 bb29 	b.w	8025dd4 <_malloc_r>
 8025782:	bf00      	nop
 8025784:	200004c4 	.word	0x200004c4

08025788 <free>:
 8025788:	4b02      	ldr	r3, [pc, #8]	; (8025794 <free+0xc>)
 802578a:	4601      	mov	r1, r0
 802578c:	6818      	ldr	r0, [r3, #0]
 802578e:	f000 bab5 	b.w	8025cfc <_free_r>
 8025792:	bf00      	nop
 8025794:	200004c4 	.word	0x200004c4

08025798 <memcmp>:
 8025798:	b510      	push	{r4, lr}
 802579a:	3901      	subs	r1, #1
 802579c:	4402      	add	r2, r0
 802579e:	4290      	cmp	r0, r2
 80257a0:	d101      	bne.n	80257a6 <memcmp+0xe>
 80257a2:	2000      	movs	r0, #0
 80257a4:	e005      	b.n	80257b2 <memcmp+0x1a>
 80257a6:	7803      	ldrb	r3, [r0, #0]
 80257a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80257ac:	42a3      	cmp	r3, r4
 80257ae:	d001      	beq.n	80257b4 <memcmp+0x1c>
 80257b0:	1b18      	subs	r0, r3, r4
 80257b2:	bd10      	pop	{r4, pc}
 80257b4:	3001      	adds	r0, #1
 80257b6:	e7f2      	b.n	802579e <memcmp+0x6>

080257b8 <memcpy>:
 80257b8:	440a      	add	r2, r1
 80257ba:	4291      	cmp	r1, r2
 80257bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80257c0:	d100      	bne.n	80257c4 <memcpy+0xc>
 80257c2:	4770      	bx	lr
 80257c4:	b510      	push	{r4, lr}
 80257c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80257ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80257ce:	4291      	cmp	r1, r2
 80257d0:	d1f9      	bne.n	80257c6 <memcpy+0xe>
 80257d2:	bd10      	pop	{r4, pc}

080257d4 <memmove>:
 80257d4:	4288      	cmp	r0, r1
 80257d6:	b510      	push	{r4, lr}
 80257d8:	eb01 0402 	add.w	r4, r1, r2
 80257dc:	d902      	bls.n	80257e4 <memmove+0x10>
 80257de:	4284      	cmp	r4, r0
 80257e0:	4623      	mov	r3, r4
 80257e2:	d807      	bhi.n	80257f4 <memmove+0x20>
 80257e4:	1e43      	subs	r3, r0, #1
 80257e6:	42a1      	cmp	r1, r4
 80257e8:	d008      	beq.n	80257fc <memmove+0x28>
 80257ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80257ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80257f2:	e7f8      	b.n	80257e6 <memmove+0x12>
 80257f4:	4402      	add	r2, r0
 80257f6:	4601      	mov	r1, r0
 80257f8:	428a      	cmp	r2, r1
 80257fa:	d100      	bne.n	80257fe <memmove+0x2a>
 80257fc:	bd10      	pop	{r4, pc}
 80257fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025806:	e7f7      	b.n	80257f8 <memmove+0x24>

08025808 <memset>:
 8025808:	4402      	add	r2, r0
 802580a:	4603      	mov	r3, r0
 802580c:	4293      	cmp	r3, r2
 802580e:	d100      	bne.n	8025812 <memset+0xa>
 8025810:	4770      	bx	lr
 8025812:	f803 1b01 	strb.w	r1, [r3], #1
 8025816:	e7f9      	b.n	802580c <memset+0x4>

08025818 <validate_structure>:
 8025818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802581a:	6801      	ldr	r1, [r0, #0]
 802581c:	293b      	cmp	r1, #59	; 0x3b
 802581e:	4604      	mov	r4, r0
 8025820:	d911      	bls.n	8025846 <validate_structure+0x2e>
 8025822:	223c      	movs	r2, #60	; 0x3c
 8025824:	4668      	mov	r0, sp
 8025826:	f002 fc17 	bl	8028058 <div>
 802582a:	9a01      	ldr	r2, [sp, #4]
 802582c:	6863      	ldr	r3, [r4, #4]
 802582e:	9900      	ldr	r1, [sp, #0]
 8025830:	2a00      	cmp	r2, #0
 8025832:	440b      	add	r3, r1
 8025834:	6063      	str	r3, [r4, #4]
 8025836:	bfbb      	ittet	lt
 8025838:	323c      	addlt	r2, #60	; 0x3c
 802583a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802583e:	6022      	strge	r2, [r4, #0]
 8025840:	6022      	strlt	r2, [r4, #0]
 8025842:	bfb8      	it	lt
 8025844:	6063      	strlt	r3, [r4, #4]
 8025846:	6861      	ldr	r1, [r4, #4]
 8025848:	293b      	cmp	r1, #59	; 0x3b
 802584a:	d911      	bls.n	8025870 <validate_structure+0x58>
 802584c:	223c      	movs	r2, #60	; 0x3c
 802584e:	4668      	mov	r0, sp
 8025850:	f002 fc02 	bl	8028058 <div>
 8025854:	9a01      	ldr	r2, [sp, #4]
 8025856:	68a3      	ldr	r3, [r4, #8]
 8025858:	9900      	ldr	r1, [sp, #0]
 802585a:	2a00      	cmp	r2, #0
 802585c:	440b      	add	r3, r1
 802585e:	60a3      	str	r3, [r4, #8]
 8025860:	bfbb      	ittet	lt
 8025862:	323c      	addlt	r2, #60	; 0x3c
 8025864:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8025868:	6062      	strge	r2, [r4, #4]
 802586a:	6062      	strlt	r2, [r4, #4]
 802586c:	bfb8      	it	lt
 802586e:	60a3      	strlt	r3, [r4, #8]
 8025870:	68a1      	ldr	r1, [r4, #8]
 8025872:	2917      	cmp	r1, #23
 8025874:	d911      	bls.n	802589a <validate_structure+0x82>
 8025876:	2218      	movs	r2, #24
 8025878:	4668      	mov	r0, sp
 802587a:	f002 fbed 	bl	8028058 <div>
 802587e:	9a01      	ldr	r2, [sp, #4]
 8025880:	68e3      	ldr	r3, [r4, #12]
 8025882:	9900      	ldr	r1, [sp, #0]
 8025884:	2a00      	cmp	r2, #0
 8025886:	440b      	add	r3, r1
 8025888:	60e3      	str	r3, [r4, #12]
 802588a:	bfbb      	ittet	lt
 802588c:	3218      	addlt	r2, #24
 802588e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8025892:	60a2      	strge	r2, [r4, #8]
 8025894:	60a2      	strlt	r2, [r4, #8]
 8025896:	bfb8      	it	lt
 8025898:	60e3      	strlt	r3, [r4, #12]
 802589a:	6921      	ldr	r1, [r4, #16]
 802589c:	290b      	cmp	r1, #11
 802589e:	d911      	bls.n	80258c4 <validate_structure+0xac>
 80258a0:	220c      	movs	r2, #12
 80258a2:	4668      	mov	r0, sp
 80258a4:	f002 fbd8 	bl	8028058 <div>
 80258a8:	9a01      	ldr	r2, [sp, #4]
 80258aa:	6963      	ldr	r3, [r4, #20]
 80258ac:	9900      	ldr	r1, [sp, #0]
 80258ae:	2a00      	cmp	r2, #0
 80258b0:	440b      	add	r3, r1
 80258b2:	6163      	str	r3, [r4, #20]
 80258b4:	bfbb      	ittet	lt
 80258b6:	320c      	addlt	r2, #12
 80258b8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80258bc:	6122      	strge	r2, [r4, #16]
 80258be:	6122      	strlt	r2, [r4, #16]
 80258c0:	bfb8      	it	lt
 80258c2:	6163      	strlt	r3, [r4, #20]
 80258c4:	6963      	ldr	r3, [r4, #20]
 80258c6:	0798      	lsls	r0, r3, #30
 80258c8:	d120      	bne.n	802590c <validate_structure+0xf4>
 80258ca:	2164      	movs	r1, #100	; 0x64
 80258cc:	fb93 f2f1 	sdiv	r2, r3, r1
 80258d0:	fb01 3212 	mls	r2, r1, r2, r3
 80258d4:	b9e2      	cbnz	r2, 8025910 <validate_structure+0xf8>
 80258d6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80258da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80258de:	fb93 f1f2 	sdiv	r1, r3, r2
 80258e2:	fb02 3311 	mls	r3, r2, r1, r3
 80258e6:	2b00      	cmp	r3, #0
 80258e8:	bf14      	ite	ne
 80258ea:	231c      	movne	r3, #28
 80258ec:	231d      	moveq	r3, #29
 80258ee:	68e2      	ldr	r2, [r4, #12]
 80258f0:	2a00      	cmp	r2, #0
 80258f2:	dc0f      	bgt.n	8025914 <validate_structure+0xfc>
 80258f4:	4f33      	ldr	r7, [pc, #204]	; (80259c4 <validate_structure+0x1ac>)
 80258f6:	260b      	movs	r6, #11
 80258f8:	2064      	movs	r0, #100	; 0x64
 80258fa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80258fe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8025902:	f1bc 0f00 	cmp.w	ip, #0
 8025906:	dd31      	ble.n	802596c <validate_structure+0x154>
 8025908:	b003      	add	sp, #12
 802590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802590c:	231c      	movs	r3, #28
 802590e:	e7ee      	b.n	80258ee <validate_structure+0xd6>
 8025910:	231d      	movs	r3, #29
 8025912:	e7ec      	b.n	80258ee <validate_structure+0xd6>
 8025914:	4e2b      	ldr	r6, [pc, #172]	; (80259c4 <validate_structure+0x1ac>)
 8025916:	2700      	movs	r7, #0
 8025918:	2064      	movs	r0, #100	; 0x64
 802591a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802591e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8025922:	2a01      	cmp	r2, #1
 8025924:	bf14      	ite	ne
 8025926:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802592a:	469c      	moveq	ip, r3
 802592c:	4561      	cmp	r1, ip
 802592e:	ddeb      	ble.n	8025908 <validate_structure+0xf0>
 8025930:	3201      	adds	r2, #1
 8025932:	eba1 010c 	sub.w	r1, r1, ip
 8025936:	2a0c      	cmp	r2, #12
 8025938:	60e1      	str	r1, [r4, #12]
 802593a:	6122      	str	r2, [r4, #16]
 802593c:	d1ef      	bne.n	802591e <validate_structure+0x106>
 802593e:	6963      	ldr	r3, [r4, #20]
 8025940:	1c5a      	adds	r2, r3, #1
 8025942:	0791      	lsls	r1, r2, #30
 8025944:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8025948:	d137      	bne.n	80259ba <validate_structure+0x1a2>
 802594a:	fb92 f1f0 	sdiv	r1, r2, r0
 802594e:	fb00 2211 	mls	r2, r0, r1, r2
 8025952:	2a00      	cmp	r2, #0
 8025954:	d133      	bne.n	80259be <validate_structure+0x1a6>
 8025956:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802595a:	fb93 f2f5 	sdiv	r2, r3, r5
 802595e:	fb05 3312 	mls	r3, r5, r2, r3
 8025962:	2b00      	cmp	r3, #0
 8025964:	bf14      	ite	ne
 8025966:	231c      	movne	r3, #28
 8025968:	231d      	moveq	r3, #29
 802596a:	e7d8      	b.n	802591e <validate_structure+0x106>
 802596c:	6921      	ldr	r1, [r4, #16]
 802596e:	3901      	subs	r1, #1
 8025970:	6121      	str	r1, [r4, #16]
 8025972:	3101      	adds	r1, #1
 8025974:	d114      	bne.n	80259a0 <validate_structure+0x188>
 8025976:	6963      	ldr	r3, [r4, #20]
 8025978:	1e5a      	subs	r2, r3, #1
 802597a:	0791      	lsls	r1, r2, #30
 802597c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8025980:	d117      	bne.n	80259b2 <validate_structure+0x19a>
 8025982:	fb92 f1f0 	sdiv	r1, r2, r0
 8025986:	fb00 2211 	mls	r2, r0, r1, r2
 802598a:	b9a2      	cbnz	r2, 80259b6 <validate_structure+0x19e>
 802598c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8025990:	fb93 f2f5 	sdiv	r2, r3, r5
 8025994:	fb05 3312 	mls	r3, r5, r2, r3
 8025998:	2b00      	cmp	r3, #0
 802599a:	bf14      	ite	ne
 802599c:	231c      	movne	r3, #28
 802599e:	231d      	moveq	r3, #29
 80259a0:	6922      	ldr	r2, [r4, #16]
 80259a2:	2a01      	cmp	r2, #1
 80259a4:	bf14      	ite	ne
 80259a6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80259aa:	461a      	moveq	r2, r3
 80259ac:	4462      	add	r2, ip
 80259ae:	60e2      	str	r2, [r4, #12]
 80259b0:	e7a5      	b.n	80258fe <validate_structure+0xe6>
 80259b2:	231c      	movs	r3, #28
 80259b4:	e7f4      	b.n	80259a0 <validate_structure+0x188>
 80259b6:	231d      	movs	r3, #29
 80259b8:	e7f2      	b.n	80259a0 <validate_structure+0x188>
 80259ba:	231c      	movs	r3, #28
 80259bc:	e7af      	b.n	802591e <validate_structure+0x106>
 80259be:	231d      	movs	r3, #29
 80259c0:	e7ad      	b.n	802591e <validate_structure+0x106>
 80259c2:	bf00      	nop
 80259c4:	08047754 	.word	0x08047754

080259c8 <mktime>:
 80259c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259cc:	b085      	sub	sp, #20
 80259ce:	4607      	mov	r7, r0
 80259d0:	f003 fa6e 	bl	8028eb0 <__gettzinfo>
 80259d4:	4681      	mov	r9, r0
 80259d6:	4638      	mov	r0, r7
 80259d8:	f7ff ff1e 	bl	8025818 <validate_structure>
 80259dc:	e9d7 4000 	ldrd	r4, r0, [r7]
 80259e0:	233c      	movs	r3, #60	; 0x3c
 80259e2:	fb03 4400 	mla	r4, r3, r0, r4
 80259e6:	68b8      	ldr	r0, [r7, #8]
 80259e8:	4abc      	ldr	r2, [pc, #752]	; (8025cdc <mktime+0x314>)
 80259ea:	697e      	ldr	r6, [r7, #20]
 80259ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80259f0:	fb03 4400 	mla	r4, r3, r0, r4
 80259f4:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80259f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80259fc:	3d01      	subs	r5, #1
 80259fe:	2b01      	cmp	r3, #1
 8025a00:	4415      	add	r5, r2
 8025a02:	dd11      	ble.n	8025a28 <mktime+0x60>
 8025a04:	07b1      	lsls	r1, r6, #30
 8025a06:	d10f      	bne.n	8025a28 <mktime+0x60>
 8025a08:	2264      	movs	r2, #100	; 0x64
 8025a0a:	fb96 f3f2 	sdiv	r3, r6, r2
 8025a0e:	fb02 6313 	mls	r3, r2, r3, r6
 8025a12:	b943      	cbnz	r3, 8025a26 <mktime+0x5e>
 8025a14:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025a18:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025a1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025a20:	fb02 3311 	mls	r3, r2, r1, r3
 8025a24:	b903      	cbnz	r3, 8025a28 <mktime+0x60>
 8025a26:	3501      	adds	r5, #1
 8025a28:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8025a2c:	3310      	adds	r3, #16
 8025a2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8025a32:	4293      	cmp	r3, r2
 8025a34:	61fd      	str	r5, [r7, #28]
 8025a36:	f200 815d 	bhi.w	8025cf4 <mktime+0x32c>
 8025a3a:	2e46      	cmp	r6, #70	; 0x46
 8025a3c:	dd71      	ble.n	8025b22 <mktime+0x15a>
 8025a3e:	2346      	movs	r3, #70	; 0x46
 8025a40:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025a44:	2164      	movs	r1, #100	; 0x64
 8025a46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025a4a:	079a      	lsls	r2, r3, #30
 8025a4c:	d163      	bne.n	8025b16 <mktime+0x14e>
 8025a4e:	fb93 f2f1 	sdiv	r2, r3, r1
 8025a52:	fb01 3212 	mls	r2, r1, r2, r3
 8025a56:	2a00      	cmp	r2, #0
 8025a58:	d160      	bne.n	8025b1c <mktime+0x154>
 8025a5a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025a5e:	fb92 fef0 	sdiv	lr, r2, r0
 8025a62:	fb00 221e 	mls	r2, r0, lr, r2
 8025a66:	2a00      	cmp	r2, #0
 8025a68:	bf14      	ite	ne
 8025a6a:	4662      	movne	r2, ip
 8025a6c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025a70:	3301      	adds	r3, #1
 8025a72:	429e      	cmp	r6, r3
 8025a74:	4415      	add	r5, r2
 8025a76:	d1e8      	bne.n	8025a4a <mktime+0x82>
 8025a78:	4b99      	ldr	r3, [pc, #612]	; (8025ce0 <mktime+0x318>)
 8025a7a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8025a7e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8025a82:	f002 f80b 	bl	8027a9c <__tz_lock>
 8025a86:	f002 f815 	bl	8027ab4 <_tzset_unlocked>
 8025a8a:	4b96      	ldr	r3, [pc, #600]	; (8025ce4 <mktime+0x31c>)
 8025a8c:	f8d3 b000 	ldr.w	fp, [r3]
 8025a90:	f1bb 0f00 	cmp.w	fp, #0
 8025a94:	d039      	beq.n	8025b0a <mktime+0x142>
 8025a96:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8025a9a:	6978      	ldr	r0, [r7, #20]
 8025a9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8025aa0:	f1bb 0f01 	cmp.w	fp, #1
 8025aa4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025aa8:	46da      	mov	sl, fp
 8025aaa:	bfa8      	it	ge
 8025aac:	f04f 0a01 	movge.w	sl, #1
 8025ab0:	4283      	cmp	r3, r0
 8025ab2:	d178      	bne.n	8025ba6 <mktime+0x1de>
 8025ab4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8025ab8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025abc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8025ac0:	1a5b      	subs	r3, r3, r1
 8025ac2:	9302      	str	r3, [sp, #8]
 8025ac4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8025ac8:	9303      	str	r3, [sp, #12]
 8025aca:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8025ace:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8025ad2:	9301      	str	r3, [sp, #4]
 8025ad4:	ebb3 0c02 	subs.w	ip, r3, r2
 8025ad8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8025adc:	4564      	cmp	r4, ip
 8025ade:	eb78 0300 	sbcs.w	r3, r8, r0
 8025ae2:	da66      	bge.n	8025bb2 <mktime+0x1ea>
 8025ae4:	f8d9 3000 	ldr.w	r3, [r9]
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	d06f      	beq.n	8025bcc <mktime+0x204>
 8025aec:	9b02      	ldr	r3, [sp, #8]
 8025aee:	429c      	cmp	r4, r3
 8025af0:	9b03      	ldr	r3, [sp, #12]
 8025af2:	eb78 0303 	sbcs.w	r3, r8, r3
 8025af6:	db03      	blt.n	8025b00 <mktime+0x138>
 8025af8:	4564      	cmp	r4, ip
 8025afa:	eb78 0300 	sbcs.w	r3, r8, r0
 8025afe:	db6b      	blt.n	8025bd8 <mktime+0x210>
 8025b00:	f1bb 0f00 	cmp.w	fp, #0
 8025b04:	f04f 0b00 	mov.w	fp, #0
 8025b08:	da6b      	bge.n	8025be2 <mktime+0x21a>
 8025b0a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8025b0e:	190c      	adds	r4, r1, r4
 8025b10:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025b14:	e0a9      	b.n	8025c6a <mktime+0x2a2>
 8025b16:	f240 126d 	movw	r2, #365	; 0x16d
 8025b1a:	e7a9      	b.n	8025a70 <mktime+0xa8>
 8025b1c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025b20:	e7a6      	b.n	8025a70 <mktime+0xa8>
 8025b22:	d0a9      	beq.n	8025a78 <mktime+0xb0>
 8025b24:	2345      	movs	r3, #69	; 0x45
 8025b26:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025b2a:	2164      	movs	r1, #100	; 0x64
 8025b2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025b30:	e012      	b.n	8025b58 <mktime+0x190>
 8025b32:	bb62      	cbnz	r2, 8025b8e <mktime+0x1c6>
 8025b34:	fb93 f2f1 	sdiv	r2, r3, r1
 8025b38:	fb01 3212 	mls	r2, r1, r2, r3
 8025b3c:	bb52      	cbnz	r2, 8025b94 <mktime+0x1cc>
 8025b3e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025b42:	fb92 fef0 	sdiv	lr, r2, r0
 8025b46:	fb00 221e 	mls	r2, r0, lr, r2
 8025b4a:	2a00      	cmp	r2, #0
 8025b4c:	bf14      	ite	ne
 8025b4e:	4662      	movne	r2, ip
 8025b50:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025b54:	1aad      	subs	r5, r5, r2
 8025b56:	3b01      	subs	r3, #1
 8025b58:	429e      	cmp	r6, r3
 8025b5a:	f003 0203 	and.w	r2, r3, #3
 8025b5e:	dbe8      	blt.n	8025b32 <mktime+0x16a>
 8025b60:	b9da      	cbnz	r2, 8025b9a <mktime+0x1d2>
 8025b62:	2264      	movs	r2, #100	; 0x64
 8025b64:	fb96 f3f2 	sdiv	r3, r6, r2
 8025b68:	fb02 6313 	mls	r3, r2, r3, r6
 8025b6c:	b9c3      	cbnz	r3, 8025ba0 <mktime+0x1d8>
 8025b6e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025b72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025b76:	fb93 f1f2 	sdiv	r1, r3, r2
 8025b7a:	fb02 3311 	mls	r3, r2, r1, r3
 8025b7e:	2b00      	cmp	r3, #0
 8025b80:	f240 136d 	movw	r3, #365	; 0x16d
 8025b84:	bf08      	it	eq
 8025b86:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8025b8a:	1aed      	subs	r5, r5, r3
 8025b8c:	e774      	b.n	8025a78 <mktime+0xb0>
 8025b8e:	f240 126d 	movw	r2, #365	; 0x16d
 8025b92:	e7df      	b.n	8025b54 <mktime+0x18c>
 8025b94:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025b98:	e7dc      	b.n	8025b54 <mktime+0x18c>
 8025b9a:	f240 136d 	movw	r3, #365	; 0x16d
 8025b9e:	e7f4      	b.n	8025b8a <mktime+0x1c2>
 8025ba0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8025ba4:	e7f1      	b.n	8025b8a <mktime+0x1c2>
 8025ba6:	f001 fecf 	bl	8027948 <__tzcalc_limits>
 8025baa:	2800      	cmp	r0, #0
 8025bac:	d182      	bne.n	8025ab4 <mktime+0xec>
 8025bae:	46d3      	mov	fp, sl
 8025bb0:	e050      	b.n	8025c54 <mktime+0x28c>
 8025bb2:	9b01      	ldr	r3, [sp, #4]
 8025bb4:	1a5b      	subs	r3, r3, r1
 8025bb6:	9301      	str	r3, [sp, #4]
 8025bb8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8025bbc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8025bc0:	9b01      	ldr	r3, [sp, #4]
 8025bc2:	429c      	cmp	r4, r3
 8025bc4:	eb78 030e 	sbcs.w	r3, r8, lr
 8025bc8:	dbf1      	blt.n	8025bae <mktime+0x1e6>
 8025bca:	e78b      	b.n	8025ae4 <mktime+0x11c>
 8025bcc:	9b02      	ldr	r3, [sp, #8]
 8025bce:	429c      	cmp	r4, r3
 8025bd0:	9b03      	ldr	r3, [sp, #12]
 8025bd2:	eb78 0303 	sbcs.w	r3, r8, r3
 8025bd6:	db8f      	blt.n	8025af8 <mktime+0x130>
 8025bd8:	f1bb 0f00 	cmp.w	fp, #0
 8025bdc:	db3e      	blt.n	8025c5c <mktime+0x294>
 8025bde:	f04f 0b01 	mov.w	fp, #1
 8025be2:	ea8a 0a0b 	eor.w	sl, sl, fp
 8025be6:	f1ba 0f01 	cmp.w	sl, #1
 8025bea:	d133      	bne.n	8025c54 <mktime+0x28c>
 8025bec:	f1bb 0f00 	cmp.w	fp, #0
 8025bf0:	d04e      	beq.n	8025c90 <mktime+0x2c8>
 8025bf2:	1a52      	subs	r2, r2, r1
 8025bf4:	683b      	ldr	r3, [r7, #0]
 8025bf6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8025bfa:	4413      	add	r3, r2
 8025bfc:	1914      	adds	r4, r2, r4
 8025bfe:	603b      	str	r3, [r7, #0]
 8025c00:	4638      	mov	r0, r7
 8025c02:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8025c06:	f7ff fe07 	bl	8025818 <validate_structure>
 8025c0a:	68fa      	ldr	r2, [r7, #12]
 8025c0c:	ebb2 020a 	subs.w	r2, r2, sl
 8025c10:	d020      	beq.n	8025c54 <mktime+0x28c>
 8025c12:	2a01      	cmp	r2, #1
 8025c14:	dc3e      	bgt.n	8025c94 <mktime+0x2cc>
 8025c16:	1c90      	adds	r0, r2, #2
 8025c18:	bfd8      	it	le
 8025c1a:	2201      	movle	r2, #1
 8025c1c:	69fb      	ldr	r3, [r7, #28]
 8025c1e:	18d3      	adds	r3, r2, r3
 8025c20:	4415      	add	r5, r2
 8025c22:	d540      	bpl.n	8025ca6 <mktime+0x2de>
 8025c24:	1e73      	subs	r3, r6, #1
 8025c26:	0799      	lsls	r1, r3, #30
 8025c28:	d137      	bne.n	8025c9a <mktime+0x2d2>
 8025c2a:	2264      	movs	r2, #100	; 0x64
 8025c2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025c30:	fb02 3311 	mls	r3, r2, r1, r3
 8025c34:	bba3      	cbnz	r3, 8025ca0 <mktime+0x2d8>
 8025c36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025c3a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8025c3e:	fb96 f2f3 	sdiv	r2, r6, r3
 8025c42:	fb03 6612 	mls	r6, r3, r2, r6
 8025c46:	2e00      	cmp	r6, #0
 8025c48:	f240 136d 	movw	r3, #365	; 0x16d
 8025c4c:	bf18      	it	ne
 8025c4e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8025c52:	61fb      	str	r3, [r7, #28]
 8025c54:	f1bb 0f01 	cmp.w	fp, #1
 8025c58:	f47f af57 	bne.w	8025b0a <mktime+0x142>
 8025c5c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025c60:	190c      	adds	r4, r1, r4
 8025c62:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025c66:	f04f 0b01 	mov.w	fp, #1
 8025c6a:	f001 ff1d 	bl	8027aa8 <__tz_unlock>
 8025c6e:	3504      	adds	r5, #4
 8025c70:	2307      	movs	r3, #7
 8025c72:	fb95 f3f3 	sdiv	r3, r5, r3
 8025c76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8025c7a:	1aed      	subs	r5, r5, r3
 8025c7c:	bf48      	it	mi
 8025c7e:	3507      	addmi	r5, #7
 8025c80:	f8c7 b020 	str.w	fp, [r7, #32]
 8025c84:	61bd      	str	r5, [r7, #24]
 8025c86:	4620      	mov	r0, r4
 8025c88:	4641      	mov	r1, r8
 8025c8a:	b005      	add	sp, #20
 8025c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c90:	1a8a      	subs	r2, r1, r2
 8025c92:	e7af      	b.n	8025bf4 <mktime+0x22c>
 8025c94:	f04f 32ff 	mov.w	r2, #4294967295
 8025c98:	e7c0      	b.n	8025c1c <mktime+0x254>
 8025c9a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8025c9e:	e7d8      	b.n	8025c52 <mktime+0x28a>
 8025ca0:	f240 136d 	movw	r3, #365	; 0x16d
 8025ca4:	e7d5      	b.n	8025c52 <mktime+0x28a>
 8025ca6:	07b2      	lsls	r2, r6, #30
 8025ca8:	d11e      	bne.n	8025ce8 <mktime+0x320>
 8025caa:	2164      	movs	r1, #100	; 0x64
 8025cac:	fb96 f2f1 	sdiv	r2, r6, r1
 8025cb0:	fb01 6212 	mls	r2, r1, r2, r6
 8025cb4:	b9da      	cbnz	r2, 8025cee <mktime+0x326>
 8025cb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025cba:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8025cbe:	fb96 f1f2 	sdiv	r1, r6, r2
 8025cc2:	fb02 6611 	mls	r6, r2, r1, r6
 8025cc6:	2e00      	cmp	r6, #0
 8025cc8:	f240 126d 	movw	r2, #365	; 0x16d
 8025ccc:	bf08      	it	eq
 8025cce:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025cd2:	4293      	cmp	r3, r2
 8025cd4:	bfa8      	it	ge
 8025cd6:	1a9b      	subge	r3, r3, r2
 8025cd8:	e7bb      	b.n	8025c52 <mktime+0x28a>
 8025cda:	bf00      	nop
 8025cdc:	08047784 	.word	0x08047784
 8025ce0:	00015180 	.word	0x00015180
 8025ce4:	2003015c 	.word	0x2003015c
 8025ce8:	f240 126d 	movw	r2, #365	; 0x16d
 8025cec:	e7f1      	b.n	8025cd2 <mktime+0x30a>
 8025cee:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025cf2:	e7ee      	b.n	8025cd2 <mktime+0x30a>
 8025cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8025cf8:	46a0      	mov	r8, r4
 8025cfa:	e7c4      	b.n	8025c86 <mktime+0x2be>

08025cfc <_free_r>:
 8025cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025cfe:	2900      	cmp	r1, #0
 8025d00:	d044      	beq.n	8025d8c <_free_r+0x90>
 8025d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025d06:	9001      	str	r0, [sp, #4]
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8025d0e:	bfb8      	it	lt
 8025d10:	18e4      	addlt	r4, r4, r3
 8025d12:	f003 f9fd 	bl	8029110 <__malloc_lock>
 8025d16:	4a1e      	ldr	r2, [pc, #120]	; (8025d90 <_free_r+0x94>)
 8025d18:	9801      	ldr	r0, [sp, #4]
 8025d1a:	6813      	ldr	r3, [r2, #0]
 8025d1c:	b933      	cbnz	r3, 8025d2c <_free_r+0x30>
 8025d1e:	6063      	str	r3, [r4, #4]
 8025d20:	6014      	str	r4, [r2, #0]
 8025d22:	b003      	add	sp, #12
 8025d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025d28:	f003 b9f8 	b.w	802911c <__malloc_unlock>
 8025d2c:	42a3      	cmp	r3, r4
 8025d2e:	d908      	bls.n	8025d42 <_free_r+0x46>
 8025d30:	6825      	ldr	r5, [r4, #0]
 8025d32:	1961      	adds	r1, r4, r5
 8025d34:	428b      	cmp	r3, r1
 8025d36:	bf01      	itttt	eq
 8025d38:	6819      	ldreq	r1, [r3, #0]
 8025d3a:	685b      	ldreq	r3, [r3, #4]
 8025d3c:	1949      	addeq	r1, r1, r5
 8025d3e:	6021      	streq	r1, [r4, #0]
 8025d40:	e7ed      	b.n	8025d1e <_free_r+0x22>
 8025d42:	461a      	mov	r2, r3
 8025d44:	685b      	ldr	r3, [r3, #4]
 8025d46:	b10b      	cbz	r3, 8025d4c <_free_r+0x50>
 8025d48:	42a3      	cmp	r3, r4
 8025d4a:	d9fa      	bls.n	8025d42 <_free_r+0x46>
 8025d4c:	6811      	ldr	r1, [r2, #0]
 8025d4e:	1855      	adds	r5, r2, r1
 8025d50:	42a5      	cmp	r5, r4
 8025d52:	d10b      	bne.n	8025d6c <_free_r+0x70>
 8025d54:	6824      	ldr	r4, [r4, #0]
 8025d56:	4421      	add	r1, r4
 8025d58:	1854      	adds	r4, r2, r1
 8025d5a:	42a3      	cmp	r3, r4
 8025d5c:	6011      	str	r1, [r2, #0]
 8025d5e:	d1e0      	bne.n	8025d22 <_free_r+0x26>
 8025d60:	681c      	ldr	r4, [r3, #0]
 8025d62:	685b      	ldr	r3, [r3, #4]
 8025d64:	6053      	str	r3, [r2, #4]
 8025d66:	4421      	add	r1, r4
 8025d68:	6011      	str	r1, [r2, #0]
 8025d6a:	e7da      	b.n	8025d22 <_free_r+0x26>
 8025d6c:	d902      	bls.n	8025d74 <_free_r+0x78>
 8025d6e:	230c      	movs	r3, #12
 8025d70:	6003      	str	r3, [r0, #0]
 8025d72:	e7d6      	b.n	8025d22 <_free_r+0x26>
 8025d74:	6825      	ldr	r5, [r4, #0]
 8025d76:	1961      	adds	r1, r4, r5
 8025d78:	428b      	cmp	r3, r1
 8025d7a:	bf04      	itt	eq
 8025d7c:	6819      	ldreq	r1, [r3, #0]
 8025d7e:	685b      	ldreq	r3, [r3, #4]
 8025d80:	6063      	str	r3, [r4, #4]
 8025d82:	bf04      	itt	eq
 8025d84:	1949      	addeq	r1, r1, r5
 8025d86:	6021      	streq	r1, [r4, #0]
 8025d88:	6054      	str	r4, [r2, #4]
 8025d8a:	e7ca      	b.n	8025d22 <_free_r+0x26>
 8025d8c:	b003      	add	sp, #12
 8025d8e:	bd30      	pop	{r4, r5, pc}
 8025d90:	20030134 	.word	0x20030134

08025d94 <sbrk_aligned>:
 8025d94:	b570      	push	{r4, r5, r6, lr}
 8025d96:	4e0e      	ldr	r6, [pc, #56]	; (8025dd0 <sbrk_aligned+0x3c>)
 8025d98:	460c      	mov	r4, r1
 8025d9a:	6831      	ldr	r1, [r6, #0]
 8025d9c:	4605      	mov	r5, r0
 8025d9e:	b911      	cbnz	r1, 8025da6 <sbrk_aligned+0x12>
 8025da0:	f000 fe76 	bl	8026a90 <_sbrk_r>
 8025da4:	6030      	str	r0, [r6, #0]
 8025da6:	4621      	mov	r1, r4
 8025da8:	4628      	mov	r0, r5
 8025daa:	f000 fe71 	bl	8026a90 <_sbrk_r>
 8025dae:	1c43      	adds	r3, r0, #1
 8025db0:	d00a      	beq.n	8025dc8 <sbrk_aligned+0x34>
 8025db2:	1cc4      	adds	r4, r0, #3
 8025db4:	f024 0403 	bic.w	r4, r4, #3
 8025db8:	42a0      	cmp	r0, r4
 8025dba:	d007      	beq.n	8025dcc <sbrk_aligned+0x38>
 8025dbc:	1a21      	subs	r1, r4, r0
 8025dbe:	4628      	mov	r0, r5
 8025dc0:	f000 fe66 	bl	8026a90 <_sbrk_r>
 8025dc4:	3001      	adds	r0, #1
 8025dc6:	d101      	bne.n	8025dcc <sbrk_aligned+0x38>
 8025dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8025dcc:	4620      	mov	r0, r4
 8025dce:	bd70      	pop	{r4, r5, r6, pc}
 8025dd0:	20030138 	.word	0x20030138

08025dd4 <_malloc_r>:
 8025dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dd8:	1ccd      	adds	r5, r1, #3
 8025dda:	f025 0503 	bic.w	r5, r5, #3
 8025dde:	3508      	adds	r5, #8
 8025de0:	2d0c      	cmp	r5, #12
 8025de2:	bf38      	it	cc
 8025de4:	250c      	movcc	r5, #12
 8025de6:	2d00      	cmp	r5, #0
 8025de8:	4607      	mov	r7, r0
 8025dea:	db01      	blt.n	8025df0 <_malloc_r+0x1c>
 8025dec:	42a9      	cmp	r1, r5
 8025dee:	d905      	bls.n	8025dfc <_malloc_r+0x28>
 8025df0:	230c      	movs	r3, #12
 8025df2:	603b      	str	r3, [r7, #0]
 8025df4:	2600      	movs	r6, #0
 8025df6:	4630      	mov	r0, r6
 8025df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025dfc:	4e2e      	ldr	r6, [pc, #184]	; (8025eb8 <_malloc_r+0xe4>)
 8025dfe:	f003 f987 	bl	8029110 <__malloc_lock>
 8025e02:	6833      	ldr	r3, [r6, #0]
 8025e04:	461c      	mov	r4, r3
 8025e06:	bb34      	cbnz	r4, 8025e56 <_malloc_r+0x82>
 8025e08:	4629      	mov	r1, r5
 8025e0a:	4638      	mov	r0, r7
 8025e0c:	f7ff ffc2 	bl	8025d94 <sbrk_aligned>
 8025e10:	1c43      	adds	r3, r0, #1
 8025e12:	4604      	mov	r4, r0
 8025e14:	d14d      	bne.n	8025eb2 <_malloc_r+0xde>
 8025e16:	6834      	ldr	r4, [r6, #0]
 8025e18:	4626      	mov	r6, r4
 8025e1a:	2e00      	cmp	r6, #0
 8025e1c:	d140      	bne.n	8025ea0 <_malloc_r+0xcc>
 8025e1e:	6823      	ldr	r3, [r4, #0]
 8025e20:	4631      	mov	r1, r6
 8025e22:	4638      	mov	r0, r7
 8025e24:	eb04 0803 	add.w	r8, r4, r3
 8025e28:	f000 fe32 	bl	8026a90 <_sbrk_r>
 8025e2c:	4580      	cmp	r8, r0
 8025e2e:	d13a      	bne.n	8025ea6 <_malloc_r+0xd2>
 8025e30:	6821      	ldr	r1, [r4, #0]
 8025e32:	3503      	adds	r5, #3
 8025e34:	1a6d      	subs	r5, r5, r1
 8025e36:	f025 0503 	bic.w	r5, r5, #3
 8025e3a:	3508      	adds	r5, #8
 8025e3c:	2d0c      	cmp	r5, #12
 8025e3e:	bf38      	it	cc
 8025e40:	250c      	movcc	r5, #12
 8025e42:	4629      	mov	r1, r5
 8025e44:	4638      	mov	r0, r7
 8025e46:	f7ff ffa5 	bl	8025d94 <sbrk_aligned>
 8025e4a:	3001      	adds	r0, #1
 8025e4c:	d02b      	beq.n	8025ea6 <_malloc_r+0xd2>
 8025e4e:	6823      	ldr	r3, [r4, #0]
 8025e50:	442b      	add	r3, r5
 8025e52:	6023      	str	r3, [r4, #0]
 8025e54:	e00e      	b.n	8025e74 <_malloc_r+0xa0>
 8025e56:	6822      	ldr	r2, [r4, #0]
 8025e58:	1b52      	subs	r2, r2, r5
 8025e5a:	d41e      	bmi.n	8025e9a <_malloc_r+0xc6>
 8025e5c:	2a0b      	cmp	r2, #11
 8025e5e:	d916      	bls.n	8025e8e <_malloc_r+0xba>
 8025e60:	1961      	adds	r1, r4, r5
 8025e62:	42a3      	cmp	r3, r4
 8025e64:	6025      	str	r5, [r4, #0]
 8025e66:	bf18      	it	ne
 8025e68:	6059      	strne	r1, [r3, #4]
 8025e6a:	6863      	ldr	r3, [r4, #4]
 8025e6c:	bf08      	it	eq
 8025e6e:	6031      	streq	r1, [r6, #0]
 8025e70:	5162      	str	r2, [r4, r5]
 8025e72:	604b      	str	r3, [r1, #4]
 8025e74:	4638      	mov	r0, r7
 8025e76:	f104 060b 	add.w	r6, r4, #11
 8025e7a:	f003 f94f 	bl	802911c <__malloc_unlock>
 8025e7e:	f026 0607 	bic.w	r6, r6, #7
 8025e82:	1d23      	adds	r3, r4, #4
 8025e84:	1af2      	subs	r2, r6, r3
 8025e86:	d0b6      	beq.n	8025df6 <_malloc_r+0x22>
 8025e88:	1b9b      	subs	r3, r3, r6
 8025e8a:	50a3      	str	r3, [r4, r2]
 8025e8c:	e7b3      	b.n	8025df6 <_malloc_r+0x22>
 8025e8e:	6862      	ldr	r2, [r4, #4]
 8025e90:	42a3      	cmp	r3, r4
 8025e92:	bf0c      	ite	eq
 8025e94:	6032      	streq	r2, [r6, #0]
 8025e96:	605a      	strne	r2, [r3, #4]
 8025e98:	e7ec      	b.n	8025e74 <_malloc_r+0xa0>
 8025e9a:	4623      	mov	r3, r4
 8025e9c:	6864      	ldr	r4, [r4, #4]
 8025e9e:	e7b2      	b.n	8025e06 <_malloc_r+0x32>
 8025ea0:	4634      	mov	r4, r6
 8025ea2:	6876      	ldr	r6, [r6, #4]
 8025ea4:	e7b9      	b.n	8025e1a <_malloc_r+0x46>
 8025ea6:	230c      	movs	r3, #12
 8025ea8:	603b      	str	r3, [r7, #0]
 8025eaa:	4638      	mov	r0, r7
 8025eac:	f003 f936 	bl	802911c <__malloc_unlock>
 8025eb0:	e7a1      	b.n	8025df6 <_malloc_r+0x22>
 8025eb2:	6025      	str	r5, [r4, #0]
 8025eb4:	e7de      	b.n	8025e74 <_malloc_r+0xa0>
 8025eb6:	bf00      	nop
 8025eb8:	20030134 	.word	0x20030134

08025ebc <__cvt>:
 8025ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ebe:	ed2d 8b02 	vpush	{d8}
 8025ec2:	eeb0 8b40 	vmov.f64	d8, d0
 8025ec6:	b085      	sub	sp, #20
 8025ec8:	4617      	mov	r7, r2
 8025eca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025ecc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025ece:	ee18 2a90 	vmov	r2, s17
 8025ed2:	f025 0520 	bic.w	r5, r5, #32
 8025ed6:	2a00      	cmp	r2, #0
 8025ed8:	bfb6      	itet	lt
 8025eda:	222d      	movlt	r2, #45	; 0x2d
 8025edc:	2200      	movge	r2, #0
 8025ede:	eeb1 8b40 	vneglt.f64	d8, d0
 8025ee2:	2d46      	cmp	r5, #70	; 0x46
 8025ee4:	460c      	mov	r4, r1
 8025ee6:	701a      	strb	r2, [r3, #0]
 8025ee8:	d004      	beq.n	8025ef4 <__cvt+0x38>
 8025eea:	2d45      	cmp	r5, #69	; 0x45
 8025eec:	d100      	bne.n	8025ef0 <__cvt+0x34>
 8025eee:	3401      	adds	r4, #1
 8025ef0:	2102      	movs	r1, #2
 8025ef2:	e000      	b.n	8025ef6 <__cvt+0x3a>
 8025ef4:	2103      	movs	r1, #3
 8025ef6:	ab03      	add	r3, sp, #12
 8025ef8:	9301      	str	r3, [sp, #4]
 8025efa:	ab02      	add	r3, sp, #8
 8025efc:	9300      	str	r3, [sp, #0]
 8025efe:	4622      	mov	r2, r4
 8025f00:	4633      	mov	r3, r6
 8025f02:	eeb0 0b48 	vmov.f64	d0, d8
 8025f06:	f002 f947 	bl	8028198 <_dtoa_r>
 8025f0a:	2d47      	cmp	r5, #71	; 0x47
 8025f0c:	d101      	bne.n	8025f12 <__cvt+0x56>
 8025f0e:	07fb      	lsls	r3, r7, #31
 8025f10:	d51a      	bpl.n	8025f48 <__cvt+0x8c>
 8025f12:	2d46      	cmp	r5, #70	; 0x46
 8025f14:	eb00 0204 	add.w	r2, r0, r4
 8025f18:	d10c      	bne.n	8025f34 <__cvt+0x78>
 8025f1a:	7803      	ldrb	r3, [r0, #0]
 8025f1c:	2b30      	cmp	r3, #48	; 0x30
 8025f1e:	d107      	bne.n	8025f30 <__cvt+0x74>
 8025f20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f28:	bf1c      	itt	ne
 8025f2a:	f1c4 0401 	rsbne	r4, r4, #1
 8025f2e:	6034      	strne	r4, [r6, #0]
 8025f30:	6833      	ldr	r3, [r6, #0]
 8025f32:	441a      	add	r2, r3
 8025f34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f3c:	bf08      	it	eq
 8025f3e:	9203      	streq	r2, [sp, #12]
 8025f40:	2130      	movs	r1, #48	; 0x30
 8025f42:	9b03      	ldr	r3, [sp, #12]
 8025f44:	4293      	cmp	r3, r2
 8025f46:	d307      	bcc.n	8025f58 <__cvt+0x9c>
 8025f48:	9b03      	ldr	r3, [sp, #12]
 8025f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f4c:	1a1b      	subs	r3, r3, r0
 8025f4e:	6013      	str	r3, [r2, #0]
 8025f50:	b005      	add	sp, #20
 8025f52:	ecbd 8b02 	vpop	{d8}
 8025f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f58:	1c5c      	adds	r4, r3, #1
 8025f5a:	9403      	str	r4, [sp, #12]
 8025f5c:	7019      	strb	r1, [r3, #0]
 8025f5e:	e7f0      	b.n	8025f42 <__cvt+0x86>

08025f60 <__exponent>:
 8025f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f62:	4603      	mov	r3, r0
 8025f64:	2900      	cmp	r1, #0
 8025f66:	bfb8      	it	lt
 8025f68:	4249      	neglt	r1, r1
 8025f6a:	f803 2b02 	strb.w	r2, [r3], #2
 8025f6e:	bfb4      	ite	lt
 8025f70:	222d      	movlt	r2, #45	; 0x2d
 8025f72:	222b      	movge	r2, #43	; 0x2b
 8025f74:	2909      	cmp	r1, #9
 8025f76:	7042      	strb	r2, [r0, #1]
 8025f78:	dd2a      	ble.n	8025fd0 <__exponent+0x70>
 8025f7a:	f10d 0407 	add.w	r4, sp, #7
 8025f7e:	46a4      	mov	ip, r4
 8025f80:	270a      	movs	r7, #10
 8025f82:	46a6      	mov	lr, r4
 8025f84:	460a      	mov	r2, r1
 8025f86:	fb91 f6f7 	sdiv	r6, r1, r7
 8025f8a:	fb07 1516 	mls	r5, r7, r6, r1
 8025f8e:	3530      	adds	r5, #48	; 0x30
 8025f90:	2a63      	cmp	r2, #99	; 0x63
 8025f92:	f104 34ff 	add.w	r4, r4, #4294967295
 8025f96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025f9a:	4631      	mov	r1, r6
 8025f9c:	dcf1      	bgt.n	8025f82 <__exponent+0x22>
 8025f9e:	3130      	adds	r1, #48	; 0x30
 8025fa0:	f1ae 0502 	sub.w	r5, lr, #2
 8025fa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025fa8:	1c44      	adds	r4, r0, #1
 8025faa:	4629      	mov	r1, r5
 8025fac:	4561      	cmp	r1, ip
 8025fae:	d30a      	bcc.n	8025fc6 <__exponent+0x66>
 8025fb0:	f10d 0209 	add.w	r2, sp, #9
 8025fb4:	eba2 020e 	sub.w	r2, r2, lr
 8025fb8:	4565      	cmp	r5, ip
 8025fba:	bf88      	it	hi
 8025fbc:	2200      	movhi	r2, #0
 8025fbe:	4413      	add	r3, r2
 8025fc0:	1a18      	subs	r0, r3, r0
 8025fc2:	b003      	add	sp, #12
 8025fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025fca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025fce:	e7ed      	b.n	8025fac <__exponent+0x4c>
 8025fd0:	2330      	movs	r3, #48	; 0x30
 8025fd2:	3130      	adds	r1, #48	; 0x30
 8025fd4:	7083      	strb	r3, [r0, #2]
 8025fd6:	70c1      	strb	r1, [r0, #3]
 8025fd8:	1d03      	adds	r3, r0, #4
 8025fda:	e7f1      	b.n	8025fc0 <__exponent+0x60>
 8025fdc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08025fe0 <_printf_float>:
 8025fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fe4:	b08b      	sub	sp, #44	; 0x2c
 8025fe6:	460c      	mov	r4, r1
 8025fe8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025fec:	4616      	mov	r6, r2
 8025fee:	461f      	mov	r7, r3
 8025ff0:	4605      	mov	r5, r0
 8025ff2:	f003 f811 	bl	8029018 <_localeconv_r>
 8025ff6:	f8d0 b000 	ldr.w	fp, [r0]
 8025ffa:	4658      	mov	r0, fp
 8025ffc:	f7da f92a 	bl	8000254 <strlen>
 8026000:	2300      	movs	r3, #0
 8026002:	9308      	str	r3, [sp, #32]
 8026004:	f8d8 3000 	ldr.w	r3, [r8]
 8026008:	f894 9018 	ldrb.w	r9, [r4, #24]
 802600c:	6822      	ldr	r2, [r4, #0]
 802600e:	3307      	adds	r3, #7
 8026010:	f023 0307 	bic.w	r3, r3, #7
 8026014:	f103 0108 	add.w	r1, r3, #8
 8026018:	f8c8 1000 	str.w	r1, [r8]
 802601c:	4682      	mov	sl, r0
 802601e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026022:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026026:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026288 <_printf_float+0x2a8>
 802602a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802602e:	eeb0 6bc0 	vabs.f64	d6, d0
 8026032:	eeb4 6b47 	vcmp.f64	d6, d7
 8026036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802603a:	dd24      	ble.n	8026086 <_printf_float+0xa6>
 802603c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026044:	d502      	bpl.n	802604c <_printf_float+0x6c>
 8026046:	232d      	movs	r3, #45	; 0x2d
 8026048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802604c:	4b90      	ldr	r3, [pc, #576]	; (8026290 <_printf_float+0x2b0>)
 802604e:	4891      	ldr	r0, [pc, #580]	; (8026294 <_printf_float+0x2b4>)
 8026050:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026054:	bf94      	ite	ls
 8026056:	4698      	movls	r8, r3
 8026058:	4680      	movhi	r8, r0
 802605a:	2303      	movs	r3, #3
 802605c:	6123      	str	r3, [r4, #16]
 802605e:	f022 0204 	bic.w	r2, r2, #4
 8026062:	2300      	movs	r3, #0
 8026064:	6022      	str	r2, [r4, #0]
 8026066:	9304      	str	r3, [sp, #16]
 8026068:	9700      	str	r7, [sp, #0]
 802606a:	4633      	mov	r3, r6
 802606c:	aa09      	add	r2, sp, #36	; 0x24
 802606e:	4621      	mov	r1, r4
 8026070:	4628      	mov	r0, r5
 8026072:	f000 f9d3 	bl	802641c <_printf_common>
 8026076:	3001      	adds	r0, #1
 8026078:	f040 808a 	bne.w	8026190 <_printf_float+0x1b0>
 802607c:	f04f 30ff 	mov.w	r0, #4294967295
 8026080:	b00b      	add	sp, #44	; 0x2c
 8026082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026086:	eeb4 0b40 	vcmp.f64	d0, d0
 802608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802608e:	d709      	bvc.n	80260a4 <_printf_float+0xc4>
 8026090:	ee10 3a90 	vmov	r3, s1
 8026094:	2b00      	cmp	r3, #0
 8026096:	bfbc      	itt	lt
 8026098:	232d      	movlt	r3, #45	; 0x2d
 802609a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802609e:	487e      	ldr	r0, [pc, #504]	; (8026298 <_printf_float+0x2b8>)
 80260a0:	4b7e      	ldr	r3, [pc, #504]	; (802629c <_printf_float+0x2bc>)
 80260a2:	e7d5      	b.n	8026050 <_printf_float+0x70>
 80260a4:	6863      	ldr	r3, [r4, #4]
 80260a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80260aa:	9104      	str	r1, [sp, #16]
 80260ac:	1c59      	adds	r1, r3, #1
 80260ae:	d13c      	bne.n	802612a <_printf_float+0x14a>
 80260b0:	2306      	movs	r3, #6
 80260b2:	6063      	str	r3, [r4, #4]
 80260b4:	2300      	movs	r3, #0
 80260b6:	9303      	str	r3, [sp, #12]
 80260b8:	ab08      	add	r3, sp, #32
 80260ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80260be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80260c2:	ab07      	add	r3, sp, #28
 80260c4:	6861      	ldr	r1, [r4, #4]
 80260c6:	9300      	str	r3, [sp, #0]
 80260c8:	6022      	str	r2, [r4, #0]
 80260ca:	f10d 031b 	add.w	r3, sp, #27
 80260ce:	4628      	mov	r0, r5
 80260d0:	f7ff fef4 	bl	8025ebc <__cvt>
 80260d4:	9b04      	ldr	r3, [sp, #16]
 80260d6:	9907      	ldr	r1, [sp, #28]
 80260d8:	2b47      	cmp	r3, #71	; 0x47
 80260da:	4680      	mov	r8, r0
 80260dc:	d108      	bne.n	80260f0 <_printf_float+0x110>
 80260de:	1cc8      	adds	r0, r1, #3
 80260e0:	db02      	blt.n	80260e8 <_printf_float+0x108>
 80260e2:	6863      	ldr	r3, [r4, #4]
 80260e4:	4299      	cmp	r1, r3
 80260e6:	dd41      	ble.n	802616c <_printf_float+0x18c>
 80260e8:	f1a9 0902 	sub.w	r9, r9, #2
 80260ec:	fa5f f989 	uxtb.w	r9, r9
 80260f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80260f4:	d820      	bhi.n	8026138 <_printf_float+0x158>
 80260f6:	3901      	subs	r1, #1
 80260f8:	464a      	mov	r2, r9
 80260fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80260fe:	9107      	str	r1, [sp, #28]
 8026100:	f7ff ff2e 	bl	8025f60 <__exponent>
 8026104:	9a08      	ldr	r2, [sp, #32]
 8026106:	9004      	str	r0, [sp, #16]
 8026108:	1813      	adds	r3, r2, r0
 802610a:	2a01      	cmp	r2, #1
 802610c:	6123      	str	r3, [r4, #16]
 802610e:	dc02      	bgt.n	8026116 <_printf_float+0x136>
 8026110:	6822      	ldr	r2, [r4, #0]
 8026112:	07d2      	lsls	r2, r2, #31
 8026114:	d501      	bpl.n	802611a <_printf_float+0x13a>
 8026116:	3301      	adds	r3, #1
 8026118:	6123      	str	r3, [r4, #16]
 802611a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802611e:	2b00      	cmp	r3, #0
 8026120:	d0a2      	beq.n	8026068 <_printf_float+0x88>
 8026122:	232d      	movs	r3, #45	; 0x2d
 8026124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026128:	e79e      	b.n	8026068 <_printf_float+0x88>
 802612a:	9904      	ldr	r1, [sp, #16]
 802612c:	2947      	cmp	r1, #71	; 0x47
 802612e:	d1c1      	bne.n	80260b4 <_printf_float+0xd4>
 8026130:	2b00      	cmp	r3, #0
 8026132:	d1bf      	bne.n	80260b4 <_printf_float+0xd4>
 8026134:	2301      	movs	r3, #1
 8026136:	e7bc      	b.n	80260b2 <_printf_float+0xd2>
 8026138:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802613c:	d118      	bne.n	8026170 <_printf_float+0x190>
 802613e:	2900      	cmp	r1, #0
 8026140:	6863      	ldr	r3, [r4, #4]
 8026142:	dd0b      	ble.n	802615c <_printf_float+0x17c>
 8026144:	6121      	str	r1, [r4, #16]
 8026146:	b913      	cbnz	r3, 802614e <_printf_float+0x16e>
 8026148:	6822      	ldr	r2, [r4, #0]
 802614a:	07d0      	lsls	r0, r2, #31
 802614c:	d502      	bpl.n	8026154 <_printf_float+0x174>
 802614e:	3301      	adds	r3, #1
 8026150:	440b      	add	r3, r1
 8026152:	6123      	str	r3, [r4, #16]
 8026154:	2300      	movs	r3, #0
 8026156:	65a1      	str	r1, [r4, #88]	; 0x58
 8026158:	9304      	str	r3, [sp, #16]
 802615a:	e7de      	b.n	802611a <_printf_float+0x13a>
 802615c:	b913      	cbnz	r3, 8026164 <_printf_float+0x184>
 802615e:	6822      	ldr	r2, [r4, #0]
 8026160:	07d2      	lsls	r2, r2, #31
 8026162:	d501      	bpl.n	8026168 <_printf_float+0x188>
 8026164:	3302      	adds	r3, #2
 8026166:	e7f4      	b.n	8026152 <_printf_float+0x172>
 8026168:	2301      	movs	r3, #1
 802616a:	e7f2      	b.n	8026152 <_printf_float+0x172>
 802616c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026170:	9b08      	ldr	r3, [sp, #32]
 8026172:	4299      	cmp	r1, r3
 8026174:	db05      	blt.n	8026182 <_printf_float+0x1a2>
 8026176:	6823      	ldr	r3, [r4, #0]
 8026178:	6121      	str	r1, [r4, #16]
 802617a:	07d8      	lsls	r0, r3, #31
 802617c:	d5ea      	bpl.n	8026154 <_printf_float+0x174>
 802617e:	1c4b      	adds	r3, r1, #1
 8026180:	e7e7      	b.n	8026152 <_printf_float+0x172>
 8026182:	2900      	cmp	r1, #0
 8026184:	bfd4      	ite	le
 8026186:	f1c1 0202 	rsble	r2, r1, #2
 802618a:	2201      	movgt	r2, #1
 802618c:	4413      	add	r3, r2
 802618e:	e7e0      	b.n	8026152 <_printf_float+0x172>
 8026190:	6823      	ldr	r3, [r4, #0]
 8026192:	055a      	lsls	r2, r3, #21
 8026194:	d407      	bmi.n	80261a6 <_printf_float+0x1c6>
 8026196:	6923      	ldr	r3, [r4, #16]
 8026198:	4642      	mov	r2, r8
 802619a:	4631      	mov	r1, r6
 802619c:	4628      	mov	r0, r5
 802619e:	47b8      	blx	r7
 80261a0:	3001      	adds	r0, #1
 80261a2:	d12a      	bne.n	80261fa <_printf_float+0x21a>
 80261a4:	e76a      	b.n	802607c <_printf_float+0x9c>
 80261a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80261aa:	f240 80e2 	bls.w	8026372 <_printf_float+0x392>
 80261ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80261b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80261b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80261ba:	d133      	bne.n	8026224 <_printf_float+0x244>
 80261bc:	4a38      	ldr	r2, [pc, #224]	; (80262a0 <_printf_float+0x2c0>)
 80261be:	2301      	movs	r3, #1
 80261c0:	4631      	mov	r1, r6
 80261c2:	4628      	mov	r0, r5
 80261c4:	47b8      	blx	r7
 80261c6:	3001      	adds	r0, #1
 80261c8:	f43f af58 	beq.w	802607c <_printf_float+0x9c>
 80261cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80261d0:	429a      	cmp	r2, r3
 80261d2:	db02      	blt.n	80261da <_printf_float+0x1fa>
 80261d4:	6823      	ldr	r3, [r4, #0]
 80261d6:	07d8      	lsls	r0, r3, #31
 80261d8:	d50f      	bpl.n	80261fa <_printf_float+0x21a>
 80261da:	4653      	mov	r3, sl
 80261dc:	465a      	mov	r2, fp
 80261de:	4631      	mov	r1, r6
 80261e0:	4628      	mov	r0, r5
 80261e2:	47b8      	blx	r7
 80261e4:	3001      	adds	r0, #1
 80261e6:	f43f af49 	beq.w	802607c <_printf_float+0x9c>
 80261ea:	f04f 0800 	mov.w	r8, #0
 80261ee:	f104 091a 	add.w	r9, r4, #26
 80261f2:	9b08      	ldr	r3, [sp, #32]
 80261f4:	3b01      	subs	r3, #1
 80261f6:	4543      	cmp	r3, r8
 80261f8:	dc09      	bgt.n	802620e <_printf_float+0x22e>
 80261fa:	6823      	ldr	r3, [r4, #0]
 80261fc:	079b      	lsls	r3, r3, #30
 80261fe:	f100 8108 	bmi.w	8026412 <_printf_float+0x432>
 8026202:	68e0      	ldr	r0, [r4, #12]
 8026204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026206:	4298      	cmp	r0, r3
 8026208:	bfb8      	it	lt
 802620a:	4618      	movlt	r0, r3
 802620c:	e738      	b.n	8026080 <_printf_float+0xa0>
 802620e:	2301      	movs	r3, #1
 8026210:	464a      	mov	r2, r9
 8026212:	4631      	mov	r1, r6
 8026214:	4628      	mov	r0, r5
 8026216:	47b8      	blx	r7
 8026218:	3001      	adds	r0, #1
 802621a:	f43f af2f 	beq.w	802607c <_printf_float+0x9c>
 802621e:	f108 0801 	add.w	r8, r8, #1
 8026222:	e7e6      	b.n	80261f2 <_printf_float+0x212>
 8026224:	9b07      	ldr	r3, [sp, #28]
 8026226:	2b00      	cmp	r3, #0
 8026228:	dc3c      	bgt.n	80262a4 <_printf_float+0x2c4>
 802622a:	4a1d      	ldr	r2, [pc, #116]	; (80262a0 <_printf_float+0x2c0>)
 802622c:	2301      	movs	r3, #1
 802622e:	4631      	mov	r1, r6
 8026230:	4628      	mov	r0, r5
 8026232:	47b8      	blx	r7
 8026234:	3001      	adds	r0, #1
 8026236:	f43f af21 	beq.w	802607c <_printf_float+0x9c>
 802623a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802623e:	4313      	orrs	r3, r2
 8026240:	d102      	bne.n	8026248 <_printf_float+0x268>
 8026242:	6823      	ldr	r3, [r4, #0]
 8026244:	07d9      	lsls	r1, r3, #31
 8026246:	d5d8      	bpl.n	80261fa <_printf_float+0x21a>
 8026248:	4653      	mov	r3, sl
 802624a:	465a      	mov	r2, fp
 802624c:	4631      	mov	r1, r6
 802624e:	4628      	mov	r0, r5
 8026250:	47b8      	blx	r7
 8026252:	3001      	adds	r0, #1
 8026254:	f43f af12 	beq.w	802607c <_printf_float+0x9c>
 8026258:	f04f 0900 	mov.w	r9, #0
 802625c:	f104 0a1a 	add.w	sl, r4, #26
 8026260:	9b07      	ldr	r3, [sp, #28]
 8026262:	425b      	negs	r3, r3
 8026264:	454b      	cmp	r3, r9
 8026266:	dc01      	bgt.n	802626c <_printf_float+0x28c>
 8026268:	9b08      	ldr	r3, [sp, #32]
 802626a:	e795      	b.n	8026198 <_printf_float+0x1b8>
 802626c:	2301      	movs	r3, #1
 802626e:	4652      	mov	r2, sl
 8026270:	4631      	mov	r1, r6
 8026272:	4628      	mov	r0, r5
 8026274:	47b8      	blx	r7
 8026276:	3001      	adds	r0, #1
 8026278:	f43f af00 	beq.w	802607c <_printf_float+0x9c>
 802627c:	f109 0901 	add.w	r9, r9, #1
 8026280:	e7ee      	b.n	8026260 <_printf_float+0x280>
 8026282:	bf00      	nop
 8026284:	f3af 8000 	nop.w
 8026288:	ffffffff 	.word	0xffffffff
 802628c:	7fefffff 	.word	0x7fefffff
 8026290:	08047814 	.word	0x08047814
 8026294:	08047818 	.word	0x08047818
 8026298:	08047820 	.word	0x08047820
 802629c:	0804781c 	.word	0x0804781c
 80262a0:	08047e39 	.word	0x08047e39
 80262a4:	9a08      	ldr	r2, [sp, #32]
 80262a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80262a8:	429a      	cmp	r2, r3
 80262aa:	bfa8      	it	ge
 80262ac:	461a      	movge	r2, r3
 80262ae:	2a00      	cmp	r2, #0
 80262b0:	4691      	mov	r9, r2
 80262b2:	dc38      	bgt.n	8026326 <_printf_float+0x346>
 80262b4:	2300      	movs	r3, #0
 80262b6:	9305      	str	r3, [sp, #20]
 80262b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80262bc:	f104 021a 	add.w	r2, r4, #26
 80262c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80262c2:	9905      	ldr	r1, [sp, #20]
 80262c4:	9304      	str	r3, [sp, #16]
 80262c6:	eba3 0309 	sub.w	r3, r3, r9
 80262ca:	428b      	cmp	r3, r1
 80262cc:	dc33      	bgt.n	8026336 <_printf_float+0x356>
 80262ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80262d2:	429a      	cmp	r2, r3
 80262d4:	db3c      	blt.n	8026350 <_printf_float+0x370>
 80262d6:	6823      	ldr	r3, [r4, #0]
 80262d8:	07da      	lsls	r2, r3, #31
 80262da:	d439      	bmi.n	8026350 <_printf_float+0x370>
 80262dc:	9b08      	ldr	r3, [sp, #32]
 80262de:	9a04      	ldr	r2, [sp, #16]
 80262e0:	9907      	ldr	r1, [sp, #28]
 80262e2:	1a9a      	subs	r2, r3, r2
 80262e4:	eba3 0901 	sub.w	r9, r3, r1
 80262e8:	4591      	cmp	r9, r2
 80262ea:	bfa8      	it	ge
 80262ec:	4691      	movge	r9, r2
 80262ee:	f1b9 0f00 	cmp.w	r9, #0
 80262f2:	dc35      	bgt.n	8026360 <_printf_float+0x380>
 80262f4:	f04f 0800 	mov.w	r8, #0
 80262f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80262fc:	f104 0a1a 	add.w	sl, r4, #26
 8026300:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026304:	1a9b      	subs	r3, r3, r2
 8026306:	eba3 0309 	sub.w	r3, r3, r9
 802630a:	4543      	cmp	r3, r8
 802630c:	f77f af75 	ble.w	80261fa <_printf_float+0x21a>
 8026310:	2301      	movs	r3, #1
 8026312:	4652      	mov	r2, sl
 8026314:	4631      	mov	r1, r6
 8026316:	4628      	mov	r0, r5
 8026318:	47b8      	blx	r7
 802631a:	3001      	adds	r0, #1
 802631c:	f43f aeae 	beq.w	802607c <_printf_float+0x9c>
 8026320:	f108 0801 	add.w	r8, r8, #1
 8026324:	e7ec      	b.n	8026300 <_printf_float+0x320>
 8026326:	4613      	mov	r3, r2
 8026328:	4631      	mov	r1, r6
 802632a:	4642      	mov	r2, r8
 802632c:	4628      	mov	r0, r5
 802632e:	47b8      	blx	r7
 8026330:	3001      	adds	r0, #1
 8026332:	d1bf      	bne.n	80262b4 <_printf_float+0x2d4>
 8026334:	e6a2      	b.n	802607c <_printf_float+0x9c>
 8026336:	2301      	movs	r3, #1
 8026338:	4631      	mov	r1, r6
 802633a:	4628      	mov	r0, r5
 802633c:	9204      	str	r2, [sp, #16]
 802633e:	47b8      	blx	r7
 8026340:	3001      	adds	r0, #1
 8026342:	f43f ae9b 	beq.w	802607c <_printf_float+0x9c>
 8026346:	9b05      	ldr	r3, [sp, #20]
 8026348:	9a04      	ldr	r2, [sp, #16]
 802634a:	3301      	adds	r3, #1
 802634c:	9305      	str	r3, [sp, #20]
 802634e:	e7b7      	b.n	80262c0 <_printf_float+0x2e0>
 8026350:	4653      	mov	r3, sl
 8026352:	465a      	mov	r2, fp
 8026354:	4631      	mov	r1, r6
 8026356:	4628      	mov	r0, r5
 8026358:	47b8      	blx	r7
 802635a:	3001      	adds	r0, #1
 802635c:	d1be      	bne.n	80262dc <_printf_float+0x2fc>
 802635e:	e68d      	b.n	802607c <_printf_float+0x9c>
 8026360:	9a04      	ldr	r2, [sp, #16]
 8026362:	464b      	mov	r3, r9
 8026364:	4442      	add	r2, r8
 8026366:	4631      	mov	r1, r6
 8026368:	4628      	mov	r0, r5
 802636a:	47b8      	blx	r7
 802636c:	3001      	adds	r0, #1
 802636e:	d1c1      	bne.n	80262f4 <_printf_float+0x314>
 8026370:	e684      	b.n	802607c <_printf_float+0x9c>
 8026372:	9a08      	ldr	r2, [sp, #32]
 8026374:	2a01      	cmp	r2, #1
 8026376:	dc01      	bgt.n	802637c <_printf_float+0x39c>
 8026378:	07db      	lsls	r3, r3, #31
 802637a:	d537      	bpl.n	80263ec <_printf_float+0x40c>
 802637c:	2301      	movs	r3, #1
 802637e:	4642      	mov	r2, r8
 8026380:	4631      	mov	r1, r6
 8026382:	4628      	mov	r0, r5
 8026384:	47b8      	blx	r7
 8026386:	3001      	adds	r0, #1
 8026388:	f43f ae78 	beq.w	802607c <_printf_float+0x9c>
 802638c:	4653      	mov	r3, sl
 802638e:	465a      	mov	r2, fp
 8026390:	4631      	mov	r1, r6
 8026392:	4628      	mov	r0, r5
 8026394:	47b8      	blx	r7
 8026396:	3001      	adds	r0, #1
 8026398:	f43f ae70 	beq.w	802607c <_printf_float+0x9c>
 802639c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80263a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80263a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263a8:	d01b      	beq.n	80263e2 <_printf_float+0x402>
 80263aa:	9b08      	ldr	r3, [sp, #32]
 80263ac:	f108 0201 	add.w	r2, r8, #1
 80263b0:	3b01      	subs	r3, #1
 80263b2:	4631      	mov	r1, r6
 80263b4:	4628      	mov	r0, r5
 80263b6:	47b8      	blx	r7
 80263b8:	3001      	adds	r0, #1
 80263ba:	d10e      	bne.n	80263da <_printf_float+0x3fa>
 80263bc:	e65e      	b.n	802607c <_printf_float+0x9c>
 80263be:	2301      	movs	r3, #1
 80263c0:	464a      	mov	r2, r9
 80263c2:	4631      	mov	r1, r6
 80263c4:	4628      	mov	r0, r5
 80263c6:	47b8      	blx	r7
 80263c8:	3001      	adds	r0, #1
 80263ca:	f43f ae57 	beq.w	802607c <_printf_float+0x9c>
 80263ce:	f108 0801 	add.w	r8, r8, #1
 80263d2:	9b08      	ldr	r3, [sp, #32]
 80263d4:	3b01      	subs	r3, #1
 80263d6:	4543      	cmp	r3, r8
 80263d8:	dcf1      	bgt.n	80263be <_printf_float+0x3de>
 80263da:	9b04      	ldr	r3, [sp, #16]
 80263dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80263e0:	e6db      	b.n	802619a <_printf_float+0x1ba>
 80263e2:	f04f 0800 	mov.w	r8, #0
 80263e6:	f104 091a 	add.w	r9, r4, #26
 80263ea:	e7f2      	b.n	80263d2 <_printf_float+0x3f2>
 80263ec:	2301      	movs	r3, #1
 80263ee:	4642      	mov	r2, r8
 80263f0:	e7df      	b.n	80263b2 <_printf_float+0x3d2>
 80263f2:	2301      	movs	r3, #1
 80263f4:	464a      	mov	r2, r9
 80263f6:	4631      	mov	r1, r6
 80263f8:	4628      	mov	r0, r5
 80263fa:	47b8      	blx	r7
 80263fc:	3001      	adds	r0, #1
 80263fe:	f43f ae3d 	beq.w	802607c <_printf_float+0x9c>
 8026402:	f108 0801 	add.w	r8, r8, #1
 8026406:	68e3      	ldr	r3, [r4, #12]
 8026408:	9909      	ldr	r1, [sp, #36]	; 0x24
 802640a:	1a5b      	subs	r3, r3, r1
 802640c:	4543      	cmp	r3, r8
 802640e:	dcf0      	bgt.n	80263f2 <_printf_float+0x412>
 8026410:	e6f7      	b.n	8026202 <_printf_float+0x222>
 8026412:	f04f 0800 	mov.w	r8, #0
 8026416:	f104 0919 	add.w	r9, r4, #25
 802641a:	e7f4      	b.n	8026406 <_printf_float+0x426>

0802641c <_printf_common>:
 802641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026420:	4616      	mov	r6, r2
 8026422:	4699      	mov	r9, r3
 8026424:	688a      	ldr	r2, [r1, #8]
 8026426:	690b      	ldr	r3, [r1, #16]
 8026428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802642c:	4293      	cmp	r3, r2
 802642e:	bfb8      	it	lt
 8026430:	4613      	movlt	r3, r2
 8026432:	6033      	str	r3, [r6, #0]
 8026434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026438:	4607      	mov	r7, r0
 802643a:	460c      	mov	r4, r1
 802643c:	b10a      	cbz	r2, 8026442 <_printf_common+0x26>
 802643e:	3301      	adds	r3, #1
 8026440:	6033      	str	r3, [r6, #0]
 8026442:	6823      	ldr	r3, [r4, #0]
 8026444:	0699      	lsls	r1, r3, #26
 8026446:	bf42      	ittt	mi
 8026448:	6833      	ldrmi	r3, [r6, #0]
 802644a:	3302      	addmi	r3, #2
 802644c:	6033      	strmi	r3, [r6, #0]
 802644e:	6825      	ldr	r5, [r4, #0]
 8026450:	f015 0506 	ands.w	r5, r5, #6
 8026454:	d106      	bne.n	8026464 <_printf_common+0x48>
 8026456:	f104 0a19 	add.w	sl, r4, #25
 802645a:	68e3      	ldr	r3, [r4, #12]
 802645c:	6832      	ldr	r2, [r6, #0]
 802645e:	1a9b      	subs	r3, r3, r2
 8026460:	42ab      	cmp	r3, r5
 8026462:	dc26      	bgt.n	80264b2 <_printf_common+0x96>
 8026464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026468:	1e13      	subs	r3, r2, #0
 802646a:	6822      	ldr	r2, [r4, #0]
 802646c:	bf18      	it	ne
 802646e:	2301      	movne	r3, #1
 8026470:	0692      	lsls	r2, r2, #26
 8026472:	d42b      	bmi.n	80264cc <_printf_common+0xb0>
 8026474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026478:	4649      	mov	r1, r9
 802647a:	4638      	mov	r0, r7
 802647c:	47c0      	blx	r8
 802647e:	3001      	adds	r0, #1
 8026480:	d01e      	beq.n	80264c0 <_printf_common+0xa4>
 8026482:	6823      	ldr	r3, [r4, #0]
 8026484:	68e5      	ldr	r5, [r4, #12]
 8026486:	6832      	ldr	r2, [r6, #0]
 8026488:	f003 0306 	and.w	r3, r3, #6
 802648c:	2b04      	cmp	r3, #4
 802648e:	bf08      	it	eq
 8026490:	1aad      	subeq	r5, r5, r2
 8026492:	68a3      	ldr	r3, [r4, #8]
 8026494:	6922      	ldr	r2, [r4, #16]
 8026496:	bf0c      	ite	eq
 8026498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802649c:	2500      	movne	r5, #0
 802649e:	4293      	cmp	r3, r2
 80264a0:	bfc4      	itt	gt
 80264a2:	1a9b      	subgt	r3, r3, r2
 80264a4:	18ed      	addgt	r5, r5, r3
 80264a6:	2600      	movs	r6, #0
 80264a8:	341a      	adds	r4, #26
 80264aa:	42b5      	cmp	r5, r6
 80264ac:	d11a      	bne.n	80264e4 <_printf_common+0xc8>
 80264ae:	2000      	movs	r0, #0
 80264b0:	e008      	b.n	80264c4 <_printf_common+0xa8>
 80264b2:	2301      	movs	r3, #1
 80264b4:	4652      	mov	r2, sl
 80264b6:	4649      	mov	r1, r9
 80264b8:	4638      	mov	r0, r7
 80264ba:	47c0      	blx	r8
 80264bc:	3001      	adds	r0, #1
 80264be:	d103      	bne.n	80264c8 <_printf_common+0xac>
 80264c0:	f04f 30ff 	mov.w	r0, #4294967295
 80264c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264c8:	3501      	adds	r5, #1
 80264ca:	e7c6      	b.n	802645a <_printf_common+0x3e>
 80264cc:	18e1      	adds	r1, r4, r3
 80264ce:	1c5a      	adds	r2, r3, #1
 80264d0:	2030      	movs	r0, #48	; 0x30
 80264d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80264d6:	4422      	add	r2, r4
 80264d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80264dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80264e0:	3302      	adds	r3, #2
 80264e2:	e7c7      	b.n	8026474 <_printf_common+0x58>
 80264e4:	2301      	movs	r3, #1
 80264e6:	4622      	mov	r2, r4
 80264e8:	4649      	mov	r1, r9
 80264ea:	4638      	mov	r0, r7
 80264ec:	47c0      	blx	r8
 80264ee:	3001      	adds	r0, #1
 80264f0:	d0e6      	beq.n	80264c0 <_printf_common+0xa4>
 80264f2:	3601      	adds	r6, #1
 80264f4:	e7d9      	b.n	80264aa <_printf_common+0x8e>
 80264f6:	Address 0x00000000080264f6 is out of bounds.


080264f8 <_printf_i>:
 80264f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80264fc:	7e0f      	ldrb	r7, [r1, #24]
 80264fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026500:	2f78      	cmp	r7, #120	; 0x78
 8026502:	4691      	mov	r9, r2
 8026504:	4680      	mov	r8, r0
 8026506:	460c      	mov	r4, r1
 8026508:	469a      	mov	sl, r3
 802650a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802650e:	d807      	bhi.n	8026520 <_printf_i+0x28>
 8026510:	2f62      	cmp	r7, #98	; 0x62
 8026512:	d80a      	bhi.n	802652a <_printf_i+0x32>
 8026514:	2f00      	cmp	r7, #0
 8026516:	f000 80d8 	beq.w	80266ca <_printf_i+0x1d2>
 802651a:	2f58      	cmp	r7, #88	; 0x58
 802651c:	f000 80a3 	beq.w	8026666 <_printf_i+0x16e>
 8026520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026528:	e03a      	b.n	80265a0 <_printf_i+0xa8>
 802652a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802652e:	2b15      	cmp	r3, #21
 8026530:	d8f6      	bhi.n	8026520 <_printf_i+0x28>
 8026532:	a101      	add	r1, pc, #4	; (adr r1, 8026538 <_printf_i+0x40>)
 8026534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026538:	08026591 	.word	0x08026591
 802653c:	080265a5 	.word	0x080265a5
 8026540:	08026521 	.word	0x08026521
 8026544:	08026521 	.word	0x08026521
 8026548:	08026521 	.word	0x08026521
 802654c:	08026521 	.word	0x08026521
 8026550:	080265a5 	.word	0x080265a5
 8026554:	08026521 	.word	0x08026521
 8026558:	08026521 	.word	0x08026521
 802655c:	08026521 	.word	0x08026521
 8026560:	08026521 	.word	0x08026521
 8026564:	080266b1 	.word	0x080266b1
 8026568:	080265d5 	.word	0x080265d5
 802656c:	08026693 	.word	0x08026693
 8026570:	08026521 	.word	0x08026521
 8026574:	08026521 	.word	0x08026521
 8026578:	080266d3 	.word	0x080266d3
 802657c:	08026521 	.word	0x08026521
 8026580:	080265d5 	.word	0x080265d5
 8026584:	08026521 	.word	0x08026521
 8026588:	08026521 	.word	0x08026521
 802658c:	0802669b 	.word	0x0802669b
 8026590:	682b      	ldr	r3, [r5, #0]
 8026592:	1d1a      	adds	r2, r3, #4
 8026594:	681b      	ldr	r3, [r3, #0]
 8026596:	602a      	str	r2, [r5, #0]
 8026598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802659c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80265a0:	2301      	movs	r3, #1
 80265a2:	e0a3      	b.n	80266ec <_printf_i+0x1f4>
 80265a4:	6820      	ldr	r0, [r4, #0]
 80265a6:	6829      	ldr	r1, [r5, #0]
 80265a8:	0606      	lsls	r6, r0, #24
 80265aa:	f101 0304 	add.w	r3, r1, #4
 80265ae:	d50a      	bpl.n	80265c6 <_printf_i+0xce>
 80265b0:	680e      	ldr	r6, [r1, #0]
 80265b2:	602b      	str	r3, [r5, #0]
 80265b4:	2e00      	cmp	r6, #0
 80265b6:	da03      	bge.n	80265c0 <_printf_i+0xc8>
 80265b8:	232d      	movs	r3, #45	; 0x2d
 80265ba:	4276      	negs	r6, r6
 80265bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80265c0:	485e      	ldr	r0, [pc, #376]	; (802673c <_printf_i+0x244>)
 80265c2:	230a      	movs	r3, #10
 80265c4:	e019      	b.n	80265fa <_printf_i+0x102>
 80265c6:	680e      	ldr	r6, [r1, #0]
 80265c8:	602b      	str	r3, [r5, #0]
 80265ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80265ce:	bf18      	it	ne
 80265d0:	b236      	sxthne	r6, r6
 80265d2:	e7ef      	b.n	80265b4 <_printf_i+0xbc>
 80265d4:	682b      	ldr	r3, [r5, #0]
 80265d6:	6820      	ldr	r0, [r4, #0]
 80265d8:	1d19      	adds	r1, r3, #4
 80265da:	6029      	str	r1, [r5, #0]
 80265dc:	0601      	lsls	r1, r0, #24
 80265de:	d501      	bpl.n	80265e4 <_printf_i+0xec>
 80265e0:	681e      	ldr	r6, [r3, #0]
 80265e2:	e002      	b.n	80265ea <_printf_i+0xf2>
 80265e4:	0646      	lsls	r6, r0, #25
 80265e6:	d5fb      	bpl.n	80265e0 <_printf_i+0xe8>
 80265e8:	881e      	ldrh	r6, [r3, #0]
 80265ea:	4854      	ldr	r0, [pc, #336]	; (802673c <_printf_i+0x244>)
 80265ec:	2f6f      	cmp	r7, #111	; 0x6f
 80265ee:	bf0c      	ite	eq
 80265f0:	2308      	moveq	r3, #8
 80265f2:	230a      	movne	r3, #10
 80265f4:	2100      	movs	r1, #0
 80265f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80265fa:	6865      	ldr	r5, [r4, #4]
 80265fc:	60a5      	str	r5, [r4, #8]
 80265fe:	2d00      	cmp	r5, #0
 8026600:	bfa2      	ittt	ge
 8026602:	6821      	ldrge	r1, [r4, #0]
 8026604:	f021 0104 	bicge.w	r1, r1, #4
 8026608:	6021      	strge	r1, [r4, #0]
 802660a:	b90e      	cbnz	r6, 8026610 <_printf_i+0x118>
 802660c:	2d00      	cmp	r5, #0
 802660e:	d04d      	beq.n	80266ac <_printf_i+0x1b4>
 8026610:	4615      	mov	r5, r2
 8026612:	fbb6 f1f3 	udiv	r1, r6, r3
 8026616:	fb03 6711 	mls	r7, r3, r1, r6
 802661a:	5dc7      	ldrb	r7, [r0, r7]
 802661c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026620:	4637      	mov	r7, r6
 8026622:	42bb      	cmp	r3, r7
 8026624:	460e      	mov	r6, r1
 8026626:	d9f4      	bls.n	8026612 <_printf_i+0x11a>
 8026628:	2b08      	cmp	r3, #8
 802662a:	d10b      	bne.n	8026644 <_printf_i+0x14c>
 802662c:	6823      	ldr	r3, [r4, #0]
 802662e:	07de      	lsls	r6, r3, #31
 8026630:	d508      	bpl.n	8026644 <_printf_i+0x14c>
 8026632:	6923      	ldr	r3, [r4, #16]
 8026634:	6861      	ldr	r1, [r4, #4]
 8026636:	4299      	cmp	r1, r3
 8026638:	bfde      	ittt	le
 802663a:	2330      	movle	r3, #48	; 0x30
 802663c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026640:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026644:	1b52      	subs	r2, r2, r5
 8026646:	6122      	str	r2, [r4, #16]
 8026648:	f8cd a000 	str.w	sl, [sp]
 802664c:	464b      	mov	r3, r9
 802664e:	aa03      	add	r2, sp, #12
 8026650:	4621      	mov	r1, r4
 8026652:	4640      	mov	r0, r8
 8026654:	f7ff fee2 	bl	802641c <_printf_common>
 8026658:	3001      	adds	r0, #1
 802665a:	d14c      	bne.n	80266f6 <_printf_i+0x1fe>
 802665c:	f04f 30ff 	mov.w	r0, #4294967295
 8026660:	b004      	add	sp, #16
 8026662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026666:	4835      	ldr	r0, [pc, #212]	; (802673c <_printf_i+0x244>)
 8026668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802666c:	6829      	ldr	r1, [r5, #0]
 802666e:	6823      	ldr	r3, [r4, #0]
 8026670:	f851 6b04 	ldr.w	r6, [r1], #4
 8026674:	6029      	str	r1, [r5, #0]
 8026676:	061d      	lsls	r5, r3, #24
 8026678:	d514      	bpl.n	80266a4 <_printf_i+0x1ac>
 802667a:	07df      	lsls	r7, r3, #31
 802667c:	bf44      	itt	mi
 802667e:	f043 0320 	orrmi.w	r3, r3, #32
 8026682:	6023      	strmi	r3, [r4, #0]
 8026684:	b91e      	cbnz	r6, 802668e <_printf_i+0x196>
 8026686:	6823      	ldr	r3, [r4, #0]
 8026688:	f023 0320 	bic.w	r3, r3, #32
 802668c:	6023      	str	r3, [r4, #0]
 802668e:	2310      	movs	r3, #16
 8026690:	e7b0      	b.n	80265f4 <_printf_i+0xfc>
 8026692:	6823      	ldr	r3, [r4, #0]
 8026694:	f043 0320 	orr.w	r3, r3, #32
 8026698:	6023      	str	r3, [r4, #0]
 802669a:	2378      	movs	r3, #120	; 0x78
 802669c:	4828      	ldr	r0, [pc, #160]	; (8026740 <_printf_i+0x248>)
 802669e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80266a2:	e7e3      	b.n	802666c <_printf_i+0x174>
 80266a4:	0659      	lsls	r1, r3, #25
 80266a6:	bf48      	it	mi
 80266a8:	b2b6      	uxthmi	r6, r6
 80266aa:	e7e6      	b.n	802667a <_printf_i+0x182>
 80266ac:	4615      	mov	r5, r2
 80266ae:	e7bb      	b.n	8026628 <_printf_i+0x130>
 80266b0:	682b      	ldr	r3, [r5, #0]
 80266b2:	6826      	ldr	r6, [r4, #0]
 80266b4:	6961      	ldr	r1, [r4, #20]
 80266b6:	1d18      	adds	r0, r3, #4
 80266b8:	6028      	str	r0, [r5, #0]
 80266ba:	0635      	lsls	r5, r6, #24
 80266bc:	681b      	ldr	r3, [r3, #0]
 80266be:	d501      	bpl.n	80266c4 <_printf_i+0x1cc>
 80266c0:	6019      	str	r1, [r3, #0]
 80266c2:	e002      	b.n	80266ca <_printf_i+0x1d2>
 80266c4:	0670      	lsls	r0, r6, #25
 80266c6:	d5fb      	bpl.n	80266c0 <_printf_i+0x1c8>
 80266c8:	8019      	strh	r1, [r3, #0]
 80266ca:	2300      	movs	r3, #0
 80266cc:	6123      	str	r3, [r4, #16]
 80266ce:	4615      	mov	r5, r2
 80266d0:	e7ba      	b.n	8026648 <_printf_i+0x150>
 80266d2:	682b      	ldr	r3, [r5, #0]
 80266d4:	1d1a      	adds	r2, r3, #4
 80266d6:	602a      	str	r2, [r5, #0]
 80266d8:	681d      	ldr	r5, [r3, #0]
 80266da:	6862      	ldr	r2, [r4, #4]
 80266dc:	2100      	movs	r1, #0
 80266de:	4628      	mov	r0, r5
 80266e0:	f7d9 fdc6 	bl	8000270 <memchr>
 80266e4:	b108      	cbz	r0, 80266ea <_printf_i+0x1f2>
 80266e6:	1b40      	subs	r0, r0, r5
 80266e8:	6060      	str	r0, [r4, #4]
 80266ea:	6863      	ldr	r3, [r4, #4]
 80266ec:	6123      	str	r3, [r4, #16]
 80266ee:	2300      	movs	r3, #0
 80266f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80266f4:	e7a8      	b.n	8026648 <_printf_i+0x150>
 80266f6:	6923      	ldr	r3, [r4, #16]
 80266f8:	462a      	mov	r2, r5
 80266fa:	4649      	mov	r1, r9
 80266fc:	4640      	mov	r0, r8
 80266fe:	47d0      	blx	sl
 8026700:	3001      	adds	r0, #1
 8026702:	d0ab      	beq.n	802665c <_printf_i+0x164>
 8026704:	6823      	ldr	r3, [r4, #0]
 8026706:	079b      	lsls	r3, r3, #30
 8026708:	d413      	bmi.n	8026732 <_printf_i+0x23a>
 802670a:	68e0      	ldr	r0, [r4, #12]
 802670c:	9b03      	ldr	r3, [sp, #12]
 802670e:	4298      	cmp	r0, r3
 8026710:	bfb8      	it	lt
 8026712:	4618      	movlt	r0, r3
 8026714:	e7a4      	b.n	8026660 <_printf_i+0x168>
 8026716:	2301      	movs	r3, #1
 8026718:	4632      	mov	r2, r6
 802671a:	4649      	mov	r1, r9
 802671c:	4640      	mov	r0, r8
 802671e:	47d0      	blx	sl
 8026720:	3001      	adds	r0, #1
 8026722:	d09b      	beq.n	802665c <_printf_i+0x164>
 8026724:	3501      	adds	r5, #1
 8026726:	68e3      	ldr	r3, [r4, #12]
 8026728:	9903      	ldr	r1, [sp, #12]
 802672a:	1a5b      	subs	r3, r3, r1
 802672c:	42ab      	cmp	r3, r5
 802672e:	dcf2      	bgt.n	8026716 <_printf_i+0x21e>
 8026730:	e7eb      	b.n	802670a <_printf_i+0x212>
 8026732:	2500      	movs	r5, #0
 8026734:	f104 0619 	add.w	r6, r4, #25
 8026738:	e7f5      	b.n	8026726 <_printf_i+0x22e>
 802673a:	bf00      	nop
 802673c:	08047824 	.word	0x08047824
 8026740:	08047835 	.word	0x08047835

08026744 <iprintf>:
 8026744:	b40f      	push	{r0, r1, r2, r3}
 8026746:	4b0a      	ldr	r3, [pc, #40]	; (8026770 <iprintf+0x2c>)
 8026748:	b513      	push	{r0, r1, r4, lr}
 802674a:	681c      	ldr	r4, [r3, #0]
 802674c:	b124      	cbz	r4, 8026758 <iprintf+0x14>
 802674e:	69a3      	ldr	r3, [r4, #24]
 8026750:	b913      	cbnz	r3, 8026758 <iprintf+0x14>
 8026752:	4620      	mov	r0, r4
 8026754:	f7fe fe36 	bl	80253c4 <__sinit>
 8026758:	ab05      	add	r3, sp, #20
 802675a:	9a04      	ldr	r2, [sp, #16]
 802675c:	68a1      	ldr	r1, [r4, #8]
 802675e:	9301      	str	r3, [sp, #4]
 8026760:	4620      	mov	r0, r4
 8026762:	f003 fbd3 	bl	8029f0c <_vfiprintf_r>
 8026766:	b002      	add	sp, #8
 8026768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802676c:	b004      	add	sp, #16
 802676e:	4770      	bx	lr
 8026770:	200004c4 	.word	0x200004c4

08026774 <putchar>:
 8026774:	4b09      	ldr	r3, [pc, #36]	; (802679c <putchar+0x28>)
 8026776:	b513      	push	{r0, r1, r4, lr}
 8026778:	681c      	ldr	r4, [r3, #0]
 802677a:	4601      	mov	r1, r0
 802677c:	b134      	cbz	r4, 802678c <putchar+0x18>
 802677e:	69a3      	ldr	r3, [r4, #24]
 8026780:	b923      	cbnz	r3, 802678c <putchar+0x18>
 8026782:	9001      	str	r0, [sp, #4]
 8026784:	4620      	mov	r0, r4
 8026786:	f7fe fe1d 	bl	80253c4 <__sinit>
 802678a:	9901      	ldr	r1, [sp, #4]
 802678c:	68a2      	ldr	r2, [r4, #8]
 802678e:	4620      	mov	r0, r4
 8026790:	b002      	add	sp, #8
 8026792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026796:	f003 be3b 	b.w	802a410 <_putc_r>
 802679a:	bf00      	nop
 802679c:	200004c4 	.word	0x200004c4

080267a0 <_puts_r>:
 80267a0:	b570      	push	{r4, r5, r6, lr}
 80267a2:	460e      	mov	r6, r1
 80267a4:	4605      	mov	r5, r0
 80267a6:	b118      	cbz	r0, 80267b0 <_puts_r+0x10>
 80267a8:	6983      	ldr	r3, [r0, #24]
 80267aa:	b90b      	cbnz	r3, 80267b0 <_puts_r+0x10>
 80267ac:	f7fe fe0a 	bl	80253c4 <__sinit>
 80267b0:	69ab      	ldr	r3, [r5, #24]
 80267b2:	68ac      	ldr	r4, [r5, #8]
 80267b4:	b913      	cbnz	r3, 80267bc <_puts_r+0x1c>
 80267b6:	4628      	mov	r0, r5
 80267b8:	f7fe fe04 	bl	80253c4 <__sinit>
 80267bc:	4b2c      	ldr	r3, [pc, #176]	; (8026870 <_puts_r+0xd0>)
 80267be:	429c      	cmp	r4, r3
 80267c0:	d120      	bne.n	8026804 <_puts_r+0x64>
 80267c2:	686c      	ldr	r4, [r5, #4]
 80267c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267c6:	07db      	lsls	r3, r3, #31
 80267c8:	d405      	bmi.n	80267d6 <_puts_r+0x36>
 80267ca:	89a3      	ldrh	r3, [r4, #12]
 80267cc:	0598      	lsls	r0, r3, #22
 80267ce:	d402      	bmi.n	80267d6 <_puts_r+0x36>
 80267d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267d2:	f7fe ffcd 	bl	8025770 <__retarget_lock_acquire_recursive>
 80267d6:	89a3      	ldrh	r3, [r4, #12]
 80267d8:	0719      	lsls	r1, r3, #28
 80267da:	d51d      	bpl.n	8026818 <_puts_r+0x78>
 80267dc:	6923      	ldr	r3, [r4, #16]
 80267de:	b1db      	cbz	r3, 8026818 <_puts_r+0x78>
 80267e0:	3e01      	subs	r6, #1
 80267e2:	68a3      	ldr	r3, [r4, #8]
 80267e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80267e8:	3b01      	subs	r3, #1
 80267ea:	60a3      	str	r3, [r4, #8]
 80267ec:	bb39      	cbnz	r1, 802683e <_puts_r+0x9e>
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	da38      	bge.n	8026864 <_puts_r+0xc4>
 80267f2:	4622      	mov	r2, r4
 80267f4:	210a      	movs	r1, #10
 80267f6:	4628      	mov	r0, r5
 80267f8:	f001 fae2 	bl	8027dc0 <__swbuf_r>
 80267fc:	3001      	adds	r0, #1
 80267fe:	d011      	beq.n	8026824 <_puts_r+0x84>
 8026800:	250a      	movs	r5, #10
 8026802:	e011      	b.n	8026828 <_puts_r+0x88>
 8026804:	4b1b      	ldr	r3, [pc, #108]	; (8026874 <_puts_r+0xd4>)
 8026806:	429c      	cmp	r4, r3
 8026808:	d101      	bne.n	802680e <_puts_r+0x6e>
 802680a:	68ac      	ldr	r4, [r5, #8]
 802680c:	e7da      	b.n	80267c4 <_puts_r+0x24>
 802680e:	4b1a      	ldr	r3, [pc, #104]	; (8026878 <_puts_r+0xd8>)
 8026810:	429c      	cmp	r4, r3
 8026812:	bf08      	it	eq
 8026814:	68ec      	ldreq	r4, [r5, #12]
 8026816:	e7d5      	b.n	80267c4 <_puts_r+0x24>
 8026818:	4621      	mov	r1, r4
 802681a:	4628      	mov	r0, r5
 802681c:	f001 fb34 	bl	8027e88 <__swsetup_r>
 8026820:	2800      	cmp	r0, #0
 8026822:	d0dd      	beq.n	80267e0 <_puts_r+0x40>
 8026824:	f04f 35ff 	mov.w	r5, #4294967295
 8026828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802682a:	07da      	lsls	r2, r3, #31
 802682c:	d405      	bmi.n	802683a <_puts_r+0x9a>
 802682e:	89a3      	ldrh	r3, [r4, #12]
 8026830:	059b      	lsls	r3, r3, #22
 8026832:	d402      	bmi.n	802683a <_puts_r+0x9a>
 8026834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026836:	f7fe ff9d 	bl	8025774 <__retarget_lock_release_recursive>
 802683a:	4628      	mov	r0, r5
 802683c:	bd70      	pop	{r4, r5, r6, pc}
 802683e:	2b00      	cmp	r3, #0
 8026840:	da04      	bge.n	802684c <_puts_r+0xac>
 8026842:	69a2      	ldr	r2, [r4, #24]
 8026844:	429a      	cmp	r2, r3
 8026846:	dc06      	bgt.n	8026856 <_puts_r+0xb6>
 8026848:	290a      	cmp	r1, #10
 802684a:	d004      	beq.n	8026856 <_puts_r+0xb6>
 802684c:	6823      	ldr	r3, [r4, #0]
 802684e:	1c5a      	adds	r2, r3, #1
 8026850:	6022      	str	r2, [r4, #0]
 8026852:	7019      	strb	r1, [r3, #0]
 8026854:	e7c5      	b.n	80267e2 <_puts_r+0x42>
 8026856:	4622      	mov	r2, r4
 8026858:	4628      	mov	r0, r5
 802685a:	f001 fab1 	bl	8027dc0 <__swbuf_r>
 802685e:	3001      	adds	r0, #1
 8026860:	d1bf      	bne.n	80267e2 <_puts_r+0x42>
 8026862:	e7df      	b.n	8026824 <_puts_r+0x84>
 8026864:	6823      	ldr	r3, [r4, #0]
 8026866:	250a      	movs	r5, #10
 8026868:	1c5a      	adds	r2, r3, #1
 802686a:	6022      	str	r2, [r4, #0]
 802686c:	701d      	strb	r5, [r3, #0]
 802686e:	e7db      	b.n	8026828 <_puts_r+0x88>
 8026870:	0804769c 	.word	0x0804769c
 8026874:	080476bc 	.word	0x080476bc
 8026878:	0804767c 	.word	0x0804767c

0802687c <puts>:
 802687c:	4b02      	ldr	r3, [pc, #8]	; (8026888 <puts+0xc>)
 802687e:	4601      	mov	r1, r0
 8026880:	6818      	ldr	r0, [r3, #0]
 8026882:	f7ff bf8d 	b.w	80267a0 <_puts_r>
 8026886:	bf00      	nop
 8026888:	200004c4 	.word	0x200004c4

0802688c <rand>:
 802688c:	4b16      	ldr	r3, [pc, #88]	; (80268e8 <rand+0x5c>)
 802688e:	b510      	push	{r4, lr}
 8026890:	681c      	ldr	r4, [r3, #0]
 8026892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026894:	b9b3      	cbnz	r3, 80268c4 <rand+0x38>
 8026896:	2018      	movs	r0, #24
 8026898:	f7fe ff6e 	bl	8025778 <malloc>
 802689c:	63a0      	str	r0, [r4, #56]	; 0x38
 802689e:	b928      	cbnz	r0, 80268ac <rand+0x20>
 80268a0:	4602      	mov	r2, r0
 80268a2:	4b12      	ldr	r3, [pc, #72]	; (80268ec <rand+0x60>)
 80268a4:	4812      	ldr	r0, [pc, #72]	; (80268f0 <rand+0x64>)
 80268a6:	214e      	movs	r1, #78	; 0x4e
 80268a8:	f001 fba8 	bl	8027ffc <__assert_func>
 80268ac:	4a11      	ldr	r2, [pc, #68]	; (80268f4 <rand+0x68>)
 80268ae:	4b12      	ldr	r3, [pc, #72]	; (80268f8 <rand+0x6c>)
 80268b0:	e9c0 2300 	strd	r2, r3, [r0]
 80268b4:	4b11      	ldr	r3, [pc, #68]	; (80268fc <rand+0x70>)
 80268b6:	6083      	str	r3, [r0, #8]
 80268b8:	230b      	movs	r3, #11
 80268ba:	8183      	strh	r3, [r0, #12]
 80268bc:	2201      	movs	r2, #1
 80268be:	2300      	movs	r3, #0
 80268c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80268c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80268c6:	4a0e      	ldr	r2, [pc, #56]	; (8026900 <rand+0x74>)
 80268c8:	6920      	ldr	r0, [r4, #16]
 80268ca:	6963      	ldr	r3, [r4, #20]
 80268cc:	490d      	ldr	r1, [pc, #52]	; (8026904 <rand+0x78>)
 80268ce:	4342      	muls	r2, r0
 80268d0:	fb01 2203 	mla	r2, r1, r3, r2
 80268d4:	fba0 0101 	umull	r0, r1, r0, r1
 80268d8:	1c43      	adds	r3, r0, #1
 80268da:	eb42 0001 	adc.w	r0, r2, r1
 80268de:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80268e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80268e6:	bd10      	pop	{r4, pc}
 80268e8:	200004c4 	.word	0x200004c4
 80268ec:	080476e0 	.word	0x080476e0
 80268f0:	08047846 	.word	0x08047846
 80268f4:	abcd330e 	.word	0xabcd330e
 80268f8:	e66d1234 	.word	0xe66d1234
 80268fc:	0005deec 	.word	0x0005deec
 8026900:	5851f42d 	.word	0x5851f42d
 8026904:	4c957f2d 	.word	0x4c957f2d

08026908 <cleanup_glue>:
 8026908:	b538      	push	{r3, r4, r5, lr}
 802690a:	460c      	mov	r4, r1
 802690c:	6809      	ldr	r1, [r1, #0]
 802690e:	4605      	mov	r5, r0
 8026910:	b109      	cbz	r1, 8026916 <cleanup_glue+0xe>
 8026912:	f7ff fff9 	bl	8026908 <cleanup_glue>
 8026916:	4621      	mov	r1, r4
 8026918:	4628      	mov	r0, r5
 802691a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802691e:	f7ff b9ed 	b.w	8025cfc <_free_r>
 8026922:	Address 0x0000000008026922 is out of bounds.


08026924 <_reclaim_reent>:
 8026924:	4b2c      	ldr	r3, [pc, #176]	; (80269d8 <_reclaim_reent+0xb4>)
 8026926:	681b      	ldr	r3, [r3, #0]
 8026928:	4283      	cmp	r3, r0
 802692a:	b570      	push	{r4, r5, r6, lr}
 802692c:	4604      	mov	r4, r0
 802692e:	d051      	beq.n	80269d4 <_reclaim_reent+0xb0>
 8026930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026932:	b143      	cbz	r3, 8026946 <_reclaim_reent+0x22>
 8026934:	68db      	ldr	r3, [r3, #12]
 8026936:	2b00      	cmp	r3, #0
 8026938:	d14a      	bne.n	80269d0 <_reclaim_reent+0xac>
 802693a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802693c:	6819      	ldr	r1, [r3, #0]
 802693e:	b111      	cbz	r1, 8026946 <_reclaim_reent+0x22>
 8026940:	4620      	mov	r0, r4
 8026942:	f7ff f9db 	bl	8025cfc <_free_r>
 8026946:	6961      	ldr	r1, [r4, #20]
 8026948:	b111      	cbz	r1, 8026950 <_reclaim_reent+0x2c>
 802694a:	4620      	mov	r0, r4
 802694c:	f7ff f9d6 	bl	8025cfc <_free_r>
 8026950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026952:	b111      	cbz	r1, 802695a <_reclaim_reent+0x36>
 8026954:	4620      	mov	r0, r4
 8026956:	f7ff f9d1 	bl	8025cfc <_free_r>
 802695a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802695c:	b111      	cbz	r1, 8026964 <_reclaim_reent+0x40>
 802695e:	4620      	mov	r0, r4
 8026960:	f7ff f9cc 	bl	8025cfc <_free_r>
 8026964:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026966:	b111      	cbz	r1, 802696e <_reclaim_reent+0x4a>
 8026968:	4620      	mov	r0, r4
 802696a:	f7ff f9c7 	bl	8025cfc <_free_r>
 802696e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026970:	b111      	cbz	r1, 8026978 <_reclaim_reent+0x54>
 8026972:	4620      	mov	r0, r4
 8026974:	f7ff f9c2 	bl	8025cfc <_free_r>
 8026978:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802697a:	b111      	cbz	r1, 8026982 <_reclaim_reent+0x5e>
 802697c:	4620      	mov	r0, r4
 802697e:	f7ff f9bd 	bl	8025cfc <_free_r>
 8026982:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026984:	b111      	cbz	r1, 802698c <_reclaim_reent+0x68>
 8026986:	4620      	mov	r0, r4
 8026988:	f7ff f9b8 	bl	8025cfc <_free_r>
 802698c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802698e:	b111      	cbz	r1, 8026996 <_reclaim_reent+0x72>
 8026990:	4620      	mov	r0, r4
 8026992:	f7ff f9b3 	bl	8025cfc <_free_r>
 8026996:	69a3      	ldr	r3, [r4, #24]
 8026998:	b1e3      	cbz	r3, 80269d4 <_reclaim_reent+0xb0>
 802699a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802699c:	4620      	mov	r0, r4
 802699e:	4798      	blx	r3
 80269a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80269a2:	b1b9      	cbz	r1, 80269d4 <_reclaim_reent+0xb0>
 80269a4:	4620      	mov	r0, r4
 80269a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80269aa:	f7ff bfad 	b.w	8026908 <cleanup_glue>
 80269ae:	5949      	ldr	r1, [r1, r5]
 80269b0:	b941      	cbnz	r1, 80269c4 <_reclaim_reent+0xa0>
 80269b2:	3504      	adds	r5, #4
 80269b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80269b6:	2d80      	cmp	r5, #128	; 0x80
 80269b8:	68d9      	ldr	r1, [r3, #12]
 80269ba:	d1f8      	bne.n	80269ae <_reclaim_reent+0x8a>
 80269bc:	4620      	mov	r0, r4
 80269be:	f7ff f99d 	bl	8025cfc <_free_r>
 80269c2:	e7ba      	b.n	802693a <_reclaim_reent+0x16>
 80269c4:	680e      	ldr	r6, [r1, #0]
 80269c6:	4620      	mov	r0, r4
 80269c8:	f7ff f998 	bl	8025cfc <_free_r>
 80269cc:	4631      	mov	r1, r6
 80269ce:	e7ef      	b.n	80269b0 <_reclaim_reent+0x8c>
 80269d0:	2500      	movs	r5, #0
 80269d2:	e7ef      	b.n	80269b4 <_reclaim_reent+0x90>
 80269d4:	bd70      	pop	{r4, r5, r6, pc}
 80269d6:	bf00      	nop
 80269d8:	200004c4 	.word	0x200004c4

080269dc <modf>:
 80269dc:	b570      	push	{r4, r5, r6, lr}
 80269de:	ed2d 8b02 	vpush	{d8}
 80269e2:	eeb0 8b40 	vmov.f64	d8, d0
 80269e6:	ee18 5a90 	vmov	r5, s17
 80269ea:	4604      	mov	r4, r0
 80269ec:	f3c5 500a 	ubfx	r0, r5, #20, #11
 80269f0:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 80269f4:	2b13      	cmp	r3, #19
 80269f6:	ee10 1a10 	vmov	r1, s0
 80269fa:	dc23      	bgt.n	8026a44 <modf+0x68>
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	da09      	bge.n	8026a14 <modf+0x38>
 8026a00:	2200      	movs	r2, #0
 8026a02:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a06:	e9c4 2300 	strd	r2, r3, [r4]
 8026a0a:	eeb0 0b48 	vmov.f64	d0, d8
 8026a0e:	ecbd 8b02 	vpop	{d8}
 8026a12:	bd70      	pop	{r4, r5, r6, pc}
 8026a14:	481d      	ldr	r0, [pc, #116]	; (8026a8c <modf+0xb0>)
 8026a16:	4118      	asrs	r0, r3
 8026a18:	ea05 0300 	and.w	r3, r5, r0
 8026a1c:	4319      	orrs	r1, r3
 8026a1e:	d107      	bne.n	8026a30 <modf+0x54>
 8026a20:	ed84 0b00 	vstr	d0, [r4]
 8026a24:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a28:	460a      	mov	r2, r1
 8026a2a:	ec43 2b18 	vmov	d8, r2, r3
 8026a2e:	e7ec      	b.n	8026a0a <modf+0x2e>
 8026a30:	2200      	movs	r2, #0
 8026a32:	ea25 0300 	bic.w	r3, r5, r0
 8026a36:	ec43 2b17 	vmov	d7, r2, r3
 8026a3a:	e9c4 2300 	strd	r2, r3, [r4]
 8026a3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8026a42:	e7e2      	b.n	8026a0a <modf+0x2e>
 8026a44:	2b33      	cmp	r3, #51	; 0x33
 8026a46:	dd0d      	ble.n	8026a64 <modf+0x88>
 8026a48:	ed84 0b00 	vstr	d0, [r4]
 8026a4c:	f003 fd3a 	bl	802a4c4 <__fpclassifyd>
 8026a50:	b920      	cbnz	r0, 8026a5c <modf+0x80>
 8026a52:	ee38 8b08 	vadd.f64	d8, d8, d8
 8026a56:	ed84 8b00 	vstr	d8, [r4]
 8026a5a:	e7d6      	b.n	8026a0a <modf+0x2e>
 8026a5c:	2200      	movs	r2, #0
 8026a5e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a62:	e7e2      	b.n	8026a2a <modf+0x4e>
 8026a64:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8026a68:	f04f 30ff 	mov.w	r0, #4294967295
 8026a6c:	40d8      	lsrs	r0, r3
 8026a6e:	ea11 0600 	ands.w	r6, r1, r0
 8026a72:	d105      	bne.n	8026a80 <modf+0xa4>
 8026a74:	ed84 0b00 	vstr	d0, [r4]
 8026a78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a7c:	4632      	mov	r2, r6
 8026a7e:	e7d4      	b.n	8026a2a <modf+0x4e>
 8026a80:	ee18 3a90 	vmov	r3, s17
 8026a84:	ea21 0200 	bic.w	r2, r1, r0
 8026a88:	e7d5      	b.n	8026a36 <modf+0x5a>
 8026a8a:	bf00      	nop
 8026a8c:	000fffff 	.word	0x000fffff

08026a90 <_sbrk_r>:
 8026a90:	b538      	push	{r3, r4, r5, lr}
 8026a92:	4d06      	ldr	r5, [pc, #24]	; (8026aac <_sbrk_r+0x1c>)
 8026a94:	2300      	movs	r3, #0
 8026a96:	4604      	mov	r4, r0
 8026a98:	4608      	mov	r0, r1
 8026a9a:	602b      	str	r3, [r5, #0]
 8026a9c:	f7e1 fce0 	bl	8008460 <_sbrk>
 8026aa0:	1c43      	adds	r3, r0, #1
 8026aa2:	d102      	bne.n	8026aaa <_sbrk_r+0x1a>
 8026aa4:	682b      	ldr	r3, [r5, #0]
 8026aa6:	b103      	cbz	r3, 8026aaa <_sbrk_r+0x1a>
 8026aa8:	6023      	str	r3, [r4, #0]
 8026aaa:	bd38      	pop	{r3, r4, r5, pc}
 8026aac:	2003013c 	.word	0x2003013c

08026ab0 <sniprintf>:
 8026ab0:	b40c      	push	{r2, r3}
 8026ab2:	b530      	push	{r4, r5, lr}
 8026ab4:	4b17      	ldr	r3, [pc, #92]	; (8026b14 <sniprintf+0x64>)
 8026ab6:	1e0c      	subs	r4, r1, #0
 8026ab8:	681d      	ldr	r5, [r3, #0]
 8026aba:	b09d      	sub	sp, #116	; 0x74
 8026abc:	da08      	bge.n	8026ad0 <sniprintf+0x20>
 8026abe:	238b      	movs	r3, #139	; 0x8b
 8026ac0:	602b      	str	r3, [r5, #0]
 8026ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8026ac6:	b01d      	add	sp, #116	; 0x74
 8026ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026acc:	b002      	add	sp, #8
 8026ace:	4770      	bx	lr
 8026ad0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026ad8:	bf14      	ite	ne
 8026ada:	f104 33ff 	addne.w	r3, r4, #4294967295
 8026ade:	4623      	moveq	r3, r4
 8026ae0:	9304      	str	r3, [sp, #16]
 8026ae2:	9307      	str	r3, [sp, #28]
 8026ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026ae8:	9002      	str	r0, [sp, #8]
 8026aea:	9006      	str	r0, [sp, #24]
 8026aec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026af0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026af2:	ab21      	add	r3, sp, #132	; 0x84
 8026af4:	a902      	add	r1, sp, #8
 8026af6:	4628      	mov	r0, r5
 8026af8:	9301      	str	r3, [sp, #4]
 8026afa:	f002 ff0b 	bl	8029914 <_svfiprintf_r>
 8026afe:	1c43      	adds	r3, r0, #1
 8026b00:	bfbc      	itt	lt
 8026b02:	238b      	movlt	r3, #139	; 0x8b
 8026b04:	602b      	strlt	r3, [r5, #0]
 8026b06:	2c00      	cmp	r4, #0
 8026b08:	d0dd      	beq.n	8026ac6 <sniprintf+0x16>
 8026b0a:	9b02      	ldr	r3, [sp, #8]
 8026b0c:	2200      	movs	r2, #0
 8026b0e:	701a      	strb	r2, [r3, #0]
 8026b10:	e7d9      	b.n	8026ac6 <sniprintf+0x16>
 8026b12:	bf00      	nop
 8026b14:	200004c4 	.word	0x200004c4

08026b18 <siprintf>:
 8026b18:	b40e      	push	{r1, r2, r3}
 8026b1a:	b500      	push	{lr}
 8026b1c:	b09c      	sub	sp, #112	; 0x70
 8026b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8026b20:	9002      	str	r0, [sp, #8]
 8026b22:	9006      	str	r0, [sp, #24]
 8026b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026b28:	4809      	ldr	r0, [pc, #36]	; (8026b50 <siprintf+0x38>)
 8026b2a:	9107      	str	r1, [sp, #28]
 8026b2c:	9104      	str	r1, [sp, #16]
 8026b2e:	4909      	ldr	r1, [pc, #36]	; (8026b54 <siprintf+0x3c>)
 8026b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b34:	9105      	str	r1, [sp, #20]
 8026b36:	6800      	ldr	r0, [r0, #0]
 8026b38:	9301      	str	r3, [sp, #4]
 8026b3a:	a902      	add	r1, sp, #8
 8026b3c:	f002 feea 	bl	8029914 <_svfiprintf_r>
 8026b40:	9b02      	ldr	r3, [sp, #8]
 8026b42:	2200      	movs	r2, #0
 8026b44:	701a      	strb	r2, [r3, #0]
 8026b46:	b01c      	add	sp, #112	; 0x70
 8026b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8026b4c:	b003      	add	sp, #12
 8026b4e:	4770      	bx	lr
 8026b50:	200004c4 	.word	0x200004c4
 8026b54:	ffff0208 	.word	0xffff0208

08026b58 <siscanf>:
 8026b58:	b40e      	push	{r1, r2, r3}
 8026b5a:	b510      	push	{r4, lr}
 8026b5c:	b09f      	sub	sp, #124	; 0x7c
 8026b5e:	ac21      	add	r4, sp, #132	; 0x84
 8026b60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026b64:	f854 2b04 	ldr.w	r2, [r4], #4
 8026b68:	9201      	str	r2, [sp, #4]
 8026b6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026b6e:	9004      	str	r0, [sp, #16]
 8026b70:	9008      	str	r0, [sp, #32]
 8026b72:	f7d9 fb6f 	bl	8000254 <strlen>
 8026b76:	4b0c      	ldr	r3, [pc, #48]	; (8026ba8 <siscanf+0x50>)
 8026b78:	9005      	str	r0, [sp, #20]
 8026b7a:	9009      	str	r0, [sp, #36]	; 0x24
 8026b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8026b7e:	480b      	ldr	r0, [pc, #44]	; (8026bac <siscanf+0x54>)
 8026b80:	9a01      	ldr	r2, [sp, #4]
 8026b82:	6800      	ldr	r0, [r0, #0]
 8026b84:	9403      	str	r4, [sp, #12]
 8026b86:	2300      	movs	r3, #0
 8026b88:	9311      	str	r3, [sp, #68]	; 0x44
 8026b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8026b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026b94:	a904      	add	r1, sp, #16
 8026b96:	4623      	mov	r3, r4
 8026b98:	f003 f816 	bl	8029bc8 <__ssvfiscanf_r>
 8026b9c:	b01f      	add	sp, #124	; 0x7c
 8026b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026ba2:	b003      	add	sp, #12
 8026ba4:	4770      	bx	lr
 8026ba6:	bf00      	nop
 8026ba8:	08026bd3 	.word	0x08026bd3
 8026bac:	200004c4 	.word	0x200004c4

08026bb0 <__sread>:
 8026bb0:	b510      	push	{r4, lr}
 8026bb2:	460c      	mov	r4, r1
 8026bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bb8:	f003 fc72 	bl	802a4a0 <_read_r>
 8026bbc:	2800      	cmp	r0, #0
 8026bbe:	bfab      	itete	ge
 8026bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8026bc4:	181b      	addge	r3, r3, r0
 8026bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026bca:	bfac      	ite	ge
 8026bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8026bce:	81a3      	strhlt	r3, [r4, #12]
 8026bd0:	bd10      	pop	{r4, pc}

08026bd2 <__seofread>:
 8026bd2:	2000      	movs	r0, #0
 8026bd4:	4770      	bx	lr

08026bd6 <__swrite>:
 8026bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026bda:	461f      	mov	r7, r3
 8026bdc:	898b      	ldrh	r3, [r1, #12]
 8026bde:	05db      	lsls	r3, r3, #23
 8026be0:	4605      	mov	r5, r0
 8026be2:	460c      	mov	r4, r1
 8026be4:	4616      	mov	r6, r2
 8026be6:	d505      	bpl.n	8026bf4 <__swrite+0x1e>
 8026be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bec:	2302      	movs	r3, #2
 8026bee:	2200      	movs	r2, #0
 8026bf0:	f002 fa16 	bl	8029020 <_lseek_r>
 8026bf4:	89a3      	ldrh	r3, [r4, #12]
 8026bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026bfe:	81a3      	strh	r3, [r4, #12]
 8026c00:	4632      	mov	r2, r6
 8026c02:	463b      	mov	r3, r7
 8026c04:	4628      	mov	r0, r5
 8026c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026c0a:	f001 b92b 	b.w	8027e64 <_write_r>

08026c0e <__sseek>:
 8026c0e:	b510      	push	{r4, lr}
 8026c10:	460c      	mov	r4, r1
 8026c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c16:	f002 fa03 	bl	8029020 <_lseek_r>
 8026c1a:	1c43      	adds	r3, r0, #1
 8026c1c:	89a3      	ldrh	r3, [r4, #12]
 8026c1e:	bf15      	itete	ne
 8026c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8026c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026c2a:	81a3      	strheq	r3, [r4, #12]
 8026c2c:	bf18      	it	ne
 8026c2e:	81a3      	strhne	r3, [r4, #12]
 8026c30:	bd10      	pop	{r4, pc}

08026c32 <__sclose>:
 8026c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c36:	f001 b9ff 	b.w	8028038 <_close_r>

08026c3a <stpcpy>:
 8026c3a:	4603      	mov	r3, r0
 8026c3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c40:	4618      	mov	r0, r3
 8026c42:	f803 2b01 	strb.w	r2, [r3], #1
 8026c46:	2a00      	cmp	r2, #0
 8026c48:	d1f8      	bne.n	8026c3c <stpcpy+0x2>
 8026c4a:	4770      	bx	lr

08026c4c <strcat>:
 8026c4c:	b510      	push	{r4, lr}
 8026c4e:	4602      	mov	r2, r0
 8026c50:	7814      	ldrb	r4, [r2, #0]
 8026c52:	4613      	mov	r3, r2
 8026c54:	3201      	adds	r2, #1
 8026c56:	2c00      	cmp	r4, #0
 8026c58:	d1fa      	bne.n	8026c50 <strcat+0x4>
 8026c5a:	3b01      	subs	r3, #1
 8026c5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026c64:	2a00      	cmp	r2, #0
 8026c66:	d1f9      	bne.n	8026c5c <strcat+0x10>
 8026c68:	bd10      	pop	{r4, pc}

08026c6a <strchr>:
 8026c6a:	b2c9      	uxtb	r1, r1
 8026c6c:	4603      	mov	r3, r0
 8026c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026c72:	b11a      	cbz	r2, 8026c7c <strchr+0x12>
 8026c74:	428a      	cmp	r2, r1
 8026c76:	d1f9      	bne.n	8026c6c <strchr+0x2>
 8026c78:	4618      	mov	r0, r3
 8026c7a:	4770      	bx	lr
 8026c7c:	2900      	cmp	r1, #0
 8026c7e:	bf18      	it	ne
 8026c80:	2300      	movne	r3, #0
 8026c82:	e7f9      	b.n	8026c78 <strchr+0xe>

08026c84 <strcpy>:
 8026c84:	4603      	mov	r3, r0
 8026c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c8a:	f803 2b01 	strb.w	r2, [r3], #1
 8026c8e:	2a00      	cmp	r2, #0
 8026c90:	d1f9      	bne.n	8026c86 <strcpy+0x2>
 8026c92:	4770      	bx	lr

08026c94 <iso_year_adjust>:
 8026c94:	6942      	ldr	r2, [r0, #20]
 8026c96:	2a00      	cmp	r2, #0
 8026c98:	f240 736c 	movw	r3, #1900	; 0x76c
 8026c9c:	bfa8      	it	ge
 8026c9e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8026ca2:	4413      	add	r3, r2
 8026ca4:	0792      	lsls	r2, r2, #30
 8026ca6:	d105      	bne.n	8026cb4 <iso_year_adjust+0x20>
 8026ca8:	2164      	movs	r1, #100	; 0x64
 8026caa:	fb93 f2f1 	sdiv	r2, r3, r1
 8026cae:	fb01 3212 	mls	r2, r1, r2, r3
 8026cb2:	b9da      	cbnz	r2, 8026cec <iso_year_adjust+0x58>
 8026cb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026cb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8026cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8026cc0:	fab3 f383 	clz	r3, r3
 8026cc4:	095b      	lsrs	r3, r3, #5
 8026cc6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8026cca:	0040      	lsls	r0, r0, #1
 8026ccc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8026cd0:	4418      	add	r0, r3
 8026cd2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8026cd6:	4298      	cmp	r0, r3
 8026cd8:	d03a      	beq.n	8026d50 <iso_year_adjust+0xbc>
 8026cda:	dc21      	bgt.n	8026d20 <iso_year_adjust+0x8c>
 8026cdc:	2801      	cmp	r0, #1
 8026cde:	dc1a      	bgt.n	8026d16 <iso_year_adjust+0x82>
 8026ce0:	2800      	cmp	r0, #0
 8026ce2:	bfb4      	ite	lt
 8026ce4:	2000      	movlt	r0, #0
 8026ce6:	f04f 30ff 	movge.w	r0, #4294967295
 8026cea:	4770      	bx	lr
 8026cec:	2301      	movs	r3, #1
 8026cee:	e7ea      	b.n	8026cc6 <iso_year_adjust+0x32>
 8026cf0:	2817      	cmp	r0, #23
 8026cf2:	d813      	bhi.n	8026d1c <iso_year_adjust+0x88>
 8026cf4:	e8df f000 	tbb	[pc, r0]
 8026cf8:	0c0c0c0c 	.word	0x0c0c0c0c
 8026cfc:	0c0c1212 	.word	0x0c0c1212
 8026d00:	12121212 	.word	0x12121212
 8026d04:	12121212 	.word	0x12121212
 8026d08:	0c0c1212 	.word	0x0c0c1212
 8026d0c:	0c0c1212 	.word	0x0c0c1212
 8026d10:	f04f 30ff 	mov.w	r0, #4294967295
 8026d14:	4770      	bx	lr
 8026d16:	380a      	subs	r0, #10
 8026d18:	2817      	cmp	r0, #23
 8026d1a:	d9e9      	bls.n	8026cf0 <iso_year_adjust+0x5c>
 8026d1c:	2000      	movs	r0, #0
 8026d1e:	4770      	bx	lr
 8026d20:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8026d24:	4298      	cmp	r0, r3
 8026d26:	dc06      	bgt.n	8026d36 <iso_year_adjust+0xa2>
 8026d28:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8026d2c:	4298      	cmp	r0, r3
 8026d2e:	bfd4      	ite	le
 8026d30:	2000      	movle	r0, #0
 8026d32:	2001      	movgt	r0, #1
 8026d34:	4770      	bx	lr
 8026d36:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8026d3a:	3802      	subs	r0, #2
 8026d3c:	2815      	cmp	r0, #21
 8026d3e:	d8ed      	bhi.n	8026d1c <iso_year_adjust+0x88>
 8026d40:	2301      	movs	r3, #1
 8026d42:	4083      	lsls	r3, r0
 8026d44:	4803      	ldr	r0, [pc, #12]	; (8026d54 <iso_year_adjust+0xc0>)
 8026d46:	4018      	ands	r0, r3
 8026d48:	3800      	subs	r0, #0
 8026d4a:	bf18      	it	ne
 8026d4c:	2001      	movne	r0, #1
 8026d4e:	4770      	bx	lr
 8026d50:	2001      	movs	r0, #1
 8026d52:	4770      	bx	lr
 8026d54:	002a001f 	.word	0x002a001f

08026d58 <__strftime.isra.0>:
 8026d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d5c:	b08f      	sub	sp, #60	; 0x3c
 8026d5e:	461e      	mov	r6, r3
 8026d60:	2300      	movs	r3, #0
 8026d62:	4607      	mov	r7, r0
 8026d64:	460d      	mov	r5, r1
 8026d66:	9302      	str	r3, [sp, #8]
 8026d68:	461c      	mov	r4, r3
 8026d6a:	7813      	ldrb	r3, [r2, #0]
 8026d6c:	2b00      	cmp	r3, #0
 8026d6e:	f000 84ba 	beq.w	80276e6 <__strftime.isra.0+0x98e>
 8026d72:	2b25      	cmp	r3, #37	; 0x25
 8026d74:	d11f      	bne.n	8026db6 <__strftime.isra.0+0x5e>
 8026d76:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026d7a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8026d7e:	d024      	beq.n	8026dca <__strftime.isra.0+0x72>
 8026d80:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026d84:	d021      	beq.n	8026dca <__strftime.isra.0+0x72>
 8026d86:	f102 0801 	add.w	r8, r2, #1
 8026d8a:	f04f 0b00 	mov.w	fp, #0
 8026d8e:	f898 2000 	ldrb.w	r2, [r8]
 8026d92:	3a31      	subs	r2, #49	; 0x31
 8026d94:	2a08      	cmp	r2, #8
 8026d96:	d81b      	bhi.n	8026dd0 <__strftime.isra.0+0x78>
 8026d98:	4640      	mov	r0, r8
 8026d9a:	220a      	movs	r2, #10
 8026d9c:	a906      	add	r1, sp, #24
 8026d9e:	f000 fdc9 	bl	8027934 <strtoul>
 8026da2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026da6:	4681      	mov	r9, r0
 8026da8:	f898 2000 	ldrb.w	r2, [r8]
 8026dac:	2a45      	cmp	r2, #69	; 0x45
 8026dae:	d112      	bne.n	8026dd6 <__strftime.isra.0+0x7e>
 8026db0:	f108 0801 	add.w	r8, r8, #1
 8026db4:	e011      	b.n	8026dda <__strftime.isra.0+0x82>
 8026db6:	1e69      	subs	r1, r5, #1
 8026db8:	42a1      	cmp	r1, r4
 8026dba:	d802      	bhi.n	8026dc2 <__strftime.isra.0+0x6a>
 8026dbc:	2400      	movs	r4, #0
 8026dbe:	f000 bc95 	b.w	80276ec <__strftime.isra.0+0x994>
 8026dc2:	553b      	strb	r3, [r7, r4]
 8026dc4:	3201      	adds	r2, #1
 8026dc6:	3401      	adds	r4, #1
 8026dc8:	e7cf      	b.n	8026d6a <__strftime.isra.0+0x12>
 8026dca:	f102 0802 	add.w	r8, r2, #2
 8026dce:	e7de      	b.n	8026d8e <__strftime.isra.0+0x36>
 8026dd0:	f04f 0900 	mov.w	r9, #0
 8026dd4:	e7e8      	b.n	8026da8 <__strftime.isra.0+0x50>
 8026dd6:	2a4f      	cmp	r2, #79	; 0x4f
 8026dd8:	d0ea      	beq.n	8026db0 <__strftime.isra.0+0x58>
 8026dda:	f898 0000 	ldrb.w	r0, [r8]
 8026dde:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8026de2:	2a55      	cmp	r2, #85	; 0x55
 8026de4:	d8ea      	bhi.n	8026dbc <__strftime.isra.0+0x64>
 8026de6:	a301      	add	r3, pc, #4	; (adr r3, 8026dec <__strftime.isra.0+0x94>)
 8026de8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8026dec:	080276db 	.word	0x080276db
 8026df0:	08026dbd 	.word	0x08026dbd
 8026df4:	08026dbd 	.word	0x08026dbd
 8026df8:	08026dbd 	.word	0x08026dbd
 8026dfc:	08026dbd 	.word	0x08026dbd
 8026e00:	08026dbd 	.word	0x08026dbd
 8026e04:	08026dbd 	.word	0x08026dbd
 8026e08:	08026dbd 	.word	0x08026dbd
 8026e0c:	08026dbd 	.word	0x08026dbd
 8026e10:	08026dbd 	.word	0x08026dbd
 8026e14:	08026dbd 	.word	0x08026dbd
 8026e18:	08026dbd 	.word	0x08026dbd
 8026e1c:	08026dbd 	.word	0x08026dbd
 8026e20:	08026dbd 	.word	0x08026dbd
 8026e24:	08026dbd 	.word	0x08026dbd
 8026e28:	08026dbd 	.word	0x08026dbd
 8026e2c:	08026dbd 	.word	0x08026dbd
 8026e30:	08026dbd 	.word	0x08026dbd
 8026e34:	08026dbd 	.word	0x08026dbd
 8026e38:	08026dbd 	.word	0x08026dbd
 8026e3c:	08026dbd 	.word	0x08026dbd
 8026e40:	08026dbd 	.word	0x08026dbd
 8026e44:	08026dbd 	.word	0x08026dbd
 8026e48:	08026dbd 	.word	0x08026dbd
 8026e4c:	08026dbd 	.word	0x08026dbd
 8026e50:	08026dbd 	.word	0x08026dbd
 8026e54:	08026dbd 	.word	0x08026dbd
 8026e58:	08026dbd 	.word	0x08026dbd
 8026e5c:	08026f81 	.word	0x08026f81
 8026e60:	08026fd9 	.word	0x08026fd9
 8026e64:	08027047 	.word	0x08027047
 8026e68:	080270e5 	.word	0x080270e5
 8026e6c:	08026dbd 	.word	0x08026dbd
 8026e70:	08027131 	.word	0x08027131
 8026e74:	0802721d 	.word	0x0802721d
 8026e78:	080272f7 	.word	0x080272f7
 8026e7c:	08027305 	.word	0x08027305
 8026e80:	08026dbd 	.word	0x08026dbd
 8026e84:	08026dbd 	.word	0x08026dbd
 8026e88:	08026dbd 	.word	0x08026dbd
 8026e8c:	08027335 	.word	0x08027335
 8026e90:	08026dbd 	.word	0x08026dbd
 8026e94:	08026dbd 	.word	0x08026dbd
 8026e98:	08027349 	.word	0x08027349
 8026e9c:	08026dbd 	.word	0x08026dbd
 8026ea0:	0802739b 	.word	0x0802739b
 8026ea4:	080274af 	.word	0x080274af
 8026ea8:	080274bf 	.word	0x080274bf
 8026eac:	080274e7 	.word	0x080274e7
 8026eb0:	08027521 	.word	0x08027521
 8026eb4:	08027595 	.word	0x08027595
 8026eb8:	0802703f 	.word	0x0802703f
 8026ebc:	080275c1 	.word	0x080275c1
 8026ec0:	08027689 	.word	0x08027689
 8026ec4:	08026dbd 	.word	0x08026dbd
 8026ec8:	08026dbd 	.word	0x08026dbd
 8026ecc:	08026dbd 	.word	0x08026dbd
 8026ed0:	08026dbd 	.word	0x08026dbd
 8026ed4:	08026dbd 	.word	0x08026dbd
 8026ed8:	08026dbd 	.word	0x08026dbd
 8026edc:	08026f45 	.word	0x08026f45
 8026ee0:	08026faf 	.word	0x08026faf
 8026ee4:	08027005 	.word	0x08027005
 8026ee8:	080270c1 	.word	0x080270c1
 8026eec:	080270c1 	.word	0x080270c1
 8026ef0:	08026dbd 	.word	0x08026dbd
 8026ef4:	08027183 	.word	0x08027183
 8026ef8:	08026faf 	.word	0x08026faf
 8026efc:	08026dbd 	.word	0x08026dbd
 8026f00:	08027327 	.word	0x08027327
 8026f04:	080272f7 	.word	0x080272f7
 8026f08:	08027305 	.word	0x08027305
 8026f0c:	0802732f 	.word	0x0802732f
 8026f10:	08027339 	.word	0x08027339
 8026f14:	08026dbd 	.word	0x08026dbd
 8026f18:	08027349 	.word	0x08027349
 8026f1c:	08026dbd 	.word	0x08026dbd
 8026f20:	0802702f 	.word	0x0802702f
 8026f24:	080273ad 	.word	0x080273ad
 8026f28:	080274b3 	.word	0x080274b3
 8026f2c:	080274cd 	.word	0x080274cd
 8026f30:	08026dbd 	.word	0x08026dbd
 8026f34:	08027587 	.word	0x08027587
 8026f38:	08027037 	.word	0x08027037
 8026f3c:	080275a5 	.word	0x080275a5
 8026f40:	08027613 	.word	0x08027613
 8026f44:	69b3      	ldr	r3, [r6, #24]
 8026f46:	4aa9      	ldr	r2, [pc, #676]	; (80271ec <__strftime.isra.0+0x494>)
 8026f48:	3318      	adds	r3, #24
 8026f4a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026f4e:	4648      	mov	r0, r9
 8026f50:	f7d9 f980 	bl	8000254 <strlen>
 8026f54:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f58:	4420      	add	r0, r4
 8026f5a:	1e6b      	subs	r3, r5, #1
 8026f5c:	42a0      	cmp	r0, r4
 8026f5e:	d107      	bne.n	8026f70 <__strftime.isra.0+0x218>
 8026f60:	f898 3000 	ldrb.w	r3, [r8]
 8026f64:	2b00      	cmp	r3, #0
 8026f66:	f000 83be 	beq.w	80276e6 <__strftime.isra.0+0x98e>
 8026f6a:	f108 0201 	add.w	r2, r8, #1
 8026f6e:	e6fc      	b.n	8026d6a <__strftime.isra.0+0x12>
 8026f70:	42a3      	cmp	r3, r4
 8026f72:	f67f af23 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8026f76:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f7a:	553a      	strb	r2, [r7, r4]
 8026f7c:	3401      	adds	r4, #1
 8026f7e:	e7ed      	b.n	8026f5c <__strftime.isra.0+0x204>
 8026f80:	69b2      	ldr	r2, [r6, #24]
 8026f82:	4b9a      	ldr	r3, [pc, #616]	; (80271ec <__strftime.isra.0+0x494>)
 8026f84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026f88:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8026f8c:	4648      	mov	r0, r9
 8026f8e:	f7d9 f961 	bl	8000254 <strlen>
 8026f92:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f96:	4420      	add	r0, r4
 8026f98:	1e6b      	subs	r3, r5, #1
 8026f9a:	42a0      	cmp	r0, r4
 8026f9c:	d0e0      	beq.n	8026f60 <__strftime.isra.0+0x208>
 8026f9e:	42a3      	cmp	r3, r4
 8026fa0:	f67f af0c 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8026fa4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026fa8:	553a      	strb	r2, [r7, r4]
 8026faa:	3401      	adds	r4, #1
 8026fac:	e7f5      	b.n	8026f9a <__strftime.isra.0+0x242>
 8026fae:	4b8f      	ldr	r3, [pc, #572]	; (80271ec <__strftime.isra.0+0x494>)
 8026fb0:	6932      	ldr	r2, [r6, #16]
 8026fb2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8026fb6:	4648      	mov	r0, r9
 8026fb8:	f7d9 f94c 	bl	8000254 <strlen>
 8026fbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8026fc0:	4420      	add	r0, r4
 8026fc2:	1e6b      	subs	r3, r5, #1
 8026fc4:	42a0      	cmp	r0, r4
 8026fc6:	d0cb      	beq.n	8026f60 <__strftime.isra.0+0x208>
 8026fc8:	42a3      	cmp	r3, r4
 8026fca:	f67f aef7 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8026fce:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026fd2:	553a      	strb	r2, [r7, r4]
 8026fd4:	3401      	adds	r4, #1
 8026fd6:	e7f5      	b.n	8026fc4 <__strftime.isra.0+0x26c>
 8026fd8:	6933      	ldr	r3, [r6, #16]
 8026fda:	4a84      	ldr	r2, [pc, #528]	; (80271ec <__strftime.isra.0+0x494>)
 8026fdc:	330c      	adds	r3, #12
 8026fde:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026fe2:	4648      	mov	r0, r9
 8026fe4:	f7d9 f936 	bl	8000254 <strlen>
 8026fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8026fec:	4420      	add	r0, r4
 8026fee:	1e6b      	subs	r3, r5, #1
 8026ff0:	42a0      	cmp	r0, r4
 8026ff2:	d0b5      	beq.n	8026f60 <__strftime.isra.0+0x208>
 8026ff4:	42a3      	cmp	r3, r4
 8026ff6:	f67f aee1 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8026ffa:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026ffe:	553a      	strb	r2, [r7, r4]
 8027000:	3401      	adds	r4, #1
 8027002:	e7f5      	b.n	8026ff0 <__strftime.isra.0+0x298>
 8027004:	4b79      	ldr	r3, [pc, #484]	; (80271ec <__strftime.isra.0+0x494>)
 8027006:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 802700a:	4648      	mov	r0, r9
 802700c:	f7d9 f922 	bl	8000254 <strlen>
 8027010:	f899 3000 	ldrb.w	r3, [r9]
 8027014:	2b00      	cmp	r3, #0
 8027016:	d0a3      	beq.n	8026f60 <__strftime.isra.0+0x208>
 8027018:	4633      	mov	r3, r6
 802701a:	464a      	mov	r2, r9
 802701c:	1b29      	subs	r1, r5, r4
 802701e:	1938      	adds	r0, r7, r4
 8027020:	f7ff fe9a 	bl	8026d58 <__strftime.isra.0>
 8027024:	2800      	cmp	r0, #0
 8027026:	f77f aec9 	ble.w	8026dbc <__strftime.isra.0+0x64>
 802702a:	4404      	add	r4, r0
 802702c:	e798      	b.n	8026f60 <__strftime.isra.0+0x208>
 802702e:	4b6f      	ldr	r3, [pc, #444]	; (80271ec <__strftime.isra.0+0x494>)
 8027030:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8027034:	e7e9      	b.n	802700a <__strftime.isra.0+0x2b2>
 8027036:	4b6d      	ldr	r3, [pc, #436]	; (80271ec <__strftime.isra.0+0x494>)
 8027038:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 802703c:	e7e5      	b.n	802700a <__strftime.isra.0+0x2b2>
 802703e:	4b6b      	ldr	r3, [pc, #428]	; (80271ec <__strftime.isra.0+0x494>)
 8027040:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8027044:	e7e1      	b.n	802700a <__strftime.isra.0+0x2b2>
 8027046:	496a      	ldr	r1, [pc, #424]	; (80271f0 <__strftime.isra.0+0x498>)
 8027048:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802704c:	458a      	cmp	sl, r1
 802704e:	bfac      	ite	ge
 8027050:	2100      	movge	r1, #0
 8027052:	2101      	movlt	r1, #1
 8027054:	f1ba 0f00 	cmp.w	sl, #0
 8027058:	db11      	blt.n	802707e <__strftime.isra.0+0x326>
 802705a:	2064      	movs	r0, #100	; 0x64
 802705c:	fb9a f0f0 	sdiv	r0, sl, r0
 8027060:	3013      	adds	r0, #19
 8027062:	f1bb 0f00 	cmp.w	fp, #0
 8027066:	d014      	beq.n	8027092 <__strftime.isra.0+0x33a>
 8027068:	2863      	cmp	r0, #99	; 0x63
 802706a:	dd27      	ble.n	80270bc <__strftime.isra.0+0x364>
 802706c:	4b61      	ldr	r3, [pc, #388]	; (80271f4 <__strftime.isra.0+0x49c>)
 802706e:	4a62      	ldr	r2, [pc, #392]	; (80271f8 <__strftime.isra.0+0x4a0>)
 8027070:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8027074:	bf18      	it	ne
 8027076:	461a      	movne	r2, r3
 8027078:	f8df c198 	ldr.w	ip, [pc, #408]	; 8027214 <__strftime.isra.0+0x4bc>
 802707c:	e00c      	b.n	8027098 <__strftime.isra.0+0x340>
 802707e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8027082:	9103      	str	r1, [sp, #12]
 8027084:	f000 ff6e 	bl	8027f64 <abs>
 8027088:	2264      	movs	r2, #100	; 0x64
 802708a:	9903      	ldr	r1, [sp, #12]
 802708c:	fb90 f0f2 	sdiv	r0, r0, r2
 8027090:	e7e7      	b.n	8027062 <__strftime.isra.0+0x30a>
 8027092:	4a58      	ldr	r2, [pc, #352]	; (80271f4 <__strftime.isra.0+0x49c>)
 8027094:	f8df c180 	ldr.w	ip, [pc, #384]	; 8027218 <__strftime.isra.0+0x4c0>
 8027098:	4b58      	ldr	r3, [pc, #352]	; (80271fc <__strftime.isra.0+0x4a4>)
 802709a:	9001      	str	r0, [sp, #4]
 802709c:	f1b9 0f02 	cmp.w	r9, #2
 80270a0:	bf2c      	ite	cs
 80270a2:	ebc1 0109 	rsbcs	r1, r1, r9
 80270a6:	f1c1 0102 	rsbcc	r1, r1, #2
 80270aa:	9100      	str	r1, [sp, #0]
 80270ac:	4950      	ldr	r1, [pc, #320]	; (80271f0 <__strftime.isra.0+0x498>)
 80270ae:	458a      	cmp	sl, r1
 80270b0:	bfa8      	it	ge
 80270b2:	4613      	movge	r3, r2
 80270b4:	4662      	mov	r2, ip
 80270b6:	1b29      	subs	r1, r5, r4
 80270b8:	1938      	adds	r0, r7, r4
 80270ba:	e028      	b.n	802710e <__strftime.isra.0+0x3b6>
 80270bc:	4a4d      	ldr	r2, [pc, #308]	; (80271f4 <__strftime.isra.0+0x49c>)
 80270be:	e7db      	b.n	8027078 <__strftime.isra.0+0x320>
 80270c0:	494f      	ldr	r1, [pc, #316]	; (8027200 <__strftime.isra.0+0x4a8>)
 80270c2:	4a50      	ldr	r2, [pc, #320]	; (8027204 <__strftime.isra.0+0x4ac>)
 80270c4:	68f3      	ldr	r3, [r6, #12]
 80270c6:	2864      	cmp	r0, #100	; 0x64
 80270c8:	bf08      	it	eq
 80270ca:	460a      	moveq	r2, r1
 80270cc:	1b29      	subs	r1, r5, r4
 80270ce:	1938      	adds	r0, r7, r4
 80270d0:	f7ff fcee 	bl	8026ab0 <sniprintf>
 80270d4:	2800      	cmp	r0, #0
 80270d6:	f6ff ae71 	blt.w	8026dbc <__strftime.isra.0+0x64>
 80270da:	4404      	add	r4, r0
 80270dc:	42a5      	cmp	r5, r4
 80270de:	f63f af3f 	bhi.w	8026f60 <__strftime.isra.0+0x208>
 80270e2:	e66b      	b.n	8026dbc <__strftime.isra.0+0x64>
 80270e4:	6970      	ldr	r0, [r6, #20]
 80270e6:	6933      	ldr	r3, [r6, #16]
 80270e8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80270ec:	2800      	cmp	r0, #0
 80270ee:	eb07 0904 	add.w	r9, r7, r4
 80270f2:	eba5 0104 	sub.w	r1, r5, r4
 80270f6:	f103 0301 	add.w	r3, r3, #1
 80270fa:	db0b      	blt.n	8027114 <__strftime.isra.0+0x3bc>
 80270fc:	2264      	movs	r2, #100	; 0x64
 80270fe:	fb90 fcf2 	sdiv	ip, r0, r2
 8027102:	fb02 001c 	mls	r0, r2, ip, r0
 8027106:	4a40      	ldr	r2, [pc, #256]	; (8027208 <__strftime.isra.0+0x4b0>)
 8027108:	e9cd a000 	strd	sl, r0, [sp]
 802710c:	4648      	mov	r0, r9
 802710e:	f7ff fccf 	bl	8026ab0 <sniprintf>
 8027112:	e7df      	b.n	80270d4 <__strftime.isra.0+0x37c>
 8027114:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8027118:	e9cd 1303 	strd	r1, r3, [sp, #12]
 802711c:	f000 ff22 	bl	8027f64 <abs>
 8027120:	2264      	movs	r2, #100	; 0x64
 8027122:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8027126:	fb90 fcf2 	sdiv	ip, r0, r2
 802712a:	fb0c 0012 	mls	r0, ip, r2, r0
 802712e:	e7ea      	b.n	8027106 <__strftime.isra.0+0x3ae>
 8027130:	2225      	movs	r2, #37	; 0x25
 8027132:	f88d 2018 	strb.w	r2, [sp, #24]
 8027136:	f1bb 0f00 	cmp.w	fp, #0
 802713a:	d011      	beq.n	8027160 <__strftime.isra.0+0x408>
 802713c:	f1b9 0f06 	cmp.w	r9, #6
 8027140:	bf38      	it	cc
 8027142:	f04f 0906 	movcc.w	r9, #6
 8027146:	f1b9 0306 	subs.w	r3, r9, #6
 802714a:	f88d b019 	strb.w	fp, [sp, #25]
 802714e:	d10c      	bne.n	802716a <__strftime.isra.0+0x412>
 8027150:	f10d 001a 	add.w	r0, sp, #26
 8027154:	492d      	ldr	r1, [pc, #180]	; (802720c <__strftime.isra.0+0x4b4>)
 8027156:	f7ff fd95 	bl	8026c84 <strcpy>
 802715a:	4633      	mov	r3, r6
 802715c:	aa06      	add	r2, sp, #24
 802715e:	e75d      	b.n	802701c <__strftime.isra.0+0x2c4>
 8027160:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8027164:	f04f 090a 	mov.w	r9, #10
 8027168:	e7ed      	b.n	8027146 <__strftime.isra.0+0x3ee>
 802716a:	4a29      	ldr	r2, [pc, #164]	; (8027210 <__strftime.isra.0+0x4b8>)
 802716c:	211e      	movs	r1, #30
 802716e:	f10d 001a 	add.w	r0, sp, #26
 8027172:	f7ff fc9d 	bl	8026ab0 <sniprintf>
 8027176:	2800      	cmp	r0, #0
 8027178:	ddea      	ble.n	8027150 <__strftime.isra.0+0x3f8>
 802717a:	f10d 031a 	add.w	r3, sp, #26
 802717e:	4418      	add	r0, r3
 8027180:	e7e8      	b.n	8027154 <__strftime.isra.0+0x3fc>
 8027182:	4630      	mov	r0, r6
 8027184:	f7ff fd86 	bl	8026c94 <iso_year_adjust>
 8027188:	4681      	mov	r9, r0
 802718a:	6970      	ldr	r0, [r6, #20]
 802718c:	2800      	cmp	r0, #0
 802718e:	db11      	blt.n	80271b4 <__strftime.isra.0+0x45c>
 8027190:	2364      	movs	r3, #100	; 0x64
 8027192:	fb90 f2f3 	sdiv	r2, r0, r3
 8027196:	fb03 0012 	mls	r0, r3, r2, r0
 802719a:	2264      	movs	r2, #100	; 0x64
 802719c:	4481      	add	r9, r0
 802719e:	fb99 f3f2 	sdiv	r3, r9, r2
 80271a2:	fb02 9913 	mls	r9, r2, r3, r9
 80271a6:	4491      	add	r9, r2
 80271a8:	fbb9 f3f2 	udiv	r3, r9, r2
 80271ac:	fb02 9313 	mls	r3, r2, r3, r9
 80271b0:	4a13      	ldr	r2, [pc, #76]	; (8027200 <__strftime.isra.0+0x4a8>)
 80271b2:	e78b      	b.n	80270cc <__strftime.isra.0+0x374>
 80271b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80271b8:	f000 fed4 	bl	8027f64 <abs>
 80271bc:	2364      	movs	r3, #100	; 0x64
 80271be:	f1b9 0f00 	cmp.w	r9, #0
 80271c2:	fb90 f2f3 	sdiv	r2, r0, r3
 80271c6:	fb02 0013 	mls	r0, r2, r3, r0
 80271ca:	da07      	bge.n	80271dc <__strftime.isra.0+0x484>
 80271cc:	6972      	ldr	r2, [r6, #20]
 80271ce:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80271d2:	429a      	cmp	r2, r3
 80271d4:	bfb8      	it	lt
 80271d6:	f04f 0901 	movlt.w	r9, #1
 80271da:	e7de      	b.n	802719a <__strftime.isra.0+0x442>
 80271dc:	d0dd      	beq.n	802719a <__strftime.isra.0+0x442>
 80271de:	6972      	ldr	r2, [r6, #20]
 80271e0:	4b03      	ldr	r3, [pc, #12]	; (80271f0 <__strftime.isra.0+0x498>)
 80271e2:	429a      	cmp	r2, r3
 80271e4:	bfb8      	it	lt
 80271e6:	f04f 39ff 	movlt.w	r9, #4294967295
 80271ea:	e7d6      	b.n	802719a <__strftime.isra.0+0x442>
 80271ec:	08047a28 	.word	0x08047a28
 80271f0:	fffff894 	.word	0xfffff894
 80271f4:	08047bdb 	.word	0x08047bdb
 80271f8:	080478b0 	.word	0x080478b0
 80271fc:	08047e36 	.word	0x08047e36
 8027200:	080478c0 	.word	0x080478c0
 8027204:	080478b2 	.word	0x080478b2
 8027208:	080478b6 	.word	0x080478b6
 802720c:	080478c9 	.word	0x080478c9
 8027210:	080478c5 	.word	0x080478c5
 8027214:	080478a8 	.word	0x080478a8
 8027218:	080478a1 	.word	0x080478a1
 802721c:	6971      	ldr	r1, [r6, #20]
 802721e:	4ab6      	ldr	r2, [pc, #728]	; (80274f8 <__strftime.isra.0+0x7a0>)
 8027220:	4291      	cmp	r1, r2
 8027222:	bfac      	ite	ge
 8027224:	2300      	movge	r3, #0
 8027226:	2301      	movlt	r3, #1
 8027228:	4630      	mov	r0, r6
 802722a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802722e:	f7ff fd31 	bl	8026c94 <iso_year_adjust>
 8027232:	9904      	ldr	r1, [sp, #16]
 8027234:	2900      	cmp	r1, #0
 8027236:	4682      	mov	sl, r0
 8027238:	db2c      	blt.n	8027294 <__strftime.isra.0+0x53c>
 802723a:	2264      	movs	r2, #100	; 0x64
 802723c:	fb91 f2f2 	sdiv	r2, r1, r2
 8027240:	3213      	adds	r2, #19
 8027242:	6970      	ldr	r0, [r6, #20]
 8027244:	2800      	cmp	r0, #0
 8027246:	db30      	blt.n	80272aa <__strftime.isra.0+0x552>
 8027248:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802724c:	fb90 fefc 	sdiv	lr, r0, ip
 8027250:	fb0c 001e 	mls	r0, ip, lr, r0
 8027254:	f1ba 0f00 	cmp.w	sl, #0
 8027258:	da36      	bge.n	80272c8 <__strftime.isra.0+0x570>
 802725a:	6971      	ldr	r1, [r6, #20]
 802725c:	4ba7      	ldr	r3, [pc, #668]	; (80274fc <__strftime.isra.0+0x7a4>)
 802725e:	4299      	cmp	r1, r3
 8027260:	db3d      	blt.n	80272de <__strftime.isra.0+0x586>
 8027262:	4482      	add	sl, r0
 8027264:	f1ba 3fff 	cmp.w	sl, #4294967295
 8027268:	d13e      	bne.n	80272e8 <__strftime.isra.0+0x590>
 802726a:	3a01      	subs	r2, #1
 802726c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8027270:	9b03      	ldr	r3, [sp, #12]
 8027272:	2064      	movs	r0, #100	; 0x64
 8027274:	fb00 aa02 	mla	sl, r0, r2, sl
 8027278:	2b00      	cmp	r3, #0
 802727a:	f000 81ad 	beq.w	80275d8 <__strftime.isra.0+0x880>
 802727e:	222d      	movs	r2, #45	; 0x2d
 8027280:	f88d 2018 	strb.w	r2, [sp, #24]
 8027284:	f1b9 0f00 	cmp.w	r9, #0
 8027288:	d001      	beq.n	802728e <__strftime.isra.0+0x536>
 802728a:	f109 39ff 	add.w	r9, r9, #4294967295
 802728e:	f10d 0219 	add.w	r2, sp, #25
 8027292:	e1ac      	b.n	80275ee <__strftime.isra.0+0x896>
 8027294:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8027298:	9104      	str	r1, [sp, #16]
 802729a:	f000 fe63 	bl	8027f64 <abs>
 802729e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80272a2:	9904      	ldr	r1, [sp, #16]
 80272a4:	fb90 f2fc 	sdiv	r2, r0, ip
 80272a8:	e7cb      	b.n	8027242 <__strftime.isra.0+0x4ea>
 80272aa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80272ae:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80272b2:	f000 fe57 	bl	8027f64 <abs>
 80272b6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80272ba:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80272be:	fb90 fefc 	sdiv	lr, r0, ip
 80272c2:	fb0e 001c 	mls	r0, lr, ip, r0
 80272c6:	e7c5      	b.n	8027254 <__strftime.isra.0+0x4fc>
 80272c8:	d0cb      	beq.n	8027262 <__strftime.isra.0+0x50a>
 80272ca:	4b8b      	ldr	r3, [pc, #556]	; (80274f8 <__strftime.isra.0+0x7a0>)
 80272cc:	4299      	cmp	r1, r3
 80272ce:	bfb4      	ite	lt
 80272d0:	2301      	movlt	r3, #1
 80272d2:	2300      	movge	r3, #0
 80272d4:	9303      	str	r3, [sp, #12]
 80272d6:	bfb8      	it	lt
 80272d8:	f04f 3aff 	movlt.w	sl, #4294967295
 80272dc:	e7c1      	b.n	8027262 <__strftime.isra.0+0x50a>
 80272de:	f04f 0a01 	mov.w	sl, #1
 80272e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80272e6:	e7bc      	b.n	8027262 <__strftime.isra.0+0x50a>
 80272e8:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80272ec:	bf04      	itt	eq
 80272ee:	3201      	addeq	r2, #1
 80272f0:	f04f 0a00 	moveq.w	sl, #0
 80272f4:	e7bc      	b.n	8027270 <__strftime.isra.0+0x518>
 80272f6:	4982      	ldr	r1, [pc, #520]	; (8027500 <__strftime.isra.0+0x7a8>)
 80272f8:	4a82      	ldr	r2, [pc, #520]	; (8027504 <__strftime.isra.0+0x7ac>)
 80272fa:	68b3      	ldr	r3, [r6, #8]
 80272fc:	286b      	cmp	r0, #107	; 0x6b
 80272fe:	bf08      	it	eq
 8027300:	460a      	moveq	r2, r1
 8027302:	e6e3      	b.n	80270cc <__strftime.isra.0+0x374>
 8027304:	68b3      	ldr	r3, [r6, #8]
 8027306:	b163      	cbz	r3, 8027322 <__strftime.isra.0+0x5ca>
 8027308:	2b0c      	cmp	r3, #12
 802730a:	d004      	beq.n	8027316 <__strftime.isra.0+0x5be>
 802730c:	210c      	movs	r1, #12
 802730e:	fb93 f2f1 	sdiv	r2, r3, r1
 8027312:	fb01 3312 	mls	r3, r1, r2, r3
 8027316:	497b      	ldr	r1, [pc, #492]	; (8027504 <__strftime.isra.0+0x7ac>)
 8027318:	4a79      	ldr	r2, [pc, #484]	; (8027500 <__strftime.isra.0+0x7a8>)
 802731a:	2849      	cmp	r0, #73	; 0x49
 802731c:	bf08      	it	eq
 802731e:	460a      	moveq	r2, r1
 8027320:	e6d4      	b.n	80270cc <__strftime.isra.0+0x374>
 8027322:	230c      	movs	r3, #12
 8027324:	e7f7      	b.n	8027316 <__strftime.isra.0+0x5be>
 8027326:	69f3      	ldr	r3, [r6, #28]
 8027328:	4a77      	ldr	r2, [pc, #476]	; (8027508 <__strftime.isra.0+0x7b0>)
 802732a:	3301      	adds	r3, #1
 802732c:	e6ce      	b.n	80270cc <__strftime.isra.0+0x374>
 802732e:	6933      	ldr	r3, [r6, #16]
 8027330:	3301      	adds	r3, #1
 8027332:	e73d      	b.n	80271b0 <__strftime.isra.0+0x458>
 8027334:	6873      	ldr	r3, [r6, #4]
 8027336:	e73b      	b.n	80271b0 <__strftime.isra.0+0x458>
 8027338:	1e6b      	subs	r3, r5, #1
 802733a:	429c      	cmp	r4, r3
 802733c:	f4bf ad3e 	bcs.w	8026dbc <__strftime.isra.0+0x64>
 8027340:	230a      	movs	r3, #10
 8027342:	553b      	strb	r3, [r7, r4]
 8027344:	3401      	adds	r4, #1
 8027346:	e60b      	b.n	8026f60 <__strftime.isra.0+0x208>
 8027348:	68b3      	ldr	r3, [r6, #8]
 802734a:	2b0b      	cmp	r3, #11
 802734c:	4b6f      	ldr	r3, [pc, #444]	; (802750c <__strftime.isra.0+0x7b4>)
 802734e:	bfd4      	ite	le
 8027350:	2200      	movle	r2, #0
 8027352:	2201      	movgt	r2, #1
 8027354:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8027358:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 802735c:	4648      	mov	r0, r9
 802735e:	f7d8 ff79 	bl	8000254 <strlen>
 8027362:	f109 32ff 	add.w	r2, r9, #4294967295
 8027366:	4420      	add	r0, r4
 8027368:	f105 3cff 	add.w	ip, r5, #4294967295
 802736c:	42a0      	cmp	r0, r4
 802736e:	f43f adf7 	beq.w	8026f60 <__strftime.isra.0+0x208>
 8027372:	45a4      	cmp	ip, r4
 8027374:	f67f ad22 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8027378:	f898 1000 	ldrb.w	r1, [r8]
 802737c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8027380:	2950      	cmp	r1, #80	; 0x50
 8027382:	d107      	bne.n	8027394 <__strftime.isra.0+0x63c>
 8027384:	4962      	ldr	r1, [pc, #392]	; (8027510 <__strftime.isra.0+0x7b8>)
 8027386:	5cc9      	ldrb	r1, [r1, r3]
 8027388:	f001 0103 	and.w	r1, r1, #3
 802738c:	2901      	cmp	r1, #1
 802738e:	bf08      	it	eq
 8027390:	3320      	addeq	r3, #32
 8027392:	b2db      	uxtb	r3, r3
 8027394:	553b      	strb	r3, [r7, r4]
 8027396:	3401      	adds	r4, #1
 8027398:	e7e8      	b.n	802736c <__strftime.isra.0+0x614>
 802739a:	6873      	ldr	r3, [r6, #4]
 802739c:	9300      	str	r3, [sp, #0]
 802739e:	4a5d      	ldr	r2, [pc, #372]	; (8027514 <__strftime.isra.0+0x7bc>)
 80273a0:	68b3      	ldr	r3, [r6, #8]
 80273a2:	1b29      	subs	r1, r5, r4
 80273a4:	1938      	adds	r0, r7, r4
 80273a6:	f7ff fb83 	bl	8026ab0 <sniprintf>
 80273aa:	e693      	b.n	80270d4 <__strftime.isra.0+0x37c>
 80273ac:	6a33      	ldr	r3, [r6, #32]
 80273ae:	2b00      	cmp	r3, #0
 80273b0:	db7a      	blt.n	80274a8 <__strftime.isra.0+0x750>
 80273b2:	f000 fb73 	bl	8027a9c <__tz_lock>
 80273b6:	9b02      	ldr	r3, [sp, #8]
 80273b8:	b90b      	cbnz	r3, 80273be <__strftime.isra.0+0x666>
 80273ba:	f000 fb7b 	bl	8027ab4 <_tzset_unlocked>
 80273be:	f001 fd77 	bl	8028eb0 <__gettzinfo>
 80273c2:	6a33      	ldr	r3, [r6, #32]
 80273c4:	2b00      	cmp	r3, #0
 80273c6:	bfd4      	ite	le
 80273c8:	2200      	movle	r2, #0
 80273ca:	2201      	movgt	r2, #1
 80273cc:	2328      	movs	r3, #40	; 0x28
 80273ce:	fb02 3303 	mla	r3, r2, r3, r3
 80273d2:	58c3      	ldr	r3, [r0, r3]
 80273d4:	f1c3 0900 	rsb	r9, r3, #0
 80273d8:	f000 fb66 	bl	8027aa8 <__tz_unlock>
 80273dc:	2301      	movs	r3, #1
 80273de:	9302      	str	r3, [sp, #8]
 80273e0:	6972      	ldr	r2, [r6, #20]
 80273e2:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 80273e6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80273ea:	f16c 0c00 	sbc.w	ip, ip, #0
 80273ee:	f1bc 0f00 	cmp.w	ip, #0
 80273f2:	eba5 0104 	sub.w	r1, r5, r4
 80273f6:	eb07 0004 	add.w	r0, r7, r4
 80273fa:	da02      	bge.n	8027402 <__strftime.isra.0+0x6aa>
 80273fc:	3303      	adds	r3, #3
 80273fe:	f14c 0c00 	adc.w	ip, ip, #0
 8027402:	089b      	lsrs	r3, r3, #2
 8027404:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8027408:	f102 3aff 	add.w	sl, r2, #4294967295
 802740c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8027410:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8027414:	fb9a fefe 	sdiv	lr, sl, lr
 8027418:	ebb3 030e 	subs.w	r3, r3, lr
 802741c:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8027420:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8027424:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8027428:	fb9a fefe 	sdiv	lr, sl, lr
 802742c:	eb13 030e 	adds.w	r3, r3, lr
 8027430:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8027434:	3a46      	subs	r2, #70	; 0x46
 8027436:	f240 1c6d 	movw	ip, #365	; 0x16d
 802743a:	fb0c f202 	mul.w	r2, ip, r2
 802743e:	189b      	adds	r3, r3, r2
 8027440:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8027444:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8027448:	f04f 0c18 	mov.w	ip, #24
 802744c:	eb13 030e 	adds.w	r3, r3, lr
 8027450:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027454:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027458:	fb0c e202 	mla	r2, ip, r2, lr
 802745c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8027460:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8027464:	eb13 030e 	adds.w	r3, r3, lr
 8027468:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 802746c:	fba3 320c 	umull	r3, r2, r3, ip
 8027470:	fb0c 220e 	mla	r2, ip, lr, r2
 8027474:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8027478:	eb13 030e 	adds.w	r3, r3, lr
 802747c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027480:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027484:	fb0c e202 	mla	r2, ip, r2, lr
 8027488:	f8d6 e000 	ldr.w	lr, [r6]
 802748c:	eb13 030e 	adds.w	r3, r3, lr
 8027490:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027494:	ebb3 0309 	subs.w	r3, r3, r9
 8027498:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 802749c:	e9cd 3200 	strd	r3, r2, [sp]
 80274a0:	4a1d      	ldr	r2, [pc, #116]	; (8027518 <__strftime.isra.0+0x7c0>)
 80274a2:	f7ff fb05 	bl	8026ab0 <sniprintf>
 80274a6:	e615      	b.n	80270d4 <__strftime.isra.0+0x37c>
 80274a8:	f04f 0900 	mov.w	r9, #0
 80274ac:	e798      	b.n	80273e0 <__strftime.isra.0+0x688>
 80274ae:	6833      	ldr	r3, [r6, #0]
 80274b0:	e67e      	b.n	80271b0 <__strftime.isra.0+0x458>
 80274b2:	1e6b      	subs	r3, r5, #1
 80274b4:	429c      	cmp	r4, r3
 80274b6:	f4bf ac81 	bcs.w	8026dbc <__strftime.isra.0+0x64>
 80274ba:	2309      	movs	r3, #9
 80274bc:	e741      	b.n	8027342 <__strftime.isra.0+0x5ea>
 80274be:	6833      	ldr	r3, [r6, #0]
 80274c0:	9301      	str	r3, [sp, #4]
 80274c2:	6873      	ldr	r3, [r6, #4]
 80274c4:	9300      	str	r3, [sp, #0]
 80274c6:	4a15      	ldr	r2, [pc, #84]	; (802751c <__strftime.isra.0+0x7c4>)
 80274c8:	68b3      	ldr	r3, [r6, #8]
 80274ca:	e5f4      	b.n	80270b6 <__strftime.isra.0+0x35e>
 80274cc:	1e6b      	subs	r3, r5, #1
 80274ce:	429c      	cmp	r4, r3
 80274d0:	f4bf ac74 	bcs.w	8026dbc <__strftime.isra.0+0x64>
 80274d4:	69b3      	ldr	r3, [r6, #24]
 80274d6:	1c62      	adds	r2, r4, #1
 80274d8:	b91b      	cbnz	r3, 80274e2 <__strftime.isra.0+0x78a>
 80274da:	2337      	movs	r3, #55	; 0x37
 80274dc:	553b      	strb	r3, [r7, r4]
 80274de:	4614      	mov	r4, r2
 80274e0:	e53e      	b.n	8026f60 <__strftime.isra.0+0x208>
 80274e2:	3330      	adds	r3, #48	; 0x30
 80274e4:	e7fa      	b.n	80274dc <__strftime.isra.0+0x784>
 80274e6:	69f3      	ldr	r3, [r6, #28]
 80274e8:	69b2      	ldr	r2, [r6, #24]
 80274ea:	3307      	adds	r3, #7
 80274ec:	1a9b      	subs	r3, r3, r2
 80274ee:	2207      	movs	r2, #7
 80274f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80274f4:	e65c      	b.n	80271b0 <__strftime.isra.0+0x458>
 80274f6:	bf00      	nop
 80274f8:	fffff894 	.word	0xfffff894
 80274fc:	fffff895 	.word	0xfffff895
 8027500:	080478b2 	.word	0x080478b2
 8027504:	080478c0 	.word	0x080478c0
 8027508:	080478d5 	.word	0x080478d5
 802750c:	08047a28 	.word	0x08047a28
 8027510:	08047579 	.word	0x08047579
 8027514:	080478e4 	.word	0x080478e4
 8027518:	080478da 	.word	0x080478da
 802751c:	080478df 	.word	0x080478df
 8027520:	4630      	mov	r0, r6
 8027522:	f7ff fbb7 	bl	8026c94 <iso_year_adjust>
 8027526:	69b2      	ldr	r2, [r6, #24]
 8027528:	b132      	cbz	r2, 8027538 <__strftime.isra.0+0x7e0>
 802752a:	3a01      	subs	r2, #1
 802752c:	2800      	cmp	r0, #0
 802752e:	dc28      	bgt.n	8027582 <__strftime.isra.0+0x82a>
 8027530:	69f3      	ldr	r3, [r6, #28]
 8027532:	d103      	bne.n	802753c <__strftime.isra.0+0x7e4>
 8027534:	330a      	adds	r3, #10
 8027536:	e7d9      	b.n	80274ec <__strftime.isra.0+0x794>
 8027538:	2206      	movs	r2, #6
 802753a:	e7f7      	b.n	802752c <__strftime.isra.0+0x7d4>
 802753c:	6971      	ldr	r1, [r6, #20]
 802753e:	2900      	cmp	r1, #0
 8027540:	eba2 0203 	sub.w	r2, r2, r3
 8027544:	f240 736b 	movw	r3, #1899	; 0x76b
 8027548:	bfa8      	it	ge
 802754a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 802754e:	440b      	add	r3, r1
 8027550:	0799      	lsls	r1, r3, #30
 8027552:	d105      	bne.n	8027560 <__strftime.isra.0+0x808>
 8027554:	2064      	movs	r0, #100	; 0x64
 8027556:	fb93 f1f0 	sdiv	r1, r3, r0
 802755a:	fb00 3111 	mls	r1, r0, r1, r3
 802755e:	b971      	cbnz	r1, 802757e <__strftime.isra.0+0x826>
 8027560:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8027564:	fb93 f0f1 	sdiv	r0, r3, r1
 8027568:	fb01 3310 	mls	r3, r1, r0, r3
 802756c:	fab3 f383 	clz	r3, r3
 8027570:	095b      	lsrs	r3, r3, #5
 8027572:	1ad3      	subs	r3, r2, r3
 8027574:	2b05      	cmp	r3, #5
 8027576:	bfb4      	ite	lt
 8027578:	2335      	movlt	r3, #53	; 0x35
 802757a:	2334      	movge	r3, #52	; 0x34
 802757c:	e618      	b.n	80271b0 <__strftime.isra.0+0x458>
 802757e:	2301      	movs	r3, #1
 8027580:	e7f7      	b.n	8027572 <__strftime.isra.0+0x81a>
 8027582:	2301      	movs	r3, #1
 8027584:	e614      	b.n	80271b0 <__strftime.isra.0+0x458>
 8027586:	1e6b      	subs	r3, r5, #1
 8027588:	429c      	cmp	r4, r3
 802758a:	f4bf ac17 	bcs.w	8026dbc <__strftime.isra.0+0x64>
 802758e:	69b3      	ldr	r3, [r6, #24]
 8027590:	3330      	adds	r3, #48	; 0x30
 8027592:	e6d6      	b.n	8027342 <__strftime.isra.0+0x5ea>
 8027594:	69b2      	ldr	r2, [r6, #24]
 8027596:	b11a      	cbz	r2, 80275a0 <__strftime.isra.0+0x848>
 8027598:	3a01      	subs	r2, #1
 802759a:	69f3      	ldr	r3, [r6, #28]
 802759c:	3307      	adds	r3, #7
 802759e:	e7a5      	b.n	80274ec <__strftime.isra.0+0x794>
 80275a0:	2206      	movs	r2, #6
 80275a2:	e7fa      	b.n	802759a <__strftime.isra.0+0x842>
 80275a4:	6970      	ldr	r0, [r6, #20]
 80275a6:	2800      	cmp	r0, #0
 80275a8:	db05      	blt.n	80275b6 <__strftime.isra.0+0x85e>
 80275aa:	2364      	movs	r3, #100	; 0x64
 80275ac:	fb90 f2f3 	sdiv	r2, r0, r3
 80275b0:	fb02 0313 	mls	r3, r2, r3, r0
 80275b4:	e5fc      	b.n	80271b0 <__strftime.isra.0+0x458>
 80275b6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80275ba:	f000 fcd3 	bl	8027f64 <abs>
 80275be:	e7f4      	b.n	80275aa <__strftime.isra.0+0x852>
 80275c0:	6972      	ldr	r2, [r6, #20]
 80275c2:	494c      	ldr	r1, [pc, #304]	; (80276f4 <__strftime.isra.0+0x99c>)
 80275c4:	428a      	cmp	r2, r1
 80275c6:	da05      	bge.n	80275d4 <__strftime.isra.0+0x87c>
 80275c8:	202d      	movs	r0, #45	; 0x2d
 80275ca:	f88d 0018 	strb.w	r0, [sp, #24]
 80275ce:	eba1 0a02 	sub.w	sl, r1, r2
 80275d2:	e657      	b.n	8027284 <__strftime.isra.0+0x52c>
 80275d4:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 80275d8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80275dc:	d106      	bne.n	80275ec <__strftime.isra.0+0x894>
 80275de:	f242 720f 	movw	r2, #9999	; 0x270f
 80275e2:	4592      	cmp	sl, r2
 80275e4:	d902      	bls.n	80275ec <__strftime.isra.0+0x894>
 80275e6:	f88d b018 	strb.w	fp, [sp, #24]
 80275ea:	e64b      	b.n	8027284 <__strftime.isra.0+0x52c>
 80275ec:	aa06      	add	r2, sp, #24
 80275ee:	2125      	movs	r1, #37	; 0x25
 80275f0:	7011      	strb	r1, [r2, #0]
 80275f2:	f1bb 0f00 	cmp.w	fp, #0
 80275f6:	d108      	bne.n	802760a <__strftime.isra.0+0x8b2>
 80275f8:	1c50      	adds	r0, r2, #1
 80275fa:	493f      	ldr	r1, [pc, #252]	; (80276f8 <__strftime.isra.0+0x9a0>)
 80275fc:	f7ff fb42 	bl	8026c84 <strcpy>
 8027600:	f8cd a000 	str.w	sl, [sp]
 8027604:	464b      	mov	r3, r9
 8027606:	aa06      	add	r2, sp, #24
 8027608:	e6cb      	b.n	80273a2 <__strftime.isra.0+0x64a>
 802760a:	2330      	movs	r3, #48	; 0x30
 802760c:	1c90      	adds	r0, r2, #2
 802760e:	7053      	strb	r3, [r2, #1]
 8027610:	e7f3      	b.n	80275fa <__strftime.isra.0+0x8a2>
 8027612:	6a33      	ldr	r3, [r6, #32]
 8027614:	2b00      	cmp	r3, #0
 8027616:	f6ff aca3 	blt.w	8026f60 <__strftime.isra.0+0x208>
 802761a:	f000 fa3f 	bl	8027a9c <__tz_lock>
 802761e:	9b02      	ldr	r3, [sp, #8]
 8027620:	b90b      	cbnz	r3, 8027626 <__strftime.isra.0+0x8ce>
 8027622:	f000 fa47 	bl	8027ab4 <_tzset_unlocked>
 8027626:	f001 fc43 	bl	8028eb0 <__gettzinfo>
 802762a:	6a33      	ldr	r3, [r6, #32]
 802762c:	2b00      	cmp	r3, #0
 802762e:	bfd4      	ite	le
 8027630:	2200      	movle	r2, #0
 8027632:	2201      	movgt	r2, #1
 8027634:	2328      	movs	r3, #40	; 0x28
 8027636:	fb02 3303 	mla	r3, r2, r3, r3
 802763a:	eb07 0a04 	add.w	sl, r7, r4
 802763e:	58c3      	ldr	r3, [r0, r3]
 8027640:	f1c3 0900 	rsb	r9, r3, #0
 8027644:	f000 fa30 	bl	8027aa8 <__tz_unlock>
 8027648:	233c      	movs	r3, #60	; 0x3c
 802764a:	fb99 f0f3 	sdiv	r0, r9, r3
 802764e:	f001 fcdf 	bl	8029010 <labs>
 8027652:	233c      	movs	r3, #60	; 0x3c
 8027654:	eba5 0b04 	sub.w	fp, r5, r4
 8027658:	fb90 f2f3 	sdiv	r2, r0, r3
 802765c:	fb02 0013 	mls	r0, r2, r3, r0
 8027660:	9000      	str	r0, [sp, #0]
 8027662:	4a26      	ldr	r2, [pc, #152]	; (80276fc <__strftime.isra.0+0x9a4>)
 8027664:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8027668:	4659      	mov	r1, fp
 802766a:	4650      	mov	r0, sl
 802766c:	fb99 f3f3 	sdiv	r3, r9, r3
 8027670:	f7ff fa1e 	bl	8026ab0 <sniprintf>
 8027674:	2800      	cmp	r0, #0
 8027676:	f6ff aba1 	blt.w	8026dbc <__strftime.isra.0+0x64>
 802767a:	4404      	add	r4, r0
 802767c:	42a5      	cmp	r5, r4
 802767e:	f67f ab9d 	bls.w	8026dbc <__strftime.isra.0+0x64>
 8027682:	2301      	movs	r3, #1
 8027684:	9302      	str	r3, [sp, #8]
 8027686:	e46b      	b.n	8026f60 <__strftime.isra.0+0x208>
 8027688:	6a33      	ldr	r3, [r6, #32]
 802768a:	2b00      	cmp	r3, #0
 802768c:	f6ff ac68 	blt.w	8026f60 <__strftime.isra.0+0x208>
 8027690:	f000 fa04 	bl	8027a9c <__tz_lock>
 8027694:	9b02      	ldr	r3, [sp, #8]
 8027696:	b90b      	cbnz	r3, 802769c <__strftime.isra.0+0x944>
 8027698:	f000 fa0c 	bl	8027ab4 <_tzset_unlocked>
 802769c:	6a33      	ldr	r3, [r6, #32]
 802769e:	4a18      	ldr	r2, [pc, #96]	; (8027700 <__strftime.isra.0+0x9a8>)
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	bfd4      	ite	le
 80276a4:	2300      	movle	r3, #0
 80276a6:	2301      	movgt	r3, #1
 80276a8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80276ac:	4648      	mov	r0, r9
 80276ae:	f7d8 fdd1 	bl	8000254 <strlen>
 80276b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80276b6:	4420      	add	r0, r4
 80276b8:	1e6b      	subs	r3, r5, #1
 80276ba:	42a0      	cmp	r0, r4
 80276bc:	d102      	bne.n	80276c4 <__strftime.isra.0+0x96c>
 80276be:	f000 f9f3 	bl	8027aa8 <__tz_unlock>
 80276c2:	e7de      	b.n	8027682 <__strftime.isra.0+0x92a>
 80276c4:	42a3      	cmp	r3, r4
 80276c6:	d904      	bls.n	80276d2 <__strftime.isra.0+0x97a>
 80276c8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80276cc:	553a      	strb	r2, [r7, r4]
 80276ce:	3401      	adds	r4, #1
 80276d0:	e7f3      	b.n	80276ba <__strftime.isra.0+0x962>
 80276d2:	f000 f9e9 	bl	8027aa8 <__tz_unlock>
 80276d6:	f7ff bb71 	b.w	8026dbc <__strftime.isra.0+0x64>
 80276da:	1e6b      	subs	r3, r5, #1
 80276dc:	429c      	cmp	r4, r3
 80276de:	f4bf ab6d 	bcs.w	8026dbc <__strftime.isra.0+0x64>
 80276e2:	2325      	movs	r3, #37	; 0x25
 80276e4:	e62d      	b.n	8027342 <__strftime.isra.0+0x5ea>
 80276e6:	b10d      	cbz	r5, 80276ec <__strftime.isra.0+0x994>
 80276e8:	2300      	movs	r3, #0
 80276ea:	553b      	strb	r3, [r7, r4]
 80276ec:	4620      	mov	r0, r4
 80276ee:	b00f      	add	sp, #60	; 0x3c
 80276f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276f4:	fffff894 	.word	0xfffff894
 80276f8:	080478d1 	.word	0x080478d1
 80276fc:	080478ee 	.word	0x080478ee
 8027700:	20000528 	.word	0x20000528

08027704 <strftime>:
 8027704:	f7ff bb28 	b.w	8026d58 <__strftime.isra.0>

08027708 <strncmp>:
 8027708:	b510      	push	{r4, lr}
 802770a:	b17a      	cbz	r2, 802772c <strncmp+0x24>
 802770c:	4603      	mov	r3, r0
 802770e:	3901      	subs	r1, #1
 8027710:	1884      	adds	r4, r0, r2
 8027712:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027716:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802771a:	4290      	cmp	r0, r2
 802771c:	d101      	bne.n	8027722 <strncmp+0x1a>
 802771e:	42a3      	cmp	r3, r4
 8027720:	d101      	bne.n	8027726 <strncmp+0x1e>
 8027722:	1a80      	subs	r0, r0, r2
 8027724:	bd10      	pop	{r4, pc}
 8027726:	2800      	cmp	r0, #0
 8027728:	d1f3      	bne.n	8027712 <strncmp+0xa>
 802772a:	e7fa      	b.n	8027722 <strncmp+0x1a>
 802772c:	4610      	mov	r0, r2
 802772e:	e7f9      	b.n	8027724 <strncmp+0x1c>

08027730 <_strtol_l.constprop.0>:
 8027730:	2b01      	cmp	r3, #1
 8027732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027736:	d001      	beq.n	802773c <_strtol_l.constprop.0+0xc>
 8027738:	2b24      	cmp	r3, #36	; 0x24
 802773a:	d906      	bls.n	802774a <_strtol_l.constprop.0+0x1a>
 802773c:	f001 fa9a 	bl	8028c74 <__errno>
 8027740:	2316      	movs	r3, #22
 8027742:	6003      	str	r3, [r0, #0]
 8027744:	2000      	movs	r0, #0
 8027746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802774a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8027830 <_strtol_l.constprop.0+0x100>
 802774e:	460d      	mov	r5, r1
 8027750:	462e      	mov	r6, r5
 8027752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027756:	f814 700c 	ldrb.w	r7, [r4, ip]
 802775a:	f017 0708 	ands.w	r7, r7, #8
 802775e:	d1f7      	bne.n	8027750 <_strtol_l.constprop.0+0x20>
 8027760:	2c2d      	cmp	r4, #45	; 0x2d
 8027762:	d132      	bne.n	80277ca <_strtol_l.constprop.0+0x9a>
 8027764:	782c      	ldrb	r4, [r5, #0]
 8027766:	2701      	movs	r7, #1
 8027768:	1cb5      	adds	r5, r6, #2
 802776a:	2b00      	cmp	r3, #0
 802776c:	d05b      	beq.n	8027826 <_strtol_l.constprop.0+0xf6>
 802776e:	2b10      	cmp	r3, #16
 8027770:	d109      	bne.n	8027786 <_strtol_l.constprop.0+0x56>
 8027772:	2c30      	cmp	r4, #48	; 0x30
 8027774:	d107      	bne.n	8027786 <_strtol_l.constprop.0+0x56>
 8027776:	782c      	ldrb	r4, [r5, #0]
 8027778:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802777c:	2c58      	cmp	r4, #88	; 0x58
 802777e:	d14d      	bne.n	802781c <_strtol_l.constprop.0+0xec>
 8027780:	786c      	ldrb	r4, [r5, #1]
 8027782:	2310      	movs	r3, #16
 8027784:	3502      	adds	r5, #2
 8027786:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802778a:	f108 38ff 	add.w	r8, r8, #4294967295
 802778e:	f04f 0c00 	mov.w	ip, #0
 8027792:	fbb8 f9f3 	udiv	r9, r8, r3
 8027796:	4666      	mov	r6, ip
 8027798:	fb03 8a19 	mls	sl, r3, r9, r8
 802779c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80277a0:	f1be 0f09 	cmp.w	lr, #9
 80277a4:	d816      	bhi.n	80277d4 <_strtol_l.constprop.0+0xa4>
 80277a6:	4674      	mov	r4, lr
 80277a8:	42a3      	cmp	r3, r4
 80277aa:	dd24      	ble.n	80277f6 <_strtol_l.constprop.0+0xc6>
 80277ac:	f1bc 0f00 	cmp.w	ip, #0
 80277b0:	db1e      	blt.n	80277f0 <_strtol_l.constprop.0+0xc0>
 80277b2:	45b1      	cmp	r9, r6
 80277b4:	d31c      	bcc.n	80277f0 <_strtol_l.constprop.0+0xc0>
 80277b6:	d101      	bne.n	80277bc <_strtol_l.constprop.0+0x8c>
 80277b8:	45a2      	cmp	sl, r4
 80277ba:	db19      	blt.n	80277f0 <_strtol_l.constprop.0+0xc0>
 80277bc:	fb06 4603 	mla	r6, r6, r3, r4
 80277c0:	f04f 0c01 	mov.w	ip, #1
 80277c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80277c8:	e7e8      	b.n	802779c <_strtol_l.constprop.0+0x6c>
 80277ca:	2c2b      	cmp	r4, #43	; 0x2b
 80277cc:	bf04      	itt	eq
 80277ce:	782c      	ldrbeq	r4, [r5, #0]
 80277d0:	1cb5      	addeq	r5, r6, #2
 80277d2:	e7ca      	b.n	802776a <_strtol_l.constprop.0+0x3a>
 80277d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80277d8:	f1be 0f19 	cmp.w	lr, #25
 80277dc:	d801      	bhi.n	80277e2 <_strtol_l.constprop.0+0xb2>
 80277de:	3c37      	subs	r4, #55	; 0x37
 80277e0:	e7e2      	b.n	80277a8 <_strtol_l.constprop.0+0x78>
 80277e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80277e6:	f1be 0f19 	cmp.w	lr, #25
 80277ea:	d804      	bhi.n	80277f6 <_strtol_l.constprop.0+0xc6>
 80277ec:	3c57      	subs	r4, #87	; 0x57
 80277ee:	e7db      	b.n	80277a8 <_strtol_l.constprop.0+0x78>
 80277f0:	f04f 3cff 	mov.w	ip, #4294967295
 80277f4:	e7e6      	b.n	80277c4 <_strtol_l.constprop.0+0x94>
 80277f6:	f1bc 0f00 	cmp.w	ip, #0
 80277fa:	da05      	bge.n	8027808 <_strtol_l.constprop.0+0xd8>
 80277fc:	2322      	movs	r3, #34	; 0x22
 80277fe:	6003      	str	r3, [r0, #0]
 8027800:	4646      	mov	r6, r8
 8027802:	b942      	cbnz	r2, 8027816 <_strtol_l.constprop.0+0xe6>
 8027804:	4630      	mov	r0, r6
 8027806:	e79e      	b.n	8027746 <_strtol_l.constprop.0+0x16>
 8027808:	b107      	cbz	r7, 802780c <_strtol_l.constprop.0+0xdc>
 802780a:	4276      	negs	r6, r6
 802780c:	2a00      	cmp	r2, #0
 802780e:	d0f9      	beq.n	8027804 <_strtol_l.constprop.0+0xd4>
 8027810:	f1bc 0f00 	cmp.w	ip, #0
 8027814:	d000      	beq.n	8027818 <_strtol_l.constprop.0+0xe8>
 8027816:	1e69      	subs	r1, r5, #1
 8027818:	6011      	str	r1, [r2, #0]
 802781a:	e7f3      	b.n	8027804 <_strtol_l.constprop.0+0xd4>
 802781c:	2430      	movs	r4, #48	; 0x30
 802781e:	2b00      	cmp	r3, #0
 8027820:	d1b1      	bne.n	8027786 <_strtol_l.constprop.0+0x56>
 8027822:	2308      	movs	r3, #8
 8027824:	e7af      	b.n	8027786 <_strtol_l.constprop.0+0x56>
 8027826:	2c30      	cmp	r4, #48	; 0x30
 8027828:	d0a5      	beq.n	8027776 <_strtol_l.constprop.0+0x46>
 802782a:	230a      	movs	r3, #10
 802782c:	e7ab      	b.n	8027786 <_strtol_l.constprop.0+0x56>
 802782e:	bf00      	nop
 8027830:	08047579 	.word	0x08047579

08027834 <_strtol_r>:
 8027834:	f7ff bf7c 	b.w	8027730 <_strtol_l.constprop.0>

08027838 <strtol>:
 8027838:	4613      	mov	r3, r2
 802783a:	460a      	mov	r2, r1
 802783c:	4601      	mov	r1, r0
 802783e:	4802      	ldr	r0, [pc, #8]	; (8027848 <strtol+0x10>)
 8027840:	6800      	ldr	r0, [r0, #0]
 8027842:	f7ff bf75 	b.w	8027730 <_strtol_l.constprop.0>
 8027846:	bf00      	nop
 8027848:	200004c4 	.word	0x200004c4

0802784c <_strtoul_l.constprop.0>:
 802784c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027850:	4f36      	ldr	r7, [pc, #216]	; (802792c <_strtoul_l.constprop.0+0xe0>)
 8027852:	4686      	mov	lr, r0
 8027854:	460d      	mov	r5, r1
 8027856:	4628      	mov	r0, r5
 8027858:	f815 4b01 	ldrb.w	r4, [r5], #1
 802785c:	5de6      	ldrb	r6, [r4, r7]
 802785e:	f016 0608 	ands.w	r6, r6, #8
 8027862:	d1f8      	bne.n	8027856 <_strtoul_l.constprop.0+0xa>
 8027864:	2c2d      	cmp	r4, #45	; 0x2d
 8027866:	d12f      	bne.n	80278c8 <_strtoul_l.constprop.0+0x7c>
 8027868:	782c      	ldrb	r4, [r5, #0]
 802786a:	2601      	movs	r6, #1
 802786c:	1c85      	adds	r5, r0, #2
 802786e:	2b00      	cmp	r3, #0
 8027870:	d057      	beq.n	8027922 <_strtoul_l.constprop.0+0xd6>
 8027872:	2b10      	cmp	r3, #16
 8027874:	d109      	bne.n	802788a <_strtoul_l.constprop.0+0x3e>
 8027876:	2c30      	cmp	r4, #48	; 0x30
 8027878:	d107      	bne.n	802788a <_strtoul_l.constprop.0+0x3e>
 802787a:	7828      	ldrb	r0, [r5, #0]
 802787c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027880:	2858      	cmp	r0, #88	; 0x58
 8027882:	d149      	bne.n	8027918 <_strtoul_l.constprop.0+0xcc>
 8027884:	786c      	ldrb	r4, [r5, #1]
 8027886:	2310      	movs	r3, #16
 8027888:	3502      	adds	r5, #2
 802788a:	f04f 38ff 	mov.w	r8, #4294967295
 802788e:	2700      	movs	r7, #0
 8027890:	fbb8 f8f3 	udiv	r8, r8, r3
 8027894:	fb03 f908 	mul.w	r9, r3, r8
 8027898:	ea6f 0909 	mvn.w	r9, r9
 802789c:	4638      	mov	r0, r7
 802789e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80278a2:	f1bc 0f09 	cmp.w	ip, #9
 80278a6:	d814      	bhi.n	80278d2 <_strtoul_l.constprop.0+0x86>
 80278a8:	4664      	mov	r4, ip
 80278aa:	42a3      	cmp	r3, r4
 80278ac:	dd22      	ble.n	80278f4 <_strtoul_l.constprop.0+0xa8>
 80278ae:	2f00      	cmp	r7, #0
 80278b0:	db1d      	blt.n	80278ee <_strtoul_l.constprop.0+0xa2>
 80278b2:	4580      	cmp	r8, r0
 80278b4:	d31b      	bcc.n	80278ee <_strtoul_l.constprop.0+0xa2>
 80278b6:	d101      	bne.n	80278bc <_strtoul_l.constprop.0+0x70>
 80278b8:	45a1      	cmp	r9, r4
 80278ba:	db18      	blt.n	80278ee <_strtoul_l.constprop.0+0xa2>
 80278bc:	fb00 4003 	mla	r0, r0, r3, r4
 80278c0:	2701      	movs	r7, #1
 80278c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80278c6:	e7ea      	b.n	802789e <_strtoul_l.constprop.0+0x52>
 80278c8:	2c2b      	cmp	r4, #43	; 0x2b
 80278ca:	bf04      	itt	eq
 80278cc:	782c      	ldrbeq	r4, [r5, #0]
 80278ce:	1c85      	addeq	r5, r0, #2
 80278d0:	e7cd      	b.n	802786e <_strtoul_l.constprop.0+0x22>
 80278d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80278d6:	f1bc 0f19 	cmp.w	ip, #25
 80278da:	d801      	bhi.n	80278e0 <_strtoul_l.constprop.0+0x94>
 80278dc:	3c37      	subs	r4, #55	; 0x37
 80278de:	e7e4      	b.n	80278aa <_strtoul_l.constprop.0+0x5e>
 80278e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80278e4:	f1bc 0f19 	cmp.w	ip, #25
 80278e8:	d804      	bhi.n	80278f4 <_strtoul_l.constprop.0+0xa8>
 80278ea:	3c57      	subs	r4, #87	; 0x57
 80278ec:	e7dd      	b.n	80278aa <_strtoul_l.constprop.0+0x5e>
 80278ee:	f04f 37ff 	mov.w	r7, #4294967295
 80278f2:	e7e6      	b.n	80278c2 <_strtoul_l.constprop.0+0x76>
 80278f4:	2f00      	cmp	r7, #0
 80278f6:	da07      	bge.n	8027908 <_strtoul_l.constprop.0+0xbc>
 80278f8:	2322      	movs	r3, #34	; 0x22
 80278fa:	f8ce 3000 	str.w	r3, [lr]
 80278fe:	f04f 30ff 	mov.w	r0, #4294967295
 8027902:	b932      	cbnz	r2, 8027912 <_strtoul_l.constprop.0+0xc6>
 8027904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027908:	b106      	cbz	r6, 802790c <_strtoul_l.constprop.0+0xc0>
 802790a:	4240      	negs	r0, r0
 802790c:	2a00      	cmp	r2, #0
 802790e:	d0f9      	beq.n	8027904 <_strtoul_l.constprop.0+0xb8>
 8027910:	b107      	cbz	r7, 8027914 <_strtoul_l.constprop.0+0xc8>
 8027912:	1e69      	subs	r1, r5, #1
 8027914:	6011      	str	r1, [r2, #0]
 8027916:	e7f5      	b.n	8027904 <_strtoul_l.constprop.0+0xb8>
 8027918:	2430      	movs	r4, #48	; 0x30
 802791a:	2b00      	cmp	r3, #0
 802791c:	d1b5      	bne.n	802788a <_strtoul_l.constprop.0+0x3e>
 802791e:	2308      	movs	r3, #8
 8027920:	e7b3      	b.n	802788a <_strtoul_l.constprop.0+0x3e>
 8027922:	2c30      	cmp	r4, #48	; 0x30
 8027924:	d0a9      	beq.n	802787a <_strtoul_l.constprop.0+0x2e>
 8027926:	230a      	movs	r3, #10
 8027928:	e7af      	b.n	802788a <_strtoul_l.constprop.0+0x3e>
 802792a:	bf00      	nop
 802792c:	08047579 	.word	0x08047579

08027930 <_strtoul_r>:
 8027930:	f7ff bf8c 	b.w	802784c <_strtoul_l.constprop.0>

08027934 <strtoul>:
 8027934:	4613      	mov	r3, r2
 8027936:	460a      	mov	r2, r1
 8027938:	4601      	mov	r1, r0
 802793a:	4802      	ldr	r0, [pc, #8]	; (8027944 <strtoul+0x10>)
 802793c:	6800      	ldr	r0, [r0, #0]
 802793e:	f7ff bf85 	b.w	802784c <_strtoul_l.constprop.0>
 8027942:	bf00      	nop
 8027944:	200004c4 	.word	0x200004c4

08027948 <__tzcalc_limits>:
 8027948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802794c:	4605      	mov	r5, r0
 802794e:	f001 faaf 	bl	8028eb0 <__gettzinfo>
 8027952:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8027956:	429d      	cmp	r5, r3
 8027958:	f340 8099 	ble.w	8027a8e <__tzcalc_limits+0x146>
 802795c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8027960:	18ac      	adds	r4, r5, r2
 8027962:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8027966:	f240 126d 	movw	r2, #365	; 0x16d
 802796a:	10a4      	asrs	r4, r4, #2
 802796c:	fb02 4403 	mla	r4, r2, r3, r4
 8027970:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8027974:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8027978:	fb93 f3f2 	sdiv	r3, r3, r2
 802797c:	441c      	add	r4, r3
 802797e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8027982:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8027986:	fb95 fcf3 	sdiv	ip, r5, r3
 802798a:	fb03 5c1c 	mls	ip, r3, ip, r5
 802798e:	186a      	adds	r2, r5, r1
 8027990:	fabc f68c 	clz	r6, ip
 8027994:	fbb2 f2f3 	udiv	r2, r2, r3
 8027998:	f005 0303 	and.w	r3, r5, #3
 802799c:	4414      	add	r4, r2
 802799e:	2264      	movs	r2, #100	; 0x64
 80279a0:	6045      	str	r5, [r0, #4]
 80279a2:	fb95 f7f2 	sdiv	r7, r5, r2
 80279a6:	0976      	lsrs	r6, r6, #5
 80279a8:	fb02 5717 	mls	r7, r2, r7, r5
 80279ac:	4601      	mov	r1, r0
 80279ae:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80279b2:	9300      	str	r3, [sp, #0]
 80279b4:	f04f 0a07 	mov.w	sl, #7
 80279b8:	7a0d      	ldrb	r5, [r1, #8]
 80279ba:	694b      	ldr	r3, [r1, #20]
 80279bc:	2d4a      	cmp	r5, #74	; 0x4a
 80279be:	d12d      	bne.n	8027a1c <__tzcalc_limits+0xd4>
 80279c0:	9a00      	ldr	r2, [sp, #0]
 80279c2:	eb04 0e03 	add.w	lr, r4, r3
 80279c6:	b902      	cbnz	r2, 80279ca <__tzcalc_limits+0x82>
 80279c8:	b917      	cbnz	r7, 80279d0 <__tzcalc_limits+0x88>
 80279ca:	f1bc 0f00 	cmp.w	ip, #0
 80279ce:	d123      	bne.n	8027a18 <__tzcalc_limits+0xd0>
 80279d0:	2b3b      	cmp	r3, #59	; 0x3b
 80279d2:	bfd4      	ite	le
 80279d4:	2300      	movle	r3, #0
 80279d6:	2301      	movgt	r3, #1
 80279d8:	4473      	add	r3, lr
 80279da:	3b01      	subs	r3, #1
 80279dc:	698d      	ldr	r5, [r1, #24]
 80279de:	4a2d      	ldr	r2, [pc, #180]	; (8027a94 <__tzcalc_limits+0x14c>)
 80279e0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80279e4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80279e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80279ea:	18ed      	adds	r5, r5, r3
 80279ec:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80279f0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80279f4:	3128      	adds	r1, #40	; 0x28
 80279f6:	458b      	cmp	fp, r1
 80279f8:	d1de      	bne.n	80279b8 <__tzcalc_limits+0x70>
 80279fa:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80279fe:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8027a02:	428c      	cmp	r4, r1
 8027a04:	eb72 0303 	sbcs.w	r3, r2, r3
 8027a08:	bfb4      	ite	lt
 8027a0a:	2301      	movlt	r3, #1
 8027a0c:	2300      	movge	r3, #0
 8027a0e:	6003      	str	r3, [r0, #0]
 8027a10:	2001      	movs	r0, #1
 8027a12:	b003      	add	sp, #12
 8027a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a18:	2300      	movs	r3, #0
 8027a1a:	e7dd      	b.n	80279d8 <__tzcalc_limits+0x90>
 8027a1c:	2d44      	cmp	r5, #68	; 0x44
 8027a1e:	d101      	bne.n	8027a24 <__tzcalc_limits+0xdc>
 8027a20:	4423      	add	r3, r4
 8027a22:	e7db      	b.n	80279dc <__tzcalc_limits+0x94>
 8027a24:	9a00      	ldr	r2, [sp, #0]
 8027a26:	bb62      	cbnz	r2, 8027a82 <__tzcalc_limits+0x13a>
 8027a28:	2f00      	cmp	r7, #0
 8027a2a:	bf0c      	ite	eq
 8027a2c:	4635      	moveq	r5, r6
 8027a2e:	2501      	movne	r5, #1
 8027a30:	68ca      	ldr	r2, [r1, #12]
 8027a32:	9201      	str	r2, [sp, #4]
 8027a34:	4a18      	ldr	r2, [pc, #96]	; (8027a98 <__tzcalc_limits+0x150>)
 8027a36:	f04f 0930 	mov.w	r9, #48	; 0x30
 8027a3a:	fb09 2505 	mla	r5, r9, r5, r2
 8027a3e:	46a6      	mov	lr, r4
 8027a40:	f04f 0800 	mov.w	r8, #0
 8027a44:	3d04      	subs	r5, #4
 8027a46:	9a01      	ldr	r2, [sp, #4]
 8027a48:	f108 0801 	add.w	r8, r8, #1
 8027a4c:	4542      	cmp	r2, r8
 8027a4e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8027a52:	dc18      	bgt.n	8027a86 <__tzcalc_limits+0x13e>
 8027a54:	f10e 0504 	add.w	r5, lr, #4
 8027a58:	fb95 f8fa 	sdiv	r8, r5, sl
 8027a5c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8027a60:	eba5 0808 	sub.w	r8, r5, r8
 8027a64:	ebb3 0808 	subs.w	r8, r3, r8
 8027a68:	690b      	ldr	r3, [r1, #16]
 8027a6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8027a6e:	bf48      	it	mi
 8027a70:	f108 0807 	addmi.w	r8, r8, #7
 8027a74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8027a78:	4443      	add	r3, r8
 8027a7a:	454b      	cmp	r3, r9
 8027a7c:	da05      	bge.n	8027a8a <__tzcalc_limits+0x142>
 8027a7e:	4473      	add	r3, lr
 8027a80:	e7ac      	b.n	80279dc <__tzcalc_limits+0x94>
 8027a82:	4635      	mov	r5, r6
 8027a84:	e7d4      	b.n	8027a30 <__tzcalc_limits+0xe8>
 8027a86:	44ce      	add	lr, r9
 8027a88:	e7dd      	b.n	8027a46 <__tzcalc_limits+0xfe>
 8027a8a:	3b07      	subs	r3, #7
 8027a8c:	e7f5      	b.n	8027a7a <__tzcalc_limits+0x132>
 8027a8e:	2000      	movs	r0, #0
 8027a90:	e7bf      	b.n	8027a12 <__tzcalc_limits+0xca>
 8027a92:	bf00      	nop
 8027a94:	00015180 	.word	0x00015180
 8027a98:	080477b4 	.word	0x080477b4

08027a9c <__tz_lock>:
 8027a9c:	4801      	ldr	r0, [pc, #4]	; (8027aa4 <__tz_lock+0x8>)
 8027a9e:	f7fd be66 	b.w	802576e <__retarget_lock_acquire>
 8027aa2:	bf00      	nop
 8027aa4:	20030130 	.word	0x20030130

08027aa8 <__tz_unlock>:
 8027aa8:	4801      	ldr	r0, [pc, #4]	; (8027ab0 <__tz_unlock+0x8>)
 8027aaa:	f7fd be62 	b.w	8025772 <__retarget_lock_release>
 8027aae:	bf00      	nop
 8027ab0:	20030130 	.word	0x20030130

08027ab4 <_tzset_unlocked>:
 8027ab4:	4b01      	ldr	r3, [pc, #4]	; (8027abc <_tzset_unlocked+0x8>)
 8027ab6:	6818      	ldr	r0, [r3, #0]
 8027ab8:	f000 b802 	b.w	8027ac0 <_tzset_unlocked_r>
 8027abc:	200004c4 	.word	0x200004c4

08027ac0 <_tzset_unlocked_r>:
 8027ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ac4:	b08d      	sub	sp, #52	; 0x34
 8027ac6:	4607      	mov	r7, r0
 8027ac8:	f001 f9f2 	bl	8028eb0 <__gettzinfo>
 8027acc:	49b0      	ldr	r1, [pc, #704]	; (8027d90 <_tzset_unlocked_r+0x2d0>)
 8027ace:	4eb1      	ldr	r6, [pc, #708]	; (8027d94 <_tzset_unlocked_r+0x2d4>)
 8027ad0:	4605      	mov	r5, r0
 8027ad2:	4638      	mov	r0, r7
 8027ad4:	f001 f9e4 	bl	8028ea0 <_getenv_r>
 8027ad8:	4604      	mov	r4, r0
 8027ada:	b970      	cbnz	r0, 8027afa <_tzset_unlocked_r+0x3a>
 8027adc:	4bae      	ldr	r3, [pc, #696]	; (8027d98 <_tzset_unlocked_r+0x2d8>)
 8027ade:	4aaf      	ldr	r2, [pc, #700]	; (8027d9c <_tzset_unlocked_r+0x2dc>)
 8027ae0:	6018      	str	r0, [r3, #0]
 8027ae2:	4baf      	ldr	r3, [pc, #700]	; (8027da0 <_tzset_unlocked_r+0x2e0>)
 8027ae4:	6018      	str	r0, [r3, #0]
 8027ae6:	4baf      	ldr	r3, [pc, #700]	; (8027da4 <_tzset_unlocked_r+0x2e4>)
 8027ae8:	6830      	ldr	r0, [r6, #0]
 8027aea:	e9c3 2200 	strd	r2, r2, [r3]
 8027aee:	f7fd fe4b 	bl	8025788 <free>
 8027af2:	6034      	str	r4, [r6, #0]
 8027af4:	b00d      	add	sp, #52	; 0x34
 8027af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027afa:	6831      	ldr	r1, [r6, #0]
 8027afc:	2900      	cmp	r1, #0
 8027afe:	d162      	bne.n	8027bc6 <_tzset_unlocked_r+0x106>
 8027b00:	6830      	ldr	r0, [r6, #0]
 8027b02:	f7fd fe41 	bl	8025788 <free>
 8027b06:	4620      	mov	r0, r4
 8027b08:	f7d8 fba4 	bl	8000254 <strlen>
 8027b0c:	1c41      	adds	r1, r0, #1
 8027b0e:	4638      	mov	r0, r7
 8027b10:	f7fe f960 	bl	8025dd4 <_malloc_r>
 8027b14:	6030      	str	r0, [r6, #0]
 8027b16:	2800      	cmp	r0, #0
 8027b18:	d15a      	bne.n	8027bd0 <_tzset_unlocked_r+0x110>
 8027b1a:	7823      	ldrb	r3, [r4, #0]
 8027b1c:	4aa2      	ldr	r2, [pc, #648]	; (8027da8 <_tzset_unlocked_r+0x2e8>)
 8027b1e:	49a3      	ldr	r1, [pc, #652]	; (8027dac <_tzset_unlocked_r+0x2ec>)
 8027b20:	2b3a      	cmp	r3, #58	; 0x3a
 8027b22:	bf08      	it	eq
 8027b24:	3401      	addeq	r4, #1
 8027b26:	ae0a      	add	r6, sp, #40	; 0x28
 8027b28:	4633      	mov	r3, r6
 8027b2a:	4620      	mov	r0, r4
 8027b2c:	f7ff f814 	bl	8026b58 <siscanf>
 8027b30:	2800      	cmp	r0, #0
 8027b32:	dddf      	ble.n	8027af4 <_tzset_unlocked_r+0x34>
 8027b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b36:	18e7      	adds	r7, r4, r3
 8027b38:	5ce3      	ldrb	r3, [r4, r3]
 8027b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8027b3c:	d14c      	bne.n	8027bd8 <_tzset_unlocked_r+0x118>
 8027b3e:	3701      	adds	r7, #1
 8027b40:	f04f 38ff 	mov.w	r8, #4294967295
 8027b44:	f10d 0a20 	add.w	sl, sp, #32
 8027b48:	f10d 0b1e 	add.w	fp, sp, #30
 8027b4c:	2400      	movs	r4, #0
 8027b4e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8027b52:	4997      	ldr	r1, [pc, #604]	; (8027db0 <_tzset_unlocked_r+0x2f0>)
 8027b54:	9603      	str	r6, [sp, #12]
 8027b56:	f8cd b000 	str.w	fp, [sp]
 8027b5a:	4633      	mov	r3, r6
 8027b5c:	aa07      	add	r2, sp, #28
 8027b5e:	4638      	mov	r0, r7
 8027b60:	f8ad 401e 	strh.w	r4, [sp, #30]
 8027b64:	f8ad 4020 	strh.w	r4, [sp, #32]
 8027b68:	f7fe fff6 	bl	8026b58 <siscanf>
 8027b6c:	42a0      	cmp	r0, r4
 8027b6e:	ddc1      	ble.n	8027af4 <_tzset_unlocked_r+0x34>
 8027b70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027b74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027b78:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8027dbc <_tzset_unlocked_r+0x2fc>
 8027b7c:	213c      	movs	r1, #60	; 0x3c
 8027b7e:	fb01 3302 	mla	r3, r1, r2, r3
 8027b82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027b86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027b8a:	fb01 3302 	mla	r3, r1, r2, r3
 8027b8e:	fb08 f303 	mul.w	r3, r8, r3
 8027b92:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8027da4 <_tzset_unlocked_r+0x2e4>
 8027b96:	62ab      	str	r3, [r5, #40]	; 0x28
 8027b98:	4b83      	ldr	r3, [pc, #524]	; (8027da8 <_tzset_unlocked_r+0x2e8>)
 8027b9a:	f8c8 3000 	str.w	r3, [r8]
 8027b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ba0:	4982      	ldr	r1, [pc, #520]	; (8027dac <_tzset_unlocked_r+0x2ec>)
 8027ba2:	441f      	add	r7, r3
 8027ba4:	464a      	mov	r2, r9
 8027ba6:	4633      	mov	r3, r6
 8027ba8:	4638      	mov	r0, r7
 8027baa:	f7fe ffd5 	bl	8026b58 <siscanf>
 8027bae:	42a0      	cmp	r0, r4
 8027bb0:	dc18      	bgt.n	8027be4 <_tzset_unlocked_r+0x124>
 8027bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8027bb6:	f8c8 3004 	str.w	r3, [r8, #4]
 8027bba:	4b77      	ldr	r3, [pc, #476]	; (8027d98 <_tzset_unlocked_r+0x2d8>)
 8027bbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027bbe:	601a      	str	r2, [r3, #0]
 8027bc0:	4b77      	ldr	r3, [pc, #476]	; (8027da0 <_tzset_unlocked_r+0x2e0>)
 8027bc2:	601c      	str	r4, [r3, #0]
 8027bc4:	e796      	b.n	8027af4 <_tzset_unlocked_r+0x34>
 8027bc6:	f7d8 fb3b 	bl	8000240 <strcmp>
 8027bca:	2800      	cmp	r0, #0
 8027bcc:	d198      	bne.n	8027b00 <_tzset_unlocked_r+0x40>
 8027bce:	e791      	b.n	8027af4 <_tzset_unlocked_r+0x34>
 8027bd0:	4621      	mov	r1, r4
 8027bd2:	f7ff f857 	bl	8026c84 <strcpy>
 8027bd6:	e7a0      	b.n	8027b1a <_tzset_unlocked_r+0x5a>
 8027bd8:	2b2b      	cmp	r3, #43	; 0x2b
 8027bda:	bf08      	it	eq
 8027bdc:	3701      	addeq	r7, #1
 8027bde:	f04f 0801 	mov.w	r8, #1
 8027be2:	e7af      	b.n	8027b44 <_tzset_unlocked_r+0x84>
 8027be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027be6:	f8c8 9004 	str.w	r9, [r8, #4]
 8027bea:	18fc      	adds	r4, r7, r3
 8027bec:	5cfb      	ldrb	r3, [r7, r3]
 8027bee:	2b2d      	cmp	r3, #45	; 0x2d
 8027bf0:	f040 808b 	bne.w	8027d0a <_tzset_unlocked_r+0x24a>
 8027bf4:	3401      	adds	r4, #1
 8027bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8027bfa:	2300      	movs	r3, #0
 8027bfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027c00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027c04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027c08:	930a      	str	r3, [sp, #40]	; 0x28
 8027c0a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027c0e:	e9cd b600 	strd	fp, r6, [sp]
 8027c12:	4967      	ldr	r1, [pc, #412]	; (8027db0 <_tzset_unlocked_r+0x2f0>)
 8027c14:	4633      	mov	r3, r6
 8027c16:	aa07      	add	r2, sp, #28
 8027c18:	4620      	mov	r0, r4
 8027c1a:	f7fe ff9d 	bl	8026b58 <siscanf>
 8027c1e:	2800      	cmp	r0, #0
 8027c20:	dc78      	bgt.n	8027d14 <_tzset_unlocked_r+0x254>
 8027c22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8027c24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8027c28:	652b      	str	r3, [r5, #80]	; 0x50
 8027c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c2c:	462f      	mov	r7, r5
 8027c2e:	441c      	add	r4, r3
 8027c30:	f04f 0900 	mov.w	r9, #0
 8027c34:	7823      	ldrb	r3, [r4, #0]
 8027c36:	2b2c      	cmp	r3, #44	; 0x2c
 8027c38:	bf08      	it	eq
 8027c3a:	3401      	addeq	r4, #1
 8027c3c:	f894 8000 	ldrb.w	r8, [r4]
 8027c40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8027c44:	d178      	bne.n	8027d38 <_tzset_unlocked_r+0x278>
 8027c46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8027c4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8027c4e:	ab09      	add	r3, sp, #36	; 0x24
 8027c50:	9300      	str	r3, [sp, #0]
 8027c52:	4958      	ldr	r1, [pc, #352]	; (8027db4 <_tzset_unlocked_r+0x2f4>)
 8027c54:	9603      	str	r6, [sp, #12]
 8027c56:	4633      	mov	r3, r6
 8027c58:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8027c5c:	4620      	mov	r0, r4
 8027c5e:	f7fe ff7b 	bl	8026b58 <siscanf>
 8027c62:	2803      	cmp	r0, #3
 8027c64:	f47f af46 	bne.w	8027af4 <_tzset_unlocked_r+0x34>
 8027c68:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8027c6c:	1e4b      	subs	r3, r1, #1
 8027c6e:	2b0b      	cmp	r3, #11
 8027c70:	f63f af40 	bhi.w	8027af4 <_tzset_unlocked_r+0x34>
 8027c74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8027c78:	1e53      	subs	r3, r2, #1
 8027c7a:	2b04      	cmp	r3, #4
 8027c7c:	f63f af3a 	bhi.w	8027af4 <_tzset_unlocked_r+0x34>
 8027c80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8027c84:	2b06      	cmp	r3, #6
 8027c86:	f63f af35 	bhi.w	8027af4 <_tzset_unlocked_r+0x34>
 8027c8a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027c8e:	f887 8008 	strb.w	r8, [r7, #8]
 8027c92:	617b      	str	r3, [r7, #20]
 8027c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c96:	eb04 0803 	add.w	r8, r4, r3
 8027c9a:	2302      	movs	r3, #2
 8027c9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027ca0:	2300      	movs	r3, #0
 8027ca2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027ca6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027caa:	930a      	str	r3, [sp, #40]	; 0x28
 8027cac:	f898 3000 	ldrb.w	r3, [r8]
 8027cb0:	2b2f      	cmp	r3, #47	; 0x2f
 8027cb2:	d109      	bne.n	8027cc8 <_tzset_unlocked_r+0x208>
 8027cb4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027cb8:	e9cd b600 	strd	fp, r6, [sp]
 8027cbc:	493e      	ldr	r1, [pc, #248]	; (8027db8 <_tzset_unlocked_r+0x2f8>)
 8027cbe:	4633      	mov	r3, r6
 8027cc0:	aa07      	add	r2, sp, #28
 8027cc2:	4640      	mov	r0, r8
 8027cc4:	f7fe ff48 	bl	8026b58 <siscanf>
 8027cc8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027ccc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027cd0:	213c      	movs	r1, #60	; 0x3c
 8027cd2:	fb01 3302 	mla	r3, r1, r2, r3
 8027cd6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027cda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027cde:	fb01 3302 	mla	r3, r1, r2, r3
 8027ce2:	61bb      	str	r3, [r7, #24]
 8027ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027ce6:	3728      	adds	r7, #40	; 0x28
 8027ce8:	4444      	add	r4, r8
 8027cea:	f1b9 0f00 	cmp.w	r9, #0
 8027cee:	d020      	beq.n	8027d32 <_tzset_unlocked_r+0x272>
 8027cf0:	6868      	ldr	r0, [r5, #4]
 8027cf2:	f7ff fe29 	bl	8027948 <__tzcalc_limits>
 8027cf6:	4b28      	ldr	r3, [pc, #160]	; (8027d98 <_tzset_unlocked_r+0x2d8>)
 8027cf8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027cfa:	601a      	str	r2, [r3, #0]
 8027cfc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8027cfe:	1a9b      	subs	r3, r3, r2
 8027d00:	4a27      	ldr	r2, [pc, #156]	; (8027da0 <_tzset_unlocked_r+0x2e0>)
 8027d02:	bf18      	it	ne
 8027d04:	2301      	movne	r3, #1
 8027d06:	6013      	str	r3, [r2, #0]
 8027d08:	e6f4      	b.n	8027af4 <_tzset_unlocked_r+0x34>
 8027d0a:	2b2b      	cmp	r3, #43	; 0x2b
 8027d0c:	bf08      	it	eq
 8027d0e:	3401      	addeq	r4, #1
 8027d10:	2701      	movs	r7, #1
 8027d12:	e772      	b.n	8027bfa <_tzset_unlocked_r+0x13a>
 8027d14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027d18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027d1c:	213c      	movs	r1, #60	; 0x3c
 8027d1e:	fb01 3302 	mla	r3, r1, r2, r3
 8027d22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027d26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027d2a:	fb01 3302 	mla	r3, r1, r2, r3
 8027d2e:	437b      	muls	r3, r7
 8027d30:	e77a      	b.n	8027c28 <_tzset_unlocked_r+0x168>
 8027d32:	f04f 0901 	mov.w	r9, #1
 8027d36:	e77d      	b.n	8027c34 <_tzset_unlocked_r+0x174>
 8027d38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8027d3c:	bf06      	itte	eq
 8027d3e:	3401      	addeq	r4, #1
 8027d40:	4643      	moveq	r3, r8
 8027d42:	2344      	movne	r3, #68	; 0x44
 8027d44:	220a      	movs	r2, #10
 8027d46:	a90b      	add	r1, sp, #44	; 0x2c
 8027d48:	4620      	mov	r0, r4
 8027d4a:	9305      	str	r3, [sp, #20]
 8027d4c:	f7ff fdf2 	bl	8027934 <strtoul>
 8027d50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027d54:	9b05      	ldr	r3, [sp, #20]
 8027d56:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8027d5a:	45a0      	cmp	r8, r4
 8027d5c:	d114      	bne.n	8027d88 <_tzset_unlocked_r+0x2c8>
 8027d5e:	234d      	movs	r3, #77	; 0x4d
 8027d60:	f1b9 0f00 	cmp.w	r9, #0
 8027d64:	d107      	bne.n	8027d76 <_tzset_unlocked_r+0x2b6>
 8027d66:	722b      	strb	r3, [r5, #8]
 8027d68:	2103      	movs	r1, #3
 8027d6a:	2302      	movs	r3, #2
 8027d6c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8027d70:	f8c5 9014 	str.w	r9, [r5, #20]
 8027d74:	e791      	b.n	8027c9a <_tzset_unlocked_r+0x1da>
 8027d76:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8027d7a:	220b      	movs	r2, #11
 8027d7c:	2301      	movs	r3, #1
 8027d7e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8027d82:	2300      	movs	r3, #0
 8027d84:	63eb      	str	r3, [r5, #60]	; 0x3c
 8027d86:	e788      	b.n	8027c9a <_tzset_unlocked_r+0x1da>
 8027d88:	b280      	uxth	r0, r0
 8027d8a:	723b      	strb	r3, [r7, #8]
 8027d8c:	6178      	str	r0, [r7, #20]
 8027d8e:	e784      	b.n	8027c9a <_tzset_unlocked_r+0x1da>
 8027d90:	08047b24 	.word	0x08047b24
 8027d94:	20030158 	.word	0x20030158
 8027d98:	20030160 	.word	0x20030160
 8027d9c:	08047b27 	.word	0x08047b27
 8027da0:	2003015c 	.word	0x2003015c
 8027da4:	20000528 	.word	0x20000528
 8027da8:	2003014b 	.word	0x2003014b
 8027dac:	08047b2b 	.word	0x08047b2b
 8027db0:	08047b4e 	.word	0x08047b4e
 8027db4:	08047b3a 	.word	0x08047b3a
 8027db8:	08047b4d 	.word	0x08047b4d
 8027dbc:	20030140 	.word	0x20030140

08027dc0 <__swbuf_r>:
 8027dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027dc2:	460e      	mov	r6, r1
 8027dc4:	4614      	mov	r4, r2
 8027dc6:	4605      	mov	r5, r0
 8027dc8:	b118      	cbz	r0, 8027dd2 <__swbuf_r+0x12>
 8027dca:	6983      	ldr	r3, [r0, #24]
 8027dcc:	b90b      	cbnz	r3, 8027dd2 <__swbuf_r+0x12>
 8027dce:	f7fd faf9 	bl	80253c4 <__sinit>
 8027dd2:	4b21      	ldr	r3, [pc, #132]	; (8027e58 <__swbuf_r+0x98>)
 8027dd4:	429c      	cmp	r4, r3
 8027dd6:	d12b      	bne.n	8027e30 <__swbuf_r+0x70>
 8027dd8:	686c      	ldr	r4, [r5, #4]
 8027dda:	69a3      	ldr	r3, [r4, #24]
 8027ddc:	60a3      	str	r3, [r4, #8]
 8027dde:	89a3      	ldrh	r3, [r4, #12]
 8027de0:	071a      	lsls	r2, r3, #28
 8027de2:	d52f      	bpl.n	8027e44 <__swbuf_r+0x84>
 8027de4:	6923      	ldr	r3, [r4, #16]
 8027de6:	b36b      	cbz	r3, 8027e44 <__swbuf_r+0x84>
 8027de8:	6923      	ldr	r3, [r4, #16]
 8027dea:	6820      	ldr	r0, [r4, #0]
 8027dec:	1ac0      	subs	r0, r0, r3
 8027dee:	6963      	ldr	r3, [r4, #20]
 8027df0:	b2f6      	uxtb	r6, r6
 8027df2:	4283      	cmp	r3, r0
 8027df4:	4637      	mov	r7, r6
 8027df6:	dc04      	bgt.n	8027e02 <__swbuf_r+0x42>
 8027df8:	4621      	mov	r1, r4
 8027dfa:	4628      	mov	r0, r5
 8027dfc:	f000 ffc6 	bl	8028d8c <_fflush_r>
 8027e00:	bb30      	cbnz	r0, 8027e50 <__swbuf_r+0x90>
 8027e02:	68a3      	ldr	r3, [r4, #8]
 8027e04:	3b01      	subs	r3, #1
 8027e06:	60a3      	str	r3, [r4, #8]
 8027e08:	6823      	ldr	r3, [r4, #0]
 8027e0a:	1c5a      	adds	r2, r3, #1
 8027e0c:	6022      	str	r2, [r4, #0]
 8027e0e:	701e      	strb	r6, [r3, #0]
 8027e10:	6963      	ldr	r3, [r4, #20]
 8027e12:	3001      	adds	r0, #1
 8027e14:	4283      	cmp	r3, r0
 8027e16:	d004      	beq.n	8027e22 <__swbuf_r+0x62>
 8027e18:	89a3      	ldrh	r3, [r4, #12]
 8027e1a:	07db      	lsls	r3, r3, #31
 8027e1c:	d506      	bpl.n	8027e2c <__swbuf_r+0x6c>
 8027e1e:	2e0a      	cmp	r6, #10
 8027e20:	d104      	bne.n	8027e2c <__swbuf_r+0x6c>
 8027e22:	4621      	mov	r1, r4
 8027e24:	4628      	mov	r0, r5
 8027e26:	f000 ffb1 	bl	8028d8c <_fflush_r>
 8027e2a:	b988      	cbnz	r0, 8027e50 <__swbuf_r+0x90>
 8027e2c:	4638      	mov	r0, r7
 8027e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e30:	4b0a      	ldr	r3, [pc, #40]	; (8027e5c <__swbuf_r+0x9c>)
 8027e32:	429c      	cmp	r4, r3
 8027e34:	d101      	bne.n	8027e3a <__swbuf_r+0x7a>
 8027e36:	68ac      	ldr	r4, [r5, #8]
 8027e38:	e7cf      	b.n	8027dda <__swbuf_r+0x1a>
 8027e3a:	4b09      	ldr	r3, [pc, #36]	; (8027e60 <__swbuf_r+0xa0>)
 8027e3c:	429c      	cmp	r4, r3
 8027e3e:	bf08      	it	eq
 8027e40:	68ec      	ldreq	r4, [r5, #12]
 8027e42:	e7ca      	b.n	8027dda <__swbuf_r+0x1a>
 8027e44:	4621      	mov	r1, r4
 8027e46:	4628      	mov	r0, r5
 8027e48:	f000 f81e 	bl	8027e88 <__swsetup_r>
 8027e4c:	2800      	cmp	r0, #0
 8027e4e:	d0cb      	beq.n	8027de8 <__swbuf_r+0x28>
 8027e50:	f04f 37ff 	mov.w	r7, #4294967295
 8027e54:	e7ea      	b.n	8027e2c <__swbuf_r+0x6c>
 8027e56:	bf00      	nop
 8027e58:	0804769c 	.word	0x0804769c
 8027e5c:	080476bc 	.word	0x080476bc
 8027e60:	0804767c 	.word	0x0804767c

08027e64 <_write_r>:
 8027e64:	b538      	push	{r3, r4, r5, lr}
 8027e66:	4d07      	ldr	r5, [pc, #28]	; (8027e84 <_write_r+0x20>)
 8027e68:	4604      	mov	r4, r0
 8027e6a:	4608      	mov	r0, r1
 8027e6c:	4611      	mov	r1, r2
 8027e6e:	2200      	movs	r2, #0
 8027e70:	602a      	str	r2, [r5, #0]
 8027e72:	461a      	mov	r2, r3
 8027e74:	f7db fe66 	bl	8003b44 <_write>
 8027e78:	1c43      	adds	r3, r0, #1
 8027e7a:	d102      	bne.n	8027e82 <_write_r+0x1e>
 8027e7c:	682b      	ldr	r3, [r5, #0]
 8027e7e:	b103      	cbz	r3, 8027e82 <_write_r+0x1e>
 8027e80:	6023      	str	r3, [r4, #0]
 8027e82:	bd38      	pop	{r3, r4, r5, pc}
 8027e84:	2003013c 	.word	0x2003013c

08027e88 <__swsetup_r>:
 8027e88:	4b32      	ldr	r3, [pc, #200]	; (8027f54 <__swsetup_r+0xcc>)
 8027e8a:	b570      	push	{r4, r5, r6, lr}
 8027e8c:	681d      	ldr	r5, [r3, #0]
 8027e8e:	4606      	mov	r6, r0
 8027e90:	460c      	mov	r4, r1
 8027e92:	b125      	cbz	r5, 8027e9e <__swsetup_r+0x16>
 8027e94:	69ab      	ldr	r3, [r5, #24]
 8027e96:	b913      	cbnz	r3, 8027e9e <__swsetup_r+0x16>
 8027e98:	4628      	mov	r0, r5
 8027e9a:	f7fd fa93 	bl	80253c4 <__sinit>
 8027e9e:	4b2e      	ldr	r3, [pc, #184]	; (8027f58 <__swsetup_r+0xd0>)
 8027ea0:	429c      	cmp	r4, r3
 8027ea2:	d10f      	bne.n	8027ec4 <__swsetup_r+0x3c>
 8027ea4:	686c      	ldr	r4, [r5, #4]
 8027ea6:	89a3      	ldrh	r3, [r4, #12]
 8027ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027eac:	0719      	lsls	r1, r3, #28
 8027eae:	d42c      	bmi.n	8027f0a <__swsetup_r+0x82>
 8027eb0:	06dd      	lsls	r5, r3, #27
 8027eb2:	d411      	bmi.n	8027ed8 <__swsetup_r+0x50>
 8027eb4:	2309      	movs	r3, #9
 8027eb6:	6033      	str	r3, [r6, #0]
 8027eb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027ebc:	81a3      	strh	r3, [r4, #12]
 8027ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8027ec2:	e03e      	b.n	8027f42 <__swsetup_r+0xba>
 8027ec4:	4b25      	ldr	r3, [pc, #148]	; (8027f5c <__swsetup_r+0xd4>)
 8027ec6:	429c      	cmp	r4, r3
 8027ec8:	d101      	bne.n	8027ece <__swsetup_r+0x46>
 8027eca:	68ac      	ldr	r4, [r5, #8]
 8027ecc:	e7eb      	b.n	8027ea6 <__swsetup_r+0x1e>
 8027ece:	4b24      	ldr	r3, [pc, #144]	; (8027f60 <__swsetup_r+0xd8>)
 8027ed0:	429c      	cmp	r4, r3
 8027ed2:	bf08      	it	eq
 8027ed4:	68ec      	ldreq	r4, [r5, #12]
 8027ed6:	e7e6      	b.n	8027ea6 <__swsetup_r+0x1e>
 8027ed8:	0758      	lsls	r0, r3, #29
 8027eda:	d512      	bpl.n	8027f02 <__swsetup_r+0x7a>
 8027edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027ede:	b141      	cbz	r1, 8027ef2 <__swsetup_r+0x6a>
 8027ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027ee4:	4299      	cmp	r1, r3
 8027ee6:	d002      	beq.n	8027eee <__swsetup_r+0x66>
 8027ee8:	4630      	mov	r0, r6
 8027eea:	f7fd ff07 	bl	8025cfc <_free_r>
 8027eee:	2300      	movs	r3, #0
 8027ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8027ef2:	89a3      	ldrh	r3, [r4, #12]
 8027ef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027ef8:	81a3      	strh	r3, [r4, #12]
 8027efa:	2300      	movs	r3, #0
 8027efc:	6063      	str	r3, [r4, #4]
 8027efe:	6923      	ldr	r3, [r4, #16]
 8027f00:	6023      	str	r3, [r4, #0]
 8027f02:	89a3      	ldrh	r3, [r4, #12]
 8027f04:	f043 0308 	orr.w	r3, r3, #8
 8027f08:	81a3      	strh	r3, [r4, #12]
 8027f0a:	6923      	ldr	r3, [r4, #16]
 8027f0c:	b94b      	cbnz	r3, 8027f22 <__swsetup_r+0x9a>
 8027f0e:	89a3      	ldrh	r3, [r4, #12]
 8027f10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027f18:	d003      	beq.n	8027f22 <__swsetup_r+0x9a>
 8027f1a:	4621      	mov	r1, r4
 8027f1c:	4630      	mov	r0, r6
 8027f1e:	f001 f8b7 	bl	8029090 <__smakebuf_r>
 8027f22:	89a0      	ldrh	r0, [r4, #12]
 8027f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027f28:	f010 0301 	ands.w	r3, r0, #1
 8027f2c:	d00a      	beq.n	8027f44 <__swsetup_r+0xbc>
 8027f2e:	2300      	movs	r3, #0
 8027f30:	60a3      	str	r3, [r4, #8]
 8027f32:	6963      	ldr	r3, [r4, #20]
 8027f34:	425b      	negs	r3, r3
 8027f36:	61a3      	str	r3, [r4, #24]
 8027f38:	6923      	ldr	r3, [r4, #16]
 8027f3a:	b943      	cbnz	r3, 8027f4e <__swsetup_r+0xc6>
 8027f3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027f40:	d1ba      	bne.n	8027eb8 <__swsetup_r+0x30>
 8027f42:	bd70      	pop	{r4, r5, r6, pc}
 8027f44:	0781      	lsls	r1, r0, #30
 8027f46:	bf58      	it	pl
 8027f48:	6963      	ldrpl	r3, [r4, #20]
 8027f4a:	60a3      	str	r3, [r4, #8]
 8027f4c:	e7f4      	b.n	8027f38 <__swsetup_r+0xb0>
 8027f4e:	2000      	movs	r0, #0
 8027f50:	e7f7      	b.n	8027f42 <__swsetup_r+0xba>
 8027f52:	bf00      	nop
 8027f54:	200004c4 	.word	0x200004c4
 8027f58:	0804769c 	.word	0x0804769c
 8027f5c:	080476bc 	.word	0x080476bc
 8027f60:	0804767c 	.word	0x0804767c

08027f64 <abs>:
 8027f64:	2800      	cmp	r0, #0
 8027f66:	bfb8      	it	lt
 8027f68:	4240      	neglt	r0, r0
 8027f6a:	4770      	bx	lr

08027f6c <asctime>:
 8027f6c:	4b0d      	ldr	r3, [pc, #52]	; (8027fa4 <asctime+0x38>)
 8027f6e:	b570      	push	{r4, r5, r6, lr}
 8027f70:	681d      	ldr	r5, [r3, #0]
 8027f72:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8027f74:	4604      	mov	r4, r0
 8027f76:	b976      	cbnz	r6, 8027f96 <asctime+0x2a>
 8027f78:	201a      	movs	r0, #26
 8027f7a:	f7fd fbfd 	bl	8025778 <malloc>
 8027f7e:	4602      	mov	r2, r0
 8027f80:	6428      	str	r0, [r5, #64]	; 0x40
 8027f82:	b920      	cbnz	r0, 8027f8e <asctime+0x22>
 8027f84:	4b08      	ldr	r3, [pc, #32]	; (8027fa8 <asctime+0x3c>)
 8027f86:	4809      	ldr	r0, [pc, #36]	; (8027fac <asctime+0x40>)
 8027f88:	2137      	movs	r1, #55	; 0x37
 8027f8a:	f000 f837 	bl	8027ffc <__assert_func>
 8027f8e:	221a      	movs	r2, #26
 8027f90:	4631      	mov	r1, r6
 8027f92:	f7fd fc39 	bl	8025808 <memset>
 8027f96:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8027f98:	4620      	mov	r0, r4
 8027f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027f9e:	f000 b807 	b.w	8027fb0 <asctime_r>
 8027fa2:	bf00      	nop
 8027fa4:	200004c4 	.word	0x200004c4
 8027fa8:	080476e0 	.word	0x080476e0
 8027fac:	08047b60 	.word	0x08047b60

08027fb0 <asctime_r>:
 8027fb0:	b510      	push	{r4, lr}
 8027fb2:	460c      	mov	r4, r1
 8027fb4:	6941      	ldr	r1, [r0, #20]
 8027fb6:	6903      	ldr	r3, [r0, #16]
 8027fb8:	6982      	ldr	r2, [r0, #24]
 8027fba:	b086      	sub	sp, #24
 8027fbc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8027fc0:	9104      	str	r1, [sp, #16]
 8027fc2:	6801      	ldr	r1, [r0, #0]
 8027fc4:	9103      	str	r1, [sp, #12]
 8027fc6:	6841      	ldr	r1, [r0, #4]
 8027fc8:	9102      	str	r1, [sp, #8]
 8027fca:	6881      	ldr	r1, [r0, #8]
 8027fcc:	9101      	str	r1, [sp, #4]
 8027fce:	68c1      	ldr	r1, [r0, #12]
 8027fd0:	9100      	str	r1, [sp, #0]
 8027fd2:	4907      	ldr	r1, [pc, #28]	; (8027ff0 <asctime_r+0x40>)
 8027fd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027fd8:	440b      	add	r3, r1
 8027fda:	4906      	ldr	r1, [pc, #24]	; (8027ff4 <asctime_r+0x44>)
 8027fdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027fe0:	440a      	add	r2, r1
 8027fe2:	4620      	mov	r0, r4
 8027fe4:	4904      	ldr	r1, [pc, #16]	; (8027ff8 <asctime_r+0x48>)
 8027fe6:	f7fe fd97 	bl	8026b18 <siprintf>
 8027fea:	4620      	mov	r0, r4
 8027fec:	b006      	add	sp, #24
 8027fee:	bd10      	pop	{r4, pc}
 8027ff0:	08047bf1 	.word	0x08047bf1
 8027ff4:	08047bdc 	.word	0x08047bdc
 8027ff8:	08047bbc 	.word	0x08047bbc

08027ffc <__assert_func>:
 8027ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027ffe:	4614      	mov	r4, r2
 8028000:	461a      	mov	r2, r3
 8028002:	4b09      	ldr	r3, [pc, #36]	; (8028028 <__assert_func+0x2c>)
 8028004:	681b      	ldr	r3, [r3, #0]
 8028006:	4605      	mov	r5, r0
 8028008:	68d8      	ldr	r0, [r3, #12]
 802800a:	b14c      	cbz	r4, 8028020 <__assert_func+0x24>
 802800c:	4b07      	ldr	r3, [pc, #28]	; (802802c <__assert_func+0x30>)
 802800e:	9100      	str	r1, [sp, #0]
 8028010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028014:	4906      	ldr	r1, [pc, #24]	; (8028030 <__assert_func+0x34>)
 8028016:	462b      	mov	r3, r5
 8028018:	f000 fef4 	bl	8028e04 <fiprintf>
 802801c:	f002 faee 	bl	802a5fc <abort>
 8028020:	4b04      	ldr	r3, [pc, #16]	; (8028034 <__assert_func+0x38>)
 8028022:	461c      	mov	r4, r3
 8028024:	e7f3      	b.n	802800e <__assert_func+0x12>
 8028026:	bf00      	nop
 8028028:	200004c4 	.word	0x200004c4
 802802c:	08047c15 	.word	0x08047c15
 8028030:	08047c22 	.word	0x08047c22
 8028034:	08047bdb 	.word	0x08047bdb

08028038 <_close_r>:
 8028038:	b538      	push	{r3, r4, r5, lr}
 802803a:	4d06      	ldr	r5, [pc, #24]	; (8028054 <_close_r+0x1c>)
 802803c:	2300      	movs	r3, #0
 802803e:	4604      	mov	r4, r0
 8028040:	4608      	mov	r0, r1
 8028042:	602b      	str	r3, [r5, #0]
 8028044:	f7e0 f9fe 	bl	8008444 <_close>
 8028048:	1c43      	adds	r3, r0, #1
 802804a:	d102      	bne.n	8028052 <_close_r+0x1a>
 802804c:	682b      	ldr	r3, [r5, #0]
 802804e:	b103      	cbz	r3, 8028052 <_close_r+0x1a>
 8028050:	6023      	str	r3, [r4, #0]
 8028052:	bd38      	pop	{r3, r4, r5, pc}
 8028054:	2003013c 	.word	0x2003013c

08028058 <div>:
 8028058:	2900      	cmp	r1, #0
 802805a:	b510      	push	{r4, lr}
 802805c:	fb91 f4f2 	sdiv	r4, r1, r2
 8028060:	fb02 1314 	mls	r3, r2, r4, r1
 8028064:	db06      	blt.n	8028074 <div+0x1c>
 8028066:	2b00      	cmp	r3, #0
 8028068:	da01      	bge.n	802806e <div+0x16>
 802806a:	3401      	adds	r4, #1
 802806c:	1a9b      	subs	r3, r3, r2
 802806e:	e9c0 4300 	strd	r4, r3, [r0]
 8028072:	bd10      	pop	{r4, pc}
 8028074:	2b00      	cmp	r3, #0
 8028076:	bfc4      	itt	gt
 8028078:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802807c:	189b      	addgt	r3, r3, r2
 802807e:	e7f6      	b.n	802806e <div+0x16>

08028080 <quorem>:
 8028080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028084:	6903      	ldr	r3, [r0, #16]
 8028086:	690c      	ldr	r4, [r1, #16]
 8028088:	42a3      	cmp	r3, r4
 802808a:	4607      	mov	r7, r0
 802808c:	f2c0 8081 	blt.w	8028192 <quorem+0x112>
 8028090:	3c01      	subs	r4, #1
 8028092:	f101 0814 	add.w	r8, r1, #20
 8028096:	f100 0514 	add.w	r5, r0, #20
 802809a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802809e:	9301      	str	r3, [sp, #4]
 80280a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80280a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80280a8:	3301      	adds	r3, #1
 80280aa:	429a      	cmp	r2, r3
 80280ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80280b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80280b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80280b8:	d331      	bcc.n	802811e <quorem+0x9e>
 80280ba:	f04f 0e00 	mov.w	lr, #0
 80280be:	4640      	mov	r0, r8
 80280c0:	46ac      	mov	ip, r5
 80280c2:	46f2      	mov	sl, lr
 80280c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80280c8:	b293      	uxth	r3, r2
 80280ca:	fb06 e303 	mla	r3, r6, r3, lr
 80280ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80280d2:	b29b      	uxth	r3, r3
 80280d4:	ebaa 0303 	sub.w	r3, sl, r3
 80280d8:	f8dc a000 	ldr.w	sl, [ip]
 80280dc:	0c12      	lsrs	r2, r2, #16
 80280de:	fa13 f38a 	uxtah	r3, r3, sl
 80280e2:	fb06 e202 	mla	r2, r6, r2, lr
 80280e6:	9300      	str	r3, [sp, #0]
 80280e8:	9b00      	ldr	r3, [sp, #0]
 80280ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80280ee:	b292      	uxth	r2, r2
 80280f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80280f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80280f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80280fc:	4581      	cmp	r9, r0
 80280fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028102:	f84c 3b04 	str.w	r3, [ip], #4
 8028106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802810a:	d2db      	bcs.n	80280c4 <quorem+0x44>
 802810c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028110:	b92b      	cbnz	r3, 802811e <quorem+0x9e>
 8028112:	9b01      	ldr	r3, [sp, #4]
 8028114:	3b04      	subs	r3, #4
 8028116:	429d      	cmp	r5, r3
 8028118:	461a      	mov	r2, r3
 802811a:	d32e      	bcc.n	802817a <quorem+0xfa>
 802811c:	613c      	str	r4, [r7, #16]
 802811e:	4638      	mov	r0, r7
 8028120:	f001 fa84 	bl	802962c <__mcmp>
 8028124:	2800      	cmp	r0, #0
 8028126:	db24      	blt.n	8028172 <quorem+0xf2>
 8028128:	3601      	adds	r6, #1
 802812a:	4628      	mov	r0, r5
 802812c:	f04f 0c00 	mov.w	ip, #0
 8028130:	f858 2b04 	ldr.w	r2, [r8], #4
 8028134:	f8d0 e000 	ldr.w	lr, [r0]
 8028138:	b293      	uxth	r3, r2
 802813a:	ebac 0303 	sub.w	r3, ip, r3
 802813e:	0c12      	lsrs	r2, r2, #16
 8028140:	fa13 f38e 	uxtah	r3, r3, lr
 8028144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802814c:	b29b      	uxth	r3, r3
 802814e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028152:	45c1      	cmp	r9, r8
 8028154:	f840 3b04 	str.w	r3, [r0], #4
 8028158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802815c:	d2e8      	bcs.n	8028130 <quorem+0xb0>
 802815e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028166:	b922      	cbnz	r2, 8028172 <quorem+0xf2>
 8028168:	3b04      	subs	r3, #4
 802816a:	429d      	cmp	r5, r3
 802816c:	461a      	mov	r2, r3
 802816e:	d30a      	bcc.n	8028186 <quorem+0x106>
 8028170:	613c      	str	r4, [r7, #16]
 8028172:	4630      	mov	r0, r6
 8028174:	b003      	add	sp, #12
 8028176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802817a:	6812      	ldr	r2, [r2, #0]
 802817c:	3b04      	subs	r3, #4
 802817e:	2a00      	cmp	r2, #0
 8028180:	d1cc      	bne.n	802811c <quorem+0x9c>
 8028182:	3c01      	subs	r4, #1
 8028184:	e7c7      	b.n	8028116 <quorem+0x96>
 8028186:	6812      	ldr	r2, [r2, #0]
 8028188:	3b04      	subs	r3, #4
 802818a:	2a00      	cmp	r2, #0
 802818c:	d1f0      	bne.n	8028170 <quorem+0xf0>
 802818e:	3c01      	subs	r4, #1
 8028190:	e7eb      	b.n	802816a <quorem+0xea>
 8028192:	2000      	movs	r0, #0
 8028194:	e7ee      	b.n	8028174 <quorem+0xf4>
 8028196:	Address 0x0000000008028196 is out of bounds.


08028198 <_dtoa_r>:
 8028198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802819c:	ed2d 8b02 	vpush	{d8}
 80281a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80281a2:	b091      	sub	sp, #68	; 0x44
 80281a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80281a8:	ec59 8b10 	vmov	r8, r9, d0
 80281ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80281ae:	9106      	str	r1, [sp, #24]
 80281b0:	4606      	mov	r6, r0
 80281b2:	9208      	str	r2, [sp, #32]
 80281b4:	930c      	str	r3, [sp, #48]	; 0x30
 80281b6:	b975      	cbnz	r5, 80281d6 <_dtoa_r+0x3e>
 80281b8:	2010      	movs	r0, #16
 80281ba:	f7fd fadd 	bl	8025778 <malloc>
 80281be:	4602      	mov	r2, r0
 80281c0:	6270      	str	r0, [r6, #36]	; 0x24
 80281c2:	b920      	cbnz	r0, 80281ce <_dtoa_r+0x36>
 80281c4:	4baa      	ldr	r3, [pc, #680]	; (8028470 <_dtoa_r+0x2d8>)
 80281c6:	21ea      	movs	r1, #234	; 0xea
 80281c8:	48aa      	ldr	r0, [pc, #680]	; (8028474 <_dtoa_r+0x2dc>)
 80281ca:	f7ff ff17 	bl	8027ffc <__assert_func>
 80281ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80281d2:	6005      	str	r5, [r0, #0]
 80281d4:	60c5      	str	r5, [r0, #12]
 80281d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80281d8:	6819      	ldr	r1, [r3, #0]
 80281da:	b151      	cbz	r1, 80281f2 <_dtoa_r+0x5a>
 80281dc:	685a      	ldr	r2, [r3, #4]
 80281de:	604a      	str	r2, [r1, #4]
 80281e0:	2301      	movs	r3, #1
 80281e2:	4093      	lsls	r3, r2
 80281e4:	608b      	str	r3, [r1, #8]
 80281e6:	4630      	mov	r0, r6
 80281e8:	f000 ffde 	bl	80291a8 <_Bfree>
 80281ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80281ee:	2200      	movs	r2, #0
 80281f0:	601a      	str	r2, [r3, #0]
 80281f2:	f1b9 0300 	subs.w	r3, r9, #0
 80281f6:	bfbb      	ittet	lt
 80281f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80281fc:	9303      	strlt	r3, [sp, #12]
 80281fe:	2300      	movge	r3, #0
 8028200:	2201      	movlt	r2, #1
 8028202:	bfac      	ite	ge
 8028204:	6023      	strge	r3, [r4, #0]
 8028206:	6022      	strlt	r2, [r4, #0]
 8028208:	4b9b      	ldr	r3, [pc, #620]	; (8028478 <_dtoa_r+0x2e0>)
 802820a:	9c03      	ldr	r4, [sp, #12]
 802820c:	43a3      	bics	r3, r4
 802820e:	d11c      	bne.n	802824a <_dtoa_r+0xb2>
 8028210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028212:	f242 730f 	movw	r3, #9999	; 0x270f
 8028216:	6013      	str	r3, [r2, #0]
 8028218:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802821c:	ea53 0308 	orrs.w	r3, r3, r8
 8028220:	f000 84fd 	beq.w	8028c1e <_dtoa_r+0xa86>
 8028224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028226:	b963      	cbnz	r3, 8028242 <_dtoa_r+0xaa>
 8028228:	4b94      	ldr	r3, [pc, #592]	; (802847c <_dtoa_r+0x2e4>)
 802822a:	e01f      	b.n	802826c <_dtoa_r+0xd4>
 802822c:	4b94      	ldr	r3, [pc, #592]	; (8028480 <_dtoa_r+0x2e8>)
 802822e:	9301      	str	r3, [sp, #4]
 8028230:	3308      	adds	r3, #8
 8028232:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8028234:	6013      	str	r3, [r2, #0]
 8028236:	9801      	ldr	r0, [sp, #4]
 8028238:	b011      	add	sp, #68	; 0x44
 802823a:	ecbd 8b02 	vpop	{d8}
 802823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028242:	4b8e      	ldr	r3, [pc, #568]	; (802847c <_dtoa_r+0x2e4>)
 8028244:	9301      	str	r3, [sp, #4]
 8028246:	3303      	adds	r3, #3
 8028248:	e7f3      	b.n	8028232 <_dtoa_r+0x9a>
 802824a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802824e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028256:	d10b      	bne.n	8028270 <_dtoa_r+0xd8>
 8028258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802825a:	2301      	movs	r3, #1
 802825c:	6013      	str	r3, [r2, #0]
 802825e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028260:	2b00      	cmp	r3, #0
 8028262:	f000 84d9 	beq.w	8028c18 <_dtoa_r+0xa80>
 8028266:	4887      	ldr	r0, [pc, #540]	; (8028484 <_dtoa_r+0x2ec>)
 8028268:	6018      	str	r0, [r3, #0]
 802826a:	1e43      	subs	r3, r0, #1
 802826c:	9301      	str	r3, [sp, #4]
 802826e:	e7e2      	b.n	8028236 <_dtoa_r+0x9e>
 8028270:	a90f      	add	r1, sp, #60	; 0x3c
 8028272:	aa0e      	add	r2, sp, #56	; 0x38
 8028274:	4630      	mov	r0, r6
 8028276:	eeb0 0b48 	vmov.f64	d0, d8
 802827a:	f001 fa7d 	bl	8029778 <__d2b>
 802827e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028282:	4605      	mov	r5, r0
 8028284:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028286:	2900      	cmp	r1, #0
 8028288:	d046      	beq.n	8028318 <_dtoa_r+0x180>
 802828a:	ee18 4a90 	vmov	r4, s17
 802828e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028292:	ec53 2b18 	vmov	r2, r3, d8
 8028296:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802829a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802829e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80282a2:	2400      	movs	r4, #0
 80282a4:	ec43 2b16 	vmov	d6, r2, r3
 80282a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80282ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028458 <_dtoa_r+0x2c0>
 80282b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80282b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8028460 <_dtoa_r+0x2c8>
 80282b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80282bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028468 <_dtoa_r+0x2d0>
 80282c0:	ee07 1a90 	vmov	s15, r1
 80282c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80282c8:	eeb0 7b46 	vmov.f64	d7, d6
 80282cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80282d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80282d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80282d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282dc:	ee16 ba90 	vmov	fp, s13
 80282e0:	940a      	str	r4, [sp, #40]	; 0x28
 80282e2:	d508      	bpl.n	80282f6 <_dtoa_r+0x15e>
 80282e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80282e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80282ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282f0:	bf18      	it	ne
 80282f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80282f6:	f1bb 0f16 	cmp.w	fp, #22
 80282fa:	d82f      	bhi.n	802835c <_dtoa_r+0x1c4>
 80282fc:	4b62      	ldr	r3, [pc, #392]	; (8028488 <_dtoa_r+0x2f0>)
 80282fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028302:	ed93 7b00 	vldr	d7, [r3]
 8028306:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802830e:	d501      	bpl.n	8028314 <_dtoa_r+0x17c>
 8028310:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028314:	2300      	movs	r3, #0
 8028316:	e022      	b.n	802835e <_dtoa_r+0x1c6>
 8028318:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802831a:	4401      	add	r1, r0
 802831c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8028320:	2b20      	cmp	r3, #32
 8028322:	bfc1      	itttt	gt
 8028324:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028328:	fa04 f303 	lslgt.w	r3, r4, r3
 802832c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8028330:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028334:	bfd6      	itet	le
 8028336:	f1c3 0320 	rsble	r3, r3, #32
 802833a:	ea43 0808 	orrgt.w	r8, r3, r8
 802833e:	fa08 f803 	lslle.w	r8, r8, r3
 8028342:	ee07 8a90 	vmov	s15, r8
 8028346:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802834a:	3901      	subs	r1, #1
 802834c:	ee17 4a90 	vmov	r4, s15
 8028350:	ec53 2b17 	vmov	r2, r3, d7
 8028354:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028358:	2401      	movs	r4, #1
 802835a:	e7a3      	b.n	80282a4 <_dtoa_r+0x10c>
 802835c:	2301      	movs	r3, #1
 802835e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028360:	1a43      	subs	r3, r0, r1
 8028362:	1e5a      	subs	r2, r3, #1
 8028364:	bf45      	ittet	mi
 8028366:	f1c3 0301 	rsbmi	r3, r3, #1
 802836a:	9304      	strmi	r3, [sp, #16]
 802836c:	2300      	movpl	r3, #0
 802836e:	2300      	movmi	r3, #0
 8028370:	9205      	str	r2, [sp, #20]
 8028372:	bf54      	ite	pl
 8028374:	9304      	strpl	r3, [sp, #16]
 8028376:	9305      	strmi	r3, [sp, #20]
 8028378:	f1bb 0f00 	cmp.w	fp, #0
 802837c:	db18      	blt.n	80283b0 <_dtoa_r+0x218>
 802837e:	9b05      	ldr	r3, [sp, #20]
 8028380:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8028384:	445b      	add	r3, fp
 8028386:	9305      	str	r3, [sp, #20]
 8028388:	2300      	movs	r3, #0
 802838a:	9a06      	ldr	r2, [sp, #24]
 802838c:	2a09      	cmp	r2, #9
 802838e:	d849      	bhi.n	8028424 <_dtoa_r+0x28c>
 8028390:	2a05      	cmp	r2, #5
 8028392:	bfc4      	itt	gt
 8028394:	3a04      	subgt	r2, #4
 8028396:	9206      	strgt	r2, [sp, #24]
 8028398:	9a06      	ldr	r2, [sp, #24]
 802839a:	f1a2 0202 	sub.w	r2, r2, #2
 802839e:	bfcc      	ite	gt
 80283a0:	2400      	movgt	r4, #0
 80283a2:	2401      	movle	r4, #1
 80283a4:	2a03      	cmp	r2, #3
 80283a6:	d848      	bhi.n	802843a <_dtoa_r+0x2a2>
 80283a8:	e8df f002 	tbb	[pc, r2]
 80283ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80283b0:	9b04      	ldr	r3, [sp, #16]
 80283b2:	2200      	movs	r2, #0
 80283b4:	eba3 030b 	sub.w	r3, r3, fp
 80283b8:	9304      	str	r3, [sp, #16]
 80283ba:	9209      	str	r2, [sp, #36]	; 0x24
 80283bc:	f1cb 0300 	rsb	r3, fp, #0
 80283c0:	e7e3      	b.n	802838a <_dtoa_r+0x1f2>
 80283c2:	2200      	movs	r2, #0
 80283c4:	9207      	str	r2, [sp, #28]
 80283c6:	9a08      	ldr	r2, [sp, #32]
 80283c8:	2a00      	cmp	r2, #0
 80283ca:	dc39      	bgt.n	8028440 <_dtoa_r+0x2a8>
 80283cc:	f04f 0a01 	mov.w	sl, #1
 80283d0:	46d1      	mov	r9, sl
 80283d2:	4652      	mov	r2, sl
 80283d4:	f8cd a020 	str.w	sl, [sp, #32]
 80283d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80283da:	2100      	movs	r1, #0
 80283dc:	6079      	str	r1, [r7, #4]
 80283de:	2004      	movs	r0, #4
 80283e0:	f100 0c14 	add.w	ip, r0, #20
 80283e4:	4594      	cmp	ip, r2
 80283e6:	6879      	ldr	r1, [r7, #4]
 80283e8:	d92f      	bls.n	802844a <_dtoa_r+0x2b2>
 80283ea:	4630      	mov	r0, r6
 80283ec:	930d      	str	r3, [sp, #52]	; 0x34
 80283ee:	f000 fe9b 	bl	8029128 <_Balloc>
 80283f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80283f4:	9001      	str	r0, [sp, #4]
 80283f6:	4602      	mov	r2, r0
 80283f8:	2800      	cmp	r0, #0
 80283fa:	d149      	bne.n	8028490 <_dtoa_r+0x2f8>
 80283fc:	4b23      	ldr	r3, [pc, #140]	; (802848c <_dtoa_r+0x2f4>)
 80283fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028402:	e6e1      	b.n	80281c8 <_dtoa_r+0x30>
 8028404:	2201      	movs	r2, #1
 8028406:	e7dd      	b.n	80283c4 <_dtoa_r+0x22c>
 8028408:	2200      	movs	r2, #0
 802840a:	9207      	str	r2, [sp, #28]
 802840c:	9a08      	ldr	r2, [sp, #32]
 802840e:	eb0b 0a02 	add.w	sl, fp, r2
 8028412:	f10a 0901 	add.w	r9, sl, #1
 8028416:	464a      	mov	r2, r9
 8028418:	2a01      	cmp	r2, #1
 802841a:	bfb8      	it	lt
 802841c:	2201      	movlt	r2, #1
 802841e:	e7db      	b.n	80283d8 <_dtoa_r+0x240>
 8028420:	2201      	movs	r2, #1
 8028422:	e7f2      	b.n	802840a <_dtoa_r+0x272>
 8028424:	2401      	movs	r4, #1
 8028426:	2200      	movs	r2, #0
 8028428:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802842c:	f04f 3aff 	mov.w	sl, #4294967295
 8028430:	2100      	movs	r1, #0
 8028432:	46d1      	mov	r9, sl
 8028434:	2212      	movs	r2, #18
 8028436:	9108      	str	r1, [sp, #32]
 8028438:	e7ce      	b.n	80283d8 <_dtoa_r+0x240>
 802843a:	2201      	movs	r2, #1
 802843c:	9207      	str	r2, [sp, #28]
 802843e:	e7f5      	b.n	802842c <_dtoa_r+0x294>
 8028440:	f8dd a020 	ldr.w	sl, [sp, #32]
 8028444:	46d1      	mov	r9, sl
 8028446:	4652      	mov	r2, sl
 8028448:	e7c6      	b.n	80283d8 <_dtoa_r+0x240>
 802844a:	3101      	adds	r1, #1
 802844c:	6079      	str	r1, [r7, #4]
 802844e:	0040      	lsls	r0, r0, #1
 8028450:	e7c6      	b.n	80283e0 <_dtoa_r+0x248>
 8028452:	bf00      	nop
 8028454:	f3af 8000 	nop.w
 8028458:	636f4361 	.word	0x636f4361
 802845c:	3fd287a7 	.word	0x3fd287a7
 8028460:	8b60c8b3 	.word	0x8b60c8b3
 8028464:	3fc68a28 	.word	0x3fc68a28
 8028468:	509f79fb 	.word	0x509f79fb
 802846c:	3fd34413 	.word	0x3fd34413
 8028470:	080476e0 	.word	0x080476e0
 8028474:	08047c5e 	.word	0x08047c5e
 8028478:	7ff00000 	.word	0x7ff00000
 802847c:	08047c5a 	.word	0x08047c5a
 8028480:	08047c51 	.word	0x08047c51
 8028484:	08047e3a 	.word	0x08047e3a
 8028488:	08047d50 	.word	0x08047d50
 802848c:	08047cb9 	.word	0x08047cb9
 8028490:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8028492:	9901      	ldr	r1, [sp, #4]
 8028494:	6011      	str	r1, [r2, #0]
 8028496:	f1b9 0f0e 	cmp.w	r9, #14
 802849a:	d86c      	bhi.n	8028576 <_dtoa_r+0x3de>
 802849c:	2c00      	cmp	r4, #0
 802849e:	d06a      	beq.n	8028576 <_dtoa_r+0x3de>
 80284a0:	f1bb 0f00 	cmp.w	fp, #0
 80284a4:	f340 80a0 	ble.w	80285e8 <_dtoa_r+0x450>
 80284a8:	49c1      	ldr	r1, [pc, #772]	; (80287b0 <_dtoa_r+0x618>)
 80284aa:	f00b 020f 	and.w	r2, fp, #15
 80284ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80284b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80284b6:	ed92 7b00 	vldr	d7, [r2]
 80284ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80284be:	f000 8087 	beq.w	80285d0 <_dtoa_r+0x438>
 80284c2:	4abc      	ldr	r2, [pc, #752]	; (80287b4 <_dtoa_r+0x61c>)
 80284c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80284c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80284cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80284d0:	f001 010f 	and.w	r1, r1, #15
 80284d4:	2203      	movs	r2, #3
 80284d6:	48b7      	ldr	r0, [pc, #732]	; (80287b4 <_dtoa_r+0x61c>)
 80284d8:	2900      	cmp	r1, #0
 80284da:	d17b      	bne.n	80285d4 <_dtoa_r+0x43c>
 80284dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80284e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80284e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80284e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80284ea:	2900      	cmp	r1, #0
 80284ec:	f000 80a2 	beq.w	8028634 <_dtoa_r+0x49c>
 80284f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80284f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80284f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80284fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028500:	f140 8098 	bpl.w	8028634 <_dtoa_r+0x49c>
 8028504:	f1b9 0f00 	cmp.w	r9, #0
 8028508:	f000 8094 	beq.w	8028634 <_dtoa_r+0x49c>
 802850c:	f1ba 0f00 	cmp.w	sl, #0
 8028510:	dd2f      	ble.n	8028572 <_dtoa_r+0x3da>
 8028512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8028516:	ee27 7b06 	vmul.f64	d7, d7, d6
 802851a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802851e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8028522:	3201      	adds	r2, #1
 8028524:	4650      	mov	r0, sl
 8028526:	ed9d 6b02 	vldr	d6, [sp, #8]
 802852a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802852e:	ee07 2a90 	vmov	s15, r2
 8028532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028536:	eea7 5b06 	vfma.f64	d5, d7, d6
 802853a:	ee15 4a90 	vmov	r4, s11
 802853e:	ec52 1b15 	vmov	r1, r2, d5
 8028542:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8028546:	2800      	cmp	r0, #0
 8028548:	d177      	bne.n	802863a <_dtoa_r+0x4a2>
 802854a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802854e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8028552:	ec42 1b17 	vmov	d7, r1, r2
 8028556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802855a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802855e:	f300 8263 	bgt.w	8028a28 <_dtoa_r+0x890>
 8028562:	eeb1 7b47 	vneg.f64	d7, d7
 8028566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802856e:	f100 8258 	bmi.w	8028a22 <_dtoa_r+0x88a>
 8028572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8028576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028578:	2a00      	cmp	r2, #0
 802857a:	f2c0 811d 	blt.w	80287b8 <_dtoa_r+0x620>
 802857e:	f1bb 0f0e 	cmp.w	fp, #14
 8028582:	f300 8119 	bgt.w	80287b8 <_dtoa_r+0x620>
 8028586:	4b8a      	ldr	r3, [pc, #552]	; (80287b0 <_dtoa_r+0x618>)
 8028588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802858c:	ed93 6b00 	vldr	d6, [r3]
 8028590:	9b08      	ldr	r3, [sp, #32]
 8028592:	2b00      	cmp	r3, #0
 8028594:	f280 80b7 	bge.w	8028706 <_dtoa_r+0x56e>
 8028598:	f1b9 0f00 	cmp.w	r9, #0
 802859c:	f300 80b3 	bgt.w	8028706 <_dtoa_r+0x56e>
 80285a0:	f040 823f 	bne.w	8028a22 <_dtoa_r+0x88a>
 80285a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80285a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80285ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80285b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80285b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285b8:	464c      	mov	r4, r9
 80285ba:	464f      	mov	r7, r9
 80285bc:	f280 8215 	bge.w	80289ea <_dtoa_r+0x852>
 80285c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80285c4:	2331      	movs	r3, #49	; 0x31
 80285c6:	f808 3b01 	strb.w	r3, [r8], #1
 80285ca:	f10b 0b01 	add.w	fp, fp, #1
 80285ce:	e211      	b.n	80289f4 <_dtoa_r+0x85c>
 80285d0:	2202      	movs	r2, #2
 80285d2:	e780      	b.n	80284d6 <_dtoa_r+0x33e>
 80285d4:	07cc      	lsls	r4, r1, #31
 80285d6:	d504      	bpl.n	80285e2 <_dtoa_r+0x44a>
 80285d8:	ed90 6b00 	vldr	d6, [r0]
 80285dc:	3201      	adds	r2, #1
 80285de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80285e2:	1049      	asrs	r1, r1, #1
 80285e4:	3008      	adds	r0, #8
 80285e6:	e777      	b.n	80284d8 <_dtoa_r+0x340>
 80285e8:	d022      	beq.n	8028630 <_dtoa_r+0x498>
 80285ea:	f1cb 0100 	rsb	r1, fp, #0
 80285ee:	4a70      	ldr	r2, [pc, #448]	; (80287b0 <_dtoa_r+0x618>)
 80285f0:	f001 000f 	and.w	r0, r1, #15
 80285f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80285f8:	ed92 7b00 	vldr	d7, [r2]
 80285fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8028600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028604:	486b      	ldr	r0, [pc, #428]	; (80287b4 <_dtoa_r+0x61c>)
 8028606:	1109      	asrs	r1, r1, #4
 8028608:	2400      	movs	r4, #0
 802860a:	2202      	movs	r2, #2
 802860c:	b929      	cbnz	r1, 802861a <_dtoa_r+0x482>
 802860e:	2c00      	cmp	r4, #0
 8028610:	f43f af6a 	beq.w	80284e8 <_dtoa_r+0x350>
 8028614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028618:	e766      	b.n	80284e8 <_dtoa_r+0x350>
 802861a:	07cf      	lsls	r7, r1, #31
 802861c:	d505      	bpl.n	802862a <_dtoa_r+0x492>
 802861e:	ed90 6b00 	vldr	d6, [r0]
 8028622:	3201      	adds	r2, #1
 8028624:	2401      	movs	r4, #1
 8028626:	ee27 7b06 	vmul.f64	d7, d7, d6
 802862a:	1049      	asrs	r1, r1, #1
 802862c:	3008      	adds	r0, #8
 802862e:	e7ed      	b.n	802860c <_dtoa_r+0x474>
 8028630:	2202      	movs	r2, #2
 8028632:	e759      	b.n	80284e8 <_dtoa_r+0x350>
 8028634:	465f      	mov	r7, fp
 8028636:	4648      	mov	r0, r9
 8028638:	e775      	b.n	8028526 <_dtoa_r+0x38e>
 802863a:	ec42 1b17 	vmov	d7, r1, r2
 802863e:	4a5c      	ldr	r2, [pc, #368]	; (80287b0 <_dtoa_r+0x618>)
 8028640:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028644:	ed12 4b02 	vldr	d4, [r2, #-8]
 8028648:	9a01      	ldr	r2, [sp, #4]
 802864a:	1814      	adds	r4, r2, r0
 802864c:	9a07      	ldr	r2, [sp, #28]
 802864e:	b352      	cbz	r2, 80286a6 <_dtoa_r+0x50e>
 8028650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8028654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8028658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802865c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8028660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028664:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802866c:	ee14 2a90 	vmov	r2, s9
 8028670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028674:	3230      	adds	r2, #48	; 0x30
 8028676:	ee36 6b45 	vsub.f64	d6, d6, d5
 802867a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802867e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028682:	f808 2b01 	strb.w	r2, [r8], #1
 8028686:	d439      	bmi.n	80286fc <_dtoa_r+0x564>
 8028688:	ee32 5b46 	vsub.f64	d5, d2, d6
 802868c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028694:	d472      	bmi.n	802877c <_dtoa_r+0x5e4>
 8028696:	45a0      	cmp	r8, r4
 8028698:	f43f af6b 	beq.w	8028572 <_dtoa_r+0x3da>
 802869c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80286a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80286a4:	e7e0      	b.n	8028668 <_dtoa_r+0x4d0>
 80286a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80286aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80286ae:	4621      	mov	r1, r4
 80286b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80286b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80286b8:	ee14 2a90 	vmov	r2, s9
 80286bc:	3230      	adds	r2, #48	; 0x30
 80286be:	f808 2b01 	strb.w	r2, [r8], #1
 80286c2:	45a0      	cmp	r8, r4
 80286c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80286c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80286cc:	d118      	bne.n	8028700 <_dtoa_r+0x568>
 80286ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80286d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80286d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80286da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286de:	dc4d      	bgt.n	802877c <_dtoa_r+0x5e4>
 80286e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80286e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80286e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286ec:	f57f af41 	bpl.w	8028572 <_dtoa_r+0x3da>
 80286f0:	4688      	mov	r8, r1
 80286f2:	3901      	subs	r1, #1
 80286f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80286f8:	2b30      	cmp	r3, #48	; 0x30
 80286fa:	d0f9      	beq.n	80286f0 <_dtoa_r+0x558>
 80286fc:	46bb      	mov	fp, r7
 80286fe:	e02a      	b.n	8028756 <_dtoa_r+0x5be>
 8028700:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028704:	e7d6      	b.n	80286b4 <_dtoa_r+0x51c>
 8028706:	ed9d 7b02 	vldr	d7, [sp, #8]
 802870a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802870e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8028716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802871a:	ee15 3a10 	vmov	r3, s10
 802871e:	3330      	adds	r3, #48	; 0x30
 8028720:	f808 3b01 	strb.w	r3, [r8], #1
 8028724:	9b01      	ldr	r3, [sp, #4]
 8028726:	eba8 0303 	sub.w	r3, r8, r3
 802872a:	4599      	cmp	r9, r3
 802872c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028730:	eea3 7b46 	vfms.f64	d7, d3, d6
 8028734:	d133      	bne.n	802879e <_dtoa_r+0x606>
 8028736:	ee37 7b07 	vadd.f64	d7, d7, d7
 802873a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028742:	dc1a      	bgt.n	802877a <_dtoa_r+0x5e2>
 8028744:	eeb4 7b46 	vcmp.f64	d7, d6
 8028748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802874c:	d103      	bne.n	8028756 <_dtoa_r+0x5be>
 802874e:	ee15 3a10 	vmov	r3, s10
 8028752:	07d9      	lsls	r1, r3, #31
 8028754:	d411      	bmi.n	802877a <_dtoa_r+0x5e2>
 8028756:	4629      	mov	r1, r5
 8028758:	4630      	mov	r0, r6
 802875a:	f000 fd25 	bl	80291a8 <_Bfree>
 802875e:	2300      	movs	r3, #0
 8028760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028762:	f888 3000 	strb.w	r3, [r8]
 8028766:	f10b 0301 	add.w	r3, fp, #1
 802876a:	6013      	str	r3, [r2, #0]
 802876c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802876e:	2b00      	cmp	r3, #0
 8028770:	f43f ad61 	beq.w	8028236 <_dtoa_r+0x9e>
 8028774:	f8c3 8000 	str.w	r8, [r3]
 8028778:	e55d      	b.n	8028236 <_dtoa_r+0x9e>
 802877a:	465f      	mov	r7, fp
 802877c:	4643      	mov	r3, r8
 802877e:	4698      	mov	r8, r3
 8028780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028784:	2a39      	cmp	r2, #57	; 0x39
 8028786:	d106      	bne.n	8028796 <_dtoa_r+0x5fe>
 8028788:	9a01      	ldr	r2, [sp, #4]
 802878a:	429a      	cmp	r2, r3
 802878c:	d1f7      	bne.n	802877e <_dtoa_r+0x5e6>
 802878e:	9901      	ldr	r1, [sp, #4]
 8028790:	2230      	movs	r2, #48	; 0x30
 8028792:	3701      	adds	r7, #1
 8028794:	700a      	strb	r2, [r1, #0]
 8028796:	781a      	ldrb	r2, [r3, #0]
 8028798:	3201      	adds	r2, #1
 802879a:	701a      	strb	r2, [r3, #0]
 802879c:	e7ae      	b.n	80286fc <_dtoa_r+0x564>
 802879e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80287a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80287a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287aa:	d1b2      	bne.n	8028712 <_dtoa_r+0x57a>
 80287ac:	e7d3      	b.n	8028756 <_dtoa_r+0x5be>
 80287ae:	bf00      	nop
 80287b0:	08047d50 	.word	0x08047d50
 80287b4:	08047d28 	.word	0x08047d28
 80287b8:	9907      	ldr	r1, [sp, #28]
 80287ba:	2900      	cmp	r1, #0
 80287bc:	f000 80d0 	beq.w	8028960 <_dtoa_r+0x7c8>
 80287c0:	9906      	ldr	r1, [sp, #24]
 80287c2:	2901      	cmp	r1, #1
 80287c4:	f300 80b4 	bgt.w	8028930 <_dtoa_r+0x798>
 80287c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80287ca:	2900      	cmp	r1, #0
 80287cc:	f000 80ac 	beq.w	8028928 <_dtoa_r+0x790>
 80287d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80287d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80287d8:	461c      	mov	r4, r3
 80287da:	930a      	str	r3, [sp, #40]	; 0x28
 80287dc:	9b04      	ldr	r3, [sp, #16]
 80287de:	4413      	add	r3, r2
 80287e0:	9304      	str	r3, [sp, #16]
 80287e2:	9b05      	ldr	r3, [sp, #20]
 80287e4:	2101      	movs	r1, #1
 80287e6:	4413      	add	r3, r2
 80287e8:	4630      	mov	r0, r6
 80287ea:	9305      	str	r3, [sp, #20]
 80287ec:	f000 fd94 	bl	8029318 <__i2b>
 80287f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80287f2:	4607      	mov	r7, r0
 80287f4:	f1b8 0f00 	cmp.w	r8, #0
 80287f8:	dd0d      	ble.n	8028816 <_dtoa_r+0x67e>
 80287fa:	9a05      	ldr	r2, [sp, #20]
 80287fc:	2a00      	cmp	r2, #0
 80287fe:	dd0a      	ble.n	8028816 <_dtoa_r+0x67e>
 8028800:	4542      	cmp	r2, r8
 8028802:	9904      	ldr	r1, [sp, #16]
 8028804:	bfa8      	it	ge
 8028806:	4642      	movge	r2, r8
 8028808:	1a89      	subs	r1, r1, r2
 802880a:	9104      	str	r1, [sp, #16]
 802880c:	9905      	ldr	r1, [sp, #20]
 802880e:	eba8 0802 	sub.w	r8, r8, r2
 8028812:	1a8a      	subs	r2, r1, r2
 8028814:	9205      	str	r2, [sp, #20]
 8028816:	b303      	cbz	r3, 802885a <_dtoa_r+0x6c2>
 8028818:	9a07      	ldr	r2, [sp, #28]
 802881a:	2a00      	cmp	r2, #0
 802881c:	f000 80a5 	beq.w	802896a <_dtoa_r+0x7d2>
 8028820:	2c00      	cmp	r4, #0
 8028822:	dd13      	ble.n	802884c <_dtoa_r+0x6b4>
 8028824:	4639      	mov	r1, r7
 8028826:	4622      	mov	r2, r4
 8028828:	4630      	mov	r0, r6
 802882a:	930d      	str	r3, [sp, #52]	; 0x34
 802882c:	f000 fe34 	bl	8029498 <__pow5mult>
 8028830:	462a      	mov	r2, r5
 8028832:	4601      	mov	r1, r0
 8028834:	4607      	mov	r7, r0
 8028836:	4630      	mov	r0, r6
 8028838:	f000 fd84 	bl	8029344 <__multiply>
 802883c:	4629      	mov	r1, r5
 802883e:	900a      	str	r0, [sp, #40]	; 0x28
 8028840:	4630      	mov	r0, r6
 8028842:	f000 fcb1 	bl	80291a8 <_Bfree>
 8028846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802884a:	4615      	mov	r5, r2
 802884c:	1b1a      	subs	r2, r3, r4
 802884e:	d004      	beq.n	802885a <_dtoa_r+0x6c2>
 8028850:	4629      	mov	r1, r5
 8028852:	4630      	mov	r0, r6
 8028854:	f000 fe20 	bl	8029498 <__pow5mult>
 8028858:	4605      	mov	r5, r0
 802885a:	2101      	movs	r1, #1
 802885c:	4630      	mov	r0, r6
 802885e:	f000 fd5b 	bl	8029318 <__i2b>
 8028862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028864:	2b00      	cmp	r3, #0
 8028866:	4604      	mov	r4, r0
 8028868:	f340 8081 	ble.w	802896e <_dtoa_r+0x7d6>
 802886c:	461a      	mov	r2, r3
 802886e:	4601      	mov	r1, r0
 8028870:	4630      	mov	r0, r6
 8028872:	f000 fe11 	bl	8029498 <__pow5mult>
 8028876:	9b06      	ldr	r3, [sp, #24]
 8028878:	2b01      	cmp	r3, #1
 802887a:	4604      	mov	r4, r0
 802887c:	dd7a      	ble.n	8028974 <_dtoa_r+0x7dc>
 802887e:	2300      	movs	r3, #0
 8028880:	930a      	str	r3, [sp, #40]	; 0x28
 8028882:	6922      	ldr	r2, [r4, #16]
 8028884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028888:	6910      	ldr	r0, [r2, #16]
 802888a:	f000 fcf5 	bl	8029278 <__hi0bits>
 802888e:	f1c0 0020 	rsb	r0, r0, #32
 8028892:	9b05      	ldr	r3, [sp, #20]
 8028894:	4418      	add	r0, r3
 8028896:	f010 001f 	ands.w	r0, r0, #31
 802889a:	f000 808c 	beq.w	80289b6 <_dtoa_r+0x81e>
 802889e:	f1c0 0220 	rsb	r2, r0, #32
 80288a2:	2a04      	cmp	r2, #4
 80288a4:	f340 8085 	ble.w	80289b2 <_dtoa_r+0x81a>
 80288a8:	f1c0 001c 	rsb	r0, r0, #28
 80288ac:	9b04      	ldr	r3, [sp, #16]
 80288ae:	4403      	add	r3, r0
 80288b0:	9304      	str	r3, [sp, #16]
 80288b2:	9b05      	ldr	r3, [sp, #20]
 80288b4:	4403      	add	r3, r0
 80288b6:	4480      	add	r8, r0
 80288b8:	9305      	str	r3, [sp, #20]
 80288ba:	9b04      	ldr	r3, [sp, #16]
 80288bc:	2b00      	cmp	r3, #0
 80288be:	dd05      	ble.n	80288cc <_dtoa_r+0x734>
 80288c0:	4629      	mov	r1, r5
 80288c2:	461a      	mov	r2, r3
 80288c4:	4630      	mov	r0, r6
 80288c6:	f000 fe41 	bl	802954c <__lshift>
 80288ca:	4605      	mov	r5, r0
 80288cc:	9b05      	ldr	r3, [sp, #20]
 80288ce:	2b00      	cmp	r3, #0
 80288d0:	dd05      	ble.n	80288de <_dtoa_r+0x746>
 80288d2:	4621      	mov	r1, r4
 80288d4:	461a      	mov	r2, r3
 80288d6:	4630      	mov	r0, r6
 80288d8:	f000 fe38 	bl	802954c <__lshift>
 80288dc:	4604      	mov	r4, r0
 80288de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80288e0:	2b00      	cmp	r3, #0
 80288e2:	d06a      	beq.n	80289ba <_dtoa_r+0x822>
 80288e4:	4621      	mov	r1, r4
 80288e6:	4628      	mov	r0, r5
 80288e8:	f000 fea0 	bl	802962c <__mcmp>
 80288ec:	2800      	cmp	r0, #0
 80288ee:	da64      	bge.n	80289ba <_dtoa_r+0x822>
 80288f0:	2300      	movs	r3, #0
 80288f2:	4629      	mov	r1, r5
 80288f4:	220a      	movs	r2, #10
 80288f6:	4630      	mov	r0, r6
 80288f8:	f000 fc78 	bl	80291ec <__multadd>
 80288fc:	9b07      	ldr	r3, [sp, #28]
 80288fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028902:	4605      	mov	r5, r0
 8028904:	2b00      	cmp	r3, #0
 8028906:	f000 8191 	beq.w	8028c2c <_dtoa_r+0xa94>
 802890a:	4639      	mov	r1, r7
 802890c:	2300      	movs	r3, #0
 802890e:	220a      	movs	r2, #10
 8028910:	4630      	mov	r0, r6
 8028912:	f000 fc6b 	bl	80291ec <__multadd>
 8028916:	f1ba 0f00 	cmp.w	sl, #0
 802891a:	4607      	mov	r7, r0
 802891c:	f300 808d 	bgt.w	8028a3a <_dtoa_r+0x8a2>
 8028920:	9b06      	ldr	r3, [sp, #24]
 8028922:	2b02      	cmp	r3, #2
 8028924:	dc50      	bgt.n	80289c8 <_dtoa_r+0x830>
 8028926:	e088      	b.n	8028a3a <_dtoa_r+0x8a2>
 8028928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802892a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802892e:	e751      	b.n	80287d4 <_dtoa_r+0x63c>
 8028930:	f109 34ff 	add.w	r4, r9, #4294967295
 8028934:	42a3      	cmp	r3, r4
 8028936:	bfbf      	itttt	lt
 8028938:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 802893a:	1ae3      	sublt	r3, r4, r3
 802893c:	18d2      	addlt	r2, r2, r3
 802893e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8028940:	bfb6      	itet	lt
 8028942:	4623      	movlt	r3, r4
 8028944:	1b1c      	subge	r4, r3, r4
 8028946:	2400      	movlt	r4, #0
 8028948:	f1b9 0f00 	cmp.w	r9, #0
 802894c:	bfb5      	itete	lt
 802894e:	9a04      	ldrlt	r2, [sp, #16]
 8028950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8028954:	eba2 0809 	sublt.w	r8, r2, r9
 8028958:	464a      	movge	r2, r9
 802895a:	bfb8      	it	lt
 802895c:	2200      	movlt	r2, #0
 802895e:	e73c      	b.n	80287da <_dtoa_r+0x642>
 8028960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028964:	9f07      	ldr	r7, [sp, #28]
 8028966:	461c      	mov	r4, r3
 8028968:	e744      	b.n	80287f4 <_dtoa_r+0x65c>
 802896a:	461a      	mov	r2, r3
 802896c:	e770      	b.n	8028850 <_dtoa_r+0x6b8>
 802896e:	9b06      	ldr	r3, [sp, #24]
 8028970:	2b01      	cmp	r3, #1
 8028972:	dc18      	bgt.n	80289a6 <_dtoa_r+0x80e>
 8028974:	9b02      	ldr	r3, [sp, #8]
 8028976:	b9b3      	cbnz	r3, 80289a6 <_dtoa_r+0x80e>
 8028978:	9b03      	ldr	r3, [sp, #12]
 802897a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802897e:	b9a2      	cbnz	r2, 80289aa <_dtoa_r+0x812>
 8028980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028984:	0d12      	lsrs	r2, r2, #20
 8028986:	0512      	lsls	r2, r2, #20
 8028988:	b18a      	cbz	r2, 80289ae <_dtoa_r+0x816>
 802898a:	9b04      	ldr	r3, [sp, #16]
 802898c:	3301      	adds	r3, #1
 802898e:	9304      	str	r3, [sp, #16]
 8028990:	9b05      	ldr	r3, [sp, #20]
 8028992:	3301      	adds	r3, #1
 8028994:	9305      	str	r3, [sp, #20]
 8028996:	2301      	movs	r3, #1
 8028998:	930a      	str	r3, [sp, #40]	; 0x28
 802899a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802899c:	2b00      	cmp	r3, #0
 802899e:	f47f af70 	bne.w	8028882 <_dtoa_r+0x6ea>
 80289a2:	2001      	movs	r0, #1
 80289a4:	e775      	b.n	8028892 <_dtoa_r+0x6fa>
 80289a6:	2300      	movs	r3, #0
 80289a8:	e7f6      	b.n	8028998 <_dtoa_r+0x800>
 80289aa:	9b02      	ldr	r3, [sp, #8]
 80289ac:	e7f4      	b.n	8028998 <_dtoa_r+0x800>
 80289ae:	920a      	str	r2, [sp, #40]	; 0x28
 80289b0:	e7f3      	b.n	802899a <_dtoa_r+0x802>
 80289b2:	d082      	beq.n	80288ba <_dtoa_r+0x722>
 80289b4:	4610      	mov	r0, r2
 80289b6:	301c      	adds	r0, #28
 80289b8:	e778      	b.n	80288ac <_dtoa_r+0x714>
 80289ba:	f1b9 0f00 	cmp.w	r9, #0
 80289be:	dc37      	bgt.n	8028a30 <_dtoa_r+0x898>
 80289c0:	9b06      	ldr	r3, [sp, #24]
 80289c2:	2b02      	cmp	r3, #2
 80289c4:	dd34      	ble.n	8028a30 <_dtoa_r+0x898>
 80289c6:	46ca      	mov	sl, r9
 80289c8:	f1ba 0f00 	cmp.w	sl, #0
 80289cc:	d10d      	bne.n	80289ea <_dtoa_r+0x852>
 80289ce:	4621      	mov	r1, r4
 80289d0:	4653      	mov	r3, sl
 80289d2:	2205      	movs	r2, #5
 80289d4:	4630      	mov	r0, r6
 80289d6:	f000 fc09 	bl	80291ec <__multadd>
 80289da:	4601      	mov	r1, r0
 80289dc:	4604      	mov	r4, r0
 80289de:	4628      	mov	r0, r5
 80289e0:	f000 fe24 	bl	802962c <__mcmp>
 80289e4:	2800      	cmp	r0, #0
 80289e6:	f73f adeb 	bgt.w	80285c0 <_dtoa_r+0x428>
 80289ea:	9b08      	ldr	r3, [sp, #32]
 80289ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80289f0:	ea6f 0b03 	mvn.w	fp, r3
 80289f4:	f04f 0900 	mov.w	r9, #0
 80289f8:	4621      	mov	r1, r4
 80289fa:	4630      	mov	r0, r6
 80289fc:	f000 fbd4 	bl	80291a8 <_Bfree>
 8028a00:	2f00      	cmp	r7, #0
 8028a02:	f43f aea8 	beq.w	8028756 <_dtoa_r+0x5be>
 8028a06:	f1b9 0f00 	cmp.w	r9, #0
 8028a0a:	d005      	beq.n	8028a18 <_dtoa_r+0x880>
 8028a0c:	45b9      	cmp	r9, r7
 8028a0e:	d003      	beq.n	8028a18 <_dtoa_r+0x880>
 8028a10:	4649      	mov	r1, r9
 8028a12:	4630      	mov	r0, r6
 8028a14:	f000 fbc8 	bl	80291a8 <_Bfree>
 8028a18:	4639      	mov	r1, r7
 8028a1a:	4630      	mov	r0, r6
 8028a1c:	f000 fbc4 	bl	80291a8 <_Bfree>
 8028a20:	e699      	b.n	8028756 <_dtoa_r+0x5be>
 8028a22:	2400      	movs	r4, #0
 8028a24:	4627      	mov	r7, r4
 8028a26:	e7e0      	b.n	80289ea <_dtoa_r+0x852>
 8028a28:	46bb      	mov	fp, r7
 8028a2a:	4604      	mov	r4, r0
 8028a2c:	4607      	mov	r7, r0
 8028a2e:	e5c7      	b.n	80285c0 <_dtoa_r+0x428>
 8028a30:	9b07      	ldr	r3, [sp, #28]
 8028a32:	46ca      	mov	sl, r9
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	f000 8100 	beq.w	8028c3a <_dtoa_r+0xaa2>
 8028a3a:	f1b8 0f00 	cmp.w	r8, #0
 8028a3e:	dd05      	ble.n	8028a4c <_dtoa_r+0x8b4>
 8028a40:	4639      	mov	r1, r7
 8028a42:	4642      	mov	r2, r8
 8028a44:	4630      	mov	r0, r6
 8028a46:	f000 fd81 	bl	802954c <__lshift>
 8028a4a:	4607      	mov	r7, r0
 8028a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d05d      	beq.n	8028b0e <_dtoa_r+0x976>
 8028a52:	6879      	ldr	r1, [r7, #4]
 8028a54:	4630      	mov	r0, r6
 8028a56:	f000 fb67 	bl	8029128 <_Balloc>
 8028a5a:	4680      	mov	r8, r0
 8028a5c:	b928      	cbnz	r0, 8028a6a <_dtoa_r+0x8d2>
 8028a5e:	4b82      	ldr	r3, [pc, #520]	; (8028c68 <_dtoa_r+0xad0>)
 8028a60:	4602      	mov	r2, r0
 8028a62:	f240 21ea 	movw	r1, #746	; 0x2ea
 8028a66:	f7ff bbaf 	b.w	80281c8 <_dtoa_r+0x30>
 8028a6a:	693a      	ldr	r2, [r7, #16]
 8028a6c:	3202      	adds	r2, #2
 8028a6e:	0092      	lsls	r2, r2, #2
 8028a70:	f107 010c 	add.w	r1, r7, #12
 8028a74:	300c      	adds	r0, #12
 8028a76:	f7fc fe9f 	bl	80257b8 <memcpy>
 8028a7a:	2201      	movs	r2, #1
 8028a7c:	4641      	mov	r1, r8
 8028a7e:	4630      	mov	r0, r6
 8028a80:	f000 fd64 	bl	802954c <__lshift>
 8028a84:	9b01      	ldr	r3, [sp, #4]
 8028a86:	3301      	adds	r3, #1
 8028a88:	9304      	str	r3, [sp, #16]
 8028a8a:	9b01      	ldr	r3, [sp, #4]
 8028a8c:	4453      	add	r3, sl
 8028a8e:	9308      	str	r3, [sp, #32]
 8028a90:	9b02      	ldr	r3, [sp, #8]
 8028a92:	f003 0301 	and.w	r3, r3, #1
 8028a96:	46b9      	mov	r9, r7
 8028a98:	9307      	str	r3, [sp, #28]
 8028a9a:	4607      	mov	r7, r0
 8028a9c:	9b04      	ldr	r3, [sp, #16]
 8028a9e:	4621      	mov	r1, r4
 8028aa0:	3b01      	subs	r3, #1
 8028aa2:	4628      	mov	r0, r5
 8028aa4:	9302      	str	r3, [sp, #8]
 8028aa6:	f7ff faeb 	bl	8028080 <quorem>
 8028aaa:	4603      	mov	r3, r0
 8028aac:	3330      	adds	r3, #48	; 0x30
 8028aae:	9005      	str	r0, [sp, #20]
 8028ab0:	4649      	mov	r1, r9
 8028ab2:	4628      	mov	r0, r5
 8028ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8028ab6:	f000 fdb9 	bl	802962c <__mcmp>
 8028aba:	463a      	mov	r2, r7
 8028abc:	4682      	mov	sl, r0
 8028abe:	4621      	mov	r1, r4
 8028ac0:	4630      	mov	r0, r6
 8028ac2:	f000 fdcf 	bl	8029664 <__mdiff>
 8028ac6:	68c2      	ldr	r2, [r0, #12]
 8028ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028aca:	4680      	mov	r8, r0
 8028acc:	bb0a      	cbnz	r2, 8028b12 <_dtoa_r+0x97a>
 8028ace:	4601      	mov	r1, r0
 8028ad0:	4628      	mov	r0, r5
 8028ad2:	f000 fdab 	bl	802962c <__mcmp>
 8028ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ad8:	4602      	mov	r2, r0
 8028ada:	4641      	mov	r1, r8
 8028adc:	4630      	mov	r0, r6
 8028ade:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8028ae2:	f000 fb61 	bl	80291a8 <_Bfree>
 8028ae6:	9b06      	ldr	r3, [sp, #24]
 8028ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028aea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028aee:	ea43 0102 	orr.w	r1, r3, r2
 8028af2:	9b07      	ldr	r3, [sp, #28]
 8028af4:	430b      	orrs	r3, r1
 8028af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028af8:	d10d      	bne.n	8028b16 <_dtoa_r+0x97e>
 8028afa:	2b39      	cmp	r3, #57	; 0x39
 8028afc:	d029      	beq.n	8028b52 <_dtoa_r+0x9ba>
 8028afe:	f1ba 0f00 	cmp.w	sl, #0
 8028b02:	dd01      	ble.n	8028b08 <_dtoa_r+0x970>
 8028b04:	9b05      	ldr	r3, [sp, #20]
 8028b06:	3331      	adds	r3, #49	; 0x31
 8028b08:	9a02      	ldr	r2, [sp, #8]
 8028b0a:	7013      	strb	r3, [r2, #0]
 8028b0c:	e774      	b.n	80289f8 <_dtoa_r+0x860>
 8028b0e:	4638      	mov	r0, r7
 8028b10:	e7b8      	b.n	8028a84 <_dtoa_r+0x8ec>
 8028b12:	2201      	movs	r2, #1
 8028b14:	e7e1      	b.n	8028ada <_dtoa_r+0x942>
 8028b16:	f1ba 0f00 	cmp.w	sl, #0
 8028b1a:	db06      	blt.n	8028b2a <_dtoa_r+0x992>
 8028b1c:	9906      	ldr	r1, [sp, #24]
 8028b1e:	ea41 0a0a 	orr.w	sl, r1, sl
 8028b22:	9907      	ldr	r1, [sp, #28]
 8028b24:	ea5a 0101 	orrs.w	r1, sl, r1
 8028b28:	d120      	bne.n	8028b6c <_dtoa_r+0x9d4>
 8028b2a:	2a00      	cmp	r2, #0
 8028b2c:	ddec      	ble.n	8028b08 <_dtoa_r+0x970>
 8028b2e:	4629      	mov	r1, r5
 8028b30:	2201      	movs	r2, #1
 8028b32:	4630      	mov	r0, r6
 8028b34:	9304      	str	r3, [sp, #16]
 8028b36:	f000 fd09 	bl	802954c <__lshift>
 8028b3a:	4621      	mov	r1, r4
 8028b3c:	4605      	mov	r5, r0
 8028b3e:	f000 fd75 	bl	802962c <__mcmp>
 8028b42:	2800      	cmp	r0, #0
 8028b44:	9b04      	ldr	r3, [sp, #16]
 8028b46:	dc02      	bgt.n	8028b4e <_dtoa_r+0x9b6>
 8028b48:	d1de      	bne.n	8028b08 <_dtoa_r+0x970>
 8028b4a:	07da      	lsls	r2, r3, #31
 8028b4c:	d5dc      	bpl.n	8028b08 <_dtoa_r+0x970>
 8028b4e:	2b39      	cmp	r3, #57	; 0x39
 8028b50:	d1d8      	bne.n	8028b04 <_dtoa_r+0x96c>
 8028b52:	9a02      	ldr	r2, [sp, #8]
 8028b54:	2339      	movs	r3, #57	; 0x39
 8028b56:	7013      	strb	r3, [r2, #0]
 8028b58:	4643      	mov	r3, r8
 8028b5a:	4698      	mov	r8, r3
 8028b5c:	3b01      	subs	r3, #1
 8028b5e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028b62:	2a39      	cmp	r2, #57	; 0x39
 8028b64:	d051      	beq.n	8028c0a <_dtoa_r+0xa72>
 8028b66:	3201      	adds	r2, #1
 8028b68:	701a      	strb	r2, [r3, #0]
 8028b6a:	e745      	b.n	80289f8 <_dtoa_r+0x860>
 8028b6c:	2a00      	cmp	r2, #0
 8028b6e:	dd03      	ble.n	8028b78 <_dtoa_r+0x9e0>
 8028b70:	2b39      	cmp	r3, #57	; 0x39
 8028b72:	d0ee      	beq.n	8028b52 <_dtoa_r+0x9ba>
 8028b74:	3301      	adds	r3, #1
 8028b76:	e7c7      	b.n	8028b08 <_dtoa_r+0x970>
 8028b78:	9a04      	ldr	r2, [sp, #16]
 8028b7a:	9908      	ldr	r1, [sp, #32]
 8028b7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028b80:	428a      	cmp	r2, r1
 8028b82:	d02b      	beq.n	8028bdc <_dtoa_r+0xa44>
 8028b84:	4629      	mov	r1, r5
 8028b86:	2300      	movs	r3, #0
 8028b88:	220a      	movs	r2, #10
 8028b8a:	4630      	mov	r0, r6
 8028b8c:	f000 fb2e 	bl	80291ec <__multadd>
 8028b90:	45b9      	cmp	r9, r7
 8028b92:	4605      	mov	r5, r0
 8028b94:	f04f 0300 	mov.w	r3, #0
 8028b98:	f04f 020a 	mov.w	r2, #10
 8028b9c:	4649      	mov	r1, r9
 8028b9e:	4630      	mov	r0, r6
 8028ba0:	d107      	bne.n	8028bb2 <_dtoa_r+0xa1a>
 8028ba2:	f000 fb23 	bl	80291ec <__multadd>
 8028ba6:	4681      	mov	r9, r0
 8028ba8:	4607      	mov	r7, r0
 8028baa:	9b04      	ldr	r3, [sp, #16]
 8028bac:	3301      	adds	r3, #1
 8028bae:	9304      	str	r3, [sp, #16]
 8028bb0:	e774      	b.n	8028a9c <_dtoa_r+0x904>
 8028bb2:	f000 fb1b 	bl	80291ec <__multadd>
 8028bb6:	4639      	mov	r1, r7
 8028bb8:	4681      	mov	r9, r0
 8028bba:	2300      	movs	r3, #0
 8028bbc:	220a      	movs	r2, #10
 8028bbe:	4630      	mov	r0, r6
 8028bc0:	f000 fb14 	bl	80291ec <__multadd>
 8028bc4:	4607      	mov	r7, r0
 8028bc6:	e7f0      	b.n	8028baa <_dtoa_r+0xa12>
 8028bc8:	f1ba 0f00 	cmp.w	sl, #0
 8028bcc:	9a01      	ldr	r2, [sp, #4]
 8028bce:	bfcc      	ite	gt
 8028bd0:	46d0      	movgt	r8, sl
 8028bd2:	f04f 0801 	movle.w	r8, #1
 8028bd6:	4490      	add	r8, r2
 8028bd8:	f04f 0900 	mov.w	r9, #0
 8028bdc:	4629      	mov	r1, r5
 8028bde:	2201      	movs	r2, #1
 8028be0:	4630      	mov	r0, r6
 8028be2:	9302      	str	r3, [sp, #8]
 8028be4:	f000 fcb2 	bl	802954c <__lshift>
 8028be8:	4621      	mov	r1, r4
 8028bea:	4605      	mov	r5, r0
 8028bec:	f000 fd1e 	bl	802962c <__mcmp>
 8028bf0:	2800      	cmp	r0, #0
 8028bf2:	dcb1      	bgt.n	8028b58 <_dtoa_r+0x9c0>
 8028bf4:	d102      	bne.n	8028bfc <_dtoa_r+0xa64>
 8028bf6:	9b02      	ldr	r3, [sp, #8]
 8028bf8:	07db      	lsls	r3, r3, #31
 8028bfa:	d4ad      	bmi.n	8028b58 <_dtoa_r+0x9c0>
 8028bfc:	4643      	mov	r3, r8
 8028bfe:	4698      	mov	r8, r3
 8028c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028c04:	2a30      	cmp	r2, #48	; 0x30
 8028c06:	d0fa      	beq.n	8028bfe <_dtoa_r+0xa66>
 8028c08:	e6f6      	b.n	80289f8 <_dtoa_r+0x860>
 8028c0a:	9a01      	ldr	r2, [sp, #4]
 8028c0c:	429a      	cmp	r2, r3
 8028c0e:	d1a4      	bne.n	8028b5a <_dtoa_r+0x9c2>
 8028c10:	f10b 0b01 	add.w	fp, fp, #1
 8028c14:	2331      	movs	r3, #49	; 0x31
 8028c16:	e778      	b.n	8028b0a <_dtoa_r+0x972>
 8028c18:	4b14      	ldr	r3, [pc, #80]	; (8028c6c <_dtoa_r+0xad4>)
 8028c1a:	f7ff bb27 	b.w	802826c <_dtoa_r+0xd4>
 8028c1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028c20:	2b00      	cmp	r3, #0
 8028c22:	f47f ab03 	bne.w	802822c <_dtoa_r+0x94>
 8028c26:	4b12      	ldr	r3, [pc, #72]	; (8028c70 <_dtoa_r+0xad8>)
 8028c28:	f7ff bb20 	b.w	802826c <_dtoa_r+0xd4>
 8028c2c:	f1ba 0f00 	cmp.w	sl, #0
 8028c30:	dc03      	bgt.n	8028c3a <_dtoa_r+0xaa2>
 8028c32:	9b06      	ldr	r3, [sp, #24]
 8028c34:	2b02      	cmp	r3, #2
 8028c36:	f73f aec7 	bgt.w	80289c8 <_dtoa_r+0x830>
 8028c3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028c3e:	4621      	mov	r1, r4
 8028c40:	4628      	mov	r0, r5
 8028c42:	f7ff fa1d 	bl	8028080 <quorem>
 8028c46:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028c4a:	f808 3b01 	strb.w	r3, [r8], #1
 8028c4e:	9a01      	ldr	r2, [sp, #4]
 8028c50:	eba8 0202 	sub.w	r2, r8, r2
 8028c54:	4592      	cmp	sl, r2
 8028c56:	ddb7      	ble.n	8028bc8 <_dtoa_r+0xa30>
 8028c58:	4629      	mov	r1, r5
 8028c5a:	2300      	movs	r3, #0
 8028c5c:	220a      	movs	r2, #10
 8028c5e:	4630      	mov	r0, r6
 8028c60:	f000 fac4 	bl	80291ec <__multadd>
 8028c64:	4605      	mov	r5, r0
 8028c66:	e7ea      	b.n	8028c3e <_dtoa_r+0xaa6>
 8028c68:	08047cb9 	.word	0x08047cb9
 8028c6c:	08047e39 	.word	0x08047e39
 8028c70:	08047c51 	.word	0x08047c51

08028c74 <__errno>:
 8028c74:	4b01      	ldr	r3, [pc, #4]	; (8028c7c <__errno+0x8>)
 8028c76:	6818      	ldr	r0, [r3, #0]
 8028c78:	4770      	bx	lr
 8028c7a:	bf00      	nop
 8028c7c:	200004c4 	.word	0x200004c4

08028c80 <__sflush_r>:
 8028c80:	898a      	ldrh	r2, [r1, #12]
 8028c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c86:	4605      	mov	r5, r0
 8028c88:	0710      	lsls	r0, r2, #28
 8028c8a:	460c      	mov	r4, r1
 8028c8c:	d458      	bmi.n	8028d40 <__sflush_r+0xc0>
 8028c8e:	684b      	ldr	r3, [r1, #4]
 8028c90:	2b00      	cmp	r3, #0
 8028c92:	dc05      	bgt.n	8028ca0 <__sflush_r+0x20>
 8028c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028c96:	2b00      	cmp	r3, #0
 8028c98:	dc02      	bgt.n	8028ca0 <__sflush_r+0x20>
 8028c9a:	2000      	movs	r0, #0
 8028c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028ca2:	2e00      	cmp	r6, #0
 8028ca4:	d0f9      	beq.n	8028c9a <__sflush_r+0x1a>
 8028ca6:	2300      	movs	r3, #0
 8028ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028cac:	682f      	ldr	r7, [r5, #0]
 8028cae:	602b      	str	r3, [r5, #0]
 8028cb0:	d032      	beq.n	8028d18 <__sflush_r+0x98>
 8028cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028cb4:	89a3      	ldrh	r3, [r4, #12]
 8028cb6:	075a      	lsls	r2, r3, #29
 8028cb8:	d505      	bpl.n	8028cc6 <__sflush_r+0x46>
 8028cba:	6863      	ldr	r3, [r4, #4]
 8028cbc:	1ac0      	subs	r0, r0, r3
 8028cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028cc0:	b10b      	cbz	r3, 8028cc6 <__sflush_r+0x46>
 8028cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028cc4:	1ac0      	subs	r0, r0, r3
 8028cc6:	2300      	movs	r3, #0
 8028cc8:	4602      	mov	r2, r0
 8028cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028ccc:	6a21      	ldr	r1, [r4, #32]
 8028cce:	4628      	mov	r0, r5
 8028cd0:	47b0      	blx	r6
 8028cd2:	1c43      	adds	r3, r0, #1
 8028cd4:	89a3      	ldrh	r3, [r4, #12]
 8028cd6:	d106      	bne.n	8028ce6 <__sflush_r+0x66>
 8028cd8:	6829      	ldr	r1, [r5, #0]
 8028cda:	291d      	cmp	r1, #29
 8028cdc:	d82c      	bhi.n	8028d38 <__sflush_r+0xb8>
 8028cde:	4a2a      	ldr	r2, [pc, #168]	; (8028d88 <__sflush_r+0x108>)
 8028ce0:	40ca      	lsrs	r2, r1
 8028ce2:	07d6      	lsls	r6, r2, #31
 8028ce4:	d528      	bpl.n	8028d38 <__sflush_r+0xb8>
 8028ce6:	2200      	movs	r2, #0
 8028ce8:	6062      	str	r2, [r4, #4]
 8028cea:	04d9      	lsls	r1, r3, #19
 8028cec:	6922      	ldr	r2, [r4, #16]
 8028cee:	6022      	str	r2, [r4, #0]
 8028cf0:	d504      	bpl.n	8028cfc <__sflush_r+0x7c>
 8028cf2:	1c42      	adds	r2, r0, #1
 8028cf4:	d101      	bne.n	8028cfa <__sflush_r+0x7a>
 8028cf6:	682b      	ldr	r3, [r5, #0]
 8028cf8:	b903      	cbnz	r3, 8028cfc <__sflush_r+0x7c>
 8028cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8028cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028cfe:	602f      	str	r7, [r5, #0]
 8028d00:	2900      	cmp	r1, #0
 8028d02:	d0ca      	beq.n	8028c9a <__sflush_r+0x1a>
 8028d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d08:	4299      	cmp	r1, r3
 8028d0a:	d002      	beq.n	8028d12 <__sflush_r+0x92>
 8028d0c:	4628      	mov	r0, r5
 8028d0e:	f7fc fff5 	bl	8025cfc <_free_r>
 8028d12:	2000      	movs	r0, #0
 8028d14:	6360      	str	r0, [r4, #52]	; 0x34
 8028d16:	e7c1      	b.n	8028c9c <__sflush_r+0x1c>
 8028d18:	6a21      	ldr	r1, [r4, #32]
 8028d1a:	2301      	movs	r3, #1
 8028d1c:	4628      	mov	r0, r5
 8028d1e:	47b0      	blx	r6
 8028d20:	1c41      	adds	r1, r0, #1
 8028d22:	d1c7      	bne.n	8028cb4 <__sflush_r+0x34>
 8028d24:	682b      	ldr	r3, [r5, #0]
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	d0c4      	beq.n	8028cb4 <__sflush_r+0x34>
 8028d2a:	2b1d      	cmp	r3, #29
 8028d2c:	d001      	beq.n	8028d32 <__sflush_r+0xb2>
 8028d2e:	2b16      	cmp	r3, #22
 8028d30:	d101      	bne.n	8028d36 <__sflush_r+0xb6>
 8028d32:	602f      	str	r7, [r5, #0]
 8028d34:	e7b1      	b.n	8028c9a <__sflush_r+0x1a>
 8028d36:	89a3      	ldrh	r3, [r4, #12]
 8028d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d3c:	81a3      	strh	r3, [r4, #12]
 8028d3e:	e7ad      	b.n	8028c9c <__sflush_r+0x1c>
 8028d40:	690f      	ldr	r7, [r1, #16]
 8028d42:	2f00      	cmp	r7, #0
 8028d44:	d0a9      	beq.n	8028c9a <__sflush_r+0x1a>
 8028d46:	0793      	lsls	r3, r2, #30
 8028d48:	680e      	ldr	r6, [r1, #0]
 8028d4a:	bf08      	it	eq
 8028d4c:	694b      	ldreq	r3, [r1, #20]
 8028d4e:	600f      	str	r7, [r1, #0]
 8028d50:	bf18      	it	ne
 8028d52:	2300      	movne	r3, #0
 8028d54:	eba6 0807 	sub.w	r8, r6, r7
 8028d58:	608b      	str	r3, [r1, #8]
 8028d5a:	f1b8 0f00 	cmp.w	r8, #0
 8028d5e:	dd9c      	ble.n	8028c9a <__sflush_r+0x1a>
 8028d60:	6a21      	ldr	r1, [r4, #32]
 8028d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028d64:	4643      	mov	r3, r8
 8028d66:	463a      	mov	r2, r7
 8028d68:	4628      	mov	r0, r5
 8028d6a:	47b0      	blx	r6
 8028d6c:	2800      	cmp	r0, #0
 8028d6e:	dc06      	bgt.n	8028d7e <__sflush_r+0xfe>
 8028d70:	89a3      	ldrh	r3, [r4, #12]
 8028d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d76:	81a3      	strh	r3, [r4, #12]
 8028d78:	f04f 30ff 	mov.w	r0, #4294967295
 8028d7c:	e78e      	b.n	8028c9c <__sflush_r+0x1c>
 8028d7e:	4407      	add	r7, r0
 8028d80:	eba8 0800 	sub.w	r8, r8, r0
 8028d84:	e7e9      	b.n	8028d5a <__sflush_r+0xda>
 8028d86:	bf00      	nop
 8028d88:	20400001 	.word	0x20400001

08028d8c <_fflush_r>:
 8028d8c:	b538      	push	{r3, r4, r5, lr}
 8028d8e:	690b      	ldr	r3, [r1, #16]
 8028d90:	4605      	mov	r5, r0
 8028d92:	460c      	mov	r4, r1
 8028d94:	b913      	cbnz	r3, 8028d9c <_fflush_r+0x10>
 8028d96:	2500      	movs	r5, #0
 8028d98:	4628      	mov	r0, r5
 8028d9a:	bd38      	pop	{r3, r4, r5, pc}
 8028d9c:	b118      	cbz	r0, 8028da6 <_fflush_r+0x1a>
 8028d9e:	6983      	ldr	r3, [r0, #24]
 8028da0:	b90b      	cbnz	r3, 8028da6 <_fflush_r+0x1a>
 8028da2:	f7fc fb0f 	bl	80253c4 <__sinit>
 8028da6:	4b14      	ldr	r3, [pc, #80]	; (8028df8 <_fflush_r+0x6c>)
 8028da8:	429c      	cmp	r4, r3
 8028daa:	d11b      	bne.n	8028de4 <_fflush_r+0x58>
 8028dac:	686c      	ldr	r4, [r5, #4]
 8028dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	d0ef      	beq.n	8028d96 <_fflush_r+0xa>
 8028db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028db8:	07d0      	lsls	r0, r2, #31
 8028dba:	d404      	bmi.n	8028dc6 <_fflush_r+0x3a>
 8028dbc:	0599      	lsls	r1, r3, #22
 8028dbe:	d402      	bmi.n	8028dc6 <_fflush_r+0x3a>
 8028dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028dc2:	f7fc fcd5 	bl	8025770 <__retarget_lock_acquire_recursive>
 8028dc6:	4628      	mov	r0, r5
 8028dc8:	4621      	mov	r1, r4
 8028dca:	f7ff ff59 	bl	8028c80 <__sflush_r>
 8028dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028dd0:	07da      	lsls	r2, r3, #31
 8028dd2:	4605      	mov	r5, r0
 8028dd4:	d4e0      	bmi.n	8028d98 <_fflush_r+0xc>
 8028dd6:	89a3      	ldrh	r3, [r4, #12]
 8028dd8:	059b      	lsls	r3, r3, #22
 8028dda:	d4dd      	bmi.n	8028d98 <_fflush_r+0xc>
 8028ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028dde:	f7fc fcc9 	bl	8025774 <__retarget_lock_release_recursive>
 8028de2:	e7d9      	b.n	8028d98 <_fflush_r+0xc>
 8028de4:	4b05      	ldr	r3, [pc, #20]	; (8028dfc <_fflush_r+0x70>)
 8028de6:	429c      	cmp	r4, r3
 8028de8:	d101      	bne.n	8028dee <_fflush_r+0x62>
 8028dea:	68ac      	ldr	r4, [r5, #8]
 8028dec:	e7df      	b.n	8028dae <_fflush_r+0x22>
 8028dee:	4b04      	ldr	r3, [pc, #16]	; (8028e00 <_fflush_r+0x74>)
 8028df0:	429c      	cmp	r4, r3
 8028df2:	bf08      	it	eq
 8028df4:	68ec      	ldreq	r4, [r5, #12]
 8028df6:	e7da      	b.n	8028dae <_fflush_r+0x22>
 8028df8:	0804769c 	.word	0x0804769c
 8028dfc:	080476bc 	.word	0x080476bc
 8028e00:	0804767c 	.word	0x0804767c

08028e04 <fiprintf>:
 8028e04:	b40e      	push	{r1, r2, r3}
 8028e06:	b503      	push	{r0, r1, lr}
 8028e08:	4601      	mov	r1, r0
 8028e0a:	ab03      	add	r3, sp, #12
 8028e0c:	4805      	ldr	r0, [pc, #20]	; (8028e24 <fiprintf+0x20>)
 8028e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e12:	6800      	ldr	r0, [r0, #0]
 8028e14:	9301      	str	r3, [sp, #4]
 8028e16:	f001 f879 	bl	8029f0c <_vfiprintf_r>
 8028e1a:	b002      	add	sp, #8
 8028e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8028e20:	b003      	add	sp, #12
 8028e22:	4770      	bx	lr
 8028e24:	200004c4 	.word	0x200004c4

08028e28 <_findenv_r>:
 8028e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e2c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8028e9c <_findenv_r+0x74>
 8028e30:	4607      	mov	r7, r0
 8028e32:	4689      	mov	r9, r1
 8028e34:	4616      	mov	r6, r2
 8028e36:	f001 fbe9 	bl	802a60c <__env_lock>
 8028e3a:	f8da 4000 	ldr.w	r4, [sl]
 8028e3e:	b134      	cbz	r4, 8028e4e <_findenv_r+0x26>
 8028e40:	464b      	mov	r3, r9
 8028e42:	4698      	mov	r8, r3
 8028e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028e48:	b13a      	cbz	r2, 8028e5a <_findenv_r+0x32>
 8028e4a:	2a3d      	cmp	r2, #61	; 0x3d
 8028e4c:	d1f9      	bne.n	8028e42 <_findenv_r+0x1a>
 8028e4e:	4638      	mov	r0, r7
 8028e50:	f001 fbe2 	bl	802a618 <__env_unlock>
 8028e54:	2000      	movs	r0, #0
 8028e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e5a:	eba8 0809 	sub.w	r8, r8, r9
 8028e5e:	46a3      	mov	fp, r4
 8028e60:	f854 0b04 	ldr.w	r0, [r4], #4
 8028e64:	2800      	cmp	r0, #0
 8028e66:	d0f2      	beq.n	8028e4e <_findenv_r+0x26>
 8028e68:	4642      	mov	r2, r8
 8028e6a:	4649      	mov	r1, r9
 8028e6c:	f7fe fc4c 	bl	8027708 <strncmp>
 8028e70:	2800      	cmp	r0, #0
 8028e72:	d1f4      	bne.n	8028e5e <_findenv_r+0x36>
 8028e74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8028e78:	eb03 0508 	add.w	r5, r3, r8
 8028e7c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028e80:	2b3d      	cmp	r3, #61	; 0x3d
 8028e82:	d1ec      	bne.n	8028e5e <_findenv_r+0x36>
 8028e84:	f8da 3000 	ldr.w	r3, [sl]
 8028e88:	ebab 0303 	sub.w	r3, fp, r3
 8028e8c:	109b      	asrs	r3, r3, #2
 8028e8e:	4638      	mov	r0, r7
 8028e90:	6033      	str	r3, [r6, #0]
 8028e92:	f001 fbc1 	bl	802a618 <__env_unlock>
 8028e96:	1c68      	adds	r0, r5, #1
 8028e98:	e7dd      	b.n	8028e56 <_findenv_r+0x2e>
 8028e9a:	bf00      	nop
 8028e9c:	200002b4 	.word	0x200002b4

08028ea0 <_getenv_r>:
 8028ea0:	b507      	push	{r0, r1, r2, lr}
 8028ea2:	aa01      	add	r2, sp, #4
 8028ea4:	f7ff ffc0 	bl	8028e28 <_findenv_r>
 8028ea8:	b003      	add	sp, #12
 8028eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8028eae:	Address 0x0000000008028eae is out of bounds.


08028eb0 <__gettzinfo>:
 8028eb0:	4800      	ldr	r0, [pc, #0]	; (8028eb4 <__gettzinfo+0x4>)
 8028eb2:	4770      	bx	lr
 8028eb4:	20000530 	.word	0x20000530

08028eb8 <gmtime_r>:
 8028eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ebc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8028ec0:	460c      	mov	r4, r1
 8028ec2:	4a4f      	ldr	r2, [pc, #316]	; (8029000 <gmtime_r+0x148>)
 8028ec4:	2300      	movs	r3, #0
 8028ec6:	4630      	mov	r0, r6
 8028ec8:	4639      	mov	r1, r7
 8028eca:	f7d7 fa21 	bl	8000310 <__aeabi_ldivmod>
 8028ece:	4639      	mov	r1, r7
 8028ed0:	4605      	mov	r5, r0
 8028ed2:	4a4b      	ldr	r2, [pc, #300]	; (8029000 <gmtime_r+0x148>)
 8028ed4:	4630      	mov	r0, r6
 8028ed6:	2300      	movs	r3, #0
 8028ed8:	f7d7 fa1a 	bl	8000310 <__aeabi_ldivmod>
 8028edc:	2a00      	cmp	r2, #0
 8028ede:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8028ee2:	bfb7      	itett	lt
 8028ee4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8028ee8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8028eec:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8028ef0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8028ef4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8028ef8:	fbb2 f1f0 	udiv	r1, r2, r0
 8028efc:	fb00 2211 	mls	r2, r0, r1, r2
 8028f00:	203c      	movs	r0, #60	; 0x3c
 8028f02:	60a1      	str	r1, [r4, #8]
 8028f04:	fbb2 f1f0 	udiv	r1, r2, r0
 8028f08:	fb00 2211 	mls	r2, r0, r1, r2
 8028f0c:	6061      	str	r1, [r4, #4]
 8028f0e:	6022      	str	r2, [r4, #0]
 8028f10:	2107      	movs	r1, #7
 8028f12:	1cda      	adds	r2, r3, #3
 8028f14:	fb92 f1f1 	sdiv	r1, r2, r1
 8028f18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8028f1c:	1a52      	subs	r2, r2, r1
 8028f1e:	bf48      	it	mi
 8028f20:	3207      	addmi	r2, #7
 8028f22:	4d38      	ldr	r5, [pc, #224]	; (8029004 <gmtime_r+0x14c>)
 8028f24:	4838      	ldr	r0, [pc, #224]	; (8029008 <gmtime_r+0x150>)
 8028f26:	61a2      	str	r2, [r4, #24]
 8028f28:	2b00      	cmp	r3, #0
 8028f2a:	bfb7      	itett	lt
 8028f2c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8028f30:	fb93 f5f5 	sdivge	r5, r3, r5
 8028f34:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8028f38:	fb92 f5f5 	sdivlt	r5, r2, r5
 8028f3c:	fb00 3005 	mla	r0, r0, r5, r3
 8028f40:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8028f44:	fbb0 f2f2 	udiv	r2, r0, r2
 8028f48:	4402      	add	r2, r0
 8028f4a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8028f4e:	fbb0 f1f3 	udiv	r1, r0, r3
 8028f52:	1a52      	subs	r2, r2, r1
 8028f54:	f240 1c6d 	movw	ip, #365	; 0x16d
 8028f58:	492c      	ldr	r1, [pc, #176]	; (802900c <gmtime_r+0x154>)
 8028f5a:	fbb0 f1f1 	udiv	r1, r0, r1
 8028f5e:	2764      	movs	r7, #100	; 0x64
 8028f60:	1a52      	subs	r2, r2, r1
 8028f62:	fbb2 f1fc 	udiv	r1, r2, ip
 8028f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8028f6a:	fbb1 f6f7 	udiv	r6, r1, r7
 8028f6e:	1af3      	subs	r3, r6, r3
 8028f70:	4403      	add	r3, r0
 8028f72:	fb0c 3311 	mls	r3, ip, r1, r3
 8028f76:	2299      	movs	r2, #153	; 0x99
 8028f78:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8028f7c:	f10e 0e02 	add.w	lr, lr, #2
 8028f80:	f103 0c01 	add.w	ip, r3, #1
 8028f84:	fbbe f0f2 	udiv	r0, lr, r2
 8028f88:	4342      	muls	r2, r0
 8028f8a:	3202      	adds	r2, #2
 8028f8c:	f04f 0805 	mov.w	r8, #5
 8028f90:	fbb2 f2f8 	udiv	r2, r2, r8
 8028f94:	ebac 0c02 	sub.w	ip, ip, r2
 8028f98:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8028f9c:	4596      	cmp	lr, r2
 8028f9e:	bf94      	ite	ls
 8028fa0:	2202      	movls	r2, #2
 8028fa2:	f06f 0209 	mvnhi.w	r2, #9
 8028fa6:	4410      	add	r0, r2
 8028fa8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028fac:	fb02 1505 	mla	r5, r2, r5, r1
 8028fb0:	2801      	cmp	r0, #1
 8028fb2:	bf98      	it	ls
 8028fb4:	3501      	addls	r5, #1
 8028fb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8028fba:	d30d      	bcc.n	8028fd8 <gmtime_r+0x120>
 8028fbc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8028fc0:	61e3      	str	r3, [r4, #28]
 8028fc2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8028fc6:	2300      	movs	r3, #0
 8028fc8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8028fcc:	f8c4 c00c 	str.w	ip, [r4, #12]
 8028fd0:	6223      	str	r3, [r4, #32]
 8028fd2:	4620      	mov	r0, r4
 8028fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fd8:	078a      	lsls	r2, r1, #30
 8028fda:	d102      	bne.n	8028fe2 <gmtime_r+0x12a>
 8028fdc:	fb07 1616 	mls	r6, r7, r6, r1
 8028fe0:	b95e      	cbnz	r6, 8028ffa <gmtime_r+0x142>
 8028fe2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028fe6:	fbb1 f6f2 	udiv	r6, r1, r2
 8028fea:	fb02 1216 	mls	r2, r2, r6, r1
 8028fee:	fab2 f282 	clz	r2, r2
 8028ff2:	0952      	lsrs	r2, r2, #5
 8028ff4:	333b      	adds	r3, #59	; 0x3b
 8028ff6:	4413      	add	r3, r2
 8028ff8:	e7e2      	b.n	8028fc0 <gmtime_r+0x108>
 8028ffa:	2201      	movs	r2, #1
 8028ffc:	e7fa      	b.n	8028ff4 <gmtime_r+0x13c>
 8028ffe:	bf00      	nop
 8029000:	00015180 	.word	0x00015180
 8029004:	00023ab1 	.word	0x00023ab1
 8029008:	fffdc54f 	.word	0xfffdc54f
 802900c:	00023ab0 	.word	0x00023ab0

08029010 <labs>:
 8029010:	2800      	cmp	r0, #0
 8029012:	bfb8      	it	lt
 8029014:	4240      	neglt	r0, r0
 8029016:	4770      	bx	lr

08029018 <_localeconv_r>:
 8029018:	4800      	ldr	r0, [pc, #0]	; (802901c <_localeconv_r+0x4>)
 802901a:	4770      	bx	lr
 802901c:	20000678 	.word	0x20000678

08029020 <_lseek_r>:
 8029020:	b538      	push	{r3, r4, r5, lr}
 8029022:	4d07      	ldr	r5, [pc, #28]	; (8029040 <_lseek_r+0x20>)
 8029024:	4604      	mov	r4, r0
 8029026:	4608      	mov	r0, r1
 8029028:	4611      	mov	r1, r2
 802902a:	2200      	movs	r2, #0
 802902c:	602a      	str	r2, [r5, #0]
 802902e:	461a      	mov	r2, r3
 8029030:	f7df fa14 	bl	800845c <_lseek>
 8029034:	1c43      	adds	r3, r0, #1
 8029036:	d102      	bne.n	802903e <_lseek_r+0x1e>
 8029038:	682b      	ldr	r3, [r5, #0]
 802903a:	b103      	cbz	r3, 802903e <_lseek_r+0x1e>
 802903c:	6023      	str	r3, [r4, #0]
 802903e:	bd38      	pop	{r3, r4, r5, pc}
 8029040:	2003013c 	.word	0x2003013c

08029044 <__swhatbuf_r>:
 8029044:	b570      	push	{r4, r5, r6, lr}
 8029046:	460e      	mov	r6, r1
 8029048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802904c:	2900      	cmp	r1, #0
 802904e:	b096      	sub	sp, #88	; 0x58
 8029050:	4614      	mov	r4, r2
 8029052:	461d      	mov	r5, r3
 8029054:	da08      	bge.n	8029068 <__swhatbuf_r+0x24>
 8029056:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802905a:	2200      	movs	r2, #0
 802905c:	602a      	str	r2, [r5, #0]
 802905e:	061a      	lsls	r2, r3, #24
 8029060:	d410      	bmi.n	8029084 <__swhatbuf_r+0x40>
 8029062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029066:	e00e      	b.n	8029086 <__swhatbuf_r+0x42>
 8029068:	466a      	mov	r2, sp
 802906a:	f001 fadb 	bl	802a624 <_fstat_r>
 802906e:	2800      	cmp	r0, #0
 8029070:	dbf1      	blt.n	8029056 <__swhatbuf_r+0x12>
 8029072:	9a01      	ldr	r2, [sp, #4]
 8029074:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029078:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802907c:	425a      	negs	r2, r3
 802907e:	415a      	adcs	r2, r3
 8029080:	602a      	str	r2, [r5, #0]
 8029082:	e7ee      	b.n	8029062 <__swhatbuf_r+0x1e>
 8029084:	2340      	movs	r3, #64	; 0x40
 8029086:	2000      	movs	r0, #0
 8029088:	6023      	str	r3, [r4, #0]
 802908a:	b016      	add	sp, #88	; 0x58
 802908c:	bd70      	pop	{r4, r5, r6, pc}
 802908e:	Address 0x000000000802908e is out of bounds.


08029090 <__smakebuf_r>:
 8029090:	898b      	ldrh	r3, [r1, #12]
 8029092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029094:	079d      	lsls	r5, r3, #30
 8029096:	4606      	mov	r6, r0
 8029098:	460c      	mov	r4, r1
 802909a:	d507      	bpl.n	80290ac <__smakebuf_r+0x1c>
 802909c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80290a0:	6023      	str	r3, [r4, #0]
 80290a2:	6123      	str	r3, [r4, #16]
 80290a4:	2301      	movs	r3, #1
 80290a6:	6163      	str	r3, [r4, #20]
 80290a8:	b002      	add	sp, #8
 80290aa:	bd70      	pop	{r4, r5, r6, pc}
 80290ac:	ab01      	add	r3, sp, #4
 80290ae:	466a      	mov	r2, sp
 80290b0:	f7ff ffc8 	bl	8029044 <__swhatbuf_r>
 80290b4:	9900      	ldr	r1, [sp, #0]
 80290b6:	4605      	mov	r5, r0
 80290b8:	4630      	mov	r0, r6
 80290ba:	f7fc fe8b 	bl	8025dd4 <_malloc_r>
 80290be:	b948      	cbnz	r0, 80290d4 <__smakebuf_r+0x44>
 80290c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290c4:	059a      	lsls	r2, r3, #22
 80290c6:	d4ef      	bmi.n	80290a8 <__smakebuf_r+0x18>
 80290c8:	f023 0303 	bic.w	r3, r3, #3
 80290cc:	f043 0302 	orr.w	r3, r3, #2
 80290d0:	81a3      	strh	r3, [r4, #12]
 80290d2:	e7e3      	b.n	802909c <__smakebuf_r+0xc>
 80290d4:	4b0d      	ldr	r3, [pc, #52]	; (802910c <__smakebuf_r+0x7c>)
 80290d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80290d8:	89a3      	ldrh	r3, [r4, #12]
 80290da:	6020      	str	r0, [r4, #0]
 80290dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80290e0:	81a3      	strh	r3, [r4, #12]
 80290e2:	9b00      	ldr	r3, [sp, #0]
 80290e4:	6163      	str	r3, [r4, #20]
 80290e6:	9b01      	ldr	r3, [sp, #4]
 80290e8:	6120      	str	r0, [r4, #16]
 80290ea:	b15b      	cbz	r3, 8029104 <__smakebuf_r+0x74>
 80290ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80290f0:	4630      	mov	r0, r6
 80290f2:	f001 faa9 	bl	802a648 <_isatty_r>
 80290f6:	b128      	cbz	r0, 8029104 <__smakebuf_r+0x74>
 80290f8:	89a3      	ldrh	r3, [r4, #12]
 80290fa:	f023 0303 	bic.w	r3, r3, #3
 80290fe:	f043 0301 	orr.w	r3, r3, #1
 8029102:	81a3      	strh	r3, [r4, #12]
 8029104:	89a0      	ldrh	r0, [r4, #12]
 8029106:	4305      	orrs	r5, r0
 8029108:	81a5      	strh	r5, [r4, #12]
 802910a:	e7cd      	b.n	80290a8 <__smakebuf_r+0x18>
 802910c:	0802535d 	.word	0x0802535d

08029110 <__malloc_lock>:
 8029110:	4801      	ldr	r0, [pc, #4]	; (8029118 <__malloc_lock+0x8>)
 8029112:	f7fc bb2d 	b.w	8025770 <__retarget_lock_acquire_recursive>
 8029116:	bf00      	nop
 8029118:	2003012d 	.word	0x2003012d

0802911c <__malloc_unlock>:
 802911c:	4801      	ldr	r0, [pc, #4]	; (8029124 <__malloc_unlock+0x8>)
 802911e:	f7fc bb29 	b.w	8025774 <__retarget_lock_release_recursive>
 8029122:	bf00      	nop
 8029124:	2003012d 	.word	0x2003012d

08029128 <_Balloc>:
 8029128:	b570      	push	{r4, r5, r6, lr}
 802912a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802912c:	4604      	mov	r4, r0
 802912e:	460d      	mov	r5, r1
 8029130:	b976      	cbnz	r6, 8029150 <_Balloc+0x28>
 8029132:	2010      	movs	r0, #16
 8029134:	f7fc fb20 	bl	8025778 <malloc>
 8029138:	4602      	mov	r2, r0
 802913a:	6260      	str	r0, [r4, #36]	; 0x24
 802913c:	b920      	cbnz	r0, 8029148 <_Balloc+0x20>
 802913e:	4b18      	ldr	r3, [pc, #96]	; (80291a0 <_Balloc+0x78>)
 8029140:	4818      	ldr	r0, [pc, #96]	; (80291a4 <_Balloc+0x7c>)
 8029142:	2166      	movs	r1, #102	; 0x66
 8029144:	f7fe ff5a 	bl	8027ffc <__assert_func>
 8029148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802914c:	6006      	str	r6, [r0, #0]
 802914e:	60c6      	str	r6, [r0, #12]
 8029150:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8029152:	68f3      	ldr	r3, [r6, #12]
 8029154:	b183      	cbz	r3, 8029178 <_Balloc+0x50>
 8029156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029158:	68db      	ldr	r3, [r3, #12]
 802915a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802915e:	b9b8      	cbnz	r0, 8029190 <_Balloc+0x68>
 8029160:	2101      	movs	r1, #1
 8029162:	fa01 f605 	lsl.w	r6, r1, r5
 8029166:	1d72      	adds	r2, r6, #5
 8029168:	0092      	lsls	r2, r2, #2
 802916a:	4620      	mov	r0, r4
 802916c:	f000 fb60 	bl	8029830 <_calloc_r>
 8029170:	b160      	cbz	r0, 802918c <_Balloc+0x64>
 8029172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029176:	e00e      	b.n	8029196 <_Balloc+0x6e>
 8029178:	2221      	movs	r2, #33	; 0x21
 802917a:	2104      	movs	r1, #4
 802917c:	4620      	mov	r0, r4
 802917e:	f000 fb57 	bl	8029830 <_calloc_r>
 8029182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029184:	60f0      	str	r0, [r6, #12]
 8029186:	68db      	ldr	r3, [r3, #12]
 8029188:	2b00      	cmp	r3, #0
 802918a:	d1e4      	bne.n	8029156 <_Balloc+0x2e>
 802918c:	2000      	movs	r0, #0
 802918e:	bd70      	pop	{r4, r5, r6, pc}
 8029190:	6802      	ldr	r2, [r0, #0]
 8029192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8029196:	2300      	movs	r3, #0
 8029198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802919c:	e7f7      	b.n	802918e <_Balloc+0x66>
 802919e:	bf00      	nop
 80291a0:	080476e0 	.word	0x080476e0
 80291a4:	08047cca 	.word	0x08047cca

080291a8 <_Bfree>:
 80291a8:	b570      	push	{r4, r5, r6, lr}
 80291aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80291ac:	4605      	mov	r5, r0
 80291ae:	460c      	mov	r4, r1
 80291b0:	b976      	cbnz	r6, 80291d0 <_Bfree+0x28>
 80291b2:	2010      	movs	r0, #16
 80291b4:	f7fc fae0 	bl	8025778 <malloc>
 80291b8:	4602      	mov	r2, r0
 80291ba:	6268      	str	r0, [r5, #36]	; 0x24
 80291bc:	b920      	cbnz	r0, 80291c8 <_Bfree+0x20>
 80291be:	4b09      	ldr	r3, [pc, #36]	; (80291e4 <_Bfree+0x3c>)
 80291c0:	4809      	ldr	r0, [pc, #36]	; (80291e8 <_Bfree+0x40>)
 80291c2:	218a      	movs	r1, #138	; 0x8a
 80291c4:	f7fe ff1a 	bl	8027ffc <__assert_func>
 80291c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80291cc:	6006      	str	r6, [r0, #0]
 80291ce:	60c6      	str	r6, [r0, #12]
 80291d0:	b13c      	cbz	r4, 80291e2 <_Bfree+0x3a>
 80291d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80291d4:	6862      	ldr	r2, [r4, #4]
 80291d6:	68db      	ldr	r3, [r3, #12]
 80291d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80291dc:	6021      	str	r1, [r4, #0]
 80291de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80291e2:	bd70      	pop	{r4, r5, r6, pc}
 80291e4:	080476e0 	.word	0x080476e0
 80291e8:	08047cca 	.word	0x08047cca

080291ec <__multadd>:
 80291ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80291f0:	690d      	ldr	r5, [r1, #16]
 80291f2:	4607      	mov	r7, r0
 80291f4:	460c      	mov	r4, r1
 80291f6:	461e      	mov	r6, r3
 80291f8:	f101 0c14 	add.w	ip, r1, #20
 80291fc:	2000      	movs	r0, #0
 80291fe:	f8dc 3000 	ldr.w	r3, [ip]
 8029202:	b299      	uxth	r1, r3
 8029204:	fb02 6101 	mla	r1, r2, r1, r6
 8029208:	0c1e      	lsrs	r6, r3, #16
 802920a:	0c0b      	lsrs	r3, r1, #16
 802920c:	fb02 3306 	mla	r3, r2, r6, r3
 8029210:	b289      	uxth	r1, r1
 8029212:	3001      	adds	r0, #1
 8029214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029218:	4285      	cmp	r5, r0
 802921a:	f84c 1b04 	str.w	r1, [ip], #4
 802921e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8029222:	dcec      	bgt.n	80291fe <__multadd+0x12>
 8029224:	b30e      	cbz	r6, 802926a <__multadd+0x7e>
 8029226:	68a3      	ldr	r3, [r4, #8]
 8029228:	42ab      	cmp	r3, r5
 802922a:	dc19      	bgt.n	8029260 <__multadd+0x74>
 802922c:	6861      	ldr	r1, [r4, #4]
 802922e:	4638      	mov	r0, r7
 8029230:	3101      	adds	r1, #1
 8029232:	f7ff ff79 	bl	8029128 <_Balloc>
 8029236:	4680      	mov	r8, r0
 8029238:	b928      	cbnz	r0, 8029246 <__multadd+0x5a>
 802923a:	4602      	mov	r2, r0
 802923c:	4b0c      	ldr	r3, [pc, #48]	; (8029270 <__multadd+0x84>)
 802923e:	480d      	ldr	r0, [pc, #52]	; (8029274 <__multadd+0x88>)
 8029240:	21b5      	movs	r1, #181	; 0xb5
 8029242:	f7fe fedb 	bl	8027ffc <__assert_func>
 8029246:	6922      	ldr	r2, [r4, #16]
 8029248:	3202      	adds	r2, #2
 802924a:	f104 010c 	add.w	r1, r4, #12
 802924e:	0092      	lsls	r2, r2, #2
 8029250:	300c      	adds	r0, #12
 8029252:	f7fc fab1 	bl	80257b8 <memcpy>
 8029256:	4621      	mov	r1, r4
 8029258:	4638      	mov	r0, r7
 802925a:	f7ff ffa5 	bl	80291a8 <_Bfree>
 802925e:	4644      	mov	r4, r8
 8029260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8029264:	3501      	adds	r5, #1
 8029266:	615e      	str	r6, [r3, #20]
 8029268:	6125      	str	r5, [r4, #16]
 802926a:	4620      	mov	r0, r4
 802926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029270:	08047cb9 	.word	0x08047cb9
 8029274:	08047cca 	.word	0x08047cca

08029278 <__hi0bits>:
 8029278:	0c03      	lsrs	r3, r0, #16
 802927a:	041b      	lsls	r3, r3, #16
 802927c:	b9d3      	cbnz	r3, 80292b4 <__hi0bits+0x3c>
 802927e:	0400      	lsls	r0, r0, #16
 8029280:	2310      	movs	r3, #16
 8029282:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029286:	bf04      	itt	eq
 8029288:	0200      	lsleq	r0, r0, #8
 802928a:	3308      	addeq	r3, #8
 802928c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029290:	bf04      	itt	eq
 8029292:	0100      	lsleq	r0, r0, #4
 8029294:	3304      	addeq	r3, #4
 8029296:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802929a:	bf04      	itt	eq
 802929c:	0080      	lsleq	r0, r0, #2
 802929e:	3302      	addeq	r3, #2
 80292a0:	2800      	cmp	r0, #0
 80292a2:	db05      	blt.n	80292b0 <__hi0bits+0x38>
 80292a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80292a8:	f103 0301 	add.w	r3, r3, #1
 80292ac:	bf08      	it	eq
 80292ae:	2320      	moveq	r3, #32
 80292b0:	4618      	mov	r0, r3
 80292b2:	4770      	bx	lr
 80292b4:	2300      	movs	r3, #0
 80292b6:	e7e4      	b.n	8029282 <__hi0bits+0xa>

080292b8 <__lo0bits>:
 80292b8:	6803      	ldr	r3, [r0, #0]
 80292ba:	f013 0207 	ands.w	r2, r3, #7
 80292be:	4601      	mov	r1, r0
 80292c0:	d00b      	beq.n	80292da <__lo0bits+0x22>
 80292c2:	07da      	lsls	r2, r3, #31
 80292c4:	d423      	bmi.n	802930e <__lo0bits+0x56>
 80292c6:	0798      	lsls	r0, r3, #30
 80292c8:	bf49      	itett	mi
 80292ca:	085b      	lsrmi	r3, r3, #1
 80292cc:	089b      	lsrpl	r3, r3, #2
 80292ce:	2001      	movmi	r0, #1
 80292d0:	600b      	strmi	r3, [r1, #0]
 80292d2:	bf5c      	itt	pl
 80292d4:	600b      	strpl	r3, [r1, #0]
 80292d6:	2002      	movpl	r0, #2
 80292d8:	4770      	bx	lr
 80292da:	b298      	uxth	r0, r3
 80292dc:	b9a8      	cbnz	r0, 802930a <__lo0bits+0x52>
 80292de:	0c1b      	lsrs	r3, r3, #16
 80292e0:	2010      	movs	r0, #16
 80292e2:	b2da      	uxtb	r2, r3
 80292e4:	b90a      	cbnz	r2, 80292ea <__lo0bits+0x32>
 80292e6:	3008      	adds	r0, #8
 80292e8:	0a1b      	lsrs	r3, r3, #8
 80292ea:	071a      	lsls	r2, r3, #28
 80292ec:	bf04      	itt	eq
 80292ee:	091b      	lsreq	r3, r3, #4
 80292f0:	3004      	addeq	r0, #4
 80292f2:	079a      	lsls	r2, r3, #30
 80292f4:	bf04      	itt	eq
 80292f6:	089b      	lsreq	r3, r3, #2
 80292f8:	3002      	addeq	r0, #2
 80292fa:	07da      	lsls	r2, r3, #31
 80292fc:	d403      	bmi.n	8029306 <__lo0bits+0x4e>
 80292fe:	085b      	lsrs	r3, r3, #1
 8029300:	f100 0001 	add.w	r0, r0, #1
 8029304:	d005      	beq.n	8029312 <__lo0bits+0x5a>
 8029306:	600b      	str	r3, [r1, #0]
 8029308:	4770      	bx	lr
 802930a:	4610      	mov	r0, r2
 802930c:	e7e9      	b.n	80292e2 <__lo0bits+0x2a>
 802930e:	2000      	movs	r0, #0
 8029310:	4770      	bx	lr
 8029312:	2020      	movs	r0, #32
 8029314:	4770      	bx	lr
 8029316:	Address 0x0000000008029316 is out of bounds.


08029318 <__i2b>:
 8029318:	b510      	push	{r4, lr}
 802931a:	460c      	mov	r4, r1
 802931c:	2101      	movs	r1, #1
 802931e:	f7ff ff03 	bl	8029128 <_Balloc>
 8029322:	4602      	mov	r2, r0
 8029324:	b928      	cbnz	r0, 8029332 <__i2b+0x1a>
 8029326:	4b05      	ldr	r3, [pc, #20]	; (802933c <__i2b+0x24>)
 8029328:	4805      	ldr	r0, [pc, #20]	; (8029340 <__i2b+0x28>)
 802932a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802932e:	f7fe fe65 	bl	8027ffc <__assert_func>
 8029332:	2301      	movs	r3, #1
 8029334:	6144      	str	r4, [r0, #20]
 8029336:	6103      	str	r3, [r0, #16]
 8029338:	bd10      	pop	{r4, pc}
 802933a:	bf00      	nop
 802933c:	08047cb9 	.word	0x08047cb9
 8029340:	08047cca 	.word	0x08047cca

08029344 <__multiply>:
 8029344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029348:	4691      	mov	r9, r2
 802934a:	690a      	ldr	r2, [r1, #16]
 802934c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8029350:	429a      	cmp	r2, r3
 8029352:	bfb8      	it	lt
 8029354:	460b      	movlt	r3, r1
 8029356:	460c      	mov	r4, r1
 8029358:	bfbc      	itt	lt
 802935a:	464c      	movlt	r4, r9
 802935c:	4699      	movlt	r9, r3
 802935e:	6927      	ldr	r7, [r4, #16]
 8029360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8029364:	68a3      	ldr	r3, [r4, #8]
 8029366:	6861      	ldr	r1, [r4, #4]
 8029368:	eb07 060a 	add.w	r6, r7, sl
 802936c:	42b3      	cmp	r3, r6
 802936e:	b085      	sub	sp, #20
 8029370:	bfb8      	it	lt
 8029372:	3101      	addlt	r1, #1
 8029374:	f7ff fed8 	bl	8029128 <_Balloc>
 8029378:	b930      	cbnz	r0, 8029388 <__multiply+0x44>
 802937a:	4602      	mov	r2, r0
 802937c:	4b44      	ldr	r3, [pc, #272]	; (8029490 <__multiply+0x14c>)
 802937e:	4845      	ldr	r0, [pc, #276]	; (8029494 <__multiply+0x150>)
 8029380:	f240 115d 	movw	r1, #349	; 0x15d
 8029384:	f7fe fe3a 	bl	8027ffc <__assert_func>
 8029388:	f100 0514 	add.w	r5, r0, #20
 802938c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8029390:	462b      	mov	r3, r5
 8029392:	2200      	movs	r2, #0
 8029394:	4543      	cmp	r3, r8
 8029396:	d321      	bcc.n	80293dc <__multiply+0x98>
 8029398:	f104 0314 	add.w	r3, r4, #20
 802939c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80293a0:	f109 0314 	add.w	r3, r9, #20
 80293a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80293a8:	9202      	str	r2, [sp, #8]
 80293aa:	1b3a      	subs	r2, r7, r4
 80293ac:	3a15      	subs	r2, #21
 80293ae:	f022 0203 	bic.w	r2, r2, #3
 80293b2:	3204      	adds	r2, #4
 80293b4:	f104 0115 	add.w	r1, r4, #21
 80293b8:	428f      	cmp	r7, r1
 80293ba:	bf38      	it	cc
 80293bc:	2204      	movcc	r2, #4
 80293be:	9201      	str	r2, [sp, #4]
 80293c0:	9a02      	ldr	r2, [sp, #8]
 80293c2:	9303      	str	r3, [sp, #12]
 80293c4:	429a      	cmp	r2, r3
 80293c6:	d80c      	bhi.n	80293e2 <__multiply+0x9e>
 80293c8:	2e00      	cmp	r6, #0
 80293ca:	dd03      	ble.n	80293d4 <__multiply+0x90>
 80293cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80293d0:	2b00      	cmp	r3, #0
 80293d2:	d05a      	beq.n	802948a <__multiply+0x146>
 80293d4:	6106      	str	r6, [r0, #16]
 80293d6:	b005      	add	sp, #20
 80293d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293dc:	f843 2b04 	str.w	r2, [r3], #4
 80293e0:	e7d8      	b.n	8029394 <__multiply+0x50>
 80293e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80293e6:	f1ba 0f00 	cmp.w	sl, #0
 80293ea:	d024      	beq.n	8029436 <__multiply+0xf2>
 80293ec:	f104 0e14 	add.w	lr, r4, #20
 80293f0:	46a9      	mov	r9, r5
 80293f2:	f04f 0c00 	mov.w	ip, #0
 80293f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80293fa:	f8d9 1000 	ldr.w	r1, [r9]
 80293fe:	fa1f fb82 	uxth.w	fp, r2
 8029402:	b289      	uxth	r1, r1
 8029404:	fb0a 110b 	mla	r1, sl, fp, r1
 8029408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802940c:	f8d9 2000 	ldr.w	r2, [r9]
 8029410:	4461      	add	r1, ip
 8029412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029416:	fb0a c20b 	mla	r2, sl, fp, ip
 802941a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802941e:	b289      	uxth	r1, r1
 8029420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8029424:	4577      	cmp	r7, lr
 8029426:	f849 1b04 	str.w	r1, [r9], #4
 802942a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802942e:	d8e2      	bhi.n	80293f6 <__multiply+0xb2>
 8029430:	9a01      	ldr	r2, [sp, #4]
 8029432:	f845 c002 	str.w	ip, [r5, r2]
 8029436:	9a03      	ldr	r2, [sp, #12]
 8029438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802943c:	3304      	adds	r3, #4
 802943e:	f1b9 0f00 	cmp.w	r9, #0
 8029442:	d020      	beq.n	8029486 <__multiply+0x142>
 8029444:	6829      	ldr	r1, [r5, #0]
 8029446:	f104 0c14 	add.w	ip, r4, #20
 802944a:	46ae      	mov	lr, r5
 802944c:	f04f 0a00 	mov.w	sl, #0
 8029450:	f8bc b000 	ldrh.w	fp, [ip]
 8029454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029458:	fb09 220b 	mla	r2, r9, fp, r2
 802945c:	4492      	add	sl, r2
 802945e:	b289      	uxth	r1, r1
 8029460:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8029464:	f84e 1b04 	str.w	r1, [lr], #4
 8029468:	f85c 2b04 	ldr.w	r2, [ip], #4
 802946c:	f8be 1000 	ldrh.w	r1, [lr]
 8029470:	0c12      	lsrs	r2, r2, #16
 8029472:	fb09 1102 	mla	r1, r9, r2, r1
 8029476:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802947a:	4567      	cmp	r7, ip
 802947c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8029480:	d8e6      	bhi.n	8029450 <__multiply+0x10c>
 8029482:	9a01      	ldr	r2, [sp, #4]
 8029484:	50a9      	str	r1, [r5, r2]
 8029486:	3504      	adds	r5, #4
 8029488:	e79a      	b.n	80293c0 <__multiply+0x7c>
 802948a:	3e01      	subs	r6, #1
 802948c:	e79c      	b.n	80293c8 <__multiply+0x84>
 802948e:	bf00      	nop
 8029490:	08047cb9 	.word	0x08047cb9
 8029494:	08047cca 	.word	0x08047cca

08029498 <__pow5mult>:
 8029498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802949c:	4615      	mov	r5, r2
 802949e:	f012 0203 	ands.w	r2, r2, #3
 80294a2:	4606      	mov	r6, r0
 80294a4:	460f      	mov	r7, r1
 80294a6:	d007      	beq.n	80294b8 <__pow5mult+0x20>
 80294a8:	4c25      	ldr	r4, [pc, #148]	; (8029540 <__pow5mult+0xa8>)
 80294aa:	3a01      	subs	r2, #1
 80294ac:	2300      	movs	r3, #0
 80294ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80294b2:	f7ff fe9b 	bl	80291ec <__multadd>
 80294b6:	4607      	mov	r7, r0
 80294b8:	10ad      	asrs	r5, r5, #2
 80294ba:	d03d      	beq.n	8029538 <__pow5mult+0xa0>
 80294bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80294be:	b97c      	cbnz	r4, 80294e0 <__pow5mult+0x48>
 80294c0:	2010      	movs	r0, #16
 80294c2:	f7fc f959 	bl	8025778 <malloc>
 80294c6:	4602      	mov	r2, r0
 80294c8:	6270      	str	r0, [r6, #36]	; 0x24
 80294ca:	b928      	cbnz	r0, 80294d8 <__pow5mult+0x40>
 80294cc:	4b1d      	ldr	r3, [pc, #116]	; (8029544 <__pow5mult+0xac>)
 80294ce:	481e      	ldr	r0, [pc, #120]	; (8029548 <__pow5mult+0xb0>)
 80294d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80294d4:	f7fe fd92 	bl	8027ffc <__assert_func>
 80294d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80294dc:	6004      	str	r4, [r0, #0]
 80294de:	60c4      	str	r4, [r0, #12]
 80294e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80294e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80294e8:	b94c      	cbnz	r4, 80294fe <__pow5mult+0x66>
 80294ea:	f240 2171 	movw	r1, #625	; 0x271
 80294ee:	4630      	mov	r0, r6
 80294f0:	f7ff ff12 	bl	8029318 <__i2b>
 80294f4:	2300      	movs	r3, #0
 80294f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80294fa:	4604      	mov	r4, r0
 80294fc:	6003      	str	r3, [r0, #0]
 80294fe:	f04f 0900 	mov.w	r9, #0
 8029502:	07eb      	lsls	r3, r5, #31
 8029504:	d50a      	bpl.n	802951c <__pow5mult+0x84>
 8029506:	4639      	mov	r1, r7
 8029508:	4622      	mov	r2, r4
 802950a:	4630      	mov	r0, r6
 802950c:	f7ff ff1a 	bl	8029344 <__multiply>
 8029510:	4639      	mov	r1, r7
 8029512:	4680      	mov	r8, r0
 8029514:	4630      	mov	r0, r6
 8029516:	f7ff fe47 	bl	80291a8 <_Bfree>
 802951a:	4647      	mov	r7, r8
 802951c:	106d      	asrs	r5, r5, #1
 802951e:	d00b      	beq.n	8029538 <__pow5mult+0xa0>
 8029520:	6820      	ldr	r0, [r4, #0]
 8029522:	b938      	cbnz	r0, 8029534 <__pow5mult+0x9c>
 8029524:	4622      	mov	r2, r4
 8029526:	4621      	mov	r1, r4
 8029528:	4630      	mov	r0, r6
 802952a:	f7ff ff0b 	bl	8029344 <__multiply>
 802952e:	6020      	str	r0, [r4, #0]
 8029530:	f8c0 9000 	str.w	r9, [r0]
 8029534:	4604      	mov	r4, r0
 8029536:	e7e4      	b.n	8029502 <__pow5mult+0x6a>
 8029538:	4638      	mov	r0, r7
 802953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802953e:	bf00      	nop
 8029540:	08047e18 	.word	0x08047e18
 8029544:	080476e0 	.word	0x080476e0
 8029548:	08047cca 	.word	0x08047cca

0802954c <__lshift>:
 802954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029550:	460c      	mov	r4, r1
 8029552:	6849      	ldr	r1, [r1, #4]
 8029554:	6923      	ldr	r3, [r4, #16]
 8029556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802955a:	68a3      	ldr	r3, [r4, #8]
 802955c:	4607      	mov	r7, r0
 802955e:	4691      	mov	r9, r2
 8029560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029564:	f108 0601 	add.w	r6, r8, #1
 8029568:	42b3      	cmp	r3, r6
 802956a:	db0b      	blt.n	8029584 <__lshift+0x38>
 802956c:	4638      	mov	r0, r7
 802956e:	f7ff fddb 	bl	8029128 <_Balloc>
 8029572:	4605      	mov	r5, r0
 8029574:	b948      	cbnz	r0, 802958a <__lshift+0x3e>
 8029576:	4602      	mov	r2, r0
 8029578:	4b2a      	ldr	r3, [pc, #168]	; (8029624 <__lshift+0xd8>)
 802957a:	482b      	ldr	r0, [pc, #172]	; (8029628 <__lshift+0xdc>)
 802957c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029580:	f7fe fd3c 	bl	8027ffc <__assert_func>
 8029584:	3101      	adds	r1, #1
 8029586:	005b      	lsls	r3, r3, #1
 8029588:	e7ee      	b.n	8029568 <__lshift+0x1c>
 802958a:	2300      	movs	r3, #0
 802958c:	f100 0114 	add.w	r1, r0, #20
 8029590:	f100 0210 	add.w	r2, r0, #16
 8029594:	4618      	mov	r0, r3
 8029596:	4553      	cmp	r3, sl
 8029598:	db37      	blt.n	802960a <__lshift+0xbe>
 802959a:	6920      	ldr	r0, [r4, #16]
 802959c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80295a0:	f104 0314 	add.w	r3, r4, #20
 80295a4:	f019 091f 	ands.w	r9, r9, #31
 80295a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80295ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80295b0:	d02f      	beq.n	8029612 <__lshift+0xc6>
 80295b2:	f1c9 0e20 	rsb	lr, r9, #32
 80295b6:	468a      	mov	sl, r1
 80295b8:	f04f 0c00 	mov.w	ip, #0
 80295bc:	681a      	ldr	r2, [r3, #0]
 80295be:	fa02 f209 	lsl.w	r2, r2, r9
 80295c2:	ea42 020c 	orr.w	r2, r2, ip
 80295c6:	f84a 2b04 	str.w	r2, [sl], #4
 80295ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80295ce:	4298      	cmp	r0, r3
 80295d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80295d4:	d8f2      	bhi.n	80295bc <__lshift+0x70>
 80295d6:	1b03      	subs	r3, r0, r4
 80295d8:	3b15      	subs	r3, #21
 80295da:	f023 0303 	bic.w	r3, r3, #3
 80295de:	3304      	adds	r3, #4
 80295e0:	f104 0215 	add.w	r2, r4, #21
 80295e4:	4290      	cmp	r0, r2
 80295e6:	bf38      	it	cc
 80295e8:	2304      	movcc	r3, #4
 80295ea:	f841 c003 	str.w	ip, [r1, r3]
 80295ee:	f1bc 0f00 	cmp.w	ip, #0
 80295f2:	d001      	beq.n	80295f8 <__lshift+0xac>
 80295f4:	f108 0602 	add.w	r6, r8, #2
 80295f8:	3e01      	subs	r6, #1
 80295fa:	4638      	mov	r0, r7
 80295fc:	612e      	str	r6, [r5, #16]
 80295fe:	4621      	mov	r1, r4
 8029600:	f7ff fdd2 	bl	80291a8 <_Bfree>
 8029604:	4628      	mov	r0, r5
 8029606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802960a:	f842 0f04 	str.w	r0, [r2, #4]!
 802960e:	3301      	adds	r3, #1
 8029610:	e7c1      	b.n	8029596 <__lshift+0x4a>
 8029612:	3904      	subs	r1, #4
 8029614:	f853 2b04 	ldr.w	r2, [r3], #4
 8029618:	f841 2f04 	str.w	r2, [r1, #4]!
 802961c:	4298      	cmp	r0, r3
 802961e:	d8f9      	bhi.n	8029614 <__lshift+0xc8>
 8029620:	e7ea      	b.n	80295f8 <__lshift+0xac>
 8029622:	bf00      	nop
 8029624:	08047cb9 	.word	0x08047cb9
 8029628:	08047cca 	.word	0x08047cca

0802962c <__mcmp>:
 802962c:	b530      	push	{r4, r5, lr}
 802962e:	6902      	ldr	r2, [r0, #16]
 8029630:	690c      	ldr	r4, [r1, #16]
 8029632:	1b12      	subs	r2, r2, r4
 8029634:	d10e      	bne.n	8029654 <__mcmp+0x28>
 8029636:	f100 0314 	add.w	r3, r0, #20
 802963a:	3114      	adds	r1, #20
 802963c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8029644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802964c:	42a5      	cmp	r5, r4
 802964e:	d003      	beq.n	8029658 <__mcmp+0x2c>
 8029650:	d305      	bcc.n	802965e <__mcmp+0x32>
 8029652:	2201      	movs	r2, #1
 8029654:	4610      	mov	r0, r2
 8029656:	bd30      	pop	{r4, r5, pc}
 8029658:	4283      	cmp	r3, r0
 802965a:	d3f3      	bcc.n	8029644 <__mcmp+0x18>
 802965c:	e7fa      	b.n	8029654 <__mcmp+0x28>
 802965e:	f04f 32ff 	mov.w	r2, #4294967295
 8029662:	e7f7      	b.n	8029654 <__mcmp+0x28>

08029664 <__mdiff>:
 8029664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029668:	460c      	mov	r4, r1
 802966a:	4606      	mov	r6, r0
 802966c:	4611      	mov	r1, r2
 802966e:	4620      	mov	r0, r4
 8029670:	4690      	mov	r8, r2
 8029672:	f7ff ffdb 	bl	802962c <__mcmp>
 8029676:	1e05      	subs	r5, r0, #0
 8029678:	d110      	bne.n	802969c <__mdiff+0x38>
 802967a:	4629      	mov	r1, r5
 802967c:	4630      	mov	r0, r6
 802967e:	f7ff fd53 	bl	8029128 <_Balloc>
 8029682:	b930      	cbnz	r0, 8029692 <__mdiff+0x2e>
 8029684:	4b3a      	ldr	r3, [pc, #232]	; (8029770 <__mdiff+0x10c>)
 8029686:	4602      	mov	r2, r0
 8029688:	f240 2132 	movw	r1, #562	; 0x232
 802968c:	4839      	ldr	r0, [pc, #228]	; (8029774 <__mdiff+0x110>)
 802968e:	f7fe fcb5 	bl	8027ffc <__assert_func>
 8029692:	2301      	movs	r3, #1
 8029694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802969c:	bfa4      	itt	ge
 802969e:	4643      	movge	r3, r8
 80296a0:	46a0      	movge	r8, r4
 80296a2:	4630      	mov	r0, r6
 80296a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80296a8:	bfa6      	itte	ge
 80296aa:	461c      	movge	r4, r3
 80296ac:	2500      	movge	r5, #0
 80296ae:	2501      	movlt	r5, #1
 80296b0:	f7ff fd3a 	bl	8029128 <_Balloc>
 80296b4:	b920      	cbnz	r0, 80296c0 <__mdiff+0x5c>
 80296b6:	4b2e      	ldr	r3, [pc, #184]	; (8029770 <__mdiff+0x10c>)
 80296b8:	4602      	mov	r2, r0
 80296ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80296be:	e7e5      	b.n	802968c <__mdiff+0x28>
 80296c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80296c4:	6926      	ldr	r6, [r4, #16]
 80296c6:	60c5      	str	r5, [r0, #12]
 80296c8:	f104 0914 	add.w	r9, r4, #20
 80296cc:	f108 0514 	add.w	r5, r8, #20
 80296d0:	f100 0e14 	add.w	lr, r0, #20
 80296d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80296d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80296dc:	f108 0210 	add.w	r2, r8, #16
 80296e0:	46f2      	mov	sl, lr
 80296e2:	2100      	movs	r1, #0
 80296e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80296e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80296ec:	fa1f f883 	uxth.w	r8, r3
 80296f0:	fa11 f18b 	uxtah	r1, r1, fp
 80296f4:	0c1b      	lsrs	r3, r3, #16
 80296f6:	eba1 0808 	sub.w	r8, r1, r8
 80296fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80296fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029702:	fa1f f888 	uxth.w	r8, r8
 8029706:	1419      	asrs	r1, r3, #16
 8029708:	454e      	cmp	r6, r9
 802970a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802970e:	f84a 3b04 	str.w	r3, [sl], #4
 8029712:	d8e7      	bhi.n	80296e4 <__mdiff+0x80>
 8029714:	1b33      	subs	r3, r6, r4
 8029716:	3b15      	subs	r3, #21
 8029718:	f023 0303 	bic.w	r3, r3, #3
 802971c:	3304      	adds	r3, #4
 802971e:	3415      	adds	r4, #21
 8029720:	42a6      	cmp	r6, r4
 8029722:	bf38      	it	cc
 8029724:	2304      	movcc	r3, #4
 8029726:	441d      	add	r5, r3
 8029728:	4473      	add	r3, lr
 802972a:	469e      	mov	lr, r3
 802972c:	462e      	mov	r6, r5
 802972e:	4566      	cmp	r6, ip
 8029730:	d30e      	bcc.n	8029750 <__mdiff+0xec>
 8029732:	f10c 0203 	add.w	r2, ip, #3
 8029736:	1b52      	subs	r2, r2, r5
 8029738:	f022 0203 	bic.w	r2, r2, #3
 802973c:	3d03      	subs	r5, #3
 802973e:	45ac      	cmp	ip, r5
 8029740:	bf38      	it	cc
 8029742:	2200      	movcc	r2, #0
 8029744:	441a      	add	r2, r3
 8029746:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802974a:	b17b      	cbz	r3, 802976c <__mdiff+0x108>
 802974c:	6107      	str	r7, [r0, #16]
 802974e:	e7a3      	b.n	8029698 <__mdiff+0x34>
 8029750:	f856 8b04 	ldr.w	r8, [r6], #4
 8029754:	fa11 f288 	uxtah	r2, r1, r8
 8029758:	1414      	asrs	r4, r2, #16
 802975a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802975e:	b292      	uxth	r2, r2
 8029760:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8029764:	f84e 2b04 	str.w	r2, [lr], #4
 8029768:	1421      	asrs	r1, r4, #16
 802976a:	e7e0      	b.n	802972e <__mdiff+0xca>
 802976c:	3f01      	subs	r7, #1
 802976e:	e7ea      	b.n	8029746 <__mdiff+0xe2>
 8029770:	08047cb9 	.word	0x08047cb9
 8029774:	08047cca 	.word	0x08047cca

08029778 <__d2b>:
 8029778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802977c:	4689      	mov	r9, r1
 802977e:	2101      	movs	r1, #1
 8029780:	ec57 6b10 	vmov	r6, r7, d0
 8029784:	4690      	mov	r8, r2
 8029786:	f7ff fccf 	bl	8029128 <_Balloc>
 802978a:	4604      	mov	r4, r0
 802978c:	b930      	cbnz	r0, 802979c <__d2b+0x24>
 802978e:	4602      	mov	r2, r0
 8029790:	4b25      	ldr	r3, [pc, #148]	; (8029828 <__d2b+0xb0>)
 8029792:	4826      	ldr	r0, [pc, #152]	; (802982c <__d2b+0xb4>)
 8029794:	f240 310a 	movw	r1, #778	; 0x30a
 8029798:	f7fe fc30 	bl	8027ffc <__assert_func>
 802979c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80297a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80297a4:	bb35      	cbnz	r5, 80297f4 <__d2b+0x7c>
 80297a6:	2e00      	cmp	r6, #0
 80297a8:	9301      	str	r3, [sp, #4]
 80297aa:	d028      	beq.n	80297fe <__d2b+0x86>
 80297ac:	4668      	mov	r0, sp
 80297ae:	9600      	str	r6, [sp, #0]
 80297b0:	f7ff fd82 	bl	80292b8 <__lo0bits>
 80297b4:	9900      	ldr	r1, [sp, #0]
 80297b6:	b300      	cbz	r0, 80297fa <__d2b+0x82>
 80297b8:	9a01      	ldr	r2, [sp, #4]
 80297ba:	f1c0 0320 	rsb	r3, r0, #32
 80297be:	fa02 f303 	lsl.w	r3, r2, r3
 80297c2:	430b      	orrs	r3, r1
 80297c4:	40c2      	lsrs	r2, r0
 80297c6:	6163      	str	r3, [r4, #20]
 80297c8:	9201      	str	r2, [sp, #4]
 80297ca:	9b01      	ldr	r3, [sp, #4]
 80297cc:	61a3      	str	r3, [r4, #24]
 80297ce:	2b00      	cmp	r3, #0
 80297d0:	bf14      	ite	ne
 80297d2:	2202      	movne	r2, #2
 80297d4:	2201      	moveq	r2, #1
 80297d6:	6122      	str	r2, [r4, #16]
 80297d8:	b1d5      	cbz	r5, 8029810 <__d2b+0x98>
 80297da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80297de:	4405      	add	r5, r0
 80297e0:	f8c9 5000 	str.w	r5, [r9]
 80297e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80297e8:	f8c8 0000 	str.w	r0, [r8]
 80297ec:	4620      	mov	r0, r4
 80297ee:	b003      	add	sp, #12
 80297f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80297f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80297f8:	e7d5      	b.n	80297a6 <__d2b+0x2e>
 80297fa:	6161      	str	r1, [r4, #20]
 80297fc:	e7e5      	b.n	80297ca <__d2b+0x52>
 80297fe:	a801      	add	r0, sp, #4
 8029800:	f7ff fd5a 	bl	80292b8 <__lo0bits>
 8029804:	9b01      	ldr	r3, [sp, #4]
 8029806:	6163      	str	r3, [r4, #20]
 8029808:	2201      	movs	r2, #1
 802980a:	6122      	str	r2, [r4, #16]
 802980c:	3020      	adds	r0, #32
 802980e:	e7e3      	b.n	80297d8 <__d2b+0x60>
 8029810:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8029818:	f8c9 0000 	str.w	r0, [r9]
 802981c:	6918      	ldr	r0, [r3, #16]
 802981e:	f7ff fd2b 	bl	8029278 <__hi0bits>
 8029822:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029826:	e7df      	b.n	80297e8 <__d2b+0x70>
 8029828:	08047cb9 	.word	0x08047cb9
 802982c:	08047cca 	.word	0x08047cca

08029830 <_calloc_r>:
 8029830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029832:	fba1 2402 	umull	r2, r4, r1, r2
 8029836:	b94c      	cbnz	r4, 802984c <_calloc_r+0x1c>
 8029838:	4611      	mov	r1, r2
 802983a:	9201      	str	r2, [sp, #4]
 802983c:	f7fc faca 	bl	8025dd4 <_malloc_r>
 8029840:	9a01      	ldr	r2, [sp, #4]
 8029842:	4605      	mov	r5, r0
 8029844:	b930      	cbnz	r0, 8029854 <_calloc_r+0x24>
 8029846:	4628      	mov	r0, r5
 8029848:	b003      	add	sp, #12
 802984a:	bd30      	pop	{r4, r5, pc}
 802984c:	220c      	movs	r2, #12
 802984e:	6002      	str	r2, [r0, #0]
 8029850:	2500      	movs	r5, #0
 8029852:	e7f8      	b.n	8029846 <_calloc_r+0x16>
 8029854:	4621      	mov	r1, r4
 8029856:	f7fb ffd7 	bl	8025808 <memset>
 802985a:	e7f4      	b.n	8029846 <_calloc_r+0x16>

0802985c <__ssputs_r>:
 802985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029860:	688e      	ldr	r6, [r1, #8]
 8029862:	429e      	cmp	r6, r3
 8029864:	4682      	mov	sl, r0
 8029866:	460c      	mov	r4, r1
 8029868:	4690      	mov	r8, r2
 802986a:	461f      	mov	r7, r3
 802986c:	d838      	bhi.n	80298e0 <__ssputs_r+0x84>
 802986e:	898a      	ldrh	r2, [r1, #12]
 8029870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029874:	d032      	beq.n	80298dc <__ssputs_r+0x80>
 8029876:	6825      	ldr	r5, [r4, #0]
 8029878:	6909      	ldr	r1, [r1, #16]
 802987a:	eba5 0901 	sub.w	r9, r5, r1
 802987e:	6965      	ldr	r5, [r4, #20]
 8029880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029888:	3301      	adds	r3, #1
 802988a:	444b      	add	r3, r9
 802988c:	106d      	asrs	r5, r5, #1
 802988e:	429d      	cmp	r5, r3
 8029890:	bf38      	it	cc
 8029892:	461d      	movcc	r5, r3
 8029894:	0553      	lsls	r3, r2, #21
 8029896:	d531      	bpl.n	80298fc <__ssputs_r+0xa0>
 8029898:	4629      	mov	r1, r5
 802989a:	f7fc fa9b 	bl	8025dd4 <_malloc_r>
 802989e:	4606      	mov	r6, r0
 80298a0:	b950      	cbnz	r0, 80298b8 <__ssputs_r+0x5c>
 80298a2:	230c      	movs	r3, #12
 80298a4:	f8ca 3000 	str.w	r3, [sl]
 80298a8:	89a3      	ldrh	r3, [r4, #12]
 80298aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298ae:	81a3      	strh	r3, [r4, #12]
 80298b0:	f04f 30ff 	mov.w	r0, #4294967295
 80298b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298b8:	6921      	ldr	r1, [r4, #16]
 80298ba:	464a      	mov	r2, r9
 80298bc:	f7fb ff7c 	bl	80257b8 <memcpy>
 80298c0:	89a3      	ldrh	r3, [r4, #12]
 80298c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80298c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80298ca:	81a3      	strh	r3, [r4, #12]
 80298cc:	6126      	str	r6, [r4, #16]
 80298ce:	6165      	str	r5, [r4, #20]
 80298d0:	444e      	add	r6, r9
 80298d2:	eba5 0509 	sub.w	r5, r5, r9
 80298d6:	6026      	str	r6, [r4, #0]
 80298d8:	60a5      	str	r5, [r4, #8]
 80298da:	463e      	mov	r6, r7
 80298dc:	42be      	cmp	r6, r7
 80298de:	d900      	bls.n	80298e2 <__ssputs_r+0x86>
 80298e0:	463e      	mov	r6, r7
 80298e2:	6820      	ldr	r0, [r4, #0]
 80298e4:	4632      	mov	r2, r6
 80298e6:	4641      	mov	r1, r8
 80298e8:	f7fb ff74 	bl	80257d4 <memmove>
 80298ec:	68a3      	ldr	r3, [r4, #8]
 80298ee:	1b9b      	subs	r3, r3, r6
 80298f0:	60a3      	str	r3, [r4, #8]
 80298f2:	6823      	ldr	r3, [r4, #0]
 80298f4:	4433      	add	r3, r6
 80298f6:	6023      	str	r3, [r4, #0]
 80298f8:	2000      	movs	r0, #0
 80298fa:	e7db      	b.n	80298b4 <__ssputs_r+0x58>
 80298fc:	462a      	mov	r2, r5
 80298fe:	f000 fec5 	bl	802a68c <_realloc_r>
 8029902:	4606      	mov	r6, r0
 8029904:	2800      	cmp	r0, #0
 8029906:	d1e1      	bne.n	80298cc <__ssputs_r+0x70>
 8029908:	6921      	ldr	r1, [r4, #16]
 802990a:	4650      	mov	r0, sl
 802990c:	f7fc f9f6 	bl	8025cfc <_free_r>
 8029910:	e7c7      	b.n	80298a2 <__ssputs_r+0x46>
 8029912:	Address 0x0000000008029912 is out of bounds.


08029914 <_svfiprintf_r>:
 8029914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029918:	4698      	mov	r8, r3
 802991a:	898b      	ldrh	r3, [r1, #12]
 802991c:	061b      	lsls	r3, r3, #24
 802991e:	b09d      	sub	sp, #116	; 0x74
 8029920:	4607      	mov	r7, r0
 8029922:	460d      	mov	r5, r1
 8029924:	4614      	mov	r4, r2
 8029926:	d50e      	bpl.n	8029946 <_svfiprintf_r+0x32>
 8029928:	690b      	ldr	r3, [r1, #16]
 802992a:	b963      	cbnz	r3, 8029946 <_svfiprintf_r+0x32>
 802992c:	2140      	movs	r1, #64	; 0x40
 802992e:	f7fc fa51 	bl	8025dd4 <_malloc_r>
 8029932:	6028      	str	r0, [r5, #0]
 8029934:	6128      	str	r0, [r5, #16]
 8029936:	b920      	cbnz	r0, 8029942 <_svfiprintf_r+0x2e>
 8029938:	230c      	movs	r3, #12
 802993a:	603b      	str	r3, [r7, #0]
 802993c:	f04f 30ff 	mov.w	r0, #4294967295
 8029940:	e0d1      	b.n	8029ae6 <_svfiprintf_r+0x1d2>
 8029942:	2340      	movs	r3, #64	; 0x40
 8029944:	616b      	str	r3, [r5, #20]
 8029946:	2300      	movs	r3, #0
 8029948:	9309      	str	r3, [sp, #36]	; 0x24
 802994a:	2320      	movs	r3, #32
 802994c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029950:	f8cd 800c 	str.w	r8, [sp, #12]
 8029954:	2330      	movs	r3, #48	; 0x30
 8029956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8029b00 <_svfiprintf_r+0x1ec>
 802995a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802995e:	f04f 0901 	mov.w	r9, #1
 8029962:	4623      	mov	r3, r4
 8029964:	469a      	mov	sl, r3
 8029966:	f813 2b01 	ldrb.w	r2, [r3], #1
 802996a:	b10a      	cbz	r2, 8029970 <_svfiprintf_r+0x5c>
 802996c:	2a25      	cmp	r2, #37	; 0x25
 802996e:	d1f9      	bne.n	8029964 <_svfiprintf_r+0x50>
 8029970:	ebba 0b04 	subs.w	fp, sl, r4
 8029974:	d00b      	beq.n	802998e <_svfiprintf_r+0x7a>
 8029976:	465b      	mov	r3, fp
 8029978:	4622      	mov	r2, r4
 802997a:	4629      	mov	r1, r5
 802997c:	4638      	mov	r0, r7
 802997e:	f7ff ff6d 	bl	802985c <__ssputs_r>
 8029982:	3001      	adds	r0, #1
 8029984:	f000 80aa 	beq.w	8029adc <_svfiprintf_r+0x1c8>
 8029988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802998a:	445a      	add	r2, fp
 802998c:	9209      	str	r2, [sp, #36]	; 0x24
 802998e:	f89a 3000 	ldrb.w	r3, [sl]
 8029992:	2b00      	cmp	r3, #0
 8029994:	f000 80a2 	beq.w	8029adc <_svfiprintf_r+0x1c8>
 8029998:	2300      	movs	r3, #0
 802999a:	f04f 32ff 	mov.w	r2, #4294967295
 802999e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80299a2:	f10a 0a01 	add.w	sl, sl, #1
 80299a6:	9304      	str	r3, [sp, #16]
 80299a8:	9307      	str	r3, [sp, #28]
 80299aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80299ae:	931a      	str	r3, [sp, #104]	; 0x68
 80299b0:	4654      	mov	r4, sl
 80299b2:	2205      	movs	r2, #5
 80299b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299b8:	4851      	ldr	r0, [pc, #324]	; (8029b00 <_svfiprintf_r+0x1ec>)
 80299ba:	f7d6 fc59 	bl	8000270 <memchr>
 80299be:	9a04      	ldr	r2, [sp, #16]
 80299c0:	b9d8      	cbnz	r0, 80299fa <_svfiprintf_r+0xe6>
 80299c2:	06d0      	lsls	r0, r2, #27
 80299c4:	bf44      	itt	mi
 80299c6:	2320      	movmi	r3, #32
 80299c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80299cc:	0711      	lsls	r1, r2, #28
 80299ce:	bf44      	itt	mi
 80299d0:	232b      	movmi	r3, #43	; 0x2b
 80299d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80299d6:	f89a 3000 	ldrb.w	r3, [sl]
 80299da:	2b2a      	cmp	r3, #42	; 0x2a
 80299dc:	d015      	beq.n	8029a0a <_svfiprintf_r+0xf6>
 80299de:	9a07      	ldr	r2, [sp, #28]
 80299e0:	4654      	mov	r4, sl
 80299e2:	2000      	movs	r0, #0
 80299e4:	f04f 0c0a 	mov.w	ip, #10
 80299e8:	4621      	mov	r1, r4
 80299ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80299ee:	3b30      	subs	r3, #48	; 0x30
 80299f0:	2b09      	cmp	r3, #9
 80299f2:	d94e      	bls.n	8029a92 <_svfiprintf_r+0x17e>
 80299f4:	b1b0      	cbz	r0, 8029a24 <_svfiprintf_r+0x110>
 80299f6:	9207      	str	r2, [sp, #28]
 80299f8:	e014      	b.n	8029a24 <_svfiprintf_r+0x110>
 80299fa:	eba0 0308 	sub.w	r3, r0, r8
 80299fe:	fa09 f303 	lsl.w	r3, r9, r3
 8029a02:	4313      	orrs	r3, r2
 8029a04:	9304      	str	r3, [sp, #16]
 8029a06:	46a2      	mov	sl, r4
 8029a08:	e7d2      	b.n	80299b0 <_svfiprintf_r+0x9c>
 8029a0a:	9b03      	ldr	r3, [sp, #12]
 8029a0c:	1d19      	adds	r1, r3, #4
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	9103      	str	r1, [sp, #12]
 8029a12:	2b00      	cmp	r3, #0
 8029a14:	bfbb      	ittet	lt
 8029a16:	425b      	neglt	r3, r3
 8029a18:	f042 0202 	orrlt.w	r2, r2, #2
 8029a1c:	9307      	strge	r3, [sp, #28]
 8029a1e:	9307      	strlt	r3, [sp, #28]
 8029a20:	bfb8      	it	lt
 8029a22:	9204      	strlt	r2, [sp, #16]
 8029a24:	7823      	ldrb	r3, [r4, #0]
 8029a26:	2b2e      	cmp	r3, #46	; 0x2e
 8029a28:	d10c      	bne.n	8029a44 <_svfiprintf_r+0x130>
 8029a2a:	7863      	ldrb	r3, [r4, #1]
 8029a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8029a2e:	d135      	bne.n	8029a9c <_svfiprintf_r+0x188>
 8029a30:	9b03      	ldr	r3, [sp, #12]
 8029a32:	1d1a      	adds	r2, r3, #4
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	9203      	str	r2, [sp, #12]
 8029a38:	2b00      	cmp	r3, #0
 8029a3a:	bfb8      	it	lt
 8029a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8029a40:	3402      	adds	r4, #2
 8029a42:	9305      	str	r3, [sp, #20]
 8029a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8029b10 <_svfiprintf_r+0x1fc>
 8029a48:	7821      	ldrb	r1, [r4, #0]
 8029a4a:	2203      	movs	r2, #3
 8029a4c:	4650      	mov	r0, sl
 8029a4e:	f7d6 fc0f 	bl	8000270 <memchr>
 8029a52:	b140      	cbz	r0, 8029a66 <_svfiprintf_r+0x152>
 8029a54:	2340      	movs	r3, #64	; 0x40
 8029a56:	eba0 000a 	sub.w	r0, r0, sl
 8029a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8029a5e:	9b04      	ldr	r3, [sp, #16]
 8029a60:	4303      	orrs	r3, r0
 8029a62:	3401      	adds	r4, #1
 8029a64:	9304      	str	r3, [sp, #16]
 8029a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a6a:	4826      	ldr	r0, [pc, #152]	; (8029b04 <_svfiprintf_r+0x1f0>)
 8029a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029a70:	2206      	movs	r2, #6
 8029a72:	f7d6 fbfd 	bl	8000270 <memchr>
 8029a76:	2800      	cmp	r0, #0
 8029a78:	d038      	beq.n	8029aec <_svfiprintf_r+0x1d8>
 8029a7a:	4b23      	ldr	r3, [pc, #140]	; (8029b08 <_svfiprintf_r+0x1f4>)
 8029a7c:	bb1b      	cbnz	r3, 8029ac6 <_svfiprintf_r+0x1b2>
 8029a7e:	9b03      	ldr	r3, [sp, #12]
 8029a80:	3307      	adds	r3, #7
 8029a82:	f023 0307 	bic.w	r3, r3, #7
 8029a86:	3308      	adds	r3, #8
 8029a88:	9303      	str	r3, [sp, #12]
 8029a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a8c:	4433      	add	r3, r6
 8029a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8029a90:	e767      	b.n	8029962 <_svfiprintf_r+0x4e>
 8029a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8029a96:	460c      	mov	r4, r1
 8029a98:	2001      	movs	r0, #1
 8029a9a:	e7a5      	b.n	80299e8 <_svfiprintf_r+0xd4>
 8029a9c:	2300      	movs	r3, #0
 8029a9e:	3401      	adds	r4, #1
 8029aa0:	9305      	str	r3, [sp, #20]
 8029aa2:	4619      	mov	r1, r3
 8029aa4:	f04f 0c0a 	mov.w	ip, #10
 8029aa8:	4620      	mov	r0, r4
 8029aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029aae:	3a30      	subs	r2, #48	; 0x30
 8029ab0:	2a09      	cmp	r2, #9
 8029ab2:	d903      	bls.n	8029abc <_svfiprintf_r+0x1a8>
 8029ab4:	2b00      	cmp	r3, #0
 8029ab6:	d0c5      	beq.n	8029a44 <_svfiprintf_r+0x130>
 8029ab8:	9105      	str	r1, [sp, #20]
 8029aba:	e7c3      	b.n	8029a44 <_svfiprintf_r+0x130>
 8029abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8029ac0:	4604      	mov	r4, r0
 8029ac2:	2301      	movs	r3, #1
 8029ac4:	e7f0      	b.n	8029aa8 <_svfiprintf_r+0x194>
 8029ac6:	ab03      	add	r3, sp, #12
 8029ac8:	9300      	str	r3, [sp, #0]
 8029aca:	462a      	mov	r2, r5
 8029acc:	4b0f      	ldr	r3, [pc, #60]	; (8029b0c <_svfiprintf_r+0x1f8>)
 8029ace:	a904      	add	r1, sp, #16
 8029ad0:	4638      	mov	r0, r7
 8029ad2:	f7fc fa85 	bl	8025fe0 <_printf_float>
 8029ad6:	1c42      	adds	r2, r0, #1
 8029ad8:	4606      	mov	r6, r0
 8029ada:	d1d6      	bne.n	8029a8a <_svfiprintf_r+0x176>
 8029adc:	89ab      	ldrh	r3, [r5, #12]
 8029ade:	065b      	lsls	r3, r3, #25
 8029ae0:	f53f af2c 	bmi.w	802993c <_svfiprintf_r+0x28>
 8029ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029ae6:	b01d      	add	sp, #116	; 0x74
 8029ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029aec:	ab03      	add	r3, sp, #12
 8029aee:	9300      	str	r3, [sp, #0]
 8029af0:	462a      	mov	r2, r5
 8029af2:	4b06      	ldr	r3, [pc, #24]	; (8029b0c <_svfiprintf_r+0x1f8>)
 8029af4:	a904      	add	r1, sp, #16
 8029af6:	4638      	mov	r0, r7
 8029af8:	f7fc fcfe 	bl	80264f8 <_printf_i>
 8029afc:	e7eb      	b.n	8029ad6 <_svfiprintf_r+0x1c2>
 8029afe:	bf00      	nop
 8029b00:	08047e24 	.word	0x08047e24
 8029b04:	08047e2e 	.word	0x08047e2e
 8029b08:	08025fe1 	.word	0x08025fe1
 8029b0c:	0802985d 	.word	0x0802985d
 8029b10:	08047e2a 	.word	0x08047e2a

08029b14 <_sungetc_r>:
 8029b14:	b538      	push	{r3, r4, r5, lr}
 8029b16:	1c4b      	adds	r3, r1, #1
 8029b18:	4614      	mov	r4, r2
 8029b1a:	d103      	bne.n	8029b24 <_sungetc_r+0x10>
 8029b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8029b20:	4628      	mov	r0, r5
 8029b22:	bd38      	pop	{r3, r4, r5, pc}
 8029b24:	8993      	ldrh	r3, [r2, #12]
 8029b26:	f023 0320 	bic.w	r3, r3, #32
 8029b2a:	8193      	strh	r3, [r2, #12]
 8029b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029b2e:	6852      	ldr	r2, [r2, #4]
 8029b30:	b2cd      	uxtb	r5, r1
 8029b32:	b18b      	cbz	r3, 8029b58 <_sungetc_r+0x44>
 8029b34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029b36:	4293      	cmp	r3, r2
 8029b38:	dd08      	ble.n	8029b4c <_sungetc_r+0x38>
 8029b3a:	6823      	ldr	r3, [r4, #0]
 8029b3c:	1e5a      	subs	r2, r3, #1
 8029b3e:	6022      	str	r2, [r4, #0]
 8029b40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029b44:	6863      	ldr	r3, [r4, #4]
 8029b46:	3301      	adds	r3, #1
 8029b48:	6063      	str	r3, [r4, #4]
 8029b4a:	e7e9      	b.n	8029b20 <_sungetc_r+0xc>
 8029b4c:	4621      	mov	r1, r4
 8029b4e:	f000 fd1b 	bl	802a588 <__submore>
 8029b52:	2800      	cmp	r0, #0
 8029b54:	d0f1      	beq.n	8029b3a <_sungetc_r+0x26>
 8029b56:	e7e1      	b.n	8029b1c <_sungetc_r+0x8>
 8029b58:	6921      	ldr	r1, [r4, #16]
 8029b5a:	6823      	ldr	r3, [r4, #0]
 8029b5c:	b151      	cbz	r1, 8029b74 <_sungetc_r+0x60>
 8029b5e:	4299      	cmp	r1, r3
 8029b60:	d208      	bcs.n	8029b74 <_sungetc_r+0x60>
 8029b62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8029b66:	42a9      	cmp	r1, r5
 8029b68:	d104      	bne.n	8029b74 <_sungetc_r+0x60>
 8029b6a:	3b01      	subs	r3, #1
 8029b6c:	3201      	adds	r2, #1
 8029b6e:	6023      	str	r3, [r4, #0]
 8029b70:	6062      	str	r2, [r4, #4]
 8029b72:	e7d5      	b.n	8029b20 <_sungetc_r+0xc>
 8029b74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8029b7e:	2303      	movs	r3, #3
 8029b80:	63a3      	str	r3, [r4, #56]	; 0x38
 8029b82:	4623      	mov	r3, r4
 8029b84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029b88:	6023      	str	r3, [r4, #0]
 8029b8a:	2301      	movs	r3, #1
 8029b8c:	e7dc      	b.n	8029b48 <_sungetc_r+0x34>

08029b8e <__ssrefill_r>:
 8029b8e:	b510      	push	{r4, lr}
 8029b90:	460c      	mov	r4, r1
 8029b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029b94:	b169      	cbz	r1, 8029bb2 <__ssrefill_r+0x24>
 8029b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b9a:	4299      	cmp	r1, r3
 8029b9c:	d001      	beq.n	8029ba2 <__ssrefill_r+0x14>
 8029b9e:	f7fc f8ad 	bl	8025cfc <_free_r>
 8029ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029ba4:	6063      	str	r3, [r4, #4]
 8029ba6:	2000      	movs	r0, #0
 8029ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8029baa:	b113      	cbz	r3, 8029bb2 <__ssrefill_r+0x24>
 8029bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029bae:	6023      	str	r3, [r4, #0]
 8029bb0:	bd10      	pop	{r4, pc}
 8029bb2:	6923      	ldr	r3, [r4, #16]
 8029bb4:	6023      	str	r3, [r4, #0]
 8029bb6:	2300      	movs	r3, #0
 8029bb8:	6063      	str	r3, [r4, #4]
 8029bba:	89a3      	ldrh	r3, [r4, #12]
 8029bbc:	f043 0320 	orr.w	r3, r3, #32
 8029bc0:	81a3      	strh	r3, [r4, #12]
 8029bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8029bc6:	e7f3      	b.n	8029bb0 <__ssrefill_r+0x22>

08029bc8 <__ssvfiscanf_r>:
 8029bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029bcc:	460c      	mov	r4, r1
 8029bce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8029bd2:	2100      	movs	r1, #0
 8029bd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8029bd8:	49a6      	ldr	r1, [pc, #664]	; (8029e74 <__ssvfiscanf_r+0x2ac>)
 8029bda:	91a0      	str	r1, [sp, #640]	; 0x280
 8029bdc:	f10d 0804 	add.w	r8, sp, #4
 8029be0:	49a5      	ldr	r1, [pc, #660]	; (8029e78 <__ssvfiscanf_r+0x2b0>)
 8029be2:	4fa6      	ldr	r7, [pc, #664]	; (8029e7c <__ssvfiscanf_r+0x2b4>)
 8029be4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8029e80 <__ssvfiscanf_r+0x2b8>
 8029be8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8029bec:	4606      	mov	r6, r0
 8029bee:	91a1      	str	r1, [sp, #644]	; 0x284
 8029bf0:	9300      	str	r3, [sp, #0]
 8029bf2:	7813      	ldrb	r3, [r2, #0]
 8029bf4:	2b00      	cmp	r3, #0
 8029bf6:	f000 815a 	beq.w	8029eae <__ssvfiscanf_r+0x2e6>
 8029bfa:	5dd9      	ldrb	r1, [r3, r7]
 8029bfc:	f011 0108 	ands.w	r1, r1, #8
 8029c00:	f102 0501 	add.w	r5, r2, #1
 8029c04:	d019      	beq.n	8029c3a <__ssvfiscanf_r+0x72>
 8029c06:	6863      	ldr	r3, [r4, #4]
 8029c08:	2b00      	cmp	r3, #0
 8029c0a:	dd0f      	ble.n	8029c2c <__ssvfiscanf_r+0x64>
 8029c0c:	6823      	ldr	r3, [r4, #0]
 8029c0e:	781a      	ldrb	r2, [r3, #0]
 8029c10:	5cba      	ldrb	r2, [r7, r2]
 8029c12:	0712      	lsls	r2, r2, #28
 8029c14:	d401      	bmi.n	8029c1a <__ssvfiscanf_r+0x52>
 8029c16:	462a      	mov	r2, r5
 8029c18:	e7eb      	b.n	8029bf2 <__ssvfiscanf_r+0x2a>
 8029c1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029c1c:	3201      	adds	r2, #1
 8029c1e:	9245      	str	r2, [sp, #276]	; 0x114
 8029c20:	6862      	ldr	r2, [r4, #4]
 8029c22:	3301      	adds	r3, #1
 8029c24:	3a01      	subs	r2, #1
 8029c26:	6062      	str	r2, [r4, #4]
 8029c28:	6023      	str	r3, [r4, #0]
 8029c2a:	e7ec      	b.n	8029c06 <__ssvfiscanf_r+0x3e>
 8029c2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029c2e:	4621      	mov	r1, r4
 8029c30:	4630      	mov	r0, r6
 8029c32:	4798      	blx	r3
 8029c34:	2800      	cmp	r0, #0
 8029c36:	d0e9      	beq.n	8029c0c <__ssvfiscanf_r+0x44>
 8029c38:	e7ed      	b.n	8029c16 <__ssvfiscanf_r+0x4e>
 8029c3a:	2b25      	cmp	r3, #37	; 0x25
 8029c3c:	d012      	beq.n	8029c64 <__ssvfiscanf_r+0x9c>
 8029c3e:	469a      	mov	sl, r3
 8029c40:	6863      	ldr	r3, [r4, #4]
 8029c42:	2b00      	cmp	r3, #0
 8029c44:	f340 8091 	ble.w	8029d6a <__ssvfiscanf_r+0x1a2>
 8029c48:	6822      	ldr	r2, [r4, #0]
 8029c4a:	7813      	ldrb	r3, [r2, #0]
 8029c4c:	4553      	cmp	r3, sl
 8029c4e:	f040 812e 	bne.w	8029eae <__ssvfiscanf_r+0x2e6>
 8029c52:	6863      	ldr	r3, [r4, #4]
 8029c54:	3b01      	subs	r3, #1
 8029c56:	6063      	str	r3, [r4, #4]
 8029c58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8029c5a:	3201      	adds	r2, #1
 8029c5c:	3301      	adds	r3, #1
 8029c5e:	6022      	str	r2, [r4, #0]
 8029c60:	9345      	str	r3, [sp, #276]	; 0x114
 8029c62:	e7d8      	b.n	8029c16 <__ssvfiscanf_r+0x4e>
 8029c64:	9141      	str	r1, [sp, #260]	; 0x104
 8029c66:	9143      	str	r1, [sp, #268]	; 0x10c
 8029c68:	7853      	ldrb	r3, [r2, #1]
 8029c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8029c6c:	bf02      	ittt	eq
 8029c6e:	2310      	moveq	r3, #16
 8029c70:	1c95      	addeq	r5, r2, #2
 8029c72:	9341      	streq	r3, [sp, #260]	; 0x104
 8029c74:	220a      	movs	r2, #10
 8029c76:	46aa      	mov	sl, r5
 8029c78:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8029c7c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029c80:	2b09      	cmp	r3, #9
 8029c82:	d91d      	bls.n	8029cc0 <__ssvfiscanf_r+0xf8>
 8029c84:	487e      	ldr	r0, [pc, #504]	; (8029e80 <__ssvfiscanf_r+0x2b8>)
 8029c86:	2203      	movs	r2, #3
 8029c88:	f7d6 faf2 	bl	8000270 <memchr>
 8029c8c:	b140      	cbz	r0, 8029ca0 <__ssvfiscanf_r+0xd8>
 8029c8e:	2301      	movs	r3, #1
 8029c90:	eba0 0009 	sub.w	r0, r0, r9
 8029c94:	fa03 f000 	lsl.w	r0, r3, r0
 8029c98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029c9a:	4318      	orrs	r0, r3
 8029c9c:	9041      	str	r0, [sp, #260]	; 0x104
 8029c9e:	4655      	mov	r5, sl
 8029ca0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029ca4:	2b78      	cmp	r3, #120	; 0x78
 8029ca6:	d806      	bhi.n	8029cb6 <__ssvfiscanf_r+0xee>
 8029ca8:	2b57      	cmp	r3, #87	; 0x57
 8029caa:	d810      	bhi.n	8029cce <__ssvfiscanf_r+0x106>
 8029cac:	2b25      	cmp	r3, #37	; 0x25
 8029cae:	d0c6      	beq.n	8029c3e <__ssvfiscanf_r+0x76>
 8029cb0:	d856      	bhi.n	8029d60 <__ssvfiscanf_r+0x198>
 8029cb2:	2b00      	cmp	r3, #0
 8029cb4:	d064      	beq.n	8029d80 <__ssvfiscanf_r+0x1b8>
 8029cb6:	2303      	movs	r3, #3
 8029cb8:	9347      	str	r3, [sp, #284]	; 0x11c
 8029cba:	230a      	movs	r3, #10
 8029cbc:	9342      	str	r3, [sp, #264]	; 0x108
 8029cbe:	e071      	b.n	8029da4 <__ssvfiscanf_r+0x1dc>
 8029cc0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029cc2:	fb02 1103 	mla	r1, r2, r3, r1
 8029cc6:	3930      	subs	r1, #48	; 0x30
 8029cc8:	9143      	str	r1, [sp, #268]	; 0x10c
 8029cca:	4655      	mov	r5, sl
 8029ccc:	e7d3      	b.n	8029c76 <__ssvfiscanf_r+0xae>
 8029cce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8029cd2:	2a20      	cmp	r2, #32
 8029cd4:	d8ef      	bhi.n	8029cb6 <__ssvfiscanf_r+0xee>
 8029cd6:	a101      	add	r1, pc, #4	; (adr r1, 8029cdc <__ssvfiscanf_r+0x114>)
 8029cd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8029cdc:	08029d8f 	.word	0x08029d8f
 8029ce0:	08029cb7 	.word	0x08029cb7
 8029ce4:	08029cb7 	.word	0x08029cb7
 8029ce8:	08029ded 	.word	0x08029ded
 8029cec:	08029cb7 	.word	0x08029cb7
 8029cf0:	08029cb7 	.word	0x08029cb7
 8029cf4:	08029cb7 	.word	0x08029cb7
 8029cf8:	08029cb7 	.word	0x08029cb7
 8029cfc:	08029cb7 	.word	0x08029cb7
 8029d00:	08029cb7 	.word	0x08029cb7
 8029d04:	08029cb7 	.word	0x08029cb7
 8029d08:	08029e03 	.word	0x08029e03
 8029d0c:	08029dd9 	.word	0x08029dd9
 8029d10:	08029d67 	.word	0x08029d67
 8029d14:	08029d67 	.word	0x08029d67
 8029d18:	08029d67 	.word	0x08029d67
 8029d1c:	08029cb7 	.word	0x08029cb7
 8029d20:	08029ddd 	.word	0x08029ddd
 8029d24:	08029cb7 	.word	0x08029cb7
 8029d28:	08029cb7 	.word	0x08029cb7
 8029d2c:	08029cb7 	.word	0x08029cb7
 8029d30:	08029cb7 	.word	0x08029cb7
 8029d34:	08029e13 	.word	0x08029e13
 8029d38:	08029de5 	.word	0x08029de5
 8029d3c:	08029d87 	.word	0x08029d87
 8029d40:	08029cb7 	.word	0x08029cb7
 8029d44:	08029cb7 	.word	0x08029cb7
 8029d48:	08029e0f 	.word	0x08029e0f
 8029d4c:	08029cb7 	.word	0x08029cb7
 8029d50:	08029dd9 	.word	0x08029dd9
 8029d54:	08029cb7 	.word	0x08029cb7
 8029d58:	08029cb7 	.word	0x08029cb7
 8029d5c:	08029d8f 	.word	0x08029d8f
 8029d60:	3b45      	subs	r3, #69	; 0x45
 8029d62:	2b02      	cmp	r3, #2
 8029d64:	d8a7      	bhi.n	8029cb6 <__ssvfiscanf_r+0xee>
 8029d66:	2305      	movs	r3, #5
 8029d68:	e01b      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029d6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029d6c:	4621      	mov	r1, r4
 8029d6e:	4630      	mov	r0, r6
 8029d70:	4798      	blx	r3
 8029d72:	2800      	cmp	r0, #0
 8029d74:	f43f af68 	beq.w	8029c48 <__ssvfiscanf_r+0x80>
 8029d78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029d7a:	2800      	cmp	r0, #0
 8029d7c:	f040 808d 	bne.w	8029e9a <__ssvfiscanf_r+0x2d2>
 8029d80:	f04f 30ff 	mov.w	r0, #4294967295
 8029d84:	e08f      	b.n	8029ea6 <__ssvfiscanf_r+0x2de>
 8029d86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029d88:	f042 0220 	orr.w	r2, r2, #32
 8029d8c:	9241      	str	r2, [sp, #260]	; 0x104
 8029d8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029d94:	9241      	str	r2, [sp, #260]	; 0x104
 8029d96:	2210      	movs	r2, #16
 8029d98:	2b6f      	cmp	r3, #111	; 0x6f
 8029d9a:	9242      	str	r2, [sp, #264]	; 0x108
 8029d9c:	bf34      	ite	cc
 8029d9e:	2303      	movcc	r3, #3
 8029da0:	2304      	movcs	r3, #4
 8029da2:	9347      	str	r3, [sp, #284]	; 0x11c
 8029da4:	6863      	ldr	r3, [r4, #4]
 8029da6:	2b00      	cmp	r3, #0
 8029da8:	dd42      	ble.n	8029e30 <__ssvfiscanf_r+0x268>
 8029daa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029dac:	0659      	lsls	r1, r3, #25
 8029dae:	d404      	bmi.n	8029dba <__ssvfiscanf_r+0x1f2>
 8029db0:	6823      	ldr	r3, [r4, #0]
 8029db2:	781a      	ldrb	r2, [r3, #0]
 8029db4:	5cba      	ldrb	r2, [r7, r2]
 8029db6:	0712      	lsls	r2, r2, #28
 8029db8:	d441      	bmi.n	8029e3e <__ssvfiscanf_r+0x276>
 8029dba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8029dbc:	2b02      	cmp	r3, #2
 8029dbe:	dc50      	bgt.n	8029e62 <__ssvfiscanf_r+0x29a>
 8029dc0:	466b      	mov	r3, sp
 8029dc2:	4622      	mov	r2, r4
 8029dc4:	a941      	add	r1, sp, #260	; 0x104
 8029dc6:	4630      	mov	r0, r6
 8029dc8:	f000 f9d0 	bl	802a16c <_scanf_chars>
 8029dcc:	2801      	cmp	r0, #1
 8029dce:	d06e      	beq.n	8029eae <__ssvfiscanf_r+0x2e6>
 8029dd0:	2802      	cmp	r0, #2
 8029dd2:	f47f af20 	bne.w	8029c16 <__ssvfiscanf_r+0x4e>
 8029dd6:	e7cf      	b.n	8029d78 <__ssvfiscanf_r+0x1b0>
 8029dd8:	220a      	movs	r2, #10
 8029dda:	e7dd      	b.n	8029d98 <__ssvfiscanf_r+0x1d0>
 8029ddc:	2300      	movs	r3, #0
 8029dde:	9342      	str	r3, [sp, #264]	; 0x108
 8029de0:	2303      	movs	r3, #3
 8029de2:	e7de      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029de4:	2308      	movs	r3, #8
 8029de6:	9342      	str	r3, [sp, #264]	; 0x108
 8029de8:	2304      	movs	r3, #4
 8029dea:	e7da      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029dec:	4629      	mov	r1, r5
 8029dee:	4640      	mov	r0, r8
 8029df0:	f000 fb92 	bl	802a518 <__sccl>
 8029df4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029dfa:	9341      	str	r3, [sp, #260]	; 0x104
 8029dfc:	4605      	mov	r5, r0
 8029dfe:	2301      	movs	r3, #1
 8029e00:	e7cf      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029e02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029e08:	9341      	str	r3, [sp, #260]	; 0x104
 8029e0a:	2300      	movs	r3, #0
 8029e0c:	e7c9      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029e0e:	2302      	movs	r3, #2
 8029e10:	e7c7      	b.n	8029da2 <__ssvfiscanf_r+0x1da>
 8029e12:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029e14:	06c3      	lsls	r3, r0, #27
 8029e16:	f53f aefe 	bmi.w	8029c16 <__ssvfiscanf_r+0x4e>
 8029e1a:	9b00      	ldr	r3, [sp, #0]
 8029e1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029e1e:	1d19      	adds	r1, r3, #4
 8029e20:	9100      	str	r1, [sp, #0]
 8029e22:	681b      	ldr	r3, [r3, #0]
 8029e24:	f010 0f01 	tst.w	r0, #1
 8029e28:	bf14      	ite	ne
 8029e2a:	801a      	strhne	r2, [r3, #0]
 8029e2c:	601a      	streq	r2, [r3, #0]
 8029e2e:	e6f2      	b.n	8029c16 <__ssvfiscanf_r+0x4e>
 8029e30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029e32:	4621      	mov	r1, r4
 8029e34:	4630      	mov	r0, r6
 8029e36:	4798      	blx	r3
 8029e38:	2800      	cmp	r0, #0
 8029e3a:	d0b6      	beq.n	8029daa <__ssvfiscanf_r+0x1e2>
 8029e3c:	e79c      	b.n	8029d78 <__ssvfiscanf_r+0x1b0>
 8029e3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029e40:	3201      	adds	r2, #1
 8029e42:	9245      	str	r2, [sp, #276]	; 0x114
 8029e44:	6862      	ldr	r2, [r4, #4]
 8029e46:	3a01      	subs	r2, #1
 8029e48:	2a00      	cmp	r2, #0
 8029e4a:	6062      	str	r2, [r4, #4]
 8029e4c:	dd02      	ble.n	8029e54 <__ssvfiscanf_r+0x28c>
 8029e4e:	3301      	adds	r3, #1
 8029e50:	6023      	str	r3, [r4, #0]
 8029e52:	e7ad      	b.n	8029db0 <__ssvfiscanf_r+0x1e8>
 8029e54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029e56:	4621      	mov	r1, r4
 8029e58:	4630      	mov	r0, r6
 8029e5a:	4798      	blx	r3
 8029e5c:	2800      	cmp	r0, #0
 8029e5e:	d0a7      	beq.n	8029db0 <__ssvfiscanf_r+0x1e8>
 8029e60:	e78a      	b.n	8029d78 <__ssvfiscanf_r+0x1b0>
 8029e62:	2b04      	cmp	r3, #4
 8029e64:	dc0e      	bgt.n	8029e84 <__ssvfiscanf_r+0x2bc>
 8029e66:	466b      	mov	r3, sp
 8029e68:	4622      	mov	r2, r4
 8029e6a:	a941      	add	r1, sp, #260	; 0x104
 8029e6c:	4630      	mov	r0, r6
 8029e6e:	f000 f9d7 	bl	802a220 <_scanf_i>
 8029e72:	e7ab      	b.n	8029dcc <__ssvfiscanf_r+0x204>
 8029e74:	08029b15 	.word	0x08029b15
 8029e78:	08029b8f 	.word	0x08029b8f
 8029e7c:	08047579 	.word	0x08047579
 8029e80:	08047e2a 	.word	0x08047e2a
 8029e84:	4b0b      	ldr	r3, [pc, #44]	; (8029eb4 <__ssvfiscanf_r+0x2ec>)
 8029e86:	2b00      	cmp	r3, #0
 8029e88:	f43f aec5 	beq.w	8029c16 <__ssvfiscanf_r+0x4e>
 8029e8c:	466b      	mov	r3, sp
 8029e8e:	4622      	mov	r2, r4
 8029e90:	a941      	add	r1, sp, #260	; 0x104
 8029e92:	4630      	mov	r0, r6
 8029e94:	f3af 8000 	nop.w
 8029e98:	e798      	b.n	8029dcc <__ssvfiscanf_r+0x204>
 8029e9a:	89a3      	ldrh	r3, [r4, #12]
 8029e9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029ea0:	bf18      	it	ne
 8029ea2:	f04f 30ff 	movne.w	r0, #4294967295
 8029ea6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8029eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029eae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029eb0:	e7f9      	b.n	8029ea6 <__ssvfiscanf_r+0x2de>
 8029eb2:	bf00      	nop
 8029eb4:	00000000 	.word	0x00000000

08029eb8 <__sfputc_r>:
 8029eb8:	6893      	ldr	r3, [r2, #8]
 8029eba:	3b01      	subs	r3, #1
 8029ebc:	2b00      	cmp	r3, #0
 8029ebe:	b410      	push	{r4}
 8029ec0:	6093      	str	r3, [r2, #8]
 8029ec2:	da08      	bge.n	8029ed6 <__sfputc_r+0x1e>
 8029ec4:	6994      	ldr	r4, [r2, #24]
 8029ec6:	42a3      	cmp	r3, r4
 8029ec8:	db01      	blt.n	8029ece <__sfputc_r+0x16>
 8029eca:	290a      	cmp	r1, #10
 8029ecc:	d103      	bne.n	8029ed6 <__sfputc_r+0x1e>
 8029ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ed2:	f7fd bf75 	b.w	8027dc0 <__swbuf_r>
 8029ed6:	6813      	ldr	r3, [r2, #0]
 8029ed8:	1c58      	adds	r0, r3, #1
 8029eda:	6010      	str	r0, [r2, #0]
 8029edc:	7019      	strb	r1, [r3, #0]
 8029ede:	4608      	mov	r0, r1
 8029ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ee4:	4770      	bx	lr

08029ee6 <__sfputs_r>:
 8029ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ee8:	4606      	mov	r6, r0
 8029eea:	460f      	mov	r7, r1
 8029eec:	4614      	mov	r4, r2
 8029eee:	18d5      	adds	r5, r2, r3
 8029ef0:	42ac      	cmp	r4, r5
 8029ef2:	d101      	bne.n	8029ef8 <__sfputs_r+0x12>
 8029ef4:	2000      	movs	r0, #0
 8029ef6:	e007      	b.n	8029f08 <__sfputs_r+0x22>
 8029ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029efc:	463a      	mov	r2, r7
 8029efe:	4630      	mov	r0, r6
 8029f00:	f7ff ffda 	bl	8029eb8 <__sfputc_r>
 8029f04:	1c43      	adds	r3, r0, #1
 8029f06:	d1f3      	bne.n	8029ef0 <__sfputs_r+0xa>
 8029f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029f0a:	Address 0x0000000008029f0a is out of bounds.


08029f0c <_vfiprintf_r>:
 8029f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f10:	460d      	mov	r5, r1
 8029f12:	b09d      	sub	sp, #116	; 0x74
 8029f14:	4614      	mov	r4, r2
 8029f16:	4698      	mov	r8, r3
 8029f18:	4606      	mov	r6, r0
 8029f1a:	b118      	cbz	r0, 8029f24 <_vfiprintf_r+0x18>
 8029f1c:	6983      	ldr	r3, [r0, #24]
 8029f1e:	b90b      	cbnz	r3, 8029f24 <_vfiprintf_r+0x18>
 8029f20:	f7fb fa50 	bl	80253c4 <__sinit>
 8029f24:	4b89      	ldr	r3, [pc, #548]	; (802a14c <_vfiprintf_r+0x240>)
 8029f26:	429d      	cmp	r5, r3
 8029f28:	d11b      	bne.n	8029f62 <_vfiprintf_r+0x56>
 8029f2a:	6875      	ldr	r5, [r6, #4]
 8029f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029f2e:	07d9      	lsls	r1, r3, #31
 8029f30:	d405      	bmi.n	8029f3e <_vfiprintf_r+0x32>
 8029f32:	89ab      	ldrh	r3, [r5, #12]
 8029f34:	059a      	lsls	r2, r3, #22
 8029f36:	d402      	bmi.n	8029f3e <_vfiprintf_r+0x32>
 8029f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f3a:	f7fb fc19 	bl	8025770 <__retarget_lock_acquire_recursive>
 8029f3e:	89ab      	ldrh	r3, [r5, #12]
 8029f40:	071b      	lsls	r3, r3, #28
 8029f42:	d501      	bpl.n	8029f48 <_vfiprintf_r+0x3c>
 8029f44:	692b      	ldr	r3, [r5, #16]
 8029f46:	b9eb      	cbnz	r3, 8029f84 <_vfiprintf_r+0x78>
 8029f48:	4629      	mov	r1, r5
 8029f4a:	4630      	mov	r0, r6
 8029f4c:	f7fd ff9c 	bl	8027e88 <__swsetup_r>
 8029f50:	b1c0      	cbz	r0, 8029f84 <_vfiprintf_r+0x78>
 8029f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029f54:	07dc      	lsls	r4, r3, #31
 8029f56:	d50e      	bpl.n	8029f76 <_vfiprintf_r+0x6a>
 8029f58:	f04f 30ff 	mov.w	r0, #4294967295
 8029f5c:	b01d      	add	sp, #116	; 0x74
 8029f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f62:	4b7b      	ldr	r3, [pc, #492]	; (802a150 <_vfiprintf_r+0x244>)
 8029f64:	429d      	cmp	r5, r3
 8029f66:	d101      	bne.n	8029f6c <_vfiprintf_r+0x60>
 8029f68:	68b5      	ldr	r5, [r6, #8]
 8029f6a:	e7df      	b.n	8029f2c <_vfiprintf_r+0x20>
 8029f6c:	4b79      	ldr	r3, [pc, #484]	; (802a154 <_vfiprintf_r+0x248>)
 8029f6e:	429d      	cmp	r5, r3
 8029f70:	bf08      	it	eq
 8029f72:	68f5      	ldreq	r5, [r6, #12]
 8029f74:	e7da      	b.n	8029f2c <_vfiprintf_r+0x20>
 8029f76:	89ab      	ldrh	r3, [r5, #12]
 8029f78:	0598      	lsls	r0, r3, #22
 8029f7a:	d4ed      	bmi.n	8029f58 <_vfiprintf_r+0x4c>
 8029f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f7e:	f7fb fbf9 	bl	8025774 <__retarget_lock_release_recursive>
 8029f82:	e7e9      	b.n	8029f58 <_vfiprintf_r+0x4c>
 8029f84:	2300      	movs	r3, #0
 8029f86:	9309      	str	r3, [sp, #36]	; 0x24
 8029f88:	2320      	movs	r3, #32
 8029f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8029f92:	2330      	movs	r3, #48	; 0x30
 8029f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a158 <_vfiprintf_r+0x24c>
 8029f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029f9c:	f04f 0901 	mov.w	r9, #1
 8029fa0:	4623      	mov	r3, r4
 8029fa2:	469a      	mov	sl, r3
 8029fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fa8:	b10a      	cbz	r2, 8029fae <_vfiprintf_r+0xa2>
 8029faa:	2a25      	cmp	r2, #37	; 0x25
 8029fac:	d1f9      	bne.n	8029fa2 <_vfiprintf_r+0x96>
 8029fae:	ebba 0b04 	subs.w	fp, sl, r4
 8029fb2:	d00b      	beq.n	8029fcc <_vfiprintf_r+0xc0>
 8029fb4:	465b      	mov	r3, fp
 8029fb6:	4622      	mov	r2, r4
 8029fb8:	4629      	mov	r1, r5
 8029fba:	4630      	mov	r0, r6
 8029fbc:	f7ff ff93 	bl	8029ee6 <__sfputs_r>
 8029fc0:	3001      	adds	r0, #1
 8029fc2:	f000 80aa 	beq.w	802a11a <_vfiprintf_r+0x20e>
 8029fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029fc8:	445a      	add	r2, fp
 8029fca:	9209      	str	r2, [sp, #36]	; 0x24
 8029fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	f000 80a2 	beq.w	802a11a <_vfiprintf_r+0x20e>
 8029fd6:	2300      	movs	r3, #0
 8029fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8029fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029fe0:	f10a 0a01 	add.w	sl, sl, #1
 8029fe4:	9304      	str	r3, [sp, #16]
 8029fe6:	9307      	str	r3, [sp, #28]
 8029fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029fec:	931a      	str	r3, [sp, #104]	; 0x68
 8029fee:	4654      	mov	r4, sl
 8029ff0:	2205      	movs	r2, #5
 8029ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ff6:	4858      	ldr	r0, [pc, #352]	; (802a158 <_vfiprintf_r+0x24c>)
 8029ff8:	f7d6 f93a 	bl	8000270 <memchr>
 8029ffc:	9a04      	ldr	r2, [sp, #16]
 8029ffe:	b9d8      	cbnz	r0, 802a038 <_vfiprintf_r+0x12c>
 802a000:	06d1      	lsls	r1, r2, #27
 802a002:	bf44      	itt	mi
 802a004:	2320      	movmi	r3, #32
 802a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a00a:	0713      	lsls	r3, r2, #28
 802a00c:	bf44      	itt	mi
 802a00e:	232b      	movmi	r3, #43	; 0x2b
 802a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a014:	f89a 3000 	ldrb.w	r3, [sl]
 802a018:	2b2a      	cmp	r3, #42	; 0x2a
 802a01a:	d015      	beq.n	802a048 <_vfiprintf_r+0x13c>
 802a01c:	9a07      	ldr	r2, [sp, #28]
 802a01e:	4654      	mov	r4, sl
 802a020:	2000      	movs	r0, #0
 802a022:	f04f 0c0a 	mov.w	ip, #10
 802a026:	4621      	mov	r1, r4
 802a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a02c:	3b30      	subs	r3, #48	; 0x30
 802a02e:	2b09      	cmp	r3, #9
 802a030:	d94e      	bls.n	802a0d0 <_vfiprintf_r+0x1c4>
 802a032:	b1b0      	cbz	r0, 802a062 <_vfiprintf_r+0x156>
 802a034:	9207      	str	r2, [sp, #28]
 802a036:	e014      	b.n	802a062 <_vfiprintf_r+0x156>
 802a038:	eba0 0308 	sub.w	r3, r0, r8
 802a03c:	fa09 f303 	lsl.w	r3, r9, r3
 802a040:	4313      	orrs	r3, r2
 802a042:	9304      	str	r3, [sp, #16]
 802a044:	46a2      	mov	sl, r4
 802a046:	e7d2      	b.n	8029fee <_vfiprintf_r+0xe2>
 802a048:	9b03      	ldr	r3, [sp, #12]
 802a04a:	1d19      	adds	r1, r3, #4
 802a04c:	681b      	ldr	r3, [r3, #0]
 802a04e:	9103      	str	r1, [sp, #12]
 802a050:	2b00      	cmp	r3, #0
 802a052:	bfbb      	ittet	lt
 802a054:	425b      	neglt	r3, r3
 802a056:	f042 0202 	orrlt.w	r2, r2, #2
 802a05a:	9307      	strge	r3, [sp, #28]
 802a05c:	9307      	strlt	r3, [sp, #28]
 802a05e:	bfb8      	it	lt
 802a060:	9204      	strlt	r2, [sp, #16]
 802a062:	7823      	ldrb	r3, [r4, #0]
 802a064:	2b2e      	cmp	r3, #46	; 0x2e
 802a066:	d10c      	bne.n	802a082 <_vfiprintf_r+0x176>
 802a068:	7863      	ldrb	r3, [r4, #1]
 802a06a:	2b2a      	cmp	r3, #42	; 0x2a
 802a06c:	d135      	bne.n	802a0da <_vfiprintf_r+0x1ce>
 802a06e:	9b03      	ldr	r3, [sp, #12]
 802a070:	1d1a      	adds	r2, r3, #4
 802a072:	681b      	ldr	r3, [r3, #0]
 802a074:	9203      	str	r2, [sp, #12]
 802a076:	2b00      	cmp	r3, #0
 802a078:	bfb8      	it	lt
 802a07a:	f04f 33ff 	movlt.w	r3, #4294967295
 802a07e:	3402      	adds	r4, #2
 802a080:	9305      	str	r3, [sp, #20]
 802a082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a168 <_vfiprintf_r+0x25c>
 802a086:	7821      	ldrb	r1, [r4, #0]
 802a088:	2203      	movs	r2, #3
 802a08a:	4650      	mov	r0, sl
 802a08c:	f7d6 f8f0 	bl	8000270 <memchr>
 802a090:	b140      	cbz	r0, 802a0a4 <_vfiprintf_r+0x198>
 802a092:	2340      	movs	r3, #64	; 0x40
 802a094:	eba0 000a 	sub.w	r0, r0, sl
 802a098:	fa03 f000 	lsl.w	r0, r3, r0
 802a09c:	9b04      	ldr	r3, [sp, #16]
 802a09e:	4303      	orrs	r3, r0
 802a0a0:	3401      	adds	r4, #1
 802a0a2:	9304      	str	r3, [sp, #16]
 802a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a0a8:	482c      	ldr	r0, [pc, #176]	; (802a15c <_vfiprintf_r+0x250>)
 802a0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a0ae:	2206      	movs	r2, #6
 802a0b0:	f7d6 f8de 	bl	8000270 <memchr>
 802a0b4:	2800      	cmp	r0, #0
 802a0b6:	d03f      	beq.n	802a138 <_vfiprintf_r+0x22c>
 802a0b8:	4b29      	ldr	r3, [pc, #164]	; (802a160 <_vfiprintf_r+0x254>)
 802a0ba:	bb1b      	cbnz	r3, 802a104 <_vfiprintf_r+0x1f8>
 802a0bc:	9b03      	ldr	r3, [sp, #12]
 802a0be:	3307      	adds	r3, #7
 802a0c0:	f023 0307 	bic.w	r3, r3, #7
 802a0c4:	3308      	adds	r3, #8
 802a0c6:	9303      	str	r3, [sp, #12]
 802a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0ca:	443b      	add	r3, r7
 802a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 802a0ce:	e767      	b.n	8029fa0 <_vfiprintf_r+0x94>
 802a0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 802a0d4:	460c      	mov	r4, r1
 802a0d6:	2001      	movs	r0, #1
 802a0d8:	e7a5      	b.n	802a026 <_vfiprintf_r+0x11a>
 802a0da:	2300      	movs	r3, #0
 802a0dc:	3401      	adds	r4, #1
 802a0de:	9305      	str	r3, [sp, #20]
 802a0e0:	4619      	mov	r1, r3
 802a0e2:	f04f 0c0a 	mov.w	ip, #10
 802a0e6:	4620      	mov	r0, r4
 802a0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a0ec:	3a30      	subs	r2, #48	; 0x30
 802a0ee:	2a09      	cmp	r2, #9
 802a0f0:	d903      	bls.n	802a0fa <_vfiprintf_r+0x1ee>
 802a0f2:	2b00      	cmp	r3, #0
 802a0f4:	d0c5      	beq.n	802a082 <_vfiprintf_r+0x176>
 802a0f6:	9105      	str	r1, [sp, #20]
 802a0f8:	e7c3      	b.n	802a082 <_vfiprintf_r+0x176>
 802a0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 802a0fe:	4604      	mov	r4, r0
 802a100:	2301      	movs	r3, #1
 802a102:	e7f0      	b.n	802a0e6 <_vfiprintf_r+0x1da>
 802a104:	ab03      	add	r3, sp, #12
 802a106:	9300      	str	r3, [sp, #0]
 802a108:	462a      	mov	r2, r5
 802a10a:	4b16      	ldr	r3, [pc, #88]	; (802a164 <_vfiprintf_r+0x258>)
 802a10c:	a904      	add	r1, sp, #16
 802a10e:	4630      	mov	r0, r6
 802a110:	f7fb ff66 	bl	8025fe0 <_printf_float>
 802a114:	4607      	mov	r7, r0
 802a116:	1c78      	adds	r0, r7, #1
 802a118:	d1d6      	bne.n	802a0c8 <_vfiprintf_r+0x1bc>
 802a11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a11c:	07d9      	lsls	r1, r3, #31
 802a11e:	d405      	bmi.n	802a12c <_vfiprintf_r+0x220>
 802a120:	89ab      	ldrh	r3, [r5, #12]
 802a122:	059a      	lsls	r2, r3, #22
 802a124:	d402      	bmi.n	802a12c <_vfiprintf_r+0x220>
 802a126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a128:	f7fb fb24 	bl	8025774 <__retarget_lock_release_recursive>
 802a12c:	89ab      	ldrh	r3, [r5, #12]
 802a12e:	065b      	lsls	r3, r3, #25
 802a130:	f53f af12 	bmi.w	8029f58 <_vfiprintf_r+0x4c>
 802a134:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a136:	e711      	b.n	8029f5c <_vfiprintf_r+0x50>
 802a138:	ab03      	add	r3, sp, #12
 802a13a:	9300      	str	r3, [sp, #0]
 802a13c:	462a      	mov	r2, r5
 802a13e:	4b09      	ldr	r3, [pc, #36]	; (802a164 <_vfiprintf_r+0x258>)
 802a140:	a904      	add	r1, sp, #16
 802a142:	4630      	mov	r0, r6
 802a144:	f7fc f9d8 	bl	80264f8 <_printf_i>
 802a148:	e7e4      	b.n	802a114 <_vfiprintf_r+0x208>
 802a14a:	bf00      	nop
 802a14c:	0804769c 	.word	0x0804769c
 802a150:	080476bc 	.word	0x080476bc
 802a154:	0804767c 	.word	0x0804767c
 802a158:	08047e24 	.word	0x08047e24
 802a15c:	08047e2e 	.word	0x08047e2e
 802a160:	08025fe1 	.word	0x08025fe1
 802a164:	08029ee7 	.word	0x08029ee7
 802a168:	08047e2a 	.word	0x08047e2a

0802a16c <_scanf_chars>:
 802a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a170:	4615      	mov	r5, r2
 802a172:	688a      	ldr	r2, [r1, #8]
 802a174:	4680      	mov	r8, r0
 802a176:	460c      	mov	r4, r1
 802a178:	b932      	cbnz	r2, 802a188 <_scanf_chars+0x1c>
 802a17a:	698a      	ldr	r2, [r1, #24]
 802a17c:	2a00      	cmp	r2, #0
 802a17e:	bf0c      	ite	eq
 802a180:	2201      	moveq	r2, #1
 802a182:	f04f 32ff 	movne.w	r2, #4294967295
 802a186:	608a      	str	r2, [r1, #8]
 802a188:	6822      	ldr	r2, [r4, #0]
 802a18a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802a21c <_scanf_chars+0xb0>
 802a18e:	06d1      	lsls	r1, r2, #27
 802a190:	bf5f      	itttt	pl
 802a192:	681a      	ldrpl	r2, [r3, #0]
 802a194:	1d11      	addpl	r1, r2, #4
 802a196:	6019      	strpl	r1, [r3, #0]
 802a198:	6816      	ldrpl	r6, [r2, #0]
 802a19a:	2700      	movs	r7, #0
 802a19c:	69a0      	ldr	r0, [r4, #24]
 802a19e:	b188      	cbz	r0, 802a1c4 <_scanf_chars+0x58>
 802a1a0:	2801      	cmp	r0, #1
 802a1a2:	d107      	bne.n	802a1b4 <_scanf_chars+0x48>
 802a1a4:	682a      	ldr	r2, [r5, #0]
 802a1a6:	7811      	ldrb	r1, [r2, #0]
 802a1a8:	6962      	ldr	r2, [r4, #20]
 802a1aa:	5c52      	ldrb	r2, [r2, r1]
 802a1ac:	b952      	cbnz	r2, 802a1c4 <_scanf_chars+0x58>
 802a1ae:	2f00      	cmp	r7, #0
 802a1b0:	d031      	beq.n	802a216 <_scanf_chars+0xaa>
 802a1b2:	e022      	b.n	802a1fa <_scanf_chars+0x8e>
 802a1b4:	2802      	cmp	r0, #2
 802a1b6:	d120      	bne.n	802a1fa <_scanf_chars+0x8e>
 802a1b8:	682b      	ldr	r3, [r5, #0]
 802a1ba:	781b      	ldrb	r3, [r3, #0]
 802a1bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 802a1c0:	071b      	lsls	r3, r3, #28
 802a1c2:	d41a      	bmi.n	802a1fa <_scanf_chars+0x8e>
 802a1c4:	6823      	ldr	r3, [r4, #0]
 802a1c6:	06da      	lsls	r2, r3, #27
 802a1c8:	bf5e      	ittt	pl
 802a1ca:	682b      	ldrpl	r3, [r5, #0]
 802a1cc:	781b      	ldrbpl	r3, [r3, #0]
 802a1ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 802a1d2:	682a      	ldr	r2, [r5, #0]
 802a1d4:	686b      	ldr	r3, [r5, #4]
 802a1d6:	3201      	adds	r2, #1
 802a1d8:	602a      	str	r2, [r5, #0]
 802a1da:	68a2      	ldr	r2, [r4, #8]
 802a1dc:	3b01      	subs	r3, #1
 802a1de:	3a01      	subs	r2, #1
 802a1e0:	606b      	str	r3, [r5, #4]
 802a1e2:	3701      	adds	r7, #1
 802a1e4:	60a2      	str	r2, [r4, #8]
 802a1e6:	b142      	cbz	r2, 802a1fa <_scanf_chars+0x8e>
 802a1e8:	2b00      	cmp	r3, #0
 802a1ea:	dcd7      	bgt.n	802a19c <_scanf_chars+0x30>
 802a1ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a1f0:	4629      	mov	r1, r5
 802a1f2:	4640      	mov	r0, r8
 802a1f4:	4798      	blx	r3
 802a1f6:	2800      	cmp	r0, #0
 802a1f8:	d0d0      	beq.n	802a19c <_scanf_chars+0x30>
 802a1fa:	6823      	ldr	r3, [r4, #0]
 802a1fc:	f013 0310 	ands.w	r3, r3, #16
 802a200:	d105      	bne.n	802a20e <_scanf_chars+0xa2>
 802a202:	68e2      	ldr	r2, [r4, #12]
 802a204:	3201      	adds	r2, #1
 802a206:	60e2      	str	r2, [r4, #12]
 802a208:	69a2      	ldr	r2, [r4, #24]
 802a20a:	b102      	cbz	r2, 802a20e <_scanf_chars+0xa2>
 802a20c:	7033      	strb	r3, [r6, #0]
 802a20e:	6923      	ldr	r3, [r4, #16]
 802a210:	443b      	add	r3, r7
 802a212:	6123      	str	r3, [r4, #16]
 802a214:	2000      	movs	r0, #0
 802a216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a21a:	bf00      	nop
 802a21c:	08047579 	.word	0x08047579

0802a220 <_scanf_i>:
 802a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a224:	4698      	mov	r8, r3
 802a226:	4b76      	ldr	r3, [pc, #472]	; (802a400 <_scanf_i+0x1e0>)
 802a228:	460c      	mov	r4, r1
 802a22a:	4682      	mov	sl, r0
 802a22c:	4616      	mov	r6, r2
 802a22e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a232:	b087      	sub	sp, #28
 802a234:	ab03      	add	r3, sp, #12
 802a236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802a23a:	4b72      	ldr	r3, [pc, #456]	; (802a404 <_scanf_i+0x1e4>)
 802a23c:	69a1      	ldr	r1, [r4, #24]
 802a23e:	4a72      	ldr	r2, [pc, #456]	; (802a408 <_scanf_i+0x1e8>)
 802a240:	2903      	cmp	r1, #3
 802a242:	bf18      	it	ne
 802a244:	461a      	movne	r2, r3
 802a246:	68a3      	ldr	r3, [r4, #8]
 802a248:	9201      	str	r2, [sp, #4]
 802a24a:	1e5a      	subs	r2, r3, #1
 802a24c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802a250:	bf88      	it	hi
 802a252:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802a256:	4627      	mov	r7, r4
 802a258:	bf82      	ittt	hi
 802a25a:	eb03 0905 	addhi.w	r9, r3, r5
 802a25e:	f240 135d 	movwhi	r3, #349	; 0x15d
 802a262:	60a3      	strhi	r3, [r4, #8]
 802a264:	f857 3b1c 	ldr.w	r3, [r7], #28
 802a268:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802a26c:	bf98      	it	ls
 802a26e:	f04f 0900 	movls.w	r9, #0
 802a272:	6023      	str	r3, [r4, #0]
 802a274:	463d      	mov	r5, r7
 802a276:	f04f 0b00 	mov.w	fp, #0
 802a27a:	6831      	ldr	r1, [r6, #0]
 802a27c:	ab03      	add	r3, sp, #12
 802a27e:	7809      	ldrb	r1, [r1, #0]
 802a280:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802a284:	2202      	movs	r2, #2
 802a286:	f7d5 fff3 	bl	8000270 <memchr>
 802a28a:	b328      	cbz	r0, 802a2d8 <_scanf_i+0xb8>
 802a28c:	f1bb 0f01 	cmp.w	fp, #1
 802a290:	d159      	bne.n	802a346 <_scanf_i+0x126>
 802a292:	6862      	ldr	r2, [r4, #4]
 802a294:	b92a      	cbnz	r2, 802a2a2 <_scanf_i+0x82>
 802a296:	6822      	ldr	r2, [r4, #0]
 802a298:	2308      	movs	r3, #8
 802a29a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802a29e:	6063      	str	r3, [r4, #4]
 802a2a0:	6022      	str	r2, [r4, #0]
 802a2a2:	6822      	ldr	r2, [r4, #0]
 802a2a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802a2a8:	6022      	str	r2, [r4, #0]
 802a2aa:	68a2      	ldr	r2, [r4, #8]
 802a2ac:	1e51      	subs	r1, r2, #1
 802a2ae:	60a1      	str	r1, [r4, #8]
 802a2b0:	b192      	cbz	r2, 802a2d8 <_scanf_i+0xb8>
 802a2b2:	6832      	ldr	r2, [r6, #0]
 802a2b4:	1c51      	adds	r1, r2, #1
 802a2b6:	6031      	str	r1, [r6, #0]
 802a2b8:	7812      	ldrb	r2, [r2, #0]
 802a2ba:	f805 2b01 	strb.w	r2, [r5], #1
 802a2be:	6872      	ldr	r2, [r6, #4]
 802a2c0:	3a01      	subs	r2, #1
 802a2c2:	2a00      	cmp	r2, #0
 802a2c4:	6072      	str	r2, [r6, #4]
 802a2c6:	dc07      	bgt.n	802a2d8 <_scanf_i+0xb8>
 802a2c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802a2cc:	4631      	mov	r1, r6
 802a2ce:	4650      	mov	r0, sl
 802a2d0:	4790      	blx	r2
 802a2d2:	2800      	cmp	r0, #0
 802a2d4:	f040 8085 	bne.w	802a3e2 <_scanf_i+0x1c2>
 802a2d8:	f10b 0b01 	add.w	fp, fp, #1
 802a2dc:	f1bb 0f03 	cmp.w	fp, #3
 802a2e0:	d1cb      	bne.n	802a27a <_scanf_i+0x5a>
 802a2e2:	6863      	ldr	r3, [r4, #4]
 802a2e4:	b90b      	cbnz	r3, 802a2ea <_scanf_i+0xca>
 802a2e6:	230a      	movs	r3, #10
 802a2e8:	6063      	str	r3, [r4, #4]
 802a2ea:	6863      	ldr	r3, [r4, #4]
 802a2ec:	4947      	ldr	r1, [pc, #284]	; (802a40c <_scanf_i+0x1ec>)
 802a2ee:	6960      	ldr	r0, [r4, #20]
 802a2f0:	1ac9      	subs	r1, r1, r3
 802a2f2:	f000 f911 	bl	802a518 <__sccl>
 802a2f6:	f04f 0b00 	mov.w	fp, #0
 802a2fa:	68a3      	ldr	r3, [r4, #8]
 802a2fc:	6822      	ldr	r2, [r4, #0]
 802a2fe:	2b00      	cmp	r3, #0
 802a300:	d03d      	beq.n	802a37e <_scanf_i+0x15e>
 802a302:	6831      	ldr	r1, [r6, #0]
 802a304:	6960      	ldr	r0, [r4, #20]
 802a306:	f891 c000 	ldrb.w	ip, [r1]
 802a30a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802a30e:	2800      	cmp	r0, #0
 802a310:	d035      	beq.n	802a37e <_scanf_i+0x15e>
 802a312:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802a316:	d124      	bne.n	802a362 <_scanf_i+0x142>
 802a318:	0510      	lsls	r0, r2, #20
 802a31a:	d522      	bpl.n	802a362 <_scanf_i+0x142>
 802a31c:	f10b 0b01 	add.w	fp, fp, #1
 802a320:	f1b9 0f00 	cmp.w	r9, #0
 802a324:	d003      	beq.n	802a32e <_scanf_i+0x10e>
 802a326:	3301      	adds	r3, #1
 802a328:	f109 39ff 	add.w	r9, r9, #4294967295
 802a32c:	60a3      	str	r3, [r4, #8]
 802a32e:	6873      	ldr	r3, [r6, #4]
 802a330:	3b01      	subs	r3, #1
 802a332:	2b00      	cmp	r3, #0
 802a334:	6073      	str	r3, [r6, #4]
 802a336:	dd1b      	ble.n	802a370 <_scanf_i+0x150>
 802a338:	6833      	ldr	r3, [r6, #0]
 802a33a:	3301      	adds	r3, #1
 802a33c:	6033      	str	r3, [r6, #0]
 802a33e:	68a3      	ldr	r3, [r4, #8]
 802a340:	3b01      	subs	r3, #1
 802a342:	60a3      	str	r3, [r4, #8]
 802a344:	e7d9      	b.n	802a2fa <_scanf_i+0xda>
 802a346:	f1bb 0f02 	cmp.w	fp, #2
 802a34a:	d1ae      	bne.n	802a2aa <_scanf_i+0x8a>
 802a34c:	6822      	ldr	r2, [r4, #0]
 802a34e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802a352:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802a356:	d1bf      	bne.n	802a2d8 <_scanf_i+0xb8>
 802a358:	2310      	movs	r3, #16
 802a35a:	6063      	str	r3, [r4, #4]
 802a35c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a360:	e7a2      	b.n	802a2a8 <_scanf_i+0x88>
 802a362:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802a366:	6022      	str	r2, [r4, #0]
 802a368:	780b      	ldrb	r3, [r1, #0]
 802a36a:	f805 3b01 	strb.w	r3, [r5], #1
 802a36e:	e7de      	b.n	802a32e <_scanf_i+0x10e>
 802a370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a374:	4631      	mov	r1, r6
 802a376:	4650      	mov	r0, sl
 802a378:	4798      	blx	r3
 802a37a:	2800      	cmp	r0, #0
 802a37c:	d0df      	beq.n	802a33e <_scanf_i+0x11e>
 802a37e:	6823      	ldr	r3, [r4, #0]
 802a380:	05db      	lsls	r3, r3, #23
 802a382:	d50d      	bpl.n	802a3a0 <_scanf_i+0x180>
 802a384:	42bd      	cmp	r5, r7
 802a386:	d909      	bls.n	802a39c <_scanf_i+0x17c>
 802a388:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802a38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802a390:	4632      	mov	r2, r6
 802a392:	4650      	mov	r0, sl
 802a394:	4798      	blx	r3
 802a396:	f105 39ff 	add.w	r9, r5, #4294967295
 802a39a:	464d      	mov	r5, r9
 802a39c:	42bd      	cmp	r5, r7
 802a39e:	d02d      	beq.n	802a3fc <_scanf_i+0x1dc>
 802a3a0:	6822      	ldr	r2, [r4, #0]
 802a3a2:	f012 0210 	ands.w	r2, r2, #16
 802a3a6:	d113      	bne.n	802a3d0 <_scanf_i+0x1b0>
 802a3a8:	702a      	strb	r2, [r5, #0]
 802a3aa:	6863      	ldr	r3, [r4, #4]
 802a3ac:	9e01      	ldr	r6, [sp, #4]
 802a3ae:	4639      	mov	r1, r7
 802a3b0:	4650      	mov	r0, sl
 802a3b2:	47b0      	blx	r6
 802a3b4:	6821      	ldr	r1, [r4, #0]
 802a3b6:	f8d8 3000 	ldr.w	r3, [r8]
 802a3ba:	f011 0f20 	tst.w	r1, #32
 802a3be:	d013      	beq.n	802a3e8 <_scanf_i+0x1c8>
 802a3c0:	1d1a      	adds	r2, r3, #4
 802a3c2:	f8c8 2000 	str.w	r2, [r8]
 802a3c6:	681b      	ldr	r3, [r3, #0]
 802a3c8:	6018      	str	r0, [r3, #0]
 802a3ca:	68e3      	ldr	r3, [r4, #12]
 802a3cc:	3301      	adds	r3, #1
 802a3ce:	60e3      	str	r3, [r4, #12]
 802a3d0:	1bed      	subs	r5, r5, r7
 802a3d2:	44ab      	add	fp, r5
 802a3d4:	6925      	ldr	r5, [r4, #16]
 802a3d6:	445d      	add	r5, fp
 802a3d8:	6125      	str	r5, [r4, #16]
 802a3da:	2000      	movs	r0, #0
 802a3dc:	b007      	add	sp, #28
 802a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3e2:	f04f 0b00 	mov.w	fp, #0
 802a3e6:	e7ca      	b.n	802a37e <_scanf_i+0x15e>
 802a3e8:	1d1a      	adds	r2, r3, #4
 802a3ea:	f8c8 2000 	str.w	r2, [r8]
 802a3ee:	681b      	ldr	r3, [r3, #0]
 802a3f0:	f011 0f01 	tst.w	r1, #1
 802a3f4:	bf14      	ite	ne
 802a3f6:	8018      	strhne	r0, [r3, #0]
 802a3f8:	6018      	streq	r0, [r3, #0]
 802a3fa:	e7e6      	b.n	802a3ca <_scanf_i+0x1aa>
 802a3fc:	2001      	movs	r0, #1
 802a3fe:	e7ed      	b.n	802a3dc <_scanf_i+0x1bc>
 802a400:	0802a9d8 	.word	0x0802a9d8
 802a404:	08027931 	.word	0x08027931
 802a408:	08027835 	.word	0x08027835
 802a40c:	08047e4e 	.word	0x08047e4e

0802a410 <_putc_r>:
 802a410:	b570      	push	{r4, r5, r6, lr}
 802a412:	460d      	mov	r5, r1
 802a414:	4614      	mov	r4, r2
 802a416:	4606      	mov	r6, r0
 802a418:	b118      	cbz	r0, 802a422 <_putc_r+0x12>
 802a41a:	6983      	ldr	r3, [r0, #24]
 802a41c:	b90b      	cbnz	r3, 802a422 <_putc_r+0x12>
 802a41e:	f7fa ffd1 	bl	80253c4 <__sinit>
 802a422:	4b1c      	ldr	r3, [pc, #112]	; (802a494 <_putc_r+0x84>)
 802a424:	429c      	cmp	r4, r3
 802a426:	d124      	bne.n	802a472 <_putc_r+0x62>
 802a428:	6874      	ldr	r4, [r6, #4]
 802a42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a42c:	07d8      	lsls	r0, r3, #31
 802a42e:	d405      	bmi.n	802a43c <_putc_r+0x2c>
 802a430:	89a3      	ldrh	r3, [r4, #12]
 802a432:	0599      	lsls	r1, r3, #22
 802a434:	d402      	bmi.n	802a43c <_putc_r+0x2c>
 802a436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a438:	f7fb f99a 	bl	8025770 <__retarget_lock_acquire_recursive>
 802a43c:	68a3      	ldr	r3, [r4, #8]
 802a43e:	3b01      	subs	r3, #1
 802a440:	2b00      	cmp	r3, #0
 802a442:	60a3      	str	r3, [r4, #8]
 802a444:	da05      	bge.n	802a452 <_putc_r+0x42>
 802a446:	69a2      	ldr	r2, [r4, #24]
 802a448:	4293      	cmp	r3, r2
 802a44a:	db1c      	blt.n	802a486 <_putc_r+0x76>
 802a44c:	b2eb      	uxtb	r3, r5
 802a44e:	2b0a      	cmp	r3, #10
 802a450:	d019      	beq.n	802a486 <_putc_r+0x76>
 802a452:	6823      	ldr	r3, [r4, #0]
 802a454:	1c5a      	adds	r2, r3, #1
 802a456:	6022      	str	r2, [r4, #0]
 802a458:	701d      	strb	r5, [r3, #0]
 802a45a:	b2ed      	uxtb	r5, r5
 802a45c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a45e:	07da      	lsls	r2, r3, #31
 802a460:	d405      	bmi.n	802a46e <_putc_r+0x5e>
 802a462:	89a3      	ldrh	r3, [r4, #12]
 802a464:	059b      	lsls	r3, r3, #22
 802a466:	d402      	bmi.n	802a46e <_putc_r+0x5e>
 802a468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a46a:	f7fb f983 	bl	8025774 <__retarget_lock_release_recursive>
 802a46e:	4628      	mov	r0, r5
 802a470:	bd70      	pop	{r4, r5, r6, pc}
 802a472:	4b09      	ldr	r3, [pc, #36]	; (802a498 <_putc_r+0x88>)
 802a474:	429c      	cmp	r4, r3
 802a476:	d101      	bne.n	802a47c <_putc_r+0x6c>
 802a478:	68b4      	ldr	r4, [r6, #8]
 802a47a:	e7d6      	b.n	802a42a <_putc_r+0x1a>
 802a47c:	4b07      	ldr	r3, [pc, #28]	; (802a49c <_putc_r+0x8c>)
 802a47e:	429c      	cmp	r4, r3
 802a480:	bf08      	it	eq
 802a482:	68f4      	ldreq	r4, [r6, #12]
 802a484:	e7d1      	b.n	802a42a <_putc_r+0x1a>
 802a486:	4629      	mov	r1, r5
 802a488:	4622      	mov	r2, r4
 802a48a:	4630      	mov	r0, r6
 802a48c:	f7fd fc98 	bl	8027dc0 <__swbuf_r>
 802a490:	4605      	mov	r5, r0
 802a492:	e7e3      	b.n	802a45c <_putc_r+0x4c>
 802a494:	0804769c 	.word	0x0804769c
 802a498:	080476bc 	.word	0x080476bc
 802a49c:	0804767c 	.word	0x0804767c

0802a4a0 <_read_r>:
 802a4a0:	b538      	push	{r3, r4, r5, lr}
 802a4a2:	4d07      	ldr	r5, [pc, #28]	; (802a4c0 <_read_r+0x20>)
 802a4a4:	4604      	mov	r4, r0
 802a4a6:	4608      	mov	r0, r1
 802a4a8:	4611      	mov	r1, r2
 802a4aa:	2200      	movs	r2, #0
 802a4ac:	602a      	str	r2, [r5, #0]
 802a4ae:	461a      	mov	r2, r3
 802a4b0:	f7dd ffba 	bl	8008428 <_read>
 802a4b4:	1c43      	adds	r3, r0, #1
 802a4b6:	d102      	bne.n	802a4be <_read_r+0x1e>
 802a4b8:	682b      	ldr	r3, [r5, #0]
 802a4ba:	b103      	cbz	r3, 802a4be <_read_r+0x1e>
 802a4bc:	6023      	str	r3, [r4, #0]
 802a4be:	bd38      	pop	{r3, r4, r5, pc}
 802a4c0:	2003013c 	.word	0x2003013c

0802a4c4 <__fpclassifyd>:
 802a4c4:	ec51 0b10 	vmov	r0, r1, d0
 802a4c8:	b510      	push	{r4, lr}
 802a4ca:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802a4ce:	460b      	mov	r3, r1
 802a4d0:	d019      	beq.n	802a506 <__fpclassifyd+0x42>
 802a4d2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802a4d6:	490e      	ldr	r1, [pc, #56]	; (802a510 <__fpclassifyd+0x4c>)
 802a4d8:	428a      	cmp	r2, r1
 802a4da:	d90e      	bls.n	802a4fa <__fpclassifyd+0x36>
 802a4dc:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802a4e0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802a4e4:	428a      	cmp	r2, r1
 802a4e6:	d908      	bls.n	802a4fa <__fpclassifyd+0x36>
 802a4e8:	4a0a      	ldr	r2, [pc, #40]	; (802a514 <__fpclassifyd+0x50>)
 802a4ea:	4213      	tst	r3, r2
 802a4ec:	d007      	beq.n	802a4fe <__fpclassifyd+0x3a>
 802a4ee:	4294      	cmp	r4, r2
 802a4f0:	d107      	bne.n	802a502 <__fpclassifyd+0x3e>
 802a4f2:	fab0 f080 	clz	r0, r0
 802a4f6:	0940      	lsrs	r0, r0, #5
 802a4f8:	bd10      	pop	{r4, pc}
 802a4fa:	2004      	movs	r0, #4
 802a4fc:	e7fc      	b.n	802a4f8 <__fpclassifyd+0x34>
 802a4fe:	2003      	movs	r0, #3
 802a500:	e7fa      	b.n	802a4f8 <__fpclassifyd+0x34>
 802a502:	2000      	movs	r0, #0
 802a504:	e7f8      	b.n	802a4f8 <__fpclassifyd+0x34>
 802a506:	2800      	cmp	r0, #0
 802a508:	d1ee      	bne.n	802a4e8 <__fpclassifyd+0x24>
 802a50a:	2002      	movs	r0, #2
 802a50c:	e7f4      	b.n	802a4f8 <__fpclassifyd+0x34>
 802a50e:	bf00      	nop
 802a510:	7fdfffff 	.word	0x7fdfffff
 802a514:	7ff00000 	.word	0x7ff00000

0802a518 <__sccl>:
 802a518:	b570      	push	{r4, r5, r6, lr}
 802a51a:	780b      	ldrb	r3, [r1, #0]
 802a51c:	4604      	mov	r4, r0
 802a51e:	2b5e      	cmp	r3, #94	; 0x5e
 802a520:	bf0b      	itete	eq
 802a522:	784b      	ldrbeq	r3, [r1, #1]
 802a524:	1c48      	addne	r0, r1, #1
 802a526:	1c88      	addeq	r0, r1, #2
 802a528:	2200      	movne	r2, #0
 802a52a:	bf08      	it	eq
 802a52c:	2201      	moveq	r2, #1
 802a52e:	1e61      	subs	r1, r4, #1
 802a530:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a534:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a538:	42a9      	cmp	r1, r5
 802a53a:	d1fb      	bne.n	802a534 <__sccl+0x1c>
 802a53c:	b90b      	cbnz	r3, 802a542 <__sccl+0x2a>
 802a53e:	3801      	subs	r0, #1
 802a540:	bd70      	pop	{r4, r5, r6, pc}
 802a542:	f082 0201 	eor.w	r2, r2, #1
 802a546:	54e2      	strb	r2, [r4, r3]
 802a548:	4605      	mov	r5, r0
 802a54a:	4628      	mov	r0, r5
 802a54c:	f810 1b01 	ldrb.w	r1, [r0], #1
 802a550:	292d      	cmp	r1, #45	; 0x2d
 802a552:	d006      	beq.n	802a562 <__sccl+0x4a>
 802a554:	295d      	cmp	r1, #93	; 0x5d
 802a556:	d0f3      	beq.n	802a540 <__sccl+0x28>
 802a558:	b909      	cbnz	r1, 802a55e <__sccl+0x46>
 802a55a:	4628      	mov	r0, r5
 802a55c:	e7f0      	b.n	802a540 <__sccl+0x28>
 802a55e:	460b      	mov	r3, r1
 802a560:	e7f1      	b.n	802a546 <__sccl+0x2e>
 802a562:	786e      	ldrb	r6, [r5, #1]
 802a564:	2e5d      	cmp	r6, #93	; 0x5d
 802a566:	d0fa      	beq.n	802a55e <__sccl+0x46>
 802a568:	42b3      	cmp	r3, r6
 802a56a:	dcf8      	bgt.n	802a55e <__sccl+0x46>
 802a56c:	3502      	adds	r5, #2
 802a56e:	4619      	mov	r1, r3
 802a570:	3101      	adds	r1, #1
 802a572:	428e      	cmp	r6, r1
 802a574:	5462      	strb	r2, [r4, r1]
 802a576:	dcfb      	bgt.n	802a570 <__sccl+0x58>
 802a578:	1af1      	subs	r1, r6, r3
 802a57a:	3901      	subs	r1, #1
 802a57c:	1c58      	adds	r0, r3, #1
 802a57e:	42b3      	cmp	r3, r6
 802a580:	bfa8      	it	ge
 802a582:	2100      	movge	r1, #0
 802a584:	1843      	adds	r3, r0, r1
 802a586:	e7e0      	b.n	802a54a <__sccl+0x32>

0802a588 <__submore>:
 802a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a58c:	460c      	mov	r4, r1
 802a58e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a594:	4299      	cmp	r1, r3
 802a596:	d11d      	bne.n	802a5d4 <__submore+0x4c>
 802a598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a59c:	f7fb fc1a 	bl	8025dd4 <_malloc_r>
 802a5a0:	b918      	cbnz	r0, 802a5aa <__submore+0x22>
 802a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 802a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a5ae:	63a3      	str	r3, [r4, #56]	; 0x38
 802a5b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a5b4:	6360      	str	r0, [r4, #52]	; 0x34
 802a5b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a5ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a5be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a5c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a5c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a5ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a5ce:	6020      	str	r0, [r4, #0]
 802a5d0:	2000      	movs	r0, #0
 802a5d2:	e7e8      	b.n	802a5a6 <__submore+0x1e>
 802a5d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a5d6:	0077      	lsls	r7, r6, #1
 802a5d8:	463a      	mov	r2, r7
 802a5da:	f000 f857 	bl	802a68c <_realloc_r>
 802a5de:	4605      	mov	r5, r0
 802a5e0:	2800      	cmp	r0, #0
 802a5e2:	d0de      	beq.n	802a5a2 <__submore+0x1a>
 802a5e4:	eb00 0806 	add.w	r8, r0, r6
 802a5e8:	4601      	mov	r1, r0
 802a5ea:	4632      	mov	r2, r6
 802a5ec:	4640      	mov	r0, r8
 802a5ee:	f7fb f8e3 	bl	80257b8 <memcpy>
 802a5f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a5f6:	f8c4 8000 	str.w	r8, [r4]
 802a5fa:	e7e9      	b.n	802a5d0 <__submore+0x48>

0802a5fc <abort>:
 802a5fc:	b508      	push	{r3, lr}
 802a5fe:	2006      	movs	r0, #6
 802a600:	f000 f89c 	bl	802a73c <raise>
 802a604:	2001      	movs	r0, #1
 802a606:	f7dd ff09 	bl	800841c <_exit>
 802a60a:	Address 0x000000000802a60a is out of bounds.


0802a60c <__env_lock>:
 802a60c:	4801      	ldr	r0, [pc, #4]	; (802a614 <__env_lock+0x8>)
 802a60e:	f7fb b8af 	b.w	8025770 <__retarget_lock_acquire_recursive>
 802a612:	bf00      	nop
 802a614:	2003012c 	.word	0x2003012c

0802a618 <__env_unlock>:
 802a618:	4801      	ldr	r0, [pc, #4]	; (802a620 <__env_unlock+0x8>)
 802a61a:	f7fb b8ab 	b.w	8025774 <__retarget_lock_release_recursive>
 802a61e:	bf00      	nop
 802a620:	2003012c 	.word	0x2003012c

0802a624 <_fstat_r>:
 802a624:	b538      	push	{r3, r4, r5, lr}
 802a626:	4d07      	ldr	r5, [pc, #28]	; (802a644 <_fstat_r+0x20>)
 802a628:	2300      	movs	r3, #0
 802a62a:	4604      	mov	r4, r0
 802a62c:	4608      	mov	r0, r1
 802a62e:	4611      	mov	r1, r2
 802a630:	602b      	str	r3, [r5, #0]
 802a632:	f7dd ff0b 	bl	800844c <_fstat>
 802a636:	1c43      	adds	r3, r0, #1
 802a638:	d102      	bne.n	802a640 <_fstat_r+0x1c>
 802a63a:	682b      	ldr	r3, [r5, #0]
 802a63c:	b103      	cbz	r3, 802a640 <_fstat_r+0x1c>
 802a63e:	6023      	str	r3, [r4, #0]
 802a640:	bd38      	pop	{r3, r4, r5, pc}
 802a642:	bf00      	nop
 802a644:	2003013c 	.word	0x2003013c

0802a648 <_isatty_r>:
 802a648:	b538      	push	{r3, r4, r5, lr}
 802a64a:	4d06      	ldr	r5, [pc, #24]	; (802a664 <_isatty_r+0x1c>)
 802a64c:	2300      	movs	r3, #0
 802a64e:	4604      	mov	r4, r0
 802a650:	4608      	mov	r0, r1
 802a652:	602b      	str	r3, [r5, #0]
 802a654:	f7dd ff00 	bl	8008458 <_isatty>
 802a658:	1c43      	adds	r3, r0, #1
 802a65a:	d102      	bne.n	802a662 <_isatty_r+0x1a>
 802a65c:	682b      	ldr	r3, [r5, #0]
 802a65e:	b103      	cbz	r3, 802a662 <_isatty_r+0x1a>
 802a660:	6023      	str	r3, [r4, #0]
 802a662:	bd38      	pop	{r3, r4, r5, pc}
 802a664:	2003013c 	.word	0x2003013c

0802a668 <__ascii_mbtowc>:
 802a668:	b082      	sub	sp, #8
 802a66a:	b901      	cbnz	r1, 802a66e <__ascii_mbtowc+0x6>
 802a66c:	a901      	add	r1, sp, #4
 802a66e:	b142      	cbz	r2, 802a682 <__ascii_mbtowc+0x1a>
 802a670:	b14b      	cbz	r3, 802a686 <__ascii_mbtowc+0x1e>
 802a672:	7813      	ldrb	r3, [r2, #0]
 802a674:	600b      	str	r3, [r1, #0]
 802a676:	7812      	ldrb	r2, [r2, #0]
 802a678:	1e10      	subs	r0, r2, #0
 802a67a:	bf18      	it	ne
 802a67c:	2001      	movne	r0, #1
 802a67e:	b002      	add	sp, #8
 802a680:	4770      	bx	lr
 802a682:	4610      	mov	r0, r2
 802a684:	e7fb      	b.n	802a67e <__ascii_mbtowc+0x16>
 802a686:	f06f 0001 	mvn.w	r0, #1
 802a68a:	e7f8      	b.n	802a67e <__ascii_mbtowc+0x16>

0802a68c <_realloc_r>:
 802a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a690:	4680      	mov	r8, r0
 802a692:	4614      	mov	r4, r2
 802a694:	460e      	mov	r6, r1
 802a696:	b921      	cbnz	r1, 802a6a2 <_realloc_r+0x16>
 802a698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a69c:	4611      	mov	r1, r2
 802a69e:	f7fb bb99 	b.w	8025dd4 <_malloc_r>
 802a6a2:	b92a      	cbnz	r2, 802a6b0 <_realloc_r+0x24>
 802a6a4:	f7fb fb2a 	bl	8025cfc <_free_r>
 802a6a8:	4625      	mov	r5, r4
 802a6aa:	4628      	mov	r0, r5
 802a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6b0:	f000 f86d 	bl	802a78e <_malloc_usable_size_r>
 802a6b4:	4284      	cmp	r4, r0
 802a6b6:	4607      	mov	r7, r0
 802a6b8:	d802      	bhi.n	802a6c0 <_realloc_r+0x34>
 802a6ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a6be:	d812      	bhi.n	802a6e6 <_realloc_r+0x5a>
 802a6c0:	4621      	mov	r1, r4
 802a6c2:	4640      	mov	r0, r8
 802a6c4:	f7fb fb86 	bl	8025dd4 <_malloc_r>
 802a6c8:	4605      	mov	r5, r0
 802a6ca:	2800      	cmp	r0, #0
 802a6cc:	d0ed      	beq.n	802a6aa <_realloc_r+0x1e>
 802a6ce:	42bc      	cmp	r4, r7
 802a6d0:	4622      	mov	r2, r4
 802a6d2:	4631      	mov	r1, r6
 802a6d4:	bf28      	it	cs
 802a6d6:	463a      	movcs	r2, r7
 802a6d8:	f7fb f86e 	bl	80257b8 <memcpy>
 802a6dc:	4631      	mov	r1, r6
 802a6de:	4640      	mov	r0, r8
 802a6e0:	f7fb fb0c 	bl	8025cfc <_free_r>
 802a6e4:	e7e1      	b.n	802a6aa <_realloc_r+0x1e>
 802a6e6:	4635      	mov	r5, r6
 802a6e8:	e7df      	b.n	802a6aa <_realloc_r+0x1e>

0802a6ea <_raise_r>:
 802a6ea:	291f      	cmp	r1, #31
 802a6ec:	b538      	push	{r3, r4, r5, lr}
 802a6ee:	4604      	mov	r4, r0
 802a6f0:	460d      	mov	r5, r1
 802a6f2:	d904      	bls.n	802a6fe <_raise_r+0x14>
 802a6f4:	2316      	movs	r3, #22
 802a6f6:	6003      	str	r3, [r0, #0]
 802a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 802a6fc:	bd38      	pop	{r3, r4, r5, pc}
 802a6fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a700:	b112      	cbz	r2, 802a708 <_raise_r+0x1e>
 802a702:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a706:	b94b      	cbnz	r3, 802a71c <_raise_r+0x32>
 802a708:	4620      	mov	r0, r4
 802a70a:	f000 f831 	bl	802a770 <_getpid_r>
 802a70e:	462a      	mov	r2, r5
 802a710:	4601      	mov	r1, r0
 802a712:	4620      	mov	r0, r4
 802a714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a718:	f000 b818 	b.w	802a74c <_kill_r>
 802a71c:	2b01      	cmp	r3, #1
 802a71e:	d00a      	beq.n	802a736 <_raise_r+0x4c>
 802a720:	1c59      	adds	r1, r3, #1
 802a722:	d103      	bne.n	802a72c <_raise_r+0x42>
 802a724:	2316      	movs	r3, #22
 802a726:	6003      	str	r3, [r0, #0]
 802a728:	2001      	movs	r0, #1
 802a72a:	e7e7      	b.n	802a6fc <_raise_r+0x12>
 802a72c:	2400      	movs	r4, #0
 802a72e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a732:	4628      	mov	r0, r5
 802a734:	4798      	blx	r3
 802a736:	2000      	movs	r0, #0
 802a738:	e7e0      	b.n	802a6fc <_raise_r+0x12>
 802a73a:	Address 0x000000000802a73a is out of bounds.


0802a73c <raise>:
 802a73c:	4b02      	ldr	r3, [pc, #8]	; (802a748 <raise+0xc>)
 802a73e:	4601      	mov	r1, r0
 802a740:	6818      	ldr	r0, [r3, #0]
 802a742:	f7ff bfd2 	b.w	802a6ea <_raise_r>
 802a746:	bf00      	nop
 802a748:	200004c4 	.word	0x200004c4

0802a74c <_kill_r>:
 802a74c:	b538      	push	{r3, r4, r5, lr}
 802a74e:	4d07      	ldr	r5, [pc, #28]	; (802a76c <_kill_r+0x20>)
 802a750:	2300      	movs	r3, #0
 802a752:	4604      	mov	r4, r0
 802a754:	4608      	mov	r0, r1
 802a756:	4611      	mov	r1, r2
 802a758:	602b      	str	r3, [r5, #0]
 802a75a:	f7dd fe57 	bl	800840c <_kill>
 802a75e:	1c43      	adds	r3, r0, #1
 802a760:	d102      	bne.n	802a768 <_kill_r+0x1c>
 802a762:	682b      	ldr	r3, [r5, #0]
 802a764:	b103      	cbz	r3, 802a768 <_kill_r+0x1c>
 802a766:	6023      	str	r3, [r4, #0]
 802a768:	bd38      	pop	{r3, r4, r5, pc}
 802a76a:	bf00      	nop
 802a76c:	2003013c 	.word	0x2003013c

0802a770 <_getpid_r>:
 802a770:	f7dd be4a 	b.w	8008408 <_getpid>

0802a774 <__ascii_wctomb>:
 802a774:	b149      	cbz	r1, 802a78a <__ascii_wctomb+0x16>
 802a776:	2aff      	cmp	r2, #255	; 0xff
 802a778:	bf85      	ittet	hi
 802a77a:	238a      	movhi	r3, #138	; 0x8a
 802a77c:	6003      	strhi	r3, [r0, #0]
 802a77e:	700a      	strbls	r2, [r1, #0]
 802a780:	f04f 30ff 	movhi.w	r0, #4294967295
 802a784:	bf98      	it	ls
 802a786:	2001      	movls	r0, #1
 802a788:	4770      	bx	lr
 802a78a:	4608      	mov	r0, r1
 802a78c:	4770      	bx	lr

0802a78e <_malloc_usable_size_r>:
 802a78e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a792:	1f18      	subs	r0, r3, #4
 802a794:	2b00      	cmp	r3, #0
 802a796:	bfbc      	itt	lt
 802a798:	580b      	ldrlt	r3, [r1, r0]
 802a79a:	18c0      	addlt	r0, r0, r3
 802a79c:	4770      	bx	lr
 802a79e:	Address 0x000000000802a79e is out of bounds.


0802a7a0 <_init>:
 802a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7a2:	bf00      	nop
 802a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7a6:	bc08      	pop	{r3}
 802a7a8:	469e      	mov	lr, r3
 802a7aa:	4770      	bx	lr

0802a7ac <_fini>:
 802a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7ae:	bf00      	nop
 802a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7b2:	bc08      	pop	{r3}
 802a7b4:	469e      	mov	lr, r3
 802a7b6:	4770      	bx	lr
